{
	"switch_num":	42,
	"case_num":	[68, 2, 93, 2229, 93, 1, 93, 3, 1, 158, 158, 158, 158, 158, 116, 92, 2, 116, 23, 116, 2, 2, 116, 1, 1372, 6, 1675, 1, 2, 1675, 1, 1675, 3, 1675, 918, 1675, 2, 2, 1372, 2, 1675, 1],
	"switch_cluster":	[[3, 5, 8, 20, 21, 23, 27, 30, 34, 36, 37, 41], [1, 7, 16, 18, 25, 28, 32, 39], [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 17, 19, 22, 24, 26, 29, 31, 33, 35, 38, 40], []],
	"priority":	[{
			"file":	"Include/pyatomic.h",
			"line":	61,
			"primary_score":	999711,
			"second_score":	131264
		}, {
			"file":	"Include/pyatomic.h",
			"line":	70,
			"primary_score":	999711,
			"second_score":	131263
		}, {
			"file":	"Modules/_codecsmodule.c",
			"line":	848,
			"primary_score":	999972,
			"second_score":	56485856
		}, {
			"file":	"Modules/_codecsmodule.c",
			"line":	849,
			"primary_score":	999972,
			"second_score":	56485855
		}, {
			"file":	"Modules/_codecsmodule.c",
			"line":	851,
			"primary_score":	999972,
			"second_score":	56485854
		}, {
			"file":	"Modules/_codecsmodule.c",
			"line":	855,
			"primary_score":	999972,
			"second_score":	56485769
		}, {
			"file":	"Modules/_codecsmodule.c",
			"line":	856,
			"primary_score":	999972,
			"second_score":	56485765
		}, {
			"file":	"Modules/_codecsmodule.c",
			"line":	858,
			"primary_score":	999972,
			"second_score":	56485764
		}, {
			"file":	"Modules/_codecsmodule.c",
			"line":	863,
			"primary_score":	999972,
			"second_score":	56485610
		}, {
			"file":	"Modules/_codecsmodule.c",
			"line":	864,
			"primary_score":	999972,
			"second_score":	56485607
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	344,
			"primary_score":	999736,
			"second_score":	59784431
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	345,
			"primary_score":	999736,
			"second_score":	59784503
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	346,
			"primary_score":	999736,
			"second_score":	59784425
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	417,
			"primary_score":	999736,
			"second_score":	59784689
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	418,
			"primary_score":	999736,
			"second_score":	59784688
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	419,
			"primary_score":	999736,
			"second_score":	59784687
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	421,
			"primary_score":	999736,
			"second_score":	59784686
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	423,
			"primary_score":	999736,
			"second_score":	59784616
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	424,
			"primary_score":	999736,
			"second_score":	59784595
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	426,
			"primary_score":	999736,
			"second_score":	59784594
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	427,
			"primary_score":	999736,
			"second_score":	59784593
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	428,
			"primary_score":	999736,
			"second_score":	59784592
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	429,
			"primary_score":	999736,
			"second_score":	59784591
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	430,
			"primary_score":	999736,
			"second_score":	59784590
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	436,
			"primary_score":	999759,
			"second_score":	60267285
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	437,
			"primary_score":	999759,
			"second_score":	60267284
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	438,
			"primary_score":	999759,
			"second_score":	60267283
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	439,
			"primary_score":	999759,
			"second_score":	60267282
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	440,
			"primary_score":	999759,
			"second_score":	60267281
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	441,
			"primary_score":	999759,
			"second_score":	60267280
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	442,
			"primary_score":	999759,
			"second_score":	60267279
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	444,
			"primary_score":	999759,
			"second_score":	60267278
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	445,
			"primary_score":	999759,
			"second_score":	60283591
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	446,
			"primary_score":	999759,
			"second_score":	60283580
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	450,
			"primary_score":	999759,
			"second_score":	60267277
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	454,
			"primary_score":	999759,
			"second_score":	60267276
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	455,
			"primary_score":	999759,
			"second_score":	60267275
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	456,
			"primary_score":	999759,
			"second_score":	60267274
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	457,
			"primary_score":	999759,
			"second_score":	60267273
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	458,
			"primary_score":	999759,
			"second_score":	60267272
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	466,
			"primary_score":	999759,
			"second_score":	60267271
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	467,
			"primary_score":	999759,
			"second_score":	60267250
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	469,
			"primary_score":	999759,
			"second_score":	60267249
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	470,
			"primary_score":	999759,
			"second_score":	60267248
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	471,
			"primary_score":	999759,
			"second_score":	60267247
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	472,
			"primary_score":	999759,
			"second_score":	60267246
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	473,
			"primary_score":	999759,
			"second_score":	60267245
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	474,
			"primary_score":	999759,
			"second_score":	60266448
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	475,
			"primary_score":	999759,
			"second_score":	60266414
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	477,
			"primary_score":	999759,
			"second_score":	60266413
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	478,
			"primary_score":	999759,
			"second_score":	60266342
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	479,
			"primary_score":	999759,
			"second_score":	60266339
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	485,
			"primary_score":	999736,
			"second_score":	59785389
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	486,
			"primary_score":	999736,
			"second_score":	59785388
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	487,
			"primary_score":	999736,
			"second_score":	59785387
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	489,
			"primary_score":	999736,
			"second_score":	59785386
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	491,
			"primary_score":	999736,
			"second_score":	59785316
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	492,
			"primary_score":	999736,
			"second_score":	59785290
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	494,
			"primary_score":	999736,
			"second_score":	59785289
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	495,
			"primary_score":	999736,
			"second_score":	59785288
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	496,
			"primary_score":	999736,
			"second_score":	59785287
		}, {
			"file":	"Modules/_functoolsmodule.c",
			"line":	497,
			"primary_score":	999736,
			"second_score":	59785286
		}, {
			"file":	"Modules/_io/_iomodule.c",
			"line":	617,
			"primary_score":	999713,
			"second_score":	151486
		}, {
			"file":	"Modules/_io/_iomodule.c",
			"line":	618,
			"primary_score":	999713,
			"second_score":	151483
		}, {
			"file":	"Modules/_io/_iomodule.c",
			"line":	620,
			"primary_score":	999717,
			"second_score":	151476
		}, {
			"file":	"Modules/_io/_iomodule.c",
			"line":	621,
			"primary_score":	999713,
			"second_score":	141326
		}, {
			"file":	"Modules/_io/_iomodule.c",
			"line":	622,
			"primary_score":	999713,
			"second_score":	141325
		}, {
			"file":	"Modules/_io/_iomodule.c",
			"line":	623,
			"primary_score":	999713,
			"second_score":	133796
		}, {
			"file":	"Modules/_io/_iomodule.c",
			"line":	624,
			"primary_score":	999713,
			"second_score":	133789
		}, {
			"file":	"Modules/_io/_iomodule.c",
			"line":	629,
			"primary_score":	999713,
			"second_score":	151487
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	364,
			"primary_score":	999711,
			"second_score":	170724
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	365,
			"primary_score":	999711,
			"second_score":	170723
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	367,
			"primary_score":	999711,
			"second_score":	170552
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	368,
			"primary_score":	999711,
			"second_score":	170544
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	369,
			"primary_score":	999711,
			"second_score":	170543
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	371,
			"primary_score":	999711,
			"second_score":	170542
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	372,
			"primary_score":	999711,
			"second_score":	170535
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	373,
			"primary_score":	999711,
			"second_score":	170534
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	374,
			"primary_score":	999711,
			"second_score":	170532
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	377,
			"primary_score":	999711,
			"second_score":	170531
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	378,
			"primary_score":	999711,
			"second_score":	170530
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	379,
			"primary_score":	999711,
			"second_score":	170521
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	382,
			"primary_score":	999711,
			"second_score":	170520
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	383,
			"primary_score":	999711,
			"second_score":	170518
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	440,
			"primary_score":	999711,
			"second_score":	171472
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	441,
			"primary_score":	999711,
			"second_score":	171471
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	442,
			"primary_score":	999711,
			"second_score":	171470
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	443,
			"primary_score":	999711,
			"second_score":	171469
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	444,
			"primary_score":	999711,
			"second_score":	171418
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	446,
			"primary_score":	999711,
			"second_score":	171417
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	447,
			"primary_score":	999711,
			"second_score":	171412
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	448,
			"primary_score":	999711,
			"second_score":	171409
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	454,
			"primary_score":	999711,
			"second_score":	170656
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	455,
			"primary_score":	999711,
			"second_score":	170655
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	461,
			"primary_score":	999711,
			"second_score":	171503
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	462,
			"primary_score":	999711,
			"second_score":	171502
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	464,
			"primary_score":	999711,
			"second_score":	171501
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	465,
			"primary_score":	999711,
			"second_score":	171500
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	468,
			"primary_score":	999711,
			"second_score":	171473
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	469,
			"primary_score":	999711,
			"second_score":	171408
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	471,
			"primary_score":	999711,
			"second_score":	171407
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	477,
			"primary_score":	999711,
			"second_score":	171406
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	485,
			"primary_score":	999711,
			"second_score":	171405
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	486,
			"primary_score":	999711,
			"second_score":	171396
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	487,
			"primary_score":	999711,
			"second_score":	171163
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	489,
			"primary_score":	999711,
			"second_score":	171136
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	492,
			"primary_score":	999711,
			"second_score":	171135
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	494,
			"primary_score":	999711,
			"second_score":	171130
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	496,
			"primary_score":	999711,
			"second_score":	170900
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	497,
			"primary_score":	999711,
			"second_score":	170899
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	498,
			"primary_score":	999711,
			"second_score":	170891
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	757,
			"primary_score":	999711,
			"second_score":	171268
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	759,
			"primary_score":	999711,
			"second_score":	171267
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	760,
			"primary_score":	999711,
			"second_score":	171266
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	762,
			"primary_score":	999711,
			"second_score":	171264
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	764,
			"primary_score":	999711,
			"second_score":	171237
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	765,
			"primary_score":	999711,
			"second_score":	171232
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	774,
			"primary_score":	999711,
			"second_score":	171231
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	776,
			"primary_score":	999711,
			"second_score":	171222
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	884,
			"primary_score":	999955,
			"second_score":	56322196
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	885,
			"primary_score":	999955,
			"second_score":	56322195
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	886,
			"primary_score":	999955,
			"second_score":	56322194
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	887,
			"primary_score":	999955,
			"second_score":	56322170
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	889,
			"primary_score":	999955,
			"second_score":	56322169
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	890,
			"primary_score":	999955,
			"second_score":	56322168
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	938,
			"primary_score":	999937,
			"second_score":	56338730
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	939,
			"primary_score":	999937,
			"second_score":	56338729
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	940,
			"primary_score":	999937,
			"second_score":	56338728
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	941,
			"primary_score":	999937,
			"second_score":	56338727
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	943,
			"primary_score":	999937,
			"second_score":	56338726
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	948,
			"primary_score":	999937,
			"second_score":	56338724
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	949,
			"primary_score":	999937,
			"second_score":	56338723
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	951,
			"primary_score":	999937,
			"second_score":	56338722
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	952,
			"primary_score":	999937,
			"second_score":	56338721
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	953,
			"primary_score":	999937,
			"second_score":	56338720
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	954,
			"primary_score":	999946,
			"second_score":	56338719
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	955,
			"primary_score":	999946,
			"second_score":	56338687
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	956,
			"primary_score":	999946,
			"second_score":	56338686
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	957,
			"primary_score":	999946,
			"second_score":	56338685
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	959,
			"primary_score":	999937,
			"second_score":	56342959
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	966,
			"primary_score":	999937,
			"second_score":	56342958
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	970,
			"primary_score":	999937,
			"second_score":	56342931
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	976,
			"primary_score":	999937,
			"second_score":	56342930
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	977,
			"primary_score":	999937,
			"second_score":	56342906
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	979,
			"primary_score":	999937,
			"second_score":	56342905
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	993,
			"primary_score":	999937,
			"second_score":	56342904
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	994,
			"primary_score":	999937,
			"second_score":	56342903
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	995,
			"primary_score":	999937,
			"second_score":	56342901
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	996,
			"primary_score":	999937,
			"second_score":	56341974
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	998,
			"primary_score":	999937,
			"second_score":	56341973
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1000,
			"primary_score":	999938,
			"second_score":	56341972
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1002,
			"primary_score":	999938,
			"second_score":	56341971
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1003,
			"primary_score":	999938,
			"second_score":	56341970
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1004,
			"primary_score":	999938,
			"second_score":	56341969
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1005,
			"primary_score":	999938,
			"second_score":	56341968
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1006,
			"primary_score":	999938,
			"second_score":	56341957
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1007,
			"primary_score":	999942,
			"second_score":	56341956
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1008,
			"primary_score":	999942,
			"second_score":	56341924
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1010,
			"primary_score":	999942,
			"second_score":	56341923
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1011,
			"primary_score":	999942,
			"second_score":	56341922
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1035,
			"primary_score":	999941,
			"second_score":	56341894
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1036,
			"primary_score":	999937,
			"second_score":	56341889
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1038,
			"primary_score":	999937,
			"second_score":	56341854
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1039,
			"primary_score":	999937,
			"second_score":	56341853
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1040,
			"primary_score":	999937,
			"second_score":	56341845
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1041,
			"primary_score":	999946,
			"second_score":	56338683
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1042,
			"primary_score":	999937,
			"second_score":	56338682
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1048,
			"primary_score":	999939,
			"second_score":	56338793
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1050,
			"primary_score":	999939,
			"second_score":	56338792
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1051,
			"primary_score":	999939,
			"second_score":	56338791
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1053,
			"primary_score":	999939,
			"second_score":	56338731
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1074,
			"primary_score":	999930,
			"second_score":	56335742
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1075,
			"primary_score":	999930,
			"second_score":	56335741
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1076,
			"primary_score":	999930,
			"second_score":	56335740
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1078,
			"primary_score":	999930,
			"second_score":	56335739
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1079,
			"primary_score":	999930,
			"second_score":	56335738
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1082,
			"primary_score":	999930,
			"second_score":	56335653
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1088,
			"primary_score":	999930,
			"second_score":	56335652
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1090,
			"primary_score":	999931,
			"second_score":	56335650
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1091,
			"primary_score":	999931,
			"second_score":	56335625
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1094,
			"primary_score":	999931,
			"second_score":	56335624
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1095,
			"primary_score":	999933,
			"second_score":	56335623
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1102,
			"primary_score":	999933,
			"second_score":	56335622
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1103,
			"primary_score":	999933,
			"second_score":	56335621
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1104,
			"primary_score":	999933,
			"second_score":	56335620
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1105,
			"primary_score":	999946,
			"second_score":	56335619
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1106,
			"primary_score":	999946,
			"second_score":	56335618
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1107,
			"primary_score":	999946,
			"second_score":	56335617
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1110,
			"primary_score":	999946,
			"second_score":	56335616
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1111,
			"primary_score":	999946,
			"second_score":	56335615
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1112,
			"primary_score":	999946,
			"second_score":	56335614
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1733,
			"primary_score":	999961,
			"second_score":	7378307
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1750,
			"primary_score":	999711,
			"second_score":	171236
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1751,
			"primary_score":	999711,
			"second_score":	171235
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1753,
			"primary_score":	999711,
			"second_score":	171234
		}, {
			"file":	"Modules/_io/bufferedio.c",
			"line":	1754,
			"primary_score":	999711,
			"second_score":	171233
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	71,
			"primary_score":	999711,
			"second_score":	171265
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	131,
			"primary_score":	999711,
			"second_score":	170961
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	132,
			"primary_score":	999711,
			"second_score":	170960
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	133,
			"primary_score":	999711,
			"second_score":	170959
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	443,
			"primary_score":	999711,
			"second_score":	170188
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	444,
			"primary_score":	999711,
			"second_score":	170187
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	446,
			"primary_score":	999711,
			"second_score":	170062
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	447,
			"primary_score":	999711,
			"second_score":	170054
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	449,
			"primary_score":	999711,
			"second_score":	170053
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	450,
			"primary_score":	999711,
			"second_score":	169963
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	503,
			"primary_score":	999950,
			"second_score":	56326738
		}, {
			"file":	"Modules/_io/fileio.c",
			"line":	1092,
			"primary_score":	999711,
			"second_score":	170120
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	198,
			"primary_score":	999711,
			"second_score":	170186
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	199,
			"primary_score":	999711,
			"second_score":	170185
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	200,
			"primary_score":	999711,
			"second_score":	170184
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	201,
			"primary_score":	999711,
			"second_score":	170183
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	205,
			"primary_score":	999711,
			"second_score":	170182
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	206,
			"primary_score":	999711,
			"second_score":	170181
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	207,
			"primary_score":	999711,
			"second_score":	170180
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	209,
			"primary_score":	999711,
			"second_score":	170179
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	212,
			"primary_score":	999711,
			"second_score":	170158
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	213,
			"primary_score":	999711,
			"second_score":	170107
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	216,
			"primary_score":	999711,
			"second_score":	170106
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	217,
			"primary_score":	999711,
			"second_score":	170102
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	218,
			"primary_score":	999711,
			"second_score":	170099
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	221,
			"primary_score":	999711,
			"second_score":	170098
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	227,
			"primary_score":	999711,
			"second_score":	170771
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	230,
			"primary_score":	999711,
			"second_score":	170770
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	232,
			"primary_score":	999711,
			"second_score":	170097
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	233,
			"primary_score":	999711,
			"second_score":	170065
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	234,
			"primary_score":	999711,
			"second_score":	170064
		}, {
			"file":	"Modules/_io/iobase.c",
			"line":	256,
			"primary_score":	999711,
			"second_score":	170063
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	72,
			"primary_score":	999965,
			"second_score":	7735690
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	76,
			"primary_score":	999942,
			"second_score":	7737216
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	80,
			"primary_score":	999946,
			"second_score":	7739196
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	111,
			"primary_score":	999929,
			"second_score":	7737240
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	112,
			"primary_score":	999929,
			"second_score":	7737239
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	113,
			"primary_score":	999929,
			"second_score":	7737238
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	114,
			"primary_score":	999929,
			"second_score":	7737237
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	115,
			"primary_score":	999929,
			"second_score":	7737236
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	117,
			"primary_score":	999929,
			"second_score":	7737235
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	122,
			"primary_score":	999929,
			"second_score":	7737234
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	123,
			"primary_score":	999929,
			"second_score":	7737233
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	125,
			"primary_score":	999929,
			"second_score":	7737232
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	131,
			"primary_score":	999929,
			"second_score":	7737231
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	134,
			"primary_score":	999929,
			"second_score":	7737230
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	135,
			"primary_score":	999929,
			"second_score":	7737229
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	136,
			"primary_score":	999929,
			"second_score":	7737228
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	138,
			"primary_score":	999929,
			"second_score":	7737227
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	143,
			"primary_score":	999929,
			"second_score":	7737226
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	148,
			"primary_score":	999929,
			"second_score":	7737225
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	149,
			"primary_score":	999929,
			"second_score":	7737224
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	153,
			"primary_score":	999929,
			"second_score":	7737215
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	169,
			"primary_score":	999929,
			"second_score":	7737214
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	170,
			"primary_score":	999929,
			"second_score":	7737213
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	173,
			"primary_score":	999929,
			"second_score":	7737212
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	174,
			"primary_score":	999929,
			"second_score":	7737211
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	177,
			"primary_score":	999929,
			"second_score":	7737210
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	178,
			"primary_score":	999929,
			"second_score":	7737207
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	191,
			"primary_score":	999945,
			"second_score":	7735994
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	192,
			"primary_score":	999945,
			"second_score":	7735992
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	193,
			"primary_score":	999945,
			"second_score":	7735990
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	457,
			"primary_score":	999942,
			"second_score":	7737248
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	459,
			"primary_score":	999942,
			"second_score":	7737247
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	460,
			"primary_score":	999942,
			"second_score":	7737245
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	465,
			"primary_score":	999942,
			"second_score":	7737244
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	466,
			"primary_score":	999942,
			"second_score":	7737242
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	468,
			"primary_score":	999942,
			"second_score":	7737241
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	471,
			"primary_score":	999942,
			"second_score":	7737206
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	483,
			"primary_score":	999995,
			"second_score":	7735698
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	485,
			"primary_score":	999995,
			"second_score":	7735697
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	487,
			"primary_score":	999995,
			"second_score":	7735682
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	488,
			"primary_score":	999995,
			"second_score":	7735675
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	489,
			"primary_score":	999995,
			"second_score":	7735673
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	490,
			"primary_score":	999995,
			"second_score":	7735671
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	496,
			"primary_score":	999744,
			"second_score":	6646620
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	497,
			"primary_score":	999744,
			"second_score":	6646618
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	503,
			"primary_score":	999983,
			"second_score":	5797266
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	504,
			"primary_score":	999983,
			"second_score":	5797264
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	510,
			"primary_score":	999712,
			"second_score":	5796853
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	511,
			"primary_score":	999712,
			"second_score":	5796845
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	512,
			"primary_score":	999712,
			"second_score":	5796844
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	513,
			"primary_score":	999712,
			"second_score":	5796843
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	514,
			"primary_score":	999712,
			"second_score":	5796841
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	516,
			"primary_score":	999712,
			"second_score":	5796840
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	517,
			"primary_score":	999712,
			"second_score":	5796833
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	518,
			"primary_score":	999712,
			"second_score":	5796831
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	519,
			"primary_score":	999712,
			"second_score":	5796829
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	520,
			"primary_score":	999712,
			"second_score":	5796827
		}, {
			"file":	"Modules/_io/stringio.c",
			"line":	522,
			"primary_score":	999712,
			"second_score":	5796826
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1086,
			"primary_score":	999711,
			"second_score":	170732
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1087,
			"primary_score":	999711,
			"second_score":	170731
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1088,
			"primary_score":	999711,
			"second_score":	170495
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1089,
			"primary_score":	999711,
			"second_score":	170424
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1090,
			"primary_score":	999711,
			"second_score":	170236
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1091,
			"primary_score":	999711,
			"second_score":	170234
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1092,
			"primary_score":	999711,
			"second_score":	170227
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1093,
			"primary_score":	999711,
			"second_score":	170225
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1094,
			"primary_score":	999711,
			"second_score":	170223
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1095,
			"primary_score":	999711,
			"second_score":	170221
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1096,
			"primary_score":	999711,
			"second_score":	170195
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1097,
			"primary_score":	999711,
			"second_score":	169940
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1106,
			"primary_score":	999711,
			"second_score":	169939
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1107,
			"primary_score":	999711,
			"second_score":	169931
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1109,
			"primary_score":	999711,
			"second_score":	169930
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1110,
			"primary_score":	999711,
			"second_score":	169883
		}, {
			"file":	"Modules/_io/textio.c",
			"line":	1247,
			"primary_score":	999984,
			"second_score":	7379707
		}, {
			"file":	"Modules/_sre.c",
			"line":	470,
			"primary_score":	999954,
			"second_score":	3282982
		}, {
			"file":	"Modules/_sre.c",
			"line":	543,
			"primary_score":	999970,
			"second_score":	49160987
		}, {
			"file":	"Modules/_sre.c",
			"line":	544,
			"primary_score":	999970,
			"second_score":	49160986
		}, {
			"file":	"Modules/_sre.c",
			"line":	549,
			"primary_score":	999934,
			"second_score":	3283165
		}, {
			"file":	"Modules/_sre.c",
			"line":	550,
			"primary_score":	999934,
			"second_score":	3283164
		}, {
			"file":	"Modules/_sre.c",
			"line":	552,
			"primary_score":	999934,
			"second_score":	3283163
		}, {
			"file":	"Modules/_sre.c",
			"line":	982,
			"primary_score":	999933,
			"second_score":	3282671
		}, {
			"file":	"Modules/_sre.c",
			"line":	983,
			"primary_score":	999933,
			"second_score":	3282668
		}, {
			"file":	"Modules/_sre.c",
			"line":	984,
			"primary_score":	999933,
			"second_score":	3282667
		}, {
			"file":	"Modules/_sre.c",
			"line":	986,
			"primary_score":	999933,
			"second_score":	3282666
		}, {
			"file":	"Modules/_sre.c",
			"line":	987,
			"primary_score":	999933,
			"second_score":	3282523
		}, {
			"file":	"Modules/_sre.c",
			"line":	991,
			"primary_score":	999933,
			"second_score":	3282522
		}, {
			"file":	"Modules/_sre.c",
			"line":	995,
			"primary_score":	999933,
			"second_score":	3282521
		}, {
			"file":	"Modules/_sre.c",
			"line":	996,
			"primary_score":	999933,
			"second_score":	3282520
		}, {
			"file":	"Modules/_sre.c",
			"line":	997,
			"primary_score":	999933,
			"second_score":	3282428
		}, {
			"file":	"Modules/_sre.c",
			"line":	1003,
			"primary_score":	999935,
			"second_score":	3282427
		}, {
			"file":	"Modules/_sre.c",
			"line":	1005,
			"primary_score":	999935,
			"second_score":	3282426
		}, {
			"file":	"Modules/_sre.c",
			"line":	1007,
			"primary_score":	999937,
			"second_score":	3282423
		}, {
			"file":	"Modules/_sre.c",
			"line":	1009,
			"primary_score":	999937,
			"second_score":	3282422
		}, {
			"file":	"Modules/_sre.c",
			"line":	1025,
			"primary_score":	999978,
			"second_score":	3282441
		}, {
			"file":	"Modules/_sre.c",
			"line":	1045,
			"primary_score":	999972,
			"second_score":	49160974
		}, {
			"file":	"Modules/_sre.c",
			"line":	1046,
			"primary_score":	999972,
			"second_score":	49160973
		}, {
			"file":	"Modules/_sre.c",
			"line":	1389,
			"primary_score":	999954,
			"second_score":	3282503
		}, {
			"file":	"Modules/_sre.c",
			"line":	1390,
			"primary_score":	999954,
			"second_score":	3282502
		}, {
			"file":	"Modules/_sre.c",
			"line":	1391,
			"primary_score":	999992,
			"second_score":	3294549
		}, {
			"file":	"Modules/_sre.c",
			"line":	1392,
			"primary_score":	999954,
			"second_score":	3282501
		}, {
			"file":	"Modules/_sre.c",
			"line":	1393,
			"primary_score":	999954,
			"second_score":	3282451
		}, {
			"file":	"Modules/_sre.c",
			"line":	1394,
			"primary_score":	999956,
			"second_score":	3282447
		}, {
			"file":	"Modules/_sre.c",
			"line":	1395,
			"primary_score":	999956,
			"second_score":	3282446
		}, {
			"file":	"Modules/_sre.c",
			"line":	1448,
			"primary_score":	999933,
			"second_score":	3282429
		}, {
			"file":	"Modules/_sre.c",
			"line":	1469,
			"primary_score":	999954,
			"second_score":	3282452
		}, {
			"file":	"Modules/_sre.c",
			"line":	1599,
			"primary_score":	999934,
			"second_score":	3295933
		}, {
			"file":	"Modules/_sre.c",
			"line":	1600,
			"primary_score":	999934,
			"second_score":	3282707
		}, {
			"file":	"Modules/_sre.c",
			"line":	1601,
			"primary_score":	999934,
			"second_score":	3282706
		}, {
			"file":	"Modules/_sre.c",
			"line":	1602,
			"primary_score":	999934,
			"second_score":	3282705
		}, {
			"file":	"Modules/_sre.c",
			"line":	1603,
			"primary_score":	999934,
			"second_score":	3282413
		}, {
			"file":	"Modules/_sre.c",
			"line":	1607,
			"primary_score":	999920,
			"second_score":	3282412
		}, {
			"file":	"Modules/_sre.c",
			"line":	2047,
			"primary_score":	999942,
			"second_score":	56337391
		}, {
			"file":	"Modules/_sre.c",
			"line":	2048,
			"primary_score":	999942,
			"second_score":	56337390
		}, {
			"file":	"Modules/_sre.c",
			"line":	2049,
			"primary_score":	999942,
			"second_score":	56337389
		}, {
			"file":	"Modules/_sre.c",
			"line":	2050,
			"primary_score":	999942,
			"second_score":	56337388
		}, {
			"file":	"Modules/_sre.c",
			"line":	2052,
			"primary_score":	999942,
			"second_score":	56337387
		}, {
			"file":	"Modules/_sre.c",
			"line":	2053,
			"primary_score":	999942,
			"second_score":	56337386
		}, {
			"file":	"Modules/_sre.c",
			"line":	2054,
			"primary_score":	999942,
			"second_score":	56337385
		}, {
			"file":	"Modules/_sre.c",
			"line":	2055,
			"primary_score":	999942,
			"second_score":	56337384
		}, {
			"file":	"Modules/_sre.c",
			"line":	2056,
			"primary_score":	999942,
			"second_score":	56337383
		}, {
			"file":	"Modules/_sre.c",
			"line":	2060,
			"primary_score":	999942,
			"second_score":	56337302
		}, {
			"file":	"Modules/_sre.c",
			"line":	2061,
			"primary_score":	999942,
			"second_score":	56337264
		}, {
			"file":	"Modules/_sre.c",
			"line":	2064,
			"primary_score":	999942,
			"second_score":	56337263
		}, {
			"file":	"Modules/_sre.c",
			"line":	2065,
			"primary_score":	999942,
			"second_score":	56337239
		}, {
			"file":	"Modules/_sre.c",
			"line":	2070,
			"primary_score":	999942,
			"second_score":	56337238
		}, {
			"file":	"Modules/_sre.c",
			"line":	2072,
			"primary_score":	999942,
			"second_score":	56337237
		}, {
			"file":	"Modules/_sre.c",
			"line":	2074,
			"primary_score":	999942,
			"second_score":	56337236
		}, {
			"file":	"Modules/_sre.c",
			"line":	2076,
			"primary_score":	999942,
			"second_score":	56337229
		}, {
			"file":	"Modules/_sre.c",
			"line":	2078,
			"primary_score":	999942,
			"second_score":	56337228
		}, {
			"file":	"Modules/_sre.c",
			"line":	2082,
			"primary_score":	999942,
			"second_score":	56337227
		}, {
			"file":	"Modules/_sre.c",
			"line":	2086,
			"primary_score":	999942,
			"second_score":	56337149
		}, {
			"file":	"Modules/_sre.c",
			"line":	2089,
			"primary_score":	999942,
			"second_score":	56337133
		}, {
			"file":	"Modules/_sre.c",
			"line":	2090,
			"primary_score":	999942,
			"second_score":	56337132
		}, {
			"file":	"Modules/_sre.c",
			"line":	2091,
			"primary_score":	999942,
			"second_score":	56337131
		}, {
			"file":	"Modules/_sre.c",
			"line":	2137,
			"primary_score":	999942,
			"second_score":	56337130
		}, {
			"file":	"Modules/_sre.c",
			"line":	2138,
			"primary_score":	999942,
			"second_score":	56337121
		}, {
			"file":	"Modules/faulthandler.c",
			"line":	391,
			"primary_score":	999712,
			"second_score":	174657
		}, {
			"file":	"Modules/faulthandler.c",
			"line":	1105,
			"primary_score":	999711,
			"second_score":	169860
		}, {
			"file":	"Modules/faulthandler.c",
			"line":	1106,
			"primary_score":	999711,
			"second_score":	169859
		}, {
			"file":	"Modules/faulthandler.c",
			"line":	1107,
			"primary_score":	999711,
			"second_score":	169857
		}, {
			"file":	"Modules/gcmodule.c",
			"line":	1432,
			"primary_score":	999711,
			"second_score":	131811
		}, {
			"file":	"Modules/gcmodule.c",
			"line":	1433,
			"primary_score":	999711,
			"second_score":	132042
		}, {
			"file":	"Modules/gcmodule.c",
			"line":	1506,
			"primary_score":	999711,
			"second_score":	44917
		}, {
			"file":	"Modules/gcmodule.c",
			"line":	1507,
			"primary_score":	999711,
			"second_score":	44916
		}, {
			"file":	"Modules/gcmodule.c",
			"line":	1509,
			"primary_score":	999711,
			"second_score":	44915
		}, {
			"file":	"Modules/gcmodule.c",
			"line":	1512,
			"primary_score":	999711,
			"second_score":	44914
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	769,
			"primary_score":	999996,
			"second_score":	9640441
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	770,
			"primary_score":	999996,
			"second_score":	9640440
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	771,
			"primary_score":	999996,
			"second_score":	9640439
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	773,
			"primary_score":	999996,
			"second_score":	9640421
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	774,
			"primary_score":	999996,
			"second_score":	9640415
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	775,
			"primary_score":	999996,
			"second_score":	9640409
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	777,
			"primary_score":	999996,
			"second_score":	9640408
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	778,
			"primary_score":	999996,
			"second_score":	9640407
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	779,
			"primary_score":	999996,
			"second_score":	9640406
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	780,
			"primary_score":	999996,
			"second_score":	9640405
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	781,
			"primary_score":	999996,
			"second_score":	9640404
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	787,
			"primary_score":	999996,
			"second_score":	9640403
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	793,
			"primary_score":	999996,
			"second_score":	9640402
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	796,
			"primary_score":	999996,
			"second_score":	9640401
		}, {
			"file":	"Modules/mathmodule.c",
			"line":	852,
			"primary_score":	999996,
			"second_score":	9640442
		}, {
			"file":	"Objects/abstract.c",
			"line":	99,
			"primary_score":	999731,
			"second_score":	59943721
		}, {
			"file":	"Objects/abstract.c",
			"line":	100,
			"primary_score":	999731,
			"second_score":	59943617
		}, {
			"file":	"Objects/abstract.c",
			"line":	101,
			"primary_score":	999731,
			"second_score":	59943594
		}, {
			"file":	"Objects/abstract.c",
			"line":	107,
			"primary_score":	999731,
			"second_score":	59943593
		}, {
			"file":	"Objects/abstract.c",
			"line":	108,
			"primary_score":	999731,
			"second_score":	59943583
		}, {
			"file":	"Objects/abstract.c",
			"line":	109,
			"primary_score":	999731,
			"second_score":	59943580
		}, {
			"file":	"Objects/abstract.c",
			"line":	802,
			"primary_score":	999994,
			"second_score":	51601781
		}, {
			"file":	"Objects/abstract.c",
			"line":	808,
			"primary_score":	999994,
			"second_score":	51600733
		}, {
			"file":	"Objects/abstract.c",
			"line":	910,
			"primary_score":	999969,
			"second_score":	51840035
		}, {
			"file":	"Objects/abstract.c",
			"line":	927,
			"primary_score":	999995,
			"second_score":	51601782
		}, {
			"file":	"Objects/abstract.c",
			"line":	982,
			"primary_score":	999949,
			"second_score":	52679519
		}, {
			"file":	"Objects/abstract.c",
			"line":	1146,
			"primary_score":	999998,
			"second_score":	9630782
		}, {
			"file":	"Objects/abstract.c",
			"line":	1152,
			"primary_score":	999989,
			"second_score":	9791473
		}, {
			"file":	"Objects/abstract.c",
			"line":	1154,
			"primary_score":	999989,
			"second_score":	9791472
		}, {
			"file":	"Objects/abstract.c",
			"line":	1156,
			"primary_score":	999989,
			"second_score":	9791471
		}, {
			"file":	"Objects/abstract.c",
			"line":	1157,
			"primary_score":	999989,
			"second_score":	9791470
		}, {
			"file":	"Objects/abstract.c",
			"line":	1158,
			"primary_score":	999989,
			"second_score":	9791469
		}, {
			"file":	"Objects/abstract.c",
			"line":	1166,
			"primary_score":	999977,
			"second_score":	9510839
		}, {
			"file":	"Objects/abstract.c",
			"line":	1168,
			"primary_score":	999977,
			"second_score":	9510838
		}, {
			"file":	"Objects/abstract.c",
			"line":	1170,
			"primary_score":	999977,
			"second_score":	9510837
		}, {
			"file":	"Objects/abstract.c",
			"line":	1171,
			"primary_score":	999977,
			"second_score":	9510836
		}, {
			"file":	"Objects/abstract.c",
			"line":	1172,
			"primary_score":	999977,
			"second_score":	9895597
		}, {
			"file":	"Objects/abstract.c",
			"line":	1174,
			"primary_score":	999998,
			"second_score":	9510835
		}, {
			"file":	"Objects/abstract.c",
			"line":	1755,
			"primary_score":	999962,
			"second_score":	48425929
		}, {
			"file":	"Objects/abstract.c",
			"line":	1756,
			"primary_score":	999962,
			"second_score":	48425814
		}, {
			"file":	"Objects/abstract.c",
			"line":	1760,
			"primary_score":	999963,
			"second_score":	48425813
		}, {
			"file":	"Objects/abstract.c",
			"line":	1761,
			"primary_score":	999963,
			"second_score":	48425791
		}, {
			"file":	"Objects/abstract.c",
			"line":	1763,
			"primary_score":	999963,
			"second_score":	48425790
		}, {
			"file":	"Objects/abstract.c",
			"line":	1764,
			"primary_score":	999963,
			"second_score":	48425745
		}, {
			"file":	"Objects/abstract.c",
			"line":	1768,
			"primary_score":	999963,
			"second_score":	48425744
		}, {
			"file":	"Objects/abstract.c",
			"line":	1769,
			"primary_score":	999963,
			"second_score":	47942730
		}, {
			"file":	"Objects/abstract.c",
			"line":	1770,
			"primary_score":	999963,
			"second_score":	47942708
		}, {
			"file":	"Objects/abstract.c",
			"line":	1771,
			"primary_score":	999963,
			"second_score":	47942707
		}, {
			"file":	"Objects/abstract.c",
			"line":	1773,
			"primary_score":	999963,
			"second_score":	47942691
		}, {
			"file":	"Objects/abstract.c",
			"line":	1775,
			"primary_score":	999963,
			"second_score":	47942732
		}, {
			"file":	"Objects/abstract.c",
			"line":	1796,
			"primary_score":	999963,
			"second_score":	47942731
		}, {
			"file":	"Objects/abstract.c",
			"line":	1800,
			"primary_score":	999963,
			"second_score":	47942690
		}, {
			"file":	"Objects/abstract.c",
			"line":	1804,
			"primary_score":	999971,
			"second_score":	47942687
		}, {
			"file":	"Objects/abstract.c",
			"line":	1805,
			"primary_score":	999963,
			"second_score":	47942668
		}, {
			"file":	"Objects/abstract.c",
			"line":	2143,
			"primary_score":	999711,
			"second_score":	170987
		}, {
			"file":	"Objects/abstract.c",
			"line":	2145,
			"primary_score":	999711,
			"second_score":	170986
		}, {
			"file":	"Objects/abstract.c",
			"line":	2146,
			"primary_score":	999711,
			"second_score":	170985
		}, {
			"file":	"Objects/abstract.c",
			"line":	2147,
			"primary_score":	999711,
			"second_score":	170984
		}, {
			"file":	"Objects/abstract.c",
			"line":	2149,
			"primary_score":	999711,
			"second_score":	170970
		}, {
			"file":	"Objects/abstract.c",
			"line":	2150,
			"primary_score":	999711,
			"second_score":	170829
		}, {
			"file":	"Objects/abstract.c",
			"line":	2151,
			"primary_score":	999711,
			"second_score":	170800
		}, {
			"file":	"Objects/abstract.c",
			"line":	2155,
			"primary_score":	999711,
			"second_score":	170799
		}, {
			"file":	"Objects/abstract.c",
			"line":	2165,
			"primary_score":	999711,
			"second_score":	171533
		}, {
			"file":	"Objects/abstract.c",
			"line":	2167,
			"primary_score":	999711,
			"second_score":	171532
		}, {
			"file":	"Objects/abstract.c",
			"line":	2170,
			"primary_score":	999711,
			"second_score":	171531
		}, {
			"file":	"Objects/abstract.c",
			"line":	2181,
			"primary_score":	999711,
			"second_score":	171530
		}, {
			"file":	"Objects/abstract.c",
			"line":	2183,
			"primary_score":	999711,
			"second_score":	170859
		}, {
			"file":	"Objects/abstract.c",
			"line":	2185,
			"primary_score":	999711,
			"second_score":	170856
		}, {
			"file":	"Objects/abstract.c",
			"line":	2279,
			"primary_score":	999711,
			"second_score":	171547
		}, {
			"file":	"Objects/abstract.c",
			"line":	2284,
			"primary_score":	999711,
			"second_score":	171546
		}, {
			"file":	"Objects/abstract.c",
			"line":	2289,
			"primary_score":	999711,
			"second_score":	171543
		}, {
			"file":	"Objects/abstract.c",
			"line":	2295,
			"primary_score":	999711,
			"second_score":	171542
		}, {
			"file":	"Objects/abstract.c",
			"line":	2297,
			"primary_score":	999711,
			"second_score":	171534
		}, {
			"file":	"Objects/abstract.c",
			"line":	2299,
			"primary_score":	999711,
			"second_score":	170855
		}, {
			"file":	"Objects/abstract.c",
			"line":	2301,
			"primary_score":	999711,
			"second_score":	170854
		}, {
			"file":	"Objects/abstract.c",
			"line":	2303,
			"primary_score":	999711,
			"second_score":	170830
		}, {
			"file":	"Objects/abstract.c",
			"line":	2310,
			"primary_score":	999711,
			"second_score":	171005
		}, {
			"file":	"Objects/abstract.c",
			"line":	2311,
			"primary_score":	999711,
			"second_score":	171004
		}, {
			"file":	"Objects/abstract.c",
			"line":	2312,
			"primary_score":	999711,
			"second_score":	171003
		}, {
			"file":	"Objects/abstract.c",
			"line":	2314,
			"primary_score":	999711,
			"second_score":	171002
		}, {
			"file":	"Objects/abstract.c",
			"line":	2316,
			"primary_score":	999711,
			"second_score":	171001
		}, {
			"file":	"Objects/abstract.c",
			"line":	2318,
			"primary_score":	999711,
			"second_score":	171000
		}, {
			"file":	"Objects/abstract.c",
			"line":	2319,
			"primary_score":	999711,
			"second_score":	170992
		}, {
			"file":	"Objects/abstract.c",
			"line":	2326,
			"primary_score":	999711,
			"second_score":	170991
		}, {
			"file":	"Objects/abstract.c",
			"line":	2332,
			"primary_score":	999711,
			"second_score":	171129
		}, {
			"file":	"Objects/abstract.c",
			"line":	2333,
			"primary_score":	999711,
			"second_score":	171128
		}, {
			"file":	"Objects/abstract.c",
			"line":	2335,
			"primary_score":	999711,
			"second_score":	171127
		}, {
			"file":	"Objects/abstract.c",
			"line":	2338,
			"primary_score":	999711,
			"second_score":	171126
		}, {
			"file":	"Objects/abstract.c",
			"line":	2339,
			"primary_score":	999711,
			"second_score":	171008
		}, {
			"file":	"Objects/abstract.c",
			"line":	2343,
			"primary_score":	999711,
			"second_score":	171007
		}, {
			"file":	"Objects/abstract.c",
			"line":	2344,
			"primary_score":	999711,
			"second_score":	171006
		}, {
			"file":	"Objects/abstract.c",
			"line":	2345,
			"primary_score":	999711,
			"second_score":	170990
		}, {
			"file":	"Objects/abstract.c",
			"line":	2346,
			"primary_score":	999711,
			"second_score":	170989
		}, {
			"file":	"Objects/abstract.c",
			"line":	2350,
			"primary_score":	999711,
			"second_score":	170988
		}, {
			"file":	"Objects/abstract.c",
			"line":	2351,
			"primary_score":	999711,
			"second_score":	170798
		}, {
			"file":	"Objects/abstract.c",
			"line":	2352,
			"primary_score":	999711,
			"second_score":	170795
		}, {
			"file":	"Objects/abstract.c",
			"line":	2354,
			"primary_score":	999711,
			"second_score":	170772
		}, {
			"file":	"Objects/abstract.c",
			"line":	2676,
			"primary_score":	999729,
			"second_score":	7719800
		}, {
			"file":	"Objects/boolobject.c",
			"line":	14,
			"primary_score":	999970,
			"second_score":	9092998
		}, {
			"file":	"Objects/boolobject.c",
			"line":	16,
			"primary_score":	999970,
			"second_score":	9092997
		}, {
			"file":	"Objects/boolobject.c",
			"line":	17,
			"primary_score":	999970,
			"second_score":	9193769
		}, {
			"file":	"Objects/boolobject.c",
			"line":	20,
			"primary_score":	999985,
			"second_score":	9092996
		}, {
			"file":	"Objects/boolobject.c",
			"line":	22,
			"primary_score":	999970,
			"second_score":	9092757
		}, {
			"file":	"Objects/boolobject.c",
			"line":	23,
			"primary_score":	999970,
			"second_score":	9092754
		}, {
			"file":	"Objects/boolobject.c",
			"line":	30,
			"primary_score":	999711,
			"second_score":	170119
		}, {
			"file":	"Objects/boolobject.c",
			"line":	32,
			"primary_score":	999711,
			"second_score":	170118
		}, {
			"file":	"Objects/boolobject.c",
			"line":	33,
			"primary_score":	999711,
			"second_score":	170117
		}, {
			"file":	"Objects/boolobject.c",
			"line":	35,
			"primary_score":	999711,
			"second_score":	171428
		}, {
			"file":	"Objects/boolobject.c",
			"line":	36,
			"primary_score":	999711,
			"second_score":	170116
		}, {
			"file":	"Objects/boolobject.c",
			"line":	37,
			"primary_score":	999711,
			"second_score":	170115
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	358,
			"primary_score":	999711,
			"second_score":	39575
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	372,
			"primary_score":	999915,
			"second_score":	101685430
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	373,
			"primary_score":	999915,
			"second_score":	101685429
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	374,
			"primary_score":	999915,
			"second_score":	101685428
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	375,
			"primary_score":	999915,
			"second_score":	101685427
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	376,
			"primary_score":	999915,
			"second_score":	101685426
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	377,
			"primary_score":	999915,
			"second_score":	101685425
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	378,
			"primary_score":	999915,
			"second_score":	101685394
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	380,
			"primary_score":	999915,
			"second_score":	101685393
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	381,
			"primary_score":	999915,
			"second_score":	101685390
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	382,
			"primary_score":	999915,
			"second_score":	101685389
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	383,
			"primary_score":	999915,
			"second_score":	101685388
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	384,
			"primary_score":	999928,
			"second_score":	129079879
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	411,
			"primary_score":	999928,
			"second_score":	129079878
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	413,
			"primary_score":	999928,
			"second_score":	129079877
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	415,
			"primary_score":	999915,
			"second_score":	101685387
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	416,
			"primary_score":	999915,
			"second_score":	101685386
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	421,
			"primary_score":	999915,
			"second_score":	101685385
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	430,
			"primary_score":	999950,
			"second_score":	101685384
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	431,
			"primary_score":	999978,
			"second_score":	101685593
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	437,
			"primary_score":	999980,
			"second_score":	129559724
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	438,
			"primary_score":	999991,
			"second_score":	129559723
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	439,
			"primary_score":	999991,
			"second_score":	129559722
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	440,
			"primary_score":	999992,
			"second_score":	129559721
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	442,
			"primary_score":	999980,
			"second_score":	129559720
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	443,
			"primary_score":	999980,
			"second_score":	129559719
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	446,
			"primary_score":	999946,
			"second_score":	129976377
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	447,
			"primary_score":	999946,
			"second_score":	129976376
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	448,
			"primary_score":	999946,
			"second_score":	129976375
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	449,
			"primary_score":	999946,
			"second_score":	129976374
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	450,
			"primary_score":	999960,
			"second_score":	129976373
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	451,
			"primary_score":	999951,
			"second_score":	156817569
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	452,
			"primary_score":	999951,
			"second_score":	156817568
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	455,
			"primary_score":	999946,
			"second_score":	129976372
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	456,
			"primary_score":	999946,
			"second_score":	129976371
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	457,
			"primary_score":	999946,
			"second_score":	129976370
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	458,
			"primary_score":	999946,
			"second_score":	129976369
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	459,
			"primary_score":	999953,
			"second_score":	129976368
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	460,
			"primary_score":	999962,
			"second_score":	156817563
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	461,
			"primary_score":	999963,
			"second_score":	156817562
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	464,
			"primary_score":	999946,
			"second_score":	129976367
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	465,
			"primary_score":	999946,
			"second_score":	129976366
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	490,
			"primary_score":	999915,
			"second_score":	101685383
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	491,
			"primary_score":	999915,
			"second_score":	101685382
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	492,
			"primary_score":	999915,
			"second_score":	101685355
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	1145,
			"primary_score":	999875,
			"second_score":	56341861
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	1146,
			"primary_score":	999875,
			"second_score":	56341860
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	1147,
			"primary_score":	999875,
			"second_score":	56341859
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	1148,
			"primary_score":	999875,
			"second_score":	56341858
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	1149,
			"primary_score":	999875,
			"second_score":	56341855
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2172,
			"primary_score":	999933,
			"second_score":	56341223
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2173,
			"primary_score":	999933,
			"second_score":	56341222
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2174,
			"primary_score":	999933,
			"second_score":	56341221
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2175,
			"primary_score":	999933,
			"second_score":	56341220
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2177,
			"primary_score":	999933,
			"second_score":	56341219
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2178,
			"primary_score":	999933,
			"second_score":	56341218
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2179,
			"primary_score":	999933,
			"second_score":	56341217
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2183,
			"primary_score":	999933,
			"second_score":	56341216
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2185,
			"primary_score":	999933,
			"second_score":	56341215
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2187,
			"primary_score":	999933,
			"second_score":	56341211
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2189,
			"primary_score":	999936,
			"second_score":	56341210
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2199,
			"primary_score":	999933,
			"second_score":	56341209
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2200,
			"primary_score":	999933,
			"second_score":	56341208
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2216,
			"primary_score":	999936,
			"second_score":	56341329
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2217,
			"primary_score":	999936,
			"second_score":	56341328
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2218,
			"primary_score":	999936,
			"second_score":	56341327
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2219,
			"primary_score":	999936,
			"second_score":	56341326
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2221,
			"primary_score":	999936,
			"second_score":	56341325
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2224,
			"primary_score":	999936,
			"second_score":	56341225
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2238,
			"primary_score":	999936,
			"second_score":	56341224
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2239,
			"primary_score":	999936,
			"second_score":	56341207
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2242,
			"primary_score":	999936,
			"second_score":	56341206
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2993,
			"primary_score":	999711,
			"second_score":	49732
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2994,
			"primary_score":	999711,
			"second_score":	49731
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2995,
			"primary_score":	999712,
			"second_score":	47242
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2996,
			"primary_score":	999711,
			"second_score":	47216
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2998,
			"primary_score":	999711,
			"second_score":	47215
		}, {
			"file":	"Objects/bytesobject.c",
			"line":	2999,
			"primary_score":	999711,
			"second_score":	47210
		}, {
			"file":	"Objects/cellobject.c",
			"line":	42,
			"primary_score":	999961,
			"second_score":	5644188
		}, {
			"file":	"Objects/classobject.c",
			"line":	92,
			"primary_score":	999734,
			"second_score":	59779515
		}, {
			"file":	"Objects/classobject.c",
			"line":	93,
			"primary_score":	999734,
			"second_score":	59779514
		}, {
			"file":	"Objects/classobject.c",
			"line":	94,
			"primary_score":	999734,
			"second_score":	60260565
		}, {
			"file":	"Objects/classobject.c",
			"line":	95,
			"primary_score":	999734,
			"second_score":	60260252
		}, {
			"file":	"Objects/classobject.c",
			"line":	98,
			"primary_score":	999734,
			"second_score":	59779513
		}, {
			"file":	"Objects/classobject.c",
			"line":	109,
			"primary_score":	999732,
			"second_score":	7693848
		}, {
			"file":	"Objects/classobject.c",
			"line":	110,
			"primary_score":	999732,
			"second_score":	7693847
		}, {
			"file":	"Objects/classobject.c",
			"line":	111,
			"primary_score":	999732,
			"second_score":	7693846
		}, {
			"file":	"Objects/classobject.c",
			"line":	113,
			"primary_score":	999732,
			"second_score":	7693845
		}, {
			"file":	"Objects/classobject.c",
			"line":	114,
			"primary_score":	999732,
			"second_score":	7693844
		}, {
			"file":	"Objects/classobject.c",
			"line":	118,
			"primary_score":	999732,
			"second_score":	7693843
		}, {
			"file":	"Objects/classobject.c",
			"line":	121,
			"primary_score":	999732,
			"second_score":	7693835
		}, {
			"file":	"Objects/classobject.c",
			"line":	122,
			"primary_score":	999732,
			"second_score":	59779525
		}, {
			"file":	"Objects/classobject.c",
			"line":	123,
			"primary_score":	999732,
			"second_score":	59779524
		}, {
			"file":	"Objects/classobject.c",
			"line":	124,
			"primary_score":	999732,
			"second_score":	59779523
		}, {
			"file":	"Objects/classobject.c",
			"line":	131,
			"primary_score":	999734,
			"second_score":	7693834
		}, {
			"file":	"Objects/classobject.c",
			"line":	167,
			"primary_score":	999711,
			"second_score":	166867
		}, {
			"file":	"Objects/classobject.c",
			"line":	168,
			"primary_score":	999711,
			"second_score":	166859
		}, {
			"file":	"Objects/classobject.c",
			"line":	170,
			"primary_score":	999711,
			"second_score":	166858
		}, {
			"file":	"Objects/classobject.c",
			"line":	171,
			"primary_score":	999711,
			"second_score":	166855
		}, {
			"file":	"Objects/classobject.c",
			"line":	172,
			"primary_score":	999711,
			"second_score":	166763
		}, {
			"file":	"Objects/classobject.c",
			"line":	173,
			"primary_score":	999711,
			"second_score":	166762
		}, {
			"file":	"Objects/classobject.c",
			"line":	174,
			"primary_score":	999711,
			"second_score":	166761
		}, {
			"file":	"Objects/classobject.c",
			"line":	175,
			"primary_score":	999711,
			"second_score":	166760
		}, {
			"file":	"Objects/classobject.c",
			"line":	384,
			"primary_score":	999711,
			"second_score":	131175
		}, {
			"file":	"Objects/classobject.c",
			"line":	386,
			"primary_score":	999711,
			"second_score":	131174
		}, {
			"file":	"Objects/classobject.c",
			"line":	387,
			"primary_score":	999711,
			"second_score":	130419
		}, {
			"file":	"Objects/classobject.c",
			"line":	388,
			"primary_score":	999711,
			"second_score":	130418
		}, {
			"file":	"Objects/classobject.c",
			"line":	389,
			"primary_score":	999711,
			"second_score":	130417
		}, {
			"file":	"Objects/classobject.c",
			"line":	390,
			"primary_score":	999711,
			"second_score":	130394
		}, {
			"file":	"Objects/classobject.c",
			"line":	392,
			"primary_score":	999711,
			"second_score":	130393
		}, {
			"file":	"Objects/classobject.c",
			"line":	393,
			"primary_score":	999711,
			"second_score":	130392
		}, {
			"file":	"Objects/classobject.c",
			"line":	399,
			"primary_score":	999711,
			"second_score":	131176
		}, {
			"file":	"Objects/codeobject.c",
			"line":	324,
			"primary_score":	999711,
			"second_score":	166255
		}, {
			"file":	"Objects/codeobject.c",
			"line":	325,
			"primary_score":	999711,
			"second_score":	166231
		}, {
			"file":	"Objects/codeobject.c",
			"line":	326,
			"primary_score":	999711,
			"second_score":	166203
		}, {
			"file":	"Objects/codeobject.c",
			"line":	327,
			"primary_score":	999711,
			"second_score":	166171
		}, {
			"file":	"Objects/codeobject.c",
			"line":	328,
			"primary_score":	999711,
			"second_score":	166143
		}, {
			"file":	"Objects/codeobject.c",
			"line":	329,
			"primary_score":	999711,
			"second_score":	166138
		}, {
			"file":	"Objects/codeobject.c",
			"line":	330,
			"primary_score":	999981,
			"second_score":	8105468
		}, {
			"file":	"Objects/codeobject.c",
			"line":	331,
			"primary_score":	999711,
			"second_score":	166094
		}, {
			"file":	"Objects/codeobject.c",
			"line":	332,
			"primary_score":	999711,
			"second_score":	166089
		}, {
			"file":	"Objects/codeobject.c",
			"line":	333,
			"primary_score":	999711,
			"second_score":	166065
		}, {
			"file":	"Objects/codeobject.c",
			"line":	334,
			"primary_score":	999711,
			"second_score":	168423
		}, {
			"file":	"Objects/codeobject.c",
			"line":	335,
			"primary_score":	999711,
			"second_score":	166064
		}, {
			"file":	"Objects/codeobject.c",
			"line":	337,
			"primary_score":	999711,
			"second_score":	166063
		}, {
			"file":	"Objects/codeobject.c",
			"line":	343,
			"primary_score":	999997,
			"second_score":	8802357
		}, {
			"file":	"Objects/codeobject.c",
			"line":	344,
			"primary_score":	999997,
			"second_score":	8802356
		}, {
			"file":	"Objects/codeobject.c",
			"line":	345,
			"primary_score":	999997,
			"second_score":	8802355
		}, {
			"file":	"Objects/codeobject.c",
			"line":	348,
			"primary_score":	999997,
			"second_score":	8802354
		}, {
			"file":	"Objects/codeobject.c",
			"line":	349,
			"primary_score":	999997,
			"second_score":	8802353
		}, {
			"file":	"Objects/codeobject.c",
			"line":	362,
			"primary_score":	999963,
			"second_score":	109519368
		}, {
			"file":	"Objects/codeobject.c",
			"line":	363,
			"primary_score":	999963,
			"second_score":	109519367
		}, {
			"file":	"Objects/codeobject.c",
			"line":	364,
			"primary_score":	999963,
			"second_score":	109519366
		}, {
			"file":	"Objects/codeobject.c",
			"line":	366,
			"primary_score":	999963,
			"second_score":	109519365
		}, {
			"file":	"Objects/codeobject.c",
			"line":	373,
			"primary_score":	999963,
			"second_score":	109519364
		}, {
			"file":	"Objects/codeobject.c",
			"line":	374,
			"primary_score":	999963,
			"second_score":	109519363
		}, {
			"file":	"Objects/codeobject.c",
			"line":	376,
			"primary_score":	999963,
			"second_score":	109519362
		}, {
			"file":	"Objects/codeobject.c",
			"line":	377,
			"primary_score":	999963,
			"second_score":	109519356
		}, {
			"file":	"Objects/codeobject.c",
			"line":	378,
			"primary_score":	999963,
			"second_score":	109519355
		}, {
			"file":	"Objects/codeobject.c",
			"line":	379,
			"primary_score":	999963,
			"second_score":	109519354
		}, {
			"file":	"Objects/codeobject.c",
			"line":	380,
			"primary_score":	999963,
			"second_score":	109519353
		}, {
			"file":	"Objects/codeobject.c",
			"line":	381,
			"primary_score":	999963,
			"second_score":	109519352
		}, {
			"file":	"Objects/codeobject.c",
			"line":	382,
			"primary_score":	999963,
			"second_score":	109519351
		}, {
			"file":	"Objects/codeobject.c",
			"line":	383,
			"primary_score":	999963,
			"second_score":	109519350
		}, {
			"file":	"Objects/codeobject.c",
			"line":	384,
			"primary_score":	999963,
			"second_score":	109519349
		}, {
			"file":	"Objects/codeobject.c",
			"line":	385,
			"primary_score":	999963,
			"second_score":	109519348
		}, {
			"file":	"Objects/codeobject.c",
			"line":	386,
			"primary_score":	999963,
			"second_score":	109519347
		}, {
			"file":	"Objects/codeobject.c",
			"line":	387,
			"primary_score":	999966,
			"second_score":	109519345
		}, {
			"file":	"Objects/codeobject.c",
			"line":	410,
			"primary_score":	999966,
			"second_score":	109519344
		}, {
			"file":	"Objects/codeobject.c",
			"line":	413,
			"primary_score":	999966,
			"second_score":	109519343
		}, {
			"file":	"Objects/codeobject.c",
			"line":	415,
			"primary_score":	999966,
			"second_score":	109519342
		}, {
			"file":	"Objects/codeobject.c",
			"line":	417,
			"primary_score":	999963,
			"second_score":	109519341
		}, {
			"file":	"Objects/descrobject.c",
			"line":	64,
			"primary_score":	999711,
			"second_score":	170125
		}, {
			"file":	"Objects/descrobject.c",
			"line":	69,
			"primary_score":	999711,
			"second_score":	170124
		}, {
			"file":	"Objects/descrobject.c",
			"line":	79,
			"primary_score":	999711,
			"second_score":	170123
		}, {
			"file":	"Objects/descrobject.c",
			"line":	123,
			"primary_score":	999711,
			"second_score":	171046
		}, {
			"file":	"Objects/descrobject.c",
			"line":	125,
			"primary_score":	999711,
			"second_score":	171045
		}, {
			"file":	"Objects/descrobject.c",
			"line":	127,
			"primary_score":	999711,
			"second_score":	171041
		}, {
			"file":	"Objects/descrobject.c",
			"line":	143,
			"primary_score":	999711,
			"second_score":	170127
		}, {
			"file":	"Objects/descrobject.c",
			"line":	145,
			"primary_score":	999711,
			"second_score":	170126
		}, {
			"file":	"Objects/descrobject.c",
			"line":	147,
			"primary_score":	999711,
			"second_score":	170122
		}, {
			"file":	"Objects/descrobject.c",
			"line":	148,
			"primary_score":	999711,
			"second_score":	170121
		}, {
			"file":	"Objects/descrobject.c",
			"line":	672,
			"primary_score":	999733,
			"second_score":	59938952
		}, {
			"file":	"Objects/descrobject.c",
			"line":	713,
			"primary_score":	999733,
			"second_score":	59945306
		}, {
			"file":	"Objects/dictobject.c",
			"line":	223,
			"primary_score":	999711,
			"second_score":	46186
		}, {
			"file":	"Objects/dictobject.c",
			"line":	225,
			"primary_score":	999711,
			"second_score":	46185
		}, {
			"file":	"Objects/dictobject.c",
			"line":	226,
			"primary_score":	999711,
			"second_score":	44920
		}, {
			"file":	"Objects/dictobject.c",
			"line":	227,
			"primary_score":	999711,
			"second_score":	44919
		}, {
			"file":	"Objects/dictobject.c",
			"line":	228,
			"primary_score":	999711,
			"second_score":	44918
		}, {
			"file":	"Objects/dictobject.c",
			"line":	362,
			"primary_score":	999934,
			"second_score":	9274819
		}, {
			"file":	"Objects/dictobject.c",
			"line":	403,
			"primary_score":	999711,
			"second_score":	42950
		}, {
			"file":	"Objects/dictobject.c",
			"line":	404,
			"primary_score":	999711,
			"second_score":	42949
		}, {
			"file":	"Objects/dictobject.c",
			"line":	405,
			"primary_score":	999711,
			"second_score":	42948
		}, {
			"file":	"Objects/dictobject.c",
			"line":	406,
			"primary_score":	999711,
			"second_score":	42947
		}, {
			"file":	"Objects/dictobject.c",
			"line":	407,
			"primary_score":	999711,
			"second_score":	42946
		}, {
			"file":	"Objects/dictobject.c",
			"line":	408,
			"primary_score":	999711,
			"second_score":	42945
		}, {
			"file":	"Objects/dictobject.c",
			"line":	414,
			"primary_score":	999711,
			"second_score":	42944
		}, {
			"file":	"Objects/dictobject.c",
			"line":	421,
			"primary_score":	999711,
			"second_score":	42943
		}, {
			"file":	"Objects/dictobject.c",
			"line":	422,
			"primary_score":	999711,
			"second_score":	42942
		}, {
			"file":	"Objects/dictobject.c",
			"line":	423,
			"primary_score":	999711,
			"second_score":	42941
		}, {
			"file":	"Objects/dictobject.c",
			"line":	424,
			"primary_score":	999711,
			"second_score":	42940
		}, {
			"file":	"Objects/dictobject.c",
			"line":	425,
			"primary_score":	999711,
			"second_score":	135127
		}, {
			"file":	"Objects/dictobject.c",
			"line":	426,
			"primary_score":	999711,
			"second_score":	135595
		}, {
			"file":	"Objects/dictobject.c",
			"line":	428,
			"primary_score":	999711,
			"second_score":	135126
		}, {
			"file":	"Objects/dictobject.c",
			"line":	430,
			"primary_score":	999711,
			"second_score":	135125
		}, {
			"file":	"Objects/dictobject.c",
			"line":	435,
			"primary_score":	999711,
			"second_score":	135124
		}, {
			"file":	"Objects/dictobject.c",
			"line":	436,
			"primary_score":	999711,
			"second_score":	135123
		}, {
			"file":	"Objects/dictobject.c",
			"line":	437,
			"primary_score":	999711,
			"second_score":	135122
		}, {
			"file":	"Objects/dictobject.c",
			"line":	438,
			"primary_score":	999711,
			"second_score":	135121
		}, {
			"file":	"Objects/dictobject.c",
			"line":	440,
			"primary_score":	999711,
			"second_score":	135120
		}, {
			"file":	"Objects/dictobject.c",
			"line":	444,
			"primary_score":	999711,
			"second_score":	135119
		}, {
			"file":	"Objects/dictobject.c",
			"line":	445,
			"primary_score":	999711,
			"second_score":	166602
		}, {
			"file":	"Objects/dictobject.c",
			"line":	706,
			"primary_score":	999711,
			"second_score":	171087
		}, {
			"file":	"Objects/dictobject.c",
			"line":	707,
			"primary_score":	999711,
			"second_score":	171086
		}, {
			"file":	"Objects/dictobject.c",
			"line":	708,
			"primary_score":	999711,
			"second_score":	171085
		}, {
			"file":	"Objects/dictobject.c",
			"line":	709,
			"primary_score":	999711,
			"second_score":	171084
		}, {
			"file":	"Objects/dictobject.c",
			"line":	710,
			"primary_score":	999711,
			"second_score":	171083
		}, {
			"file":	"Objects/dictobject.c",
			"line":	712,
			"primary_score":	999711,
			"second_score":	171082
		}, {
			"file":	"Objects/dictobject.c",
			"line":	727,
			"primary_score":	999711,
			"second_score":	171081
		}, {
			"file":	"Objects/dictobject.c",
			"line":	729,
			"primary_score":	999711,
			"second_score":	171067
		}, {
			"file":	"Objects/dictobject.c",
			"line":	740,
			"primary_score":	999711,
			"second_score":	171066
		}, {
			"file":	"Objects/dictobject.c",
			"line":	741,
			"primary_score":	999711,
			"second_score":	171054
		}, {
			"file":	"Objects/dictobject.c",
			"line":	746,
			"primary_score":	999711,
			"second_score":	171053
		}, {
			"file":	"Objects/dictobject.c",
			"line":	834,
			"primary_score":	999711,
			"second_score":	42959
		}, {
			"file":	"Objects/dictobject.c",
			"line":	835,
			"primary_score":	999711,
			"second_score":	42958
		}, {
			"file":	"Objects/dictobject.c",
			"line":	836,
			"primary_score":	999711,
			"second_score":	42957
		}, {
			"file":	"Objects/dictobject.c",
			"line":	837,
			"primary_score":	999711,
			"second_score":	42956
		}, {
			"file":	"Objects/dictobject.c",
			"line":	839,
			"primary_score":	999711,
			"second_score":	42955
		}, {
			"file":	"Objects/dictobject.c",
			"line":	843,
			"primary_score":	999711,
			"second_score":	42954
		}, {
			"file":	"Objects/dictobject.c",
			"line":	844,
			"primary_score":	999711,
			"second_score":	42953
		}, {
			"file":	"Objects/dictobject.c",
			"line":	850,
			"primary_score":	999711,
			"second_score":	42952
		}, {
			"file":	"Objects/dictobject.c",
			"line":	851,
			"primary_score":	999711,
			"second_score":	42951
		}, {
			"file":	"Objects/dictobject.c",
			"line":	852,
			"primary_score":	999711,
			"second_score":	42939
		}, {
			"file":	"Objects/dictobject.c",
			"line":	854,
			"primary_score":	999711,
			"second_score":	42938
		}, {
			"file":	"Objects/dictobject.c",
			"line":	858,
			"primary_score":	999711,
			"second_score":	42937
		}, {
			"file":	"Objects/dictobject.c",
			"line":	859,
			"primary_score":	999711,
			"second_score":	42936
		}, {
			"file":	"Objects/dictobject.c",
			"line":	860,
			"primary_score":	999711,
			"second_score":	42935
		}, {
			"file":	"Objects/dictobject.c",
			"line":	861,
			"primary_score":	999711,
			"second_score":	42934
		}, {
			"file":	"Objects/dictobject.c",
			"line":	862,
			"primary_score":	999711,
			"second_score":	42933
		}, {
			"file":	"Objects/dictobject.c",
			"line":	863,
			"primary_score":	999711,
			"second_score":	42932
		}, {
			"file":	"Objects/dictobject.c",
			"line":	864,
			"primary_score":	999711,
			"second_score":	42931
		}, {
			"file":	"Objects/dictobject.c",
			"line":	865,
			"primary_score":	999711,
			"second_score":	42928
		}, {
			"file":	"Objects/dictobject.c",
			"line":	866,
			"primary_score":	999711,
			"second_score":	42925
		}, {
			"file":	"Objects/dictobject.c",
			"line":	926,
			"primary_score":	999929,
			"second_score":	5797177
		}, {
			"file":	"Objects/dictobject.c",
			"line":	956,
			"primary_score":	999711,
			"second_score":	132061
		}, {
			"file":	"Objects/dictobject.c",
			"line":	957,
			"primary_score":	999711,
			"second_score":	132060
		}, {
			"file":	"Objects/dictobject.c",
			"line":	958,
			"primary_score":	999711,
			"second_score":	132059
		}, {
			"file":	"Objects/dictobject.c",
			"line":	960,
			"primary_score":	999711,
			"second_score":	132058
		}, {
			"file":	"Objects/dictobject.c",
			"line":	962,
			"primary_score":	999711,
			"second_score":	132057
		}, {
			"file":	"Objects/dictobject.c",
			"line":	963,
			"primary_score":	999711,
			"second_score":	132056
		}, {
			"file":	"Objects/dictobject.c",
			"line":	965,
			"primary_score":	999711,
			"second_score":	132055
		}, {
			"file":	"Objects/dictobject.c",
			"line":	966,
			"primary_score":	999711,
			"second_score":	132054
		}, {
			"file":	"Objects/dictobject.c",
			"line":	967,
			"primary_score":	999711,
			"second_score":	132053
		}, {
			"file":	"Objects/dictobject.c",
			"line":	969,
			"primary_score":	999711,
			"second_score":	132052
		}, {
			"file":	"Objects/dictobject.c",
			"line":	970,
			"primary_score":	999711,
			"second_score":	132051
		}, {
			"file":	"Objects/dictobject.c",
			"line":	971,
			"primary_score":	999711,
			"second_score":	132050
		}, {
			"file":	"Objects/dictobject.c",
			"line":	972,
			"primary_score":	999711,
			"second_score":	132067
		}, {
			"file":	"Objects/dictobject.c",
			"line":	973,
			"primary_score":	999711,
			"second_score":	132066
		}, {
			"file":	"Objects/dictobject.c",
			"line":	974,
			"primary_score":	999711,
			"second_score":	132065
		}, {
			"file":	"Objects/dictobject.c",
			"line":	975,
			"primary_score":	999711,
			"second_score":	132064
		}, {
			"file":	"Objects/dictobject.c",
			"line":	976,
			"primary_score":	999711,
			"second_score":	132063
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1012,
			"primary_score":	999711,
			"second_score":	132046
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1013,
			"primary_score":	999711,
			"second_score":	132045
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1014,
			"primary_score":	999711,
			"second_score":	132044
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1015,
			"primary_score":	999711,
			"second_score":	132034
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1016,
			"primary_score":	999711,
			"second_score":	132032
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1017,
			"primary_score":	999711,
			"second_score":	131957
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1018,
			"primary_score":	999711,
			"second_score":	131956
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1019,
			"primary_score":	999711,
			"second_score":	132499
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1020,
			"primary_score":	999711,
			"second_score":	165448
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1023,
			"primary_score":	999711,
			"second_score":	131947
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1024,
			"primary_score":	999711,
			"second_score":	131946
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1025,
			"primary_score":	999711,
			"second_score":	131945
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1028,
			"primary_score":	999711,
			"second_score":	131944
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1029,
			"primary_score":	999711,
			"second_score":	131930
		}, {
			"file":	"Objects/dictobject.c",
			"line":	1495,
			"primary_score":	999732,
			"second_score":	59945683
		}, {
			"file":	"Objects/dictobject.c",
			"line":	2261,
			"primary_score":	999733,
			"second_score":	59943671
		}, {
			"file":	"Objects/dictobject.c",
			"line":	2262,
			"primary_score":	999733,
			"second_score":	59943670
		}, {
			"file":	"Objects/dictobject.c",
			"line":	2263,
			"primary_score":	999733,
			"second_score":	59943669
		}, {
			"file":	"Objects/dictobject.c",
			"line":	2264,
			"primary_score":	999733,
			"second_score":	59943668
		}, {
			"file":	"Objects/exceptions.c",
			"line":	57,
			"primary_score":	999711,
			"second_score":	131823
		}, {
			"file":	"Objects/exceptions.c",
			"line":	58,
			"primary_score":	999711,
			"second_score":	131821
		}, {
			"file":	"Objects/exceptions.c",
			"line":	59,
			"primary_score":	999711,
			"second_score":	131746
		}, {
			"file":	"Objects/exceptions.c",
			"line":	60,
			"primary_score":	999711,
			"second_score":	131744
		}, {
			"file":	"Objects/exceptions.c",
			"line":	61,
			"primary_score":	999711,
			"second_score":	131742
		}, {
			"file":	"Objects/exceptions.c",
			"line":	62,
			"primary_score":	999711,
			"second_score":	131740
		}, {
			"file":	"Objects/exceptions.c",
			"line":	68,
			"primary_score":	999711,
			"second_score":	131832
		}, {
			"file":	"Objects/exceptions.c",
			"line":	69,
			"primary_score":	999711,
			"second_score":	131824
		}, {
			"file":	"Objects/exceptions.c",
			"line":	70,
			"primary_score":	999711,
			"second_score":	131739
		}, {
			"file":	"Objects/exceptions.c",
			"line":	87,
			"primary_score":	999918,
			"second_score":	7383940
		}, {
			"file":	"Objects/exceptions.c",
			"line":	146,
			"primary_score":	999827,
			"second_score":	7678590
		}, {
			"file":	"Objects/exceptions.c",
			"line":	149,
			"primary_score":	999827,
			"second_score":	7678576
		}, {
			"file":	"Objects/exceptions.c",
			"line":	150,
			"primary_score":	999827,
			"second_score":	7678575
		}, {
			"file":	"Objects/exceptions.c",
			"line":	254,
			"primary_score":	999969,
			"second_score":	56360290
		}, {
			"file":	"Objects/exceptions.c",
			"line":	255,
			"primary_score":	999969,
			"second_score":	56360284
		}, {
			"file":	"Objects/exceptions.c",
			"line":	256,
			"primary_score":	999969,
			"second_score":	56360283
		}, {
			"file":	"Objects/exceptions.c",
			"line":	280,
			"primary_score":	999969,
			"second_score":	56360681
		}, {
			"file":	"Objects/exceptions.c",
			"line":	281,
			"primary_score":	999969,
			"second_score":	56360675
		}, {
			"file":	"Objects/exceptions.c",
			"line":	282,
			"primary_score":	999970,
			"second_score":	56360674
		}, {
			"file":	"Objects/exceptions.c",
			"line":	332,
			"primary_score":	999964,
			"second_score":	56360680
		}, {
			"file":	"Objects/exceptions.c",
			"line":	333,
			"primary_score":	999965,
			"second_score":	56360677
		}, {
			"file":	"Objects/exceptions.c",
			"line":	334,
			"primary_score":	999964,
			"second_score":	56360676
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1136,
			"primary_score":	999964,
			"second_score":	151933940
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1141,
			"primary_score":	999964,
			"second_score":	151933939
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1146,
			"primary_score":	999964,
			"second_score":	151933938
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1147,
			"primary_score":	999964,
			"second_score":	151933937
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1176,
			"primary_score":	999964,
			"second_score":	151933941
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1194,
			"primary_score":	999964,
			"second_score":	151933973
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1195,
			"primary_score":	999964,
			"second_score":	151933972
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1197,
			"primary_score":	999964,
			"second_score":	151933967
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1199,
			"primary_score":	999964,
			"second_score":	151933966
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1200,
			"primary_score":	999964,
			"second_score":	151933965
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1201,
			"primary_score":	999964,
			"second_score":	151933964
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1203,
			"primary_score":	999964,
			"second_score":	151933963
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1205,
			"primary_score":	999964,
			"second_score":	151933962
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1206,
			"primary_score":	999964,
			"second_score":	151933959
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1262,
			"primary_score":	999964,
			"second_score":	151933957
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1263,
			"primary_score":	999964,
			"second_score":	151933956
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1265,
			"primary_score":	999964,
			"second_score":	151933951
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1267,
			"primary_score":	999964,
			"second_score":	151933950
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1268,
			"primary_score":	999964,
			"second_score":	151933949
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1269,
			"primary_score":	999964,
			"second_score":	151933948
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1271,
			"primary_score":	999964,
			"second_score":	151933947
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1273,
			"primary_score":	999964,
			"second_score":	151933946
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1274,
			"primary_score":	999964,
			"second_score":	151933943
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1419,
			"primary_score":	999959,
			"second_score":	151934452
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1421,
			"primary_score":	999959,
			"second_score":	151934451
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1424,
			"primary_score":	999959,
			"second_score":	151934441
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1426,
			"primary_score":	999959,
			"second_score":	151934440
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1427,
			"primary_score":	999959,
			"second_score":	151934438
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1428,
			"primary_score":	999959,
			"second_score":	151934436
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1430,
			"primary_score":	999959,
			"second_score":	151934434
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1440,
			"primary_score":	999960,
			"second_score":	151934128
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1441,
			"primary_score":	999960,
			"second_score":	151934127
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1442,
			"primary_score":	999960,
			"second_score":	151934126
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1444,
			"primary_score":	999960,
			"second_score":	151934125
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1513,
			"primary_score":	999961,
			"second_score":	151935057
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1843,
			"primary_score":	999711,
			"second_score":	131709
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1844,
			"primary_score":	999711,
			"second_score":	131333
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1845,
			"primary_score":	999711,
			"second_score":	131332
		}, {
			"file":	"Objects/exceptions.c",
			"line":	1846,
			"primary_score":	999711,
			"second_score":	131331
		}, {
			"file":	"Objects/exceptions.c",
			"line":	2125,
			"primary_score":	999711,
			"second_score":	131839
		}, {
			"file":	"Objects/exceptions.c",
			"line":	2126,
			"primary_score":	999711,
			"second_score":	131710
		}, {
			"file":	"Objects/fileobject.c",
			"line":	162,
			"primary_score":	999991,
			"second_score":	7382006
		}, {
			"file":	"Objects/floatobject.c",
			"line":	309,
			"primary_score":	999971,
			"second_score":	9661498
		}, {
			"file":	"Objects/floatobject.c",
			"line":	310,
			"primary_score":	999971,
			"second_score":	9661497
		}, {
			"file":	"Objects/floatobject.c",
			"line":	314,
			"primary_score":	999971,
			"second_score":	9661381
		}, {
			"file":	"Objects/floatobject.c",
			"line":	316,
			"primary_score":	999971,
			"second_score":	9661380
		}, {
			"file":	"Objects/floatobject.c",
			"line":	317,
			"primary_score":	999971,
			"second_score":	9661277
		}, {
			"file":	"Objects/floatobject.c",
			"line":	318,
			"primary_score":	999971,
			"second_score":	9661275
		}, {
			"file":	"Objects/floatobject.c",
			"line":	339,
			"primary_score":	999868,
			"second_score":	9640277
		}, {
			"file":	"Objects/floatobject.c",
			"line":	340,
			"primary_score":	999868,
			"second_score":	9640276
		}, {
			"file":	"Objects/floatobject.c",
			"line":	342,
			"primary_score":	999868,
			"second_score":	9640275
		}, {
			"file":	"Objects/floatobject.c",
			"line":	343,
			"primary_score":	999868,
			"second_score":	9640274
		}, {
			"file":	"Objects/floatobject.c",
			"line":	348,
			"primary_score":	999868,
			"second_score":	9640273
		}, {
			"file":	"Objects/floatobject.c",
			"line":	349,
			"primary_score":	999884,
			"second_score":	10107035
		}, {
			"file":	"Objects/floatobject.c",
			"line":	351,
			"primary_score":	999935,
			"second_score":	9640262
		}, {
			"file":	"Objects/floatobject.c",
			"line":	362,
			"primary_score":	999936,
			"second_score":	9640261
		}, {
			"file":	"Objects/floatobject.c",
			"line":	363,
			"primary_score":	999938,
			"second_score":	9640260
		}, {
			"file":	"Objects/floatobject.c",
			"line":	364,
			"primary_score":	999938,
			"second_score":	9640259
		}, {
			"file":	"Objects/floatobject.c",
			"line":	365,
			"primary_score":	999938,
			"second_score":	9640254
		}, {
			"file":	"Objects/floatobject.c",
			"line":	366,
			"primary_score":	999938,
			"second_score":	9640253
		}, {
			"file":	"Objects/floatobject.c",
			"line":	368,
			"primary_score":	999938,
			"second_score":	9640252
		}, {
			"file":	"Objects/floatobject.c",
			"line":	372,
			"primary_score":	999981,
			"second_score":	9640251
		}, {
			"file":	"Objects/floatobject.c",
			"line":	373,
			"primary_score":	999981,
			"second_score":	9640250
		}, {
			"file":	"Objects/floatobject.c",
			"line":	374,
			"primary_score":	999981,
			"second_score":	9640249
		}, {
			"file":	"Objects/floatobject.c",
			"line":	494,
			"primary_score":	999883,
			"second_score":	10107034
		}, {
			"file":	"Objects/floatobject.c",
			"line":	499,
			"primary_score":	999913,
			"second_score":	10107033
		}, {
			"file":	"Objects/floatobject.c",
			"line":	511,
			"primary_score":	999956,
			"second_score":	9640248
		}, {
			"file":	"Objects/floatobject.c",
			"line":	517,
			"primary_score":	999869,
			"second_score":	9640247
		}, {
			"file":	"Objects/floatobject.c",
			"line":	545,
			"primary_score":	999716,
			"second_score":	10105280
		}, {
			"file":	"Objects/floatobject.c",
			"line":	546,
			"primary_score":	999716,
			"second_score":	10105279
		}, {
			"file":	"Objects/floatobject.c",
			"line":	547,
			"primary_score":	999716,
			"second_score":	10105277
		}, {
			"file":	"Objects/floatobject.c",
			"line":	549,
			"primary_score":	999716,
			"second_score":	10105275
		}, {
			"file":	"Objects/floatobject.c",
			"line":	551,
			"primary_score":	999716,
			"second_score":	10105274
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1942,
			"primary_score":	999711,
			"second_score":	46674
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1943,
			"primary_score":	999711,
			"second_score":	46673
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1944,
			"primary_score":	999711,
			"second_score":	46672
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1945,
			"primary_score":	999711,
			"second_score":	46671
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1946,
			"primary_score":	999711,
			"second_score":	46670
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1948,
			"primary_score":	999711,
			"second_score":	46669
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1949,
			"primary_score":	999711,
			"second_score":	46668
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1950,
			"primary_score":	999711,
			"second_score":	46667
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1951,
			"primary_score":	999711,
			"second_score":	46666
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1952,
			"primary_score":	999711,
			"second_score":	46340
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1953,
			"primary_score":	999711,
			"second_score":	46339
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1956,
			"primary_score":	999711,
			"second_score":	46276
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1957,
			"primary_score":	999711,
			"second_score":	46275
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1959,
			"primary_score":	999711,
			"second_score":	46274
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1960,
			"primary_score":	999711,
			"second_score":	46273
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1961,
			"primary_score":	999711,
			"second_score":	46272
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1962,
			"primary_score":	999711,
			"second_score":	46271
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1963,
			"primary_score":	999711,
			"second_score":	46270
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1966,
			"primary_score":	999711,
			"second_score":	46193
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1968,
			"primary_score":	999711,
			"second_score":	46197
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1970,
			"primary_score":	999711,
			"second_score":	46196
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1977,
			"primary_score":	999711,
			"second_score":	46192
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1978,
			"primary_score":	999711,
			"second_score":	46191
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1980,
			"primary_score":	999711,
			"second_score":	46190
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1986,
			"primary_score":	999711,
			"second_score":	46679
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1987,
			"primary_score":	999711,
			"second_score":	46678
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1988,
			"primary_score":	999711,
			"second_score":	46677
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1989,
			"primary_score":	999711,
			"second_score":	46676
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1991,
			"primary_score":	999711,
			"second_score":	46675
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1993,
			"primary_score":	999711,
			"second_score":	46189
		}, {
			"file":	"Objects/floatobject.c",
			"line":	1994,
			"primary_score":	999711,
			"second_score":	46188
		}, {
			"file":	"Objects/floatobject.c",
			"line":	2145,
			"primary_score":	999890,
			"second_score":	60639942
		}, {
			"file":	"Objects/floatobject.c",
			"line":	2254,
			"primary_score":	999890,
			"second_score":	60639941
		}, {
			"file":	"Objects/floatobject.c",
			"line":	2255,
			"primary_score":	999890,
			"second_score":	60639940
		}, {
			"file":	"Objects/floatobject.c",
			"line":	2257,
			"primary_score":	999890,
			"second_score":	60639939
		}, {
			"file":	"Objects/floatobject.c",
			"line":	2263,
			"primary_score":	999890,
			"second_score":	60639938
		}, {
			"file":	"Objects/floatobject.c",
			"line":	2264,
			"primary_score":	999890,
			"second_score":	60639923
		}, {
			"file":	"Objects/floatobject.c",
			"line":	2265,
			"primary_score":	999890,
			"second_score":	60639922
		}, {
			"file":	"Objects/floatobject.c",
			"line":	2267,
			"primary_score":	999890,
			"second_score":	60639921
		}, {
			"file":	"Objects/frameobject.c",
			"line":	442,
			"primary_score":	999712,
			"second_score":	5778619
		}, {
			"file":	"Objects/frameobject.c",
			"line":	445,
			"primary_score":	999981,
			"second_score":	7393211
		}, {
			"file":	"Objects/frameobject.c",
			"line":	446,
			"primary_score":	999981,
			"second_score":	7393204
		}, {
			"file":	"Objects/frameobject.c",
			"line":	459,
			"primary_score":	999712,
			"second_score":	1639126
		}, {
			"file":	"Objects/frameobject.c",
			"line":	937,
			"primary_score":	999711,
			"second_score":	130389
		}, {
			"file":	"Objects/frameobject.c",
			"line":	939,
			"primary_score":	999711,
			"second_score":	130388
		}, {
			"file":	"Objects/frameobject.c",
			"line":	940,
			"primary_score":	999941,
			"second_score":	5777658
		}, {
			"file":	"Objects/frameobject.c",
			"line":	941,
			"primary_score":	999941,
			"second_score":	5777657
		}, {
			"file":	"Objects/frameobject.c",
			"line":	942,
			"primary_score":	999941,
			"second_score":	5777656
		}, {
			"file":	"Objects/frameobject.c",
			"line":	943,
			"primary_score":	999941,
			"second_score":	5777642
		}, {
			"file":	"Objects/frameobject.c",
			"line":	945,
			"primary_score":	999711,
			"second_score":	130387
		}, {
			"file":	"Objects/frameobject.c",
			"line":	946,
			"primary_score":	999711,
			"second_score":	130386
		}, {
			"file":	"Objects/frameobject.c",
			"line":	952,
			"primary_score":	999711,
			"second_score":	130390
		}, {
			"file":	"Objects/frameobject.c",
			"line":	953,
			"primary_score":	999711,
			"second_score":	130385
		}, {
			"file":	"Objects/frameobject.c",
			"line":	954,
			"primary_score":	999711,
			"second_score":	130380
		}, {
			"file":	"Objects/funcobject.c",
			"line":	551,
			"primary_score":	999711,
			"second_score":	166267
		}, {
			"file":	"Objects/funcobject.c",
			"line":	552,
			"primary_score":	999711,
			"second_score":	166259
		}, {
			"file":	"Objects/funcobject.c",
			"line":	554,
			"primary_score":	999711,
			"second_score":	166258
		}, {
			"file":	"Objects/funcobject.c",
			"line":	555,
			"primary_score":	999711,
			"second_score":	168387
		}, {
			"file":	"Objects/funcobject.c",
			"line":	556,
			"primary_score":	999711,
			"second_score":	166041
		}, {
			"file":	"Objects/funcobject.c",
			"line":	557,
			"primary_score":	999711,
			"second_score":	166036
		}, {
			"file":	"Objects/funcobject.c",
			"line":	558,
			"primary_score":	999711,
			"second_score":	167392
		}, {
			"file":	"Objects/funcobject.c",
			"line":	559,
			"primary_score":	999711,
			"second_score":	165966
		}, {
			"file":	"Objects/funcobject.c",
			"line":	560,
			"primary_score":	999711,
			"second_score":	165963
		}, {
			"file":	"Objects/funcobject.c",
			"line":	561,
			"primary_score":	999711,
			"second_score":	165958
		}, {
			"file":	"Objects/funcobject.c",
			"line":	562,
			"primary_score":	999711,
			"second_score":	165955
		}, {
			"file":	"Objects/funcobject.c",
			"line":	563,
			"primary_score":	999711,
			"second_score":	165952
		}, {
			"file":	"Objects/funcobject.c",
			"line":	564,
			"primary_score":	999711,
			"second_score":	165949
		}, {
			"file":	"Objects/listobject.c",
			"line":	59,
			"primary_score":	999920,
			"second_score":	3277232
		}, {
			"file":	"Objects/listobject.c",
			"line":	103,
			"primary_score":	999711,
			"second_score":	53567
		}, {
			"file":	"Objects/listobject.c",
			"line":	105,
			"primary_score":	999711,
			"second_score":	53566
		}, {
			"file":	"Objects/listobject.c",
			"line":	106,
			"primary_score":	999711,
			"second_score":	51590
		}, {
			"file":	"Objects/listobject.c",
			"line":	107,
			"primary_score":	999711,
			"second_score":	51589
		}, {
			"file":	"Objects/listobject.c",
			"line":	108,
			"primary_score":	999711,
			"second_score":	51588
		}, {
			"file":	"Objects/listobject.c",
			"line":	299,
			"primary_score":	999711,
			"second_score":	165401
		}, {
			"file":	"Objects/listobject.c",
			"line":	300,
			"primary_score":	999711,
			"second_score":	165400
		}, {
			"file":	"Objects/listobject.c",
			"line":	301,
			"primary_score":	999711,
			"second_score":	165390
		}, {
			"file":	"Objects/listobject.c",
			"line":	302,
			"primary_score":	999711,
			"second_score":	165388
		}, {
			"file":	"Objects/listobject.c",
			"line":	307,
			"primary_score":	999711,
			"second_score":	165387
		}, {
			"file":	"Objects/listobject.c",
			"line":	308,
			"primary_score":	999711,
			"second_score":	165386
		}, {
			"file":	"Objects/listobject.c",
			"line":	309,
			"primary_score":	999711,
			"second_score":	132300
		}, {
			"file":	"Objects/listobject.c",
			"line":	311,
			"primary_score":	999711,
			"second_score":	131889
		}, {
			"file":	"Objects/listobject.c",
			"line":	313,
			"primary_score":	999711,
			"second_score":	131888
		}, {
			"file":	"Objects/listobject.c",
			"line":	316,
			"primary_score":	999711,
			"second_score":	131887
		}, {
			"file":	"Objects/listobject.c",
			"line":	317,
			"primary_score":	999711,
			"second_score":	131858
		}, {
			"file":	"Objects/listobject.c",
			"line":	323,
			"primary_score":	999945,
			"second_score":	49260794
		}, {
			"file":	"Objects/listobject.c",
			"line":	324,
			"primary_score":	999945,
			"second_score":	49260793
		}, {
			"file":	"Objects/listobject.c",
			"line":	325,
			"primary_score":	999945,
			"second_score":	49260792
		}, {
			"file":	"Objects/listobject.c",
			"line":	327,
			"primary_score":	999945,
			"second_score":	49260791
		}, {
			"file":	"Objects/listobject.c",
			"line":	328,
			"primary_score":	999945,
			"second_score":	49260546
		}, {
			"file":	"Objects/listobject.c",
			"line":	332,
			"primary_score":	999945,
			"second_score":	49260545
		}, {
			"file":	"Objects/listobject.c",
			"line":	337,
			"primary_score":	999948,
			"second_score":	49260544
		}, {
			"file":	"Objects/listobject.c",
			"line":	338,
			"primary_score":	999948,
			"second_score":	49260520
		}, {
			"file":	"Objects/listobject.c",
			"line":	343,
			"primary_score":	999948,
			"second_score":	49260519
		}, {
			"file":	"Objects/listobject.c",
			"line":	344,
			"primary_score":	999948,
			"second_score":	49260127
		}, {
			"file":	"Objects/listobject.c",
			"line":	345,
			"primary_score":	999948,
			"second_score":	49260126
		}, {
			"file":	"Objects/listobject.c",
			"line":	347,
			"primary_score":	999948,
			"second_score":	49260112
		}, {
			"file":	"Objects/listobject.c",
			"line":	348,
			"primary_score":	999948,
			"second_score":	49259970
		}, {
			"file":	"Objects/listobject.c",
			"line":	349,
			"primary_score":	999948,
			"second_score":	49259941
		}, {
			"file":	"Objects/listobject.c",
			"line":	351,
			"primary_score":	999948,
			"second_score":	49259940
		}, {
			"file":	"Objects/listobject.c",
			"line":	352,
			"primary_score":	999948,
			"second_score":	49259923
		}, {
			"file":	"Objects/listobject.c",
			"line":	353,
			"primary_score":	999948,
			"second_score":	49259920
		}, {
			"file":	"Objects/listobject.c",
			"line":	358,
			"primary_score":	999948,
			"second_score":	49259919
		}, {
			"file":	"Objects/listobject.c",
			"line":	359,
			"primary_score":	999948,
			"second_score":	49259918
		}, {
			"file":	"Objects/listobject.c",
			"line":	360,
			"primary_score":	999948,
			"second_score":	49259905
		}, {
			"file":	"Objects/listobject.c",
			"line":	362,
			"primary_score":	999948,
			"second_score":	49259904
		}, {
			"file":	"Objects/listobject.c",
			"line":	363,
			"primary_score":	999948,
			"second_score":	49259903
		}, {
			"file":	"Objects/listobject.c",
			"line":	364,
			"primary_score":	999948,
			"second_score":	49259839
		}, {
			"file":	"Objects/listobject.c",
			"line":	365,
			"primary_score":	999948,
			"second_score":	49259838
		}, {
			"file":	"Objects/listobject.c",
			"line":	368,
			"primary_score":	999948,
			"second_score":	49259837
		}, {
			"file":	"Objects/listobject.c",
			"line":	369,
			"primary_score":	999948,
			"second_score":	49259824
		}, {
			"file":	"Objects/listobject.c",
			"line":	371,
			"primary_score":	999948,
			"second_score":	49259823
		}, {
			"file":	"Objects/listobject.c",
			"line":	372,
			"primary_score":	999948,
			"second_score":	49259822
		}, {
			"file":	"Objects/listobject.c",
			"line":	373,
			"primary_score":	999948,
			"second_score":	49259696
		}, {
			"file":	"Objects/listobject.c",
			"line":	374,
			"primary_score":	999948,
			"second_score":	49259695
		}, {
			"file":	"Objects/listobject.c",
			"line":	378,
			"primary_score":	999948,
			"second_score":	49259694
		}, {
			"file":	"Objects/listobject.c",
			"line":	379,
			"primary_score":	999948,
			"second_score":	49259550
		}, {
			"file":	"Objects/listobject.c",
			"line":	381,
			"primary_score":	999948,
			"second_score":	49259549
		}, {
			"file":	"Objects/listobject.c",
			"line":	382,
			"primary_score":	999948,
			"second_score":	49259393
		}, {
			"file":	"Objects/listobject.c",
			"line":	384,
			"primary_score":	999948,
			"second_score":	49259383
		}, {
			"file":	"Objects/listobject.c",
			"line":	385,
			"primary_score":	999948,
			"second_score":	49259381
		}, {
			"file":	"Objects/listobject.c",
			"line":	386,
			"primary_score":	999945,
			"second_score":	49259321
		}, {
			"file":	"Objects/listobject.c",
			"line":	387,
			"primary_score":	999945,
			"second_score":	49259010
		}, {
			"file":	"Objects/listobject.c",
			"line":	901,
			"primary_score":	999927,
			"second_score":	3277306
		}, {
			"file":	"Objects/listobject.c",
			"line":	902,
			"primary_score":	999927,
			"second_score":	3277305
		}, {
			"file":	"Objects/listobject.c",
			"line":	903,
			"primary_score":	999927,
			"second_score":	3277304
		}, {
			"file":	"Objects/listobject.c",
			"line":	905,
			"primary_score":	999927,
			"second_score":	3277303
		}, {
			"file":	"Objects/listobject.c",
			"line":	908,
			"primary_score":	999927,
			"second_score":	3277247
		}, {
			"file":	"Objects/listobject.c",
			"line":	913,
			"primary_score":	999927,
			"second_score":	3277246
		}, {
			"file":	"Objects/listobject.c",
			"line":	914,
			"primary_score":	999934,
			"second_score":	3277245
		}, {
			"file":	"Objects/listobject.c",
			"line":	915,
			"primary_score":	999927,
			"second_score":	3277244
		}, {
			"file":	"Objects/listobject.c",
			"line":	919,
			"primary_score":	999927,
			"second_score":	3277243
		}, {
			"file":	"Objects/listobject.c",
			"line":	920,
			"primary_score":	999927,
			"second_score":	3277242
		}, {
			"file":	"Objects/listobject.c",
			"line":	921,
			"primary_score":	999930,
			"second_score":	3277241
		}, {
			"file":	"Objects/listobject.c",
			"line":	922,
			"primary_score":	999930,
			"second_score":	3277223
		}, {
			"file":	"Objects/listobject.c",
			"line":	923,
			"primary_score":	999930,
			"second_score":	3277222
		}, {
			"file":	"Objects/listobject.c",
			"line":	1018,
			"primary_score":	999754,
			"second_score":	60266282
		}, {
			"file":	"Objects/listobject.c",
			"line":	1406,
			"primary_score":	999733,
			"second_score":	59784521
		}, {
			"file":	"Objects/listobject.c",
			"line":	1411,
			"primary_score":	999733,
			"second_score":	59784520
		}, {
			"file":	"Objects/listobject.c",
			"line":	1413,
			"primary_score":	999733,
			"second_score":	59784519
		}, {
			"file":	"Objects/listobject.c",
			"line":	1945,
			"primary_score":	999733,
			"second_score":	59784751
		}, {
			"file":	"Objects/listobject.c",
			"line":	1947,
			"primary_score":	999733,
			"second_score":	59784750
		}, {
			"file":	"Objects/listobject.c",
			"line":	1954,
			"primary_score":	999733,
			"second_score":	59784749
		}, {
			"file":	"Objects/listobject.c",
			"line":	1955,
			"primary_score":	999733,
			"second_score":	59784748
		}, {
			"file":	"Objects/listobject.c",
			"line":	1957,
			"primary_score":	999733,
			"second_score":	59784527
		}, {
			"file":	"Objects/listobject.c",
			"line":	1966,
			"primary_score":	999733,
			"second_score":	59784526
		}, {
			"file":	"Objects/listobject.c",
			"line":	1967,
			"primary_score":	999733,
			"second_score":	59784525
		}, {
			"file":	"Objects/listobject.c",
			"line":	2031,
			"primary_score":	999733,
			"second_score":	59784511
		}, {
			"file":	"Objects/listobject.c",
			"line":	2032,
			"primary_score":	999735,
			"second_score":	59784509
		}, {
			"file":	"Objects/listobject.c",
			"line":	2033,
			"primary_score":	999733,
			"second_score":	59784481
		}, {
			"file":	"Objects/listobject.c",
			"line":	2087,
			"primary_score":	999967,
			"second_score":	3279646
		}, {
			"file":	"Objects/listobject.c",
			"line":	2089,
			"primary_score":	999967,
			"second_score":	3279645
		}, {
			"file":	"Objects/listobject.c",
			"line":	2179,
			"primary_score":	999976,
			"second_score":	53426057
		}, {
			"file":	"Objects/listobject.c",
			"line":	2180,
			"primary_score":	999976,
			"second_score":	53426056
		}, {
			"file":	"Objects/listobject.c",
			"line":	2182,
			"primary_score":	999976,
			"second_score":	53426055
		}, {
			"file":	"Objects/listobject.c",
			"line":	2183,
			"primary_score":	999977,
			"second_score":	53424418
		}, {
			"file":	"Objects/listobject.c",
			"line":	2184,
			"primary_score":	999977,
			"second_score":	53424261
		}, {
			"file":	"Objects/listobject.c",
			"line":	2185,
			"primary_score":	999981,
			"second_score":	53424260
		}, {
			"file":	"Objects/listobject.c",
			"line":	2186,
			"primary_score":	999978,
			"second_score":	53424419
		}, {
			"file":	"Objects/listobject.c",
			"line":	2189,
			"primary_score":	999976,
			"second_score":	53424259
		}, {
			"file":	"Objects/listobject.c",
			"line":	2865,
			"primary_score":	999712,
			"second_score":	3199812
		}, {
			"file":	"Objects/listobject.c",
			"line":	2879,
			"primary_score":	999712,
			"second_score":	3199882
		}, {
			"file":	"Objects/listobject.c",
			"line":	2880,
			"primary_score":	999712,
			"second_score":	3199881
		}, {
			"file":	"Objects/listobject.c",
			"line":	2881,
			"primary_score":	999712,
			"second_score":	3199880
		}, {
			"file":	"Objects/listobject.c",
			"line":	2883,
			"primary_score":	999712,
			"second_score":	3199879
		}, {
			"file":	"Objects/listobject.c",
			"line":	2884,
			"primary_score":	999712,
			"second_score":	3209896
		}, {
			"file":	"Objects/listobject.c",
			"line":	2885,
			"primary_score":	999712,
			"second_score":	3209895
		}, {
			"file":	"Objects/listobject.c",
			"line":	2886,
			"primary_score":	999712,
			"second_score":	3209894
		}, {
			"file":	"Objects/listobject.c",
			"line":	2887,
			"primary_score":	999712,
			"second_score":	3209893
		}, {
			"file":	"Objects/listobject.c",
			"line":	2889,
			"primary_score":	999712,
			"second_score":	3199878
		}, {
			"file":	"Objects/listobject.c",
			"line":	2890,
			"primary_score":	999712,
			"second_score":	3199877
		}, {
			"file":	"Objects/listobject.c",
			"line":	2891,
			"primary_score":	999712,
			"second_score":	3199876
		}, {
			"file":	"Objects/listobject.c",
			"line":	2892,
			"primary_score":	999712,
			"second_score":	3199875
		}, {
			"file":	"Objects/listobject.c",
			"line":	2894,
			"primary_score":	999712,
			"second_score":	3199846
		}, {
			"file":	"Objects/longobject.c",
			"line":	381,
			"primary_score":	999934,
			"second_score":	96348779
		}, {
			"file":	"Objects/longobject.c",
			"line":	382,
			"primary_score":	999934,
			"second_score":	96348778
		}, {
			"file":	"Objects/longobject.c",
			"line":	386,
			"primary_score":	999934,
			"second_score":	96348777
		}, {
			"file":	"Objects/longobject.c",
			"line":	387,
			"primary_score":	999934,
			"second_score":	96348773
		}, {
			"file":	"Objects/longobject.c",
			"line":	388,
			"primary_score":	999934,
			"second_score":	96348772
		}, {
			"file":	"Objects/longobject.c",
			"line":	389,
			"primary_score":	999934,
			"second_score":	96348771
		}, {
			"file":	"Objects/longobject.c",
			"line":	397,
			"primary_score":	999943,
			"second_score":	96348770
		}, {
			"file":	"Objects/longobject.c",
			"line":	398,
			"primary_score":	999943,
			"second_score":	96348769
		}, {
			"file":	"Objects/longobject.c",
			"line":	400,
			"primary_score":	999983,
			"second_score":	151782457
		}, {
			"file":	"Objects/longobject.c",
			"line":	404,
			"primary_score":	999984,
			"second_score":	151782456
		}, {
			"file":	"Objects/longobject.c",
			"line":	423,
			"primary_score":	999965,
			"second_score":	151782452
		}, {
			"file":	"Objects/longobject.c",
			"line":	642,
			"primary_score":	999932,
			"second_score":	9640258
		}, {
			"file":	"Objects/longobject.c",
			"line":	644,
			"primary_score":	999932,
			"second_score":	9640257
		}, {
			"file":	"Objects/longobject.c",
			"line":	645,
			"primary_score":	999932,
			"second_score":	9640256
		}, {
			"file":	"Objects/longobject.c",
			"line":	647,
			"primary_score":	999932,
			"second_score":	9640255
		}, {
			"file":	"Objects/longobject.c",
			"line":	1006,
			"primary_score":	999980,
			"second_score":	55236672
		}, {
			"file":	"Objects/longobject.c",
			"line":	1007,
			"primary_score":	999980,
			"second_score":	55236671
		}, {
			"file":	"Objects/longobject.c",
			"line":	1109,
			"primary_score":	999733,
			"second_score":	59943667
		}, {
			"file":	"Objects/longobject.c",
			"line":	1110,
			"primary_score":	999733,
			"second_score":	59943666
		}, {
			"file":	"Objects/longobject.c",
			"line":	1111,
			"primary_score":	999733,
			"second_score":	59943665
		}, {
			"file":	"Objects/longobject.c",
			"line":	1113,
			"primary_score":	999733,
			"second_score":	59943664
		}, {
			"file":	"Objects/longobject.c",
			"line":	1114,
			"primary_score":	999733,
			"second_score":	59943663
		}, {
			"file":	"Objects/longobject.c",
			"line":	1647,
			"primary_score":	999970,
			"second_score":	55340963
		}, {
			"file":	"Objects/longobject.c",
			"line":	2538,
			"primary_score":	999907,
			"second_score":	7825912
		}, {
			"file":	"Objects/longobject.c",
			"line":	2620,
			"primary_score":	999988,
			"second_score":	152760144
		}, {
			"file":	"Objects/longobject.c",
			"line":	2668,
			"primary_score":	999952,
			"second_score":	152774522
		}, {
			"file":	"Objects/longobject.c",
			"line":	2669,
			"primary_score":	999952,
			"second_score":	152774521
		}, {
			"file":	"Objects/longobject.c",
			"line":	2670,
			"primary_score":	999952,
			"second_score":	152774520
		}, {
			"file":	"Objects/longobject.c",
			"line":	2671,
			"primary_score":	999952,
			"second_score":	152774519
		}, {
			"file":	"Objects/longobject.c",
			"line":	2672,
			"primary_score":	999952,
			"second_score":	152774518
		}, {
			"file":	"Objects/longobject.c",
			"line":	2675,
			"primary_score":	999952,
			"second_score":	152774517
		}, {
			"file":	"Objects/longobject.c",
			"line":	2682,
			"primary_score":	999953,
			"second_score":	152774516
		}, {
			"file":	"Objects/longobject.c",
			"line":	2695,
			"primary_score":	999953,
			"second_score":	152774515
		}, {
			"file":	"Objects/longobject.c",
			"line":	2696,
			"primary_score":	999953,
			"second_score":	152774493
		}, {
			"file":	"Objects/longobject.c",
			"line":	2698,
			"primary_score":	999953,
			"second_score":	152774492
		}, {
			"file":	"Objects/longobject.c",
			"line":	2701,
			"primary_score":	999955,
			"second_score":	152774491
		}, {
			"file":	"Objects/longobject.c",
			"line":	2702,
			"primary_score":	999955,
			"second_score":	152774490
		}, {
			"file":	"Objects/longobject.c",
			"line":	2703,
			"primary_score":	999955,
			"second_score":	152774489
		}, {
			"file":	"Objects/longobject.c",
			"line":	2704,
			"primary_score":	999955,
			"second_score":	152774488
		}, {
			"file":	"Objects/longobject.c",
			"line":	2706,
			"primary_score":	999953,
			"second_score":	152774487
		}, {
			"file":	"Objects/longobject.c",
			"line":	2707,
			"primary_score":	999953,
			"second_score":	152774482
		}, {
			"file":	"Objects/longobject.c",
			"line":	2708,
			"primary_score":	999953,
			"second_score":	152774481
		}, {
			"file":	"Objects/longobject.c",
			"line":	2709,
			"primary_score":	999953,
			"second_score":	152774480
		}, {
			"file":	"Objects/longobject.c",
			"line":	2710,
			"primary_score":	999953,
			"second_score":	152774479
		}, {
			"file":	"Objects/longobject.c",
			"line":	2712,
			"primary_score":	999953,
			"second_score":	152774478
		}, {
			"file":	"Objects/longobject.c",
			"line":	2713,
			"primary_score":	999953,
			"second_score":	152774477
		}, {
			"file":	"Objects/longobject.c",
			"line":	2715,
			"primary_score":	999953,
			"second_score":	152774476
		}, {
			"file":	"Objects/longobject.c",
			"line":	2723,
			"primary_score":	999977,
			"second_score":	51601797
		}, {
			"file":	"Objects/longobject.c",
			"line":	2760,
			"primary_score":	999949,
			"second_score":	152774525
		}, {
			"file":	"Objects/longobject.c",
			"line":	2769,
			"primary_score":	999954,
			"second_score":	152774524
		}, {
			"file":	"Objects/longobject.c",
			"line":	2772,
			"primary_score":	999954,
			"second_score":	152774523
		}, {
			"file":	"Objects/longobject.c",
			"line":	2774,
			"primary_score":	999949,
			"second_score":	152774470
		}, {
			"file":	"Objects/longobject.c",
			"line":	2800,
			"primary_score":	999970,
			"second_score":	152775629
		}, {
			"file":	"Objects/longobject.c",
			"line":	2801,
			"primary_score":	999970,
			"second_score":	152775604
		}, {
			"file":	"Objects/longobject.c",
			"line":	2802,
			"primary_score":	999970,
			"second_score":	152775603
		}, {
			"file":	"Objects/longobject.c",
			"line":	2803,
			"primary_score":	999970,
			"second_score":	152775602
		}, {
			"file":	"Objects/longobject.c",
			"line":	2804,
			"primary_score":	999970,
			"second_score":	152775601
		}, {
			"file":	"Objects/longobject.c",
			"line":	2805,
			"primary_score":	999970,
			"second_score":	152775600
		}, {
			"file":	"Objects/longobject.c",
			"line":	2807,
			"primary_score":	999970,
			"second_score":	152775599
		}, {
			"file":	"Objects/longobject.c",
			"line":	2812,
			"primary_score":	999970,
			"second_score":	152775593
		}, {
			"file":	"Objects/longobject.c",
			"line":	2813,
			"primary_score":	999970,
			"second_score":	152775592
		}, {
			"file":	"Objects/longobject.c",
			"line":	2814,
			"primary_score":	999970,
			"second_score":	152775591
		}, {
			"file":	"Objects/longobject.c",
			"line":	2815,
			"primary_score":	999970,
			"second_score":	152775590
		}, {
			"file":	"Objects/longobject.c",
			"line":	2820,
			"primary_score":	999970,
			"second_score":	152775589
		}, {
			"file":	"Objects/longobject.c",
			"line":	2821,
			"primary_score":	999970,
			"second_score":	152775588
		}, {
			"file":	"Objects/longobject.c",
			"line":	2822,
			"primary_score":	999970,
			"second_score":	152775611
		}, {
			"file":	"Objects/longobject.c",
			"line":	2823,
			"primary_score":	999970,
			"second_score":	152775610
		}, {
			"file":	"Objects/longobject.c",
			"line":	2824,
			"primary_score":	999970,
			"second_score":	152775609
		}, {
			"file":	"Objects/longobject.c",
			"line":	2825,
			"primary_score":	999970,
			"second_score":	152775608
		}, {
			"file":	"Objects/longobject.c",
			"line":	2827,
			"primary_score":	999970,
			"second_score":	152775587
		}, {
			"file":	"Objects/longobject.c",
			"line":	2832,
			"primary_score":	999970,
			"second_score":	152775586
		}, {
			"file":	"Objects/longobject.c",
			"line":	2834,
			"primary_score":	999970,
			"second_score":	152775585
		}, {
			"file":	"Objects/longobject.c",
			"line":	2931,
			"primary_score":	999965,
			"second_score":	152772336
		}, {
			"file":	"Objects/longobject.c",
			"line":	2932,
			"primary_score":	999965,
			"second_score":	152772335
		}, {
			"file":	"Objects/longobject.c",
			"line":	2933,
			"primary_score":	999965,
			"second_score":	152772334
		}, {
			"file":	"Objects/longobject.c",
			"line":	2935,
			"primary_score":	999965,
			"second_score":	152772333
		}, {
			"file":	"Objects/longobject.c",
			"line":	2936,
			"primary_score":	999965,
			"second_score":	152772332
		}, {
			"file":	"Objects/longobject.c",
			"line":	2937,
			"primary_score":	999965,
			"second_score":	152772331
		}, {
			"file":	"Objects/longobject.c",
			"line":	3265,
			"primary_score":	999957,
			"second_score":	52679402
		}, {
			"file":	"Objects/longobject.c",
			"line":	3268,
			"primary_score":	999944,
			"second_score":	52679400
		}, {
			"file":	"Objects/longobject.c",
			"line":	3552,
			"primary_score":	999955,
			"second_score":	52679508
		}, {
			"file":	"Objects/longobject.c",
			"line":	3554,
			"primary_score":	999955,
			"second_score":	52679507
		}, {
			"file":	"Objects/longobject.c",
			"line":	3556,
			"primary_score":	999956,
			"second_score":	52679505
		}, {
			"file":	"Objects/longobject.c",
			"line":	3558,
			"primary_score":	999956,
			"second_score":	52679398
		}, {
			"file":	"Objects/longobject.c",
			"line":	3634,
			"primary_score":	999940,
			"second_score":	53036257
		}, {
			"file":	"Objects/longobject.c",
			"line":	3679,
			"primary_score":	999940,
			"second_score":	53036256
		}, {
			"file":	"Objects/longobject.c",
			"line":	3680,
			"primary_score":	999940,
			"second_score":	53036245
		}, {
			"file":	"Objects/longobject.c",
			"line":	3710,
			"primary_score":	999940,
			"second_score":	53036244
		}, {
			"file":	"Objects/longobject.c",
			"line":	3713,
			"primary_score":	999940,
			"second_score":	53036243
		}, {
			"file":	"Objects/longobject.c",
			"line":	3714,
			"primary_score":	999940,
			"second_score":	53036242
		}, {
			"file":	"Objects/longobject.c",
			"line":	3716,
			"primary_score":	999940,
			"second_score":	53036241
		}, {
			"file":	"Objects/longobject.c",
			"line":	3717,
			"primary_score":	999958,
			"second_score":	152770146
		}, {
			"file":	"Objects/longobject.c",
			"line":	3718,
			"primary_score":	999940,
			"second_score":	53035343
		}, {
			"file":	"Objects/longobject.c",
			"line":	3719,
			"primary_score":	999961,
			"second_score":	152770062
		}, {
			"file":	"Objects/longobject.c",
			"line":	3743,
			"primary_score":	999940,
			"second_score":	53035342
		}, {
			"file":	"Objects/longobject.c",
			"line":	3751,
			"primary_score":	999940,
			"second_score":	53035341
		}, {
			"file":	"Objects/longobject.c",
			"line":	3764,
			"primary_score":	999940,
			"second_score":	53035340
		}, {
			"file":	"Objects/longobject.c",
			"line":	3765,
			"primary_score":	999940,
			"second_score":	53035337
		}, {
			"file":	"Objects/longobject.c",
			"line":	3766,
			"primary_score":	999940,
			"second_score":	53035334
		}, {
			"file":	"Objects/longobject.c",
			"line":	3767,
			"primary_score":	999940,
			"second_score":	53035331
		}, {
			"file":	"Objects/longobject.c",
			"line":	3768,
			"primary_score":	999940,
			"second_score":	53035328
		}, {
			"file":	"Objects/longobject.c",
			"line":	3775,
			"primary_score":	999975,
			"second_score":	9895596
		}, {
			"file":	"Objects/longobject.c",
			"line":	3776,
			"primary_score":	999975,
			"second_score":	9895595
		}, {
			"file":	"Objects/longobject.c",
			"line":	3777,
			"primary_score":	999975,
			"second_score":	9895594
		}, {
			"file":	"Objects/longobject.c",
			"line":	3778,
			"primary_score":	999977,
			"second_score":	9895593
		}, {
			"file":	"Objects/longobject.c",
			"line":	3851,
			"primary_score":	999849,
			"second_score":	261225848
		}, {
			"file":	"Objects/longobject.c",
			"line":	4001,
			"primary_score":	999975,
			"second_score":	51840007
		}, {
			"file":	"Objects/longobject.c",
			"line":	4002,
			"primary_score":	999975,
			"second_score":	51840006
		}, {
			"file":	"Objects/longobject.c",
			"line":	4038,
			"primary_score":	999975,
			"second_score":	51839981
		}, {
			"file":	"Objects/longobject.c",
			"line":	4076,
			"primary_score":	999974,
			"second_score":	51840024
		}, {
			"file":	"Objects/longobject.c",
			"line":	4077,
			"primary_score":	999974,
			"second_score":	51840023
		}, {
			"file":	"Objects/longobject.c",
			"line":	4078,
			"primary_score":	999975,
			"second_score":	51840021
		}, {
			"file":	"Objects/longobject.c",
			"line":	4079,
			"primary_score":	999975,
			"second_score":	51839936
		}, {
			"file":	"Objects/longobject.c",
			"line":	4882,
			"primary_score":	999711,
			"second_score":	47207
		}, {
			"file":	"Objects/longobject.c",
			"line":	4883,
			"primary_score":	999711,
			"second_score":	47206
		}, {
			"file":	"Objects/longobject.c",
			"line":	4884,
			"primary_score":	999711,
			"second_score":	47205
		}, {
			"file":	"Objects/longobject.c",
			"line":	4885,
			"primary_score":	999711,
			"second_score":	46682
		}, {
			"file":	"Objects/longobject.c",
			"line":	4886,
			"primary_score":	999711,
			"second_score":	46681
		}, {
			"file":	"Objects/methodobject.c",
			"line":	19,
			"primary_score":	999711,
			"second_score":	171040
		}, {
			"file":	"Objects/methodobject.c",
			"line":	20,
			"primary_score":	999711,
			"second_score":	171039
		}, {
			"file":	"Objects/methodobject.c",
			"line":	21,
			"primary_score":	999711,
			"second_score":	171038
		}, {
			"file":	"Objects/methodobject.c",
			"line":	22,
			"primary_score":	999711,
			"second_score":	171037
		}, {
			"file":	"Objects/methodobject.c",
			"line":	23,
			"primary_score":	999711,
			"second_score":	171036
		}, {
			"file":	"Objects/methodobject.c",
			"line":	24,
			"primary_score":	999711,
			"second_score":	171035
		}, {
			"file":	"Objects/methodobject.c",
			"line":	31,
			"primary_score":	999711,
			"second_score":	171034
		}, {
			"file":	"Objects/methodobject.c",
			"line":	32,
			"primary_score":	999711,
			"second_score":	171033
		}, {
			"file":	"Objects/methodobject.c",
			"line":	33,
			"primary_score":	999711,
			"second_score":	171030
		}, {
			"file":	"Objects/methodobject.c",
			"line":	34,
			"primary_score":	999711,
			"second_score":	171029
		}, {
			"file":	"Objects/methodobject.c",
			"line":	35,
			"primary_score":	999711,
			"second_score":	171026
		}, {
			"file":	"Objects/methodobject.c",
			"line":	36,
			"primary_score":	999711,
			"second_score":	171025
		}, {
			"file":	"Objects/methodobject.c",
			"line":	37,
			"primary_score":	999711,
			"second_score":	171016
		}, {
			"file":	"Objects/methodobject.c",
			"line":	73,
			"primary_score":	999711,
			"second_score":	170969
		}, {
			"file":	"Objects/methodobject.c",
			"line":	74,
			"primary_score":	999711,
			"second_score":	170968
		}, {
			"file":	"Objects/methodobject.c",
			"line":	75,
			"primary_score":	999711,
			"second_score":	170967
		}, {
			"file":	"Objects/methodobject.c",
			"line":	76,
			"primary_score":	999711,
			"second_score":	170966
		}, {
			"file":	"Objects/methodobject.c",
			"line":	78,
			"primary_score":	999711,
			"second_score":	170965
		}, {
			"file":	"Objects/methodobject.c",
			"line":	87,
			"primary_score":	999711,
			"second_score":	170964
		}, {
			"file":	"Objects/methodobject.c",
			"line":	88,
			"primary_score":	999711,
			"second_score":	170963
		}, {
			"file":	"Objects/methodobject.c",
			"line":	89,
			"primary_score":	999711,
			"second_score":	170962
		}, {
			"file":	"Objects/methodobject.c",
			"line":	124,
			"primary_score":	999711,
			"second_score":	165447
		}, {
			"file":	"Objects/methodobject.c",
			"line":	125,
			"primary_score":	999711,
			"second_score":	170782
		}, {
			"file":	"Objects/methodobject.c",
			"line":	126,
			"primary_score":	999711,
			"second_score":	165436
		}, {
			"file":	"Objects/methodobject.c",
			"line":	127,
			"primary_score":	999711,
			"second_score":	165433
		}, {
			"file":	"Objects/methodobject.c",
			"line":	128,
			"primary_score":	999711,
			"second_score":	165432
		}, {
			"file":	"Objects/methodobject.c",
			"line":	129,
			"primary_score":	999711,
			"second_score":	165431
		}, {
			"file":	"Objects/methodobject.c",
			"line":	130,
			"primary_score":	999711,
			"second_score":	165430
		}, {
			"file":	"Objects/methodobject.c",
			"line":	288,
			"primary_score":	999711,
			"second_score":	130377
		}, {
			"file":	"Objects/methodobject.c",
			"line":	290,
			"primary_score":	999711,
			"second_score":	130376
		}, {
			"file":	"Objects/methodobject.c",
			"line":	291,
			"primary_score":	999711,
			"second_score":	128555
		}, {
			"file":	"Objects/methodobject.c",
			"line":	292,
			"primary_score":	999711,
			"second_score":	128554
		}, {
			"file":	"Objects/methodobject.c",
			"line":	293,
			"primary_score":	999711,
			"second_score":	128553
		}, {
			"file":	"Objects/methodobject.c",
			"line":	294,
			"primary_score":	999711,
			"second_score":	128530
		}, {
			"file":	"Objects/methodobject.c",
			"line":	296,
			"primary_score":	999711,
			"second_score":	128529
		}, {
			"file":	"Objects/methodobject.c",
			"line":	297,
			"primary_score":	999711,
			"second_score":	128528
		}, {
			"file":	"Objects/methodobject.c",
			"line":	303,
			"primary_score":	999711,
			"second_score":	130378
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	259,
			"primary_score":	999711,
			"second_score":	151485
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	263,
			"primary_score":	999711,
			"second_score":	151484
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	276,
			"primary_score":	999711,
			"second_score":	132286
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	277,
			"primary_score":	999711,
			"second_score":	132285
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	278,
			"primary_score":	999711,
			"second_score":	132284
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	280,
			"primary_score":	999711,
			"second_score":	132283
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	281,
			"primary_score":	999711,
			"second_score":	132282
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	285,
			"primary_score":	999711,
			"second_score":	132281
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	286,
			"primary_score":	999711,
			"second_score":	132280
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	287,
			"primary_score":	999711,
			"second_score":	132178
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	288,
			"primary_score":	999711,
			"second_score":	140652
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	289,
			"primary_score":	999711,
			"second_score":	140651
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	303,
			"primary_score":	999711,
			"second_score":	132165
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	304,
			"primary_score":	999711,
			"second_score":	132164
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	305,
			"primary_score":	999711,
			"second_score":	132062
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	306,
			"primary_score":	999711,
			"second_score":	138664
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	307,
			"primary_score":	999711,
			"second_score":	138663
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	355,
			"primary_score":	999711,
			"second_score":	132299
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	356,
			"primary_score":	999711,
			"second_score":	132289
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	357,
			"primary_score":	999713,
			"second_score":	151488
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	358,
			"primary_score":	999711,
			"second_score":	132288
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	359,
			"primary_score":	999711,
			"second_score":	132287
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	360,
			"primary_score":	999711,
			"second_score":	141351
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	362,
			"primary_score":	999711,
			"second_score":	131928
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	363,
			"primary_score":	999711,
			"second_score":	132343
		}, {
			"file":	"Objects/moduleobject.c",
			"line":	364,
			"primary_score":	999711,
			"second_score":	131927
		}, {
			"file":	"Objects/object.c",
			"line":	556,
			"primary_score":	999940,
			"second_score":	7825856
		}, {
			"file":	"Objects/object.c",
			"line":	705,
			"primary_score":	999975,
			"second_score":	263686853
		}, {
			"file":	"Objects/object.c",
			"line":	706,
			"primary_score":	999975,
			"second_score":	263686852
		}, {
			"file":	"Objects/object.c",
			"line":	713,
			"primary_score":	999889,
			"second_score":	10107170
		}, {
			"file":	"Objects/object.c",
			"line":	714,
			"primary_score":	999889,
			"second_score":	10107169
		}, {
			"file":	"Objects/object.c",
			"line":	715,
			"primary_score":	999889,
			"second_score":	10107168
		}, {
			"file":	"Objects/object.c",
			"line":	716,
			"primary_score":	999889,
			"second_score":	10107167
		}, {
			"file":	"Objects/object.c",
			"line":	717,
			"primary_score":	999889,
			"second_score":	10107166
		}, {
			"file":	"Objects/object.c",
			"line":	718,
			"primary_score":	999889,
			"second_score":	10107165
		}, {
			"file":	"Objects/object.c",
			"line":	719,
			"primary_score":	999889,
			"second_score":	10107164
		}, {
			"file":	"Objects/object.c",
			"line":	787,
			"primary_score":	999711,
			"second_score":	171552
		}, {
			"file":	"Objects/object.c",
			"line":	788,
			"primary_score":	999711,
			"second_score":	171548
		}, {
			"file":	"Objects/object.c",
			"line":	822,
			"primary_score":	999711,
			"second_score":	170157
		}, {
			"file":	"Objects/object.c",
			"line":	824,
			"primary_score":	999711,
			"second_score":	170156
		}, {
			"file":	"Objects/object.c",
			"line":	830,
			"primary_score":	999711,
			"second_score":	170155
		}, {
			"file":	"Objects/object.c",
			"line":	831,
			"primary_score":	999711,
			"second_score":	170154
		}, {
			"file":	"Objects/object.c",
			"line":	908,
			"primary_score":	999711,
			"second_score":	166500
		}, {
			"file":	"Objects/object.c",
			"line":	909,
			"primary_score":	999711,
			"second_score":	166499
		}, {
			"file":	"Objects/object.c",
			"line":	911,
			"primary_score":	999711,
			"second_score":	166498
		}, {
			"file":	"Objects/object.c",
			"line":	912,
			"primary_score":	999711,
			"second_score":	166497
		}, {
			"file":	"Objects/object.c",
			"line":	914,
			"primary_score":	999711,
			"second_score":	166496
		}, {
			"file":	"Objects/object.c",
			"line":	915,
			"primary_score":	999711,
			"second_score":	166495
		}, {
			"file":	"Objects/object.c",
			"line":	916,
			"primary_score":	999711,
			"second_score":	166494
		}, {
			"file":	"Objects/object.c",
			"line":	918,
			"primary_score":	999711,
			"second_score":	166493
		}, {
			"file":	"Objects/object.c",
			"line":	919,
			"primary_score":	999711,
			"second_score":	166492
		}, {
			"file":	"Objects/object.c",
			"line":	921,
			"primary_score":	999711,
			"second_score":	166491
		}, {
			"file":	"Objects/object.c",
			"line":	923,
			"primary_score":	999711,
			"second_score":	166490
		}, {
			"file":	"Objects/object.c",
			"line":	924,
			"primary_score":	999711,
			"second_score":	166489
		}, {
			"file":	"Objects/object.c",
			"line":	925,
			"primary_score":	999711,
			"second_score":	166488
		}, {
			"file":	"Objects/object.c",
			"line":	927,
			"primary_score":	999711,
			"second_score":	166487
		}, {
			"file":	"Objects/object.c",
			"line":	956,
			"primary_score":	999711,
			"second_score":	170152
		}, {
			"file":	"Objects/object.c",
			"line":	957,
			"primary_score":	999711,
			"second_score":	170151
		}, {
			"file":	"Objects/object.c",
			"line":	958,
			"primary_score":	999711,
			"second_score":	170150
		}, {
			"file":	"Objects/object.c",
			"line":	959,
			"primary_score":	999711,
			"second_score":	170149
		}, {
			"file":	"Objects/object.c",
			"line":	960,
			"primary_score":	999711,
			"second_score":	170148
		}, {
			"file":	"Objects/object.c",
			"line":	961,
			"primary_score":	999711,
			"second_score":	170147
		}, {
			"file":	"Objects/object.c",
			"line":	963,
			"primary_score":	999711,
			"second_score":	170146
		}, {
			"file":	"Objects/object.c",
			"line":	970,
			"primary_score":	999711,
			"second_score":	170145
		}, {
			"file":	"Objects/object.c",
			"line":	972,
			"primary_score":	999711,
			"second_score":	170144
		}, {
			"file":	"Objects/object.c",
			"line":	977,
			"primary_score":	999711,
			"second_score":	170143
		}, {
			"file":	"Objects/object.c",
			"line":	978,
			"primary_score":	999711,
			"second_score":	170135
		}, {
			"file":	"Objects/object.c",
			"line":	980,
			"primary_score":	999711,
			"second_score":	170132
		}, {
			"file":	"Objects/object.c",
			"line":	981,
			"primary_score":	999711,
			"second_score":	170131
		}, {
			"file":	"Objects/object.c",
			"line":	982,
			"primary_score":	999711,
			"second_score":	170130
		}, {
			"file":	"Objects/object.c",
			"line":	983,
			"primary_score":	999711,
			"second_score":	170129
		}, {
			"file":	"Objects/object.c",
			"line":	984,
			"primary_score":	999711,
			"second_score":	170128
		}, {
			"file":	"Objects/object.c",
			"line":	985,
			"primary_score":	999711,
			"second_score":	170114
		}, {
			"file":	"Objects/object.c",
			"line":	986,
			"primary_score":	999711,
			"second_score":	170111
		}, {
			"file":	"Objects/object.c",
			"line":	990,
			"primary_score":	999711,
			"second_score":	171096
		}, {
			"file":	"Objects/object.c",
			"line":	992,
			"primary_score":	999711,
			"second_score":	171095
		}, {
			"file":	"Objects/object.c",
			"line":	993,
			"primary_score":	999711,
			"second_score":	171094
		}, {
			"file":	"Objects/object.c",
			"line":	994,
			"primary_score":	999711,
			"second_score":	171093
		}, {
			"file":	"Objects/object.c",
			"line":	1007,
			"primary_score":	999711,
			"second_score":	171092
		}, {
			"file":	"Objects/object.c",
			"line":	1008,
			"primary_score":	999711,
			"second_score":	171091
		}, {
			"file":	"Objects/object.c",
			"line":	1011,
			"primary_score":	999711,
			"second_score":	171090
		}, {
			"file":	"Objects/object.c",
			"line":	1012,
			"primary_score":	999711,
			"second_score":	171089
		}, {
			"file":	"Objects/object.c",
			"line":	1013,
			"primary_score":	999711,
			"second_score":	171088
		}, {
			"file":	"Objects/object.c",
			"line":	1014,
			"primary_score":	999711,
			"second_score":	171052
		}, {
			"file":	"Objects/object.c",
			"line":	1020,
			"primary_score":	999711,
			"second_score":	171051
		}, {
			"file":	"Objects/object.c",
			"line":	1023,
			"primary_score":	999711,
			"second_score":	171048
		}, {
			"file":	"Objects/object.c",
			"line":	1024,
			"primary_score":	999711,
			"second_score":	171047
		}, {
			"file":	"Objects/object.c",
			"line":	1025,
			"primary_score":	999711,
			"second_score":	171015
		}, {
			"file":	"Objects/object.c",
			"line":	1026,
			"primary_score":	999711,
			"second_score":	171012
		}, {
			"file":	"Objects/object.c",
			"line":	1039,
			"primary_score":	999711,
			"second_score":	170110
		}, {
			"file":	"Objects/object.c",
			"line":	1040,
			"primary_score":	999711,
			"second_score":	170108
		}, {
			"file":	"Objects/object.c",
			"line":	1046,
			"primary_score":	999711,
			"second_score":	170153
		}, {
			"file":	"Objects/object.c",
			"line":	1140,
			"primary_score":	999711,
			"second_score":	170105
		}, {
			"file":	"Objects/object.c",
			"line":	1141,
			"primary_score":	999711,
			"second_score":	170104
		}, {
			"file":	"Objects/object.c",
			"line":	1142,
			"primary_score":	999711,
			"second_score":	170103
		}, {
			"file":	"Objects/object.c",
			"line":	1143,
			"primary_score":	999711,
			"second_score":	171414
		}, {
			"file":	"Objects/object.c",
			"line":	1144,
			"primary_score":	999711,
			"second_score":	171413
		}, {
			"file":	"Objects/object.c",
			"line":	1180,
			"primary_score":	999711,
			"second_score":	171545
		}, {
			"file":	"Objects/object.c",
			"line":	1182,
			"primary_score":	999711,
			"second_score":	171544
		}, {
			"file":	"Objects/object.c",
			"line":	1198,
			"primary_score":	999733,
			"second_score":	59946057
		}, {
			"file":	"Objects/object.c",
			"line":	1199,
			"primary_score":	999733,
			"second_score":	59946056
		}, {
			"file":	"Objects/object.c",
			"line":	1201,
			"primary_score":	999733,
			"second_score":	59946055
		}, {
			"file":	"Objects/object.c",
			"line":	1202,
			"primary_score":	999733,
			"second_score":	59946054
		}, {
			"file":	"Objects/object.c",
			"line":	1205,
			"primary_score":	999733,
			"second_score":	59946053
		}, {
			"file":	"Objects/object.c",
			"line":	1206,
			"primary_score":	999733,
			"second_score":	59945685
		}, {
			"file":	"Objects/object.c",
			"line":	1209,
			"primary_score":	999733,
			"second_score":	59945684
		}, {
			"file":	"Objects/object.c",
			"line":	1210,
			"primary_score":	999733,
			"second_score":	59938661
		}, {
			"file":	"Objects/object.c",
			"line":	1211,
			"primary_score":	999733,
			"second_score":	59938623
		}, {
			"file":	"Objects/object.c",
			"line":	1216,
			"primary_score":	999733,
			"second_score":	59938622
		}, {
			"file":	"Objects/object.c",
			"line":	1217,
			"primary_score":	999733,
			"second_score":	59938259
		}, {
			"file":	"Objects/object.c",
			"line":	1221,
			"primary_score":	999733,
			"second_score":	59938258
		}, {
			"file":	"Objects/object.c",
			"line":	1222,
			"primary_score":	999733,
			"second_score":	59938257
		}, {
			"file":	"Objects/object.c",
			"line":	1223,
			"primary_score":	999733,
			"second_score":	59938250
		}, {
			"file":	"Objects/object.c",
			"line":	1226,
			"primary_score":	999733,
			"second_score":	59938249
		}, {
			"file":	"Objects/object.c",
			"line":	1227,
			"primary_score":	999733,
			"second_score":	59946070
		}, {
			"file":	"Objects/object.c",
			"line":	1228,
			"primary_score":	999733,
			"second_score":	59946069
		}, {
			"file":	"Objects/object.c",
			"line":	1229,
			"primary_score":	999733,
			"second_score":	59946059
		}, {
			"file":	"Objects/object.c",
			"line":	1233,
			"primary_score":	999733,
			"second_score":	59946058
		}, {
			"file":	"Objects/object.c",
			"line":	1234,
			"primary_score":	999733,
			"second_score":	59938236
		}, {
			"file":	"Objects/object.c",
			"line":	1235,
			"primary_score":	999733,
			"second_score":	59938233
		}, {
			"file":	"Objects/object.c",
			"line":	1241,
			"primary_score":	999733,
			"second_score":	59938232
		}, {
			"file":	"Objects/object.c",
			"line":	1243,
			"primary_score":	999733,
			"second_score":	59938229
		}, {
			"file":	"Objects/object.c",
			"line":	1279,
			"primary_score":	999735,
			"second_score":	59964889
		}, {
			"file":	"Objects/object.c",
			"line":	1280,
			"primary_score":	999735,
			"second_score":	59964888
		}, {
			"file":	"Objects/object.c",
			"line":	1282,
			"primary_score":	999735,
			"second_score":	59964871
		}, {
			"file":	"Objects/object.c",
			"line":	1283,
			"primary_score":	999735,
			"second_score":	59938228
		}, {
			"file":	"Objects/object.c",
			"line":	1285,
			"primary_score":	999735,
			"second_score":	59937283
		}, {
			"file":	"Objects/object.c",
			"line":	1286,
			"primary_score":	999735,
			"second_score":	59935868
		}, {
			"file":	"Objects/object.c",
			"line":	1377,
			"primary_score":	999733,
			"second_score":	59964891
		}, {
			"file":	"Objects/object.c",
			"line":	1378,
			"primary_score":	999735,
			"second_score":	59964890
		}, {
			"file":	"Objects/object.c",
			"line":	1441,
			"primary_score":	999956,
			"second_score":	7892317
		}, {
			"file":	"Objects/object.c",
			"line":	1781,
			"primary_score":	999711,
			"second_score":	169858
		}, {
			"file":	"Objects/object.c",
			"line":	1820,
			"primary_score":	999966,
			"second_score":	48487210
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	925,
			"primary_score":	999944,
			"second_score":	20420853
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	926,
			"primary_score":	999944,
			"second_score":	20420852
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	952,
			"primary_score":	999711,
			"second_score":	17
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	953,
			"primary_score":	999711,
			"second_score":	16
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	954,
			"primary_score":	999711,
			"second_score":	15
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	955,
			"primary_score":	999711,
			"second_score":	14
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	957,
			"primary_score":	999711,
			"second_score":	13
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	960,
			"primary_score":	999711,
			"second_score":	12
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	968,
			"primary_score":	999711,
			"second_score":	11
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	969,
			"primary_score":	999711,
			"second_score":	10
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	971,
			"primary_score":	999711,
			"second_score":	30
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	978,
			"primary_score":	999711,
			"second_score":	29
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	979,
			"primary_score":	999711,
			"second_score":	28
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	980,
			"primary_score":	999711,
			"second_score":	27
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	981,
			"primary_score":	999711,
			"second_score":	26
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	982,
			"primary_score":	999711,
			"second_score":	25
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	983,
			"primary_score":	999711,
			"second_score":	24
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	988,
			"primary_score":	999711,
			"second_score":	23
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	990,
			"primary_score":	999711,
			"second_score":	22
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	991,
			"primary_score":	999711,
			"second_score":	21
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	998,
			"primary_score":	999711,
			"second_score":	3572
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	999,
			"primary_score":	999711,
			"second_score":	3571
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1000,
			"primary_score":	999711,
			"second_score":	3570
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1001,
			"primary_score":	999711,
			"second_score":	3569
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1006,
			"primary_score":	999711,
			"second_score":	3568
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1007,
			"primary_score":	999711,
			"second_score":	3567
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1008,
			"primary_score":	999711,
			"second_score":	3566
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1009,
			"primary_score":	999711,
			"second_score":	3565
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1023,
			"primary_score":	999711,
			"second_score":	3564
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1046,
			"primary_score":	999916,
			"second_score":	127010117
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1047,
			"primary_score":	999916,
			"second_score":	127010116
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1064,
			"primary_score":	999711,
			"second_score":	3563
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1070,
			"primary_score":	999711,
			"second_score":	60575
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1071,
			"primary_score":	999711,
			"second_score":	60574
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1072,
			"primary_score":	999711,
			"second_score":	60573
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1073,
			"primary_score":	999711,
			"second_score":	60572
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1074,
			"primary_score":	999711,
			"second_score":	60571
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1075,
			"primary_score":	999711,
			"second_score":	60570
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1077,
			"primary_score":	999711,
			"second_score":	60569
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1078,
			"primary_score":	999711,
			"second_score":	60568
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1087,
			"primary_score":	999711,
			"second_score":	3562
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1090,
			"primary_score":	999711,
			"second_score":	3561
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1091,
			"primary_score":	999711,
			"second_score":	3560
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1098,
			"primary_score":	999711,
			"second_score":	135817
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1100,
			"primary_score":	999711,
			"second_score":	135816
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1101,
			"primary_score":	999711,
			"second_score":	135815
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1108,
			"primary_score":	999711,
			"second_score":	135814
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1113,
			"primary_score":	999711,
			"second_score":	135813
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1115,
			"primary_score":	999711,
			"second_score":	135808
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1116,
			"primary_score":	999711,
			"second_score":	135807
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1120,
			"primary_score":	999711,
			"second_score":	135806
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1122,
			"primary_score":	999711,
			"second_score":	135805
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1124,
			"primary_score":	999711,
			"second_score":	135804
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1125,
			"primary_score":	999711,
			"second_score":	135803
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1126,
			"primary_score":	999711,
			"second_score":	135802
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1129,
			"primary_score":	999711,
			"second_score":	135801
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1131,
			"primary_score":	999711,
			"second_score":	135800
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1133,
			"primary_score":	999711,
			"second_score":	135799
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1135,
			"primary_score":	999711,
			"second_score":	135798
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1139,
			"primary_score":	999711,
			"second_score":	135797
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1140,
			"primary_score":	999711,
			"second_score":	135796
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1148,
			"primary_score":	999711,
			"second_score":	19026
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1149,
			"primary_score":	999711,
			"second_score":	19025
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1150,
			"primary_score":	999711,
			"second_score":	19024
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1151,
			"primary_score":	999711,
			"second_score":	19023
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1152,
			"primary_score":	999711,
			"second_score":	19022
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1154,
			"primary_score":	999711,
			"second_score":	19021
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1155,
			"primary_score":	999711,
			"second_score":	19020
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1156,
			"primary_score":	999711,
			"second_score":	19019
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1157,
			"primary_score":	999711,
			"second_score":	19018
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1158,
			"primary_score":	999711,
			"second_score":	19017
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1159,
			"primary_score":	999711,
			"second_score":	19016
		}, {
			"file":	"Objects/obmalloc.c",
			"line":	1166,
			"primary_score":	999711,
			"second_score":	9
		}, {
			"file":	"Objects/rangeobject.c",
			"line":	148,
			"primary_score":	999906,
			"second_score":	47942577
		}, {
			"file":	"Objects/rangeobject.c",
			"line":	211,
			"primary_score":	999906,
			"second_score":	48426316
		}, {
			"file":	"Objects/rangeobject.c",
			"line":	212,
			"primary_score":	999904,
			"second_score":	48426294
		}, {
			"file":	"Objects/rangeobject.c",
			"line":	214,
			"primary_score":	999904,
			"second_score":	48426263
		}, {
			"file":	"Objects/setobject.c",
			"line":	366,
			"primary_score":	999989,
			"second_score":	5645437
		}, {
			"file":	"Objects/setobject.c",
			"line":	367,
			"primary_score":	999989,
			"second_score":	5645436
		}, {
			"file":	"Objects/setobject.c",
			"line":	368,
			"primary_score":	999989,
			"second_score":	5645435
		}, {
			"file":	"Objects/setobject.c",
			"line":	370,
			"primary_score":	999989,
			"second_score":	5645434
		}, {
			"file":	"Objects/setobject.c",
			"line":	371,
			"primary_score":	999989,
			"second_score":	5645433
		}, {
			"file":	"Objects/setobject.c",
			"line":	372,
			"primary_score":	999989,
			"second_score":	5645432
		}, {
			"file":	"Objects/setobject.c",
			"line":	373,
			"primary_score":	999989,
			"second_score":	5645431
		}, {
			"file":	"Objects/setobject.c",
			"line":	377,
			"primary_score":	999989,
			"second_score":	5645408
		}, {
			"file":	"Objects/setobject.c",
			"line":	378,
			"primary_score":	999989,
			"second_score":	5645407
		}, {
			"file":	"Objects/setobject.c",
			"line":	582,
			"primary_score":	999992,
			"second_score":	49261374
		}, {
			"file":	"Objects/setobject.c",
			"line":	583,
			"primary_score":	999992,
			"second_score":	49261373
		}, {
			"file":	"Objects/setobject.c",
			"line":	584,
			"primary_score":	999992,
			"second_score":	49261372
		}, {
			"file":	"Objects/setobject.c",
			"line":	585,
			"primary_score":	999992,
			"second_score":	49261096
		}, {
			"file":	"Objects/setobject.c",
			"line":	586,
			"primary_score":	999992,
			"second_score":	49261095
		}, {
			"file":	"Objects/setobject.c",
			"line":	588,
			"primary_score":	999992,
			"second_score":	49261094
		}, {
			"file":	"Objects/setobject.c",
			"line":	595,
			"primary_score":	999992,
			"second_score":	49261093
		}, {
			"file":	"Objects/setobject.c",
			"line":	600,
			"primary_score":	999993,
			"second_score":	49261092
		}, {
			"file":	"Objects/setobject.c",
			"line":	601,
			"primary_score":	999993,
			"second_score":	49260805
		}, {
			"file":	"Objects/setobject.c",
			"line":	604,
			"primary_score":	999993,
			"second_score":	49260804
		}, {
			"file":	"Objects/setobject.c",
			"line":	605,
			"primary_score":	999993,
			"second_score":	49259007
		}, {
			"file":	"Objects/setobject.c",
			"line":	606,
			"primary_score":	999993,
			"second_score":	49258968
		}, {
			"file":	"Objects/setobject.c",
			"line":	608,
			"primary_score":	999993,
			"second_score":	49258967
		}, {
			"file":	"Objects/setobject.c",
			"line":	609,
			"primary_score":	999993,
			"second_score":	49258966
		}, {
			"file":	"Objects/setobject.c",
			"line":	610,
			"primary_score":	999993,
			"second_score":	49258881
		}, {
			"file":	"Objects/setobject.c",
			"line":	611,
			"primary_score":	999993,
			"second_score":	49258880
		}, {
			"file":	"Objects/setobject.c",
			"line":	612,
			"primary_score":	999993,
			"second_score":	49258879
		}, {
			"file":	"Objects/setobject.c",
			"line":	614,
			"primary_score":	999993,
			"second_score":	49258878
		}, {
			"file":	"Objects/setobject.c",
			"line":	616,
			"primary_score":	999993,
			"second_score":	49258877
		}, {
			"file":	"Objects/setobject.c",
			"line":	617,
			"primary_score":	999993,
			"second_score":	49258876
		}, {
			"file":	"Objects/setobject.c",
			"line":	619,
			"primary_score":	999993,
			"second_score":	49258875
		}, {
			"file":	"Objects/setobject.c",
			"line":	620,
			"primary_score":	999993,
			"second_score":	49258844
		}, {
			"file":	"Objects/setobject.c",
			"line":	621,
			"primary_score":	999996,
			"second_score":	49258843
		}, {
			"file":	"Objects/setobject.c",
			"line":	624,
			"primary_score":	999996,
			"second_score":	49258303
		}, {
			"file":	"Objects/setobject.c",
			"line":	625,
			"primary_score":	999996,
			"second_score":	49258272
		}, {
			"file":	"Objects/setobject.c",
			"line":	627,
			"primary_score":	999993,
			"second_score":	49258271
		}, {
			"file":	"Objects/setobject.c",
			"line":	629,
			"primary_score":	999993,
			"second_score":	49257983
		}, {
			"file":	"Objects/setobject.c",
			"line":	700,
			"primary_score":	999964,
			"second_score":	5645457
		}, {
			"file":	"Objects/setobject.c",
			"line":	701,
			"primary_score":	999964,
			"second_score":	5645456
		}, {
			"file":	"Objects/setobject.c",
			"line":	703,
			"primary_score":	999964,
			"second_score":	5645455
		}, {
			"file":	"Objects/setobject.c",
			"line":	704,
			"primary_score":	999964,
			"second_score":	5645443
		}, {
			"file":	"Objects/setobject.c",
			"line":	706,
			"primary_score":	999964,
			"second_score":	5645442
		}, {
			"file":	"Objects/setobject.c",
			"line":	707,
			"primary_score":	999964,
			"second_score":	5645441
		}, {
			"file":	"Objects/setobject.c",
			"line":	770,
			"primary_score":	999995,
			"second_score":	55230092
		}, {
			"file":	"Objects/setobject.c",
			"line":	771,
			"primary_score":	999995,
			"second_score":	55230091
		}, {
			"file":	"Objects/setobject.c",
			"line":	772,
			"primary_score":	999995,
			"second_score":	55230090
		}, {
			"file":	"Objects/setobject.c",
			"line":	773,
			"primary_score":	999995,
			"second_score":	55230089
		}, {
			"file":	"Objects/setobject.c",
			"line":	775,
			"primary_score":	999995,
			"second_score":	55230088
		}, {
			"file":	"Objects/setobject.c",
			"line":	776,
			"primary_score":	999995,
			"second_score":	55230087
		}, {
			"file":	"Objects/setobject.c",
			"line":	778,
			"primary_score":	999995,
			"second_score":	55230690
		}, {
			"file":	"Objects/setobject.c",
			"line":	779,
			"primary_score":	999995,
			"second_score":	55230689
		}, {
			"file":	"Objects/setobject.c",
			"line":	785,
			"primary_score":	999995,
			"second_score":	55230642
		}, {
			"file":	"Objects/setobject.c",
			"line":	786,
			"primary_score":	999995,
			"second_score":	55230641
		}, {
			"file":	"Objects/setobject.c",
			"line":	788,
			"primary_score":	999995,
			"second_score":	55230628
		}, {
			"file":	"Objects/setobject.c",
			"line":	789,
			"primary_score":	999995,
			"second_score":	55230627
		}, {
			"file":	"Objects/setobject.c",
			"line":	791,
			"primary_score":	999995,
			"second_score":	55230626
		}, {
			"file":	"Objects/setobject.c",
			"line":	792,
			"primary_score":	999995,
			"second_score":	55230625
		}, {
			"file":	"Objects/setobject.c",
			"line":	1082,
			"primary_score":	999711,
			"second_score":	51564
		}, {
			"file":	"Objects/setobject.c",
			"line":	1084,
			"primary_score":	999711,
			"second_score":	51563
		}, {
			"file":	"Objects/setobject.c",
			"line":	1085,
			"primary_score":	999711,
			"second_score":	49783
		}, {
			"file":	"Objects/setobject.c",
			"line":	1086,
			"primary_score":	999711,
			"second_score":	49782
		}, {
			"file":	"Objects/setobject.c",
			"line":	1087,
			"primary_score":	999711,
			"second_score":	49781
		}, {
			"file":	"Objects/setobject.c",
			"line":	1089,
			"primary_score":	999711,
			"second_score":	49747
		}, {
			"file":	"Objects/setobject.c",
			"line":	1090,
			"primary_score":	999711,
			"second_score":	49740
		}, {
			"file":	"Objects/setobject.c",
			"line":	1547,
			"primary_score":	999971,
			"second_score":	5645517
		}, {
			"file":	"Objects/setobject.c",
			"line":	1548,
			"primary_score":	999971,
			"second_score":	5645516
		}, {
			"file":	"Objects/setobject.c",
			"line":	1549,
			"primary_score":	999971,
			"second_score":	5645515
		}, {
			"file":	"Objects/setobject.c",
			"line":	1551,
			"primary_score":	999971,
			"second_score":	5645514
		}, {
			"file":	"Objects/setobject.c",
			"line":	1557,
			"primary_score":	999971,
			"second_score":	5645513
		}, {
			"file":	"Objects/setobject.c",
			"line":	1561,
			"primary_score":	999973,
			"second_score":	5645506
		}, {
			"file":	"Objects/setobject.c",
			"line":	1562,
			"primary_score":	999973,
			"second_score":	5645475
		}, {
			"file":	"Objects/setobject.c",
			"line":	1565,
			"primary_score":	999973,
			"second_score":	5645474
		}, {
			"file":	"Objects/setobject.c",
			"line":	1581,
			"primary_score":	999973,
			"second_score":	5645473
		}, {
			"file":	"Objects/setobject.c",
			"line":	1582,
			"primary_score":	999973,
			"second_score":	5645458
		}, {
			"file":	"Objects/setobject.c",
			"line":	1583,
			"primary_score":	999973,
			"second_score":	5645440
		}, {
			"file":	"Objects/setobject.c",
			"line":	1587,
			"primary_score":	999973,
			"second_score":	5645439
		}, {
			"file":	"Objects/setobject.c",
			"line":	1588,
			"primary_score":	999997,
			"second_score":	5645438
		}, {
			"file":	"Objects/setobject.c",
			"line":	1594,
			"primary_score":	999973,
			"second_score":	5645394
		}, {
			"file":	"Objects/setobject.c",
			"line":	1600,
			"primary_score":	999979,
			"second_score":	49131324
		}, {
			"file":	"Objects/setobject.c",
			"line":	1601,
			"primary_score":	999979,
			"second_score":	49131323
		}, {
			"file":	"Objects/setobject.c",
			"line":	1603,
			"primary_score":	999979,
			"second_score":	49131322
		}, {
			"file":	"Objects/setobject.c",
			"line":	1606,
			"primary_score":	999979,
			"second_score":	49131321
		}, {
			"file":	"Objects/setobject.c",
			"line":	1607,
			"primary_score":	999979,
			"second_score":	49131320
		}, {
			"file":	"Objects/setobject.c",
			"line":	1608,
			"primary_score":	999979,
			"second_score":	49131156
		}, {
			"file":	"Objects/setobject.c",
			"line":	1611,
			"primary_score":	999979,
			"second_score":	49131155
		}, {
			"file":	"Objects/setobject.c",
			"line":	1618,
			"primary_score":	999979,
			"second_score":	49131154
		}, {
			"file":	"Objects/setobject.c",
			"line":	1628,
			"primary_score":	999991,
			"second_score":	5645519
		}, {
			"file":	"Objects/setobject.c",
			"line":	1632,
			"primary_score":	999991,
			"second_score":	5645518
		}, {
			"file":	"Objects/stringlib/fastsearch.h",
			"line":	101,
			"primary_score":	999916,
			"second_score":	7732483
		}, {
			"file":	"Objects/stringlib/fastsearch.h",
			"line":	102,
			"primary_score":	999917,
			"second_score":	7732482
		}, {
			"file":	"Objects/stringlib/fastsearch.h",
			"line":	103,
			"primary_score":	999977,
			"second_score":	10370906
		}, {
			"file":	"Objects/stringlib/fastsearch.h",
			"line":	104,
			"primary_score":	999977,
			"second_score":	10370905
		}, {
			"file":	"Objects/stringlib/fastsearch.h",
			"line":	106,
			"primary_score":	999977,
			"second_score":	10370904
		}, {
			"file":	"Objects/stringlib/fastsearch.h",
			"line":	107,
			"primary_score":	999977,
			"second_score":	10370903
		}, {
			"file":	"Objects/stringlib/fastsearch.h",
			"line":	113,
			"primary_score":	999956,
			"second_score":	7869666
		}, {
			"file":	"Objects/stringlib/fastsearch.h",
			"line":	156,
			"primary_score":	999941,
			"second_score":	7733646
		}, {
			"file":	"Objects/stringlib/split.h",
			"line":	85,
			"primary_score":	999989,
			"second_score":	53426297
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	51,
			"primary_score":	999711,
			"second_score":	170999
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	52,
			"primary_score":	999711,
			"second_score":	170998
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	53,
			"primary_score":	999711,
			"second_score":	170997
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	58,
			"primary_score":	999711,
			"second_score":	170996
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	59,
			"primary_score":	999711,
			"second_score":	170995
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	60,
			"primary_score":	999711,
			"second_score":	170994
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	64,
			"primary_score":	999711,
			"second_score":	170993
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	214,
			"primary_score":	999711,
			"second_score":	131814
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	215,
			"primary_score":	999711,
			"second_score":	131813
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	216,
			"primary_score":	999711,
			"second_score":	131812
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	217,
			"primary_score":	999711,
			"second_score":	131810
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	218,
			"primary_score":	999711,
			"second_score":	131808
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	219,
			"primary_score":	999711,
			"second_score":	131807
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	220,
			"primary_score":	999711,
			"second_score":	131806
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	221,
			"primary_score":	999711,
			"second_score":	165923
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	223,
			"primary_score":	999711,
			"second_score":	131752
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	227,
			"primary_score":	999711,
			"second_score":	131751
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	228,
			"primary_score":	999711,
			"second_score":	131750
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	229,
			"primary_score":	999711,
			"second_score":	131749
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	230,
			"primary_score":	999711,
			"second_score":	131748
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	234,
			"primary_score":	999711,
			"second_score":	165921
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	235,
			"primary_score":	999711,
			"second_score":	165898
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	236,
			"primary_score":	999711,
			"second_score":	131747
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	451,
			"primary_score":	999985,
			"second_score":	55233528
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	452,
			"primary_score":	999985,
			"second_score":	55233527
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	453,
			"primary_score":	999985,
			"second_score":	55233526
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	454,
			"primary_score":	999985,
			"second_score":	55233525
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	455,
			"primary_score":	999985,
			"second_score":	55233524
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	457,
			"primary_score":	999985,
			"second_score":	55233523
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	467,
			"primary_score":	999985,
			"second_score":	55233522
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	468,
			"primary_score":	999985,
			"second_score":	55233521
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	470,
			"primary_score":	999985,
			"second_score":	55233520
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	471,
			"primary_score":	999985,
			"second_score":	55233499
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	473,
			"primary_score":	999985,
			"second_score":	55233498
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	474,
			"primary_score":	999985,
			"second_score":	55233497
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	475,
			"primary_score":	999985,
			"second_score":	55233496
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	476,
			"primary_score":	999985,
			"second_score":	55233485
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	477,
			"primary_score":	999985,
			"second_score":	55233478
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	478,
			"primary_score":	999985,
			"second_score":	55233477
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	479,
			"primary_score":	999985,
			"second_score":	55233476
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	482,
			"primary_score":	999985,
			"second_score":	55233475
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	880,
			"primary_score":	999711,
			"second_score":	128519
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	882,
			"primary_score":	999711,
			"second_score":	128518
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	883,
			"primary_score":	999711,
			"second_score":	128517
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	884,
			"primary_score":	999711,
			"second_score":	53775
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	885,
			"primary_score":	999711,
			"second_score":	53774
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	886,
			"primary_score":	999711,
			"second_score":	53773
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	887,
			"primary_score":	999711,
			"second_score":	53772
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	888,
			"primary_score":	999711,
			"second_score":	53771
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	889,
			"primary_score":	999711,
			"second_score":	53770
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	890,
			"primary_score":	999711,
			"second_score":	53594
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	891,
			"primary_score":	999711,
			"second_score":	53593
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	892,
			"primary_score":	999711,
			"second_score":	53592
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	896,
			"primary_score":	999711,
			"second_score":	53569
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	905,
			"primary_score":	999711,
			"second_score":	128526
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	906,
			"primary_score":	999711,
			"second_score":	128521
		}, {
			"file":	"Objects/tupleobject.c",
			"line":	908,
			"primary_score":	999711,
			"second_score":	128520
		}, {
			"file":	"Objects/typeobject.c",
			"line":	207,
			"primary_score":	999801,
			"second_score":	56213058
		}, {
			"file":	"Objects/typeobject.c",
			"line":	209,
			"primary_score":	999801,
			"second_score":	56213057
		}, {
			"file":	"Objects/typeobject.c",
			"line":	216,
			"primary_score":	999814,
			"second_score":	56213056
		}, {
			"file":	"Objects/typeobject.c",
			"line":	217,
			"primary_score":	999814,
			"second_score":	56213055
		}, {
			"file":	"Objects/typeobject.c",
			"line":	218,
			"primary_score":	999816,
			"second_score":	56213054
		}, {
			"file":	"Objects/typeobject.c",
			"line":	221,
			"primary_score":	999814,
			"second_score":	56213053
		}, {
			"file":	"Objects/typeobject.c",
			"line":	280,
			"primary_score":	999721,
			"second_score":	7660920
		}, {
			"file":	"Objects/typeobject.c",
			"line":	281,
			"primary_score":	999721,
			"second_score":	7660919
		}, {
			"file":	"Objects/typeobject.c",
			"line":	283,
			"primary_score":	999721,
			"second_score":	7660918
		}, {
			"file":	"Objects/typeobject.c",
			"line":	284,
			"primary_score":	999726,
			"second_score":	7660917
		}, {
			"file":	"Objects/typeobject.c",
			"line":	285,
			"primary_score":	999726,
			"second_score":	7660702
		}, {
			"file":	"Objects/typeobject.c",
			"line":	289,
			"primary_score":	999726,
			"second_score":	7660701
		}, {
			"file":	"Objects/typeobject.c",
			"line":	290,
			"primary_score":	999726,
			"second_score":	7660698
		}, {
			"file":	"Objects/typeobject.c",
			"line":	293,
			"primary_score":	999938,
			"second_score":	56212764
		}, {
			"file":	"Objects/typeobject.c",
			"line":	294,
			"primary_score":	999938,
			"second_score":	56212763
		}, {
			"file":	"Objects/typeobject.c",
			"line":	297,
			"primary_score":	999943,
			"second_score":	56212762
		}, {
			"file":	"Objects/typeobject.c",
			"line":	369,
			"primary_score":	999732,
			"second_score":	59938267
		}, {
			"file":	"Objects/typeobject.c",
			"line":	370,
			"primary_score":	999732,
			"second_score":	59938266
		}, {
			"file":	"Objects/typeobject.c",
			"line":	844,
			"primary_score":	999711,
			"second_score":	166533
		}, {
			"file":	"Objects/typeobject.c",
			"line":	845,
			"primary_score":	999711,
			"second_score":	166532
		}, {
			"file":	"Objects/typeobject.c",
			"line":	848,
			"primary_score":	999711,
			"second_score":	166531
		}, {
			"file":	"Objects/typeobject.c",
			"line":	849,
			"primary_score":	999711,
			"second_score":	166530
		}, {
			"file":	"Objects/typeobject.c",
			"line":	853,
			"primary_score":	999711,
			"second_score":	166529
		}, {
			"file":	"Objects/typeobject.c",
			"line":	893,
			"primary_score":	999711,
			"second_score":	166528
		}, {
			"file":	"Objects/typeobject.c",
			"line":	894,
			"primary_score":	999711,
			"second_score":	166518
		}, {
			"file":	"Objects/typeobject.c",
			"line":	895,
			"primary_score":	999711,
			"second_score":	166517
		}, {
			"file":	"Objects/typeobject.c",
			"line":	896,
			"primary_score":	999711,
			"second_score":	166514
		}, {
			"file":	"Objects/typeobject.c",
			"line":	904,
			"primary_score":	999711,
			"second_score":	166513
		}, {
			"file":	"Objects/typeobject.c",
			"line":	905,
			"primary_score":	999711,
			"second_score":	166512
		}, {
			"file":	"Objects/typeobject.c",
			"line":	906,
			"primary_score":	999711,
			"second_score":	166511
		}, {
			"file":	"Objects/typeobject.c",
			"line":	907,
			"primary_score":	999711,
			"second_score":	166510
		}, {
			"file":	"Objects/typeobject.c",
			"line":	914,
			"primary_score":	999711,
			"second_score":	166509
		}, {
			"file":	"Objects/typeobject.c",
			"line":	915,
			"primary_score":	999711,
			"second_score":	166823
		}, {
			"file":	"Objects/typeobject.c",
			"line":	918,
			"primary_score":	999711,
			"second_score":	166508
		}, {
			"file":	"Objects/typeobject.c",
			"line":	939,
			"primary_score":	999711,
			"second_score":	166507
		}, {
			"file":	"Objects/typeobject.c",
			"line":	940,
			"primary_score":	999711,
			"second_score":	166506
		}, {
			"file":	"Objects/typeobject.c",
			"line":	941,
			"primary_score":	999711,
			"second_score":	166505
		}, {
			"file":	"Objects/typeobject.c",
			"line":	943,
			"primary_score":	999711,
			"second_score":	166504
		}, {
			"file":	"Objects/typeobject.c",
			"line":	944,
			"primary_score":	999711,
			"second_score":	166503
		}, {
			"file":	"Objects/typeobject.c",
			"line":	948,
			"primary_score":	999711,
			"second_score":	166502
		}, {
			"file":	"Objects/typeobject.c",
			"line":	949,
			"primary_score":	999711,
			"second_score":	166501
		}, {
			"file":	"Objects/typeobject.c",
			"line":	950,
			"primary_score":	999711,
			"second_score":	166486
		}, {
			"file":	"Objects/typeobject.c",
			"line":	951,
			"primary_score":	999711,
			"second_score":	166485
		}, {
			"file":	"Objects/typeobject.c",
			"line":	952,
			"primary_score":	999711,
			"second_score":	166484
		}, {
			"file":	"Objects/typeobject.c",
			"line":	953,
			"primary_score":	999733,
			"second_score":	5781263
		}, {
			"file":	"Objects/typeobject.c",
			"line":	954,
			"primary_score":	999711,
			"second_score":	166310
		}, {
			"file":	"Objects/typeobject.c",
			"line":	960,
			"primary_score":	999711,
			"second_score":	166309
		}, {
			"file":	"Objects/typeobject.c",
			"line":	965,
			"primary_score":	999711,
			"second_score":	166308
		}, {
			"file":	"Objects/typeobject.c",
			"line":	966,
			"primary_score":	999711,
			"second_score":	166307
		}, {
			"file":	"Objects/typeobject.c",
			"line":	967,
			"primary_score":	999711,
			"second_score":	166298
		}, {
			"file":	"Objects/typeobject.c",
			"line":	968,
			"primary_score":	999711,
			"second_score":	166297
		}, {
			"file":	"Objects/typeobject.c",
			"line":	971,
			"primary_score":	999711,
			"second_score":	165896
		}, {
			"file":	"Objects/typeobject.c",
			"line":	973,
			"primary_score":	999711,
			"second_score":	165893
		}, {
			"file":	"Objects/typeobject.c",
			"line":	975,
			"primary_score":	999711,
			"second_score":	165892
		}, {
			"file":	"Objects/typeobject.c",
			"line":	976,
			"primary_score":	999711,
			"second_score":	165890
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2378,
			"primary_score":	999711,
			"second_score":	170142
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2379,
			"primary_score":	999711,
			"second_score":	170141
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2380,
			"primary_score":	999711,
			"second_score":	170140
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2382,
			"primary_score":	999711,
			"second_score":	170139
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2385,
			"primary_score":	999711,
			"second_score":	170138
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2386,
			"primary_score":	999711,
			"second_score":	170137
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2388,
			"primary_score":	999711,
			"second_score":	170136
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2855,
			"primary_score":	999711,
			"second_score":	166793
		}, {
			"file":	"Objects/typeobject.c",
			"line":	2924,
			"primary_score":	999844,
			"second_score":	7825861
		}, {
			"file":	"Objects/typeobject.c",
			"line":	5053,
			"primary_score":	999734,
			"second_score":	7699247
		}, {
			"file":	"Objects/typeobject.c",
			"line":	5054,
			"primary_score":	999734,
			"second_score":	7699246
		}, {
			"file":	"Objects/typeobject.c",
			"line":	5055,
			"primary_score":	999734,
			"second_score":	7699099
		}, {
			"file":	"Objects/typeobject.c",
			"line":	5057,
			"primary_score":	999734,
			"second_score":	7699098
		}, {
			"file":	"Objects/typeobject.c",
			"line":	5060,
			"primary_score":	999734,
			"second_score":	7699097
		}, {
			"file":	"Objects/typeobject.c",
			"line":	5062,
			"primary_score":	999734,
			"second_score":	7657747
		}, {
			"file":	"Objects/typeobject.c",
			"line":	5063,
			"primary_score":	999734,
			"second_score":	7657723
		}, {
			"file":	"Objects/unicodectype.c",
			"line":	160,
			"primary_score":	999975,
			"second_score":	56441601
		}, {
			"file":	"Objects/unicodectype.c",
			"line":	162,
			"primary_score":	999975,
			"second_score":	56441595
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	393,
			"primary_score":	999711,
			"second_score":	38822
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	400,
			"primary_score":	999711,
			"second_score":	42960
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	403,
			"primary_score":	999711,
			"second_score":	42924
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	412,
			"primary_score":	999711,
			"second_score":	38821
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	429,
			"primary_score":	999711,
			"second_score":	38820
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	430,
			"primary_score":	999714,
			"second_score":	39358
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	431,
			"primary_score":	999711,
			"second_score":	38798
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	983,
			"primary_score":	999962,
			"second_score":	8802085
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	984,
			"primary_score":	999962,
			"second_score":	8802084
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1092,
			"primary_score":	999947,
			"second_score":	7680946
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1144,
			"primary_score":	999962,
			"second_score":	8801800
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1146,
			"primary_score":	999962,
			"second_score":	8801799
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1151,
			"primary_score":	999962,
			"second_score":	8801798
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1152,
			"primary_score":	999962,
			"second_score":	8801795
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1503,
			"primary_score":	999909,
			"second_score":	56337858
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1505,
			"primary_score":	999909,
			"second_score":	56337856
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1506,
			"primary_score":	999916,
			"second_score":	56337853
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1507,
			"primary_score":	999916,
			"second_score":	56337851
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1513,
			"primary_score":	999923,
			"second_score":	56337849
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	1514,
			"primary_score":	999929,
			"second_score":	56337846
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2748,
			"primary_score":	999991,
			"second_score":	56486546
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2750,
			"primary_score":	999991,
			"second_score":	56486545
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2758,
			"primary_score":	999991,
			"second_score":	56486544
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2761,
			"primary_score":	999991,
			"second_score":	56486543
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2764,
			"primary_score":	999991,
			"second_score":	56486542
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2766,
			"primary_score":	999991,
			"second_score":	56486541
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2967,
			"primary_score":	999911,
			"second_score":	56491736
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2969,
			"primary_score":	999923,
			"second_score":	76538695
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2970,
			"primary_score":	999923,
			"second_score":	76538694
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2971,
			"primary_score":	999943,
			"second_score":	56491735
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2974,
			"primary_score":	999969,
			"second_score":	56491734
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2975,
			"primary_score":	999985,
			"second_score":	56491733
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2977,
			"primary_score":	999985,
			"second_score":	56491732
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2978,
			"primary_score":	999985,
			"second_score":	56491731
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2981,
			"primary_score":	999985,
			"second_score":	56491730
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2982,
			"primary_score":	999985,
			"second_score":	56491729
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2983,
			"primary_score":	999985,
			"second_score":	56491728
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2984,
			"primary_score":	999985,
			"second_score":	56491727
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2987,
			"primary_score":	999975,
			"second_score":	151935370
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2988,
			"primary_score":	999975,
			"second_score":	151935369
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2989,
			"primary_score":	999975,
			"second_score":	151935368
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2990,
			"primary_score":	999975,
			"second_score":	151935367
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2993,
			"primary_score":	999975,
			"second_score":	151933549
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2996,
			"primary_score":	999976,
			"second_score":	151933548
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	2997,
			"primary_score":	999977,
			"second_score":	151933547
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3001,
			"primary_score":	999976,
			"second_score":	151933546
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3027,
			"primary_score":	999976,
			"second_score":	151933545
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3028,
			"primary_score":	999977,
			"second_score":	151933544
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3029,
			"primary_score":	999977,
			"second_score":	151933543
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3045,
			"primary_score":	999976,
			"second_score":	151933542
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3049,
			"primary_score":	999954,
			"second_score":	56923898
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3050,
			"primary_score":	999954,
			"second_score":	56923897
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3051,
			"primary_score":	999954,
			"second_score":	56923896
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3052,
			"primary_score":	999954,
			"second_score":	56923895
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3074,
			"primary_score":	999976,
			"second_score":	151933483
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3075,
			"primary_score":	999976,
			"second_score":	151933478
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3283,
			"primary_score":	999970,
			"second_score":	56485763
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3284,
			"primary_score":	999970,
			"second_score":	56485762
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3285,
			"primary_score":	999970,
			"second_score":	56485761
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3287,
			"primary_score":	999970,
			"second_score":	56485760
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3293,
			"primary_score":	999970,
			"second_score":	56485759
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3310,
			"primary_score":	999970,
			"second_score":	56485758
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3313,
			"primary_score":	999997,
			"second_score":	56485757
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3315,
			"primary_score":	999970,
			"second_score":	56485756
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3316,
			"primary_score":	999970,
			"second_score":	56485755
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3317,
			"primary_score":	999970,
			"second_score":	56485754
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3319,
			"primary_score":	999970,
			"second_score":	56485753
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3320,
			"primary_score":	999970,
			"second_score":	56485722
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3323,
			"primary_score":	999970,
			"second_score":	56485721
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3324,
			"primary_score":	999970,
			"second_score":	56485720
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3326,
			"primary_score":	999970,
			"second_score":	56485719
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3329,
			"primary_score":	999970,
			"second_score":	56485718
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3336,
			"primary_score":	999970,
			"second_score":	56485717
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3338,
			"primary_score":	999972,
			"second_score":	56485716
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3339,
			"primary_score":	999972,
			"second_score":	56485715
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3340,
			"primary_score":	999972,
			"second_score":	56485714
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3341,
			"primary_score":	999972,
			"second_score":	56485713
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3344,
			"primary_score":	999970,
			"second_score":	56485712
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3345,
			"primary_score":	999970,
			"second_score":	56485711
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3347,
			"primary_score":	999970,
			"second_score":	56485710
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3348,
			"primary_score":	999997,
			"second_score":	56485709
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3349,
			"primary_score":	999997,
			"second_score":	56485708
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3350,
			"primary_score":	999997,
			"second_score":	56485707
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3351,
			"primary_score":	999997,
			"second_score":	56485706
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3352,
			"primary_score":	999997,
			"second_score":	56485705
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3356,
			"primary_score":	999970,
			"second_score":	56485704
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3359,
			"primary_score":	999970,
			"second_score":	56485698
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3825,
			"primary_score":	999956,
			"second_score":	62092003
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3827,
			"primary_score":	999977,
			"second_score":	170688945
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3828,
			"primary_score":	999997,
			"second_score":	271264206
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3829,
			"primary_score":	999993,
			"second_score":	271263488
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3830,
			"primary_score":	999966,
			"second_score":	101829306
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3832,
			"primary_score":	999967,
			"second_score":	88240586
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3840,
			"primary_score":	999981,
			"second_score":	88314640
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3841,
			"primary_score":	999990,
			"second_score":	88314639
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3842,
			"primary_score":	999990,
			"second_score":	88314638
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3843,
			"primary_score":	999993,
			"second_score":	88314637
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3845,
			"primary_score":	999981,
			"second_score":	88314636
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3846,
			"primary_score":	999981,
			"second_score":	88314635
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3852,
			"primary_score":	999952,
			"second_score":	78796528
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3853,
			"primary_score":	999952,
			"second_score":	78796527
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3858,
			"primary_score":	999937,
			"second_score":	62093279
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3859,
			"primary_score":	999937,
			"second_score":	62093278
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3864,
			"primary_score":	999964,
			"second_score":	56485346
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3865,
			"primary_score":	999964,
			"second_score":	56485345
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3867,
			"primary_score":	999919,
			"second_score":	56485344
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3868,
			"primary_score":	999919,
			"second_score":	56485343
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3878,
			"primary_score":	999919,
			"second_score":	56485342
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3879,
			"primary_score":	999919,
			"second_score":	56485306
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3880,
			"primary_score":	999919,
			"second_score":	56485305
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3890,
			"primary_score":	999919,
			"second_score":	56485304
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3891,
			"primary_score":	999919,
			"second_score":	56485303
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3892,
			"primary_score":	999920,
			"second_score":	56485302
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3893,
			"primary_score":	999927,
			"second_score":	56739924
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3894,
			"primary_score":	999929,
			"second_score":	56739923
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3896,
			"primary_score":	999976,
			"second_score":	82743722
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3898,
			"primary_score":	999919,
			"second_score":	56485301
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3899,
			"primary_score":	999919,
			"second_score":	56485300
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3903,
			"primary_score":	999919,
			"second_score":	56485299
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3907,
			"primary_score":	999919,
			"second_score":	56739919
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3908,
			"primary_score":	999987,
			"second_score":	56485298
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3914,
			"primary_score":	999988,
			"second_score":	56485297
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3915,
			"primary_score":	999988,
			"second_score":	56485296
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3916,
			"primary_score":	999988,
			"second_score":	56485295
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3928,
			"primary_score":	999918,
			"second_score":	56485294
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3976,
			"primary_score":	999983,
			"second_score":	186297432
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3977,
			"primary_score":	999983,
			"second_score":	186297431
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	3979,
			"primary_score":	999983,
			"second_score":	186297430
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4540,
			"primary_score":	999965,
			"second_score":	151935059
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4541,
			"primary_score":	999965,
			"second_score":	151935058
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4584,
			"primary_score":	999968,
			"second_score":	151935366
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4586,
			"primary_score":	999968,
			"second_score":	151935365
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4587,
			"primary_score":	999968,
			"second_score":	151935364
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4589,
			"primary_score":	999968,
			"second_score":	151935363
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4590,
			"primary_score":	999968,
			"second_score":	151935362
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4591,
			"primary_score":	999968,
			"second_score":	151935061
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4595,
			"primary_score":	999968,
			"second_score":	151935060
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4597,
			"primary_score":	999968,
			"second_score":	151934088
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4600,
			"primary_score":	999968,
			"second_score":	151934087
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4602,
			"primary_score":	999968,
			"second_score":	151933725
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4604,
			"primary_score":	999968,
			"second_score":	151933724
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4609,
			"primary_score":	999968,
			"second_score":	151933723
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4614,
			"primary_score":	999968,
			"second_score":	151933588
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4619,
			"primary_score":	999968,
			"second_score":	151933587
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4621,
			"primary_score":	999968,
			"second_score":	151933586
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4626,
			"primary_score":	999968,
			"second_score":	151933585
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4627,
			"primary_score":	999968,
			"second_score":	151933584
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4628,
			"primary_score":	999968,
			"second_score":	151933550
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4855,
			"primary_score":	999922,
			"second_score":	56337845
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4856,
			"primary_score":	999922,
			"second_score":	56337844
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4857,
			"primary_score":	999922,
			"second_score":	56337843
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4858,
			"primary_score":	999922,
			"second_score":	56337842
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4859,
			"primary_score":	999922,
			"second_score":	56337841
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4860,
			"primary_score":	999922,
			"second_score":	56337840
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4861,
			"primary_score":	999922,
			"second_score":	56337839
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4862,
			"primary_score":	999922,
			"second_score":	56337838
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4863,
			"primary_score":	999922,
			"second_score":	56337837
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4866,
			"primary_score":	999922,
			"second_score":	56337836
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4871,
			"primary_score":	999923,
			"second_score":	56337835
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4872,
			"primary_score":	999923,
			"second_score":	56337799
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4874,
			"primary_score":	999923,
			"second_score":	56337798
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4876,
			"primary_score":	999923,
			"second_score":	56337797
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4877,
			"primary_score":	999923,
			"second_score":	56337796
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4878,
			"primary_score":	999923,
			"second_score":	56337795
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4879,
			"primary_score":	999923,
			"second_score":	56337758
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4880,
			"primary_score":	999923,
			"second_score":	56337757
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4881,
			"primary_score":	999923,
			"second_score":	56337756
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4882,
			"primary_score":	999923,
			"second_score":	56337755
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4896,
			"primary_score":	999924,
			"second_score":	56337754
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4899,
			"primary_score":	999925,
			"second_score":	56337751
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4900,
			"primary_score":	999925,
			"second_score":	56337748
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	4901,
			"primary_score":	999924,
			"second_score":	56337747
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6037,
			"primary_score":	999983,
			"second_score":	3297809
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6038,
			"primary_score":	999983,
			"second_score":	3297798
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6040,
			"primary_score":	999983,
			"second_score":	3297797
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6042,
			"primary_score":	999983,
			"second_score":	3297796
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6043,
			"primary_score":	999983,
			"second_score":	3297656
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6044,
			"primary_score":	999983,
			"second_score":	3297653
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6045,
			"primary_score":	999983,
			"second_score":	3297652
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6047,
			"primary_score":	999983,
			"second_score":	3297563
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6048,
			"primary_score":	999983,
			"second_score":	3297499
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6049,
			"primary_score":	999983,
			"second_score":	3297498
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6112,
			"primary_score":	999983,
			"second_score":	3297810
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6114,
			"primary_score":	999983,
			"second_score":	3297497
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6116,
			"primary_score":	999983,
			"second_score":	3297496
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6143,
			"primary_score":	999983,
			"second_score":	3297495
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6153,
			"primary_score":	999983,
			"second_score":	3302080
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6155,
			"primary_score":	999983,
			"second_score":	3302079
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6156,
			"primary_score":	999983,
			"second_score":	3302078
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6158,
			"primary_score":	999983,
			"second_score":	3302077
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6160,
			"primary_score":	999983,
			"second_score":	3302076
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6161,
			"primary_score":	999983,
			"second_score":	3302075
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6162,
			"primary_score":	999983,
			"second_score":	3302074
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6163,
			"primary_score":	999983,
			"second_score":	3302073
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6167,
			"primary_score":	999983,
			"second_score":	3302072
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6169,
			"primary_score":	999983,
			"second_score":	3302071
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6176,
			"primary_score":	999983,
			"second_score":	3302070
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6177,
			"primary_score":	999983,
			"second_score":	3302028
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6179,
			"primary_score":	999983,
			"second_score":	3302027
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6181,
			"primary_score":	999983,
			"second_score":	3302026
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6183,
			"primary_score":	999983,
			"second_score":	3302025
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6185,
			"primary_score":	999983,
			"second_score":	3297812
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6186,
			"primary_score":	999983,
			"second_score":	3297811
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6190,
			"primary_score":	999983,
			"second_score":	3297494
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6191,
			"primary_score":	999983,
			"second_score":	3297491
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6192,
			"primary_score":	999983,
			"second_score":	3297490
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6273,
			"primary_score":	999983,
			"second_score":	3297489
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6274,
			"primary_score":	999983,
			"second_score":	3297488
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6278,
			"primary_score":	999983,
			"second_score":	3297487
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6279,
			"primary_score":	999983,
			"second_score":	3297484
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6280,
			"primary_score":	999983,
			"second_score":	3297481
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6583,
			"primary_score":	999735,
			"second_score":	59794264
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6893,
			"primary_score":	999990,
			"second_score":	7740725
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6895,
			"primary_score":	999990,
			"second_score":	7740724
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6897,
			"primary_score":	999990,
			"second_score":	7740723
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6900,
			"primary_score":	999990,
			"second_score":	7740722
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6905,
			"primary_score":	999990,
			"second_score":	7740721
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6910,
			"primary_score":	999990,
			"second_score":	7740720
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6911,
			"primary_score":	999990,
			"second_score":	7740641
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6912,
			"primary_score":	999990,
			"second_score":	7740640
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6913,
			"primary_score":	999991,
			"second_score":	7743561
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6914,
			"primary_score":	999990,
			"second_score":	7740639
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6915,
			"primary_score":	999990,
			"second_score":	7740638
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6916,
			"primary_score":	999993,
			"second_score":	7740637
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	6919,
			"primary_score":	999990,
			"second_score":	7740632
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7333,
			"primary_score":	999711,
			"second_score":	138662
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7334,
			"primary_score":	999711,
			"second_score":	138661
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7335,
			"primary_score":	999711,
			"second_score":	138660
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7336,
			"primary_score":	999711,
			"second_score":	138659
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7338,
			"primary_score":	999711,
			"second_score":	138658
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7343,
			"primary_score":	999711,
			"second_score":	138657
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7345,
			"primary_score":	999711,
			"second_score":	138656
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7347,
			"primary_score":	999711,
			"second_score":	138655
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7396,
			"primary_score":	999759,
			"second_score":	60266880
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7513,
			"primary_score":	999951,
			"second_score":	10387170
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7514,
			"primary_score":	999951,
			"second_score":	10387169
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7515,
			"primary_score":	999951,
			"second_score":	10387168
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7516,
			"primary_score":	999951,
			"second_score":	10387167
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7518,
			"primary_score":	999951,
			"second_score":	10387166
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7522,
			"primary_score":	999951,
			"second_score":	10387066
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7524,
			"primary_score":	999951,
			"second_score":	10387062
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7527,
			"primary_score":	999980,
			"second_score":	10387060
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7528,
			"primary_score":	999951,
			"second_score":	10387057
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7534,
			"primary_score":	999951,
			"second_score":	10370868
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7536,
			"primary_score":	999951,
			"second_score":	10370865
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7571,
			"primary_score":	999955,
			"second_score":	3302891
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7572,
			"primary_score":	999955,
			"second_score":	3302890
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7573,
			"primary_score":	999955,
			"second_score":	3302889
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7574,
			"primary_score":	999955,
			"second_score":	3302888
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7575,
			"primary_score":	999955,
			"second_score":	3302887
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7576,
			"primary_score":	999955,
			"second_score":	3302886
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7577,
			"primary_score":	999955,
			"second_score":	3302885
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7579,
			"primary_score":	999955,
			"second_score":	3302884
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7583,
			"primary_score":	999955,
			"second_score":	3302828
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7584,
			"primary_score":	999955,
			"second_score":	3302827
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7585,
			"primary_score":	999955,
			"second_score":	3302826
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7586,
			"primary_score":	999955,
			"second_score":	3302825
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7596,
			"primary_score":	999955,
			"second_score":	3302785
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7598,
			"primary_score":	999955,
			"second_score":	3302784
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7599,
			"primary_score":	999955,
			"second_score":	3302783
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7607,
			"primary_score":	999955,
			"second_score":	3302782
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7611,
			"primary_score":	999955,
			"second_score":	3302781
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7612,
			"primary_score":	999955,
			"second_score":	3302745
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7615,
			"primary_score":	999955,
			"second_score":	3302744
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7616,
			"primary_score":	999955,
			"second_score":	3302743
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7617,
			"primary_score":	999955,
			"second_score":	3302742
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7619,
			"primary_score":	999955,
			"second_score":	3302741
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7632,
			"primary_score":	999955,
			"second_score":	3302688
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7634,
			"primary_score":	999955,
			"second_score":	3302687
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7635,
			"primary_score":	999955,
			"second_score":	3302686
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7636,
			"primary_score":	999955,
			"second_score":	3302685
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7640,
			"primary_score":	999955,
			"second_score":	3302684
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7684,
			"primary_score":	999989,
			"second_score":	56626888
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	7685,
			"primary_score":	999989,
			"second_score":	56626596
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8130,
			"primary_score":	999994,
			"second_score":	7740852
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8131,
			"primary_score":	999994,
			"second_score":	7740851
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8133,
			"primary_score":	999994,
			"second_score":	7740850
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8136,
			"primary_score":	999994,
			"second_score":	7740727
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8141,
			"primary_score":	999994,
			"second_score":	7740726
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8483,
			"primary_score":	999978,
			"second_score":	56381877
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8484,
			"primary_score":	999978,
			"second_score":	56381876
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8506,
			"primary_score":	999975,
			"second_score":	56441605
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8509,
			"primary_score":	999975,
			"second_score":	56441604
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8511,
			"primary_score":	999975,
			"second_score":	56441603
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8525,
			"primary_score":	999975,
			"second_score":	56441602
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8527,
			"primary_score":	999991,
			"second_score":	56441594
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8534,
			"primary_score":	999993,
			"second_score":	56441593
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8548,
			"primary_score":	999993,
			"second_score":	56441592
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8549,
			"primary_score":	999993,
			"second_score":	56441591
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8550,
			"primary_score":	999993,
			"second_score":	56441590
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8551,
			"primary_score":	999993,
			"second_score":	56441589
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8552,
			"primary_score":	999993,
			"second_score":	56441588
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8553,
			"primary_score":	999993,
			"second_score":	56441587
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8645,
			"primary_score":	999992,
			"second_score":	7743714
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8646,
			"primary_score":	999992,
			"second_score":	7743713
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8648,
			"primary_score":	999992,
			"second_score":	7743712
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8651,
			"primary_score":	999992,
			"second_score":	7743589
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8652,
			"primary_score":	999999,
			"second_score":	8762031
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8653,
			"primary_score":	999999,
			"second_score":	8762030
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8656,
			"primary_score":	999992,
			"second_score":	7743588
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	8995,
			"primary_score":	999983,
			"second_score":	3302081
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9632,
			"primary_score":	999948,
			"second_score":	7773759
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9633,
			"primary_score":	999948,
			"second_score":	7773758
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9634,
			"primary_score":	999948,
			"second_score":	7773757
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9635,
			"primary_score":	999948,
			"second_score":	7773756
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9636,
			"primary_score":	999948,
			"second_score":	7773755
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9832,
			"primary_score":	999934,
			"second_score":	56210092
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9833,
			"primary_score":	999934,
			"second_score":	56210091
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9834,
			"primary_score":	999934,
			"second_score":	56210090
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9835,
			"primary_score":	999934,
			"second_score":	56210089
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9840,
			"primary_score":	999934,
			"second_score":	56210088
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9844,
			"primary_score":	999934,
			"second_score":	56210029
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9868,
			"primary_score":	999952,
			"second_score":	7773354
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9869,
			"primary_score":	999952,
			"second_score":	7773353
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	9870,
			"primary_score":	999952,
			"second_score":	7773352
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10072,
			"primary_score":	999711,
			"second_score":	38777
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10073,
			"primary_score":	999711,
			"second_score":	38776
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10075,
			"primary_score":	999711,
			"second_score":	38775
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10076,
			"primary_score":	999711,
			"second_score":	5558
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10077,
			"primary_score":	999711,
			"second_score":	5557
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10078,
			"primary_score":	999711,
			"second_score":	5556
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10079,
			"primary_score":	999711,
			"second_score":	5555
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10080,
			"primary_score":	999711,
			"second_score":	5536
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10081,
			"primary_score":	999711,
			"second_score":	5533
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10082,
			"primary_score":	999711,
			"second_score":	5514
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10084,
			"primary_score":	999711,
			"second_score":	5513
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10085,
			"primary_score":	999711,
			"second_score":	5512
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10086,
			"primary_score":	999711,
			"second_score":	5511
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10092,
			"primary_score":	999711,
			"second_score":	44903
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10094,
			"primary_score":	999711,
			"second_score":	44902
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10095,
			"primary_score":	999711,
			"second_score":	44897
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10097,
			"primary_score":	999711,
			"second_score":	44896
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10098,
			"primary_score":	999711,
			"second_score":	38826
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10099,
			"primary_score":	999711,
			"second_score":	39533
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10100,
			"primary_score":	999711,
			"second_score":	38779
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10103,
			"primary_score":	999711,
			"second_score":	38778
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10246,
			"primary_score":	999997,
			"second_score":	67914692
		}, {
			"file":	"Objects/unicodeobject.c",
			"line":	10247,
			"primary_score":	999997,
			"second_score":	67914686
		}, {
			"file":	"Objects/weakrefobject.c",
			"line":	876,
			"primary_score":	999711,
			"second_score":	166822
		}, {
			"file":	"Objects/weakrefobject.c",
			"line":	878,
			"primary_score":	999711,
			"second_score":	166821
		}, {
			"file":	"Objects/weakrefobject.c",
			"line":	884,
			"primary_score":	999711,
			"second_score":	166820
		}, {
			"file":	"Objects/weakrefobject.c",
			"line":	886,
			"primary_score":	999711,
			"second_score":	166819
		}, {
			"file":	"Objects/weakrefobject.c",
			"line":	891,
			"primary_score":	999711,
			"second_score":	166818
		}, {
			"file":	"Parser/acceler.c",
			"line":	37,
			"primary_score":	999711,
			"second_score":	5506
		}, {
			"file":	"Parser/acceler.c",
			"line":	38,
			"primary_score":	999711,
			"second_score":	5505
		}, {
			"file":	"Parser/acceler.c",
			"line":	39,
			"primary_score":	999711,
			"second_score":	5504
		}, {
			"file":	"Parser/acceler.c",
			"line":	40,
			"primary_score":	999711,
			"second_score":	5503
		}, {
			"file":	"Parser/acceler.c",
			"line":	41,
			"primary_score":	999711,
			"second_score":	5502
		}, {
			"file":	"Parser/acceler.c",
			"line":	42,
			"primary_score":	999711,
			"second_score":	44
		}, {
			"file":	"Parser/acceler.c",
			"line":	43,
			"primary_score":	999711,
			"second_score":	43
		}, {
			"file":	"Parser/acceler.c",
			"line":	44,
			"primary_score":	999711,
			"second_score":	42
		}, {
			"file":	"Parser/acceler.c",
			"line":	45,
			"primary_score":	999711,
			"second_score":	41
		}, {
			"file":	"Parser/acceler.c",
			"line":	46,
			"primary_score":	999711,
			"second_score":	7
		}, {
			"file":	"Parser/acceler.c",
			"line":	47,
			"primary_score":	999711,
			"second_score":	18
		}, {
			"file":	"Parser/acceler.c",
			"line":	48,
			"primary_score":	999711,
			"second_score":	6
		}, {
			"file":	"Parser/node.c",
			"line":	26,
			"primary_score":	999979,
			"second_score":	26730982
		}, {
			"file":	"Parser/node.c",
			"line":	27,
			"primary_score":	999979,
			"second_score":	26730981
		}, {
			"file":	"Parser/node.c",
			"line":	28,
			"primary_score":	999979,
			"second_score":	26730980
		}, {
			"file":	"Parser/node.c",
			"line":	29,
			"primary_score":	999985,
			"second_score":	26730967
		}, {
			"file":	"Parser/node.c",
			"line":	30,
			"primary_score":	999985,
			"second_score":	26730966
		}, {
			"file":	"Parser/node.c",
			"line":	33,
			"primary_score":	999979,
			"second_score":	26730965
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	233,
			"primary_score":	999789,
			"second_score":	64110034
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	234,
			"primary_score":	999789,
			"second_score":	64110033
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1066,
			"primary_score":	999982,
			"second_score":	56491274
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1154,
			"primary_score":	999949,
			"second_score":	158729506
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1169,
			"primary_score":	999957,
			"second_score":	51967542
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1174,
			"primary_score":	999988,
			"second_score":	51848432
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1190,
			"primary_score":	999968,
			"second_score":	52205480
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1200,
			"primary_score":	999978,
			"second_score":	52086517
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1415,
			"primary_score":	999878,
			"second_score":	83030570
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1453,
			"primary_score":	999991,
			"second_score":	103131467
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1484,
			"primary_score":	999950,
			"second_score":	79037917
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1485,
			"primary_score":	999950,
			"second_score":	79037913
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1490,
			"primary_score":	999950,
			"second_score":	79037912
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1491,
			"primary_score":	999950,
			"second_score":	79037899
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1496,
			"primary_score":	999983,
			"second_score":	115472421
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1497,
			"primary_score":	999983,
			"second_score":	115472417
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1502,
			"primary_score":	999983,
			"second_score":	115472416
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1503,
			"primary_score":	999983,
			"second_score":	115472395
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1549,
			"primary_score":	999909,
			"second_score":	10112298
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1556,
			"primary_score":	999976,
			"second_score":	266172192
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1559,
			"primary_score":	999976,
			"second_score":	266172188
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1560,
			"primary_score":	999986,
			"second_score":	266638203
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1561,
			"primary_score":	999976,
			"second_score":	266172187
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1566,
			"primary_score":	999976,
			"second_score":	266172186
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1567,
			"primary_score":	999976,
			"second_score":	266172181
		}, {
			"file":	"Parser/tokenizer.c",
			"line":	1651,
			"primary_score":	999991,
			"second_score":	140697727
		}, {
			"file":	"Python/Python-ast.c",
			"line":	518,
			"primary_score":	999933,
			"second_score":	57057862
		}, {
			"file":	"Python/Python-ast.c",
			"line":	519,
			"primary_score":	999933,
			"second_score":	57057861
		}, {
			"file":	"Python/Python-ast.c",
			"line":	520,
			"primary_score":	999933,
			"second_score":	57057860
		}, {
			"file":	"Python/Python-ast.c",
			"line":	521,
			"primary_score":	999933,
			"second_score":	57057839
		}, {
			"file":	"Python/Python-ast.c",
			"line":	522,
			"primary_score":	999933,
			"second_score":	57057838
		}, {
			"file":	"Python/Python-ast.c",
			"line":	523,
			"primary_score":	999933,
			"second_score":	57057739
		}, {
			"file":	"Python/Python-ast.c",
			"line":	524,
			"primary_score":	999933,
			"second_score":	57057583
		}, {
			"file":	"Python/Python-ast.c",
			"line":	528,
			"primary_score":	999933,
			"second_score":	57057582
		}, {
			"file":	"Python/Python-ast.c",
			"line":	530,
			"primary_score":	999933,
			"second_score":	57057581
		}, {
			"file":	"Python/Python-ast.c",
			"line":	532,
			"primary_score":	999933,
			"second_score":	57033868
		}, {
			"file":	"Python/Python-ast.c",
			"line":	533,
			"primary_score":	999933,
			"second_score":	57033865
		}, {
			"file":	"Python/Python-ast.c",
			"line":	538,
			"primary_score":	999933,
			"second_score":	57157497
		}, {
			"file":	"Python/Python-ast.c",
			"line":	539,
			"primary_score":	999933,
			"second_score":	57157496
		}, {
			"file":	"Python/Python-ast.c",
			"line":	540,
			"primary_score":	999933,
			"second_score":	57157475
		}, {
			"file":	"Python/Python-ast.c",
			"line":	542,
			"primary_score":	999933,
			"second_score":	57157474
		}, {
			"file":	"Python/Python-ast.c",
			"line":	543,
			"primary_score":	999933,
			"second_score":	57157354
		}, {
			"file":	"Python/Python-ast.c",
			"line":	544,
			"primary_score":	999933,
			"second_score":	57157166
		}, {
			"file":	"Python/Python-ast.c",
			"line":	548,
			"primary_score":	999933,
			"second_score":	57157165
		}, {
			"file":	"Python/Python-ast.c",
			"line":	550,
			"primary_score":	999933,
			"second_score":	57157164
		}, {
			"file":	"Python/Python-ast.c",
			"line":	551,
			"primary_score":	999933,
			"second_score":	57156382
		}, {
			"file":	"Python/Python-ast.c",
			"line":	552,
			"primary_score":	999933,
			"second_score":	57156379
		}, {
			"file":	"Python/Python-ast.c",
			"line":	627,
			"primary_score":	999933,
			"second_score":	59708941
		}, {
			"file":	"Python/Python-ast.c",
			"line":	628,
			"primary_score":	999933,
			"second_score":	59708940
		}, {
			"file":	"Python/Python-ast.c",
			"line":	630,
			"primary_score":	999933,
			"second_score":	59701663
		}, {
			"file":	"Python/Python-ast.c",
			"line":	631,
			"primary_score":	999933,
			"second_score":	59701662
		}, {
			"file":	"Python/Python-ast.c",
			"line":	632,
			"primary_score":	999933,
			"second_score":	59701654
		}, {
			"file":	"Python/Python-ast.c",
			"line":	638,
			"primary_score":	999933,
			"second_score":	59700994
		}, {
			"file":	"Python/Python-ast.c",
			"line":	639,
			"primary_score":	999933,
			"second_score":	59700991
		}, {
			"file":	"Python/Python-ast.c",
			"line":	645,
			"primary_score":	999933,
			"second_score":	8359002
		}, {
			"file":	"Python/Python-ast.c",
			"line":	646,
			"primary_score":	999940,
			"second_score":	8359000
		}, {
			"file":	"Python/Python-ast.c",
			"line":	647,
			"primary_score":	999933,
			"second_score":	59708942
		}, {
			"file":	"Python/Python-ast.c",
			"line":	648,
			"primary_score":	999933,
			"second_score":	59700990
		}, {
			"file":	"Python/Python-ast.c",
			"line":	649,
			"primary_score":	999933,
			"second_score":	59677378
		}, {
			"file":	"Python/Python-ast.c",
			"line":	650,
			"primary_score":	999933,
			"second_score":	59677377
		}, {
			"file":	"Python/Python-ast.c",
			"line":	651,
			"primary_score":	999933,
			"second_score":	59676599
		}, {
			"file":	"Python/Python-ast.c",
			"line":	652,
			"primary_score":	999933,
			"second_score":	59651649
		}, {
			"file":	"Python/Python-ast.c",
			"line":	653,
			"primary_score":	999933,
			"second_score":	59651648
		}, {
			"file":	"Python/Python-ast.c",
			"line":	655,
			"primary_score":	999933,
			"second_score":	59626757
		}, {
			"file":	"Python/Python-ast.c",
			"line":	656,
			"primary_score":	999933,
			"second_score":	59626756
		}, {
			"file":	"Python/Python-ast.c",
			"line":	658,
			"primary_score":	999933,
			"second_score":	59601636
		}, {
			"file":	"Python/Python-ast.c",
			"line":	659,
			"primary_score":	999933,
			"second_score":	59601635
		}, {
			"file":	"Python/Python-ast.c",
			"line":	660,
			"primary_score":	999933,
			"second_score":	59576731
		}, {
			"file":	"Python/Python-ast.c",
			"line":	661,
			"primary_score":	999933,
			"second_score":	59576730
		}, {
			"file":	"Python/Python-ast.c",
			"line":	662,
			"primary_score":	999933,
			"second_score":	59553172
		}, {
			"file":	"Python/Python-ast.c",
			"line":	663,
			"primary_score":	999933,
			"second_score":	59553171
		}, {
			"file":	"Python/Python-ast.c",
			"line":	664,
			"primary_score":	999933,
			"second_score":	59552218
		}, {
			"file":	"Python/Python-ast.c",
			"line":	666,
			"primary_score":	999933,
			"second_score":	59526546
		}, {
			"file":	"Python/Python-ast.c",
			"line":	667,
			"primary_score":	999933,
			"second_score":	59526545
		}, {
			"file":	"Python/Python-ast.c",
			"line":	668,
			"primary_score":	999933,
			"second_score":	59500852
		}, {
			"file":	"Python/Python-ast.c",
			"line":	669,
			"primary_score":	999933,
			"second_score":	59500851
		}, {
			"file":	"Python/Python-ast.c",
			"line":	670,
			"primary_score":	999933,
			"second_score":	59475968
		}, {
			"file":	"Python/Python-ast.c",
			"line":	671,
			"primary_score":	999933,
			"second_score":	59475967
		}, {
			"file":	"Python/Python-ast.c",
			"line":	672,
			"primary_score":	999933,
			"second_score":	59450853
		}, {
			"file":	"Python/Python-ast.c",
			"line":	673,
			"primary_score":	999933,
			"second_score":	59450852
		}, {
			"file":	"Python/Python-ast.c",
			"line":	674,
			"primary_score":	999933,
			"second_score":	59425838
		}, {
			"file":	"Python/Python-ast.c",
			"line":	675,
			"primary_score":	999933,
			"second_score":	59425837
		}, {
			"file":	"Python/Python-ast.c",
			"line":	676,
			"primary_score":	999933,
			"second_score":	59400689
		}, {
			"file":	"Python/Python-ast.c",
			"line":	677,
			"primary_score":	999933,
			"second_score":	59400688
		}, {
			"file":	"Python/Python-ast.c",
			"line":	678,
			"primary_score":	999933,
			"second_score":	59375109
		}, {
			"file":	"Python/Python-ast.c",
			"line":	679,
			"primary_score":	999933,
			"second_score":	59375108
		}, {
			"file":	"Python/Python-ast.c",
			"line":	680,
			"primary_score":	999933,
			"second_score":	59350022
		}, {
			"file":	"Python/Python-ast.c",
			"line":	681,
			"primary_score":	999933,
			"second_score":	59350021
		}, {
			"file":	"Python/Python-ast.c",
			"line":	682,
			"primary_score":	999933,
			"second_score":	59324960
		}, {
			"file":	"Python/Python-ast.c",
			"line":	683,
			"primary_score":	999933,
			"second_score":	59324959
		}, {
			"file":	"Python/Python-ast.c",
			"line":	684,
			"primary_score":	999933,
			"second_score":	59299682
		}, {
			"file":	"Python/Python-ast.c",
			"line":	685,
			"primary_score":	999933,
			"second_score":	59299681
		}, {
			"file":	"Python/Python-ast.c",
			"line":	686,
			"primary_score":	999933,
			"second_score":	59274669
		}, {
			"file":	"Python/Python-ast.c",
			"line":	687,
			"primary_score":	999933,
			"second_score":	59274668
		}, {
			"file":	"Python/Python-ast.c",
			"line":	688,
			"primary_score":	999933,
			"second_score":	59249432
		}, {
			"file":	"Python/Python-ast.c",
			"line":	689,
			"primary_score":	999933,
			"second_score":	59249431
		}, {
			"file":	"Python/Python-ast.c",
			"line":	691,
			"primary_score":	999933,
			"second_score":	59224380
		}, {
			"file":	"Python/Python-ast.c",
			"line":	692,
			"primary_score":	999933,
			"second_score":	59224379
		}, {
			"file":	"Python/Python-ast.c",
			"line":	693,
			"primary_score":	999933,
			"second_score":	59199417
		}, {
			"file":	"Python/Python-ast.c",
			"line":	694,
			"primary_score":	999933,
			"second_score":	59199416
		}, {
			"file":	"Python/Python-ast.c",
			"line":	695,
			"primary_score":	999933,
			"second_score":	59174528
		}, {
			"file":	"Python/Python-ast.c",
			"line":	696,
			"primary_score":	999933,
			"second_score":	59174527
		}, {
			"file":	"Python/Python-ast.c",
			"line":	698,
			"primary_score":	999933,
			"second_score":	59149313
		}, {
			"file":	"Python/Python-ast.c",
			"line":	699,
			"primary_score":	999933,
			"second_score":	59149312
		}, {
			"file":	"Python/Python-ast.c",
			"line":	700,
			"primary_score":	999933,
			"second_score":	59124404
		}, {
			"file":	"Python/Python-ast.c",
			"line":	701,
			"primary_score":	999933,
			"second_score":	59124403
		}, {
			"file":	"Python/Python-ast.c",
			"line":	702,
			"primary_score":	999933,
			"second_score":	59099447
		}, {
			"file":	"Python/Python-ast.c",
			"line":	703,
			"primary_score":	999933,
			"second_score":	59099446
		}, {
			"file":	"Python/Python-ast.c",
			"line":	704,
			"primary_score":	999933,
			"second_score":	59074573
		}, {
			"file":	"Python/Python-ast.c",
			"line":	705,
			"primary_score":	999933,
			"second_score":	59074572
		}, {
			"file":	"Python/Python-ast.c",
			"line":	706,
			"primary_score":	999933,
			"second_score":	59049863
		}, {
			"file":	"Python/Python-ast.c",
			"line":	707,
			"primary_score":	999933,
			"second_score":	59049862
		}, {
			"file":	"Python/Python-ast.c",
			"line":	708,
			"primary_score":	999933,
			"second_score":	59025168
		}, {
			"file":	"Python/Python-ast.c",
			"line":	709,
			"primary_score":	999933,
			"second_score":	59025167
		}, {
			"file":	"Python/Python-ast.c",
			"line":	710,
			"primary_score":	999933,
			"second_score":	59000142
		}, {
			"file":	"Python/Python-ast.c",
			"line":	711,
			"primary_score":	999933,
			"second_score":	59000141
		}, {
			"file":	"Python/Python-ast.c",
			"line":	712,
			"primary_score":	999933,
			"second_score":	58976590
		}, {
			"file":	"Python/Python-ast.c",
			"line":	713,
			"primary_score":	999933,
			"second_score":	58976589
		}, {
			"file":	"Python/Python-ast.c",
			"line":	714,
			"primary_score":	999933,
			"second_score":	58975513
		}, {
			"file":	"Python/Python-ast.c",
			"line":	715,
			"primary_score":	999933,
			"second_score":	58950382
		}, {
			"file":	"Python/Python-ast.c",
			"line":	716,
			"primary_score":	999933,
			"second_score":	58950381
		}, {
			"file":	"Python/Python-ast.c",
			"line":	717,
			"primary_score":	999933,
			"second_score":	58924887
		}, {
			"file":	"Python/Python-ast.c",
			"line":	718,
			"primary_score":	999933,
			"second_score":	58924886
		}, {
			"file":	"Python/Python-ast.c",
			"line":	719,
			"primary_score":	999933,
			"second_score":	58899938
		}, {
			"file":	"Python/Python-ast.c",
			"line":	720,
			"primary_score":	999933,
			"second_score":	58899937
		}, {
			"file":	"Python/Python-ast.c",
			"line":	721,
			"primary_score":	999933,
			"second_score":	58874611
		}, {
			"file":	"Python/Python-ast.c",
			"line":	722,
			"primary_score":	999933,
			"second_score":	58874610
		}, {
			"file":	"Python/Python-ast.c",
			"line":	723,
			"primary_score":	999933,
			"second_score":	58849319
		}, {
			"file":	"Python/Python-ast.c",
			"line":	724,
			"primary_score":	999933,
			"second_score":	58849318
		}, {
			"file":	"Python/Python-ast.c",
			"line":	725,
			"primary_score":	999933,
			"second_score":	58824384
		}, {
			"file":	"Python/Python-ast.c",
			"line":	726,
			"primary_score":	999933,
			"second_score":	58824383
		}, {
			"file":	"Python/Python-ast.c",
			"line":	727,
			"primary_score":	999933,
			"second_score":	58799556
		}, {
			"file":	"Python/Python-ast.c",
			"line":	728,
			"primary_score":	999933,
			"second_score":	58799555
		}, {
			"file":	"Python/Python-ast.c",
			"line":	729,
			"primary_score":	999933,
			"second_score":	58774388
		}, {
			"file":	"Python/Python-ast.c",
			"line":	730,
			"primary_score":	999933,
			"second_score":	58774387
		}, {
			"file":	"Python/Python-ast.c",
			"line":	731,
			"primary_score":	999933,
			"second_score":	58748981
		}, {
			"file":	"Python/Python-ast.c",
			"line":	732,
			"primary_score":	999933,
			"second_score":	58748980
		}, {
			"file":	"Python/Python-ast.c",
			"line":	733,
			"primary_score":	999933,
			"second_score":	58723735
		}, {
			"file":	"Python/Python-ast.c",
			"line":	734,
			"primary_score":	999933,
			"second_score":	58723734
		}, {
			"file":	"Python/Python-ast.c",
			"line":	736,
			"primary_score":	999933,
			"second_score":	58698592
		}, {
			"file":	"Python/Python-ast.c",
			"line":	737,
			"primary_score":	999933,
			"second_score":	58698591
		}, {
			"file":	"Python/Python-ast.c",
			"line":	738,
			"primary_score":	999933,
			"second_score":	58673612
		}, {
			"file":	"Python/Python-ast.c",
			"line":	739,
			"primary_score":	999933,
			"second_score":	58673611
		}, {
			"file":	"Python/Python-ast.c",
			"line":	740,
			"primary_score":	999933,
			"second_score":	58549501
		}, {
			"file":	"Python/Python-ast.c",
			"line":	741,
			"primary_score":	999933,
			"second_score":	58549500
		}, {
			"file":	"Python/Python-ast.c",
			"line":	742,
			"primary_score":	999933,
			"second_score":	58523889
		}, {
			"file":	"Python/Python-ast.c",
			"line":	743,
			"primary_score":	999933,
			"second_score":	58523888
		}, {
			"file":	"Python/Python-ast.c",
			"line":	744,
			"primary_score":	999933,
			"second_score":	58498839
		}, {
			"file":	"Python/Python-ast.c",
			"line":	745,
			"primary_score":	999933,
			"second_score":	58498838
		}, {
			"file":	"Python/Python-ast.c",
			"line":	746,
			"primary_score":	999933,
			"second_score":	58473827
		}, {
			"file":	"Python/Python-ast.c",
			"line":	747,
			"primary_score":	999933,
			"second_score":	58473826
		}, {
			"file":	"Python/Python-ast.c",
			"line":	748,
			"primary_score":	999933,
			"second_score":	58448959
		}, {
			"file":	"Python/Python-ast.c",
			"line":	749,
			"primary_score":	999933,
			"second_score":	58448958
		}, {
			"file":	"Python/Python-ast.c",
			"line":	750,
			"primary_score":	999933,
			"second_score":	58424085
		}, {
			"file":	"Python/Python-ast.c",
			"line":	751,
			"primary_score":	999933,
			"second_score":	58424084
		}, {
			"file":	"Python/Python-ast.c",
			"line":	752,
			"primary_score":	999933,
			"second_score":	58398744
		}, {
			"file":	"Python/Python-ast.c",
			"line":	753,
			"primary_score":	999933,
			"second_score":	58398743
		}, {
			"file":	"Python/Python-ast.c",
			"line":	754,
			"primary_score":	999933,
			"second_score":	58373422
		}, {
			"file":	"Python/Python-ast.c",
			"line":	755,
			"primary_score":	999933,
			"second_score":	58373421
		}, {
			"file":	"Python/Python-ast.c",
			"line":	756,
			"primary_score":	999933,
			"second_score":	58348301
		}, {
			"file":	"Python/Python-ast.c",
			"line":	757,
			"primary_score":	999933,
			"second_score":	58348300
		}, {
			"file":	"Python/Python-ast.c",
			"line":	758,
			"primary_score":	999933,
			"second_score":	58323235
		}, {
			"file":	"Python/Python-ast.c",
			"line":	759,
			"primary_score":	999933,
			"second_score":	58323234
		}, {
			"file":	"Python/Python-ast.c",
			"line":	760,
			"primary_score":	999933,
			"second_score":	58297955
		}, {
			"file":	"Python/Python-ast.c",
			"line":	761,
			"primary_score":	999933,
			"second_score":	58297954
		}, {
			"file":	"Python/Python-ast.c",
			"line":	762,
			"primary_score":	999933,
			"second_score":	58272845
		}, {
			"file":	"Python/Python-ast.c",
			"line":	763,
			"primary_score":	999933,
			"second_score":	58272844
		}, {
			"file":	"Python/Python-ast.c",
			"line":	764,
			"primary_score":	999933,
			"second_score":	58249111
		}, {
			"file":	"Python/Python-ast.c",
			"line":	765,
			"primary_score":	999933,
			"second_score":	58249110
		}, {
			"file":	"Python/Python-ast.c",
			"line":	766,
			"primary_score":	999933,
			"second_score":	58248332
		}, {
			"file":	"Python/Python-ast.c",
			"line":	767,
			"primary_score":	999933,
			"second_score":	58223351
		}, {
			"file":	"Python/Python-ast.c",
			"line":	768,
			"primary_score":	999933,
			"second_score":	58223350
		}, {
			"file":	"Python/Python-ast.c",
			"line":	769,
			"primary_score":	999933,
			"second_score":	58223297
		}, {
			"file":	"Python/Python-ast.c",
			"line":	770,
			"primary_score":	999933,
			"second_score":	58223296
		}, {
			"file":	"Python/Python-ast.c",
			"line":	771,
			"primary_score":	999933,
			"second_score":	58198537
		}, {
			"file":	"Python/Python-ast.c",
			"line":	772,
			"primary_score":	999933,
			"second_score":	58198536
		}, {
			"file":	"Python/Python-ast.c",
			"line":	773,
			"primary_score":	999933,
			"second_score":	58198483
		}, {
			"file":	"Python/Python-ast.c",
			"line":	774,
			"primary_score":	999933,
			"second_score":	58198482
		}, {
			"file":	"Python/Python-ast.c",
			"line":	775,
			"primary_score":	999933,
			"second_score":	58173608
		}, {
			"file":	"Python/Python-ast.c",
			"line":	776,
			"primary_score":	999933,
			"second_score":	58173607
		}, {
			"file":	"Python/Python-ast.c",
			"line":	777,
			"primary_score":	999933,
			"second_score":	58173554
		}, {
			"file":	"Python/Python-ast.c",
			"line":	778,
			"primary_score":	999933,
			"second_score":	58173553
		}, {
			"file":	"Python/Python-ast.c",
			"line":	779,
			"primary_score":	999933,
			"second_score":	58148795
		}, {
			"file":	"Python/Python-ast.c",
			"line":	780,
			"primary_score":	999933,
			"second_score":	58148794
		}, {
			"file":	"Python/Python-ast.c",
			"line":	781,
			"primary_score":	999933,
			"second_score":	58148741
		}, {
			"file":	"Python/Python-ast.c",
			"line":	782,
			"primary_score":	999933,
			"second_score":	58148740
		}, {
			"file":	"Python/Python-ast.c",
			"line":	783,
			"primary_score":	999933,
			"second_score":	58123898
		}, {
			"file":	"Python/Python-ast.c",
			"line":	784,
			"primary_score":	999933,
			"second_score":	58123897
		}, {
			"file":	"Python/Python-ast.c",
			"line":	785,
			"primary_score":	999933,
			"second_score":	58123844
		}, {
			"file":	"Python/Python-ast.c",
			"line":	786,
			"primary_score":	999933,
			"second_score":	58123843
		}, {
			"file":	"Python/Python-ast.c",
			"line":	787,
			"primary_score":	999933,
			"second_score":	58099099
		}, {
			"file":	"Python/Python-ast.c",
			"line":	788,
			"primary_score":	999933,
			"second_score":	58099098
		}, {
			"file":	"Python/Python-ast.c",
			"line":	789,
			"primary_score":	999933,
			"second_score":	58099045
		}, {
			"file":	"Python/Python-ast.c",
			"line":	790,
			"primary_score":	999933,
			"second_score":	58099044
		}, {
			"file":	"Python/Python-ast.c",
			"line":	791,
			"primary_score":	999933,
			"second_score":	58075105
		}, {
			"file":	"Python/Python-ast.c",
			"line":	792,
			"primary_score":	999933,
			"second_score":	58075104
		}, {
			"file":	"Python/Python-ast.c",
			"line":	793,
			"primary_score":	999933,
			"second_score":	58074326
		}, {
			"file":	"Python/Python-ast.c",
			"line":	794,
			"primary_score":	999933,
			"second_score":	58049036
		}, {
			"file":	"Python/Python-ast.c",
			"line":	795,
			"primary_score":	999933,
			"second_score":	58049035
		}, {
			"file":	"Python/Python-ast.c",
			"line":	796,
			"primary_score":	999933,
			"second_score":	58024041
		}, {
			"file":	"Python/Python-ast.c",
			"line":	797,
			"primary_score":	999933,
			"second_score":	58024040
		}, {
			"file":	"Python/Python-ast.c",
			"line":	798,
			"primary_score":	999933,
			"second_score":	57999095
		}, {
			"file":	"Python/Python-ast.c",
			"line":	799,
			"primary_score":	999933,
			"second_score":	57999094
		}, {
			"file":	"Python/Python-ast.c",
			"line":	800,
			"primary_score":	999933,
			"second_score":	57975428
		}, {
			"file":	"Python/Python-ast.c",
			"line":	801,
			"primary_score":	999933,
			"second_score":	57975427
		}, {
			"file":	"Python/Python-ast.c",
			"line":	802,
			"primary_score":	999933,
			"second_score":	57974764
		}, {
			"file":	"Python/Python-ast.c",
			"line":	803,
			"primary_score":	999933,
			"second_score":	57949786
		}, {
			"file":	"Python/Python-ast.c",
			"line":	804,
			"primary_score":	999933,
			"second_score":	57949785
		}, {
			"file":	"Python/Python-ast.c",
			"line":	805,
			"primary_score":	999933,
			"second_score":	57949732
		}, {
			"file":	"Python/Python-ast.c",
			"line":	806,
			"primary_score":	999933,
			"second_score":	57949731
		}, {
			"file":	"Python/Python-ast.c",
			"line":	807,
			"primary_score":	999933,
			"second_score":	57925036
		}, {
			"file":	"Python/Python-ast.c",
			"line":	808,
			"primary_score":	999933,
			"second_score":	57925035
		}, {
			"file":	"Python/Python-ast.c",
			"line":	809,
			"primary_score":	999933,
			"second_score":	57924982
		}, {
			"file":	"Python/Python-ast.c",
			"line":	810,
			"primary_score":	999933,
			"second_score":	57924981
		}, {
			"file":	"Python/Python-ast.c",
			"line":	811,
			"primary_score":	999933,
			"second_score":	57901226
		}, {
			"file":	"Python/Python-ast.c",
			"line":	812,
			"primary_score":	999933,
			"second_score":	57901225
		}, {
			"file":	"Python/Python-ast.c",
			"line":	813,
			"primary_score":	999933,
			"second_score":	57900447
		}, {
			"file":	"Python/Python-ast.c",
			"line":	814,
			"primary_score":	999933,
			"second_score":	57875683
		}, {
			"file":	"Python/Python-ast.c",
			"line":	815,
			"primary_score":	999933,
			"second_score":	57875682
		}, {
			"file":	"Python/Python-ast.c",
			"line":	816,
			"primary_score":	999933,
			"second_score":	57875629
		}, {
			"file":	"Python/Python-ast.c",
			"line":	817,
			"primary_score":	999933,
			"second_score":	57875628
		}, {
			"file":	"Python/Python-ast.c",
			"line":	818,
			"primary_score":	999933,
			"second_score":	57850923
		}, {
			"file":	"Python/Python-ast.c",
			"line":	819,
			"primary_score":	999933,
			"second_score":	57850922
		}, {
			"file":	"Python/Python-ast.c",
			"line":	820,
			"primary_score":	999933,
			"second_score":	57850869
		}, {
			"file":	"Python/Python-ast.c",
			"line":	821,
			"primary_score":	999933,
			"second_score":	57850868
		}, {
			"file":	"Python/Python-ast.c",
			"line":	822,
			"primary_score":	999933,
			"second_score":	57826138
		}, {
			"file":	"Python/Python-ast.c",
			"line":	823,
			"primary_score":	999933,
			"second_score":	57826137
		}, {
			"file":	"Python/Python-ast.c",
			"line":	824,
			"primary_score":	999933,
			"second_score":	57826084
		}, {
			"file":	"Python/Python-ast.c",
			"line":	825,
			"primary_score":	999933,
			"second_score":	57826083
		}, {
			"file":	"Python/Python-ast.c",
			"line":	826,
			"primary_score":	999933,
			"second_score":	57801371
		}, {
			"file":	"Python/Python-ast.c",
			"line":	827,
			"primary_score":	999933,
			"second_score":	57801370
		}, {
			"file":	"Python/Python-ast.c",
			"line":	828,
			"primary_score":	999933,
			"second_score":	57801317
		}, {
			"file":	"Python/Python-ast.c",
			"line":	829,
			"primary_score":	999933,
			"second_score":	57801316
		}, {
			"file":	"Python/Python-ast.c",
			"line":	830,
			"primary_score":	999933,
			"second_score":	57776579
		}, {
			"file":	"Python/Python-ast.c",
			"line":	831,
			"primary_score":	999933,
			"second_score":	57776578
		}, {
			"file":	"Python/Python-ast.c",
			"line":	832,
			"primary_score":	999933,
			"second_score":	57776524
		}, {
			"file":	"Python/Python-ast.c",
			"line":	833,
			"primary_score":	999933,
			"second_score":	57776523
		}, {
			"file":	"Python/Python-ast.c",
			"line":	834,
			"primary_score":	999933,
			"second_score":	57751785
		}, {
			"file":	"Python/Python-ast.c",
			"line":	835,
			"primary_score":	999933,
			"second_score":	57751784
		}, {
			"file":	"Python/Python-ast.c",
			"line":	836,
			"primary_score":	999933,
			"second_score":	57751731
		}, {
			"file":	"Python/Python-ast.c",
			"line":	837,
			"primary_score":	999933,
			"second_score":	57751730
		}, {
			"file":	"Python/Python-ast.c",
			"line":	838,
			"primary_score":	999933,
			"second_score":	57726980
		}, {
			"file":	"Python/Python-ast.c",
			"line":	839,
			"primary_score":	999933,
			"second_score":	57726979
		}, {
			"file":	"Python/Python-ast.c",
			"line":	840,
			"primary_score":	999933,
			"second_score":	57726926
		}, {
			"file":	"Python/Python-ast.c",
			"line":	841,
			"primary_score":	999933,
			"second_score":	57726925
		}, {
			"file":	"Python/Python-ast.c",
			"line":	842,
			"primary_score":	999933,
			"second_score":	57702172
		}, {
			"file":	"Python/Python-ast.c",
			"line":	843,
			"primary_score":	999933,
			"second_score":	57702171
		}, {
			"file":	"Python/Python-ast.c",
			"line":	844,
			"primary_score":	999933,
			"second_score":	57702118
		}, {
			"file":	"Python/Python-ast.c",
			"line":	845,
			"primary_score":	999933,
			"second_score":	57702117
		}, {
			"file":	"Python/Python-ast.c",
			"line":	846,
			"primary_score":	999933,
			"second_score":	57677151
		}, {
			"file":	"Python/Python-ast.c",
			"line":	847,
			"primary_score":	999933,
			"second_score":	57677150
		}, {
			"file":	"Python/Python-ast.c",
			"line":	848,
			"primary_score":	999933,
			"second_score":	57677097
		}, {
			"file":	"Python/Python-ast.c",
			"line":	849,
			"primary_score":	999933,
			"second_score":	57677096
		}, {
			"file":	"Python/Python-ast.c",
			"line":	850,
			"primary_score":	999933,
			"second_score":	57652147
		}, {
			"file":	"Python/Python-ast.c",
			"line":	851,
			"primary_score":	999933,
			"second_score":	57652146
		}, {
			"file":	"Python/Python-ast.c",
			"line":	852,
			"primary_score":	999933,
			"second_score":	57652093
		}, {
			"file":	"Python/Python-ast.c",
			"line":	853,
			"primary_score":	999933,
			"second_score":	57652092
		}, {
			"file":	"Python/Python-ast.c",
			"line":	854,
			"primary_score":	999933,
			"second_score":	57627323
		}, {
			"file":	"Python/Python-ast.c",
			"line":	855,
			"primary_score":	999933,
			"second_score":	57627322
		}, {
			"file":	"Python/Python-ast.c",
			"line":	856,
			"primary_score":	999933,
			"second_score":	57627269
		}, {
			"file":	"Python/Python-ast.c",
			"line":	857,
			"primary_score":	999933,
			"second_score":	57627268
		}, {
			"file":	"Python/Python-ast.c",
			"line":	858,
			"primary_score":	999933,
			"second_score":	57602395
		}, {
			"file":	"Python/Python-ast.c",
			"line":	859,
			"primary_score":	999933,
			"second_score":	57602394
		}, {
			"file":	"Python/Python-ast.c",
			"line":	860,
			"primary_score":	999933,
			"second_score":	57602341
		}, {
			"file":	"Python/Python-ast.c",
			"line":	861,
			"primary_score":	999933,
			"second_score":	57602340
		}, {
			"file":	"Python/Python-ast.c",
			"line":	862,
			"primary_score":	999933,
			"second_score":	57578658
		}, {
			"file":	"Python/Python-ast.c",
			"line":	863,
			"primary_score":	999933,
			"second_score":	57578657
		}, {
			"file":	"Python/Python-ast.c",
			"line":	864,
			"primary_score":	999933,
			"second_score":	57577879
		}, {
			"file":	"Python/Python-ast.c",
			"line":	865,
			"primary_score":	999933,
			"second_score":	57553078
		}, {
			"file":	"Python/Python-ast.c",
			"line":	866,
			"primary_score":	999933,
			"second_score":	57553077
		}, {
			"file":	"Python/Python-ast.c",
			"line":	867,
			"primary_score":	999933,
			"second_score":	57553024
		}, {
			"file":	"Python/Python-ast.c",
			"line":	868,
			"primary_score":	999933,
			"second_score":	57553023
		}, {
			"file":	"Python/Python-ast.c",
			"line":	869,
			"primary_score":	999933,
			"second_score":	57528318
		}, {
			"file":	"Python/Python-ast.c",
			"line":	870,
			"primary_score":	999933,
			"second_score":	57528317
		}, {
			"file":	"Python/Python-ast.c",
			"line":	871,
			"primary_score":	999933,
			"second_score":	57528264
		}, {
			"file":	"Python/Python-ast.c",
			"line":	872,
			"primary_score":	999933,
			"second_score":	57528263
		}, {
			"file":	"Python/Python-ast.c",
			"line":	873,
			"primary_score":	999933,
			"second_score":	57503545
		}, {
			"file":	"Python/Python-ast.c",
			"line":	874,
			"primary_score":	999933,
			"second_score":	57503544
		}, {
			"file":	"Python/Python-ast.c",
			"line":	875,
			"primary_score":	999933,
			"second_score":	57503491
		}, {
			"file":	"Python/Python-ast.c",
			"line":	876,
			"primary_score":	999933,
			"second_score":	57503490
		}, {
			"file":	"Python/Python-ast.c",
			"line":	877,
			"primary_score":	999933,
			"second_score":	57478741
		}, {
			"file":	"Python/Python-ast.c",
			"line":	878,
			"primary_score":	999933,
			"second_score":	57478740
		}, {
			"file":	"Python/Python-ast.c",
			"line":	879,
			"primary_score":	999933,
			"second_score":	57478687
		}, {
			"file":	"Python/Python-ast.c",
			"line":	880,
			"primary_score":	999933,
			"second_score":	57478686
		}, {
			"file":	"Python/Python-ast.c",
			"line":	881,
			"primary_score":	999933,
			"second_score":	57454880
		}, {
			"file":	"Python/Python-ast.c",
			"line":	882,
			"primary_score":	999933,
			"second_score":	57454879
		}, {
			"file":	"Python/Python-ast.c",
			"line":	883,
			"primary_score":	999933,
			"second_score":	57454101
		}, {
			"file":	"Python/Python-ast.c",
			"line":	884,
			"primary_score":	999933,
			"second_score":	57429143
		}, {
			"file":	"Python/Python-ast.c",
			"line":	885,
			"primary_score":	999933,
			"second_score":	57429142
		}, {
			"file":	"Python/Python-ast.c",
			"line":	886,
			"primary_score":	999933,
			"second_score":	57429089
		}, {
			"file":	"Python/Python-ast.c",
			"line":	887,
			"primary_score":	999933,
			"second_score":	57429088
		}, {
			"file":	"Python/Python-ast.c",
			"line":	888,
			"primary_score":	999933,
			"second_score":	57404356
		}, {
			"file":	"Python/Python-ast.c",
			"line":	889,
			"primary_score":	999933,
			"second_score":	57404355
		}, {
			"file":	"Python/Python-ast.c",
			"line":	890,
			"primary_score":	999933,
			"second_score":	57404302
		}, {
			"file":	"Python/Python-ast.c",
			"line":	891,
			"primary_score":	999933,
			"second_score":	57404301
		}, {
			"file":	"Python/Python-ast.c",
			"line":	892,
			"primary_score":	999933,
			"second_score":	57379408
		}, {
			"file":	"Python/Python-ast.c",
			"line":	893,
			"primary_score":	999933,
			"second_score":	57379407
		}, {
			"file":	"Python/Python-ast.c",
			"line":	894,
			"primary_score":	999933,
			"second_score":	57379354
		}, {
			"file":	"Python/Python-ast.c",
			"line":	895,
			"primary_score":	999933,
			"second_score":	57379353
		}, {
			"file":	"Python/Python-ast.c",
			"line":	896,
			"primary_score":	999933,
			"second_score":	57354642
		}, {
			"file":	"Python/Python-ast.c",
			"line":	897,
			"primary_score":	999933,
			"second_score":	57354641
		}, {
			"file":	"Python/Python-ast.c",
			"line":	898,
			"primary_score":	999933,
			"second_score":	57354588
		}, {
			"file":	"Python/Python-ast.c",
			"line":	899,
			"primary_score":	999933,
			"second_score":	57354587
		}, {
			"file":	"Python/Python-ast.c",
			"line":	900,
			"primary_score":	999933,
			"second_score":	57329874
		}, {
			"file":	"Python/Python-ast.c",
			"line":	901,
			"primary_score":	999933,
			"second_score":	57329873
		}, {
			"file":	"Python/Python-ast.c",
			"line":	902,
			"primary_score":	999933,
			"second_score":	57329820
		}, {
			"file":	"Python/Python-ast.c",
			"line":	903,
			"primary_score":	999933,
			"second_score":	57329819
		}, {
			"file":	"Python/Python-ast.c",
			"line":	904,
			"primary_score":	999933,
			"second_score":	57304907
		}, {
			"file":	"Python/Python-ast.c",
			"line":	905,
			"primary_score":	999933,
			"second_score":	57304906
		}, {
			"file":	"Python/Python-ast.c",
			"line":	906,
			"primary_score":	999933,
			"second_score":	57304853
		}, {
			"file":	"Python/Python-ast.c",
			"line":	907,
			"primary_score":	999933,
			"second_score":	57304852
		}, {
			"file":	"Python/Python-ast.c",
			"line":	908,
			"primary_score":	999933,
			"second_score":	57280135
		}, {
			"file":	"Python/Python-ast.c",
			"line":	909,
			"primary_score":	999933,
			"second_score":	57280134
		}, {
			"file":	"Python/Python-ast.c",
			"line":	910,
			"primary_score":	999933,
			"second_score":	57280081
		}, {
			"file":	"Python/Python-ast.c",
			"line":	911,
			"primary_score":	999933,
			"second_score":	57280080
		}, {
			"file":	"Python/Python-ast.c",
			"line":	912,
			"primary_score":	999933,
			"second_score":	57255337
		}, {
			"file":	"Python/Python-ast.c",
			"line":	913,
			"primary_score":	999933,
			"second_score":	57255336
		}, {
			"file":	"Python/Python-ast.c",
			"line":	914,
			"primary_score":	999933,
			"second_score":	57255283
		}, {
			"file":	"Python/Python-ast.c",
			"line":	915,
			"primary_score":	999933,
			"second_score":	57255282
		}, {
			"file":	"Python/Python-ast.c",
			"line":	916,
			"primary_score":	999933,
			"second_score":	57230360
		}, {
			"file":	"Python/Python-ast.c",
			"line":	917,
			"primary_score":	999933,
			"second_score":	57230359
		}, {
			"file":	"Python/Python-ast.c",
			"line":	918,
			"primary_score":	999933,
			"second_score":	57230306
		}, {
			"file":	"Python/Python-ast.c",
			"line":	919,
			"primary_score":	999933,
			"second_score":	57230305
		}, {
			"file":	"Python/Python-ast.c",
			"line":	920,
			"primary_score":	999933,
			"second_score":	57205555
		}, {
			"file":	"Python/Python-ast.c",
			"line":	921,
			"primary_score":	999933,
			"second_score":	57205554
		}, {
			"file":	"Python/Python-ast.c",
			"line":	922,
			"primary_score":	999933,
			"second_score":	57205501
		}, {
			"file":	"Python/Python-ast.c",
			"line":	923,
			"primary_score":	999933,
			"second_score":	57205500
		}, {
			"file":	"Python/Python-ast.c",
			"line":	925,
			"primary_score":	999933,
			"second_score":	57181281
		}, {
			"file":	"Python/Python-ast.c",
			"line":	926,
			"primary_score":	999933,
			"second_score":	57181280
		}, {
			"file":	"Python/Python-ast.c",
			"line":	927,
			"primary_score":	999933,
			"second_score":	57157499
		}, {
			"file":	"Python/Python-ast.c",
			"line":	928,
			"primary_score":	999933,
			"second_score":	57157498
		}, {
			"file":	"Python/Python-ast.c",
			"line":	930,
			"primary_score":	999933,
			"second_score":	57156378
		}, {
			"file":	"Python/Python-ast.c",
			"line":	932,
			"primary_score":	999933,
			"second_score":	57131063
		}, {
			"file":	"Python/Python-ast.c",
			"line":	933,
			"primary_score":	999933,
			"second_score":	57131062
		}, {
			"file":	"Python/Python-ast.c",
			"line":	934,
			"primary_score":	999933,
			"second_score":	57106022
		}, {
			"file":	"Python/Python-ast.c",
			"line":	935,
			"primary_score":	999933,
			"second_score":	57106021
		}, {
			"file":	"Python/Python-ast.c",
			"line":	936,
			"primary_score":	999933,
			"second_score":	57082009
		}, {
			"file":	"Python/Python-ast.c",
			"line":	937,
			"primary_score":	999933,
			"second_score":	57082008
		}, {
			"file":	"Python/Python-ast.c",
			"line":	938,
			"primary_score":	999933,
			"second_score":	57057864
		}, {
			"file":	"Python/Python-ast.c",
			"line":	939,
			"primary_score":	999933,
			"second_score":	57057863
		}, {
			"file":	"Python/Python-ast.c",
			"line":	940,
			"primary_score":	999933,
			"second_score":	57033864
		}, {
			"file":	"Python/Python-ast.c",
			"line":	941,
			"primary_score":	999933,
			"second_score":	57033863
		}, {
			"file":	"Python/Python-ast.c",
			"line":	942,
			"primary_score":	999933,
			"second_score":	57033862
		}, {
			"file":	"Python/Python-ast.c",
			"line":	979,
			"primary_score":	999962,
			"second_score":	8344070
		}, {
			"file":	"Python/Python-ast.c",
			"line":	980,
			"primary_score":	999962,
			"second_score":	8344069
		}, {
			"file":	"Python/Python-ast.c",
			"line":	981,
			"primary_score":	999962,
			"second_score":	8344056
		}, {
			"file":	"Python/Python-ast.c",
			"line":	983,
			"primary_score":	999962,
			"second_score":	8344055
		}, {
			"file":	"Python/Python-ast.c",
			"line":	984,
			"primary_score":	999962,
			"second_score":	8344054
		}, {
			"file":	"Python/Python-ast.c",
			"line":	985,
			"primary_score":	999962,
			"second_score":	8344053
		}, {
			"file":	"Python/Python-ast.c",
			"line":	991,
			"primary_score":	999960,
			"second_score":	49146644
		}, {
			"file":	"Python/Python-ast.c",
			"line":	992,
			"primary_score":	999960,
			"second_score":	49146643
		}, {
			"file":	"Python/Python-ast.c",
			"line":	997,
			"primary_score":	999960,
			"second_score":	49146642
		}, {
			"file":	"Python/Python-ast.c",
			"line":	998,
			"primary_score":	999960,
			"second_score":	49146629
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1000,
			"primary_score":	999960,
			"second_score":	49146628
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1001,
			"primary_score":	999960,
			"second_score":	49146627
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1002,
			"primary_score":	999960,
			"second_score":	49146626
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1351,
			"primary_score":	999970,
			"second_score":	156082101
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1352,
			"primary_score":	999970,
			"second_score":	156082100
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1353,
			"primary_score":	999970,
			"second_score":	156082087
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1355,
			"primary_score":	999970,
			"second_score":	156082086
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1356,
			"primary_score":	999970,
			"second_score":	156082085
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1357,
			"primary_score":	999970,
			"second_score":	156082084
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1358,
			"primary_score":	999970,
			"second_score":	156082083
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1359,
			"primary_score":	999970,
			"second_score":	156082082
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1517,
			"primary_score":	999923,
			"second_score":	55252807
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1518,
			"primary_score":	999923,
			"second_score":	55252806
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1523,
			"primary_score":	999923,
			"second_score":	55252805
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1528,
			"primary_score":	999923,
			"second_score":	55252804
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1529,
			"primary_score":	999923,
			"second_score":	55252791
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1531,
			"primary_score":	999923,
			"second_score":	55252790
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1532,
			"primary_score":	999923,
			"second_score":	55252789
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1533,
			"primary_score":	999923,
			"second_score":	55252788
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1534,
			"primary_score":	999923,
			"second_score":	55252787
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1535,
			"primary_score":	999923,
			"second_score":	55252786
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1536,
			"primary_score":	999923,
			"second_score":	55252785
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1543,
			"primary_score":	999976,
			"second_score":	62047644
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1544,
			"primary_score":	999976,
			"second_score":	62047643
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1549,
			"primary_score":	999976,
			"second_score":	62047642
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1554,
			"primary_score":	999976,
			"second_score":	62047641
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1559,
			"primary_score":	999976,
			"second_score":	62047640
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1560,
			"primary_score":	999976,
			"second_score":	62047627
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1562,
			"primary_score":	999976,
			"second_score":	62047626
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1563,
			"primary_score":	999976,
			"second_score":	62047625
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1564,
			"primary_score":	999976,
			"second_score":	62047624
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1565,
			"primary_score":	999976,
			"second_score":	62047623
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1566,
			"primary_score":	999976,
			"second_score":	62047622
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1567,
			"primary_score":	999976,
			"second_score":	62047621
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1568,
			"primary_score":	999976,
			"second_score":	62047620
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1792,
			"primary_score":	999878,
			"second_score":	82609789
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1793,
			"primary_score":	999878,
			"second_score":	82609788
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1798,
			"primary_score":	999878,
			"second_score":	82609787
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1799,
			"primary_score":	999878,
			"second_score":	82609774
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1801,
			"primary_score":	999878,
			"second_score":	82609773
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1802,
			"primary_score":	999878,
			"second_score":	82609772
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1803,
			"primary_score":	999878,
			"second_score":	82609771
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1804,
			"primary_score":	999878,
			"second_score":	82609770
		}, {
			"file":	"Python/Python-ast.c",
			"line":	1805,
			"primary_score":	999878,
			"second_score":	82609769
		}, {
			"file":	"Python/Python-ast.c",
			"line":	6981,
			"primary_score":	999934,
			"second_score":	8359003
		}, {
			"file":	"Python/Python-ast.c",
			"line":	6982,
			"primary_score":	999934,
			"second_score":	8358999
		}, {
			"file":	"Python/ast.c",
			"line":	198,
			"primary_score":	999907,
			"second_score":	62025534
		}, {
			"file":	"Python/ast.c",
			"line":	280,
			"primary_score":	999959,
			"second_score":	49147648
		}, {
			"file":	"Python/ast.c",
			"line":	283,
			"primary_score":	999959,
			"second_score":	49147647
		}, {
			"file":	"Python/ast.c",
			"line":	284,
			"primary_score":	999959,
			"second_score":	49146646
		}, {
			"file":	"Python/ast.c",
			"line":	286,
			"primary_score":	999960,
			"second_score":	49146645
		}, {
			"file":	"Python/ast.c",
			"line":	300,
			"primary_score":	999961,
			"second_score":	8346269
		}, {
			"file":	"Python/ast.c",
			"line":	301,
			"primary_score":	999961,
			"second_score":	8346268
		}, {
			"file":	"Python/ast.c",
			"line":	302,
			"primary_score":	999961,
			"second_score":	8346264
		}, {
			"file":	"Python/ast.c",
			"line":	303,
			"primary_score":	999961,
			"second_score":	8346241
		}, {
			"file":	"Python/ast.c",
			"line":	305,
			"primary_score":	999961,
			"second_score":	8346240
		}, {
			"file":	"Python/ast.c",
			"line":	306,
			"primary_score":	999961,
			"second_score":	8346239
		}, {
			"file":	"Python/ast.c",
			"line":	307,
			"primary_score":	999961,
			"second_score":	8344073
		}, {
			"file":	"Python/ast.c",
			"line":	309,
			"primary_score":	999962,
			"second_score":	8344072
		}, {
			"file":	"Python/ast.c",
			"line":	324,
			"primary_score":	999962,
			"second_score":	8344071
		}, {
			"file":	"Python/ast.c",
			"line":	687,
			"primary_score":	999986,
			"second_score":	101864987
		}, {
			"file":	"Python/ast.c",
			"line":	688,
			"primary_score":	999986,
			"second_score":	101864986
		}, {
			"file":	"Python/ast.c",
			"line":	689,
			"primary_score":	999986,
			"second_score":	101864985
		}, {
			"file":	"Python/ast.c",
			"line":	690,
			"primary_score":	999986,
			"second_score":	101864984
		}, {
			"file":	"Python/ast.c",
			"line":	691,
			"primary_score":	999986,
			"second_score":	101864983
		}, {
			"file":	"Python/ast.c",
			"line":	692,
			"primary_score":	999986,
			"second_score":	101864982
		}, {
			"file":	"Python/ast.c",
			"line":	694,
			"primary_score":	999986,
			"second_score":	101864981
		}, {
			"file":	"Python/ast.c",
			"line":	698,
			"primary_score":	999986,
			"second_score":	101864980
		}, {
			"file":	"Python/ast.c",
			"line":	699,
			"primary_score":	999986,
			"second_score":	101864979
		}, {
			"file":	"Python/ast.c",
			"line":	700,
			"primary_score":	999986,
			"second_score":	101864299
		}, {
			"file":	"Python/ast.c",
			"line":	701,
			"primary_score":	999986,
			"second_score":	101864298
		}, {
			"file":	"Python/ast.c",
			"line":	705,
			"primary_score":	999988,
			"second_score":	101864976
		}, {
			"file":	"Python/ast.c",
			"line":	706,
			"primary_score":	999988,
			"second_score":	101864641
		}, {
			"file":	"Python/ast.c",
			"line":	708,
			"primary_score":	999989,
			"second_score":	101864640
		}, {
			"file":	"Python/ast.c",
			"line":	709,
			"primary_score":	999989,
			"second_score":	101864639
		}, {
			"file":	"Python/ast.c",
			"line":	714,
			"primary_score":	999986,
			"second_score":	101864638
		}, {
			"file":	"Python/ast.c",
			"line":	721,
			"primary_score":	999986,
			"second_score":	101864637
		}, {
			"file":	"Python/ast.c",
			"line":	723,
			"primary_score":	999986,
			"second_score":	101864636
		}, {
			"file":	"Python/ast.c",
			"line":	724,
			"primary_score":	999986,
			"second_score":	101864635
		}, {
			"file":	"Python/ast.c",
			"line":	725,
			"primary_score":	999986,
			"second_score":	101864335
		}, {
			"file":	"Python/ast.c",
			"line":	727,
			"primary_score":	999986,
			"second_score":	101864334
		}, {
			"file":	"Python/ast.c",
			"line":	729,
			"primary_score":	999987,
			"second_score":	101864323
		}, {
			"file":	"Python/ast.c",
			"line":	730,
			"primary_score":	999987,
			"second_score":	101864303
		}, {
			"file":	"Python/ast.c",
			"line":	732,
			"primary_score":	999987,
			"second_score":	101864302
		}, {
			"file":	"Python/ast.c",
			"line":	733,
			"primary_score":	999987,
			"second_score":	101864301
		}, {
			"file":	"Python/ast.c",
			"line":	734,
			"primary_score":	999987,
			"second_score":	101864300
		}, {
			"file":	"Python/ast.c",
			"line":	742,
			"primary_score":	999988,
			"second_score":	112075981
		}, {
			"file":	"Python/ast.c",
			"line":	791,
			"primary_score":	999915,
			"second_score":	87974301
		}, {
			"file":	"Python/ast.c",
			"line":	792,
			"primary_score":	999915,
			"second_score":	87974300
		}, {
			"file":	"Python/ast.c",
			"line":	795,
			"primary_score":	999916,
			"second_score":	87974299
		}, {
			"file":	"Python/ast.c",
			"line":	797,
			"primary_score":	999915,
			"second_score":	87974298
		}, {
			"file":	"Python/ast.c",
			"line":	808,
			"primary_score":	999986,
			"second_score":	101865387
		}, {
			"file":	"Python/ast.c",
			"line":	874,
			"primary_score":	999915,
			"second_score":	87973591
		}, {
			"file":	"Python/ast.c",
			"line":	875,
			"primary_score":	999915,
			"second_score":	87973590
		}, {
			"file":	"Python/ast.c",
			"line":	876,
			"primary_score":	999987,
			"second_score":	112076732
		}, {
			"file":	"Python/ast.c",
			"line":	877,
			"primary_score":	999987,
			"second_score":	112076731
		}, {
			"file":	"Python/ast.c",
			"line":	878,
			"primary_score":	999987,
			"second_score":	112076730
		}, {
			"file":	"Python/ast.c",
			"line":	880,
			"primary_score":	999987,
			"second_score":	112075980
		}, {
			"file":	"Python/ast.c",
			"line":	881,
			"primary_score":	999988,
			"second_score":	112075979
		}, {
			"file":	"Python/ast.c",
			"line":	884,
			"primary_score":	999916,
			"second_score":	87973589
		}, {
			"file":	"Python/ast.c",
			"line":	885,
			"primary_score":	999916,
			"second_score":	87973285
		}, {
			"file":	"Python/ast.c",
			"line":	887,
			"primary_score":	999916,
			"second_score":	87973284
		}, {
			"file":	"Python/ast.c",
			"line":	889,
			"primary_score":	999916,
			"second_score":	87973273
		}, {
			"file":	"Python/ast.c",
			"line":	895,
			"primary_score":	999916,
			"second_score":	87973272
		}, {
			"file":	"Python/ast.c",
			"line":	896,
			"primary_score":	999916,
			"second_score":	87973271
		}, {
			"file":	"Python/ast.c",
			"line":	898,
			"primary_score":	999992,
			"second_score":	101864989
		}, {
			"file":	"Python/ast.c",
			"line":	899,
			"primary_score":	999992,
			"second_score":	101864988
		}, {
			"file":	"Python/ast.c",
			"line":	901,
			"primary_score":	999992,
			"second_score":	101864297
		}, {
			"file":	"Python/ast.c",
			"line":	902,
			"primary_score":	999993,
			"second_score":	101864296
		}, {
			"file":	"Python/ast.c",
			"line":	905,
			"primary_score":	999915,
			"second_score":	87973270
		}, {
			"file":	"Python/ast.c",
			"line":	954,
			"primary_score":	999934,
			"second_score":	156165571
		}, {
			"file":	"Python/ast.c",
			"line":	955,
			"primary_score":	999934,
			"second_score":	156165244
		}, {
			"file":	"Python/ast.c",
			"line":	957,
			"primary_score":	999934,
			"second_score":	156165243
		}, {
			"file":	"Python/ast.c",
			"line":	958,
			"primary_score":	999934,
			"second_score":	156165217
		}, {
			"file":	"Python/ast.c",
			"line":	984,
			"primary_score":	999943,
			"second_score":	151323143
		}, {
			"file":	"Python/ast.c",
			"line":	992,
			"primary_score":	999943,
			"second_score":	151323142
		}, {
			"file":	"Python/ast.c",
			"line":	993,
			"primary_score":	999943,
			"second_score":	151322723
		}, {
			"file":	"Python/ast.c",
			"line":	995,
			"primary_score":	999943,
			"second_score":	151322722
		}, {
			"file":	"Python/ast.c",
			"line":	1043,
			"primary_score":	999999,
			"second_score":	62015491
		}, {
			"file":	"Python/ast.c",
			"line":	1044,
			"primary_score":	999999,
			"second_score":	62015192
		}, {
			"file":	"Python/ast.c",
			"line":	1046,
			"primary_score":	999999,
			"second_score":	62015191
		}, {
			"file":	"Python/ast.c",
			"line":	1091,
			"primary_score":	999923,
			"second_score":	55255572
		}, {
			"file":	"Python/ast.c",
			"line":	1092,
			"primary_score":	999923,
			"second_score":	55255571
		}, {
			"file":	"Python/ast.c",
			"line":	1094,
			"primary_score":	999923,
			"second_score":	55255570
		}, {
			"file":	"Python/ast.c",
			"line":	1095,
			"primary_score":	999955,
			"second_score":	171567049
		}, {
			"file":	"Python/ast.c",
			"line":	1097,
			"primary_score":	999955,
			"second_score":	171567024
		}, {
			"file":	"Python/ast.c",
			"line":	1099,
			"primary_score":	999955,
			"second_score":	171567023
		}, {
			"file":	"Python/ast.c",
			"line":	1100,
			"primary_score":	999955,
			"second_score":	171566067
		}, {
			"file":	"Python/ast.c",
			"line":	1104,
			"primary_score":	999942,
			"second_score":	55255569
		}, {
			"file":	"Python/ast.c",
			"line":	1105,
			"primary_score":	999942,
			"second_score":	55255190
		}, {
			"file":	"Python/ast.c",
			"line":	1107,
			"primary_score":	999942,
			"second_score":	55255189
		}, {
			"file":	"Python/ast.c",
			"line":	1108,
			"primary_score":	999942,
			"second_score":	55252809
		}, {
			"file":	"Python/ast.c",
			"line":	1112,
			"primary_score":	999923,
			"second_score":	55252808
		}, {
			"file":	"Python/ast.c",
			"line":	1119,
			"primary_score":	999976,
			"second_score":	62048758
		}, {
			"file":	"Python/ast.c",
			"line":	1121,
			"primary_score":	999976,
			"second_score":	62048757
		}, {
			"file":	"Python/ast.c",
			"line":	1122,
			"primary_score":	999976,
			"second_score":	62048756
		}, {
			"file":	"Python/ast.c",
			"line":	1123,
			"primary_score":	999976,
			"second_score":	62048390
		}, {
			"file":	"Python/ast.c",
			"line":	1125,
			"primary_score":	999976,
			"second_score":	62048389
		}, {
			"file":	"Python/ast.c",
			"line":	1126,
			"primary_score":	999976,
			"second_score":	62048058
		}, {
			"file":	"Python/ast.c",
			"line":	1128,
			"primary_score":	999976,
			"second_score":	62048057
		}, {
			"file":	"Python/ast.c",
			"line":	1129,
			"primary_score":	999976,
			"second_score":	62047646
		}, {
			"file":	"Python/ast.c",
			"line":	1131,
			"primary_score":	999976,
			"second_score":	62047645
		}, {
			"file":	"Python/ast.c",
			"line":	1150,
			"primary_score":	999964,
			"second_score":	111653011
		}, {
			"file":	"Python/ast.c",
			"line":	1153,
			"primary_score":	999964,
			"second_score":	111653010
		}, {
			"file":	"Python/ast.c",
			"line":	1155,
			"primary_score":	999964,
			"second_score":	111653009
		}, {
			"file":	"Python/ast.c",
			"line":	1156,
			"primary_score":	999964,
			"second_score":	111653008
		}, {
			"file":	"Python/ast.c",
			"line":	1158,
			"primary_score":	999970,
			"second_score":	111653007
		}, {
			"file":	"Python/ast.c",
			"line":	1159,
			"primary_score":	999970,
			"second_score":	111653006
		}, {
			"file":	"Python/ast.c",
			"line":	1164,
			"primary_score":	999970,
			"second_score":	111653005
		}, {
			"file":	"Python/ast.c",
			"line":	1181,
			"primary_score":	999964,
			"second_score":	111652216
		}, {
			"file":	"Python/ast.c",
			"line":	1183,
			"primary_score":	999964,
			"second_score":	111652215
		}, {
			"file":	"Python/ast.c",
			"line":	1184,
			"primary_score":	999964,
			"second_score":	111652214
		}, {
			"file":	"Python/ast.c",
			"line":	1185,
			"primary_score":	999964,
			"second_score":	111652213
		}, {
			"file":	"Python/ast.c",
			"line":	1187,
			"primary_score":	999970,
			"second_score":	111652212
		}, {
			"file":	"Python/ast.c",
			"line":	1188,
			"primary_score":	999970,
			"second_score":	111652211
		}, {
			"file":	"Python/ast.c",
			"line":	1189,
			"primary_score":	999970,
			"second_score":	111652210
		}, {
			"file":	"Python/ast.c",
			"line":	1190,
			"primary_score":	999970,
			"second_score":	111652209
		}, {
			"file":	"Python/ast.c",
			"line":	1191,
			"primary_score":	999970,
			"second_score":	111652208
		}, {
			"file":	"Python/ast.c",
			"line":	1239,
			"primary_score":	999964,
			"second_score":	111652220
		}, {
			"file":	"Python/ast.c",
			"line":	1240,
			"primary_score":	999964,
			"second_score":	111652219
		}, {
			"file":	"Python/ast.c",
			"line":	1242,
			"primary_score":	999964,
			"second_score":	111652218
		}, {
			"file":	"Python/ast.c",
			"line":	1243,
			"primary_score":	999964,
			"second_score":	111652217
		}, {
			"file":	"Python/ast.c",
			"line":	1244,
			"primary_score":	999964,
			"second_score":	111652207
		}, {
			"file":	"Python/ast.c",
			"line":	1247,
			"primary_score":	999964,
			"second_score":	111652206
		}, {
			"file":	"Python/ast.c",
			"line":	1248,
			"primary_score":	999964,
			"second_score":	111652183
		}, {
			"file":	"Python/ast.c",
			"line":	1251,
			"primary_score":	999964,
			"second_score":	111652182
		}, {
			"file":	"Python/ast.c",
			"line":	1252,
			"primary_score":	999970,
			"second_score":	111652181
		}, {
			"file":	"Python/ast.c",
			"line":	1253,
			"primary_score":	999970,
			"second_score":	111652180
		}, {
			"file":	"Python/ast.c",
			"line":	1254,
			"primary_score":	999970,
			"second_score":	111652179
		}, {
			"file":	"Python/ast.c",
			"line":	1256,
			"primary_score":	999970,
			"second_score":	111652178
		}, {
			"file":	"Python/ast.c",
			"line":	1257,
			"primary_score":	999970,
			"second_score":	111651048
		}, {
			"file":	"Python/ast.c",
			"line":	1259,
			"primary_score":	999970,
			"second_score":	111651047
		}, {
			"file":	"Python/ast.c",
			"line":	1260,
			"primary_score":	999970,
			"second_score":	111651046
		}, {
			"file":	"Python/ast.c",
			"line":	1264,
			"primary_score":	999964,
			"second_score":	111651045
		}, {
			"file":	"Python/ast.c",
			"line":	1266,
			"primary_score":	999964,
			"second_score":	111651044
		}, {
			"file":	"Python/ast.c",
			"line":	1391,
			"primary_score":	999878,
			"second_score":	82609790
		}, {
			"file":	"Python/ast.c",
			"line":	1416,
			"primary_score":	999983,
			"second_score":	111653320
		}, {
			"file":	"Python/ast.c",
			"line":	1552,
			"primary_score":	999979,
			"second_score":	128780073
		}, {
			"file":	"Python/ast.c",
			"line":	1553,
			"primary_score":	999980,
			"second_score":	128780072
		}, {
			"file":	"Python/ast.c",
			"line":	1554,
			"primary_score":	999980,
			"second_score":	128780071
		}, {
			"file":	"Python/ast.c",
			"line":	1555,
			"primary_score":	999980,
			"second_score":	128780070
		}, {
			"file":	"Python/ast.c",
			"line":	1556,
			"primary_score":	999980,
			"second_score":	128779930
		}, {
			"file":	"Python/ast.c",
			"line":	1734,
			"primary_score":	999945,
			"second_score":	53042358
		}, {
			"file":	"Python/ast.c",
			"line":	1743,
			"primary_score":	999945,
			"second_score":	53042356
		}, {
			"file":	"Python/ast.c",
			"line":	1744,
			"primary_score":	999945,
			"second_score":	53042240
		}, {
			"file":	"Python/ast.c",
			"line":	1746,
			"primary_score":	999945,
			"second_score":	53042239
		}, {
			"file":	"Python/ast.c",
			"line":	1747,
			"primary_score":	999945,
			"second_score":	53042213
		}, {
			"file":	"Python/ast.c",
			"line":	1749,
			"primary_score":	999945,
			"second_score":	53042212
		}, {
			"file":	"Python/ast.c",
			"line":	1801,
			"primary_score":	999923,
			"second_score":	55255573
		}, {
			"file":	"Python/ast.c",
			"line":	1803,
			"primary_score":	999976,
			"second_score":	62048759
		}, {
			"file":	"Python/ast.c",
			"line":	2258,
			"primary_score":	999995,
			"second_score":	156487352
		}, {
			"file":	"Python/ast.c",
			"line":	2259,
			"primary_score":	999995,
			"second_score":	156487042
		}, {
			"file":	"Python/ast.c",
			"line":	2312,
			"primary_score":	999965,
			"second_score":	115911454
		}, {
			"file":	"Python/ast.c",
			"line":	2313,
			"primary_score":	999965,
			"second_score":	115911453
		}, {
			"file":	"Python/ast.c",
			"line":	2314,
			"primary_score":	999965,
			"second_score":	115911165
		}, {
			"file":	"Python/ast.c",
			"line":	2316,
			"primary_score":	999965,
			"second_score":	115911164
		}, {
			"file":	"Python/ast.c",
			"line":	2317,
			"primary_score":	999965,
			"second_score":	115911163
		}, {
			"file":	"Python/ast.c",
			"line":	2318,
			"primary_score":	999965,
			"second_score":	115910918
		}, {
			"file":	"Python/ast.c",
			"line":	2320,
			"primary_score":	999965,
			"second_score":	115910917
		}, {
			"file":	"Python/ast.c",
			"line":	2322,
			"primary_score":	999965,
			"second_score":	115910906
		}, {
			"file":	"Python/ast.c",
			"line":	2375,
			"primary_score":	999981,
			"second_score":	149392853
		}, {
			"file":	"Python/ast.c",
			"line":	2376,
			"primary_score":	999981,
			"second_score":	149392830
		}, {
			"file":	"Python/ast.c",
			"line":	2434,
			"primary_score":	999986,
			"second_score":	115893243
		}, {
			"file":	"Python/ast.c",
			"line":	2438,
			"primary_score":	999986,
			"second_score":	115893242
		}, {
			"file":	"Python/ast.c",
			"line":	2439,
			"primary_score":	999986,
			"second_score":	115941771
		}, {
			"file":	"Python/ast.c",
			"line":	2441,
			"primary_score":	999986,
			"second_score":	115893241
		}, {
			"file":	"Python/ast.c",
			"line":	2448,
			"primary_score":	999981,
			"second_score":	149392905
		}, {
			"file":	"Python/ast.c",
			"line":	2449,
			"primary_score":	999981,
			"second_score":	149392904
		}, {
			"file":	"Python/ast.c",
			"line":	2453,
			"primary_score":	999979,
			"second_score":	251997489
		}, {
			"file":	"Python/ast.c",
			"line":	2454,
			"primary_score":	999979,
			"second_score":	251997488
		}, {
			"file":	"Python/ast.c",
			"line":	2476,
			"primary_score":	999981,
			"second_score":	149392878
		}, {
			"file":	"Python/ast.c",
			"line":	2477,
			"primary_score":	999981,
			"second_score":	149392810
		}, {
			"file":	"Python/ast.c",
			"line":	2479,
			"primary_score":	999981,
			"second_score":	149392809
		}, {
			"file":	"Python/ast.c",
			"line":	2504,
			"primary_score":	999970,
			"second_score":	156082470
		}, {
			"file":	"Python/ast.c",
			"line":	2505,
			"primary_score":	999970,
			"second_score":	156082469
		}, {
			"file":	"Python/ast.c",
			"line":	2506,
			"primary_score":	999970,
			"second_score":	156082468
		}, {
			"file":	"Python/ast.c",
			"line":	2508,
			"primary_score":	999970,
			"second_score":	156082467
		}, {
			"file":	"Python/ast.c",
			"line":	2509,
			"primary_score":	999970,
			"second_score":	156082466
		}, {
			"file":	"Python/ast.c",
			"line":	2510,
			"primary_score":	999970,
			"second_score":	156082443
		}, {
			"file":	"Python/ast.c",
			"line":	2512,
			"primary_score":	999970,
			"second_score":	156082442
		}, {
			"file":	"Python/ast.c",
			"line":	2513,
			"primary_score":	999970,
			"second_score":	156082441
		}, {
			"file":	"Python/ast.c",
			"line":	2514,
			"primary_score":	999970,
			"second_score":	156082104
		}, {
			"file":	"Python/ast.c",
			"line":	2516,
			"primary_score":	999970,
			"second_score":	156082103
		}, {
			"file":	"Python/ast.c",
			"line":	2518,
			"primary_score":	999970,
			"second_score":	156082102
		}, {
			"file":	"Python/ast.c",
			"line":	2553,
			"primary_score":	999978,
			"second_score":	101504036
		}, {
			"file":	"Python/ast.c",
			"line":	2554,
			"primary_score":	999978,
			"second_score":	101504035
		}, {
			"file":	"Python/ast.c",
			"line":	2556,
			"primary_score":	999978,
			"second_score":	101504034
		}, {
			"file":	"Python/ast.c",
			"line":	2557,
			"primary_score":	999978,
			"second_score":	101503657
		}, {
			"file":	"Python/ast.c",
			"line":	2559,
			"primary_score":	999978,
			"second_score":	101503656
		}, {
			"file":	"Python/ast.c",
			"line":	2560,
			"primary_score":	999978,
			"second_score":	101503054
		}, {
			"file":	"Python/ast.c",
			"line":	2563,
			"primary_score":	999978,
			"second_score":	101503053
		}, {
			"file":	"Python/ast.c",
			"line":	2587,
			"primary_score":	999907,
			"second_score":	62025505
		}, {
			"file":	"Python/ast.c",
			"line":	2591,
			"primary_score":	999907,
			"second_score":	62025504
		}, {
			"file":	"Python/ast.c",
			"line":	2592,
			"primary_score":	999907,
			"second_score":	62025503
		}, {
			"file":	"Python/ast.c",
			"line":	2595,
			"primary_score":	999907,
			"second_score":	62025502
		}, {
			"file":	"Python/ast.c",
			"line":	2596,
			"primary_score":	999907,
			"second_score":	62025501
		}, {
			"file":	"Python/ast.c",
			"line":	2597,
			"primary_score":	999907,
			"second_score":	62025500
		}, {
			"file":	"Python/ast.c",
			"line":	2598,
			"primary_score":	999907,
			"second_score":	62025323
		}, {
			"file":	"Python/ast.c",
			"line":	2600,
			"primary_score":	999907,
			"second_score":	62025322
		}, {
			"file":	"Python/ast.c",
			"line":	2809,
			"primary_score":	999975,
			"second_score":	111712831
		}, {
			"file":	"Python/ast.c",
			"line":	2810,
			"primary_score":	999975,
			"second_score":	111711182
		}, {
			"file":	"Python/ast.c",
			"line":	2958,
			"primary_score":	999980,
			"second_score":	101459529
		}, {
			"file":	"Python/ast.c",
			"line":	2959,
			"primary_score":	999980,
			"second_score":	101459506
		}, {
			"file":	"Python/ast.c",
			"line":	2961,
			"primary_score":	999980,
			"second_score":	101459505
		}, {
			"file":	"Python/ast.c",
			"line":	3212,
			"primary_score":	999972,
			"second_score":	56486613
		}, {
			"file":	"Python/ast.c",
			"line":	3213,
			"primary_score":	999972,
			"second_score":	56486612
		}, {
			"file":	"Python/ast.c",
			"line":	3214,
			"primary_score":	999972,
			"second_score":	56486611
		}, {
			"file":	"Python/ast.c",
			"line":	3216,
			"primary_score":	999972,
			"second_score":	56486610
		}, {
			"file":	"Python/ast.c",
			"line":	3217,
			"primary_score":	999972,
			"second_score":	56486609
		}, {
			"file":	"Python/ast.c",
			"line":	3218,
			"primary_score":	999972,
			"second_score":	56486608
		}, {
			"file":	"Python/ast.c",
			"line":	3219,
			"primary_score":	999972,
			"second_score":	56486461
		}, {
			"file":	"Python/ast.c",
			"line":	3221,
			"primary_score":	999972,
			"second_score":	56486460
		}, {
			"file":	"Python/ast.c",
			"line":	3222,
			"primary_score":	999972,
			"second_score":	56485496
		}, {
			"file":	"Python/ast.c",
			"line":	3223,
			"primary_score":	999972,
			"second_score":	56485486
		}, {
			"file":	"Python/ast.c",
			"line":	3256,
			"primary_score":	999972,
			"second_score":	56486617
		}, {
			"file":	"Python/ast.c",
			"line":	3257,
			"primary_score":	999972,
			"second_score":	56486616
		}, {
			"file":	"Python/ast.c",
			"line":	3258,
			"primary_score":	999972,
			"second_score":	56486615
		}, {
			"file":	"Python/ast.c",
			"line":	3259,
			"primary_score":	999972,
			"second_score":	56486614
		}, {
			"file":	"Python/ast.c",
			"line":	3260,
			"primary_score":	999972,
			"second_score":	56485485
		}, {
			"file":	"Python/ast.c",
			"line":	3264,
			"primary_score":	999972,
			"second_score":	56485484
		}, {
			"file":	"Python/ast.c",
			"line":	3265,
			"primary_score":	999972,
			"second_score":	56485483
		}, {
			"file":	"Python/ast.c",
			"line":	3266,
			"primary_score":	999972,
			"second_score":	56485482
		}, {
			"file":	"Python/ast.c",
			"line":	3267,
			"primary_score":	999972,
			"second_score":	56485481
		}, {
			"file":	"Python/ast.c",
			"line":	3268,
			"primary_score":	999972,
			"second_score":	56485480
		}, {
			"file":	"Python/ast.c",
			"line":	3273,
			"primary_score":	999972,
			"second_score":	56485479
		}, {
			"file":	"Python/ast.c",
			"line":	3276,
			"primary_score":	999972,
			"second_score":	56485478
		}, {
			"file":	"Python/ast.c",
			"line":	3277,
			"primary_score":	999972,
			"second_score":	56485477
		}, {
			"file":	"Python/ast.c",
			"line":	3307,
			"primary_score":	999878,
			"second_score":	82609844
		}, {
			"file":	"Python/ast.c",
			"line":	3308,
			"primary_score":	999878,
			"second_score":	82609843
		}, {
			"file":	"Python/ast.c",
			"line":	3343,
			"primary_score":	999878,
			"second_score":	82609833
		}, {
			"file":	"Python/ast.c",
			"line":	3344,
			"primary_score":	999878,
			"second_score":	82609832
		}, {
			"file":	"Python/ast.c",
			"line":	3345,
			"primary_score":	999878,
			"second_score":	82609830
		}, {
			"file":	"Python/ast.c",
			"line":	3363,
			"primary_score":	999900,
			"second_score":	82609825
		}, {
			"file":	"Python/ast.c",
			"line":	3370,
			"primary_score":	999915,
			"second_score":	101685431
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	332,
			"primary_score":	999736,
			"second_score":	59876380
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	333,
			"primary_score":	999736,
			"second_score":	59876379
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	334,
			"primary_score":	999736,
			"second_score":	59876378
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	336,
			"primary_score":	999736,
			"second_score":	59876377
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	339,
			"primary_score":	999736,
			"second_score":	59876374
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	343,
			"primary_score":	999736,
			"second_score":	59876356
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	344,
			"primary_score":	999736,
			"second_score":	59876301
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	348,
			"primary_score":	999736,
			"second_score":	59876300
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	349,
			"primary_score":	999736,
			"second_score":	59876248
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	353,
			"primary_score":	999736,
			"second_score":	59876247
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	354,
			"primary_score":	999736,
			"second_score":	59876246
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	355,
			"primary_score":	999736,
			"second_score":	59876245
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	357,
			"primary_score":	999736,
			"second_score":	59876244
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	363,
			"primary_score":	999736,
			"second_score":	59786184
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	364,
			"primary_score":	999736,
			"second_score":	59786174
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	365,
			"primary_score":	999736,
			"second_score":	59786169
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	366,
			"primary_score":	999736,
			"second_score":	59786123
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	380,
			"primary_score":	999736,
			"second_score":	59786819
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	381,
			"primary_score":	999736,
			"second_score":	59786818
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	382,
			"primary_score":	999736,
			"second_score":	59786817
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	383,
			"primary_score":	999736,
			"second_score":	59786816
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	385,
			"primary_score":	999736,
			"second_score":	59786815
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	386,
			"primary_score":	999736,
			"second_score":	59786814
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	387,
			"primary_score":	999736,
			"second_score":	59786813
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	388,
			"primary_score":	999736,
			"second_score":	59786289
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	389,
			"primary_score":	999736,
			"second_score":	59786288
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	391,
			"primary_score":	999736,
			"second_score":	59788618
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	394,
			"primary_score":	999736,
			"second_score":	59788617
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	395,
			"primary_score":	999736,
			"second_score":	59788616
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	397,
			"primary_score":	999736,
			"second_score":	59786834
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	401,
			"primary_score":	999736,
			"second_score":	59786833
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	402,
			"primary_score":	999736,
			"second_score":	59786829
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	404,
			"primary_score":	999736,
			"second_score":	59786826
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	405,
			"primary_score":	999736,
			"second_score":	59786825
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	406,
			"primary_score":	999736,
			"second_score":	59788634
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	535,
			"primary_score":	999934,
			"second_score":	8359465
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	536,
			"primary_score":	999934,
			"second_score":	8359464
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	537,
			"primary_score":	999934,
			"second_score":	8359463
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	538,
			"primary_score":	999934,
			"second_score":	8359462
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	539,
			"primary_score":	999934,
			"second_score":	8359461
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	540,
			"primary_score":	999934,
			"second_score":	8359460
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	541,
			"primary_score":	999934,
			"second_score":	8359459
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	542,
			"primary_score":	999934,
			"second_score":	8359458
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	543,
			"primary_score":	999934,
			"second_score":	8359457
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	544,
			"primary_score":	999934,
			"second_score":	8359456
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	545,
			"primary_score":	999934,
			"second_score":	8359455
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	546,
			"primary_score":	999934,
			"second_score":	8359454
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	548,
			"primary_score":	999934,
			"second_score":	8359453
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	549,
			"primary_score":	999934,
			"second_score":	8359452
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	551,
			"primary_score":	999934,
			"second_score":	8359451
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	558,
			"primary_score":	999934,
			"second_score":	8359043
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	559,
			"primary_score":	999934,
			"second_score":	8359042
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	561,
			"primary_score":	999934,
			"second_score":	8359041
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	570,
			"primary_score":	999934,
			"second_score":	8359040
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	576,
			"primary_score":	999934,
			"second_score":	8359039
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	577,
			"primary_score":	999960,
			"second_score":	8359038
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	580,
			"primary_score":	999934,
			"second_score":	8359014
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	582,
			"primary_score":	999960,
			"second_score":	8359011
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	584,
			"primary_score":	999962,
			"second_score":	8359008
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	585,
			"primary_score":	999963,
			"second_score":	8359005
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	592,
			"primary_score":	999934,
			"second_score":	8359004
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	593,
			"primary_score":	999934,
			"second_score":	8358656
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	595,
			"primary_score":	999934,
			"second_score":	8358655
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	617,
			"primary_score":	999934,
			"second_score":	8358654
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	618,
			"primary_score":	999934,
			"second_score":	8358495
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	621,
			"primary_score":	999934,
			"second_score":	8358494
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	622,
			"primary_score":	999934,
			"second_score":	8332171
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	627,
			"primary_score":	999995,
			"second_score":	8332169
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	628,
			"primary_score":	999934,
			"second_score":	8332168
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	689,
			"primary_score":	999960,
			"second_score":	49159048
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	690,
			"primary_score":	999960,
			"second_score":	49159047
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	691,
			"primary_score":	999960,
			"second_score":	49159046
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	692,
			"primary_score":	999960,
			"second_score":	49159045
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	694,
			"primary_score":	999960,
			"second_score":	49159044
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	696,
			"primary_score":	999960,
			"second_score":	49159028
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	700,
			"primary_score":	999960,
			"second_score":	49159027
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	706,
			"primary_score":	999960,
			"second_score":	49159026
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	707,
			"primary_score":	999968,
			"second_score":	49159025
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	708,
			"primary_score":	999968,
			"second_score":	49159005
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	709,
			"primary_score":	999968,
			"second_score":	49159004
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	714,
			"primary_score":	999960,
			"second_score":	49158137
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	721,
			"primary_score":	999960,
			"second_score":	49158136
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	727,
			"primary_score":	999960,
			"second_score":	49157907
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	736,
			"primary_score":	999963,
			"second_score":	49157906
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	737,
			"primary_score":	999963,
			"second_score":	49157905
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	738,
			"primary_score":	999963,
			"second_score":	49157737
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	741,
			"primary_score":	999963,
			"second_score":	49157736
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	744,
			"primary_score":	999963,
			"second_score":	49157735
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	745,
			"primary_score":	999963,
			"second_score":	49157711
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	746,
			"primary_score":	999963,
			"second_score":	49136966
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	747,
			"primary_score":	999963,
			"second_score":	49136963
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	1526,
			"primary_score":	999986,
			"second_score":	7739068
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2105,
			"primary_score":	999964,
			"second_score":	7826831
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2106,
			"primary_score":	999964,
			"second_score":	7826830
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2107,
			"primary_score":	999964,
			"second_score":	7826775
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2115,
			"primary_score":	999964,
			"second_score":	7826774
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2125,
			"primary_score":	999964,
			"second_score":	7826748
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2126,
			"primary_score":	999964,
			"second_score":	7826747
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2147,
			"primary_score":	999964,
			"second_score":	7824053
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2148,
			"primary_score":	999968,
			"second_score":	7823945
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2163,
			"primary_score":	999964,
			"second_score":	7824117
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2164,
			"primary_score":	999964,
			"second_score":	7824116
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2165,
			"primary_score":	999964,
			"second_score":	7824115
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2166,
			"primary_score":	999964,
			"second_score":	7824114
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2167,
			"primary_score":	999964,
			"second_score":	7824113
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2168,
			"primary_score":	999964,
			"second_score":	7824112
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2170,
			"primary_score":	999964,
			"second_score":	7824111
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2172,
			"primary_score":	999964,
			"second_score":	7824110
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2173,
			"primary_score":	999964,
			"second_score":	7824109
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2174,
			"primary_score":	999964,
			"second_score":	7824108
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2175,
			"primary_score":	999964,
			"second_score":	7824107
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2176,
			"primary_score":	999964,
			"second_score":	7824106
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2177,
			"primary_score":	999964,
			"second_score":	7824093
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2178,
			"primary_score":	999969,
			"second_score":	7824092
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2179,
			"primary_score":	999969,
			"second_score":	7824089
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2181,
			"primary_score":	999964,
			"second_score":	7825066
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2182,
			"primary_score":	999964,
			"second_score":	7825065
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2183,
			"primary_score":	999964,
			"second_score":	7825064
		}, {
			"file":	"Python/bltinmodule.c",
			"line":	2199,
			"primary_score":	999964,
			"second_score":	7825061
		}, {
			"file":	"Python/ceval.c",
			"line":	1216,
			"primary_score":	999976,
			"second_score":	7393573
		}, {
			"file":	"Python/ceval.c",
			"line":	1561,
			"primary_score":	999974,
			"second_score":	5645353
		}, {
			"file":	"Python/ceval.c",
			"line":	1902,
			"primary_score":	999827,
			"second_score":	7677386
		}, {
			"file":	"Python/ceval.c",
			"line":	1903,
			"primary_score":	999827,
			"second_score":	7677381
		}, {
			"file":	"Python/ceval.c",
			"line":	1904,
			"primary_score":	999827,
			"second_score":	7677380
		}, {
			"file":	"Python/ceval.c",
			"line":	1905,
			"primary_score":	999827,
			"second_score":	7677081
		}, {
			"file":	"Python/ceval.c",
			"line":	1992,
			"primary_score":	999994,
			"second_score":	7680725
		}, {
			"file":	"Python/ceval.c",
			"line":	2641,
			"primary_score":	999827,
			"second_score":	7677453
		}, {
			"file":	"Python/ceval.c",
			"line":	2643,
			"primary_score":	999827,
			"second_score":	7677452
		}, {
			"file":	"Python/ceval.c",
			"line":	2709,
			"primary_score":	999820,
			"second_score":	7653827
		}, {
			"file":	"Python/ceval.c",
			"line":	2710,
			"primary_score":	999820,
			"second_score":	7653826
		}, {
			"file":	"Python/ceval.c",
			"line":	3362,
			"primary_score":	999866,
			"second_score":	7654456
		}, {
			"file":	"Python/ceval.c",
			"line":	3363,
			"primary_score":	999867,
			"second_score":	7654455
		}, {
			"file":	"Python/ceval.c",
			"line":	3364,
			"primary_score":	999867,
			"second_score":	7654454
		}, {
			"file":	"Python/ceval.c",
			"line":	3365,
			"primary_score":	999867,
			"second_score":	7654453
		}, {
			"file":	"Python/ceval.c",
			"line":	3435,
			"primary_score":	999997,
			"second_score":	7681436
		}, {
			"file":	"Python/ceval.c",
			"line":	3436,
			"primary_score":	999997,
			"second_score":	7681420
		}, {
			"file":	"Python/ceval.c",
			"line":	3440,
			"primary_score":	999997,
			"second_score":	7680765
		}, {
			"file":	"Python/ceval.c",
			"line":	3484,
			"primary_score":	999993,
			"second_score":	7680764
		}, {
			"file":	"Python/ceval.c",
			"line":	3485,
			"primary_score":	999993,
			"second_score":	7680762
		}, {
			"file":	"Python/ceval.c",
			"line":	3486,
			"primary_score":	999993,
			"second_score":	7680726
		}, {
			"file":	"Python/ceval.c",
			"line":	3949,
			"primary_score":	999882,
			"second_score":	7654180
		}, {
			"file":	"Python/ceval.c",
			"line":	3971,
			"primary_score":	999979,
			"second_score":	3308811
		}, {
			"file":	"Python/ceval.c",
			"line":	3972,
			"primary_score":	999981,
			"second_score":	3308692
		}, {
			"file":	"Python/ceval.c",
			"line":	4146,
			"primary_score":	999972,
			"second_score":	3308814
		}, {
			"file":	"Python/ceval.c",
			"line":	4147,
			"primary_score":	999972,
			"second_score":	3308584
		}, {
			"file":	"Python/ceval.c",
			"line":	4177,
			"primary_score":	999967,
			"second_score":	3304855
		}, {
			"file":	"Python/codecs.c",
			"line":	776,
			"primary_score":	999981,
			"second_score":	151933977
		}, {
			"file":	"Python/codecs.c",
			"line":	777,
			"primary_score":	999981,
			"second_score":	151933976
		}, {
			"file":	"Python/codecs.c",
			"line":	778,
			"primary_score":	999981,
			"second_score":	151933975
		}, {
			"file":	"Python/codecs.c",
			"line":	779,
			"primary_score":	999981,
			"second_score":	151933974
		}, {
			"file":	"Python/codecs.c",
			"line":	781,
			"primary_score":	999981,
			"second_score":	151933958
		}, {
			"file":	"Python/codecs.c",
			"line":	783,
			"primary_score":	999981,
			"second_score":	151933942
		}, {
			"file":	"Python/codecs.c",
			"line":	785,
			"primary_score":	999981,
			"second_score":	151933936
		}, {
			"file":	"Python/codecs.c",
			"line":	786,
			"primary_score":	999981,
			"second_score":	151933935
		}, {
			"file":	"Python/codecs.c",
			"line":	787,
			"primary_score":	999981,
			"second_score":	151933904
		}, {
			"file":	"Python/codecs.c",
			"line":	791,
			"primary_score":	999981,
			"second_score":	151933903
		}, {
			"file":	"Python/codecs.c",
			"line":	792,
			"primary_score":	999981,
			"second_score":	151933900
		}, {
			"file":	"Python/codecs.c",
			"line":	793,
			"primary_score":	999981,
			"second_score":	151933899
		}, {
			"file":	"Python/codecs.c",
			"line":	794,
			"primary_score":	999981,
			"second_score":	151933898
		}, {
			"file":	"Python/codecs.c",
			"line":	801,
			"primary_score":	999981,
			"second_score":	151933897
		}, {
			"file":	"Python/codecs.c",
			"line":	802,
			"primary_score":	999981,
			"second_score":	151933896
		}, {
			"file":	"Python/codecs.c",
			"line":	803,
			"primary_score":	999981,
			"second_score":	151933895
		}, {
			"file":	"Python/codecs.c",
			"line":	805,
			"primary_score":	999981,
			"second_score":	151933894
		}, {
			"file":	"Python/codecs.c",
			"line":	806,
			"primary_score":	999981,
			"second_score":	151933794
		}, {
			"file":	"Python/codecs.c",
			"line":	807,
			"primary_score":	999981,
			"second_score":	151933791
		}, {
			"file":	"Python/codecs.c",
			"line":	808,
			"primary_score":	999981,
			"second_score":	151933788
		}, {
			"file":	"Python/compile.c",
			"line":	223,
			"primary_score":	999982,
			"second_score":	123821642
		}, {
			"file":	"Python/compile.c",
			"line":	225,
			"primary_score":	999982,
			"second_score":	123821641
		}, {
			"file":	"Python/compile.c",
			"line":	229,
			"primary_score":	999982,
			"second_score":	123821640
		}, {
			"file":	"Python/compile.c",
			"line":	231,
			"primary_score":	999982,
			"second_score":	123821636
		}, {
			"file":	"Python/compile.c",
			"line":	232,
			"primary_score":	999982,
			"second_score":	123821635
		}, {
			"file":	"Python/compile.c",
			"line":	234,
			"primary_score":	999982,
			"second_score":	123821634
		}, {
			"file":	"Python/compile.c",
			"line":	235,
			"primary_score":	999982,
			"second_score":	123821570
		}, {
			"file":	"Python/compile.c",
			"line":	238,
			"primary_score":	999982,
			"second_score":	123821569
		}, {
			"file":	"Python/compile.c",
			"line":	239,
			"primary_score":	999982,
			"second_score":	123821568
		}, {
			"file":	"Python/compile.c",
			"line":	240,
			"primary_score":	999982,
			"second_score":	123821567
		}, {
			"file":	"Python/compile.c",
			"line":	241,
			"primary_score":	999982,
			"second_score":	123821563
		}, {
			"file":	"Python/compile.c",
			"line":	242,
			"primary_score":	999982,
			"second_score":	123821559
		}, {
			"file":	"Python/compile.c",
			"line":	280,
			"primary_score":	999720,
			"second_score":	61654301
		}, {
			"file":	"Python/compile.c",
			"line":	281,
			"primary_score":	999720,
			"second_score":	61654300
		}, {
			"file":	"Python/compile.c",
			"line":	852,
			"primary_score":	999980,
			"second_score":	122376888
		}, {
			"file":	"Python/compile.c",
			"line":	986,
			"primary_score":	999988,
			"second_score":	123870698
		}, {
			"file":	"Python/compile.c",
			"line":	1152,
			"primary_score":	999980,
			"second_score":	162765401
		}, {
			"file":	"Python/compile.c",
			"line":	1189,
			"primary_score":	999964,
			"second_score":	8337907
		}, {
			"file":	"Python/compile.c",
			"line":	1190,
			"primary_score":	999964,
			"second_score":	8335387
		}, {
			"file":	"Python/compile.c",
			"line":	1191,
			"primary_score":	999964,
			"second_score":	8335386
		}, {
			"file":	"Python/compile.c",
			"line":	1193,
			"primary_score":	999962,
			"second_score":	49142373
		}, {
			"file":	"Python/compile.c",
			"line":	1194,
			"primary_score":	999962,
			"second_score":	49140981
		}, {
			"file":	"Python/compile.c",
			"line":	1195,
			"primary_score":	999962,
			"second_score":	49140980
		}, {
			"file":	"Python/compile.c",
			"line":	1279,
			"primary_score":	999952,
			"second_score":	153054363
		}, {
			"file":	"Python/compile.c",
			"line":	1317,
			"primary_score":	999985,
			"second_score":	99042275
		}, {
			"file":	"Python/compile.c",
			"line":	1318,
			"primary_score":	999985,
			"second_score":	99042274
		}, {
			"file":	"Python/compile.c",
			"line":	1319,
			"primary_score":	999987,
			"second_score":	99042273
		}, {
			"file":	"Python/compile.c",
			"line":	1320,
			"primary_score":	999987,
			"second_score":	99042272
		}, {
			"file":	"Python/compile.c",
			"line":	1321,
			"primary_score":	999987,
			"second_score":	99042271
		}, {
			"file":	"Python/compile.c",
			"line":	1322,
			"primary_score":	999989,
			"second_score":	99042270
		}, {
			"file":	"Python/compile.c",
			"line":	1323,
			"primary_score":	999989,
			"second_score":	99041934
		}, {
			"file":	"Python/compile.c",
			"line":	1326,
			"primary_score":	999989,
			"second_score":	99041493
		}, {
			"file":	"Python/compile.c",
			"line":	1329,
			"primary_score":	999985,
			"second_score":	99041492
		}, {
			"file":	"Python/compile.c",
			"line":	1337,
			"primary_score":	999996,
			"second_score":	60878434
		}, {
			"file":	"Python/compile.c",
			"line":	1338,
			"primary_score":	999996,
			"second_score":	60877752
		}, {
			"file":	"Python/compile.c",
			"line":	1410,
			"primary_score":	999996,
			"second_score":	60877722
		}, {
			"file":	"Python/compile.c",
			"line":	1411,
			"primary_score":	999996,
			"second_score":	60877721
		}, {
			"file":	"Python/compile.c",
			"line":	1412,
			"primary_score":	999996,
			"second_score":	60877720
		}, {
			"file":	"Python/compile.c",
			"line":	1413,
			"primary_score":	999996,
			"second_score":	60877667
		}, {
			"file":	"Python/compile.c",
			"line":	1415,
			"primary_score":	999996,
			"second_score":	60877666
		}, {
			"file":	"Python/compile.c",
			"line":	1416,
			"primary_score":	999996,
			"second_score":	60877665
		}, {
			"file":	"Python/compile.c",
			"line":	1417,
			"primary_score":	999996,
			"second_score":	60877664
		}, {
			"file":	"Python/compile.c",
			"line":	1418,
			"primary_score":	999996,
			"second_score":	60877663
		}, {
			"file":	"Python/compile.c",
			"line":	1420,
			"primary_score":	999996,
			"second_score":	60877662
		}, {
			"file":	"Python/compile.c",
			"line":	1421,
			"primary_score":	999996,
			"second_score":	60877340
		}, {
			"file":	"Python/compile.c",
			"line":	1422,
			"primary_score":	999996,
			"second_score":	60877337
		}, {
			"file":	"Python/compile.c",
			"line":	1449,
			"primary_score":	999985,
			"second_score":	99042276
		}, {
			"file":	"Python/compile.c",
			"line":	1451,
			"primary_score":	999985,
			"second_score":	99041491
		}, {
			"file":	"Python/compile.c",
			"line":	1453,
			"primary_score":	999985,
			"second_score":	99041490
		}, {
			"file":	"Python/compile.c",
			"line":	1577,
			"primary_score":	999971,
			"second_score":	109353819
		}, {
			"file":	"Python/compile.c",
			"line":	1620,
			"primary_score":	999977,
			"second_score":	60953289
		}, {
			"file":	"Python/compile.c",
			"line":	1622,
			"primary_score":	999977,
			"second_score":	60953288
		}, {
			"file":	"Python/compile.c",
			"line":	1623,
			"primary_score":	999977,
			"second_score":	60953287
		}, {
			"file":	"Python/compile.c",
			"line":	1624,
			"primary_score":	999977,
			"second_score":	60953261
		}, {
			"file":	"Python/compile.c",
			"line":	1626,
			"primary_score":	999977,
			"second_score":	60953260
		}, {
			"file":	"Python/compile.c",
			"line":	1627,
			"primary_score":	999977,
			"second_score":	60953234
		}, {
			"file":	"Python/compile.c",
			"line":	1629,
			"primary_score":	999977,
			"second_score":	60953233
		}, {
			"file":	"Python/compile.c",
			"line":	1630,
			"primary_score":	999977,
			"second_score":	60952795
		}, {
			"file":	"Python/compile.c",
			"line":	1631,
			"primary_score":	999977,
			"second_score":	60952772
		}, {
			"file":	"Python/compile.c",
			"line":	1632,
			"primary_score":	999977,
			"second_score":	60952332
		}, {
			"file":	"Python/compile.c",
			"line":	1633,
			"primary_score":	999977,
			"second_score":	60952309
		}, {
			"file":	"Python/compile.c",
			"line":	1634,
			"primary_score":	999977,
			"second_score":	60952304
		}, {
			"file":	"Python/compile.c",
			"line":	1635,
			"primary_score":	999977,
			"second_score":	60951842
		}, {
			"file":	"Python/compile.c",
			"line":	1636,
			"primary_score":	999977,
			"second_score":	60951837
		}, {
			"file":	"Python/compile.c",
			"line":	1642,
			"primary_score":	999925,
			"second_score":	55243695
		}, {
			"file":	"Python/compile.c",
			"line":	1643,
			"primary_score":	999925,
			"second_score":	55243694
		}, {
			"file":	"Python/compile.c",
			"line":	1644,
			"primary_score":	999925,
			"second_score":	55243693
		}, {
			"file":	"Python/compile.c",
			"line":	1645,
			"primary_score":	999925,
			"second_score":	55243692
		}, {
			"file":	"Python/compile.c",
			"line":	1646,
			"primary_score":	999925,
			"second_score":	55243691
		}, {
			"file":	"Python/compile.c",
			"line":	1648,
			"primary_score":	999925,
			"second_score":	55243690
		}, {
			"file":	"Python/compile.c",
			"line":	1649,
			"primary_score":	999925,
			"second_score":	270135699
		}, {
			"file":	"Python/compile.c",
			"line":	1650,
			"primary_score":	999925,
			"second_score":	270135264
		}, {
			"file":	"Python/compile.c",
			"line":	1654,
			"primary_score":	999925,
			"second_score":	55243689
		}, {
			"file":	"Python/compile.c",
			"line":	1660,
			"primary_score":	999925,
			"second_score":	55243688
		}, {
			"file":	"Python/compile.c",
			"line":	1661,
			"primary_score":	999925,
			"second_score":	55243687
		}, {
			"file":	"Python/compile.c",
			"line":	1662,
			"primary_score":	999925,
			"second_score":	55243686
		}, {
			"file":	"Python/compile.c",
			"line":	1667,
			"primary_score":	999925,
			"second_score":	55242867
		}, {
			"file":	"Python/compile.c",
			"line":	1670,
			"primary_score":	999925,
			"second_score":	55242580
		}, {
			"file":	"Python/compile.c",
			"line":	1671,
			"primary_score":	999925,
			"second_score":	55242579
		}, {
			"file":	"Python/compile.c",
			"line":	1672,
			"primary_score":	999925,
			"second_score":	55242578
		}, {
			"file":	"Python/compile.c",
			"line":	1673,
			"primary_score":	999925,
			"second_score":	55238756
		}, {
			"file":	"Python/compile.c",
			"line":	1677,
			"primary_score":	999925,
			"second_score":	55238755
		}, {
			"file":	"Python/compile.c",
			"line":	1679,
			"primary_score":	999925,
			"second_score":	55238732
		}, {
			"file":	"Python/compile.c",
			"line":	1680,
			"primary_score":	999925,
			"second_score":	55231780
		}, {
			"file":	"Python/compile.c",
			"line":	1681,
			"primary_score":	999925,
			"second_score":	55231121
		}, {
			"file":	"Python/compile.c",
			"line":	1684,
			"primary_score":	999925,
			"second_score":	55231120
		}, {
			"file":	"Python/compile.c",
			"line":	1685,
			"primary_score":	999925,
			"second_score":	55231119
		}, {
			"file":	"Python/compile.c",
			"line":	1686,
			"primary_score":	999925,
			"second_score":	55231118
		}, {
			"file":	"Python/compile.c",
			"line":	1687,
			"primary_score":	999925,
			"second_score":	55229866
		}, {
			"file":	"Python/compile.c",
			"line":	1689,
			"primary_score":	999925,
			"second_score":	55229863
		}, {
			"file":	"Python/compile.c",
			"line":	1755,
			"primary_score":	999975,
			"second_score":	109266635
		}, {
			"file":	"Python/compile.c",
			"line":	1838,
			"primary_score":	999978,
			"second_score":	96745092
		}, {
			"file":	"Python/compile.c",
			"line":	1840,
			"primary_score":	999979,
			"second_score":	96745091
		}, {
			"file":	"Python/compile.c",
			"line":	1841,
			"primary_score":	999979,
			"second_score":	96745066
		}, {
			"file":	"Python/compile.c",
			"line":	2066,
			"primary_score":	999965,
			"second_score":	115727052
		}, {
			"file":	"Python/compile.c",
			"line":	2067,
			"primary_score":	999965,
			"second_score":	115727051
		}, {
			"file":	"Python/compile.c",
			"line":	2068,
			"primary_score":	999965,
			"second_score":	115727047
		}, {
			"file":	"Python/compile.c",
			"line":	2084,
			"primary_score":	999965,
			"second_score":	115727046
		}, {
			"file":	"Python/compile.c",
			"line":	2114,
			"primary_score":	999965,
			"second_score":	115727053
		}, {
			"file":	"Python/compile.c",
			"line":	2115,
			"primary_score":	999965,
			"second_score":	115726615
		}, {
			"file":	"Python/compile.c",
			"line":	2183,
			"primary_score":	999987,
			"second_score":	115785459
		}, {
			"file":	"Python/compile.c",
			"line":	2190,
			"primary_score":	999983,
			"second_score":	148688689
		}, {
			"file":	"Python/compile.c",
			"line":	2191,
			"primary_score":	999983,
			"second_score":	148688688
		}, {
			"file":	"Python/compile.c",
			"line":	2192,
			"primary_score":	999983,
			"second_score":	148688666
		}, {
			"file":	"Python/compile.c",
			"line":	2238,
			"primary_score":	999978,
			"second_score":	98474743
		}, {
			"file":	"Python/compile.c",
			"line":	2239,
			"primary_score":	999978,
			"second_score":	98474440
		}, {
			"file":	"Python/compile.c",
			"line":	2279,
			"primary_score":	999953,
			"second_score":	84977006
		}, {
			"file":	"Python/compile.c",
			"line":	2298,
			"primary_score":	999995,
			"second_score":	153209030
		}, {
			"file":	"Python/compile.c",
			"line":	2299,
			"primary_score":	999995,
			"second_score":	153208605
		}, {
			"file":	"Python/compile.c",
			"line":	2319,
			"primary_score":	999966,
			"second_score":	9512614
		}, {
			"file":	"Python/compile.c",
			"line":	2320,
			"primary_score":	999966,
			"second_score":	9512248
		}, {
			"file":	"Python/compile.c",
			"line":	2498,
			"primary_score":	999975,
			"second_score":	152255126
		}, {
			"file":	"Python/compile.c",
			"line":	2543,
			"primary_score":	999975,
			"second_score":	152255123
		}, {
			"file":	"Python/compile.c",
			"line":	2559,
			"primary_score":	999980,
			"second_score":	202050860
		}, {
			"file":	"Python/compile.c",
			"line":	2684,
			"primary_score":	999974,
			"second_score":	77758588
		}, {
			"file":	"Python/compile.c",
			"line":	2685,
			"primary_score":	999974,
			"second_score":	77758562
		}, {
			"file":	"Python/compile.c",
			"line":	2687,
			"primary_score":	999974,
			"second_score":	77758561
		}, {
			"file":	"Python/compile.c",
			"line":	2688,
			"primary_score":	999974,
			"second_score":	77758129
		}, {
			"file":	"Python/compile.c",
			"line":	2691,
			"primary_score":	999974,
			"second_score":	77758127
		}, {
			"file":	"Python/compile.c",
			"line":	2692,
			"primary_score":	999974,
			"second_score":	77758105
		}, {
			"file":	"Python/compile.c",
			"line":	2693,
			"primary_score":	999974,
			"second_score":	77758083
		}, {
			"file":	"Python/compile.c",
			"line":	2695,
			"primary_score":	999974,
			"second_score":	77758063
		}, {
			"file":	"Python/compile.c",
			"line":	2696,
			"primary_score":	999974,
			"second_score":	77758062
		}, {
			"file":	"Python/compile.c",
			"line":	2697,
			"primary_score":	999974,
			"second_score":	77758039
		}, {
			"file":	"Python/compile.c",
			"line":	2698,
			"primary_score":	999974,
			"second_score":	77758006
		}, {
			"file":	"Python/compile.c",
			"line":	2700,
			"primary_score":	999974,
			"second_score":	77758005
		}, {
			"file":	"Python/compile.c",
			"line":	2706,
			"primary_score":	999974,
			"second_score":	77757661
		}, {
			"file":	"Python/compile.c",
			"line":	2707,
			"primary_score":	999974,
			"second_score":	77757635
		}, {
			"file":	"Python/compile.c",
			"line":	2709,
			"primary_score":	999974,
			"second_score":	77757634
		}, {
			"file":	"Python/compile.c",
			"line":	2710,
			"primary_score":	999974,
			"second_score":	77757611
		}, {
			"file":	"Python/compile.c",
			"line":	2711,
			"primary_score":	999974,
			"second_score":	77757606
		}, {
			"file":	"Python/compile.c",
			"line":	2712,
			"primary_score":	999974,
			"second_score":	77757573
		}, {
			"file":	"Python/compile.c",
			"line":	2713,
			"primary_score":	999974,
			"second_score":	77757551
		}, {
			"file":	"Python/compile.c",
			"line":	2762,
			"primary_score":	999968,
			"second_score":	121857940
		}, {
			"file":	"Python/compile.c",
			"line":	2763,
			"primary_score":	999968,
			"second_score":	121857921
		}, {
			"file":	"Python/compile.c",
			"line":	2828,
			"primary_score":	999971,
			"second_score":	109169568
		}, {
			"file":	"Python/compile.c",
			"line":	2829,
			"primary_score":	999971,
			"second_score":	109169567
		}, {
			"file":	"Python/compile.c",
			"line":	2830,
			"primary_score":	999971,
			"second_score":	109168225
		}, {
			"file":	"Python/compile.c",
			"line":	2831,
			"primary_score":	999971,
			"second_score":	109168202
		}, {
			"file":	"Python/compile.c",
			"line":	3178,
			"primary_score":	999995,
			"second_score":	152415187
		}, {
			"file":	"Python/compile.c",
			"line":	3193,
			"primary_score":	999879,
			"second_score":	81994001
		}, {
			"file":	"Python/compile.c",
			"line":	3194,
			"primary_score":	999879,
			"second_score":	81993668
		}, {
			"file":	"Python/compile.c",
			"line":	3228,
			"primary_score":	999986,
			"second_score":	123198391
		}, {
			"file":	"Python/compile.c",
			"line":	3229,
			"primary_score":	999986,
			"second_score":	123197915
		}, {
			"file":	"Python/compile.c",
			"line":	3230,
			"primary_score":	999986,
			"second_score":	123197406
		}, {
			"file":	"Python/compile.c",
			"line":	3236,
			"primary_score":	999986,
			"second_score":	123196938
		}, {
			"file":	"Python/compile.c",
			"line":	3237,
			"primary_score":	999986,
			"second_score":	123196881
		}, {
			"file":	"Python/compile.c",
			"line":	3299,
			"primary_score":	999986,
			"second_score":	123198398
		}, {
			"file":	"Python/compile.c",
			"line":	3301,
			"primary_score":	999986,
			"second_score":	123198397
		}, {
			"file":	"Python/compile.c",
			"line":	3302,
			"primary_score":	999986,
			"second_score":	123197402
		}, {
			"file":	"Python/compile.c",
			"line":	3303,
			"primary_score":	999986,
			"second_score":	123196968
		}, {
			"file":	"Python/compile.c",
			"line":	3304,
			"primary_score":	999986,
			"second_score":	123196945
		}, {
			"file":	"Python/compile.c",
			"line":	3305,
			"primary_score":	999986,
			"second_score":	123196944
		}, {
			"file":	"Python/compile.c",
			"line":	3306,
			"primary_score":	999986,
			"second_score":	123196877
		}, {
			"file":	"Python/compile.c",
			"line":	3416,
			"primary_score":	999986,
			"second_score":	123197452
		}, {
			"file":	"Python/compile.c",
			"line":	3419,
			"primary_score":	999986,
			"second_score":	123196927
		}, {
			"file":	"Python/compile.c",
			"line":	3447,
			"primary_score":	999980,
			"second_score":	122386702
		}, {
			"file":	"Python/compile.c",
			"line":	3448,
			"primary_score":	999980,
			"second_score":	122386701
		}, {
			"file":	"Python/compile.c",
			"line":	3649,
			"primary_score":	999995,
			"second_score":	60872333
		}, {
			"file":	"Python/compile.c",
			"line":	3789,
			"primary_score":	999995,
			"second_score":	60872324
		}, {
			"file":	"Python/compile.c",
			"line":	3790,
			"primary_score":	999995,
			"second_score":	60872323
		}, {
			"file":	"Python/compile.c",
			"line":	3791,
			"primary_score":	999995,
			"second_score":	60872322
		}, {
			"file":	"Python/compile.c",
			"line":	3792,
			"primary_score":	999995,
			"second_score":	60872321
		}, {
			"file":	"Python/compile.c",
			"line":	3793,
			"primary_score":	999995,
			"second_score":	60872320
		}, {
			"file":	"Python/compile.c",
			"line":	3899,
			"primary_score":	999917,
			"second_score":	84990044
		}, {
			"file":	"Python/compile.c",
			"line":	4058,
			"primary_score":	999976,
			"second_score":	162765006
		}, {
			"file":	"Python/dtoa.c",
			"line":	339,
			"primary_score":	999939,
			"second_score":	9661449
		}, {
			"file":	"Python/dtoa.c",
			"line":	340,
			"primary_score":	999939,
			"second_score":	9661448
		}, {
			"file":	"Python/dtoa.c",
			"line":	341,
			"primary_score":	999939,
			"second_score":	9661447
		}, {
			"file":	"Python/dtoa.c",
			"line":	343,
			"primary_score":	999939,
			"second_score":	9661446
		}, {
			"file":	"Python/dtoa.c",
			"line":	344,
			"primary_score":	999941,
			"second_score":	9661445
		}, {
			"file":	"Python/dtoa.c",
			"line":	346,
			"primary_score":	999939,
			"second_score":	10279241
		}, {
			"file":	"Python/dtoa.c",
			"line":	347,
			"primary_score":	999939,
			"second_score":	10279240
		}, {
			"file":	"Python/dtoa.c",
			"line":	349,
			"primary_score":	999939,
			"second_score":	10279239
		}, {
			"file":	"Python/dtoa.c",
			"line":	350,
			"primary_score":	999939,
			"second_score":	10279238
		}, {
			"file":	"Python/dtoa.c",
			"line":	351,
			"primary_score":	999939,
			"second_score":	10279237
		}, {
			"file":	"Python/dtoa.c",
			"line":	358,
			"primary_score":	999939,
			"second_score":	10279236
		}, {
			"file":	"Python/dtoa.c",
			"line":	359,
			"primary_score":	999939,
			"second_score":	10279235
		}, {
			"file":	"Python/dtoa.c",
			"line":	361,
			"primary_score":	999939,
			"second_score":	9661444
		}, {
			"file":	"Python/dtoa.c",
			"line":	362,
			"primary_score":	999939,
			"second_score":	9661443
		}, {
			"file":	"Python/dtoa.c",
			"line":	370,
			"primary_score":	999939,
			"second_score":	9661386
		}, {
			"file":	"Python/dtoa.c",
			"line":	371,
			"primary_score":	999939,
			"second_score":	9661385
		}, {
			"file":	"Python/dtoa.c",
			"line":	374,
			"primary_score":	999939,
			"second_score":	9661384
		}, {
			"file":	"Python/dtoa.c",
			"line":	375,
			"primary_score":	999939,
			"second_score":	9661383
		}, {
			"file":	"Python/dtoa.c",
			"line":	432,
			"primary_score":	999961,
			"second_score":	10279651
		}, {
			"file":	"Python/dtoa.c",
			"line":	434,
			"primary_score":	999961,
			"second_score":	10279650
		}, {
			"file":	"Python/dtoa.c",
			"line":	435,
			"primary_score":	999961,
			"second_score":	10279649
		}, {
			"file":	"Python/dtoa.c",
			"line":	440,
			"primary_score":	999961,
			"second_score":	10279648
		}, {
			"file":	"Python/dtoa.c",
			"line":	442,
			"primary_score":	999961,
			"second_score":	10279647
		}, {
			"file":	"Python/dtoa.c",
			"line":	443,
			"primary_score":	999961,
			"second_score":	10279646
		}, {
			"file":	"Python/dtoa.c",
			"line":	444,
			"primary_score":	999961,
			"second_score":	10279645
		}, {
			"file":	"Python/dtoa.c",
			"line":	445,
			"primary_score":	999961,
			"second_score":	10279644
		}, {
			"file":	"Python/dtoa.c",
			"line":	446,
			"primary_score":	999961,
			"second_score":	10279643
		}, {
			"file":	"Python/dtoa.c",
			"line":	448,
			"primary_score":	999961,
			"second_score":	10279642
		}, {
			"file":	"Python/dtoa.c",
			"line":	449,
			"primary_score":	999961,
			"second_score":	10279641
		}, {
			"file":	"Python/dtoa.c",
			"line":	450,
			"primary_score":	999961,
			"second_score":	10279640
		}, {
			"file":	"Python/dtoa.c",
			"line":	460,
			"primary_score":	999961,
			"second_score":	10279639
		}, {
			"file":	"Python/dtoa.c",
			"line":	474,
			"primary_score":	999961,
			"second_score":	10279638
		}, {
			"file":	"Python/dtoa.c",
			"line":	521,
			"primary_score":	999962,
			"second_score":	10279554
		}, {
			"file":	"Python/dtoa.c",
			"line":	523,
			"primary_score":	999962,
			"second_score":	10279553
		}, {
			"file":	"Python/dtoa.c",
			"line":	524,
			"primary_score":	999964,
			"second_score":	10279552
		}, {
			"file":	"Python/dtoa.c",
			"line":	525,
			"primary_score":	999964,
			"second_score":	10279551
		}, {
			"file":	"Python/dtoa.c",
			"line":	527,
			"primary_score":	999962,
			"second_score":	10279550
		}, {
			"file":	"Python/dtoa.c",
			"line":	528,
			"primary_score":	999962,
			"second_score":	10279549
		}, {
			"file":	"Python/dtoa.c",
			"line":	529,
			"primary_score":	999962,
			"second_score":	10279548
		}, {
			"file":	"Python/dtoa.c",
			"line":	531,
			"primary_score":	999962,
			"second_score":	10279547
		}, {
			"file":	"Python/dtoa.c",
			"line":	532,
			"primary_score":	999966,
			"second_score":	10279546
		}, {
			"file":	"Python/dtoa.c",
			"line":	533,
			"primary_score":	999966,
			"second_score":	10279545
		}, {
			"file":	"Python/dtoa.c",
			"line":	535,
			"primary_score":	999962,
			"second_score":	10279544
		}, {
			"file":	"Python/dtoa.c",
			"line":	536,
			"primary_score":	999964,
			"second_score":	10279543
		}, {
			"file":	"Python/dtoa.c",
			"line":	537,
			"primary_score":	999964,
			"second_score":	10279542
		}, {
			"file":	"Python/dtoa.c",
			"line":	539,
			"primary_score":	999962,
			"second_score":	10279541
		}, {
			"file":	"Python/dtoa.c",
			"line":	540,
			"primary_score":	999965,
			"second_score":	10279540
		}, {
			"file":	"Python/dtoa.c",
			"line":	541,
			"primary_score":	999965,
			"second_score":	10279539
		}, {
			"file":	"Python/dtoa.c",
			"line":	544,
			"primary_score":	999962,
			"second_score":	10279538
		}, {
			"file":	"Python/dtoa.c",
			"line":	553,
			"primary_score":	999948,
			"second_score":	10279768
		}, {
			"file":	"Python/dtoa.c",
			"line":	554,
			"primary_score":	999948,
			"second_score":	10279767
		}, {
			"file":	"Python/dtoa.c",
			"line":	556,
			"primary_score":	999948,
			"second_score":	10279766
		}, {
			"file":	"Python/dtoa.c",
			"line":	566,
			"primary_score":	999949,
			"second_score":	10279765
		}, {
			"file":	"Python/dtoa.c",
			"line":	567,
			"primary_score":	999949,
			"second_score":	10279764
		}, {
			"file":	"Python/dtoa.c",
			"line":	568,
			"primary_score":	999953,
			"second_score":	10279763
		}, {
			"file":	"Python/dtoa.c",
			"line":	569,
			"primary_score":	999953,
			"second_score":	10279762
		}, {
			"file":	"Python/dtoa.c",
			"line":	571,
			"primary_score":	999949,
			"second_score":	10279761
		}, {
			"file":	"Python/dtoa.c",
			"line":	575,
			"primary_score":	999949,
			"second_score":	10279760
		}, {
			"file":	"Python/dtoa.c",
			"line":	576,
			"primary_score":	999952,
			"second_score":	10279759
		}, {
			"file":	"Python/dtoa.c",
			"line":	577,
			"primary_score":	999952,
			"second_score":	10279758
		}, {
			"file":	"Python/dtoa.c",
			"line":	579,
			"primary_score":	999949,
			"second_score":	10279757
		}, {
			"file":	"Python/dtoa.c",
			"line":	583,
			"primary_score":	999949,
			"second_score":	10279756
		}, {
			"file":	"Python/dtoa.c",
			"line":	589,
			"primary_score":	999949,
			"second_score":	10279755
		}, {
			"file":	"Python/dtoa.c",
			"line":	590,
			"primary_score":	999949,
			"second_score":	10279754
		}, {
			"file":	"Python/dtoa.c",
			"line":	598,
			"primary_score":	999959,
			"second_score":	10279577
		}, {
			"file":	"Python/dtoa.c",
			"line":	600,
			"primary_score":	999959,
			"second_score":	10279576
		}, {
			"file":	"Python/dtoa.c",
			"line":	601,
			"primary_score":	999959,
			"second_score":	10279568
		}, {
			"file":	"Python/dtoa.c",
			"line":	603,
			"primary_score":	999959,
			"second_score":	10279567
		}, {
			"file":	"Python/dtoa.c",
			"line":	604,
			"primary_score":	999959,
			"second_score":	10279566
		}, {
			"file":	"Python/dtoa.c",
			"line":	605,
			"primary_score":	999959,
			"second_score":	10279565
		}, {
			"file":	"Python/dtoa.c",
			"line":	614,
			"primary_score":	999966,
			"second_score":	10279632
		}, {
			"file":	"Python/dtoa.c",
			"line":	615,
			"primary_score":	999966,
			"second_score":	10279631
		}, {
			"file":	"Python/dtoa.c",
			"line":	616,
			"primary_score":	999966,
			"second_score":	10279630
		}, {
			"file":	"Python/dtoa.c",
			"line":	617,
			"primary_score":	999966,
			"second_score":	10279629
		}, {
			"file":	"Python/dtoa.c",
			"line":	619,
			"primary_score":	999966,
			"second_score":	10279628
		}, {
			"file":	"Python/dtoa.c",
			"line":	625,
			"primary_score":	999966,
			"second_score":	10279627
		}, {
			"file":	"Python/dtoa.c",
			"line":	634,
			"primary_score":	999966,
			"second_score":	10279626
		}, {
			"file":	"Python/dtoa.c",
			"line":	639,
			"primary_score":	999966,
			"second_score":	10279625
		}, {
			"file":	"Python/dtoa.c",
			"line":	640,
			"primary_score":	999966,
			"second_score":	10279624
		}, {
			"file":	"Python/dtoa.c",
			"line":	641,
			"primary_score":	999966,
			"second_score":	10279623
		}, {
			"file":	"Python/dtoa.c",
			"line":	642,
			"primary_score":	999966,
			"second_score":	10279622
		}, {
			"file":	"Python/dtoa.c",
			"line":	643,
			"primary_score":	999966,
			"second_score":	10279621
		}, {
			"file":	"Python/dtoa.c",
			"line":	645,
			"primary_score":	999966,
			"second_score":	10279620
		}, {
			"file":	"Python/dtoa.c",
			"line":	646,
			"primary_score":	999966,
			"second_score":	10279606
		}, {
			"file":	"Python/dtoa.c",
			"line":	648,
			"primary_score":	999966,
			"second_score":	10279605
		}, {
			"file":	"Python/dtoa.c",
			"line":	650,
			"primary_score":	999966,
			"second_score":	10279604
		}, {
			"file":	"Python/dtoa.c",
			"line":	651,
			"primary_score":	999966,
			"second_score":	10279603
		}, {
			"file":	"Python/dtoa.c",
			"line":	652,
			"primary_score":	999966,
			"second_score":	10279602
		}, {
			"file":	"Python/dtoa.c",
			"line":	653,
			"primary_score":	999966,
			"second_score":	10279601
		}, {
			"file":	"Python/dtoa.c",
			"line":	654,
			"primary_score":	999966,
			"second_score":	10279600
		}, {
			"file":	"Python/dtoa.c",
			"line":	656,
			"primary_score":	999966,
			"second_score":	10279599
		}, {
			"file":	"Python/dtoa.c",
			"line":	657,
			"primary_score":	999966,
			"second_score":	10279598
		}, {
			"file":	"Python/dtoa.c",
			"line":	658,
			"primary_score":	999966,
			"second_score":	10279597
		}, {
			"file":	"Python/dtoa.c",
			"line":	659,
			"primary_score":	999966,
			"second_score":	10279596
		}, {
			"file":	"Python/dtoa.c",
			"line":	660,
			"primary_score":	999966,
			"second_score":	10279595
		}, {
			"file":	"Python/dtoa.c",
			"line":	661,
			"primary_score":	999966,
			"second_score":	10279594
		}, {
			"file":	"Python/dtoa.c",
			"line":	662,
			"primary_score":	999966,
			"second_score":	10279593
		}, {
			"file":	"Python/dtoa.c",
			"line":	663,
			"primary_score":	999966,
			"second_score":	10279592
		}, {
			"file":	"Python/dtoa.c",
			"line":	664,
			"primary_score":	999966,
			"second_score":	10279591
		}, {
			"file":	"Python/dtoa.c",
			"line":	667,
			"primary_score":	999966,
			"second_score":	10279590
		}, {
			"file":	"Python/dtoa.c",
			"line":	703,
			"primary_score":	999966,
			"second_score":	10279589
		}, {
			"file":	"Python/dtoa.c",
			"line":	704,
			"primary_score":	999966,
			"second_score":	10279588
		}, {
			"file":	"Python/dtoa.c",
			"line":	705,
			"primary_score":	999966,
			"second_score":	10279587
		}, {
			"file":	"Python/dtoa.c",
			"line":	721,
			"primary_score":	999965,
			"second_score":	10279656
		}, {
			"file":	"Python/dtoa.c",
			"line":	722,
			"primary_score":	999965,
			"second_score":	10279655
		}, {
			"file":	"Python/dtoa.c",
			"line":	723,
			"primary_score":	999965,
			"second_score":	10279654
		}, {
			"file":	"Python/dtoa.c",
			"line":	725,
			"primary_score":	999965,
			"second_score":	10279653
		}, {
			"file":	"Python/dtoa.c",
			"line":	726,
			"primary_score":	999968,
			"second_score":	10279652
		}, {
			"file":	"Python/dtoa.c",
			"line":	727,
			"primary_score":	999968,
			"second_score":	10279637
		}, {
			"file":	"Python/dtoa.c",
			"line":	731,
			"primary_score":	999965,
			"second_score":	10279636
		}, {
			"file":	"Python/dtoa.c",
			"line":	732,
			"primary_score":	999983,
			"second_score":	10279635
		}, {
			"file":	"Python/dtoa.c",
			"line":	828,
			"primary_score":	999959,
			"second_score":	10279376
		}, {
			"file":	"Python/dtoa.c",
			"line":	829,
			"primary_score":	999959,
			"second_score":	10279375
		}, {
			"file":	"Python/dtoa.c",
			"line":	830,
			"primary_score":	999959,
			"second_score":	10279374
		}, {
			"file":	"Python/dtoa.c",
			"line":	832,
			"primary_score":	999959,
			"second_score":	10279373
		}, {
			"file":	"Python/dtoa.c",
			"line":	835,
			"primary_score":	999959,
			"second_score":	10279372
		}, {
			"file":	"Python/dtoa.c",
			"line":	836,
			"primary_score":	999959,
			"second_score":	10279371
		}, {
			"file":	"Python/dtoa.c",
			"line":	837,
			"primary_score":	999959,
			"second_score":	10279370
		}, {
			"file":	"Python/dtoa.c",
			"line":	838,
			"primary_score":	999959,
			"second_score":	10279369
		}, {
			"file":	"Python/dtoa.c",
			"line":	840,
			"primary_score":	999959,
			"second_score":	10279368
		}, {
			"file":	"Python/dtoa.c",
			"line":	841,
			"primary_score":	999959,
			"second_score":	10279360
		}, {
			"file":	"Python/dtoa.c",
			"line":	845,
			"primary_score":	999959,
			"second_score":	10279359
		}, {
			"file":	"Python/dtoa.c",
			"line":	846,
			"primary_score":	999959,
			"second_score":	10279358
		}, {
			"file":	"Python/dtoa.c",
			"line":	848,
			"primary_score":	999959,
			"second_score":	10279357
		}, {
			"file":	"Python/dtoa.c",
			"line":	849,
			"primary_score":	999959,
			"second_score":	10279356
		}, {
			"file":	"Python/dtoa.c",
			"line":	850,
			"primary_score":	999959,
			"second_score":	10279355
		}, {
			"file":	"Python/dtoa.c",
			"line":	851,
			"primary_score":	999959,
			"second_score":	10279354
		}, {
			"file":	"Python/dtoa.c",
			"line":	852,
			"primary_score":	999959,
			"second_score":	10279353
		}, {
			"file":	"Python/dtoa.c",
			"line":	853,
			"primary_score":	999959,
			"second_score":	10279352
		}, {
			"file":	"Python/dtoa.c",
			"line":	854,
			"primary_score":	999959,
			"second_score":	10279351
		}, {
			"file":	"Python/dtoa.c",
			"line":	855,
			"primary_score":	999959,
			"second_score":	10279350
		}, {
			"file":	"Python/dtoa.c",
			"line":	858,
			"primary_score":	999959,
			"second_score":	10279349
		}, {
			"file":	"Python/dtoa.c",
			"line":	864,
			"primary_score":	999959,
			"second_score":	10279348
		}, {
			"file":	"Python/dtoa.c",
			"line":	865,
			"primary_score":	999959,
			"second_score":	10279347
		}, {
			"file":	"Python/dtoa.c",
			"line":	866,
			"primary_score":	999959,
			"second_score":	10279342
		}, {
			"file":	"Python/dtoa.c",
			"line":	875,
			"primary_score":	999959,
			"second_score":	10279209
		}, {
			"file":	"Python/dtoa.c",
			"line":	876,
			"primary_score":	999959,
			"second_score":	10279208
		}, {
			"file":	"Python/dtoa.c",
			"line":	878,
			"primary_score":	999959,
			"second_score":	10279207
		}, {
			"file":	"Python/dtoa.c",
			"line":	879,
			"primary_score":	999959,
			"second_score":	10279206
		}, {
			"file":	"Python/dtoa.c",
			"line":	886,
			"primary_score":	999959,
			"second_score":	10279205
		}, {
			"file":	"Python/dtoa.c",
			"line":	887,
			"primary_score":	999971,
			"second_score":	10279204
		}, {
			"file":	"Python/dtoa.c",
			"line":	888,
			"primary_score":	999959,
			"second_score":	10279268
		}, {
			"file":	"Python/dtoa.c",
			"line":	889,
			"primary_score":	999959,
			"second_score":	10279267
		}, {
			"file":	"Python/dtoa.c",
			"line":	890,
			"primary_score":	999959,
			"second_score":	10279266
		}, {
			"file":	"Python/dtoa.c",
			"line":	891,
			"primary_score":	999959,
			"second_score":	10279265
		}, {
			"file":	"Python/dtoa.c",
			"line":	892,
			"primary_score":	999959,
			"second_score":	10279264
		}, {
			"file":	"Python/dtoa.c",
			"line":	893,
			"primary_score":	999959,
			"second_score":	10279263
		}, {
			"file":	"Python/dtoa.c",
			"line":	894,
			"primary_score":	999959,
			"second_score":	10279262
		}, {
			"file":	"Python/dtoa.c",
			"line":	895,
			"primary_score":	999967,
			"second_score":	10279299
		}, {
			"file":	"Python/dtoa.c",
			"line":	896,
			"primary_score":	999981,
			"second_score":	10279298
		}, {
			"file":	"Python/dtoa.c",
			"line":	898,
			"primary_score":	999981,
			"second_score":	10279297
		}, {
			"file":	"Python/dtoa.c",
			"line":	908,
			"primary_score":	999963,
			"second_score":	10279260
		}, {
			"file":	"Python/dtoa.c",
			"line":	909,
			"primary_score":	999963,
			"second_score":	10279259
		}, {
			"file":	"Python/dtoa.c",
			"line":	910,
			"primary_score":	999963,
			"second_score":	10279258
		}, {
			"file":	"Python/dtoa.c",
			"line":	912,
			"primary_score":	999963,
			"second_score":	10279257
		}, {
			"file":	"Python/dtoa.c",
			"line":	918,
			"primary_score":	999963,
			"second_score":	10279256
		}, {
			"file":	"Python/dtoa.c",
			"line":	919,
			"primary_score":	999963,
			"second_score":	10279249
		}, {
			"file":	"Python/dtoa.c",
			"line":	927,
			"primary_score":	999963,
			"second_score":	10279248
		}, {
			"file":	"Python/dtoa.c",
			"line":	934,
			"primary_score":	999964,
			"second_score":	10279247
		}, {
			"file":	"Python/dtoa.c",
			"line":	935,
			"primary_score":	999963,
			"second_score":	10279246
		}, {
			"file":	"Python/dtoa.c",
			"line":	936,
			"primary_score":	999963,
			"second_score":	10279232
		}, {
			"file":	"Python/dtoa.c",
			"line":	938,
			"primary_score":	999963,
			"second_score":	10279231
		}, {
			"file":	"Python/dtoa.c",
			"line":	939,
			"primary_score":	999963,
			"second_score":	10279230
		}, {
			"file":	"Python/dtoa.c",
			"line":	940,
			"primary_score":	999963,
			"second_score":	10279229
		}, {
			"file":	"Python/dtoa.c",
			"line":	941,
			"primary_score":	999963,
			"second_score":	10279228
		}, {
			"file":	"Python/dtoa.c",
			"line":	942,
			"primary_score":	999963,
			"second_score":	10279227
		}, {
			"file":	"Python/dtoa.c",
			"line":	943,
			"primary_score":	999963,
			"second_score":	10279226
		}, {
			"file":	"Python/dtoa.c",
			"line":	944,
			"primary_score":	999963,
			"second_score":	10279225
		}, {
			"file":	"Python/dtoa.c",
			"line":	945,
			"primary_score":	999963,
			"second_score":	10279224
		}, {
			"file":	"Python/dtoa.c",
			"line":	946,
			"primary_score":	999963,
			"second_score":	10279223
		}, {
			"file":	"Python/dtoa.c",
			"line":	948,
			"primary_score":	999963,
			"second_score":	10279222
		}, {
			"file":	"Python/dtoa.c",
			"line":	949,
			"primary_score":	999963,
			"second_score":	10279221
		}, {
			"file":	"Python/dtoa.c",
			"line":	950,
			"primary_score":	999963,
			"second_score":	10279220
		}, {
			"file":	"Python/dtoa.c",
			"line":	951,
			"primary_score":	999963,
			"second_score":	10279219
		}, {
			"file":	"Python/dtoa.c",
			"line":	954,
			"primary_score":	999963,
			"second_score":	10279218
		}, {
			"file":	"Python/dtoa.c",
			"line":	955,
			"primary_score":	999973,
			"second_score":	10279217
		}, {
			"file":	"Python/dtoa.c",
			"line":	956,
			"primary_score":	999973,
			"second_score":	10279216
		}, {
			"file":	"Python/dtoa.c",
			"line":	957,
			"primary_score":	999973,
			"second_score":	10279215
		}, {
			"file":	"Python/dtoa.c",
			"line":	976,
			"primary_score":	999963,
			"second_score":	10279214
		}, {
			"file":	"Python/dtoa.c",
			"line":	978,
			"primary_score":	999963,
			"second_score":	10279213
		}, {
			"file":	"Python/dtoa.c",
			"line":	979,
			"primary_score":	999963,
			"second_score":	10279212
		}, {
			"file":	"Python/dtoa.c",
			"line":	1116,
			"primary_score":	999948,
			"second_score":	10279794
		}, {
			"file":	"Python/dtoa.c",
			"line":	1117,
			"primary_score":	999948,
			"second_score":	10279793
		}, {
			"file":	"Python/dtoa.c",
			"line":	1118,
			"primary_score":	999948,
			"second_score":	10279792
		}, {
			"file":	"Python/dtoa.c",
			"line":	1119,
			"primary_score":	999948,
			"second_score":	10279791
		}, {
			"file":	"Python/dtoa.c",
			"line":	1121,
			"primary_score":	999948,
			"second_score":	10279790
		}, {
			"file":	"Python/dtoa.c",
			"line":	1122,
			"primary_score":	999948,
			"second_score":	10279776
		}, {
			"file":	"Python/dtoa.c",
			"line":	1124,
			"primary_score":	999948,
			"second_score":	10279775
		}, {
			"file":	"Python/dtoa.c",
			"line":	1126,
			"primary_score":	999948,
			"second_score":	10279774
		}, {
			"file":	"Python/dtoa.c",
			"line":	1127,
			"primary_score":	999948,
			"second_score":	10279773
		}, {
			"file":	"Python/dtoa.c",
			"line":	1128,
			"primary_score":	999948,
			"second_score":	10279772
		}, {
			"file":	"Python/dtoa.c",
			"line":	1129,
			"primary_score":	999948,
			"second_score":	10279771
		}, {
			"file":	"Python/dtoa.c",
			"line":	1130,
			"primary_score":	999948,
			"second_score":	10279770
		}, {
			"file":	"Python/dtoa.c",
			"line":	1141,
			"primary_score":	999955,
			"second_score":	10279769
		}, {
			"file":	"Python/dtoa.c",
			"line":	1142,
			"primary_score":	999955,
			"second_score":	10279753
		}, {
			"file":	"Python/dtoa.c",
			"line":	1143,
			"primary_score":	999955,
			"second_score":	10279752
		}, {
			"file":	"Python/dtoa.c",
			"line":	1145,
			"primary_score":	999955,
			"second_score":	10279751
		}, {
			"file":	"Python/dtoa.c",
			"line":	1147,
			"primary_score":	999948,
			"second_score":	10279750
		}, {
			"file":	"Python/dtoa.c",
			"line":	1148,
			"primary_score":	999948,
			"second_score":	10279749
		}, {
			"file":	"Python/dtoa.c",
			"line":	1149,
			"primary_score":	999948,
			"second_score":	10279748
		}, {
			"file":	"Python/dtoa.c",
			"line":	1155,
			"primary_score":	999948,
			"second_score":	10279747
		}, {
			"file":	"Python/dtoa.c",
			"line":	1205,
			"primary_score":	999967,
			"second_score":	10279555
		}, {
			"file":	"Python/dtoa.c",
			"line":	1206,
			"primary_score":	999967,
			"second_score":	10279537
		}, {
			"file":	"Python/dtoa.c",
			"line":	1207,
			"primary_score":	999968,
			"second_score":	10279536
		}, {
			"file":	"Python/dtoa.c",
			"line":	1208,
			"primary_score":	999967,
			"second_score":	10279535
		}, {
			"file":	"Python/dtoa.c",
			"line":	1218,
			"primary_score":	999971,
			"second_score":	10279338
		}, {
			"file":	"Python/dtoa.c",
			"line":	1219,
			"primary_score":	999971,
			"second_score":	10279337
		}, {
			"file":	"Python/dtoa.c",
			"line":	1221,
			"primary_score":	999971,
			"second_score":	10279336
		}, {
			"file":	"Python/dtoa.c",
			"line":	1227,
			"primary_score":	999971,
			"second_score":	10279335
		}, {
			"file":	"Python/dtoa.c",
			"line":	1232,
			"primary_score":	999971,
			"second_score":	10279334
		}, {
			"file":	"Python/dtoa.c",
			"line":	1234,
			"primary_score":	999971,
			"second_score":	10279333
		}, {
			"file":	"Python/dtoa.c",
			"line":	1235,
			"primary_score":	999971,
			"second_score":	10279332
		}, {
			"file":	"Python/dtoa.c",
			"line":	1236,
			"primary_score":	999971,
			"second_score":	10279331
		}, {
			"file":	"Python/dtoa.c",
			"line":	1237,
			"primary_score":	999971,
			"second_score":	10279330
		}, {
			"file":	"Python/dtoa.c",
			"line":	1238,
			"primary_score":	999971,
			"second_score":	10279329
		}, {
			"file":	"Python/dtoa.c",
			"line":	1243,
			"primary_score":	999971,
			"second_score":	10279328
		}, {
			"file":	"Python/dtoa.c",
			"line":	1244,
			"primary_score":	999971,
			"second_score":	10279327
		}, {
			"file":	"Python/dtoa.c",
			"line":	1245,
			"primary_score":	999971,
			"second_score":	10279326
		}, {
			"file":	"Python/dtoa.c",
			"line":	1246,
			"primary_score":	999971,
			"second_score":	10279325
		}, {
			"file":	"Python/dtoa.c",
			"line":	1248,
			"primary_score":	999971,
			"second_score":	10279319
		}, {
			"file":	"Python/dtoa.c",
			"line":	1249,
			"primary_score":	999971,
			"second_score":	10279318
		}, {
			"file":	"Python/dtoa.c",
			"line":	1250,
			"primary_score":	999971,
			"second_score":	10279317
		}, {
			"file":	"Python/dtoa.c",
			"line":	1251,
			"primary_score":	999971,
			"second_score":	10279316
		}, {
			"file":	"Python/dtoa.c",
			"line":	1252,
			"primary_score":	999971,
			"second_score":	10279315
		}, {
			"file":	"Python/dtoa.c",
			"line":	1266,
			"primary_score":	999971,
			"second_score":	10279314
		}, {
			"file":	"Python/dtoa.c",
			"line":	1273,
			"primary_score":	999971,
			"second_score":	10279313
		}, {
			"file":	"Python/dtoa.c",
			"line":	1274,
			"primary_score":	999977,
			"second_score":	10279296
		}, {
			"file":	"Python/dtoa.c",
			"line":	1275,
			"primary_score":	999977,
			"second_score":	10279295
		}, {
			"file":	"Python/dtoa.c",
			"line":	1276,
			"primary_score":	999977,
			"second_score":	10279294
		}, {
			"file":	"Python/dtoa.c",
			"line":	1277,
			"primary_score":	999977,
			"second_score":	10279293
		}, {
			"file":	"Python/dtoa.c",
			"line":	1278,
			"primary_score":	999977,
			"second_score":	10279292
		}, {
			"file":	"Python/dtoa.c",
			"line":	1279,
			"primary_score":	999977,
			"second_score":	10279291
		}, {
			"file":	"Python/dtoa.c",
			"line":	1281,
			"primary_score":	999977,
			"second_score":	10279285
		}, {
			"file":	"Python/dtoa.c",
			"line":	1282,
			"primary_score":	999977,
			"second_score":	10279284
		}, {
			"file":	"Python/dtoa.c",
			"line":	1283,
			"primary_score":	999977,
			"second_score":	10279283
		}, {
			"file":	"Python/dtoa.c",
			"line":	1284,
			"primary_score":	999977,
			"second_score":	10279282
		}, {
			"file":	"Python/dtoa.c",
			"line":	1285,
			"primary_score":	999977,
			"second_score":	10279281
		}, {
			"file":	"Python/dtoa.c",
			"line":	1299,
			"primary_score":	999977,
			"second_score":	10279280
		}, {
			"file":	"Python/dtoa.c",
			"line":	1300,
			"primary_score":	999977,
			"second_score":	10279279
		}, {
			"file":	"Python/dtoa.c",
			"line":	1301,
			"primary_score":	999977,
			"second_score":	10279278
		}, {
			"file":	"Python/dtoa.c",
			"line":	1302,
			"primary_score":	999977,
			"second_score":	10279277
		}, {
			"file":	"Python/dtoa.c",
			"line":	1304,
			"primary_score":	999977,
			"second_score":	10279276
		}, {
			"file":	"Python/dtoa.c",
			"line":	1307,
			"primary_score":	999971,
			"second_score":	10279275
		}, {
			"file":	"Python/dtoa.c",
			"line":	1569,
			"primary_score":	999978,
			"second_score":	265364747
		}, {
			"file":	"Python/dtoa.c",
			"line":	1593,
			"primary_score":	999957,
			"second_score":	265282679
		}, {
			"file":	"Python/dtoa.c",
			"line":	1595,
			"primary_score":	999978,
			"second_score":	265364735
		}, {
			"file":	"Python/dtoa.c",
			"line":	1625,
			"primary_score":	999978,
			"second_score":	88542974
		}, {
			"file":	"Python/dtoa.c",
			"line":	1684,
			"primary_score":	999924,
			"second_score":	10110555
		}, {
			"file":	"Python/dtoa.c",
			"line":	1687,
			"primary_score":	999972,
			"second_score":	88542960
		}, {
			"file":	"Python/dtoa.c",
			"line":	1688,
			"primary_score":	999972,
			"second_score":	88542959
		}, {
			"file":	"Python/dtoa.c",
			"line":	1701,
			"primary_score":	999906,
			"second_score":	10322172
		}, {
			"file":	"Python/dtoa.c",
			"line":	1702,
			"primary_score":	999906,
			"second_score":	10322171
		}, {
			"file":	"Python/dtoa.c",
			"line":	1703,
			"primary_score":	999906,
			"second_score":	10322170
		}, {
			"file":	"Python/dtoa.c",
			"line":	2232,
			"primary_score":	999946,
			"second_score":	9661453
		}, {
			"file":	"Python/dtoa.c",
			"line":	2234,
			"primary_score":	999946,
			"second_score":	9661452
		}, {
			"file":	"Python/dtoa.c",
			"line":	2235,
			"primary_score":	999946,
			"second_score":	9661451
		}, {
			"file":	"Python/dtoa.c",
			"line":	2239,
			"primary_score":	999946,
			"second_score":	9661450
		}, {
			"file":	"Python/dtoa.c",
			"line":	2240,
			"primary_score":	999946,
			"second_score":	9661442
		}, {
			"file":	"Python/dtoa.c",
			"line":	2242,
			"primary_score":	999946,
			"second_score":	9661441
		}, {
			"file":	"Python/dtoa.c",
			"line":	2243,
			"primary_score":	999946,
			"second_score":	9661440
		}, {
			"file":	"Python/dtoa.c",
			"line":	2249,
			"primary_score":	999967,
			"second_score":	9661455
		}, {
			"file":	"Python/dtoa.c",
			"line":	2251,
			"primary_score":	999967,
			"second_score":	9661454
		}, {
			"file":	"Python/dtoa.c",
			"line":	2252,
			"primary_score":	999967,
			"second_score":	9661439
		}, {
			"file":	"Python/dtoa.c",
			"line":	2254,
			"primary_score":	999967,
			"second_score":	9661438
		}, {
			"file":	"Python/dtoa.c",
			"line":	2255,
			"primary_score":	999967,
			"second_score":	9661437
		}, {
			"file":	"Python/dtoa.c",
			"line":	2256,
			"primary_score":	999967,
			"second_score":	9661436
		}, {
			"file":	"Python/dtoa.c",
			"line":	2257,
			"primary_score":	999967,
			"second_score":	9661435
		}, {
			"file":	"Python/dtoa.c",
			"line":	2258,
			"primary_score":	999967,
			"second_score":	9661434
		}, {
			"file":	"Python/dtoa.c",
			"line":	2270,
			"primary_score":	999946,
			"second_score":	9661389
		}, {
			"file":	"Python/dtoa.c",
			"line":	2271,
			"primary_score":	999946,
			"second_score":	9661388
		}, {
			"file":	"Python/dtoa.c",
			"line":	2272,
			"primary_score":	999946,
			"second_score":	9661387
		}, {
			"file":	"Python/dtoa.c",
			"line":	2351,
			"primary_score":	999946,
			"second_score":	9661473
		}, {
			"file":	"Python/dtoa.c",
			"line":	2354,
			"primary_score":	999946,
			"second_score":	9661472
		}, {
			"file":	"Python/dtoa.c",
			"line":	2355,
			"primary_score":	999946,
			"second_score":	9661471
		}, {
			"file":	"Python/dtoa.c",
			"line":	2356,
			"primary_score":	999946,
			"second_score":	9661470
		}, {
			"file":	"Python/dtoa.c",
			"line":	2357,
			"primary_score":	999946,
			"second_score":	9661469
		}, {
			"file":	"Python/dtoa.c",
			"line":	2358,
			"primary_score":	999946,
			"second_score":	9661468
		}, {
			"file":	"Python/dtoa.c",
			"line":	2359,
			"primary_score":	999946,
			"second_score":	9661467
		}, {
			"file":	"Python/dtoa.c",
			"line":	2360,
			"primary_score":	999946,
			"second_score":	9661466
		}, {
			"file":	"Python/dtoa.c",
			"line":	2364,
			"primary_score":	999946,
			"second_score":	9661465
		}, {
			"file":	"Python/dtoa.c",
			"line":	2365,
			"primary_score":	999946,
			"second_score":	9661464
		}, {
			"file":	"Python/dtoa.c",
			"line":	2367,
			"primary_score":	999946,
			"second_score":	9661463
		}, {
			"file":	"Python/dtoa.c",
			"line":	2368,
			"primary_score":	999946,
			"second_score":	9661462
		}, {
			"file":	"Python/dtoa.c",
			"line":	2370,
			"primary_score":	999981,
			"second_score":	9661461
		}, {
			"file":	"Python/dtoa.c",
			"line":	2371,
			"primary_score":	999981,
			"second_score":	9661460
		}, {
			"file":	"Python/dtoa.c",
			"line":	2377,
			"primary_score":	999946,
			"second_score":	9661459
		}, {
			"file":	"Python/dtoa.c",
			"line":	2385,
			"primary_score":	999947,
			"second_score":	9661458
		}, {
			"file":	"Python/dtoa.c",
			"line":	2386,
			"primary_score":	999969,
			"second_score":	9661457
		}, {
			"file":	"Python/dtoa.c",
			"line":	2387,
			"primary_score":	999969,
			"second_score":	9661456
		}, {
			"file":	"Python/dtoa.c",
			"line":	2392,
			"primary_score":	999948,
			"second_score":	10279795
		}, {
			"file":	"Python/dtoa.c",
			"line":	2393,
			"primary_score":	999948,
			"second_score":	10279746
		}, {
			"file":	"Python/dtoa.c",
			"line":	2395,
			"primary_score":	999948,
			"second_score":	10279745
		}, {
			"file":	"Python/dtoa.c",
			"line":	2396,
			"primary_score":	999948,
			"second_score":	10279744
		}, {
			"file":	"Python/dtoa.c",
			"line":	2397,
			"primary_score":	999948,
			"second_score":	10279743
		}, {
			"file":	"Python/dtoa.c",
			"line":	2398,
			"primary_score":	999948,
			"second_score":	10279742
		}, {
			"file":	"Python/dtoa.c",
			"line":	2422,
			"primary_score":	999948,
			"second_score":	10279741
		}, {
			"file":	"Python/dtoa.c",
			"line":	2423,
			"primary_score":	999948,
			"second_score":	10279740
		}, {
			"file":	"Python/dtoa.c",
			"line":	2436,
			"primary_score":	999948,
			"second_score":	10279739
		}, {
			"file":	"Python/dtoa.c",
			"line":	2438,
			"primary_score":	999948,
			"second_score":	10279738
		}, {
			"file":	"Python/dtoa.c",
			"line":	2439,
			"primary_score":	999948,
			"second_score":	10279737
		}, {
			"file":	"Python/dtoa.c",
			"line":	2440,
			"primary_score":	999973,
			"second_score":	10279736
		}, {
			"file":	"Python/dtoa.c",
			"line":	2441,
			"primary_score":	999948,
			"second_score":	10279735
		}, {
			"file":	"Python/dtoa.c",
			"line":	2442,
			"primary_score":	999948,
			"second_score":	10279734
		}, {
			"file":	"Python/dtoa.c",
			"line":	2447,
			"primary_score":	999948,
			"second_score":	10279733
		}, {
			"file":	"Python/dtoa.c",
			"line":	2448,
			"primary_score":	999948,
			"second_score":	10279732
		}, {
			"file":	"Python/dtoa.c",
			"line":	2449,
			"primary_score":	999950,
			"second_score":	10279731
		}, {
			"file":	"Python/dtoa.c",
			"line":	2450,
			"primary_score":	999950,
			"second_score":	10279730
		}, {
			"file":	"Python/dtoa.c",
			"line":	2456,
			"primary_score":	999948,
			"second_score":	10279729
		}, {
			"file":	"Python/dtoa.c",
			"line":	2462,
			"primary_score":	999973,
			"second_score":	10279728
		}, {
			"file":	"Python/dtoa.c",
			"line":	2463,
			"primary_score":	999973,
			"second_score":	10279727
		}, {
			"file":	"Python/dtoa.c",
			"line":	2464,
			"primary_score":	999973,
			"second_score":	10279726
		}, {
			"file":	"Python/dtoa.c",
			"line":	2466,
			"primary_score":	999948,
			"second_score":	10279725
		}, {
			"file":	"Python/dtoa.c",
			"line":	2469,
			"primary_score":	999948,
			"second_score":	10279724
		}, {
			"file":	"Python/dtoa.c",
			"line":	2471,
			"primary_score":	999948,
			"second_score":	10279723
		}, {
			"file":	"Python/dtoa.c",
			"line":	2475,
			"primary_score":	999948,
			"second_score":	10279722
		}, {
			"file":	"Python/dtoa.c",
			"line":	2476,
			"primary_score":	999948,
			"second_score":	10279721
		}, {
			"file":	"Python/dtoa.c",
			"line":	2478,
			"primary_score":	999948,
			"second_score":	10279720
		}, {
			"file":	"Python/dtoa.c",
			"line":	2482,
			"primary_score":	999971,
			"second_score":	10279719
		}, {
			"file":	"Python/dtoa.c",
			"line":	2483,
			"primary_score":	999971,
			"second_score":	10279718
		}, {
			"file":	"Python/dtoa.c",
			"line":	2502,
			"primary_score":	999948,
			"second_score":	10279717
		}, {
			"file":	"Python/dtoa.c",
			"line":	2503,
			"primary_score":	999948,
			"second_score":	10279696
		}, {
			"file":	"Python/dtoa.c",
			"line":	2505,
			"primary_score":	999948,
			"second_score":	10279695
		}, {
			"file":	"Python/dtoa.c",
			"line":	2508,
			"primary_score":	999948,
			"second_score":	10279694
		}, {
			"file":	"Python/dtoa.c",
			"line":	2608,
			"primary_score":	999966,
			"second_score":	10279693
		}, {
			"file":	"Python/dtoa.c",
			"line":	2642,
			"primary_score":	999968,
			"second_score":	10279692
		}, {
			"file":	"Python/dtoa.c",
			"line":	2643,
			"primary_score":	999968,
			"second_score":	10279691
		}, {
			"file":	"Python/dtoa.c",
			"line":	2644,
			"primary_score":	999968,
			"second_score":	10279690
		}, {
			"file":	"Python/dtoa.c",
			"line":	2645,
			"primary_score":	999974,
			"second_score":	10279689
		}, {
			"file":	"Python/dtoa.c",
			"line":	2648,
			"primary_score":	999974,
			"second_score":	10279688
		}, {
			"file":	"Python/dtoa.c",
			"line":	2649,
			"primary_score":	999974,
			"second_score":	10279687
		}, {
			"file":	"Python/dtoa.c",
			"line":	2650,
			"primary_score":	999974,
			"second_score":	10279686
		}, {
			"file":	"Python/dtoa.c",
			"line":	2651,
			"primary_score":	999974,
			"second_score":	10279666
		}, {
			"file":	"Python/dtoa.c",
			"line":	2654,
			"primary_score":	999968,
			"second_score":	10279665
		}, {
			"file":	"Python/dtoa.c",
			"line":	2655,
			"primary_score":	999977,
			"second_score":	10279664
		}, {
			"file":	"Python/dtoa.c",
			"line":	2656,
			"primary_score":	999977,
			"second_score":	10279663
		}, {
			"file":	"Python/dtoa.c",
			"line":	2657,
			"primary_score":	999977,
			"second_score":	10279662
		}, {
			"file":	"Python/dtoa.c",
			"line":	2658,
			"primary_score":	999977,
			"second_score":	10279661
		}, {
			"file":	"Python/dtoa.c",
			"line":	2660,
			"primary_score":	999968,
			"second_score":	10279660
		}, {
			"file":	"Python/dtoa.c",
			"line":	2661,
			"primary_score":	999978,
			"second_score":	10279659
		}, {
			"file":	"Python/dtoa.c",
			"line":	2662,
			"primary_score":	999984,
			"second_score":	10279658
		}, {
			"file":	"Python/dtoa.c",
			"line":	2663,
			"primary_score":	999984,
			"second_score":	10279657
		}, {
			"file":	"Python/dtoa.c",
			"line":	2664,
			"primary_score":	999984,
			"second_score":	10279634
		}, {
			"file":	"Python/dtoa.c",
			"line":	2666,
			"primary_score":	999984,
			"second_score":	10279633
		}, {
			"file":	"Python/dtoa.c",
			"line":	2667,
			"primary_score":	999984,
			"second_score":	10279586
		}, {
			"file":	"Python/dtoa.c",
			"line":	2668,
			"primary_score":	999984,
			"second_score":	10279581
		}, {
			"file":	"Python/dtoa.c",
			"line":	2669,
			"primary_score":	999984,
			"second_score":	10279580
		}, {
			"file":	"Python/dtoa.c",
			"line":	2672,
			"primary_score":	999984,
			"second_score":	10279579
		}, {
			"file":	"Python/dtoa.c",
			"line":	2684,
			"primary_score":	999968,
			"second_score":	10279578
		}, {
			"file":	"Python/dtoa.c",
			"line":	2685,
			"primary_score":	999968,
			"second_score":	10279564
		}, {
			"file":	"Python/dtoa.c",
			"line":	2687,
			"primary_score":	999968,
			"second_score":	10279563
		}, {
			"file":	"Python/dtoa.c",
			"line":	2695,
			"primary_score":	999968,
			"second_score":	10279562
		}, {
			"file":	"Python/dtoa.c",
			"line":	2696,
			"primary_score":	999968,
			"second_score":	10279561
		}, {
			"file":	"Python/dtoa.c",
			"line":	2698,
			"primary_score":	999974,
			"second_score":	10279560
		}, {
			"file":	"Python/dtoa.c",
			"line":	2702,
			"primary_score":	999993,
			"second_score":	10279559
		}, {
			"file":	"Python/dtoa.c",
			"line":	2703,
			"primary_score":	999993,
			"second_score":	10279558
		}, {
			"file":	"Python/dtoa.c",
			"line":	2704,
			"primary_score":	999993,
			"second_score":	10279557
		}, {
			"file":	"Python/dtoa.c",
			"line":	2716,
			"primary_score":	999968,
			"second_score":	10279556
		}, {
			"file":	"Python/dtoa.c",
			"line":	2717,
			"primary_score":	999968,
			"second_score":	10279534
		}, {
			"file":	"Python/dtoa.c",
			"line":	2718,
			"primary_score":	999968,
			"second_score":	10279533
		}, {
			"file":	"Python/dtoa.c",
			"line":	2719,
			"primary_score":	999968,
			"second_score":	10279532
		}, {
			"file":	"Python/dtoa.c",
			"line":	2720,
			"primary_score":	999968,
			"second_score":	10279531
		}, {
			"file":	"Python/dtoa.c",
			"line":	2721,
			"primary_score":	999968,
			"second_score":	10279530
		}, {
			"file":	"Python/dtoa.c",
			"line":	2722,
			"primary_score":	999968,
			"second_score":	10279488
		}, {
			"file":	"Python/dtoa.c",
			"line":	2725,
			"primary_score":	999968,
			"second_score":	10279487
		}, {
			"file":	"Python/dtoa.c",
			"line":	2726,
			"primary_score":	999968,
			"second_score":	10279486
		}, {
			"file":	"Python/dtoa.c",
			"line":	2727,
			"primary_score":	999968,
			"second_score":	10279444
		}, {
			"file":	"Python/dtoa.c",
			"line":	2730,
			"primary_score":	999968,
			"second_score":	10279443
		}, {
			"file":	"Python/dtoa.c",
			"line":	2731,
			"primary_score":	999977,
			"second_score":	10279442
		}, {
			"file":	"Python/dtoa.c",
			"line":	2744,
			"primary_score":	999968,
			"second_score":	10279429
		}, {
			"file":	"Python/dtoa.c",
			"line":	2763,
			"primary_score":	999972,
			"second_score":	10279428
		}, {
			"file":	"Python/dtoa.c",
			"line":	2764,
			"primary_score":	999974,
			"second_score":	10279427
		}, {
			"file":	"Python/dtoa.c",
			"line":	2765,
			"primary_score":	999974,
			"second_score":	10279426
		}, {
			"file":	"Python/dtoa.c",
			"line":	2766,
			"primary_score":	999974,
			"second_score":	10279390
		}, {
			"file":	"Python/dtoa.c",
			"line":	2774,
			"primary_score":	999974,
			"second_score":	10279389
		}, {
			"file":	"Python/dtoa.c",
			"line":	2775,
			"primary_score":	999974,
			"second_score":	10279388
		}, {
			"file":	"Python/dtoa.c",
			"line":	2776,
			"primary_score":	999993,
			"second_score":	10279387
		}, {
			"file":	"Python/dtoa.c",
			"line":	2777,
			"primary_score":	999993,
			"second_score":	10279379
		}, {
			"file":	"Python/dtoa.c",
			"line":	2779,
			"primary_score":	999993,
			"second_score":	10279378
		}, {
			"file":	"Python/dtoa.c",
			"line":	2780,
			"primary_score":	999993,
			"second_score":	10279377
		}, {
			"file":	"Python/dtoa.c",
			"line":	2781,
			"primary_score":	999993,
			"second_score":	10279341
		}, {
			"file":	"Python/dtoa.c",
			"line":	2785,
			"primary_score":	999974,
			"second_score":	10279340
		}, {
			"file":	"Python/dtoa.c",
			"line":	2786,
			"primary_score":	999974,
			"second_score":	10279339
		}, {
			"file":	"Python/dtoa.c",
			"line":	2790,
			"primary_score":	999974,
			"second_score":	10279274
		}, {
			"file":	"Python/dtoa.c",
			"line":	2791,
			"primary_score":	999974,
			"second_score":	10279261
		}, {
			"file":	"Python/dtoa.c",
			"line":	2792,
			"primary_score":	999974,
			"second_score":	10279211
		}, {
			"file":	"Python/dtoa.c",
			"line":	2794,
			"primary_score":	999974,
			"second_score":	10279210
		}, {
			"file":	"Python/dtoa.c",
			"line":	2795,
			"primary_score":	999974,
			"second_score":	10279203
		}, {
			"file":	"Python/dtoa.c",
			"line":	2796,
			"primary_score":	999974,
			"second_score":	10279198
		}, {
			"file":	"Python/dtoa.c",
			"line":	2805,
			"primary_score":	999974,
			"second_score":	10279197
		}, {
			"file":	"Python/dtoa.c",
			"line":	2808,
			"primary_score":	999976,
			"second_score":	10279196
		}, {
			"file":	"Python/dtoa.c",
			"line":	2809,
			"primary_score":	999984,
			"second_score":	10279195
		}, {
			"file":	"Python/dtoa.c",
			"line":	2822,
			"primary_score":	999976,
			"second_score":	10279194
		}, {
			"file":	"Python/dtoa.c",
			"line":	2889,
			"primary_score":	999967,
			"second_score":	10279189
		}, {
			"file":	"Python/dtoa.c",
			"line":	2890,
			"primary_score":	999974,
			"second_score":	10279188
		}, {
			"file":	"Python/dtoa.c",
			"line":	2891,
			"primary_score":	999993,
			"second_score":	10279187
		}, {
			"file":	"Python/dtoa.c",
			"line":	2892,
			"primary_score":	999974,
			"second_score":	10279182
		}, {
			"file":	"Python/dtoa.c",
			"line":	2894,
			"primary_score":	999967,
			"second_score":	10279177
		}, {
			"file":	"Python/dtoa.c",
			"line":	2896,
			"primary_score":	999948,
			"second_score":	10279172
		}, {
			"file":	"Python/dtoa.c",
			"line":	2897,
			"primary_score":	999948,
			"second_score":	10279171
		}, {
			"file":	"Python/dtoa.c",
			"line":	2898,
			"primary_score":	999948,
			"second_score":	10279170
		}, {
			"file":	"Python/dtoa.c",
			"line":	2899,
			"primary_score":	999948,
			"second_score":	10279169
		}, {
			"file":	"Python/dtoa.c",
			"line":	2900,
			"primary_score":	999948,
			"second_score":	10279168
		}, {
			"file":	"Python/errors.c",
			"line":	27,
			"primary_score":	999711,
			"second_score":	170096
		}, {
			"file":	"Python/errors.c",
			"line":	28,
			"primary_score":	999711,
			"second_score":	170082
		}, {
			"file":	"Python/errors.c",
			"line":	30,
			"primary_score":	999711,
			"second_score":	170081
		}, {
			"file":	"Python/errors.c",
			"line":	39,
			"primary_score":	999711,
			"second_score":	170080
		}, {
			"file":	"Python/errors.c",
			"line":	40,
			"primary_score":	999711,
			"second_score":	170079
		}, {
			"file":	"Python/errors.c",
			"line":	41,
			"primary_score":	999711,
			"second_score":	170078
		}, {
			"file":	"Python/errors.c",
			"line":	43,
			"primary_score":	999711,
			"second_score":	170077
		}, {
			"file":	"Python/errors.c",
			"line":	44,
			"primary_score":	999711,
			"second_score":	170076
		}, {
			"file":	"Python/errors.c",
			"line":	45,
			"primary_score":	999711,
			"second_score":	170075
		}, {
			"file":	"Python/errors.c",
			"line":	47,
			"primary_score":	999711,
			"second_score":	170074
		}, {
			"file":	"Python/errors.c",
			"line":	48,
			"primary_score":	999711,
			"second_score":	170071
		}, {
			"file":	"Python/errors.c",
			"line":	49,
			"primary_score":	999711,
			"second_score":	170068
		}, {
			"file":	"Python/errors.c",
			"line":	306,
			"primary_score":	999711,
			"second_score":	170178
		}, {
			"file":	"Python/errors.c",
			"line":	308,
			"primary_score":	999711,
			"second_score":	170164
		}, {
			"file":	"Python/errors.c",
			"line":	309,
			"primary_score":	999711,
			"second_score":	170163
		}, {
			"file":	"Python/errors.c",
			"line":	310,
			"primary_score":	999711,
			"second_score":	170162
		}, {
			"file":	"Python/errors.c",
			"line":	312,
			"primary_score":	999711,
			"second_score":	170161
		}, {
			"file":	"Python/errors.c",
			"line":	313,
			"primary_score":	999711,
			"second_score":	170160
		}, {
			"file":	"Python/errors.c",
			"line":	314,
			"primary_score":	999711,
			"second_score":	170159
		}, {
			"file":	"Python/future.c",
			"line":	16,
			"primary_score":	999986,
			"second_score":	264791642
		}, {
			"file":	"Python/future.c",
			"line":	17,
			"primary_score":	999986,
			"second_score":	264791641
		}, {
			"file":	"Python/future.c",
			"line":	19,
			"primary_score":	999986,
			"second_score":	264791640
		}, {
			"file":	"Python/future.c",
			"line":	21,
			"primary_score":	999986,
			"second_score":	264791639
		}, {
			"file":	"Python/future.c",
			"line":	22,
			"primary_score":	999986,
			"second_score":	264791638
		}, {
			"file":	"Python/future.c",
			"line":	23,
			"primary_score":	999986,
			"second_score":	264791637
		}, {
			"file":	"Python/future.c",
			"line":	24,
			"primary_score":	999986,
			"second_score":	264791636
		}, {
			"file":	"Python/future.c",
			"line":	25,
			"primary_score":	999986,
			"second_score":	264791541
		}, {
			"file":	"Python/future.c",
			"line":	27,
			"primary_score":	999986,
			"second_score":	264791540
		}, {
			"file":	"Python/future.c",
			"line":	29,
			"primary_score":	999987,
			"second_score":	264791537
		}, {
			"file":	"Python/future.c",
			"line":	31,
			"primary_score":	999989,
			"second_score":	264791534
		}, {
			"file":	"Python/future.c",
			"line":	32,
			"primary_score":	999998,
			"second_score":	264791531
		}, {
			"file":	"Python/future.c",
			"line":	55,
			"primary_score":	999986,
			"second_score":	264791530
		}, {
			"file":	"Python/future.c",
			"line":	71,
			"primary_score":	999962,
			"second_score":	49144457
		}, {
			"file":	"Python/future.c",
			"line":	97,
			"primary_score":	999986,
			"second_score":	264791644
		}, {
			"file":	"Python/future.c",
			"line":	103,
			"primary_score":	999986,
			"second_score":	264791643
		}, {
			"file":	"Python/future.c",
			"line":	105,
			"primary_score":	999986,
			"second_score":	264791529
		}, {
			"file":	"Python/future.c",
			"line":	113,
			"primary_score":	999944,
			"second_score":	9514167
		}, {
			"file":	"Python/future.c",
			"line":	120,
			"primary_score":	999915,
			"second_score":	8341573
		}, {
			"file":	"Python/import.c",
			"line":	551,
			"primary_score":	999713,
			"second_score":	176715
		}, {
			"file":	"Python/import.c",
			"line":	1094,
			"primary_score":	999720,
			"second_score":	64113092
		}, {
			"file":	"Python/import.c",
			"line":	1170,
			"primary_score":	999720,
			"second_score":	64113089
		}, {
			"file":	"Python/import.c",
			"line":	1171,
			"primary_score":	999720,
			"second_score":	64113088
		}, {
			"file":	"Python/import.c",
			"line":	1172,
			"primary_score":	999720,
			"second_score":	64113087
		}, {
			"file":	"Python/import.c",
			"line":	1173,
			"primary_score":	999720,
			"second_score":	64113086
		}, {
			"file":	"Python/import.c",
			"line":	1174,
			"primary_score":	999720,
			"second_score":	64113085
		}, {
			"file":	"Python/import.c",
			"line":	1176,
			"primary_score":	999720,
			"second_score":	64113084
		}, {
			"file":	"Python/import.c",
			"line":	1177,
			"primary_score":	999720,
			"second_score":	64112599
		}, {
			"file":	"Python/import.c",
			"line":	1180,
			"primary_score":	999720,
			"second_score":	64112598
		}, {
			"file":	"Python/import.c",
			"line":	1181,
			"primary_score":	999720,
			"second_score":	64112559
		}, {
			"file":	"Python/import.c",
			"line":	1186,
			"primary_score":	999720,
			"second_score":	64112558
		}, {
			"file":	"Python/import.c",
			"line":	1187,
			"primary_score":	999720,
			"second_score":	64112557
		}, {
			"file":	"Python/import.c",
			"line":	1190,
			"primary_score":	999720,
			"second_score":	61654378
		}, {
			"file":	"Python/import.c",
			"line":	1191,
			"primary_score":	999720,
			"second_score":	61654377
		}, {
			"file":	"Python/import.c",
			"line":	1194,
			"primary_score":	999720,
			"second_score":	60721969
		}, {
			"file":	"Python/import.c",
			"line":	1195,
			"primary_score":	999720,
			"second_score":	60721947
		}, {
			"file":	"Python/import.c",
			"line":	1196,
			"primary_score":	999720,
			"second_score":	60716843
		}, {
			"file":	"Python/import.c",
			"line":	1211,
			"primary_score":	999720,
			"second_score":	60715183
		}, {
			"file":	"Python/import.c",
			"line":	1212,
			"primary_score":	999720,
			"second_score":	60715182
		}, {
			"file":	"Python/import.c",
			"line":	1213,
			"primary_score":	999720,
			"second_score":	60715181
		}, {
			"file":	"Python/import.c",
			"line":	1223,
			"primary_score":	999720,
			"second_score":	60715180
		}, {
			"file":	"Python/import.c",
			"line":	1225,
			"primary_score":	999720,
			"second_score":	60715179
		}, {
			"file":	"Python/import.c",
			"line":	1242,
			"primary_score":	999720,
			"second_score":	60716495
		}, {
			"file":	"Python/import.c",
			"line":	1243,
			"primary_score":	999720,
			"second_score":	60716494
		}, {
			"file":	"Python/import.c",
			"line":	1247,
			"primary_score":	999720,
			"second_score":	60716493
		}, {
			"file":	"Python/import.c",
			"line":	1248,
			"primary_score":	999720,
			"second_score":	60716492
		}, {
			"file":	"Python/import.c",
			"line":	1251,
			"primary_score":	999720,
			"second_score":	60716491
		}, {
			"file":	"Python/import.c",
			"line":	1253,
			"primary_score":	999720,
			"second_score":	60716490
		}, {
			"file":	"Python/import.c",
			"line":	1254,
			"primary_score":	999720,
			"second_score":	60716489
		}, {
			"file":	"Python/import.c",
			"line":	1255,
			"primary_score":	999720,
			"second_score":	60716488
		}, {
			"file":	"Python/import.c",
			"line":	1258,
			"primary_score":	999720,
			"second_score":	60716487
		}, {
			"file":	"Python/import.c",
			"line":	1259,
			"primary_score":	999720,
			"second_score":	60716318
		}, {
			"file":	"Python/import.c",
			"line":	1264,
			"primary_score":	999720,
			"second_score":	60716317
		}, {
			"file":	"Python/import.c",
			"line":	1266,
			"primary_score":	999720,
			"second_score":	60716272
		}, {
			"file":	"Python/import.c",
			"line":	1277,
			"primary_score":	999720,
			"second_score":	60716271
		}, {
			"file":	"Python/import.c",
			"line":	1278,
			"primary_score":	999720,
			"second_score":	60715804
		}, {
			"file":	"Python/import.c",
			"line":	1282,
			"primary_score":	999720,
			"second_score":	60715803
		}, {
			"file":	"Python/import.c",
			"line":	1283,
			"primary_score":	999720,
			"second_score":	60715802
		}, {
			"file":	"Python/import.c",
			"line":	1284,
			"primary_score":	999720,
			"second_score":	60715780
		}, {
			"file":	"Python/import.c",
			"line":	1285,
			"primary_score":	999982,
			"second_score":	115653105
		}, {
			"file":	"Python/import.c",
			"line":	1287,
			"primary_score":	999720,
			"second_score":	60715779
		}, {
			"file":	"Python/import.c",
			"line":	1289,
			"primary_score":	999720,
			"second_score":	60715778
		}, {
			"file":	"Python/import.c",
			"line":	1295,
			"primary_score":	999720,
			"second_score":	60715777
		}, {
			"file":	"Python/import.c",
			"line":	1297,
			"primary_score":	999720,
			"second_score":	60715746
		}, {
			"file":	"Python/import.c",
			"line":	1298,
			"primary_score":	999720,
			"second_score":	60715185
		}, {
			"file":	"Python/import.c",
			"line":	1303,
			"primary_score":	999720,
			"second_score":	60715184
		}, {
			"file":	"Python/import.c",
			"line":	1304,
			"primary_score":	999720,
			"second_score":	60715178
		}, {
			"file":	"Python/import.c",
			"line":	1311,
			"primary_score":	999720,
			"second_score":	60715177
		}, {
			"file":	"Python/import.c",
			"line":	1313,
			"primary_score":	999720,
			"second_score":	60715161
		}, {
			"file":	"Python/import.c",
			"line":	1314,
			"primary_score":	999720,
			"second_score":	60715145
		}, {
			"file":	"Python/import.c",
			"line":	1315,
			"primary_score":	999720,
			"second_score":	60593529
		}, {
			"file":	"Python/import.c",
			"line":	1328,
			"primary_score":	999720,
			"second_score":	60593528
		}, {
			"file":	"Python/import.c",
			"line":	1330,
			"primary_score":	999720,
			"second_score":	60593506
		}, {
			"file":	"Python/import.c",
			"line":	1331,
			"primary_score":	999720,
			"second_score":	60593505
		}, {
			"file":	"Python/import.c",
			"line":	1332,
			"primary_score":	999720,
			"second_score":	60593504
		}, {
			"file":	"Python/import.c",
			"line":	1333,
			"primary_score":	999720,
			"second_score":	60593488
		}, {
			"file":	"Python/import.c",
			"line":	1334,
			"primary_score":	999720,
			"second_score":	60593487
		}, {
			"file":	"Python/import.c",
			"line":	1335,
			"primary_score":	999720,
			"second_score":	60593486
		}, {
			"file":	"Python/import.c",
			"line":	1455,
			"primary_score":	999720,
			"second_score":	64113090
		}, {
			"file":	"Python/import.c",
			"line":	1456,
			"primary_score":	999720,
			"second_score":	60716842
		}, {
			"file":	"Python/import.c",
			"line":	1458,
			"primary_score":	999720,
			"second_score":	60716841
		}, {
			"file":	"Python/import.c",
			"line":	1461,
			"primary_score":	999720,
			"second_score":	60716840
		}, {
			"file":	"Python/import.c",
			"line":	1462,
			"primary_score":	999720,
			"second_score":	60716839
		}, {
			"file":	"Python/import.c",
			"line":	1463,
			"primary_score":	999720,
			"second_score":	60716501
		}, {
			"file":	"Python/import.c",
			"line":	1464,
			"primary_score":	999720,
			"second_score":	60716496
		}, {
			"file":	"Python/import.c",
			"line":	1466,
			"primary_score":	999720,
			"second_score":	60593485
		}, {
			"file":	"Python/import.c",
			"line":	1578,
			"primary_score":	999982,
			"second_score":	108335271
		}, {
			"file":	"Python/marshal.c",
			"line":	96,
			"primary_score":	999720,
			"second_score":	60593550
		}, {
			"file":	"Python/marshal.c",
			"line":	97,
			"primary_score":	999720,
			"second_score":	60593549
		}, {
			"file":	"Python/marshal.c",
			"line":	110,
			"primary_score":	999970,
			"second_score":	151781995
		}, {
			"file":	"Python/marshal.c",
			"line":	111,
			"primary_score":	999970,
			"second_score":	151781993
		}, {
			"file":	"Python/marshal.c",
			"line":	117,
			"primary_score":	999720,
			"second_score":	60593496
		}, {
			"file":	"Python/marshal.c",
			"line":	118,
			"primary_score":	999720,
			"second_score":	60593494
		}, {
			"file":	"Python/marshal.c",
			"line":	119,
			"primary_score":	999720,
			"second_score":	60593492
		}, {
			"file":	"Python/marshal.c",
			"line":	120,
			"primary_score":	999720,
			"second_score":	60593490
		}, {
			"file":	"Python/marshal.c",
			"line":	127,
			"primary_score":	999963,
			"second_score":	96348758
		}, {
			"file":	"Python/marshal.c",
			"line":	128,
			"primary_score":	999963,
			"second_score":	96348749
		}, {
			"file":	"Python/marshal.c",
			"line":	147,
			"primary_score":	999969,
			"second_score":	151782051
		}, {
			"file":	"Python/marshal.c",
			"line":	148,
			"primary_score":	999969,
			"second_score":	151782050
		}, {
			"file":	"Python/marshal.c",
			"line":	150,
			"primary_score":	999970,
			"second_score":	151782048
		}, {
			"file":	"Python/marshal.c",
			"line":	151,
			"primary_score":	999969,
			"second_score":	151782047
		}, {
			"file":	"Python/marshal.c",
			"line":	157,
			"primary_score":	999969,
			"second_score":	151782046
		}, {
			"file":	"Python/marshal.c",
			"line":	158,
			"primary_score":	999969,
			"second_score":	151782045
		}, {
			"file":	"Python/marshal.c",
			"line":	159,
			"primary_score":	999969,
			"second_score":	151782044
		}, {
			"file":	"Python/marshal.c",
			"line":	160,
			"primary_score":	999969,
			"second_score":	151782043
		}, {
			"file":	"Python/marshal.c",
			"line":	161,
			"primary_score":	999969,
			"second_score":	151782042
		}, {
			"file":	"Python/marshal.c",
			"line":	162,
			"primary_score":	999969,
			"second_score":	151782041
		}, {
			"file":	"Python/marshal.c",
			"line":	163,
			"primary_score":	999969,
			"second_score":	151782040
		}, {
			"file":	"Python/marshal.c",
			"line":	165,
			"primary_score":	999969,
			"second_score":	151782039
		}, {
			"file":	"Python/marshal.c",
			"line":	167,
			"primary_score":	999969,
			"second_score":	151782030
		}, {
			"file":	"Python/marshal.c",
			"line":	168,
			"primary_score":	999969,
			"second_score":	151782014
		}, {
			"file":	"Python/marshal.c",
			"line":	169,
			"primary_score":	999969,
			"second_score":	151782013
		}, {
			"file":	"Python/marshal.c",
			"line":	170,
			"primary_score":	999969,
			"second_score":	151782006
		}, {
			"file":	"Python/marshal.c",
			"line":	171,
			"primary_score":	999969,
			"second_score":	151782001
		}, {
			"file":	"Python/marshal.c",
			"line":	173,
			"primary_score":	999969,
			"second_score":	151782000
		}, {
			"file":	"Python/marshal.c",
			"line":	175,
			"primary_score":	999969,
			"second_score":	151781999
		}, {
			"file":	"Python/marshal.c",
			"line":	176,
			"primary_score":	999969,
			"second_score":	151781998
		}, {
			"file":	"Python/marshal.c",
			"line":	177,
			"primary_score":	999969,
			"second_score":	151781997
		}, {
			"file":	"Python/marshal.c",
			"line":	178,
			"primary_score":	999969,
			"second_score":	151781992
		}, {
			"file":	"Python/marshal.c",
			"line":	185,
			"primary_score":	999720,
			"second_score":	60593577
		}, {
			"file":	"Python/marshal.c",
			"line":	187,
			"primary_score":	999720,
			"second_score":	60593576
		}, {
			"file":	"Python/marshal.c",
			"line":	189,
			"primary_score":	999720,
			"second_score":	60593575
		}, {
			"file":	"Python/marshal.c",
			"line":	192,
			"primary_score":	999720,
			"second_score":	60593574
		}, {
			"file":	"Python/marshal.c",
			"line":	195,
			"primary_score":	999720,
			"second_score":	60593573
		}, {
			"file":	"Python/marshal.c",
			"line":	196,
			"primary_score":	999720,
			"second_score":	60600907
		}, {
			"file":	"Python/marshal.c",
			"line":	198,
			"primary_score":	999720,
			"second_score":	60593572
		}, {
			"file":	"Python/marshal.c",
			"line":	201,
			"primary_score":	999720,
			"second_score":	60593571
		}, {
			"file":	"Python/marshal.c",
			"line":	204,
			"primary_score":	999720,
			"second_score":	60593570
		}, {
			"file":	"Python/marshal.c",
			"line":	205,
			"primary_score":	999871,
			"second_score":	60698847
		}, {
			"file":	"Python/marshal.c",
			"line":	207,
			"primary_score":	999720,
			"second_score":	60593569
		}, {
			"file":	"Python/marshal.c",
			"line":	208,
			"primary_score":	999854,
			"second_score":	60699938
		}, {
			"file":	"Python/marshal.c",
			"line":	210,
			"primary_score":	999720,
			"second_score":	60593568
		}, {
			"file":	"Python/marshal.c",
			"line":	211,
			"primary_score":	999720,
			"second_score":	60600517
		}, {
			"file":	"Python/marshal.c",
			"line":	212,
			"primary_score":	999720,
			"second_score":	60600496
		}, {
			"file":	"Python/marshal.c",
			"line":	213,
			"primary_score":	999969,
			"second_score":	151782118
		}, {
			"file":	"Python/marshal.c",
			"line":	214,
			"primary_score":	999969,
			"second_score":	151782117
		}, {
			"file":	"Python/marshal.c",
			"line":	215,
			"primary_score":	999969,
			"second_score":	151782052
		}, {
			"file":	"Python/marshal.c",
			"line":	219,
			"primary_score":	999720,
			"second_score":	60600495
		}, {
			"file":	"Python/marshal.c",
			"line":	220,
			"primary_score":	999720,
			"second_score":	60600494
		}, {
			"file":	"Python/marshal.c",
			"line":	221,
			"primary_score":	999963,
			"second_score":	96348761
		}, {
			"file":	"Python/marshal.c",
			"line":	222,
			"primary_score":	999963,
			"second_score":	96348759
		}, {
			"file":	"Python/marshal.c",
			"line":	227,
			"primary_score":	999720,
			"second_score":	60600493
		}, {
			"file":	"Python/marshal.c",
			"line":	228,
			"primary_score":	999720,
			"second_score":	60600491
		}, {
			"file":	"Python/marshal.c",
			"line":	232,
			"primary_score":	999720,
			"second_score":	60593567
		}, {
			"file":	"Python/marshal.c",
			"line":	233,
			"primary_score":	999891,
			"second_score":	60639950
		}, {
			"file":	"Python/marshal.c",
			"line":	234,
			"primary_score":	999891,
			"second_score":	60639949
		}, {
			"file":	"Python/marshal.c",
			"line":	235,
			"primary_score":	999891,
			"second_score":	60639948
		}, {
			"file":	"Python/marshal.c",
			"line":	240,
			"primary_score":	999891,
			"second_score":	60639920
		}, {
			"file":	"Python/marshal.c",
			"line":	241,
			"primary_score":	999891,
			"second_score":	60639918
		}, {
			"file":	"Python/marshal.c",
			"line":	257,
			"primary_score":	999720,
			"second_score":	60593566
		}, {
			"file":	"Python/marshal.c",
			"line":	299,
			"primary_score":	999720,
			"second_score":	60593565
		}, {
			"file":	"Python/marshal.c",
			"line":	300,
			"primary_score":	999720,
			"second_score":	60593564
		}, {
			"file":	"Python/marshal.c",
			"line":	301,
			"primary_score":	999720,
			"second_score":	60593562
		}, {
			"file":	"Python/marshal.c",
			"line":	302,
			"primary_score":	999720,
			"second_score":	60593561
		}, {
			"file":	"Python/marshal.c",
			"line":	308,
			"primary_score":	999720,
			"second_score":	60593560
		}, {
			"file":	"Python/marshal.c",
			"line":	309,
			"primary_score":	999720,
			"second_score":	60593551
		}, {
			"file":	"Python/marshal.c",
			"line":	311,
			"primary_score":	999720,
			"second_score":	60593711
		}, {
			"file":	"Python/marshal.c",
			"line":	312,
			"primary_score":	999720,
			"second_score":	60593710
		}, {
			"file":	"Python/marshal.c",
			"line":	313,
			"primary_score":	999720,
			"second_score":	60593709
		}, {
			"file":	"Python/marshal.c",
			"line":	316,
			"primary_score":	999720,
			"second_score":	60593627
		}, {
			"file":	"Python/marshal.c",
			"line":	321,
			"primary_score":	999720,
			"second_score":	60593626
		}, {
			"file":	"Python/marshal.c",
			"line":	322,
			"primary_score":	999720,
			"second_score":	60593624
		}, {
			"file":	"Python/marshal.c",
			"line":	323,
			"primary_score":	999720,
			"second_score":	60593623
		}, {
			"file":	"Python/marshal.c",
			"line":	328,
			"primary_score":	999720,
			"second_score":	60593622
		}, {
			"file":	"Python/marshal.c",
			"line":	329,
			"primary_score":	999720,
			"second_score":	60593613
		}, {
			"file":	"Python/marshal.c",
			"line":	330,
			"primary_score":	999748,
			"second_score":	60597658
		}, {
			"file":	"Python/marshal.c",
			"line":	332,
			"primary_score":	999720,
			"second_score":	60594240
		}, {
			"file":	"Python/marshal.c",
			"line":	333,
			"primary_score":	999720,
			"second_score":	60594239
		}, {
			"file":	"Python/marshal.c",
			"line":	334,
			"primary_score":	999720,
			"second_score":	60594237
		}, {
			"file":	"Python/marshal.c",
			"line":	335,
			"primary_score":	999720,
			"second_score":	60594234
		}, {
			"file":	"Python/marshal.c",
			"line":	336,
			"primary_score":	999720,
			"second_score":	60594225
		}, {
			"file":	"Python/marshal.c",
			"line":	337,
			"primary_score":	999720,
			"second_score":	60594446
		}, {
			"file":	"Python/marshal.c",
			"line":	340,
			"primary_score":	999720,
			"second_score":	60601027
		}, {
			"file":	"Python/marshal.c",
			"line":	348,
			"primary_score":	999720,
			"second_score":	60601026
		}, {
			"file":	"Python/marshal.c",
			"line":	360,
			"primary_score":	999720,
			"second_score":	60601025
		}, {
			"file":	"Python/marshal.c",
			"line":	361,
			"primary_score":	999997,
			"second_score":	60665198
		}, {
			"file":	"Python/marshal.c",
			"line":	363,
			"primary_score":	999997,
			"second_score":	60665197
		}, {
			"file":	"Python/marshal.c",
			"line":	366,
			"primary_score":	999999,
			"second_score":	60665185
		}, {
			"file":	"Python/marshal.c",
			"line":	367,
			"primary_score":	999997,
			"second_score":	60665184
		}, {
			"file":	"Python/marshal.c",
			"line":	368,
			"primary_score":	999997,
			"second_score":	60665177
		}, {
			"file":	"Python/marshal.c",
			"line":	373,
			"primary_score":	999997,
			"second_score":	60665176
		}, {
			"file":	"Python/marshal.c",
			"line":	374,
			"primary_score":	999997,
			"second_score":	60665167
		}, {
			"file":	"Python/marshal.c",
			"line":	375,
			"primary_score":	999997,
			"second_score":	60665112
		}, {
			"file":	"Python/marshal.c",
			"line":	380,
			"primary_score":	999997,
			"second_score":	60665111
		}, {
			"file":	"Python/marshal.c",
			"line":	381,
			"primary_score":	999997,
			"second_score":	60664944
		}, {
			"file":	"Python/marshal.c",
			"line":	382,
			"primary_score":	999997,
			"second_score":	60664897
		}, {
			"file":	"Python/marshal.c",
			"line":	384,
			"primary_score":	999997,
			"second_score":	60664856
		}, {
			"file":	"Python/marshal.c",
			"line":	385,
			"primary_score":	999997,
			"second_score":	60664822
		}, {
			"file":	"Python/marshal.c",
			"line":	391,
			"primary_score":	999720,
			"second_score":	60601024
		}, {
			"file":	"Python/marshal.c",
			"line":	392,
			"primary_score":	999720,
			"second_score":	60601023
		}, {
			"file":	"Python/marshal.c",
			"line":	393,
			"primary_score":	999720,
			"second_score":	60601022
		}, {
			"file":	"Python/marshal.c",
			"line":	394,
			"primary_score":	999720,
			"second_score":	60601020
		}, {
			"file":	"Python/marshal.c",
			"line":	395,
			"primary_score":	999720,
			"second_score":	60601011
		}, {
			"file":	"Python/marshal.c",
			"line":	396,
			"primary_score":	999720,
			"second_score":	60601002
		}, {
			"file":	"Python/marshal.c",
			"line":	397,
			"primary_score":	999720,
			"second_score":	60600993
		}, {
			"file":	"Python/marshal.c",
			"line":	398,
			"primary_score":	999720,
			"second_score":	60600984
		}, {
			"file":	"Python/marshal.c",
			"line":	399,
			"primary_score":	999720,
			"second_score":	60600975
		}, {
			"file":	"Python/marshal.c",
			"line":	400,
			"primary_score":	999720,
			"second_score":	60600944
		}, {
			"file":	"Python/marshal.c",
			"line":	401,
			"primary_score":	999720,
			"second_score":	60596637
		}, {
			"file":	"Python/marshal.c",
			"line":	402,
			"primary_score":	999720,
			"second_score":	60594319
		}, {
			"file":	"Python/marshal.c",
			"line":	403,
			"primary_score":	999720,
			"second_score":	60594287
		}, {
			"file":	"Python/marshal.c",
			"line":	404,
			"primary_score":	999720,
			"second_score":	60594255
		}, {
			"file":	"Python/marshal.c",
			"line":	405,
			"primary_score":	999720,
			"second_score":	60594223
		}, {
			"file":	"Python/marshal.c",
			"line":	406,
			"primary_score":	999720,
			"second_score":	60593725
		}, {
			"file":	"Python/marshal.c",
			"line":	407,
			"primary_score":	999720,
			"second_score":	60593587
		}, {
			"file":	"Python/marshal.c",
			"line":	408,
			"primary_score":	999720,
			"second_score":	60593578
		}, {
			"file":	"Python/marshal.c",
			"line":	436,
			"primary_score":	999720,
			"second_score":	60593547
		}, {
			"file":	"Python/marshal.c",
			"line":	443,
			"primary_score":	999720,
			"second_score":	60593503
		}, {
			"file":	"Python/marshal.c",
			"line":	444,
			"primary_score":	999720,
			"second_score":	60593502
		}, {
			"file":	"Python/marshal.c",
			"line":	445,
			"primary_score":	999720,
			"second_score":	60593501
		}, {
			"file":	"Python/marshal.c",
			"line":	446,
			"primary_score":	999720,
			"second_score":	60593500
		}, {
			"file":	"Python/marshal.c",
			"line":	447,
			"primary_score":	999720,
			"second_score":	60593499
		}, {
			"file":	"Python/marshal.c",
			"line":	448,
			"primary_score":	999720,
			"second_score":	60593498
		}, {
			"file":	"Python/marshal.c",
			"line":	449,
			"primary_score":	999720,
			"second_score":	60593497
		}, {
			"file":	"Python/marshal.c",
			"line":	455,
			"primary_score":	999720,
			"second_score":	60715144
		}, {
			"file":	"Python/marshal.c",
			"line":	456,
			"primary_score":	999720,
			"second_score":	60715143
		}, {
			"file":	"Python/marshal.c",
			"line":	457,
			"primary_score":	999720,
			"second_score":	60715142
		}, {
			"file":	"Python/marshal.c",
			"line":	458,
			"primary_score":	999720,
			"second_score":	60715141
		}, {
			"file":	"Python/marshal.c",
			"line":	459,
			"primary_score":	999720,
			"second_score":	60715140
		}, {
			"file":	"Python/marshal.c",
			"line":	460,
			"primary_score":	999720,
			"second_score":	60715120
		}, {
			"file":	"Python/marshal.c",
			"line":	461,
			"primary_score":	999720,
			"second_score":	60715119
		}, {
			"file":	"Python/marshal.c",
			"line":	462,
			"primary_score":	999720,
			"second_score":	60593546
		}, {
			"file":	"Python/modsupport.c",
			"line":	260,
			"primary_score":	999961,
			"second_score":	151934815
		}, {
			"file":	"Python/mystrtoul.c",
			"line":	112,
			"primary_score":	999950,
			"second_score":	78477270
		}, {
			"file":	"Python/mystrtoul.c",
			"line":	117,
			"primary_score":	999950,
			"second_score":	78477269
		}, {
			"file":	"Python/mystrtoul.c",
			"line":	118,
			"primary_score":	999950,
			"second_score":	78477268
		}, {
			"file":	"Python/mystrtoul.c",
			"line":	121,
			"primary_score":	999983,
			"second_score":	112264092
		}, {
			"file":	"Python/mystrtoul.c",
			"line":	126,
			"primary_score":	999983,
			"second_score":	112264091
		}, {
			"file":	"Python/mystrtoul.c",
			"line":	127,
			"primary_score":	999983,
			"second_score":	112264090
		}, {
			"file":	"Python/peephole.c",
			"line":	117,
			"primary_score":	999998,
			"second_score":	49327195
		}, {
			"file":	"Python/peephole.c",
			"line":	118,
			"primary_score":	999998,
			"second_score":	49327194
		}, {
			"file":	"Python/peephole.c",
			"line":	119,
			"primary_score":	999998,
			"second_score":	49326622
		}, {
			"file":	"Python/peephole.c",
			"line":	120,
			"primary_score":	999998,
			"second_score":	49326572
		}, {
			"file":	"Python/peephole.c",
			"line":	165,
			"primary_score":	999961,
			"second_score":	53035325
		}, {
			"file":	"Python/peephole.c",
			"line":	171,
			"primary_score":	999965,
			"second_score":	263636892
		}, {
			"file":	"Python/peephole.c",
			"line":	174,
			"primary_score":	999984,
			"second_score":	52798162
		}, {
			"file":	"Python/peephole.c",
			"line":	177,
			"primary_score":	999992,
			"second_score":	52679393
		}, {
			"file":	"Python/peephole.c",
			"line":	180,
			"primary_score":	999948,
			"second_score":	51600731
		}, {
			"file":	"Python/peephole.c",
			"line":	183,
			"primary_score":	999973,
			"second_score":	10105262
		}, {
			"file":	"Python/peephole.c",
			"line":	186,
			"primary_score":	999999,
			"second_score":	52316334
		}, {
			"file":	"Python/peephole.c",
			"line":	189,
			"primary_score":	999979,
			"second_score":	52197213
		}, {
			"file":	"Python/peephole.c",
			"line":	192,
			"primary_score":	999998,
			"second_score":	52078259
		}, {
			"file":	"Python/peephole.c",
			"line":	195,
			"primary_score":	999998,
			"second_score":	51959149
		}, {
			"file":	"Python/peephole.c",
			"line":	198,
			"primary_score":	999998,
			"second_score":	51839931
		}, {
			"file":	"Python/peephole.c",
			"line":	201,
			"primary_score":	999998,
			"second_score":	51720640
		}, {
			"file":	"Python/peephole.c",
			"line":	210,
			"primary_score":	999968,
			"second_score":	51600729
		}, {
			"file":	"Python/peephole.c",
			"line":	211,
			"primary_score":	999968,
			"second_score":	51600638
		}, {
			"file":	"Python/peephole.c",
			"line":	212,
			"primary_score":	999968,
			"second_score":	51600573
		}, {
			"file":	"Python/peephole.c",
			"line":	219,
			"primary_score":	999926,
			"second_score":	51443985
		}, {
			"file":	"Python/peephole.c",
			"line":	220,
			"primary_score":	999939,
			"second_score":	51443984
		}, {
			"file":	"Python/peephole.c",
			"line":	221,
			"primary_score":	999939,
			"second_score":	51443962
		}, {
			"file":	"Python/peephole.c",
			"line":	241,
			"primary_score":	999855,
			"second_score":	9510846
		}, {
			"file":	"Python/peephole.c",
			"line":	242,
			"primary_score":	999855,
			"second_score":	9510845
		}, {
			"file":	"Python/peephole.c",
			"line":	243,
			"primary_score":	999855,
			"second_score":	9510844
		}, {
			"file":	"Python/peephole.c",
			"line":	246,
			"primary_score":	999855,
			"second_score":	9510843
		}, {
			"file":	"Python/peephole.c",
			"line":	247,
			"primary_score":	999855,
			"second_score":	9510842
		}, {
			"file":	"Python/peephole.c",
			"line":	250,
			"primary_score":	999855,
			"second_score":	9510841
		}, {
			"file":	"Python/peephole.c",
			"line":	251,
			"primary_score":	999855,
			"second_score":	9510840
		}, {
			"file":	"Python/peephole.c",
			"line":	254,
			"primary_score":	999855,
			"second_score":	9630157
		}, {
			"file":	"Python/peephole.c",
			"line":	257,
			"primary_score":	999995,
			"second_score":	9510210
		}, {
			"file":	"Python/peephole.c",
			"line":	260,
			"primary_score":	999991,
			"second_score":	9791465
		}, {
			"file":	"Python/peephole.c",
			"line":	268,
			"primary_score":	999855,
			"second_score":	9510209
		}, {
			"file":	"Python/peephole.c",
			"line":	269,
			"primary_score":	999999,
			"second_score":	9510208
		}, {
			"file":	"Python/peephole.c",
			"line":	270,
			"primary_score":	999999,
			"second_score":	9510117
		}, {
			"file":	"Python/peephole.c",
			"line":	271,
			"primary_score":	999999,
			"second_score":	9510046
		}, {
			"file":	"Python/peephole.c",
			"line":	275,
			"primary_score":	999855,
			"second_score":	9791463
		}, {
			"file":	"Python/peephole.c",
			"line":	276,
			"primary_score":	999855,
			"second_score":	9791462
		}, {
			"file":	"Python/peephole.c",
			"line":	280,
			"primary_score":	999855,
			"second_score":	9791445
		}, {
			"file":	"Python/peephole.c",
			"line":	283,
			"primary_score":	999855,
			"second_score":	9791442
		}, {
			"file":	"Python/peephole.c",
			"line":	284,
			"primary_score":	999855,
			"second_score":	9791441
		}, {
			"file":	"Python/peephole.c",
			"line":	285,
			"primary_score":	999855,
			"second_score":	9791439
		}, {
			"file":	"Python/peephole.c",
			"line":	286,
			"primary_score":	999855,
			"second_score":	9791438
		}, {
			"file":	"Python/peephole.c",
			"line":	474,
			"primary_score":	999989,
			"second_score":	54504938
		}, {
			"file":	"Python/peephole.c",
			"line":	475,
			"primary_score":	999989,
			"second_score":	54504937
		}, {
			"file":	"Python/peephole.c",
			"line":	476,
			"primary_score":	999989,
			"second_score":	54504936
		}, {
			"file":	"Python/peephole.c",
			"line":	496,
			"primary_score":	999999,
			"second_score":	14745200
		}, {
			"file":	"Python/peephole.c",
			"line":	540,
			"primary_score":	1000000,
			"second_score":	8653276
		}, {
			"file":	"Python/peephole.c",
			"line":	545,
			"primary_score":	999989,
			"second_score":	8333574
		}, {
			"file":	"Python/peephole.c",
			"line":	546,
			"primary_score":	999993,
			"second_score":	8333573
		}, {
			"file":	"Python/peephole.c",
			"line":	547,
			"primary_score":	999993,
			"second_score":	8333572
		}, {
			"file":	"Python/peephole.c",
			"line":	548,
			"primary_score":	999993,
			"second_score":	8333571
		}, {
			"file":	"Python/peephole.c",
			"line":	549,
			"primary_score":	999993,
			"second_score":	8333570
		}, {
			"file":	"Python/peephole.c",
			"line":	589,
			"primary_score":	999852,
			"second_score":	9510848
		}, {
			"file":	"Python/peephole.c",
			"line":	590,
			"primary_score":	999852,
			"second_score":	9510847
		}, {
			"file":	"Python/peephole.c",
			"line":	593,
			"primary_score":	999855,
			"second_score":	9791437
		}, {
			"file":	"Python/peephole.c",
			"line":	594,
			"primary_score":	999855,
			"second_score":	9791436
		}, {
			"file":	"Python/peephole.c",
			"line":	595,
			"primary_score":	999855,
			"second_score":	9791435
		}, {
			"file":	"Python/peephole.c",
			"line":	596,
			"primary_score":	999855,
			"second_score":	9791432
		}, {
			"file":	"Python/peephole.c",
			"line":	598,
			"primary_score":	999852,
			"second_score":	9510045
		}, {
			"file":	"Python/peephole.c",
			"line":	663,
			"primary_score":	999988,
			"second_score":	60950233
		}, {
			"file":	"Python/peephole.c",
			"line":	664,
			"primary_score":	999988,
			"second_score":	60950232
		}, {
			"file":	"Python/peephole.c",
			"line":	665,
			"primary_score":	999988,
			"second_score":	60950231
		}, {
			"file":	"Python/peephole.c",
			"line":	684,
			"primary_score":	999996,
			"second_score":	60870113
		}, {
			"file":	"Python/peephole.c",
			"line":	685,
			"primary_score":	999996,
			"second_score":	60870112
		}, {
			"file":	"Python/pystate.c",
			"line":	106,
			"primary_score":	999711,
			"second_score":	169854
		}, {
			"file":	"Python/pystate.c",
			"line":	107,
			"primary_score":	999711,
			"second_score":	169853
		}, {
			"file":	"Python/pystate.c",
			"line":	108,
			"primary_score":	999711,
			"second_score":	169831
		}, {
			"file":	"Python/pystate.c",
			"line":	110,
			"primary_score":	999711,
			"second_score":	169630
		}, {
			"file":	"Python/pystate.c",
			"line":	111,
			"primary_score":	999711,
			"second_score":	169623
		}, {
			"file":	"Python/pystate.c",
			"line":	112,
			"primary_score":	999711,
			"second_score":	167318
		}, {
			"file":	"Python/pystate.c",
			"line":	113,
			"primary_score":	999711,
			"second_score":	165871
		}, {
			"file":	"Python/pystate.c",
			"line":	114,
			"primary_score":	999711,
			"second_score":	165410
		}, {
			"file":	"Python/pystate.c",
			"line":	115,
			"primary_score":	999711,
			"second_score":	165408
		}, {
			"file":	"Python/pystate.c",
			"line":	116,
			"primary_score":	999711,
			"second_score":	131856
		}, {
			"file":	"Python/pystate.c",
			"line":	117,
			"primary_score":	999711,
			"second_score":	131854
		}, {
			"file":	"Python/pystate.c",
			"line":	118,
			"primary_score":	999711,
			"second_score":	131847
		}, {
			"file":	"Python/pystate.c",
			"line":	125,
			"primary_score":	999711,
			"second_score":	131273
		}, {
			"file":	"Python/pystate.c",
			"line":	128,
			"primary_score":	999711,
			"second_score":	131272
		}, {
			"file":	"Python/pystate.c",
			"line":	129,
			"primary_score":	999711,
			"second_score":	131271
		}, {
			"file":	"Python/pystate.c",
			"line":	137,
			"primary_score":	999711,
			"second_score":	131275
		}, {
			"file":	"Python/pystate.c",
			"line":	138,
			"primary_score":	999711,
			"second_score":	131274
		}, {
			"file":	"Python/pystate.c",
			"line":	139,
			"primary_score":	999711,
			"second_score":	131213
		}, {
			"file":	"Python/pystate.c",
			"line":	140,
			"primary_score":	999711,
			"second_score":	131191
		}, {
			"file":	"Python/pystate.c",
			"line":	141,
			"primary_score":	999711,
			"second_score":	131190
		}, {
			"file":	"Python/pystate.c",
			"line":	144,
			"primary_score":	999711,
			"second_score":	131189
		}, {
			"file":	"Python/pystate.c",
			"line":	145,
			"primary_score":	999711,
			"second_score":	131188
		}, {
			"file":	"Python/pystate.c",
			"line":	147,
			"primary_score":	999711,
			"second_score":	131187
		}, {
			"file":	"Python/pystate.c",
			"line":	149,
			"primary_score":	999711,
			"second_score":	131186
		}, {
			"file":	"Python/pystate.c",
			"line":	150,
			"primary_score":	999711,
			"second_score":	131185
		}, {
			"file":	"Python/pystate.c",
			"line":	151,
			"primary_score":	999711,
			"second_score":	131178
		}, {
			"file":	"Python/pystate.c",
			"line":	273,
			"primary_score":	999711,
			"second_score":	169830
		}, {
			"file":	"Python/pystate.c",
			"line":	277,
			"primary_score":	999711,
			"second_score":	169829
		}, {
			"file":	"Python/pystate.c",
			"line":	279,
			"primary_score":	999711,
			"second_score":	169827
		}, {
			"file":	"Python/pystate.c",
			"line":	280,
			"primary_score":	999711,
			"second_score":	169655
		}, {
			"file":	"Python/pystate.c",
			"line":	282,
			"primary_score":	999711,
			"second_score":	169653
		}, {
			"file":	"Python/pystate.c",
			"line":	283,
			"primary_score":	999711,
			"second_score":	169651
		}, {
			"file":	"Python/pystate.c",
			"line":	284,
			"primary_score":	999711,
			"second_score":	169649
		}, {
			"file":	"Python/pystate.c",
			"line":	286,
			"primary_score":	999711,
			"second_score":	169647
		}, {
			"file":	"Python/pystate.c",
			"line":	287,
			"primary_score":	999711,
			"second_score":	169640
		}, {
			"file":	"Python/pystate.c",
			"line":	288,
			"primary_score":	999711,
			"second_score":	169638
		}, {
			"file":	"Python/pystate.c",
			"line":	290,
			"primary_score":	999711,
			"second_score":	169636
		}, {
			"file":	"Python/pystate.c",
			"line":	291,
			"primary_score":	999711,
			"second_score":	169635
		}, {
			"file":	"Python/pystate.c",
			"line":	292,
			"primary_score":	999711,
			"second_score":	169634
		}, {
			"file":	"Python/pystate.c",
			"line":	293,
			"primary_score":	999711,
			"second_score":	169632
		}, {
			"file":	"Python/pystate.c",
			"line":	301,
			"primary_score":	999711,
			"second_score":	131255
		}, {
			"file":	"Python/pystate.c",
			"line":	302,
			"primary_score":	999711,
			"second_score":	131254
		}, {
			"file":	"Python/pystate.c",
			"line":	303,
			"primary_score":	999711,
			"second_score":	131253
		}, {
			"file":	"Python/pystate.c",
			"line":	304,
			"primary_score":	999711,
			"second_score":	131252
		}, {
			"file":	"Python/pystate.c",
			"line":	306,
			"primary_score":	999711,
			"second_score":	131251
		}, {
			"file":	"Python/pystate.c",
			"line":	307,
			"primary_score":	999711,
			"second_score":	131250
		}, {
			"file":	"Python/pystate.c",
			"line":	309,
			"primary_score":	999711,
			"second_score":	131249
		}, {
			"file":	"Python/pystate.c",
			"line":	310,
			"primary_score":	999711,
			"second_score":	131227
		}, {
			"file":	"Python/pystate.c",
			"line":	311,
			"primary_score":	999711,
			"second_score":	131226
		}, {
			"file":	"Python/pystate.c",
			"line":	314,
			"primary_score":	999711,
			"second_score":	131225
		}, {
			"file":	"Python/pystate.c",
			"line":	315,
			"primary_score":	999711,
			"second_score":	131224
		}, {
			"file":	"Python/pystate.c",
			"line":	330,
			"primary_score":	999711,
			"second_score":	131223
		}, {
			"file":	"Python/pystate.c",
			"line":	331,
			"primary_score":	999711,
			"second_score":	131222
		}, {
			"file":	"Python/pystate.c",
			"line":	332,
			"primary_score":	999711,
			"second_score":	131215
		}, {
			"file":	"Python/pystate.c",
			"line":	339,
			"primary_score":	999711,
			"second_score":	131270
		}, {
			"file":	"Python/pystate.c",
			"line":	341,
			"primary_score":	999711,
			"second_score":	131256
		}, {
			"file":	"Python/pystate.c",
			"line":	343,
			"primary_score":	999711,
			"second_score":	131214
		}, {
			"file":	"Python/pystate.c",
			"line":	382,
			"primary_score":	999711,
			"second_score":	131303
		}, {
			"file":	"Python/pystate.c",
			"line":	385,
			"primary_score":	999711,
			"second_score":	131289
		}, {
			"file":	"Python/pystate.c",
			"line":	402,
			"primary_score":	999711,
			"second_score":	131277
		}, {
			"file":	"Python/pystate.c",
			"line":	584,
			"primary_score":	999711,
			"second_score":	131307
		}, {
			"file":	"Python/pystate.c",
			"line":	585,
			"primary_score":	999711,
			"second_score":	131305
		}, {
			"file":	"Python/pystrtod.c",
			"line":	891,
			"primary_score":	999960,
			"second_score":	9661490
		}, {
			"file":	"Python/pystrtod.c",
			"line":	892,
			"primary_score":	999960,
			"second_score":	9661489
		}, {
			"file":	"Python/pystrtod.c",
			"line":	893,
			"primary_score":	999960,
			"second_score":	9661488
		}, {
			"file":	"Python/pystrtod.c",
			"line":	894,
			"primary_score":	999960,
			"second_score":	9661487
		}, {
			"file":	"Python/pystrtod.c",
			"line":	895,
			"primary_score":	999960,
			"second_score":	9661486
		}, {
			"file":	"Python/pystrtod.c",
			"line":	896,
			"primary_score":	999960,
			"second_score":	9661485
		}, {
			"file":	"Python/pystrtod.c",
			"line":	897,
			"primary_score":	999960,
			"second_score":	9661484
		}, {
			"file":	"Python/pystrtod.c",
			"line":	901,
			"primary_score":	999960,
			"second_score":	9661483
		}, {
			"file":	"Python/pystrtod.c",
			"line":	902,
			"primary_score":	999960,
			"second_score":	9661474
		}, {
			"file":	"Python/pystrtod.c",
			"line":	904,
			"primary_score":	999960,
			"second_score":	9661433
		}, {
			"file":	"Python/pystrtod.c",
			"line":	906,
			"primary_score":	999960,
			"second_score":	9661430
		}, {
			"file":	"Python/pystrtod.c",
			"line":	907,
			"primary_score":	999960,
			"second_score":	9661429
		}, {
			"file":	"Python/pystrtod.c",
			"line":	912,
			"primary_score":	999960,
			"second_score":	9661428
		}, {
			"file":	"Python/pystrtod.c",
			"line":	913,
			"primary_score":	999960,
			"second_score":	9661427
		}, {
			"file":	"Python/pystrtod.c",
			"line":	915,
			"primary_score":	999960,
			"second_score":	9661426
		}, {
			"file":	"Python/pystrtod.c",
			"line":	964,
			"primary_score":	999961,
			"second_score":	9661425
		}, {
			"file":	"Python/pystrtod.c",
			"line":	990,
			"primary_score":	999961,
			"second_score":	9661424
		}, {
			"file":	"Python/pystrtod.c",
			"line":	991,
			"primary_score":	999961,
			"second_score":	9661423
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1014,
			"primary_score":	999970,
			"second_score":	9661422
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1022,
			"primary_score":	999961,
			"second_score":	9661421
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1028,
			"primary_score":	999961,
			"second_score":	9661420
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1029,
			"primary_score":	999961,
			"second_score":	9661419
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1030,
			"primary_score":	999974,
			"second_score":	9661418
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1035,
			"primary_score":	999961,
			"second_score":	9661417
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1039,
			"primary_score":	999961,
			"second_score":	9661416
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1043,
			"primary_score":	999961,
			"second_score":	9661415
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1055,
			"primary_score":	999961,
			"second_score":	9661414
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1056,
			"primary_score":	999961,
			"second_score":	9661412
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1060,
			"primary_score":	999961,
			"second_score":	9661411
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1064,
			"primary_score":	999961,
			"second_score":	9661410
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1065,
			"primary_score":	999983,
			"second_score":	9661409
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1072,
			"primary_score":	999961,
			"second_score":	9661408
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1073,
			"primary_score":	999982,
			"second_score":	10279141
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1074,
			"primary_score":	999982,
			"second_score":	10279140
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1075,
			"primary_score":	999982,
			"second_score":	10279139
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1076,
			"primary_score":	999982,
			"second_score":	10279138
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1077,
			"primary_score":	999982,
			"second_score":	10279137
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1080,
			"primary_score":	999963,
			"second_score":	9661407
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1081,
			"primary_score":	999963,
			"second_score":	9661406
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1085,
			"primary_score":	999961,
			"second_score":	9661405
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1086,
			"primary_score":	999964,
			"second_score":	9661404
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1087,
			"primary_score":	999964,
			"second_score":	9661403
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1088,
			"primary_score":	999964,
			"second_score":	9661402
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1089,
			"primary_score":	999964,
			"second_score":	9661401
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1090,
			"primary_score":	999964,
			"second_score":	9661400
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1093,
			"primary_score":	999978,
			"second_score":	10279135
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1094,
			"primary_score":	999978,
			"second_score":	10279134
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1098,
			"primary_score":	999961,
			"second_score":	9661399
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1106,
			"primary_score":	999962,
			"second_score":	9661398
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1107,
			"primary_score":	999962,
			"second_score":	9661397
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1111,
			"primary_score":	999961,
			"second_score":	9661396
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1115,
			"primary_score":	999961,
			"second_score":	9661395
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1120,
			"primary_score":	999961,
			"second_score":	9661394
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1122,
			"primary_score":	999960,
			"second_score":	9661393
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1125,
			"primary_score":	999960,
			"second_score":	9661392
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1127,
			"primary_score":	999960,
			"second_score":	9661391
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1128,
			"primary_score":	999960,
			"second_score":	9661390
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1130,
			"primary_score":	999960,
			"second_score":	9661382
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1140,
			"primary_score":	999960,
			"second_score":	9661496
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1141,
			"primary_score":	999960,
			"second_score":	9661495
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1145,
			"primary_score":	999960,
			"second_score":	9661494
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1181,
			"primary_score":	999969,
			"second_score":	9661493
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1185,
			"primary_score":	999969,
			"second_score":	9661492
		}, {
			"file":	"Python/pystrtod.c",
			"line":	1192,
			"primary_score":	999960,
			"second_score":	9661491
		}, {
			"file":	"Python/pythonrun.c",
			"line":	472,
			"primary_score":	999711,
			"second_score":	169856
		}, {
			"file":	"Python/pythonrun.c",
			"line":	485,
			"primary_score":	999711,
			"second_score":	169855
		}, {
			"file":	"Python/pythonrun.c",
			"line":	493,
			"primary_score":	999711,
			"second_score":	131840
		}, {
			"file":	"Python/pythonrun.c",
			"line":	497,
			"primary_score":	999711,
			"second_score":	131308
		}, {
			"file":	"Python/pythonrun.c",
			"line":	501,
			"primary_score":	999711,
			"second_score":	131304
		}, {
			"file":	"Python/pythonrun.c",
			"line":	502,
			"primary_score":	999711,
			"second_score":	131276
		}, {
			"file":	"Python/pythonrun.c",
			"line":	505,
			"primary_score":	999711,
			"second_score":	131177
		}, {
			"file":	"Python/pythonrun.c",
			"line":	506,
			"primary_score":	999711,
			"second_score":	130391
		}, {
			"file":	"Python/pythonrun.c",
			"line":	507,
			"primary_score":	999711,
			"second_score":	130379
		}, {
			"file":	"Python/pythonrun.c",
			"line":	508,
			"primary_score":	999711,
			"second_score":	128527
		}, {
			"file":	"Python/pythonrun.c",
			"line":	509,
			"primary_score":	999711,
			"second_score":	53568
		}, {
			"file":	"Python/pythonrun.c",
			"line":	510,
			"primary_score":	999711,
			"second_score":	51565
		}, {
			"file":	"Python/pythonrun.c",
			"line":	511,
			"primary_score":	999711,
			"second_score":	49733
		}, {
			"file":	"Python/pythonrun.c",
			"line":	512,
			"primary_score":	999711,
			"second_score":	47209
		}, {
			"file":	"Python/pythonrun.c",
			"line":	513,
			"primary_score":	999711,
			"second_score":	47208
		}, {
			"file":	"Python/pythonrun.c",
			"line":	514,
			"primary_score":	999711,
			"second_score":	46680
		}, {
			"file":	"Python/pythonrun.c",
			"line":	515,
			"primary_score":	999711,
			"second_score":	46187
		}, {
			"file":	"Python/pythonrun.c",
			"line":	518,
			"primary_score":	999711,
			"second_score":	44904
		}, {
			"file":	"Python/pythonrun.c",
			"line":	521,
			"primary_score":	999711,
			"second_score":	5510
		}, {
			"file":	"Python/pythonrun.c",
			"line":	522,
			"primary_score":	999711,
			"second_score":	5509
		}, {
			"file":	"Python/pythonrun.c",
			"line":	523,
			"primary_score":	999711,
			"second_score":	5508
		}, {
			"file":	"Python/pythonrun.c",
			"line":	532,
			"primary_score":	999711,
			"second_score":	5507
		}, {
			"file":	"Python/pythonrun.c",
			"line":	547,
			"primary_score":	999711,
			"second_score":	5
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1820,
			"primary_score":	999933,
			"second_score":	8358493
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1821,
			"primary_score":	999933,
			"second_score":	8358492
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1822,
			"primary_score":	999933,
			"second_score":	8358491
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1823,
			"primary_score":	999933,
			"second_score":	8358452
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1826,
			"primary_score":	999933,
			"second_score":	8358451
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1827,
			"primary_score":	999933,
			"second_score":	8341645
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1831,
			"primary_score":	999936,
			"second_score":	8341644
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1836,
			"primary_score":	999937,
			"second_score":	8341643
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1837,
			"primary_score":	999937,
			"second_score":	8332272
		}, {
			"file":	"Python/pythonrun.c",
			"line":	1838,
			"primary_score":	999937,
			"second_score":	8332172
		}, {
			"file":	"Python/pythonrun.c",
			"line":	2000,
			"primary_score":	999976,
			"second_score":	8341647
		}, {
			"file":	"Python/pythonrun.c",
			"line":	2227,
			"primary_score":	999711,
			"second_score":	4
		}, {
			"file":	"Python/pythonrun.c",
			"line":	2230,
			"primary_score":	999711,
			"second_score":	3
		}, {
			"file":	"Python/pythonrun.c",
			"line":	2231,
			"primary_score":	999711,
			"second_score":	2
		}, {
			"file":	"Python/pythonrun.c",
			"line":	2239,
			"primary_score":	999711,
			"second_score":	1
		}, {
			"file":	"Python/structmember.c",
			"line":	32,
			"primary_score":	999933,
			"second_score":	7827187
		}, {
			"file":	"Python/symtable.c",
			"line":	255,
			"primary_score":	999961,
			"second_score":	49143998
		}, {
			"file":	"Python/symtable.c",
			"line":	258,
			"primary_score":	999963,
			"second_score":	8341265
		}, {
			"file":	"Python/symtable.c",
			"line":	262,
			"primary_score":	999963,
			"second_score":	8340448
		}, {
			"file":	"Python/symtable.c",
			"line":	393,
			"primary_score":	999971,
			"second_score":	154395323
		}, {
			"file":	"Python/symtable.c",
			"line":	402,
			"primary_score":	999971,
			"second_score":	154395322
		}, {
			"file":	"Python/symtable.c",
			"line":	408,
			"primary_score":	999971,
			"second_score":	154395321
		}, {
			"file":	"Python/symtable.c",
			"line":	409,
			"primary_score":	999971,
			"second_score":	154395260
		}, {
			"file":	"Python/symtable.c",
			"line":	411,
			"primary_score":	999971,
			"second_score":	154395226
		}, {
			"file":	"Python/symtable.c",
			"line":	413,
			"primary_score":	999971,
			"second_score":	154395203
		}, {
			"file":	"Python/symtable.c",
			"line":	460,
			"primary_score":	999983,
			"second_score":	154528955
		}, {
			"file":	"Python/symtable.c",
			"line":	461,
			"primary_score":	999983,
			"second_score":	154528894
		}, {
			"file":	"Python/symtable.c",
			"line":	587,
			"primary_score":	999952,
			"second_score":	154567167
		}, {
			"file":	"Python/symtable.c",
			"line":	590,
			"primary_score":	999952,
			"second_score":	154567131
		}, {
			"file":	"Python/symtable.c",
			"line":	595,
			"primary_score":	999990,
			"second_score":	249796955
		}, {
			"file":	"Python/symtable.c",
			"line":	609,
			"primary_score":	999990,
			"second_score":	249796954
		}, {
			"file":	"Python/symtable.c",
			"line":	610,
			"primary_score":	999990,
			"second_score":	249796951
		}, {
			"file":	"Python/symtable.c",
			"line":	613,
			"primary_score":	999954,
			"second_score":	154567130
		}, {
			"file":	"Python/symtable.c",
			"line":	618,
			"primary_score":	999954,
			"second_score":	154567109
		}, {
			"file":	"Python/symtable.c",
			"line":	621,
			"primary_score":	999954,
			"second_score":	154567065
		}, {
			"file":	"Python/symtable.c",
			"line":	624,
			"primary_score":	999954,
			"second_score":	154566982
		}, {
			"file":	"Python/symtable.c",
			"line":	942,
			"primary_score":	999967,
			"second_score":	154906795
		}, {
			"file":	"Python/symtable.c",
			"line":	943,
			"primary_score":	999967,
			"second_score":	154906794
		}, {
			"file":	"Python/symtable.c",
			"line":	944,
			"primary_score":	999967,
			"second_score":	154906787
		}, {
			"file":	"Python/symtable.c",
			"line":	946,
			"primary_score":	999967,
			"second_score":	154906786
		}, {
			"file":	"Python/symtable.c",
			"line":	947,
			"primary_score":	999967,
			"second_score":	154906750
		}, {
			"file":	"Python/symtable.c",
			"line":	948,
			"primary_score":	999967,
			"second_score":	154906747
		}, {
			"file":	"Python/symtable.c",
			"line":	949,
			"primary_score":	999968,
			"second_score":	154906746
		}, {
			"file":	"Python/symtable.c",
			"line":	993,
			"primary_score":	999971,
			"second_score":	154906632
		}, {
			"file":	"Python/symtable.c",
			"line":	994,
			"primary_score":	999971,
			"second_score":	154906631
		}, {
			"file":	"Python/symtable.c",
			"line":	995,
			"primary_score":	999977,
			"second_score":	154906595
		}, {
			"file":	"Python/symtable.c",
			"line":	997,
			"primary_score":	999971,
			"second_score":	154906574
		}, {
			"file":	"Python/symtable.c",
			"line":	998,
			"primary_score":	999971,
			"second_score":	154906563
		}, {
			"file":	"Python/symtable.c",
			"line":	1000,
			"primary_score":	999971,
			"second_score":	154906562
		}, {
			"file":	"Python/symtable.c",
			"line":	1004,
			"primary_score":	999971,
			"second_score":	154906516
		}, {
			"file":	"Python/symtable.c",
			"line":	1115,
			"primary_score":	999989,
			"second_score":	99916469
		}, {
			"file":	"Python/symtable.c",
			"line":	1190,
			"primary_score":	999975,
			"second_score":	110800652
		}, {
			"file":	"Python/symtable.c",
			"line":	1209,
			"primary_score":	999995,
			"second_score":	155034703
		}, {
			"file":	"Python/symtable.c",
			"line":	1225,
			"primary_score":	999978,
			"second_score":	99816056
		}, {
			"file":	"Python/symtable.c",
			"line":	1246,
			"primary_score":	999971,
			"second_score":	154906907
		}, {
			"file":	"Python/symtable.c",
			"line":	1247,
			"primary_score":	999971,
			"second_score":	154906906
		}, {
			"file":	"Python/symtable.c",
			"line":	1248,
			"primary_score":	999971,
			"second_score":	154906905
		}, {
			"file":	"Python/symtable.c",
			"line":	1249,
			"primary_score":	999971,
			"second_score":	154906904
		}, {
			"file":	"Python/symtable.c",
			"line":	1250,
			"primary_score":	999971,
			"second_score":	154906903
		}, {
			"file":	"Python/symtable.c",
			"line":	1251,
			"primary_score":	999971,
			"second_score":	154906796
		}, {
			"file":	"Python/symtable.c",
			"line":	1252,
			"primary_score":	999971,
			"second_score":	154906745
		}, {
			"file":	"Python/symtable.c",
			"line":	1254,
			"primary_score":	999971,
			"second_score":	154906744
		}, {
			"file":	"Python/symtable.c",
			"line":	1267,
			"primary_score":	999971,
			"second_score":	154906743
		}, {
			"file":	"Python/symtable.c",
			"line":	1270,
			"primary_score":	999971,
			"second_score":	154906509
		}, {
			"file":	"Python/symtable.c",
			"line":	1333,
			"primary_score":	999925,
			"second_score":	55247682
		}, {
			"file":	"Python/symtable.c",
			"line":	1335,
			"primary_score":	999925,
			"second_score":	55247681
		}, {
			"file":	"Python/symtable.c",
			"line":	1336,
			"primary_score":	999925,
			"second_score":	55247680
		}, {
			"file":	"Python/symtable.c",
			"line":	1337,
			"primary_score":	999925,
			"second_score":	55247679
		}, {
			"file":	"Python/symtable.c",
			"line":	1341,
			"primary_score":	999925,
			"second_score":	55247389
		}, {
			"file":	"Python/symtable.c",
			"line":	1342,
			"primary_score":	999925,
			"second_score":	55247237
		}, {
			"file":	"Python/symtable.c",
			"line":	1343,
			"primary_score":	999925,
			"second_score":	55246886
		}, {
			"file":	"Python/symtable.c",
			"line":	1345,
			"primary_score":	999925,
			"second_score":	55246820
		}, {
			"file":	"Python/symtable.c",
			"line":	1349,
			"primary_score":	999977,
			"second_score":	61593633
		}, {
			"file":	"Python/symtable.c",
			"line":	1350,
			"primary_score":	999977,
			"second_score":	61593468
		}, {
			"file":	"Python/symtable.c",
			"line":	1351,
			"primary_score":	999977,
			"second_score":	61593293
		}, {
			"file":	"Python/symtable.c",
			"line":	1425,
			"primary_score":	999971,
			"second_score":	110821226
		}, {
			"file":	"Python/symtable.c",
			"line":	1503,
			"primary_score":	999999,
			"second_score":	61583464
		}, {
			"file":	"Python/symtable.c",
			"line":	1518,
			"primary_score":	999916,
			"second_score":	87000514
		}, {
			"file":	"Python/symtable.c",
			"line":	1520,
			"primary_score":	999916,
			"second_score":	87000383
		}, {
			"file":	"Python/symtable.c",
			"line":	1570,
			"primary_score":	999982,
			"second_score":	148884589
		}, {
			"file":	"Python/symtable.c",
			"line":	1578,
			"primary_score":	999983,
			"second_score":	148884588
		}, {
			"file":	"Python/symtable.c",
			"line":	1579,
			"primary_score":	999983,
			"second_score":	148884587
		}, {
			"file":	"Python/symtable.c",
			"line":	1580,
			"primary_score":	999983,
			"second_score":	148884584
		}, {
			"file":	"Python/symtable.c",
			"line":	1613,
			"primary_score":	999980,
			"second_score":	125773210
		}, {
			"file":	"Python/symtable.c",
			"line":	1654,
			"primary_score":	999972,
			"second_score":	110786460
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	236,
			"primary_score":	999711,
			"second_score":	171140
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	237,
			"primary_score":	999711,
			"second_score":	171139
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	239,
			"primary_score":	999711,
			"second_score":	171138
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	240,
			"primary_score":	999711,
			"second_score":	171137
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	287,
			"primary_score":	999711,
			"second_score":	170529
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	288,
			"primary_score":	999711,
			"second_score":	170528
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	290,
			"primary_score":	999711,
			"second_score":	170527
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	292,
			"primary_score":	999711,
			"second_score":	170526
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	295,
			"primary_score":	999711,
			"second_score":	170525
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	296,
			"primary_score":	999711,
			"second_score":	170524
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	298,
			"primary_score":	999711,
			"second_score":	170522
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	310,
			"primary_score":	999711,
			"second_score":	131201
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	317,
			"primary_score":	999711,
			"second_score":	131211
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	318,
			"primary_score":	999711,
			"second_score":	131210
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	319,
			"primary_score":	999711,
			"second_score":	131209
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	320,
			"primary_score":	999711,
			"second_score":	131208
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	323,
			"primary_score":	999711,
			"second_score":	131207
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	325,
			"primary_score":	999711,
			"second_score":	131206
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	327,
			"primary_score":	999711,
			"second_score":	131205
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	328,
			"primary_score":	999711,
			"second_score":	131204
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	330,
			"primary_score":	999711,
			"second_score":	131203
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	331,
			"primary_score":	999711,
			"second_score":	171152
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	333,
			"primary_score":	999711,
			"second_score":	131202
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	339,
			"primary_score":	999711,
			"second_score":	131200
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	340,
			"primary_score":	999711,
			"second_score":	131199
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	344,
			"primary_score":	999711,
			"second_score":	131198
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	345,
			"primary_score":	999711,
			"second_score":	171147
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	346,
			"primary_score":	999711,
			"second_score":	171146
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	349,
			"primary_score":	999711,
			"second_score":	131197
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	353,
			"primary_score":	999711,
			"second_score":	131195
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	354,
			"primary_score":	999711,
			"second_score":	131194
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	362,
			"primary_score":	999711,
			"second_score":	131193
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	363,
			"primary_score":	999711,
			"second_score":	131192
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	369,
			"primary_score":	999711,
			"second_score":	131184
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	370,
			"primary_score":	999711,
			"second_score":	131183
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	372,
			"primary_score":	999711,
			"second_score":	131182
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	374,
			"primary_score":	999711,
			"second_score":	131181
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	375,
			"primary_score":	999711,
			"second_score":	131180
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	531,
			"primary_score":	999711,
			"second_score":	131212
		}, {
			"file":	"Python/thread_pthread.h",
			"line":	592,
			"primary_score":	999711,
			"second_score":	131306
		}, {
			"file":	"Python/traceback.c",
			"line":	67,
			"primary_score":	999713,
			"second_score":	1639815
		}],
	"mutation_info":	[{
			"file":	"Python/peephole.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"Python/peephole.c",
			"lines":	[{
					"line":	117,
					"switches":	[]
				}, {
					"line":	118,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	119,
							"begin_column":	7,
							"end_line":	119,
							"end_column":	7,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "(((PyTupleObject *)(newconst))->ob_item[i] = (constant))", "(((PyTupleObject *)(newconst))->ob_item[i] = (consts))", "(((PyTupleObject *)(newconst))->ob_item[i] = (newconst))", "(((PyTupleObject *)(newconst))->ob_item[i] = (tuple))", "PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (100)", "codestr[0] = (102)", "codestr[0] = (104)", "codestr[0] = (120)", "codestr[0] = (127)", "codestr[0] = (130)", "codestr[0] = (2)", "codestr[0] = (255)", "codestr[0] = (8)", "constant = (constant)", "constant = (consts)", "constant = (newconst)", "constant = (objs)[i]", "constant = (tuple)", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (102)", "len_consts = (104)", "len_consts = (120)", "len_consts = (127)", "len_consts = (130)", "len_consts = (2)", "len_consts = (255)", "len_consts = (8)", "len_consts = (i)", "len_consts = (len_consts)", "len_consts = (n)", "newconst = (constant)", "newconst = (consts)", "newconst = (newconst)", "newconst = (tuple)", "newconst = PyFrozenSet_New((constant))", "newconst = PyFrozenSet_New((consts))", "newconst = PyFrozenSet_New((newconst))", "newconst = PyFrozenSet_New((tuple))", "(((PyTupleObject *)(newconst))->ob_item[i] = constant)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__);\n}))", "(_Py_RefTotal++ , ((PyObject *)(constant))->ob_refcnt++)", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 100", "constant = objs[i]", "len_consts = (((PyVarObject *)(consts))->ob_size)", "newconst = PyFrozenSet_New(tuple)", "newconst = PyTuple_New(n)", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 0;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 100;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 102;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 104;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 120;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 127;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 130;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 1;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 255;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 2;\n", "if (__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}, {
									"case":	8,
									"scores":	[-4.336279859096055]
								}, {
									"case":	9,
									"scores":	[-4.336279859096055]
								}, {
									"case":	10,
									"scores":	[-4.336279859096055]
								}, {
									"case":	11,
									"scores":	[-4.336279859096055]
								}, {
									"case":	12,
									"scores":	[-4.336279859096055]
								}, {
									"case":	13,
									"scores":	[-4.336279859096055]
								}, {
									"case":	14,
									"scores":	[-4.336279859096055]
								}, {
									"case":	15,
									"scores":	[-4.336279859096055]
								}, {
									"case":	16,
									"scores":	[-4.336279859096055]
								}, {
									"case":	17,
									"scores":	[-4.336279859096055]
								}, {
									"case":	18,
									"scores":	[-4.336279859096055]
								}, {
									"case":	19,
									"scores":	[-4.336279859096055]
								}, {
									"case":	20,
									"scores":	[-4.336279859096055]
								}, {
									"case":	21,
									"scores":	[-4.336279859096055]
								}, {
									"case":	22,
									"scores":	[-4.336279859096055]
								}, {
									"case":	23,
									"scores":	[-4.336279859096055]
								}, {
									"case":	24,
									"scores":	[-4.336279859096055]
								}, {
									"case":	25,
									"scores":	[-4.336279859096055]
								}, {
									"case":	26,
									"scores":	[-4.336279859096055]
								}, {
									"case":	27,
									"scores":	[-4.336279859096055]
								}, {
									"case":	28,
									"scores":	[-4.336279859096055]
								}, {
									"case":	29,
									"scores":	[-4.336279859096055]
								}, {
									"case":	30,
									"scores":	[-4.336279859096055]
								}, {
									"case":	31,
									"scores":	[-4.336279859096055]
								}, {
									"case":	32,
									"scores":	[-4.336279859096055]
								}, {
									"case":	33,
									"scores":	[-4.336279859096055]
								}, {
									"case":	34,
									"scores":	[-4.336279859096055]
								}, {
									"case":	35,
									"scores":	[-4.336279859096055]
								}, {
									"case":	36,
									"scores":	[-4.336279859096055]
								}, {
									"case":	37,
									"scores":	[-4.336279859096055]
								}, {
									"case":	38,
									"scores":	[-4.336279859096055]
								}, {
									"case":	39,
									"scores":	[-4.336279859096055]
								}, {
									"case":	40,
									"scores":	[-4.336279859096055]
								}, {
									"case":	41,
									"scores":	[-4.336279859096055]
								}, {
									"case":	42,
									"scores":	[-4.336279859096055]
								}, {
									"case":	43,
									"scores":	[-4.336279859096055]
								}, {
									"case":	44,
									"scores":	[-4.336279859096055]
								}, {
									"case":	45,
									"scores":	[-4.336279859096055]
								}, {
									"case":	46,
									"scores":	[-4.336279859096055]
								}, {
									"case":	47,
									"scores":	[-4.336279859096055]
								}, {
									"case":	48,
									"scores":	[-4.336279859096055]
								}, {
									"case":	49,
									"scores":	[-4.336279859096055]
								}, {
									"case":	50,
									"scores":	[-4.336279859096055]
								}, {
									"case":	51,
									"scores":	[-4.336279859096055]
								}, {
									"case":	52,
									"scores":	[-4.336279859096055]
								}, {
									"case":	53,
									"scores":	[-4.336279859096055]
								}, {
									"case":	54,
									"scores":	[-4.336279859096055]
								}, {
									"case":	55,
									"scores":	[-4.336279859096055]
								}, {
									"case":	56,
									"scores":	[-4.336279859096055]
								}, {
									"case":	57,
									"scores":	[-4.336279859096055]
								}, {
									"case":	58,
									"scores":	[-4.336279859096055]
								}, {
									"case":	59,
									"scores":	[-4.336279859096055]
								}, {
									"case":	60,
									"scores":	[-4.336279859096055]
								}, {
									"case":	61,
									"scores":	[-4.336279859096055]
								}, {
									"case":	62,
									"scores":	[-4.336279859096055]
								}, {
									"case":	63,
									"scores":	[-4.336279859096055]
								}, {
									"case":	64,
									"scores":	[-4.336279859096055]
								}, {
									"case":	65,
									"scores":	[-4.336279859096055]
								}, {
									"case":	66,
									"scores":	[-4.336279859096055]
								}, {
									"case":	67,
									"scores":	[-4.336279859096055]
								}, {
									"case":	68,
									"scores":	[-4.336279859096055]
								}, {
									"case":	69,
									"scores":	[-4.336279859096055]
								}, {
									"case":	70,
									"scores":	[-4.336279859096055]
								}, {
									"case":	71,
									"scores":	[-4.336279859096055]
								}, {
									"case":	72,
									"scores":	[-4.336279859096055]
								}, {
									"case":	73,
									"scores":	[-4.336279859096055]
								}, {
									"case":	74,
									"scores":	[-4.336279859096055]
								}, {
									"case":	75,
									"scores":	[-4.336279859096055]
								}, {
									"case":	76,
									"scores":	[-4.336279859096055]
								}, {
									"case":	77,
									"scores":	[-4.336279859096055]
								}, {
									"case":	78,
									"scores":	[-4.336279859096055]
								}, {
									"case":	79,
									"scores":	[-4.336279859096055]
								}, {
									"case":	80,
									"scores":	[-4.336279859096055]
								}, {
									"case":	81,
									"scores":	[-4.336279859096055]
								}, {
									"case":	82,
									"scores":	[-4.336279859096055]
								}, {
									"case":	83,
									"scores":	[-8.2178572312860556, -5.4332920760960546, -6.7862420420960552, -7.1404986120960547, -6.9405632290960551, -6.328220949096055, -6.7862420420960552, -6.5281563320960547, -5.8094509490960551]
								}, {
									"case":	84,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	85,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	86,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	87,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	88,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	89,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	90,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	91,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	92,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}, {
									"case":	93,
									"scores":	[-10.740538861286055, -7.9559737060960547, -9.3089236720960535, -9.663180242096054, -9.4632448590960543, -8.8509025790960543, -9.3089236720960535, -9.050837962096054, -8.3321325790960543]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229], [], [2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121], [], [], [2122]],
							"begin_line":	119,
							"begin_column":	9,
							"end_line":	119,
							"end_column":	41,
							"patch_codes":	["if (!__is_neg(\"\", \"L119\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    newconst = PyFrozenSet_New(tuple);\n", "PyByteArray_Concat(tuple, 0)", "PyByteArray_Concat(tuple, PyExc_ArithmeticError)", "PyByteArray_Concat(tuple, PyExc_AssertionError)", "PyByteArray_Concat(tuple, PyExc_AttributeError)", "PyByteArray_Concat(tuple, PyExc_BaseException)", "PyByteArray_Concat(tuple, PyExc_EOFError)", "PyByteArray_Concat(tuple, PyExc_EnvironmentError)", "PyByteArray_Concat(tuple, PyExc_Exception)", "PyByteArray_Concat(tuple, PyExc_FloatingPointError)", "PyByteArray_Concat(tuple, PyExc_GeneratorExit)", "PyByteArray_Concat(tuple, PyExc_IOError)", "PyByteArray_Concat(tuple, PyExc_ImportError)", "PyByteArray_Concat(tuple, PyExc_IndentationError)", "PyByteArray_Concat(tuple, PyExc_IndexError)", "PyByteArray_Concat(tuple, PyExc_KeyError)", "PyByteArray_Concat(tuple, PyExc_KeyboardInterrupt)", "PyByteArray_Concat(tuple, PyExc_LookupError)", "PyByteArray_Concat(tuple, PyExc_MemoryError)", "PyByteArray_Concat(tuple, PyExc_NameError)", "PyByteArray_Concat(tuple, PyExc_NotImplementedError)", "PyByteArray_Concat(tuple, PyExc_OSError)", "PyByteArray_Concat(tuple, PyExc_OverflowError)", "PyByteArray_Concat(tuple, PyExc_ReferenceError)", "PyByteArray_Concat(tuple, PyExc_RuntimeError)", "PyByteArray_Concat(tuple, PyExc_StopIteration)", "PyByteArray_Concat(tuple, PyExc_SyntaxError)", "PyByteArray_Concat(tuple, PyExc_SystemError)", "PyByteArray_Concat(tuple, PyExc_SystemExit)", "PyByteArray_Concat(tuple, PyExc_TabError)", "PyByteArray_Concat(tuple, PyExc_TypeError)", "PyByteArray_Concat(tuple, PyExc_UnboundLocalError)", "PyByteArray_Concat(tuple, _PySys_ProfileFunc)", "PyByteArray_Concat(tuple, _PySys_TraceFunc)", "PyByteArray_Concat(tuple, constant)", "PyByteArray_Concat(tuple, consts)", "PyByteArray_Concat(tuple, newconst)", "PyByteArray_Concat(tuple, tuple)", "PyBytes_Repr(tuple, 0)", "PyBytes_Repr(tuple, 1)", "PyBytes_Repr(tuple, 100)", "PyBytes_Repr(tuple, 102)", "PyBytes_Repr(tuple, 104)", "PyBytes_Repr(tuple, 120)", "PyBytes_Repr(tuple, 127)", "PyBytes_Repr(tuple, 130)", "PyBytes_Repr(tuple, 2)", "PyBytes_Repr(tuple, 255)", "PyBytes_Repr(tuple, 8)", "PyBytes_Repr(tuple, Py_BytesWarningFlag)", "PyBytes_Repr(tuple, Py_DebugFlag)", "PyBytes_Repr(tuple, Py_DontWriteBytecodeFlag)", "PyBytes_Repr(tuple, Py_FrozenFlag)", "PyBytes_Repr(tuple, Py_HasFileSystemDefaultEncoding)", "PyBytes_Repr(tuple, Py_IgnoreEnvironmentFlag)", "PyBytes_Repr(tuple, Py_InspectFlag)", "PyBytes_Repr(tuple, Py_InteractiveFlag)", "PyBytes_Repr(tuple, Py_NoSiteFlag)", "PyBytes_Repr(tuple, Py_NoUserSiteDirectory)", "PyBytes_Repr(tuple, Py_OptimizeFlag)", "PyBytes_Repr(tuple, Py_QuietFlag)", "PyBytes_Repr(tuple, Py_UnbufferedStdioFlag)", "PyBytes_Repr(tuple, Py_UseClassExceptionsFlag)", "PyBytes_Repr(tuple, Py_VerboseFlag)", "PyBytes_Repr(tuple, _Py_CheckRecursionLimit)", "PyCallIter_New(tuple, 0)", "PyCallIter_New(tuple, PyExc_ArithmeticError)", "PyCallIter_New(tuple, PyExc_AssertionError)", "PyCallIter_New(tuple, PyExc_AttributeError)", "PyCallIter_New(tuple, PyExc_BaseException)", "PyCallIter_New(tuple, PyExc_EOFError)", "PyCallIter_New(tuple, PyExc_EnvironmentError)", "PyCallIter_New(tuple, PyExc_Exception)", "PyCallIter_New(tuple, PyExc_FloatingPointError)", "PyCallIter_New(tuple, PyExc_GeneratorExit)", "PyCallIter_New(tuple, PyExc_IOError)", "PyCallIter_New(tuple, PyExc_ImportError)", "PyCallIter_New(tuple, PyExc_IndentationError)", "PyCallIter_New(tuple, PyExc_IndexError)", "PyCallIter_New(tuple, PyExc_KeyError)", "PyCallIter_New(tuple, PyExc_KeyboardInterrupt)", "PyCallIter_New(tuple, PyExc_LookupError)", "PyCallIter_New(tuple, PyExc_MemoryError)", "PyCallIter_New(tuple, PyExc_NameError)", "PyCallIter_New(tuple, PyExc_NotImplementedError)", "PyCallIter_New(tuple, PyExc_OSError)", "PyCallIter_New(tuple, PyExc_OverflowError)", "PyCallIter_New(tuple, PyExc_ReferenceError)", "PyCallIter_New(tuple, PyExc_RuntimeError)", "PyCallIter_New(tuple, PyExc_StopIteration)", "PyCallIter_New(tuple, PyExc_SyntaxError)", "PyCallIter_New(tuple, PyExc_SystemError)", "PyCallIter_New(tuple, PyExc_SystemExit)", "PyCallIter_New(tuple, PyExc_TabError)", "PyCallIter_New(tuple, PyExc_TypeError)", "PyCallIter_New(tuple, PyExc_UnboundLocalError)", "PyCallIter_New(tuple, _PySys_ProfileFunc)", "PyCallIter_New(tuple, _PySys_TraceFunc)", "PyCallIter_New(tuple, constant)", "PyCallIter_New(tuple, consts)", "PyCallIter_New(tuple, newconst)", "PyCallIter_New(tuple, tuple)", "PyDict_GetItem(tuple, 0)", "PyDict_GetItem(tuple, PyExc_ArithmeticError)", "PyDict_GetItem(tuple, PyExc_AssertionError)", "PyDict_GetItem(tuple, PyExc_AttributeError)", "PyDict_GetItem(tuple, PyExc_BaseException)", "PyDict_GetItem(tuple, PyExc_EOFError)", "PyDict_GetItem(tuple, PyExc_EnvironmentError)", "PyDict_GetItem(tuple, PyExc_Exception)", "PyDict_GetItem(tuple, PyExc_FloatingPointError)", "PyDict_GetItem(tuple, PyExc_GeneratorExit)", "PyDict_GetItem(tuple, PyExc_IOError)", "PyDict_GetItem(tuple, PyExc_ImportError)", "PyDict_GetItem(tuple, PyExc_IndentationError)", "PyDict_GetItem(tuple, PyExc_IndexError)", "PyDict_GetItem(tuple, PyExc_KeyError)", "PyDict_GetItem(tuple, PyExc_KeyboardInterrupt)", "PyDict_GetItem(tuple, PyExc_LookupError)", "PyDict_GetItem(tuple, PyExc_MemoryError)", "PyDict_GetItem(tuple, PyExc_NameError)", "PyDict_GetItem(tuple, PyExc_NotImplementedError)", "PyDict_GetItem(tuple, PyExc_OSError)", "PyDict_GetItem(tuple, PyExc_OverflowError)", "PyDict_GetItem(tuple, PyExc_ReferenceError)", "PyDict_GetItem(tuple, PyExc_RuntimeError)", "PyDict_GetItem(tuple, PyExc_StopIteration)", "PyDict_GetItem(tuple, PyExc_SyntaxError)", "PyDict_GetItem(tuple, PyExc_SystemError)", "PyDict_GetItem(tuple, PyExc_SystemExit)", "PyDict_GetItem(tuple, PyExc_TabError)", "PyDict_GetItem(tuple, PyExc_TypeError)", "PyDict_GetItem(tuple, PyExc_UnboundLocalError)", "PyDict_GetItem(tuple, _PySys_ProfileFunc)", "PyDict_GetItem(tuple, _PySys_TraceFunc)", "PyDict_GetItem(tuple, constant)", "PyDict_GetItem(tuple, consts)", "PyDict_GetItem(tuple, newconst)", "PyDict_GetItem(tuple, tuple)", "PyDict_GetItemString(tuple, 0)", "PyDict_GetItemString(tuple, Py_FileSystemDefaultEncoding)", "PyDict_GetItemWithError(tuple, 0)", "PyDict_GetItemWithError(tuple, PyExc_ArithmeticError)", "PyDict_GetItemWithError(tuple, PyExc_AssertionError)", "PyDict_GetItemWithError(tuple, PyExc_AttributeError)", "PyDict_GetItemWithError(tuple, PyExc_BaseException)", "PyDict_GetItemWithError(tuple, PyExc_EOFError)", "PyDict_GetItemWithError(tuple, PyExc_EnvironmentError)", "PyDict_GetItemWithError(tuple, PyExc_Exception)", "PyDict_GetItemWithError(tuple, PyExc_FloatingPointError)", "PyDict_GetItemWithError(tuple, PyExc_GeneratorExit)", "PyDict_GetItemWithError(tuple, PyExc_IOError)", "PyDict_GetItemWithError(tuple, PyExc_ImportError)", "PyDict_GetItemWithError(tuple, PyExc_IndentationError)", "PyDict_GetItemWithError(tuple, PyExc_IndexError)", "PyDict_GetItemWithError(tuple, PyExc_KeyError)", "PyDict_GetItemWithError(tuple, PyExc_KeyboardInterrupt)", "PyDict_GetItemWithError(tuple, PyExc_LookupError)", "PyDict_GetItemWithError(tuple, PyExc_MemoryError)", "PyDict_GetItemWithError(tuple, PyExc_NameError)", "PyDict_GetItemWithError(tuple, PyExc_NotImplementedError)", "PyDict_GetItemWithError(tuple, PyExc_OSError)", "PyDict_GetItemWithError(tuple, PyExc_OverflowError)", "PyDict_GetItemWithError(tuple, PyExc_ReferenceError)", "PyDict_GetItemWithError(tuple, PyExc_RuntimeError)", "PyDict_GetItemWithError(tuple, PyExc_StopIteration)", "PyDict_GetItemWithError(tuple, PyExc_SyntaxError)", "PyDict_GetItemWithError(tuple, PyExc_SystemError)", "PyDict_GetItemWithError(tuple, PyExc_SystemExit)", "PyDict_GetItemWithError(tuple, PyExc_TabError)", "PyDict_GetItemWithError(tuple, PyExc_TypeError)", "PyDict_GetItemWithError(tuple, PyExc_UnboundLocalError)", "PyDict_GetItemWithError(tuple, _PySys_ProfileFunc)", "PyDict_GetItemWithError(tuple, _PySys_TraceFunc)", "PyDict_GetItemWithError(tuple, constant)", "PyDict_GetItemWithError(tuple, consts)", "PyDict_GetItemWithError(tuple, newconst)", "PyDict_GetItemWithError(tuple, tuple)", "PyErr_SetFromErrnoWithFilename(tuple, 0)", "PyErr_SetFromErrnoWithFilename(tuple, Py_FileSystemDefaultEncoding)", "PyErr_SetFromErrnoWithFilenameObject(tuple, 0)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_ArithmeticError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_AssertionError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_AttributeError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_BaseException)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_EOFError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_EnvironmentError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_Exception)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_FloatingPointError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_GeneratorExit)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_IOError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_ImportError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_IndentationError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_IndexError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_KeyError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_KeyboardInterrupt)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_LookupError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_MemoryError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_NameError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_NotImplementedError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_OSError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_OverflowError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_ReferenceError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_RuntimeError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_StopIteration)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_SyntaxError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_SystemError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_SystemExit)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_TabError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_TypeError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, PyExc_UnboundLocalError)", "PyErr_SetFromErrnoWithFilenameObject(tuple, _PySys_ProfileFunc)", "PyErr_SetFromErrnoWithFilenameObject(tuple, _PySys_TraceFunc)", "PyErr_SetFromErrnoWithFilenameObject(tuple, constant)", "PyErr_SetFromErrnoWithFilenameObject(tuple, consts)", "PyErr_SetFromErrnoWithFilenameObject(tuple, newconst)", "PyErr_SetFromErrnoWithFilenameObject(tuple, tuple)", "PyFile_GetLine(tuple, 0)", "PyFile_GetLine(tuple, 1)", "PyFile_GetLine(tuple, 100)", "PyFile_GetLine(tuple, 102)", "PyFile_GetLine(tuple, 104)", "PyFile_GetLine(tuple, 120)", "PyFile_GetLine(tuple, 127)", "PyFile_GetLine(tuple, 130)", "PyFile_GetLine(tuple, 2)", "PyFile_GetLine(tuple, 255)", "PyFile_GetLine(tuple, 8)", "PyFile_GetLine(tuple, Py_BytesWarningFlag)", "PyFile_GetLine(tuple, Py_DebugFlag)", "PyFile_GetLine(tuple, Py_DontWriteBytecodeFlag)", "PyFile_GetLine(tuple, Py_FrozenFlag)", "PyFile_GetLine(tuple, Py_HasFileSystemDefaultEncoding)", "PyFile_GetLine(tuple, Py_IgnoreEnvironmentFlag)", "PyFile_GetLine(tuple, Py_InspectFlag)", "PyFile_GetLine(tuple, Py_InteractiveFlag)", "PyFile_GetLine(tuple, Py_NoSiteFlag)", "PyFile_GetLine(tuple, Py_NoUserSiteDirectory)", "PyFile_GetLine(tuple, Py_OptimizeFlag)", "PyFile_GetLine(tuple, Py_QuietFlag)", "PyFile_GetLine(tuple, Py_UnbufferedStdioFlag)", "PyFile_GetLine(tuple, Py_UseClassExceptionsFlag)", "PyFile_GetLine(tuple, Py_VerboseFlag)", "PyFile_GetLine(tuple, _Py_CheckRecursionLimit)", "PyFunction_New(tuple, 0)", "PyFunction_New(tuple, PyExc_ArithmeticError)", "PyFunction_New(tuple, PyExc_AssertionError)", "PyFunction_New(tuple, PyExc_AttributeError)", "PyFunction_New(tuple, PyExc_BaseException)", "PyFunction_New(tuple, PyExc_EOFError)", "PyFunction_New(tuple, PyExc_EnvironmentError)", "PyFunction_New(tuple, PyExc_Exception)", "PyFunction_New(tuple, PyExc_FloatingPointError)", "PyFunction_New(tuple, PyExc_GeneratorExit)", "PyFunction_New(tuple, PyExc_IOError)", "PyFunction_New(tuple, PyExc_ImportError)", "PyFunction_New(tuple, PyExc_IndentationError)", "PyFunction_New(tuple, PyExc_IndexError)", "PyFunction_New(tuple, PyExc_KeyError)", "PyFunction_New(tuple, PyExc_KeyboardInterrupt)", "PyFunction_New(tuple, PyExc_LookupError)", "PyFunction_New(tuple, PyExc_MemoryError)", "PyFunction_New(tuple, PyExc_NameError)", "PyFunction_New(tuple, PyExc_NotImplementedError)", "PyFunction_New(tuple, PyExc_OSError)", "PyFunction_New(tuple, PyExc_OverflowError)", "PyFunction_New(tuple, PyExc_ReferenceError)", "PyFunction_New(tuple, PyExc_RuntimeError)", "PyFunction_New(tuple, PyExc_StopIteration)", "PyFunction_New(tuple, PyExc_SyntaxError)", "PyFunction_New(tuple, PyExc_SystemError)", "PyFunction_New(tuple, PyExc_SystemExit)", "PyFunction_New(tuple, PyExc_TabError)", "PyFunction_New(tuple, PyExc_TypeError)", "PyFunction_New(tuple, PyExc_UnboundLocalError)", "PyFunction_New(tuple, _PySys_ProfileFunc)", "PyFunction_New(tuple, _PySys_TraceFunc)", "PyFunction_New(tuple, constant)", "PyFunction_New(tuple, consts)", "PyFunction_New(tuple, newconst)", "PyFunction_New(tuple, tuple)", "PyList_GetItem(tuple, 0)", "PyList_GetItem(tuple, 1)", "PyList_GetItem(tuple, 100)", "PyList_GetItem(tuple, 102)", "PyList_GetItem(tuple, 104)", "PyList_GetItem(tuple, 120)", "PyList_GetItem(tuple, 127)", "PyList_GetItem(tuple, 130)", "PyList_GetItem(tuple, 2)", "PyList_GetItem(tuple, 255)", "PyList_GetItem(tuple, 8)", "PyList_GetItem(tuple, i)", "PyList_GetItem(tuple, len_consts)", "PyList_GetItem(tuple, n)", "PyMapping_GetItemString(tuple, 0)", "PyMapping_GetItemString(tuple, PyStructSequence_UnnamedField)", "PyMapping_GetItemString(tuple, _Py_PackageContext)", "PyMethod_New(tuple, 0)", "PyMethod_New(tuple, PyExc_ArithmeticError)", "PyMethod_New(tuple, PyExc_AssertionError)", "PyMethod_New(tuple, PyExc_AttributeError)", "PyMethod_New(tuple, PyExc_BaseException)", "PyMethod_New(tuple, PyExc_EOFError)", "PyMethod_New(tuple, PyExc_EnvironmentError)", "PyMethod_New(tuple, PyExc_Exception)", "PyMethod_New(tuple, PyExc_FloatingPointError)", "PyMethod_New(tuple, PyExc_GeneratorExit)", "PyMethod_New(tuple, PyExc_IOError)", "PyMethod_New(tuple, PyExc_ImportError)", "PyMethod_New(tuple, PyExc_IndentationError)", "PyMethod_New(tuple, PyExc_IndexError)", "PyMethod_New(tuple, PyExc_KeyError)", "PyMethod_New(tuple, PyExc_KeyboardInterrupt)", "PyMethod_New(tuple, PyExc_LookupError)", "PyMethod_New(tuple, PyExc_MemoryError)", "PyMethod_New(tuple, PyExc_NameError)", "PyMethod_New(tuple, PyExc_NotImplementedError)", "PyMethod_New(tuple, PyExc_OSError)", "PyMethod_New(tuple, PyExc_OverflowError)", "PyMethod_New(tuple, PyExc_ReferenceError)", "PyMethod_New(tuple, PyExc_RuntimeError)", "PyMethod_New(tuple, PyExc_StopIteration)", "PyMethod_New(tuple, PyExc_SyntaxError)", "PyMethod_New(tuple, PyExc_SystemError)", "PyMethod_New(tuple, PyExc_SystemExit)", "PyMethod_New(tuple, PyExc_TabError)", "PyMethod_New(tuple, PyExc_TypeError)", "PyMethod_New(tuple, PyExc_UnboundLocalError)", "PyMethod_New(tuple, _PySys_ProfileFunc)", "PyMethod_New(tuple, _PySys_TraceFunc)", "PyMethod_New(tuple, constant)", "PyMethod_New(tuple, consts)", "PyMethod_New(tuple, newconst)", "PyMethod_New(tuple, tuple)", "PyNumber_Add(tuple, 0)", "PyNumber_Add(tuple, PyExc_ArithmeticError)", "PyNumber_Add(tuple, PyExc_AssertionError)", "PyNumber_Add(tuple, PyExc_AttributeError)", "PyNumber_Add(tuple, PyExc_BaseException)", "PyNumber_Add(tuple, PyExc_EOFError)", "PyNumber_Add(tuple, PyExc_EnvironmentError)", "PyNumber_Add(tuple, PyExc_Exception)", "PyNumber_Add(tuple, PyExc_FloatingPointError)", "PyNumber_Add(tuple, PyExc_GeneratorExit)", "PyNumber_Add(tuple, PyExc_IOError)", "PyNumber_Add(tuple, PyExc_ImportError)", "PyNumber_Add(tuple, PyExc_IndentationError)", "PyNumber_Add(tuple, PyExc_IndexError)", "PyNumber_Add(tuple, PyExc_KeyError)", "PyNumber_Add(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Add(tuple, PyExc_LookupError)", "PyNumber_Add(tuple, PyExc_MemoryError)", "PyNumber_Add(tuple, PyExc_NameError)", "PyNumber_Add(tuple, PyExc_NotImplementedError)", "PyNumber_Add(tuple, PyExc_OSError)", "PyNumber_Add(tuple, PyExc_OverflowError)", "PyNumber_Add(tuple, PyExc_ReferenceError)", "PyNumber_Add(tuple, PyExc_RuntimeError)", "PyNumber_Add(tuple, PyExc_StopIteration)", "PyNumber_Add(tuple, PyExc_SyntaxError)", "PyNumber_Add(tuple, PyExc_SystemError)", "PyNumber_Add(tuple, PyExc_SystemExit)", "PyNumber_Add(tuple, PyExc_TabError)", "PyNumber_Add(tuple, PyExc_TypeError)", "PyNumber_Add(tuple, PyExc_UnboundLocalError)", "PyNumber_Add(tuple, _PySys_ProfileFunc)", "PyNumber_Add(tuple, _PySys_TraceFunc)", "PyNumber_Add(tuple, constant)", "PyNumber_Add(tuple, consts)", "PyNumber_Add(tuple, newconst)", "PyNumber_Add(tuple, tuple)", "PyNumber_And(tuple, 0)", "PyNumber_And(tuple, PyExc_ArithmeticError)", "PyNumber_And(tuple, PyExc_AssertionError)", "PyNumber_And(tuple, PyExc_AttributeError)", "PyNumber_And(tuple, PyExc_BaseException)", "PyNumber_And(tuple, PyExc_EOFError)", "PyNumber_And(tuple, PyExc_EnvironmentError)", "PyNumber_And(tuple, PyExc_Exception)", "PyNumber_And(tuple, PyExc_FloatingPointError)", "PyNumber_And(tuple, PyExc_GeneratorExit)", "PyNumber_And(tuple, PyExc_IOError)", "PyNumber_And(tuple, PyExc_ImportError)", "PyNumber_And(tuple, PyExc_IndentationError)", "PyNumber_And(tuple, PyExc_IndexError)", "PyNumber_And(tuple, PyExc_KeyError)", "PyNumber_And(tuple, PyExc_KeyboardInterrupt)", "PyNumber_And(tuple, PyExc_LookupError)", "PyNumber_And(tuple, PyExc_MemoryError)", "PyNumber_And(tuple, PyExc_NameError)", "PyNumber_And(tuple, PyExc_NotImplementedError)", "PyNumber_And(tuple, PyExc_OSError)", "PyNumber_And(tuple, PyExc_OverflowError)", "PyNumber_And(tuple, PyExc_ReferenceError)", "PyNumber_And(tuple, PyExc_RuntimeError)", "PyNumber_And(tuple, PyExc_StopIteration)", "PyNumber_And(tuple, PyExc_SyntaxError)", "PyNumber_And(tuple, PyExc_SystemError)", "PyNumber_And(tuple, PyExc_SystemExit)", "PyNumber_And(tuple, PyExc_TabError)", "PyNumber_And(tuple, PyExc_TypeError)", "PyNumber_And(tuple, PyExc_UnboundLocalError)", "PyNumber_And(tuple, _PySys_ProfileFunc)", "PyNumber_And(tuple, _PySys_TraceFunc)", "PyNumber_And(tuple, constant)", "PyNumber_And(tuple, consts)", "PyNumber_And(tuple, newconst)", "PyNumber_And(tuple, tuple)", "PyNumber_Divmod(tuple, 0)", "PyNumber_Divmod(tuple, PyExc_ArithmeticError)", "PyNumber_Divmod(tuple, PyExc_AssertionError)", "PyNumber_Divmod(tuple, PyExc_AttributeError)", "PyNumber_Divmod(tuple, PyExc_BaseException)", "PyNumber_Divmod(tuple, PyExc_EOFError)", "PyNumber_Divmod(tuple, PyExc_EnvironmentError)", "PyNumber_Divmod(tuple, PyExc_Exception)", "PyNumber_Divmod(tuple, PyExc_FloatingPointError)", "PyNumber_Divmod(tuple, PyExc_GeneratorExit)", "PyNumber_Divmod(tuple, PyExc_IOError)", "PyNumber_Divmod(tuple, PyExc_ImportError)", "PyNumber_Divmod(tuple, PyExc_IndentationError)", "PyNumber_Divmod(tuple, PyExc_IndexError)", "PyNumber_Divmod(tuple, PyExc_KeyError)", "PyNumber_Divmod(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Divmod(tuple, PyExc_LookupError)", "PyNumber_Divmod(tuple, PyExc_MemoryError)", "PyNumber_Divmod(tuple, PyExc_NameError)", "PyNumber_Divmod(tuple, PyExc_NotImplementedError)", "PyNumber_Divmod(tuple, PyExc_OSError)", "PyNumber_Divmod(tuple, PyExc_OverflowError)", "PyNumber_Divmod(tuple, PyExc_ReferenceError)", "PyNumber_Divmod(tuple, PyExc_RuntimeError)", "PyNumber_Divmod(tuple, PyExc_StopIteration)", "PyNumber_Divmod(tuple, PyExc_SyntaxError)", "PyNumber_Divmod(tuple, PyExc_SystemError)", "PyNumber_Divmod(tuple, PyExc_SystemExit)", "PyNumber_Divmod(tuple, PyExc_TabError)", "PyNumber_Divmod(tuple, PyExc_TypeError)", "PyNumber_Divmod(tuple, PyExc_UnboundLocalError)", "PyNumber_Divmod(tuple, _PySys_ProfileFunc)", "PyNumber_Divmod(tuple, _PySys_TraceFunc)", "PyNumber_Divmod(tuple, constant)", "PyNumber_Divmod(tuple, consts)", "PyNumber_Divmod(tuple, newconst)", "PyNumber_Divmod(tuple, tuple)", "PyNumber_FloorDivide(tuple, 0)", "PyNumber_FloorDivide(tuple, PyExc_ArithmeticError)", "PyNumber_FloorDivide(tuple, PyExc_AssertionError)", "PyNumber_FloorDivide(tuple, PyExc_AttributeError)", "PyNumber_FloorDivide(tuple, PyExc_BaseException)", "PyNumber_FloorDivide(tuple, PyExc_EOFError)", "PyNumber_FloorDivide(tuple, PyExc_EnvironmentError)", "PyNumber_FloorDivide(tuple, PyExc_Exception)", "PyNumber_FloorDivide(tuple, PyExc_FloatingPointError)", "PyNumber_FloorDivide(tuple, PyExc_GeneratorExit)", "PyNumber_FloorDivide(tuple, PyExc_IOError)", "PyNumber_FloorDivide(tuple, PyExc_ImportError)", "PyNumber_FloorDivide(tuple, PyExc_IndentationError)", "PyNumber_FloorDivide(tuple, PyExc_IndexError)", "PyNumber_FloorDivide(tuple, PyExc_KeyError)", "PyNumber_FloorDivide(tuple, PyExc_KeyboardInterrupt)", "PyNumber_FloorDivide(tuple, PyExc_LookupError)", "PyNumber_FloorDivide(tuple, PyExc_MemoryError)", "PyNumber_FloorDivide(tuple, PyExc_NameError)", "PyNumber_FloorDivide(tuple, PyExc_NotImplementedError)", "PyNumber_FloorDivide(tuple, PyExc_OSError)", "PyNumber_FloorDivide(tuple, PyExc_OverflowError)", "PyNumber_FloorDivide(tuple, PyExc_ReferenceError)", "PyNumber_FloorDivide(tuple, PyExc_RuntimeError)", "PyNumber_FloorDivide(tuple, PyExc_StopIteration)", "PyNumber_FloorDivide(tuple, PyExc_SyntaxError)", "PyNumber_FloorDivide(tuple, PyExc_SystemError)", "PyNumber_FloorDivide(tuple, PyExc_SystemExit)", "PyNumber_FloorDivide(tuple, PyExc_TabError)", "PyNumber_FloorDivide(tuple, PyExc_TypeError)", "PyNumber_FloorDivide(tuple, PyExc_UnboundLocalError)", "PyNumber_FloorDivide(tuple, _PySys_ProfileFunc)", "PyNumber_FloorDivide(tuple, _PySys_TraceFunc)", "PyNumber_FloorDivide(tuple, constant)", "PyNumber_FloorDivide(tuple, consts)", "PyNumber_FloorDivide(tuple, newconst)", "PyNumber_FloorDivide(tuple, tuple)", "PyNumber_InPlaceAdd(tuple, 0)", "PyNumber_InPlaceAdd(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceAdd(tuple, PyExc_AssertionError)", "PyNumber_InPlaceAdd(tuple, PyExc_AttributeError)", "PyNumber_InPlaceAdd(tuple, PyExc_BaseException)", "PyNumber_InPlaceAdd(tuple, PyExc_EOFError)", "PyNumber_InPlaceAdd(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceAdd(tuple, PyExc_Exception)", "PyNumber_InPlaceAdd(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceAdd(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceAdd(tuple, PyExc_IOError)", "PyNumber_InPlaceAdd(tuple, PyExc_ImportError)", "PyNumber_InPlaceAdd(tuple, PyExc_IndentationError)", "PyNumber_InPlaceAdd(tuple, PyExc_IndexError)", "PyNumber_InPlaceAdd(tuple, PyExc_KeyError)", "PyNumber_InPlaceAdd(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceAdd(tuple, PyExc_LookupError)", "PyNumber_InPlaceAdd(tuple, PyExc_MemoryError)", "PyNumber_InPlaceAdd(tuple, PyExc_NameError)", "PyNumber_InPlaceAdd(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceAdd(tuple, PyExc_OSError)", "PyNumber_InPlaceAdd(tuple, PyExc_OverflowError)", "PyNumber_InPlaceAdd(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceAdd(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceAdd(tuple, PyExc_StopIteration)", "PyNumber_InPlaceAdd(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceAdd(tuple, PyExc_SystemError)", "PyNumber_InPlaceAdd(tuple, PyExc_SystemExit)", "PyNumber_InPlaceAdd(tuple, PyExc_TabError)", "PyNumber_InPlaceAdd(tuple, PyExc_TypeError)", "PyNumber_InPlaceAdd(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceAdd(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceAdd(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceAdd(tuple, constant)", "PyNumber_InPlaceAdd(tuple, consts)", "PyNumber_InPlaceAdd(tuple, newconst)", "PyNumber_InPlaceAdd(tuple, tuple)", "PyNumber_InPlaceAnd(tuple, 0)", "PyNumber_InPlaceAnd(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceAnd(tuple, PyExc_AssertionError)", "PyNumber_InPlaceAnd(tuple, PyExc_AttributeError)", "PyNumber_InPlaceAnd(tuple, PyExc_BaseException)", "PyNumber_InPlaceAnd(tuple, PyExc_EOFError)", "PyNumber_InPlaceAnd(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceAnd(tuple, PyExc_Exception)", "PyNumber_InPlaceAnd(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceAnd(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceAnd(tuple, PyExc_IOError)", "PyNumber_InPlaceAnd(tuple, PyExc_ImportError)", "PyNumber_InPlaceAnd(tuple, PyExc_IndentationError)", "PyNumber_InPlaceAnd(tuple, PyExc_IndexError)", "PyNumber_InPlaceAnd(tuple, PyExc_KeyError)", "PyNumber_InPlaceAnd(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceAnd(tuple, PyExc_LookupError)", "PyNumber_InPlaceAnd(tuple, PyExc_MemoryError)", "PyNumber_InPlaceAnd(tuple, PyExc_NameError)", "PyNumber_InPlaceAnd(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceAnd(tuple, PyExc_OSError)", "PyNumber_InPlaceAnd(tuple, PyExc_OverflowError)", "PyNumber_InPlaceAnd(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceAnd(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceAnd(tuple, PyExc_StopIteration)", "PyNumber_InPlaceAnd(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceAnd(tuple, PyExc_SystemError)", "PyNumber_InPlaceAnd(tuple, PyExc_SystemExit)", "PyNumber_InPlaceAnd(tuple, PyExc_TabError)", "PyNumber_InPlaceAnd(tuple, PyExc_TypeError)", "PyNumber_InPlaceAnd(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceAnd(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceAnd(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceAnd(tuple, constant)", "PyNumber_InPlaceAnd(tuple, consts)", "PyNumber_InPlaceAnd(tuple, newconst)", "PyNumber_InPlaceAnd(tuple, tuple)", "PyNumber_InPlaceFloorDivide(tuple, 0)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_AssertionError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_AttributeError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_BaseException)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_EOFError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_Exception)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_IOError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_ImportError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_IndentationError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_IndexError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_KeyError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_LookupError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_MemoryError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_NameError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_OSError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_OverflowError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_StopIteration)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_SystemError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_SystemExit)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_TabError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_TypeError)", "PyNumber_InPlaceFloorDivide(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceFloorDivide(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceFloorDivide(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceFloorDivide(tuple, constant)", "PyNumber_InPlaceFloorDivide(tuple, consts)", "PyNumber_InPlaceFloorDivide(tuple, newconst)", "PyNumber_InPlaceFloorDivide(tuple, tuple)", "PyNumber_InPlaceLshift(tuple, 0)", "PyNumber_InPlaceLshift(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceLshift(tuple, PyExc_AssertionError)", "PyNumber_InPlaceLshift(tuple, PyExc_AttributeError)", "PyNumber_InPlaceLshift(tuple, PyExc_BaseException)", "PyNumber_InPlaceLshift(tuple, PyExc_EOFError)", "PyNumber_InPlaceLshift(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceLshift(tuple, PyExc_Exception)", "PyNumber_InPlaceLshift(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceLshift(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceLshift(tuple, PyExc_IOError)", "PyNumber_InPlaceLshift(tuple, PyExc_ImportError)", "PyNumber_InPlaceLshift(tuple, PyExc_IndentationError)", "PyNumber_InPlaceLshift(tuple, PyExc_IndexError)", "PyNumber_InPlaceLshift(tuple, PyExc_KeyError)", "PyNumber_InPlaceLshift(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceLshift(tuple, PyExc_LookupError)", "PyNumber_InPlaceLshift(tuple, PyExc_MemoryError)", "PyNumber_InPlaceLshift(tuple, PyExc_NameError)", "PyNumber_InPlaceLshift(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceLshift(tuple, PyExc_OSError)", "PyNumber_InPlaceLshift(tuple, PyExc_OverflowError)", "PyNumber_InPlaceLshift(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceLshift(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceLshift(tuple, PyExc_StopIteration)", "PyNumber_InPlaceLshift(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceLshift(tuple, PyExc_SystemError)", "PyNumber_InPlaceLshift(tuple, PyExc_SystemExit)", "PyNumber_InPlaceLshift(tuple, PyExc_TabError)", "PyNumber_InPlaceLshift(tuple, PyExc_TypeError)", "PyNumber_InPlaceLshift(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceLshift(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceLshift(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceLshift(tuple, constant)", "PyNumber_InPlaceLshift(tuple, consts)", "PyNumber_InPlaceLshift(tuple, newconst)", "PyNumber_InPlaceLshift(tuple, tuple)", "PyNumber_InPlaceMultiply(tuple, 0)", "PyNumber_InPlaceMultiply(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceMultiply(tuple, PyExc_AssertionError)", "PyNumber_InPlaceMultiply(tuple, PyExc_AttributeError)", "PyNumber_InPlaceMultiply(tuple, PyExc_BaseException)", "PyNumber_InPlaceMultiply(tuple, PyExc_EOFError)", "PyNumber_InPlaceMultiply(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceMultiply(tuple, PyExc_Exception)", "PyNumber_InPlaceMultiply(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceMultiply(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceMultiply(tuple, PyExc_IOError)", "PyNumber_InPlaceMultiply(tuple, PyExc_ImportError)", "PyNumber_InPlaceMultiply(tuple, PyExc_IndentationError)", "PyNumber_InPlaceMultiply(tuple, PyExc_IndexError)", "PyNumber_InPlaceMultiply(tuple, PyExc_KeyError)", "PyNumber_InPlaceMultiply(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceMultiply(tuple, PyExc_LookupError)", "PyNumber_InPlaceMultiply(tuple, PyExc_MemoryError)", "PyNumber_InPlaceMultiply(tuple, PyExc_NameError)", "PyNumber_InPlaceMultiply(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceMultiply(tuple, PyExc_OSError)", "PyNumber_InPlaceMultiply(tuple, PyExc_OverflowError)", "PyNumber_InPlaceMultiply(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceMultiply(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceMultiply(tuple, PyExc_StopIteration)", "PyNumber_InPlaceMultiply(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceMultiply(tuple, PyExc_SystemError)", "PyNumber_InPlaceMultiply(tuple, PyExc_SystemExit)", "PyNumber_InPlaceMultiply(tuple, PyExc_TabError)", "PyNumber_InPlaceMultiply(tuple, PyExc_TypeError)", "PyNumber_InPlaceMultiply(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceMultiply(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceMultiply(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceMultiply(tuple, constant)", "PyNumber_InPlaceMultiply(tuple, consts)", "PyNumber_InPlaceMultiply(tuple, newconst)", "PyNumber_InPlaceMultiply(tuple, tuple)", "PyNumber_InPlaceOr(tuple, 0)", "PyNumber_InPlaceOr(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceOr(tuple, PyExc_AssertionError)", "PyNumber_InPlaceOr(tuple, PyExc_AttributeError)", "PyNumber_InPlaceOr(tuple, PyExc_BaseException)", "PyNumber_InPlaceOr(tuple, PyExc_EOFError)", "PyNumber_InPlaceOr(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceOr(tuple, PyExc_Exception)", "PyNumber_InPlaceOr(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceOr(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceOr(tuple, PyExc_IOError)", "PyNumber_InPlaceOr(tuple, PyExc_ImportError)", "PyNumber_InPlaceOr(tuple, PyExc_IndentationError)", "PyNumber_InPlaceOr(tuple, PyExc_IndexError)", "PyNumber_InPlaceOr(tuple, PyExc_KeyError)", "PyNumber_InPlaceOr(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceOr(tuple, PyExc_LookupError)", "PyNumber_InPlaceOr(tuple, PyExc_MemoryError)", "PyNumber_InPlaceOr(tuple, PyExc_NameError)", "PyNumber_InPlaceOr(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceOr(tuple, PyExc_OSError)", "PyNumber_InPlaceOr(tuple, PyExc_OverflowError)", "PyNumber_InPlaceOr(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceOr(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceOr(tuple, PyExc_StopIteration)", "PyNumber_InPlaceOr(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceOr(tuple, PyExc_SystemError)", "PyNumber_InPlaceOr(tuple, PyExc_SystemExit)", "PyNumber_InPlaceOr(tuple, PyExc_TabError)", "PyNumber_InPlaceOr(tuple, PyExc_TypeError)", "PyNumber_InPlaceOr(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceOr(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceOr(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceOr(tuple, constant)", "PyNumber_InPlaceOr(tuple, consts)", "PyNumber_InPlaceOr(tuple, newconst)", "PyNumber_InPlaceOr(tuple, tuple)", "PyNumber_InPlaceRemainder(tuple, 0)", "PyNumber_InPlaceRemainder(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceRemainder(tuple, PyExc_AssertionError)", "PyNumber_InPlaceRemainder(tuple, PyExc_AttributeError)", "PyNumber_InPlaceRemainder(tuple, PyExc_BaseException)", "PyNumber_InPlaceRemainder(tuple, PyExc_EOFError)", "PyNumber_InPlaceRemainder(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceRemainder(tuple, PyExc_Exception)", "PyNumber_InPlaceRemainder(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceRemainder(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceRemainder(tuple, PyExc_IOError)", "PyNumber_InPlaceRemainder(tuple, PyExc_ImportError)", "PyNumber_InPlaceRemainder(tuple, PyExc_IndentationError)", "PyNumber_InPlaceRemainder(tuple, PyExc_IndexError)", "PyNumber_InPlaceRemainder(tuple, PyExc_KeyError)", "PyNumber_InPlaceRemainder(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceRemainder(tuple, PyExc_LookupError)", "PyNumber_InPlaceRemainder(tuple, PyExc_MemoryError)", "PyNumber_InPlaceRemainder(tuple, PyExc_NameError)", "PyNumber_InPlaceRemainder(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceRemainder(tuple, PyExc_OSError)", "PyNumber_InPlaceRemainder(tuple, PyExc_OverflowError)", "PyNumber_InPlaceRemainder(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceRemainder(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceRemainder(tuple, PyExc_StopIteration)", "PyNumber_InPlaceRemainder(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceRemainder(tuple, PyExc_SystemError)", "PyNumber_InPlaceRemainder(tuple, PyExc_SystemExit)", "PyNumber_InPlaceRemainder(tuple, PyExc_TabError)", "PyNumber_InPlaceRemainder(tuple, PyExc_TypeError)", "PyNumber_InPlaceRemainder(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceRemainder(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceRemainder(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceRemainder(tuple, constant)", "PyNumber_InPlaceRemainder(tuple, consts)", "PyNumber_InPlaceRemainder(tuple, newconst)", "PyNumber_InPlaceRemainder(tuple, tuple)", "PyNumber_InPlaceRshift(tuple, 0)", "PyNumber_InPlaceRshift(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceRshift(tuple, PyExc_AssertionError)", "PyNumber_InPlaceRshift(tuple, PyExc_AttributeError)", "PyNumber_InPlaceRshift(tuple, PyExc_BaseException)", "PyNumber_InPlaceRshift(tuple, PyExc_EOFError)", "PyNumber_InPlaceRshift(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceRshift(tuple, PyExc_Exception)", "PyNumber_InPlaceRshift(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceRshift(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceRshift(tuple, PyExc_IOError)", "PyNumber_InPlaceRshift(tuple, PyExc_ImportError)", "PyNumber_InPlaceRshift(tuple, PyExc_IndentationError)", "PyNumber_InPlaceRshift(tuple, PyExc_IndexError)", "PyNumber_InPlaceRshift(tuple, PyExc_KeyError)", "PyNumber_InPlaceRshift(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceRshift(tuple, PyExc_LookupError)", "PyNumber_InPlaceRshift(tuple, PyExc_MemoryError)", "PyNumber_InPlaceRshift(tuple, PyExc_NameError)", "PyNumber_InPlaceRshift(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceRshift(tuple, PyExc_OSError)", "PyNumber_InPlaceRshift(tuple, PyExc_OverflowError)", "PyNumber_InPlaceRshift(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceRshift(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceRshift(tuple, PyExc_StopIteration)", "PyNumber_InPlaceRshift(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceRshift(tuple, PyExc_SystemError)", "PyNumber_InPlaceRshift(tuple, PyExc_SystemExit)", "PyNumber_InPlaceRshift(tuple, PyExc_TabError)", "PyNumber_InPlaceRshift(tuple, PyExc_TypeError)", "PyNumber_InPlaceRshift(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceRshift(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceRshift(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceRshift(tuple, constant)", "PyNumber_InPlaceRshift(tuple, consts)", "PyNumber_InPlaceRshift(tuple, newconst)", "PyNumber_InPlaceRshift(tuple, tuple)", "PyNumber_InPlaceSubtract(tuple, 0)", "PyNumber_InPlaceSubtract(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceSubtract(tuple, PyExc_AssertionError)", "PyNumber_InPlaceSubtract(tuple, PyExc_AttributeError)", "PyNumber_InPlaceSubtract(tuple, PyExc_BaseException)", "PyNumber_InPlaceSubtract(tuple, PyExc_EOFError)", "PyNumber_InPlaceSubtract(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceSubtract(tuple, PyExc_Exception)", "PyNumber_InPlaceSubtract(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceSubtract(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceSubtract(tuple, PyExc_IOError)", "PyNumber_InPlaceSubtract(tuple, PyExc_ImportError)", "PyNumber_InPlaceSubtract(tuple, PyExc_IndentationError)", "PyNumber_InPlaceSubtract(tuple, PyExc_IndexError)", "PyNumber_InPlaceSubtract(tuple, PyExc_KeyError)", "PyNumber_InPlaceSubtract(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceSubtract(tuple, PyExc_LookupError)", "PyNumber_InPlaceSubtract(tuple, PyExc_MemoryError)", "PyNumber_InPlaceSubtract(tuple, PyExc_NameError)", "PyNumber_InPlaceSubtract(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceSubtract(tuple, PyExc_OSError)", "PyNumber_InPlaceSubtract(tuple, PyExc_OverflowError)", "PyNumber_InPlaceSubtract(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceSubtract(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceSubtract(tuple, PyExc_StopIteration)", "PyNumber_InPlaceSubtract(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceSubtract(tuple, PyExc_SystemError)", "PyNumber_InPlaceSubtract(tuple, PyExc_SystemExit)", "PyNumber_InPlaceSubtract(tuple, PyExc_TabError)", "PyNumber_InPlaceSubtract(tuple, PyExc_TypeError)", "PyNumber_InPlaceSubtract(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceSubtract(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceSubtract(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceSubtract(tuple, constant)", "PyNumber_InPlaceSubtract(tuple, consts)", "PyNumber_InPlaceSubtract(tuple, newconst)", "PyNumber_InPlaceSubtract(tuple, tuple)", "PyNumber_InPlaceTrueDivide(tuple, 0)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_AssertionError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_AttributeError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_BaseException)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_EOFError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_Exception)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_IOError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_ImportError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_IndentationError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_IndexError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_KeyError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_LookupError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_MemoryError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_NameError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_OSError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_OverflowError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_StopIteration)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_SystemError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_SystemExit)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_TabError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_TypeError)", "PyNumber_InPlaceTrueDivide(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceTrueDivide(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceTrueDivide(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceTrueDivide(tuple, constant)", "PyNumber_InPlaceTrueDivide(tuple, consts)", "PyNumber_InPlaceTrueDivide(tuple, newconst)", "PyNumber_InPlaceTrueDivide(tuple, tuple)", "PyNumber_InPlaceXor(tuple, 0)", "PyNumber_InPlaceXor(tuple, PyExc_ArithmeticError)", "PyNumber_InPlaceXor(tuple, PyExc_AssertionError)", "PyNumber_InPlaceXor(tuple, PyExc_AttributeError)", "PyNumber_InPlaceXor(tuple, PyExc_BaseException)", "PyNumber_InPlaceXor(tuple, PyExc_EOFError)", "PyNumber_InPlaceXor(tuple, PyExc_EnvironmentError)", "PyNumber_InPlaceXor(tuple, PyExc_Exception)", "PyNumber_InPlaceXor(tuple, PyExc_FloatingPointError)", "PyNumber_InPlaceXor(tuple, PyExc_GeneratorExit)", "PyNumber_InPlaceXor(tuple, PyExc_IOError)", "PyNumber_InPlaceXor(tuple, PyExc_ImportError)", "PyNumber_InPlaceXor(tuple, PyExc_IndentationError)", "PyNumber_InPlaceXor(tuple, PyExc_IndexError)", "PyNumber_InPlaceXor(tuple, PyExc_KeyError)", "PyNumber_InPlaceXor(tuple, PyExc_KeyboardInterrupt)", "PyNumber_InPlaceXor(tuple, PyExc_LookupError)", "PyNumber_InPlaceXor(tuple, PyExc_MemoryError)", "PyNumber_InPlaceXor(tuple, PyExc_NameError)", "PyNumber_InPlaceXor(tuple, PyExc_NotImplementedError)", "PyNumber_InPlaceXor(tuple, PyExc_OSError)", "PyNumber_InPlaceXor(tuple, PyExc_OverflowError)", "PyNumber_InPlaceXor(tuple, PyExc_ReferenceError)", "PyNumber_InPlaceXor(tuple, PyExc_RuntimeError)", "PyNumber_InPlaceXor(tuple, PyExc_StopIteration)", "PyNumber_InPlaceXor(tuple, PyExc_SyntaxError)", "PyNumber_InPlaceXor(tuple, PyExc_SystemError)", "PyNumber_InPlaceXor(tuple, PyExc_SystemExit)", "PyNumber_InPlaceXor(tuple, PyExc_TabError)", "PyNumber_InPlaceXor(tuple, PyExc_TypeError)", "PyNumber_InPlaceXor(tuple, PyExc_UnboundLocalError)", "PyNumber_InPlaceXor(tuple, _PySys_ProfileFunc)", "PyNumber_InPlaceXor(tuple, _PySys_TraceFunc)", "PyNumber_InPlaceXor(tuple, constant)", "PyNumber_InPlaceXor(tuple, consts)", "PyNumber_InPlaceXor(tuple, newconst)", "PyNumber_InPlaceXor(tuple, tuple)", "PyNumber_Lshift(tuple, 0)", "PyNumber_Lshift(tuple, PyExc_ArithmeticError)", "PyNumber_Lshift(tuple, PyExc_AssertionError)", "PyNumber_Lshift(tuple, PyExc_AttributeError)", "PyNumber_Lshift(tuple, PyExc_BaseException)", "PyNumber_Lshift(tuple, PyExc_EOFError)", "PyNumber_Lshift(tuple, PyExc_EnvironmentError)", "PyNumber_Lshift(tuple, PyExc_Exception)", "PyNumber_Lshift(tuple, PyExc_FloatingPointError)", "PyNumber_Lshift(tuple, PyExc_GeneratorExit)", "PyNumber_Lshift(tuple, PyExc_IOError)", "PyNumber_Lshift(tuple, PyExc_ImportError)", "PyNumber_Lshift(tuple, PyExc_IndentationError)", "PyNumber_Lshift(tuple, PyExc_IndexError)", "PyNumber_Lshift(tuple, PyExc_KeyError)", "PyNumber_Lshift(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Lshift(tuple, PyExc_LookupError)", "PyNumber_Lshift(tuple, PyExc_MemoryError)", "PyNumber_Lshift(tuple, PyExc_NameError)", "PyNumber_Lshift(tuple, PyExc_NotImplementedError)", "PyNumber_Lshift(tuple, PyExc_OSError)", "PyNumber_Lshift(tuple, PyExc_OverflowError)", "PyNumber_Lshift(tuple, PyExc_ReferenceError)", "PyNumber_Lshift(tuple, PyExc_RuntimeError)", "PyNumber_Lshift(tuple, PyExc_StopIteration)", "PyNumber_Lshift(tuple, PyExc_SyntaxError)", "PyNumber_Lshift(tuple, PyExc_SystemError)", "PyNumber_Lshift(tuple, PyExc_SystemExit)", "PyNumber_Lshift(tuple, PyExc_TabError)", "PyNumber_Lshift(tuple, PyExc_TypeError)", "PyNumber_Lshift(tuple, PyExc_UnboundLocalError)", "PyNumber_Lshift(tuple, _PySys_ProfileFunc)", "PyNumber_Lshift(tuple, _PySys_TraceFunc)", "PyNumber_Lshift(tuple, constant)", "PyNumber_Lshift(tuple, consts)", "PyNumber_Lshift(tuple, newconst)", "PyNumber_Lshift(tuple, tuple)", "PyNumber_Multiply(tuple, 0)", "PyNumber_Multiply(tuple, PyExc_ArithmeticError)", "PyNumber_Multiply(tuple, PyExc_AssertionError)", "PyNumber_Multiply(tuple, PyExc_AttributeError)", "PyNumber_Multiply(tuple, PyExc_BaseException)", "PyNumber_Multiply(tuple, PyExc_EOFError)", "PyNumber_Multiply(tuple, PyExc_EnvironmentError)", "PyNumber_Multiply(tuple, PyExc_Exception)", "PyNumber_Multiply(tuple, PyExc_FloatingPointError)", "PyNumber_Multiply(tuple, PyExc_GeneratorExit)", "PyNumber_Multiply(tuple, PyExc_IOError)", "PyNumber_Multiply(tuple, PyExc_ImportError)", "PyNumber_Multiply(tuple, PyExc_IndentationError)", "PyNumber_Multiply(tuple, PyExc_IndexError)", "PyNumber_Multiply(tuple, PyExc_KeyError)", "PyNumber_Multiply(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Multiply(tuple, PyExc_LookupError)", "PyNumber_Multiply(tuple, PyExc_MemoryError)", "PyNumber_Multiply(tuple, PyExc_NameError)", "PyNumber_Multiply(tuple, PyExc_NotImplementedError)", "PyNumber_Multiply(tuple, PyExc_OSError)", "PyNumber_Multiply(tuple, PyExc_OverflowError)", "PyNumber_Multiply(tuple, PyExc_ReferenceError)", "PyNumber_Multiply(tuple, PyExc_RuntimeError)", "PyNumber_Multiply(tuple, PyExc_StopIteration)", "PyNumber_Multiply(tuple, PyExc_SyntaxError)", "PyNumber_Multiply(tuple, PyExc_SystemError)", "PyNumber_Multiply(tuple, PyExc_SystemExit)", "PyNumber_Multiply(tuple, PyExc_TabError)", "PyNumber_Multiply(tuple, PyExc_TypeError)", "PyNumber_Multiply(tuple, PyExc_UnboundLocalError)", "PyNumber_Multiply(tuple, _PySys_ProfileFunc)", "PyNumber_Multiply(tuple, _PySys_TraceFunc)", "PyNumber_Multiply(tuple, constant)", "PyNumber_Multiply(tuple, consts)", "PyNumber_Multiply(tuple, newconst)", "PyNumber_Multiply(tuple, tuple)", "PyNumber_Or(tuple, 0)", "PyNumber_Or(tuple, PyExc_ArithmeticError)", "PyNumber_Or(tuple, PyExc_AssertionError)", "PyNumber_Or(tuple, PyExc_AttributeError)", "PyNumber_Or(tuple, PyExc_BaseException)", "PyNumber_Or(tuple, PyExc_EOFError)", "PyNumber_Or(tuple, PyExc_EnvironmentError)", "PyNumber_Or(tuple, PyExc_Exception)", "PyNumber_Or(tuple, PyExc_FloatingPointError)", "PyNumber_Or(tuple, PyExc_GeneratorExit)", "PyNumber_Or(tuple, PyExc_IOError)", "PyNumber_Or(tuple, PyExc_ImportError)", "PyNumber_Or(tuple, PyExc_IndentationError)", "PyNumber_Or(tuple, PyExc_IndexError)", "PyNumber_Or(tuple, PyExc_KeyError)", "PyNumber_Or(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Or(tuple, PyExc_LookupError)", "PyNumber_Or(tuple, PyExc_MemoryError)", "PyNumber_Or(tuple, PyExc_NameError)", "PyNumber_Or(tuple, PyExc_NotImplementedError)", "PyNumber_Or(tuple, PyExc_OSError)", "PyNumber_Or(tuple, PyExc_OverflowError)", "PyNumber_Or(tuple, PyExc_ReferenceError)", "PyNumber_Or(tuple, PyExc_RuntimeError)", "PyNumber_Or(tuple, PyExc_StopIteration)", "PyNumber_Or(tuple, PyExc_SyntaxError)", "PyNumber_Or(tuple, PyExc_SystemError)", "PyNumber_Or(tuple, PyExc_SystemExit)", "PyNumber_Or(tuple, PyExc_TabError)", "PyNumber_Or(tuple, PyExc_TypeError)", "PyNumber_Or(tuple, PyExc_UnboundLocalError)", "PyNumber_Or(tuple, _PySys_ProfileFunc)", "PyNumber_Or(tuple, _PySys_TraceFunc)", "PyNumber_Or(tuple, constant)", "PyNumber_Or(tuple, consts)", "PyNumber_Or(tuple, newconst)", "PyNumber_Or(tuple, tuple)", "PyNumber_Remainder(tuple, 0)", "PyNumber_Remainder(tuple, PyExc_ArithmeticError)", "PyNumber_Remainder(tuple, PyExc_AssertionError)", "PyNumber_Remainder(tuple, PyExc_AttributeError)", "PyNumber_Remainder(tuple, PyExc_BaseException)", "PyNumber_Remainder(tuple, PyExc_EOFError)", "PyNumber_Remainder(tuple, PyExc_EnvironmentError)", "PyNumber_Remainder(tuple, PyExc_Exception)", "PyNumber_Remainder(tuple, PyExc_FloatingPointError)", "PyNumber_Remainder(tuple, PyExc_GeneratorExit)", "PyNumber_Remainder(tuple, PyExc_IOError)", "PyNumber_Remainder(tuple, PyExc_ImportError)", "PyNumber_Remainder(tuple, PyExc_IndentationError)", "PyNumber_Remainder(tuple, PyExc_IndexError)", "PyNumber_Remainder(tuple, PyExc_KeyError)", "PyNumber_Remainder(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Remainder(tuple, PyExc_LookupError)", "PyNumber_Remainder(tuple, PyExc_MemoryError)", "PyNumber_Remainder(tuple, PyExc_NameError)", "PyNumber_Remainder(tuple, PyExc_NotImplementedError)", "PyNumber_Remainder(tuple, PyExc_OSError)", "PyNumber_Remainder(tuple, PyExc_OverflowError)", "PyNumber_Remainder(tuple, PyExc_ReferenceError)", "PyNumber_Remainder(tuple, PyExc_RuntimeError)", "PyNumber_Remainder(tuple, PyExc_StopIteration)", "PyNumber_Remainder(tuple, PyExc_SyntaxError)", "PyNumber_Remainder(tuple, PyExc_SystemError)", "PyNumber_Remainder(tuple, PyExc_SystemExit)", "PyNumber_Remainder(tuple, PyExc_TabError)", "PyNumber_Remainder(tuple, PyExc_TypeError)", "PyNumber_Remainder(tuple, PyExc_UnboundLocalError)", "PyNumber_Remainder(tuple, _PySys_ProfileFunc)", "PyNumber_Remainder(tuple, _PySys_TraceFunc)", "PyNumber_Remainder(tuple, constant)", "PyNumber_Remainder(tuple, consts)", "PyNumber_Remainder(tuple, newconst)", "PyNumber_Remainder(tuple, tuple)", "PyNumber_Rshift(tuple, 0)", "PyNumber_Rshift(tuple, PyExc_ArithmeticError)", "PyNumber_Rshift(tuple, PyExc_AssertionError)", "PyNumber_Rshift(tuple, PyExc_AttributeError)", "PyNumber_Rshift(tuple, PyExc_BaseException)", "PyNumber_Rshift(tuple, PyExc_EOFError)", "PyNumber_Rshift(tuple, PyExc_EnvironmentError)", "PyNumber_Rshift(tuple, PyExc_Exception)", "PyNumber_Rshift(tuple, PyExc_FloatingPointError)", "PyNumber_Rshift(tuple, PyExc_GeneratorExit)", "PyNumber_Rshift(tuple, PyExc_IOError)", "PyNumber_Rshift(tuple, PyExc_ImportError)", "PyNumber_Rshift(tuple, PyExc_IndentationError)", "PyNumber_Rshift(tuple, PyExc_IndexError)", "PyNumber_Rshift(tuple, PyExc_KeyError)", "PyNumber_Rshift(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Rshift(tuple, PyExc_LookupError)", "PyNumber_Rshift(tuple, PyExc_MemoryError)", "PyNumber_Rshift(tuple, PyExc_NameError)", "PyNumber_Rshift(tuple, PyExc_NotImplementedError)", "PyNumber_Rshift(tuple, PyExc_OSError)", "PyNumber_Rshift(tuple, PyExc_OverflowError)", "PyNumber_Rshift(tuple, PyExc_ReferenceError)", "PyNumber_Rshift(tuple, PyExc_RuntimeError)", "PyNumber_Rshift(tuple, PyExc_StopIteration)", "PyNumber_Rshift(tuple, PyExc_SyntaxError)", "PyNumber_Rshift(tuple, PyExc_SystemError)", "PyNumber_Rshift(tuple, PyExc_SystemExit)", "PyNumber_Rshift(tuple, PyExc_TabError)", "PyNumber_Rshift(tuple, PyExc_TypeError)", "PyNumber_Rshift(tuple, PyExc_UnboundLocalError)", "PyNumber_Rshift(tuple, _PySys_ProfileFunc)", "PyNumber_Rshift(tuple, _PySys_TraceFunc)", "PyNumber_Rshift(tuple, constant)", "PyNumber_Rshift(tuple, consts)", "PyNumber_Rshift(tuple, newconst)", "PyNumber_Rshift(tuple, tuple)", "PyNumber_Subtract(tuple, 0)", "PyNumber_Subtract(tuple, PyExc_ArithmeticError)", "PyNumber_Subtract(tuple, PyExc_AssertionError)", "PyNumber_Subtract(tuple, PyExc_AttributeError)", "PyNumber_Subtract(tuple, PyExc_BaseException)", "PyNumber_Subtract(tuple, PyExc_EOFError)", "PyNumber_Subtract(tuple, PyExc_EnvironmentError)", "PyNumber_Subtract(tuple, PyExc_Exception)", "PyNumber_Subtract(tuple, PyExc_FloatingPointError)", "PyNumber_Subtract(tuple, PyExc_GeneratorExit)", "PyNumber_Subtract(tuple, PyExc_IOError)", "PyNumber_Subtract(tuple, PyExc_ImportError)", "PyNumber_Subtract(tuple, PyExc_IndentationError)", "PyNumber_Subtract(tuple, PyExc_IndexError)", "PyNumber_Subtract(tuple, PyExc_KeyError)", "PyNumber_Subtract(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Subtract(tuple, PyExc_LookupError)", "PyNumber_Subtract(tuple, PyExc_MemoryError)", "PyNumber_Subtract(tuple, PyExc_NameError)", "PyNumber_Subtract(tuple, PyExc_NotImplementedError)", "PyNumber_Subtract(tuple, PyExc_OSError)", "PyNumber_Subtract(tuple, PyExc_OverflowError)", "PyNumber_Subtract(tuple, PyExc_ReferenceError)", "PyNumber_Subtract(tuple, PyExc_RuntimeError)", "PyNumber_Subtract(tuple, PyExc_StopIteration)", "PyNumber_Subtract(tuple, PyExc_SyntaxError)", "PyNumber_Subtract(tuple, PyExc_SystemError)", "PyNumber_Subtract(tuple, PyExc_SystemExit)", "PyNumber_Subtract(tuple, PyExc_TabError)", "PyNumber_Subtract(tuple, PyExc_TypeError)", "PyNumber_Subtract(tuple, PyExc_UnboundLocalError)", "PyNumber_Subtract(tuple, _PySys_ProfileFunc)", "PyNumber_Subtract(tuple, _PySys_TraceFunc)", "PyNumber_Subtract(tuple, constant)", "PyNumber_Subtract(tuple, consts)", "PyNumber_Subtract(tuple, newconst)", "PyNumber_Subtract(tuple, tuple)", "PyNumber_ToBase(tuple, 0)", "PyNumber_ToBase(tuple, 1)", "PyNumber_ToBase(tuple, 100)", "PyNumber_ToBase(tuple, 102)", "PyNumber_ToBase(tuple, 104)", "PyNumber_ToBase(tuple, 120)", "PyNumber_ToBase(tuple, 127)", "PyNumber_ToBase(tuple, 130)", "PyNumber_ToBase(tuple, 2)", "PyNumber_ToBase(tuple, 255)", "PyNumber_ToBase(tuple, 8)", "PyNumber_ToBase(tuple, Py_BytesWarningFlag)", "PyNumber_ToBase(tuple, Py_DebugFlag)", "PyNumber_ToBase(tuple, Py_DontWriteBytecodeFlag)", "PyNumber_ToBase(tuple, Py_FrozenFlag)", "PyNumber_ToBase(tuple, Py_HasFileSystemDefaultEncoding)", "PyNumber_ToBase(tuple, Py_IgnoreEnvironmentFlag)", "PyNumber_ToBase(tuple, Py_InspectFlag)", "PyNumber_ToBase(tuple, Py_InteractiveFlag)", "PyNumber_ToBase(tuple, Py_NoSiteFlag)", "PyNumber_ToBase(tuple, Py_NoUserSiteDirectory)", "PyNumber_ToBase(tuple, Py_OptimizeFlag)", "PyNumber_ToBase(tuple, Py_QuietFlag)", "PyNumber_ToBase(tuple, Py_UnbufferedStdioFlag)", "PyNumber_ToBase(tuple, Py_UseClassExceptionsFlag)", "PyNumber_ToBase(tuple, Py_VerboseFlag)", "PyNumber_ToBase(tuple, _Py_CheckRecursionLimit)", "PyNumber_TrueDivide(tuple, 0)", "PyNumber_TrueDivide(tuple, PyExc_ArithmeticError)", "PyNumber_TrueDivide(tuple, PyExc_AssertionError)", "PyNumber_TrueDivide(tuple, PyExc_AttributeError)", "PyNumber_TrueDivide(tuple, PyExc_BaseException)", "PyNumber_TrueDivide(tuple, PyExc_EOFError)", "PyNumber_TrueDivide(tuple, PyExc_EnvironmentError)", "PyNumber_TrueDivide(tuple, PyExc_Exception)", "PyNumber_TrueDivide(tuple, PyExc_FloatingPointError)", "PyNumber_TrueDivide(tuple, PyExc_GeneratorExit)", "PyNumber_TrueDivide(tuple, PyExc_IOError)", "PyNumber_TrueDivide(tuple, PyExc_ImportError)", "PyNumber_TrueDivide(tuple, PyExc_IndentationError)", "PyNumber_TrueDivide(tuple, PyExc_IndexError)", "PyNumber_TrueDivide(tuple, PyExc_KeyError)", "PyNumber_TrueDivide(tuple, PyExc_KeyboardInterrupt)", "PyNumber_TrueDivide(tuple, PyExc_LookupError)", "PyNumber_TrueDivide(tuple, PyExc_MemoryError)", "PyNumber_TrueDivide(tuple, PyExc_NameError)", "PyNumber_TrueDivide(tuple, PyExc_NotImplementedError)", "PyNumber_TrueDivide(tuple, PyExc_OSError)", "PyNumber_TrueDivide(tuple, PyExc_OverflowError)", "PyNumber_TrueDivide(tuple, PyExc_ReferenceError)", "PyNumber_TrueDivide(tuple, PyExc_RuntimeError)", "PyNumber_TrueDivide(tuple, PyExc_StopIteration)", "PyNumber_TrueDivide(tuple, PyExc_SyntaxError)", "PyNumber_TrueDivide(tuple, PyExc_SystemError)", "PyNumber_TrueDivide(tuple, PyExc_SystemExit)", "PyNumber_TrueDivide(tuple, PyExc_TabError)", "PyNumber_TrueDivide(tuple, PyExc_TypeError)", "PyNumber_TrueDivide(tuple, PyExc_UnboundLocalError)", "PyNumber_TrueDivide(tuple, _PySys_ProfileFunc)", "PyNumber_TrueDivide(tuple, _PySys_TraceFunc)", "PyNumber_TrueDivide(tuple, constant)", "PyNumber_TrueDivide(tuple, consts)", "PyNumber_TrueDivide(tuple, newconst)", "PyNumber_TrueDivide(tuple, tuple)", "PyNumber_Xor(tuple, 0)", "PyNumber_Xor(tuple, PyExc_ArithmeticError)", "PyNumber_Xor(tuple, PyExc_AssertionError)", "PyNumber_Xor(tuple, PyExc_AttributeError)", "PyNumber_Xor(tuple, PyExc_BaseException)", "PyNumber_Xor(tuple, PyExc_EOFError)", "PyNumber_Xor(tuple, PyExc_EnvironmentError)", "PyNumber_Xor(tuple, PyExc_Exception)", "PyNumber_Xor(tuple, PyExc_FloatingPointError)", "PyNumber_Xor(tuple, PyExc_GeneratorExit)", "PyNumber_Xor(tuple, PyExc_IOError)", "PyNumber_Xor(tuple, PyExc_ImportError)", "PyNumber_Xor(tuple, PyExc_IndentationError)", "PyNumber_Xor(tuple, PyExc_IndexError)", "PyNumber_Xor(tuple, PyExc_KeyError)", "PyNumber_Xor(tuple, PyExc_KeyboardInterrupt)", "PyNumber_Xor(tuple, PyExc_LookupError)", "PyNumber_Xor(tuple, PyExc_MemoryError)", "PyNumber_Xor(tuple, PyExc_NameError)", "PyNumber_Xor(tuple, PyExc_NotImplementedError)", "PyNumber_Xor(tuple, PyExc_OSError)", "PyNumber_Xor(tuple, PyExc_OverflowError)", "PyNumber_Xor(tuple, PyExc_ReferenceError)", "PyNumber_Xor(tuple, PyExc_RuntimeError)", "PyNumber_Xor(tuple, PyExc_StopIteration)", "PyNumber_Xor(tuple, PyExc_SyntaxError)", "PyNumber_Xor(tuple, PyExc_SystemError)", "PyNumber_Xor(tuple, PyExc_SystemExit)", "PyNumber_Xor(tuple, PyExc_TabError)", "PyNumber_Xor(tuple, PyExc_TypeError)", "PyNumber_Xor(tuple, PyExc_UnboundLocalError)", "PyNumber_Xor(tuple, _PySys_ProfileFunc)", "PyNumber_Xor(tuple, _PySys_TraceFunc)", "PyNumber_Xor(tuple, constant)", "PyNumber_Xor(tuple, consts)", "PyNumber_Xor(tuple, newconst)", "PyNumber_Xor(tuple, tuple)", "PyObject_CallObject(tuple, 0)", "PyObject_CallObject(tuple, PyExc_ArithmeticError)", "PyObject_CallObject(tuple, PyExc_AssertionError)", "PyObject_CallObject(tuple, PyExc_AttributeError)", "PyObject_CallObject(tuple, PyExc_BaseException)", "PyObject_CallObject(tuple, PyExc_EOFError)", "PyObject_CallObject(tuple, PyExc_EnvironmentError)", "PyObject_CallObject(tuple, PyExc_Exception)", "PyObject_CallObject(tuple, PyExc_FloatingPointError)", "PyObject_CallObject(tuple, PyExc_GeneratorExit)", "PyObject_CallObject(tuple, PyExc_IOError)", "PyObject_CallObject(tuple, PyExc_ImportError)", "PyObject_CallObject(tuple, PyExc_IndentationError)", "PyObject_CallObject(tuple, PyExc_IndexError)", "PyObject_CallObject(tuple, PyExc_KeyError)", "PyObject_CallObject(tuple, PyExc_KeyboardInterrupt)", "PyObject_CallObject(tuple, PyExc_LookupError)", "PyObject_CallObject(tuple, PyExc_MemoryError)", "PyObject_CallObject(tuple, PyExc_NameError)", "PyObject_CallObject(tuple, PyExc_NotImplementedError)", "PyObject_CallObject(tuple, PyExc_OSError)", "PyObject_CallObject(tuple, PyExc_OverflowError)", "PyObject_CallObject(tuple, PyExc_ReferenceError)", "PyObject_CallObject(tuple, PyExc_RuntimeError)", "PyObject_CallObject(tuple, PyExc_StopIteration)", "PyObject_CallObject(tuple, PyExc_SyntaxError)", "PyObject_CallObject(tuple, PyExc_SystemError)", "PyObject_CallObject(tuple, PyExc_SystemExit)", "PyObject_CallObject(tuple, PyExc_TabError)", "PyObject_CallObject(tuple, PyExc_TypeError)", "PyObject_CallObject(tuple, PyExc_UnboundLocalError)", "PyObject_CallObject(tuple, _PySys_ProfileFunc)", "PyObject_CallObject(tuple, _PySys_TraceFunc)", "PyObject_CallObject(tuple, constant)", "PyObject_CallObject(tuple, consts)", "PyObject_CallObject(tuple, newconst)", "PyObject_CallObject(tuple, tuple)", "PyObject_Format(tuple, 0)", "PyObject_Format(tuple, PyExc_ArithmeticError)", "PyObject_Format(tuple, PyExc_AssertionError)", "PyObject_Format(tuple, PyExc_AttributeError)", "PyObject_Format(tuple, PyExc_BaseException)", "PyObject_Format(tuple, PyExc_EOFError)", "PyObject_Format(tuple, PyExc_EnvironmentError)", "PyObject_Format(tuple, PyExc_Exception)", "PyObject_Format(tuple, PyExc_FloatingPointError)", "PyObject_Format(tuple, PyExc_GeneratorExit)", "PyObject_Format(tuple, PyExc_IOError)", "PyObject_Format(tuple, PyExc_ImportError)", "PyObject_Format(tuple, PyExc_IndentationError)", "PyObject_Format(tuple, PyExc_IndexError)", "PyObject_Format(tuple, PyExc_KeyError)", "PyObject_Format(tuple, PyExc_KeyboardInterrupt)", "PyObject_Format(tuple, PyExc_LookupError)", "PyObject_Format(tuple, PyExc_MemoryError)", "PyObject_Format(tuple, PyExc_NameError)", "PyObject_Format(tuple, PyExc_NotImplementedError)", "PyObject_Format(tuple, PyExc_OSError)", "PyObject_Format(tuple, PyExc_OverflowError)", "PyObject_Format(tuple, PyExc_ReferenceError)", "PyObject_Format(tuple, PyExc_RuntimeError)", "PyObject_Format(tuple, PyExc_StopIteration)", "PyObject_Format(tuple, PyExc_SyntaxError)", "PyObject_Format(tuple, PyExc_SystemError)", "PyObject_Format(tuple, PyExc_SystemExit)", "PyObject_Format(tuple, PyExc_TabError)", "PyObject_Format(tuple, PyExc_TypeError)", "PyObject_Format(tuple, PyExc_UnboundLocalError)", "PyObject_Format(tuple, _PySys_ProfileFunc)", "PyObject_Format(tuple, _PySys_TraceFunc)", "PyObject_Format(tuple, constant)", "PyObject_Format(tuple, consts)", "PyObject_Format(tuple, newconst)", "PyObject_Format(tuple, tuple)", "PyObject_GenericGetAttr(tuple, 0)", "PyObject_GenericGetAttr(tuple, PyExc_ArithmeticError)", "PyObject_GenericGetAttr(tuple, PyExc_AssertionError)", "PyObject_GenericGetAttr(tuple, PyExc_AttributeError)", "PyObject_GenericGetAttr(tuple, PyExc_BaseException)", "PyObject_GenericGetAttr(tuple, PyExc_EOFError)", "PyObject_GenericGetAttr(tuple, PyExc_EnvironmentError)", "PyObject_GenericGetAttr(tuple, PyExc_Exception)", "PyObject_GenericGetAttr(tuple, PyExc_FloatingPointError)", "PyObject_GenericGetAttr(tuple, PyExc_GeneratorExit)", "PyObject_GenericGetAttr(tuple, PyExc_IOError)", "PyObject_GenericGetAttr(tuple, PyExc_ImportError)", "PyObject_GenericGetAttr(tuple, PyExc_IndentationError)", "PyObject_GenericGetAttr(tuple, PyExc_IndexError)", "PyObject_GenericGetAttr(tuple, PyExc_KeyError)", "PyObject_GenericGetAttr(tuple, PyExc_KeyboardInterrupt)", "PyObject_GenericGetAttr(tuple, PyExc_LookupError)", "PyObject_GenericGetAttr(tuple, PyExc_MemoryError)", "PyObject_GenericGetAttr(tuple, PyExc_NameError)", "PyObject_GenericGetAttr(tuple, PyExc_NotImplementedError)", "PyObject_GenericGetAttr(tuple, PyExc_OSError)", "PyObject_GenericGetAttr(tuple, PyExc_OverflowError)", "PyObject_GenericGetAttr(tuple, PyExc_ReferenceError)", "PyObject_GenericGetAttr(tuple, PyExc_RuntimeError)", "PyObject_GenericGetAttr(tuple, PyExc_StopIteration)", "PyObject_GenericGetAttr(tuple, PyExc_SyntaxError)", "PyObject_GenericGetAttr(tuple, PyExc_SystemError)", "PyObject_GenericGetAttr(tuple, PyExc_SystemExit)", "PyObject_GenericGetAttr(tuple, PyExc_TabError)", "PyObject_GenericGetAttr(tuple, PyExc_TypeError)", "PyObject_GenericGetAttr(tuple, PyExc_UnboundLocalError)", "PyObject_GenericGetAttr(tuple, _PySys_ProfileFunc)", "PyObject_GenericGetAttr(tuple, _PySys_TraceFunc)", "PyObject_GenericGetAttr(tuple, constant)", "PyObject_GenericGetAttr(tuple, consts)", "PyObject_GenericGetAttr(tuple, newconst)", "PyObject_GenericGetAttr(tuple, tuple)", "PyObject_GetAttr(tuple, 0)", "PyObject_GetAttr(tuple, PyExc_ArithmeticError)", "PyObject_GetAttr(tuple, PyExc_AssertionError)", "PyObject_GetAttr(tuple, PyExc_AttributeError)", "PyObject_GetAttr(tuple, PyExc_BaseException)", "PyObject_GetAttr(tuple, PyExc_EOFError)", "PyObject_GetAttr(tuple, PyExc_EnvironmentError)", "PyObject_GetAttr(tuple, PyExc_Exception)", "PyObject_GetAttr(tuple, PyExc_FloatingPointError)", "PyObject_GetAttr(tuple, PyExc_GeneratorExit)", "PyObject_GetAttr(tuple, PyExc_IOError)", "PyObject_GetAttr(tuple, PyExc_ImportError)", "PyObject_GetAttr(tuple, PyExc_IndentationError)", "PyObject_GetAttr(tuple, PyExc_IndexError)", "PyObject_GetAttr(tuple, PyExc_KeyError)", "PyObject_GetAttr(tuple, PyExc_KeyboardInterrupt)", "PyObject_GetAttr(tuple, PyExc_LookupError)", "PyObject_GetAttr(tuple, PyExc_MemoryError)", "PyObject_GetAttr(tuple, PyExc_NameError)", "PyObject_GetAttr(tuple, PyExc_NotImplementedError)", "PyObject_GetAttr(tuple, PyExc_OSError)", "PyObject_GetAttr(tuple, PyExc_OverflowError)", "PyObject_GetAttr(tuple, PyExc_ReferenceError)", "PyObject_GetAttr(tuple, PyExc_RuntimeError)", "PyObject_GetAttr(tuple, PyExc_StopIteration)", "PyObject_GetAttr(tuple, PyExc_SyntaxError)", "PyObject_GetAttr(tuple, PyExc_SystemError)", "PyObject_GetAttr(tuple, PyExc_SystemExit)", "PyObject_GetAttr(tuple, PyExc_TabError)", "PyObject_GetAttr(tuple, PyExc_TypeError)", "PyObject_GetAttr(tuple, PyExc_UnboundLocalError)", "PyObject_GetAttr(tuple, _PySys_ProfileFunc)", "PyObject_GetAttr(tuple, _PySys_TraceFunc)", "PyObject_GetAttr(tuple, constant)", "PyObject_GetAttr(tuple, consts)", "PyObject_GetAttr(tuple, newconst)", "PyObject_GetAttr(tuple, tuple)", "PyObject_GetAttrString(tuple, 0)", "PyObject_GetAttrString(tuple, Py_FileSystemDefaultEncoding)", "PyObject_GetItem(tuple, 0)", "PyObject_GetItem(tuple, PyExc_ArithmeticError)", "PyObject_GetItem(tuple, PyExc_AssertionError)", "PyObject_GetItem(tuple, PyExc_AttributeError)", "PyObject_GetItem(tuple, PyExc_BaseException)", "PyObject_GetItem(tuple, PyExc_EOFError)", "PyObject_GetItem(tuple, PyExc_EnvironmentError)", "PyObject_GetItem(tuple, PyExc_Exception)", "PyObject_GetItem(tuple, PyExc_FloatingPointError)", "PyObject_GetItem(tuple, PyExc_GeneratorExit)", "PyObject_GetItem(tuple, PyExc_IOError)", "PyObject_GetItem(tuple, PyExc_ImportError)", "PyObject_GetItem(tuple, PyExc_IndentationError)", "PyObject_GetItem(tuple, PyExc_IndexError)", "PyObject_GetItem(tuple, PyExc_KeyError)", "PyObject_GetItem(tuple, PyExc_KeyboardInterrupt)", "PyObject_GetItem(tuple, PyExc_LookupError)", "PyObject_GetItem(tuple, PyExc_MemoryError)", "PyObject_GetItem(tuple, PyExc_NameError)", "PyObject_GetItem(tuple, PyExc_NotImplementedError)", "PyObject_GetItem(tuple, PyExc_OSError)", "PyObject_GetItem(tuple, PyExc_OverflowError)", "PyObject_GetItem(tuple, PyExc_ReferenceError)", "PyObject_GetItem(tuple, PyExc_RuntimeError)", "PyObject_GetItem(tuple, PyExc_StopIteration)", "PyObject_GetItem(tuple, PyExc_SyntaxError)", "PyObject_GetItem(tuple, PyExc_SystemError)", "PyObject_GetItem(tuple, PyExc_SystemExit)", "PyObject_GetItem(tuple, PyExc_TabError)", "PyObject_GetItem(tuple, PyExc_TypeError)", "PyObject_GetItem(tuple, PyExc_UnboundLocalError)", "PyObject_GetItem(tuple, _PySys_ProfileFunc)", "PyObject_GetItem(tuple, _PySys_TraceFunc)", "PyObject_GetItem(tuple, constant)", "PyObject_GetItem(tuple, consts)", "PyObject_GetItem(tuple, newconst)", "PyObject_GetItem(tuple, tuple)", "PyObject_Init(tuple, 0)", "PySequence_Concat(tuple, 0)", "PySequence_Concat(tuple, PyExc_ArithmeticError)", "PySequence_Concat(tuple, PyExc_AssertionError)", "PySequence_Concat(tuple, PyExc_AttributeError)", "PySequence_Concat(tuple, PyExc_BaseException)", "PySequence_Concat(tuple, PyExc_EOFError)", "PySequence_Concat(tuple, PyExc_EnvironmentError)", "PySequence_Concat(tuple, PyExc_Exception)", "PySequence_Concat(tuple, PyExc_FloatingPointError)", "PySequence_Concat(tuple, PyExc_GeneratorExit)", "PySequence_Concat(tuple, PyExc_IOError)", "PySequence_Concat(tuple, PyExc_ImportError)", "PySequence_Concat(tuple, PyExc_IndentationError)", "PySequence_Concat(tuple, PyExc_IndexError)", "PySequence_Concat(tuple, PyExc_KeyError)", "PySequence_Concat(tuple, PyExc_KeyboardInterrupt)", "PySequence_Concat(tuple, PyExc_LookupError)", "PySequence_Concat(tuple, PyExc_MemoryError)", "PySequence_Concat(tuple, PyExc_NameError)", "PySequence_Concat(tuple, PyExc_NotImplementedError)", "PySequence_Concat(tuple, PyExc_OSError)", "PySequence_Concat(tuple, PyExc_OverflowError)", "PySequence_Concat(tuple, PyExc_ReferenceError)", "PySequence_Concat(tuple, PyExc_RuntimeError)", "PySequence_Concat(tuple, PyExc_StopIteration)", "PySequence_Concat(tuple, PyExc_SyntaxError)", "PySequence_Concat(tuple, PyExc_SystemError)", "PySequence_Concat(tuple, PyExc_SystemExit)", "PySequence_Concat(tuple, PyExc_TabError)", "PySequence_Concat(tuple, PyExc_TypeError)", "PySequence_Concat(tuple, PyExc_UnboundLocalError)", "PySequence_Concat(tuple, _PySys_ProfileFunc)", "PySequence_Concat(tuple, _PySys_TraceFunc)", "PySequence_Concat(tuple, constant)", "PySequence_Concat(tuple, consts)", "PySequence_Concat(tuple, newconst)", "PySequence_Concat(tuple, tuple)", "PySequence_Fast(tuple, 0)", "PySequence_Fast(tuple, Py_FileSystemDefaultEncoding)", "PySequence_GetItem(tuple, 0)", "PySequence_GetItem(tuple, 1)", "PySequence_GetItem(tuple, 100)", "PySequence_GetItem(tuple, 102)", "PySequence_GetItem(tuple, 104)", "PySequence_GetItem(tuple, 120)", "PySequence_GetItem(tuple, 127)", "PySequence_GetItem(tuple, 130)", "PySequence_GetItem(tuple, 2)", "PySequence_GetItem(tuple, 255)", "PySequence_GetItem(tuple, 8)", "PySequence_GetItem(tuple, i)", "PySequence_GetItem(tuple, len_consts)", "PySequence_GetItem(tuple, n)", "PySequence_InPlaceConcat(tuple, 0)", "PySequence_InPlaceConcat(tuple, PyExc_ArithmeticError)", "PySequence_InPlaceConcat(tuple, PyExc_AssertionError)", "PySequence_InPlaceConcat(tuple, PyExc_AttributeError)", "PySequence_InPlaceConcat(tuple, PyExc_BaseException)", "PySequence_InPlaceConcat(tuple, PyExc_EOFError)", "PySequence_InPlaceConcat(tuple, PyExc_EnvironmentError)", "PySequence_InPlaceConcat(tuple, PyExc_Exception)", "PySequence_InPlaceConcat(tuple, PyExc_FloatingPointError)", "PySequence_InPlaceConcat(tuple, PyExc_GeneratorExit)", "PySequence_InPlaceConcat(tuple, PyExc_IOError)", "PySequence_InPlaceConcat(tuple, PyExc_ImportError)", "PySequence_InPlaceConcat(tuple, PyExc_IndentationError)", "PySequence_InPlaceConcat(tuple, PyExc_IndexError)", "PySequence_InPlaceConcat(tuple, PyExc_KeyError)", "PySequence_InPlaceConcat(tuple, PyExc_KeyboardInterrupt)", "PySequence_InPlaceConcat(tuple, PyExc_LookupError)", "PySequence_InPlaceConcat(tuple, PyExc_MemoryError)", "PySequence_InPlaceConcat(tuple, PyExc_NameError)", "PySequence_InPlaceConcat(tuple, PyExc_NotImplementedError)", "PySequence_InPlaceConcat(tuple, PyExc_OSError)", "PySequence_InPlaceConcat(tuple, PyExc_OverflowError)", "PySequence_InPlaceConcat(tuple, PyExc_ReferenceError)", "PySequence_InPlaceConcat(tuple, PyExc_RuntimeError)", "PySequence_InPlaceConcat(tuple, PyExc_StopIteration)", "PySequence_InPlaceConcat(tuple, PyExc_SyntaxError)", "PySequence_InPlaceConcat(tuple, PyExc_SystemError)", "PySequence_InPlaceConcat(tuple, PyExc_SystemExit)", "PySequence_InPlaceConcat(tuple, PyExc_TabError)", "PySequence_InPlaceConcat(tuple, PyExc_TypeError)", "PySequence_InPlaceConcat(tuple, PyExc_UnboundLocalError)", "PySequence_InPlaceConcat(tuple, _PySys_ProfileFunc)", "PySequence_InPlaceConcat(tuple, _PySys_TraceFunc)", "PySequence_InPlaceConcat(tuple, constant)", "PySequence_InPlaceConcat(tuple, consts)", "PySequence_InPlaceConcat(tuple, newconst)", "PySequence_InPlaceConcat(tuple, tuple)", "PySequence_InPlaceRepeat(tuple, 0)", "PySequence_InPlaceRepeat(tuple, 1)", "PySequence_InPlaceRepeat(tuple, 100)", "PySequence_InPlaceRepeat(tuple, 102)", "PySequence_InPlaceRepeat(tuple, 104)", "PySequence_InPlaceRepeat(tuple, 120)", "PySequence_InPlaceRepeat(tuple, 127)", "PySequence_InPlaceRepeat(tuple, 130)", "PySequence_InPlaceRepeat(tuple, 2)", "PySequence_InPlaceRepeat(tuple, 255)", "PySequence_InPlaceRepeat(tuple, 8)", "PySequence_InPlaceRepeat(tuple, i)", "PySequence_InPlaceRepeat(tuple, len_consts)", "PySequence_InPlaceRepeat(tuple, n)", "PySequence_Repeat(tuple, 0)", "PySequence_Repeat(tuple, 1)", "PySequence_Repeat(tuple, 100)", "PySequence_Repeat(tuple, 102)", "PySequence_Repeat(tuple, 104)", "PySequence_Repeat(tuple, 120)", "PySequence_Repeat(tuple, 127)", "PySequence_Repeat(tuple, 130)", "PySequence_Repeat(tuple, 2)", "PySequence_Repeat(tuple, 255)", "PySequence_Repeat(tuple, 8)", "PySequence_Repeat(tuple, i)", "PySequence_Repeat(tuple, len_consts)", "PySequence_Repeat(tuple, n)", "PyStructSequence_GetItem(tuple, 0)", "PyStructSequence_GetItem(tuple, 1)", "PyStructSequence_GetItem(tuple, 100)", "PyStructSequence_GetItem(tuple, 102)", "PyStructSequence_GetItem(tuple, 104)", "PyStructSequence_GetItem(tuple, 120)", "PyStructSequence_GetItem(tuple, 127)", "PyStructSequence_GetItem(tuple, 130)", "PyStructSequence_GetItem(tuple, 2)", "PyStructSequence_GetItem(tuple, 255)", "PyStructSequence_GetItem(tuple, 8)", "PyStructSequence_GetItem(tuple, i)", "PyStructSequence_GetItem(tuple, len_consts)", "PyStructSequence_GetItem(tuple, n)", "PyTuple_GetItem(tuple, 0)", "PyTuple_GetItem(tuple, 1)", "PyTuple_GetItem(tuple, 100)", "PyTuple_GetItem(tuple, 102)", "PyTuple_GetItem(tuple, 104)", "PyTuple_GetItem(tuple, 120)", "PyTuple_GetItem(tuple, 127)", "PyTuple_GetItem(tuple, 130)", "PyTuple_GetItem(tuple, 2)", "PyTuple_GetItem(tuple, 255)", "PyTuple_GetItem(tuple, 8)", "PyTuple_GetItem(tuple, i)", "PyTuple_GetItem(tuple, len_consts)", "PyTuple_GetItem(tuple, n)", "PyUnicodeUCS2_AsCharmapString(tuple, 0)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_ArithmeticError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_AssertionError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_AttributeError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_BaseException)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_EOFError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_EnvironmentError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_Exception)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_FloatingPointError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_GeneratorExit)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_IOError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_ImportError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_IndentationError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_IndexError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_KeyError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_KeyboardInterrupt)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_LookupError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_MemoryError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_NameError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_NotImplementedError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_OSError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_OverflowError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_ReferenceError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_RuntimeError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_StopIteration)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_SyntaxError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_SystemError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_SystemExit)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_TabError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_TypeError)", "PyUnicodeUCS2_AsCharmapString(tuple, PyExc_UnboundLocalError)", "PyUnicodeUCS2_AsCharmapString(tuple, _PySys_ProfileFunc)", "PyUnicodeUCS2_AsCharmapString(tuple, _PySys_TraceFunc)", "PyUnicodeUCS2_AsCharmapString(tuple, constant)", "PyUnicodeUCS2_AsCharmapString(tuple, consts)", "PyUnicodeUCS2_AsCharmapString(tuple, newconst)", "PyUnicodeUCS2_AsCharmapString(tuple, tuple)", "PyUnicodeUCS2_Concat(tuple, 0)", "PyUnicodeUCS2_Concat(tuple, PyExc_ArithmeticError)", "PyUnicodeUCS2_Concat(tuple, PyExc_AssertionError)", "PyUnicodeUCS2_Concat(tuple, PyExc_AttributeError)", "PyUnicodeUCS2_Concat(tuple, PyExc_BaseException)", "PyUnicodeUCS2_Concat(tuple, PyExc_EOFError)", "PyUnicodeUCS2_Concat(tuple, PyExc_EnvironmentError)", "PyUnicodeUCS2_Concat(tuple, PyExc_Exception)", "PyUnicodeUCS2_Concat(tuple, PyExc_FloatingPointError)", "PyUnicodeUCS2_Concat(tuple, PyExc_GeneratorExit)", "PyUnicodeUCS2_Concat(tuple, PyExc_IOError)", "PyUnicodeUCS2_Concat(tuple, PyExc_ImportError)", "PyUnicodeUCS2_Concat(tuple, PyExc_IndentationError)", "PyUnicodeUCS2_Concat(tuple, PyExc_IndexError)", "PyUnicodeUCS2_Concat(tuple, PyExc_KeyError)", "PyUnicodeUCS2_Concat(tuple, PyExc_KeyboardInterrupt)", "PyUnicodeUCS2_Concat(tuple, PyExc_LookupError)", "PyUnicodeUCS2_Concat(tuple, PyExc_MemoryError)", "PyUnicodeUCS2_Concat(tuple, PyExc_NameError)", "PyUnicodeUCS2_Concat(tuple, PyExc_NotImplementedError)", "PyUnicodeUCS2_Concat(tuple, PyExc_OSError)", "PyUnicodeUCS2_Concat(tuple, PyExc_OverflowError)", "PyUnicodeUCS2_Concat(tuple, PyExc_ReferenceError)", "PyUnicodeUCS2_Concat(tuple, PyExc_RuntimeError)", "PyUnicodeUCS2_Concat(tuple, PyExc_StopIteration)", "PyUnicodeUCS2_Concat(tuple, PyExc_SyntaxError)", "PyUnicodeUCS2_Concat(tuple, PyExc_SystemError)", "PyUnicodeUCS2_Concat(tuple, PyExc_SystemExit)", "PyUnicodeUCS2_Concat(tuple, PyExc_TabError)", "PyUnicodeUCS2_Concat(tuple, PyExc_TypeError)", "PyUnicodeUCS2_Concat(tuple, PyExc_UnboundLocalError)", "PyUnicodeUCS2_Concat(tuple, _PySys_ProfileFunc)", "PyUnicodeUCS2_Concat(tuple, _PySys_TraceFunc)", "PyUnicodeUCS2_Concat(tuple, constant)", "PyUnicodeUCS2_Concat(tuple, consts)", "PyUnicodeUCS2_Concat(tuple, newconst)", "PyUnicodeUCS2_Concat(tuple, tuple)", "PyUnicodeUCS2_Format(tuple, 0)", "PyUnicodeUCS2_Format(tuple, PyExc_ArithmeticError)", "PyUnicodeUCS2_Format(tuple, PyExc_AssertionError)", "PyUnicodeUCS2_Format(tuple, PyExc_AttributeError)", "PyUnicodeUCS2_Format(tuple, PyExc_BaseException)", "PyUnicodeUCS2_Format(tuple, PyExc_EOFError)", "PyUnicodeUCS2_Format(tuple, PyExc_EnvironmentError)", "PyUnicodeUCS2_Format(tuple, PyExc_Exception)", "PyUnicodeUCS2_Format(tuple, PyExc_FloatingPointError)", "PyUnicodeUCS2_Format(tuple, PyExc_GeneratorExit)", "PyUnicodeUCS2_Format(tuple, PyExc_IOError)", "PyUnicodeUCS2_Format(tuple, PyExc_ImportError)", "PyUnicodeUCS2_Format(tuple, PyExc_IndentationError)", "PyUnicodeUCS2_Format(tuple, PyExc_IndexError)", "PyUnicodeUCS2_Format(tuple, PyExc_KeyError)", "PyUnicodeUCS2_Format(tuple, PyExc_KeyboardInterrupt)", "PyUnicodeUCS2_Format(tuple, PyExc_LookupError)", "PyUnicodeUCS2_Format(tuple, PyExc_MemoryError)", "PyUnicodeUCS2_Format(tuple, PyExc_NameError)", "PyUnicodeUCS2_Format(tuple, PyExc_NotImplementedError)", "PyUnicodeUCS2_Format(tuple, PyExc_OSError)", "PyUnicodeUCS2_Format(tuple, PyExc_OverflowError)", "PyUnicodeUCS2_Format(tuple, PyExc_ReferenceError)", "PyUnicodeUCS2_Format(tuple, PyExc_RuntimeError)", "PyUnicodeUCS2_Format(tuple, PyExc_StopIteration)", "PyUnicodeUCS2_Format(tuple, PyExc_SyntaxError)", "PyUnicodeUCS2_Format(tuple, PyExc_SystemError)", "PyUnicodeUCS2_Format(tuple, PyExc_SystemExit)", "PyUnicodeUCS2_Format(tuple, PyExc_TabError)", "PyUnicodeUCS2_Format(tuple, PyExc_TypeError)", "PyUnicodeUCS2_Format(tuple, PyExc_UnboundLocalError)", "PyUnicodeUCS2_Format(tuple, _PySys_ProfileFunc)", "PyUnicodeUCS2_Format(tuple, _PySys_TraceFunc)", "PyUnicodeUCS2_Format(tuple, constant)", "PyUnicodeUCS2_Format(tuple, consts)", "PyUnicodeUCS2_Format(tuple, newconst)", "PyUnicodeUCS2_Format(tuple, tuple)", "PyUnicodeUCS2_Join(tuple, 0)", "PyUnicodeUCS2_Join(tuple, PyExc_ArithmeticError)", "PyUnicodeUCS2_Join(tuple, PyExc_AssertionError)", "PyUnicodeUCS2_Join(tuple, PyExc_AttributeError)", "PyUnicodeUCS2_Join(tuple, PyExc_BaseException)", "PyUnicodeUCS2_Join(tuple, PyExc_EOFError)", "PyUnicodeUCS2_Join(tuple, PyExc_EnvironmentError)", "PyUnicodeUCS2_Join(tuple, PyExc_Exception)", "PyUnicodeUCS2_Join(tuple, PyExc_FloatingPointError)", "PyUnicodeUCS2_Join(tuple, PyExc_GeneratorExit)", "PyUnicodeUCS2_Join(tuple, PyExc_IOError)", "PyUnicodeUCS2_Join(tuple, PyExc_ImportError)", "PyUnicodeUCS2_Join(tuple, PyExc_IndentationError)", "PyUnicodeUCS2_Join(tuple, PyExc_IndexError)", "PyUnicodeUCS2_Join(tuple, PyExc_KeyError)", "PyUnicodeUCS2_Join(tuple, PyExc_KeyboardInterrupt)", "PyUnicodeUCS2_Join(tuple, PyExc_LookupError)", "PyUnicodeUCS2_Join(tuple, PyExc_MemoryError)", "PyUnicodeUCS2_Join(tuple, PyExc_NameError)", "PyUnicodeUCS2_Join(tuple, PyExc_NotImplementedError)", "PyUnicodeUCS2_Join(tuple, PyExc_OSError)", "PyUnicodeUCS2_Join(tuple, PyExc_OverflowError)", "PyUnicodeUCS2_Join(tuple, PyExc_ReferenceError)", "PyUnicodeUCS2_Join(tuple, PyExc_RuntimeError)", "PyUnicodeUCS2_Join(tuple, PyExc_StopIteration)", "PyUnicodeUCS2_Join(tuple, PyExc_SyntaxError)", "PyUnicodeUCS2_Join(tuple, PyExc_SystemError)", "PyUnicodeUCS2_Join(tuple, PyExc_SystemExit)", "PyUnicodeUCS2_Join(tuple, PyExc_TabError)", "PyUnicodeUCS2_Join(tuple, PyExc_TypeError)", "PyUnicodeUCS2_Join(tuple, PyExc_UnboundLocalError)", "PyUnicodeUCS2_Join(tuple, _PySys_ProfileFunc)", "PyUnicodeUCS2_Join(tuple, _PySys_TraceFunc)", "PyUnicodeUCS2_Join(tuple, constant)", "PyUnicodeUCS2_Join(tuple, consts)", "PyUnicodeUCS2_Join(tuple, newconst)", "PyUnicodeUCS2_Join(tuple, tuple)", "PyUnicodeUCS2_Partition(tuple, 0)", "PyUnicodeUCS2_Partition(tuple, PyExc_ArithmeticError)", "PyUnicodeUCS2_Partition(tuple, PyExc_AssertionError)", "PyUnicodeUCS2_Partition(tuple, PyExc_AttributeError)", "PyUnicodeUCS2_Partition(tuple, PyExc_BaseException)", "PyUnicodeUCS2_Partition(tuple, PyExc_EOFError)", "PyUnicodeUCS2_Partition(tuple, PyExc_EnvironmentError)", "PyUnicodeUCS2_Partition(tuple, PyExc_Exception)", "PyUnicodeUCS2_Partition(tuple, PyExc_FloatingPointError)", "PyUnicodeUCS2_Partition(tuple, PyExc_GeneratorExit)", "PyUnicodeUCS2_Partition(tuple, PyExc_IOError)", "PyUnicodeUCS2_Partition(tuple, PyExc_ImportError)", "PyUnicodeUCS2_Partition(tuple, PyExc_IndentationError)", "PyUnicodeUCS2_Partition(tuple, PyExc_IndexError)", "PyUnicodeUCS2_Partition(tuple, PyExc_KeyError)", "PyUnicodeUCS2_Partition(tuple, PyExc_KeyboardInterrupt)", "PyUnicodeUCS2_Partition(tuple, PyExc_LookupError)", "PyUnicodeUCS2_Partition(tuple, PyExc_MemoryError)", "PyUnicodeUCS2_Partition(tuple, PyExc_NameError)", "PyUnicodeUCS2_Partition(tuple, PyExc_NotImplementedError)", "PyUnicodeUCS2_Partition(tuple, PyExc_OSError)", "PyUnicodeUCS2_Partition(tuple, PyExc_OverflowError)", "PyUnicodeUCS2_Partition(tuple, PyExc_ReferenceError)", "PyUnicodeUCS2_Partition(tuple, PyExc_RuntimeError)", "PyUnicodeUCS2_Partition(tuple, PyExc_StopIteration)", "PyUnicodeUCS2_Partition(tuple, PyExc_SyntaxError)", "PyUnicodeUCS2_Partition(tuple, PyExc_SystemError)", "PyUnicodeUCS2_Partition(tuple, PyExc_SystemExit)", "PyUnicodeUCS2_Partition(tuple, PyExc_TabError)", "PyUnicodeUCS2_Partition(tuple, PyExc_TypeError)", "PyUnicodeUCS2_Partition(tuple, PyExc_UnboundLocalError)", "PyUnicodeUCS2_Partition(tuple, _PySys_ProfileFunc)", "PyUnicodeUCS2_Partition(tuple, _PySys_TraceFunc)", "PyUnicodeUCS2_Partition(tuple, constant)", "PyUnicodeUCS2_Partition(tuple, consts)", "PyUnicodeUCS2_Partition(tuple, newconst)", "PyUnicodeUCS2_Partition(tuple, tuple)", "PyUnicodeUCS2_RPartition(tuple, 0)", "PyUnicodeUCS2_RPartition(tuple, PyExc_ArithmeticError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_AssertionError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_AttributeError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_BaseException)", "PyUnicodeUCS2_RPartition(tuple, PyExc_EOFError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_EnvironmentError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_Exception)", "PyUnicodeUCS2_RPartition(tuple, PyExc_FloatingPointError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_GeneratorExit)", "PyUnicodeUCS2_RPartition(tuple, PyExc_IOError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_ImportError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_IndentationError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_IndexError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_KeyError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_KeyboardInterrupt)", "PyUnicodeUCS2_RPartition(tuple, PyExc_LookupError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_MemoryError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_NameError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_NotImplementedError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_OSError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_OverflowError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_ReferenceError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_RuntimeError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_StopIteration)", "PyUnicodeUCS2_RPartition(tuple, PyExc_SyntaxError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_SystemError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_SystemExit)", "PyUnicodeUCS2_RPartition(tuple, PyExc_TabError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_TypeError)", "PyUnicodeUCS2_RPartition(tuple, PyExc_UnboundLocalError)", "PyUnicodeUCS2_RPartition(tuple, _PySys_ProfileFunc)", "PyUnicodeUCS2_RPartition(tuple, _PySys_TraceFunc)", "PyUnicodeUCS2_RPartition(tuple, constant)", "PyUnicodeUCS2_RPartition(tuple, consts)", "PyUnicodeUCS2_RPartition(tuple, newconst)", "PyUnicodeUCS2_RPartition(tuple, tuple)", "PyUnicodeUCS2_Splitlines(tuple, 0)", "PyUnicodeUCS2_Splitlines(tuple, 1)", "PyUnicodeUCS2_Splitlines(tuple, 100)", "PyUnicodeUCS2_Splitlines(tuple, 102)", "PyUnicodeUCS2_Splitlines(tuple, 104)", "PyUnicodeUCS2_Splitlines(tuple, 120)", "PyUnicodeUCS2_Splitlines(tuple, 127)", "PyUnicodeUCS2_Splitlines(tuple, 130)", "PyUnicodeUCS2_Splitlines(tuple, 2)", "PyUnicodeUCS2_Splitlines(tuple, 255)", "PyUnicodeUCS2_Splitlines(tuple, 8)", "PyUnicodeUCS2_Splitlines(tuple, Py_BytesWarningFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_DebugFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_DontWriteBytecodeFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_FrozenFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_HasFileSystemDefaultEncoding)", "PyUnicodeUCS2_Splitlines(tuple, Py_IgnoreEnvironmentFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_InspectFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_InteractiveFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_NoSiteFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_NoUserSiteDirectory)", "PyUnicodeUCS2_Splitlines(tuple, Py_OptimizeFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_QuietFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_UnbufferedStdioFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_UseClassExceptionsFlag)", "PyUnicodeUCS2_Splitlines(tuple, Py_VerboseFlag)", "PyUnicodeUCS2_Splitlines(tuple, _Py_CheckRecursionLimit)", "PyWeakref_NewProxy(tuple, 0)", "PyWeakref_NewProxy(tuple, PyExc_ArithmeticError)", "PyWeakref_NewProxy(tuple, PyExc_AssertionError)", "PyWeakref_NewProxy(tuple, PyExc_AttributeError)", "PyWeakref_NewProxy(tuple, PyExc_BaseException)", "PyWeakref_NewProxy(tuple, PyExc_EOFError)", "PyWeakref_NewProxy(tuple, PyExc_EnvironmentError)", "PyWeakref_NewProxy(tuple, PyExc_Exception)", "PyWeakref_NewProxy(tuple, PyExc_FloatingPointError)", "PyWeakref_NewProxy(tuple, PyExc_GeneratorExit)", "PyWeakref_NewProxy(tuple, PyExc_IOError)", "PyWeakref_NewProxy(tuple, PyExc_ImportError)", "PyWeakref_NewProxy(tuple, PyExc_IndentationError)", "PyWeakref_NewProxy(tuple, PyExc_IndexError)", "PyWeakref_NewProxy(tuple, PyExc_KeyError)", "PyWeakref_NewProxy(tuple, PyExc_KeyboardInterrupt)", "PyWeakref_NewProxy(tuple, PyExc_LookupError)", "PyWeakref_NewProxy(tuple, PyExc_MemoryError)", "PyWeakref_NewProxy(tuple, PyExc_NameError)", "PyWeakref_NewProxy(tuple, PyExc_NotImplementedError)", "PyWeakref_NewProxy(tuple, PyExc_OSError)", "PyWeakref_NewProxy(tuple, PyExc_OverflowError)", "PyWeakref_NewProxy(tuple, PyExc_ReferenceError)", "PyWeakref_NewProxy(tuple, PyExc_RuntimeError)", "PyWeakref_NewProxy(tuple, PyExc_StopIteration)", "PyWeakref_NewProxy(tuple, PyExc_SyntaxError)", "PyWeakref_NewProxy(tuple, PyExc_SystemError)", "PyWeakref_NewProxy(tuple, PyExc_SystemExit)", "PyWeakref_NewProxy(tuple, PyExc_TabError)", "PyWeakref_NewProxy(tuple, PyExc_TypeError)", "PyWeakref_NewProxy(tuple, PyExc_UnboundLocalError)", "PyWeakref_NewProxy(tuple, _PySys_ProfileFunc)", "PyWeakref_NewProxy(tuple, _PySys_TraceFunc)", "PyWeakref_NewProxy(tuple, constant)", "PyWeakref_NewProxy(tuple, consts)", "PyWeakref_NewProxy(tuple, newconst)", "PyWeakref_NewProxy(tuple, tuple)", "PyWeakref_NewRef(tuple, 0)", "PyWeakref_NewRef(tuple, PyExc_ArithmeticError)", "PyWeakref_NewRef(tuple, PyExc_AssertionError)", "PyWeakref_NewRef(tuple, PyExc_AttributeError)", "PyWeakref_NewRef(tuple, PyExc_BaseException)", "PyWeakref_NewRef(tuple, PyExc_EOFError)", "PyWeakref_NewRef(tuple, PyExc_EnvironmentError)", "PyWeakref_NewRef(tuple, PyExc_Exception)", "PyWeakref_NewRef(tuple, PyExc_FloatingPointError)", "PyWeakref_NewRef(tuple, PyExc_GeneratorExit)", "PyWeakref_NewRef(tuple, PyExc_IOError)", "PyWeakref_NewRef(tuple, PyExc_ImportError)", "PyWeakref_NewRef(tuple, PyExc_IndentationError)", "PyWeakref_NewRef(tuple, PyExc_IndexError)", "PyWeakref_NewRef(tuple, PyExc_KeyError)", "PyWeakref_NewRef(tuple, PyExc_KeyboardInterrupt)", "PyWeakref_NewRef(tuple, PyExc_LookupError)", "PyWeakref_NewRef(tuple, PyExc_MemoryError)", "PyWeakref_NewRef(tuple, PyExc_NameError)", "PyWeakref_NewRef(tuple, PyExc_NotImplementedError)", "PyWeakref_NewRef(tuple, PyExc_OSError)", "PyWeakref_NewRef(tuple, PyExc_OverflowError)", "PyWeakref_NewRef(tuple, PyExc_ReferenceError)", "PyWeakref_NewRef(tuple, PyExc_RuntimeError)", "PyWeakref_NewRef(tuple, PyExc_StopIteration)", "PyWeakref_NewRef(tuple, PyExc_SyntaxError)", "PyWeakref_NewRef(tuple, PyExc_SystemError)", "PyWeakref_NewRef(tuple, PyExc_SystemExit)", "PyWeakref_NewRef(tuple, PyExc_TabError)", "PyWeakref_NewRef(tuple, PyExc_TypeError)", "PyWeakref_NewRef(tuple, PyExc_UnboundLocalError)", "PyWeakref_NewRef(tuple, _PySys_ProfileFunc)", "PyWeakref_NewRef(tuple, _PySys_TraceFunc)", "PyWeakref_NewRef(tuple, constant)", "PyWeakref_NewRef(tuple, consts)", "PyWeakref_NewRef(tuple, newconst)", "PyWeakref_NewRef(tuple, tuple)", "PyWrapper_New(tuple, 0)", "PyWrapper_New(tuple, PyExc_ArithmeticError)", "PyWrapper_New(tuple, PyExc_AssertionError)", "PyWrapper_New(tuple, PyExc_AttributeError)", "PyWrapper_New(tuple, PyExc_BaseException)", "PyWrapper_New(tuple, PyExc_EOFError)", "PyWrapper_New(tuple, PyExc_EnvironmentError)", "PyWrapper_New(tuple, PyExc_Exception)", "PyWrapper_New(tuple, PyExc_FloatingPointError)", "PyWrapper_New(tuple, PyExc_GeneratorExit)", "PyWrapper_New(tuple, PyExc_IOError)", "PyWrapper_New(tuple, PyExc_ImportError)", "PyWrapper_New(tuple, PyExc_IndentationError)", "PyWrapper_New(tuple, PyExc_IndexError)", "PyWrapper_New(tuple, PyExc_KeyError)", "PyWrapper_New(tuple, PyExc_KeyboardInterrupt)", "PyWrapper_New(tuple, PyExc_LookupError)", "PyWrapper_New(tuple, PyExc_MemoryError)", "PyWrapper_New(tuple, PyExc_NameError)", "PyWrapper_New(tuple, PyExc_NotImplementedError)", "PyWrapper_New(tuple, PyExc_OSError)", "PyWrapper_New(tuple, PyExc_OverflowError)", "PyWrapper_New(tuple, PyExc_ReferenceError)", "PyWrapper_New(tuple, PyExc_RuntimeError)", "PyWrapper_New(tuple, PyExc_StopIteration)", "PyWrapper_New(tuple, PyExc_SyntaxError)", "PyWrapper_New(tuple, PyExc_SystemError)", "PyWrapper_New(tuple, PyExc_SystemExit)", "PyWrapper_New(tuple, PyExc_TabError)", "PyWrapper_New(tuple, PyExc_TypeError)", "PyWrapper_New(tuple, PyExc_UnboundLocalError)", "PyWrapper_New(tuple, _PySys_ProfileFunc)", "PyWrapper_New(tuple, _PySys_TraceFunc)", "PyWrapper_New(tuple, constant)", "PyWrapper_New(tuple, consts)", "PyWrapper_New(tuple, newconst)", "PyWrapper_New(tuple, tuple)", "_PyBytes_Join(tuple, 0)", "_PyBytes_Join(tuple, PyExc_ArithmeticError)", "_PyBytes_Join(tuple, PyExc_AssertionError)", "_PyBytes_Join(tuple, PyExc_AttributeError)", "_PyBytes_Join(tuple, PyExc_BaseException)", "_PyBytes_Join(tuple, PyExc_EOFError)", "_PyBytes_Join(tuple, PyExc_EnvironmentError)", "_PyBytes_Join(tuple, PyExc_Exception)", "_PyBytes_Join(tuple, PyExc_FloatingPointError)", "_PyBytes_Join(tuple, PyExc_GeneratorExit)", "_PyBytes_Join(tuple, PyExc_IOError)", "_PyBytes_Join(tuple, PyExc_ImportError)", "_PyBytes_Join(tuple, PyExc_IndentationError)", "_PyBytes_Join(tuple, PyExc_IndexError)", "_PyBytes_Join(tuple, PyExc_KeyError)", "_PyBytes_Join(tuple, PyExc_KeyboardInterrupt)", "_PyBytes_Join(tuple, PyExc_LookupError)", "_PyBytes_Join(tuple, PyExc_MemoryError)", "_PyBytes_Join(tuple, PyExc_NameError)", "_PyBytes_Join(tuple, PyExc_NotImplementedError)", "_PyBytes_Join(tuple, PyExc_OSError)", "_PyBytes_Join(tuple, PyExc_OverflowError)", "_PyBytes_Join(tuple, PyExc_ReferenceError)", "_PyBytes_Join(tuple, PyExc_RuntimeError)", "_PyBytes_Join(tuple, PyExc_StopIteration)", "_PyBytes_Join(tuple, PyExc_SyntaxError)", "_PyBytes_Join(tuple, PyExc_SystemError)", "_PyBytes_Join(tuple, PyExc_SystemExit)", "_PyBytes_Join(tuple, PyExc_TabError)", "_PyBytes_Join(tuple, PyExc_TypeError)", "_PyBytes_Join(tuple, PyExc_UnboundLocalError)", "_PyBytes_Join(tuple, _PySys_ProfileFunc)", "_PyBytes_Join(tuple, _PySys_TraceFunc)", "_PyBytes_Join(tuple, constant)", "_PyBytes_Join(tuple, consts)", "_PyBytes_Join(tuple, newconst)", "_PyBytes_Join(tuple, tuple)", "_PyEval_CallTracing(tuple, 0)", "_PyEval_CallTracing(tuple, PyExc_ArithmeticError)", "_PyEval_CallTracing(tuple, PyExc_AssertionError)", "_PyEval_CallTracing(tuple, PyExc_AttributeError)", "_PyEval_CallTracing(tuple, PyExc_BaseException)", "_PyEval_CallTracing(tuple, PyExc_EOFError)", "_PyEval_CallTracing(tuple, PyExc_EnvironmentError)", "_PyEval_CallTracing(tuple, PyExc_Exception)", "_PyEval_CallTracing(tuple, PyExc_FloatingPointError)", "_PyEval_CallTracing(tuple, PyExc_GeneratorExit)", "_PyEval_CallTracing(tuple, PyExc_IOError)", "_PyEval_CallTracing(tuple, PyExc_ImportError)", "_PyEval_CallTracing(tuple, PyExc_IndentationError)", "_PyEval_CallTracing(tuple, PyExc_IndexError)", "_PyEval_CallTracing(tuple, PyExc_KeyError)", "_PyEval_CallTracing(tuple, PyExc_KeyboardInterrupt)", "_PyEval_CallTracing(tuple, PyExc_LookupError)", "_PyEval_CallTracing(tuple, PyExc_MemoryError)", "_PyEval_CallTracing(tuple, PyExc_NameError)", "_PyEval_CallTracing(tuple, PyExc_NotImplementedError)", "_PyEval_CallTracing(tuple, PyExc_OSError)", "_PyEval_CallTracing(tuple, PyExc_OverflowError)", "_PyEval_CallTracing(tuple, PyExc_ReferenceError)", "_PyEval_CallTracing(tuple, PyExc_RuntimeError)", "_PyEval_CallTracing(tuple, PyExc_StopIteration)", "_PyEval_CallTracing(tuple, PyExc_SyntaxError)", "_PyEval_CallTracing(tuple, PyExc_SystemError)", "_PyEval_CallTracing(tuple, PyExc_SystemExit)", "_PyEval_CallTracing(tuple, PyExc_TabError)", "_PyEval_CallTracing(tuple, PyExc_TypeError)", "_PyEval_CallTracing(tuple, PyExc_UnboundLocalError)", "_PyEval_CallTracing(tuple, _PySys_ProfileFunc)", "_PyEval_CallTracing(tuple, _PySys_TraceFunc)", "_PyEval_CallTracing(tuple, constant)", "_PyEval_CallTracing(tuple, consts)", "_PyEval_CallTracing(tuple, newconst)", "_PyEval_CallTracing(tuple, tuple)", "_PyImport_FindExtensionObject(tuple, 0)", "_PyImport_FindExtensionObject(tuple, PyExc_ArithmeticError)", "_PyImport_FindExtensionObject(tuple, PyExc_AssertionError)", "_PyImport_FindExtensionObject(tuple, PyExc_AttributeError)", "_PyImport_FindExtensionObject(tuple, PyExc_BaseException)", "_PyImport_FindExtensionObject(tuple, PyExc_EOFError)", "_PyImport_FindExtensionObject(tuple, PyExc_EnvironmentError)", "_PyImport_FindExtensionObject(tuple, PyExc_Exception)", "_PyImport_FindExtensionObject(tuple, PyExc_FloatingPointError)", "_PyImport_FindExtensionObject(tuple, PyExc_GeneratorExit)", "_PyImport_FindExtensionObject(tuple, PyExc_IOError)", "_PyImport_FindExtensionObject(tuple, PyExc_ImportError)", "_PyImport_FindExtensionObject(tuple, PyExc_IndentationError)", "_PyImport_FindExtensionObject(tuple, PyExc_IndexError)", "_PyImport_FindExtensionObject(tuple, PyExc_KeyError)", "_PyImport_FindExtensionObject(tuple, PyExc_KeyboardInterrupt)", "_PyImport_FindExtensionObject(tuple, PyExc_LookupError)", "_PyImport_FindExtensionObject(tuple, PyExc_MemoryError)", "_PyImport_FindExtensionObject(tuple, PyExc_NameError)", "_PyImport_FindExtensionObject(tuple, PyExc_NotImplementedError)", "_PyImport_FindExtensionObject(tuple, PyExc_OSError)", "_PyImport_FindExtensionObject(tuple, PyExc_OverflowError)", "_PyImport_FindExtensionObject(tuple, PyExc_ReferenceError)", "_PyImport_FindExtensionObject(tuple, PyExc_RuntimeError)", "_PyImport_FindExtensionObject(tuple, PyExc_StopIteration)", "_PyImport_FindExtensionObject(tuple, PyExc_SyntaxError)", "_PyImport_FindExtensionObject(tuple, PyExc_SystemError)", "_PyImport_FindExtensionObject(tuple, PyExc_SystemExit)", "_PyImport_FindExtensionObject(tuple, PyExc_TabError)", "_PyImport_FindExtensionObject(tuple, PyExc_TypeError)", "_PyImport_FindExtensionObject(tuple, PyExc_UnboundLocalError)", "_PyImport_FindExtensionObject(tuple, _PySys_ProfileFunc)", "_PyImport_FindExtensionObject(tuple, _PySys_TraceFunc)", "_PyImport_FindExtensionObject(tuple, constant)", "_PyImport_FindExtensionObject(tuple, consts)", "_PyImport_FindExtensionObject(tuple, newconst)", "_PyImport_FindExtensionObject(tuple, tuple)", "_PyLong_DivmodNear(tuple, 0)", "_PyLong_DivmodNear(tuple, PyExc_ArithmeticError)", "_PyLong_DivmodNear(tuple, PyExc_AssertionError)", "_PyLong_DivmodNear(tuple, PyExc_AttributeError)", "_PyLong_DivmodNear(tuple, PyExc_BaseException)", "_PyLong_DivmodNear(tuple, PyExc_EOFError)", "_PyLong_DivmodNear(tuple, PyExc_EnvironmentError)", "_PyLong_DivmodNear(tuple, PyExc_Exception)", "_PyLong_DivmodNear(tuple, PyExc_FloatingPointError)", "_PyLong_DivmodNear(tuple, PyExc_GeneratorExit)", "_PyLong_DivmodNear(tuple, PyExc_IOError)", "_PyLong_DivmodNear(tuple, PyExc_ImportError)", "_PyLong_DivmodNear(tuple, PyExc_IndentationError)", "_PyLong_DivmodNear(tuple, PyExc_IndexError)", "_PyLong_DivmodNear(tuple, PyExc_KeyError)", "_PyLong_DivmodNear(tuple, PyExc_KeyboardInterrupt)", "_PyLong_DivmodNear(tuple, PyExc_LookupError)", "_PyLong_DivmodNear(tuple, PyExc_MemoryError)", "_PyLong_DivmodNear(tuple, PyExc_NameError)", "_PyLong_DivmodNear(tuple, PyExc_NotImplementedError)", "_PyLong_DivmodNear(tuple, PyExc_OSError)", "_PyLong_DivmodNear(tuple, PyExc_OverflowError)", "_PyLong_DivmodNear(tuple, PyExc_ReferenceError)", "_PyLong_DivmodNear(tuple, PyExc_RuntimeError)", "_PyLong_DivmodNear(tuple, PyExc_StopIteration)", "_PyLong_DivmodNear(tuple, PyExc_SyntaxError)", "_PyLong_DivmodNear(tuple, PyExc_SystemError)", "_PyLong_DivmodNear(tuple, PyExc_SystemExit)", "_PyLong_DivmodNear(tuple, PyExc_TabError)", "_PyLong_DivmodNear(tuple, PyExc_TypeError)", "_PyLong_DivmodNear(tuple, PyExc_UnboundLocalError)", "_PyLong_DivmodNear(tuple, _PySys_ProfileFunc)", "_PyLong_DivmodNear(tuple, _PySys_TraceFunc)", "_PyLong_DivmodNear(tuple, constant)", "_PyLong_DivmodNear(tuple, consts)", "_PyLong_DivmodNear(tuple, newconst)", "_PyLong_DivmodNear(tuple, tuple)", "_PyLong_Format(tuple, 0)", "_PyLong_Format(tuple, 1)", "_PyLong_Format(tuple, 100)", "_PyLong_Format(tuple, 102)", "_PyLong_Format(tuple, 104)", "_PyLong_Format(tuple, 120)", "_PyLong_Format(tuple, 127)", "_PyLong_Format(tuple, 130)", "_PyLong_Format(tuple, 2)", "_PyLong_Format(tuple, 255)", "_PyLong_Format(tuple, 8)", "_PyLong_Format(tuple, Py_BytesWarningFlag)", "_PyLong_Format(tuple, Py_DebugFlag)", "_PyLong_Format(tuple, Py_DontWriteBytecodeFlag)", "_PyLong_Format(tuple, Py_FrozenFlag)", "_PyLong_Format(tuple, Py_HasFileSystemDefaultEncoding)", "_PyLong_Format(tuple, Py_IgnoreEnvironmentFlag)", "_PyLong_Format(tuple, Py_InspectFlag)", "_PyLong_Format(tuple, Py_InteractiveFlag)", "_PyLong_Format(tuple, Py_NoSiteFlag)", "_PyLong_Format(tuple, Py_NoUserSiteDirectory)", "_PyLong_Format(tuple, Py_OptimizeFlag)", "_PyLong_Format(tuple, Py_QuietFlag)", "_PyLong_Format(tuple, Py_UnbufferedStdioFlag)", "_PyLong_Format(tuple, Py_UseClassExceptionsFlag)", "_PyLong_Format(tuple, Py_VerboseFlag)", "_PyLong_Format(tuple, _Py_CheckRecursionLimit)", "_PyNumber_ConvertIntegralToInt(tuple, 0)", "_PyNumber_ConvertIntegralToInt(tuple, Py_FileSystemDefaultEncoding)", "_Py_Mangle(tuple, 0)", "_Py_Mangle(tuple, PyExc_ArithmeticError)", "_Py_Mangle(tuple, PyExc_AssertionError)", "_Py_Mangle(tuple, PyExc_AttributeError)", "_Py_Mangle(tuple, PyExc_BaseException)", "_Py_Mangle(tuple, PyExc_EOFError)", "_Py_Mangle(tuple, PyExc_EnvironmentError)", "_Py_Mangle(tuple, PyExc_Exception)", "_Py_Mangle(tuple, PyExc_FloatingPointError)", "_Py_Mangle(tuple, PyExc_GeneratorExit)", "_Py_Mangle(tuple, PyExc_IOError)", "_Py_Mangle(tuple, PyExc_ImportError)", "_Py_Mangle(tuple, PyExc_IndentationError)", "_Py_Mangle(tuple, PyExc_IndexError)", "_Py_Mangle(tuple, PyExc_KeyError)", "_Py_Mangle(tuple, PyExc_KeyboardInterrupt)", "_Py_Mangle(tuple, PyExc_LookupError)", "_Py_Mangle(tuple, PyExc_MemoryError)", "_Py_Mangle(tuple, PyExc_NameError)", "_Py_Mangle(tuple, PyExc_NotImplementedError)", "_Py_Mangle(tuple, PyExc_OSError)", "_Py_Mangle(tuple, PyExc_OverflowError)", "_Py_Mangle(tuple, PyExc_ReferenceError)", "_Py_Mangle(tuple, PyExc_RuntimeError)", "_Py_Mangle(tuple, PyExc_StopIteration)", "_Py_Mangle(tuple, PyExc_SyntaxError)", "_Py_Mangle(tuple, PyExc_SystemError)", "_Py_Mangle(tuple, PyExc_SystemExit)", "_Py_Mangle(tuple, PyExc_TabError)", "_Py_Mangle(tuple, PyExc_TypeError)", "_Py_Mangle(tuple, PyExc_UnboundLocalError)", "_Py_Mangle(tuple, _PySys_ProfileFunc)", "_Py_Mangle(tuple, _PySys_TraceFunc)", "_Py_Mangle(tuple, constant)", "_Py_Mangle(tuple, consts)", "_Py_Mangle(tuple, newconst)", "_Py_Mangle(tuple, tuple)", "{\n}\n", "newconst = PyByteArray_FromObject(tuple)", "newconst = PyBytes_FromObject(tuple)", "newconst = PyCFunction_GetSelf(tuple)", "newconst = PyCell_Get(tuple)", "newconst = PyCell_New(tuple)", "newconst = PyClassMethod_New(tuple)", "newconst = PyCodec_BackslashReplaceErrors(tuple)", "newconst = PyCodec_IgnoreErrors(tuple)", "newconst = PyCodec_ReplaceErrors(tuple)", "newconst = PyCodec_StrictErrors(tuple)", "newconst = PyCodec_XMLCharRefReplaceErrors(tuple)", "newconst = PyDictProxy_New(tuple)", "newconst = PyDict_Copy(tuple)", "newconst = PyDict_Items(tuple)", "newconst = PyDict_Keys(tuple)", "newconst = PyDict_Values(tuple)", "newconst = PyErr_SetFromErrno(tuple)", "newconst = PyEval_GetCallStats(tuple)", "newconst = PyException_GetCause(tuple)", "newconst = PyException_GetContext(tuple)", "newconst = PyException_GetTraceback(tuple)", "newconst = PyFloat_FromString(tuple)", "newconst = PyFunction_GetAnnotations(tuple)", "newconst = PyFunction_GetClosure(tuple)", "newconst = PyFunction_GetCode(tuple)", "newconst = PyFunction_GetDefaults(tuple)", "newconst = PyFunction_GetGlobals(tuple)", "newconst = PyFunction_GetKwDefaults(tuple)", "newconst = PyFunction_GetModule(tuple)", "newconst = PyImport_AddModuleObject(tuple)", "newconst = PyImport_GetImporter(tuple)", "newconst = PyImport_Import(tuple)", "newconst = PyImport_ReloadModule(tuple)", "newconst = PyInstanceMethod_Function(tuple)", "newconst = PyInstanceMethod_New(tuple)", "newconst = PyIter_Next(tuple)", "newconst = PyList_AsTuple(tuple)", "newconst = PyMapping_Items(tuple)", "newconst = PyMapping_Keys(tuple)", "newconst = PyMapping_Values(tuple)", "newconst = PyMemoryView_FromObject(tuple)", "newconst = PyMethod_Function(tuple)", "newconst = PyMethod_Self(tuple)", "newconst = PyModule_GetDict(tuple)", "newconst = PyModule_GetFilenameObject(tuple)", "newconst = PyModule_GetNameObject(tuple)", "newconst = PyModule_NewObject(tuple)", "newconst = PyNumber_Absolute(tuple)", "newconst = PyNumber_Float(tuple)", "newconst = PyNumber_Index(tuple)", "newconst = PyNumber_Invert(tuple)", "newconst = PyNumber_Long(tuple)", "newconst = PyNumber_Negative(tuple)", "newconst = PyNumber_Positive(tuple)", "newconst = PyObject_ASCII(tuple)", "newconst = PyObject_Bytes(tuple)", "newconst = PyObject_CallFunctionObjArgs(tuple)", "newconst = PyObject_Dir(tuple)", "newconst = PyObject_GetIter(tuple)", "newconst = PyObject_Repr(tuple)", "newconst = PyObject_SelfIter(tuple)", "newconst = PyObject_Str(tuple)", "newconst = PyObject_Type(tuple)", "newconst = PySeqIter_New(tuple)", "newconst = PySequence_List(tuple)", "newconst = PySequence_Tuple(tuple)", "newconst = PySet_New(tuple)", "newconst = PySet_Pop(tuple)", "newconst = PyStaticMethod_New(tuple)", "newconst = PyUnicodeDecodeError_GetEncoding(tuple)", "newconst = PyUnicodeDecodeError_GetObject(tuple)", "newconst = PyUnicodeDecodeError_GetReason(tuple)", "newconst = PyUnicodeEncodeError_GetEncoding(tuple)", "newconst = PyUnicodeEncodeError_GetObject(tuple)", "newconst = PyUnicodeEncodeError_GetReason(tuple)", "newconst = PyUnicodeTranslateError_GetObject(tuple)", "newconst = PyUnicodeTranslateError_GetReason(tuple)", "newconst = PyUnicodeUCS2_AsASCIIString(tuple)", "newconst = PyUnicodeUCS2_AsLatin1String(tuple)", "newconst = PyUnicodeUCS2_AsRawUnicodeEscapeString(tuple)", "newconst = PyUnicodeUCS2_AsUTF16String(tuple)", "newconst = PyUnicodeUCS2_AsUTF32String(tuple)", "newconst = PyUnicodeUCS2_AsUTF8String(tuple)", "newconst = PyUnicodeUCS2_AsUnicodeEscapeString(tuple)", "newconst = PyUnicodeUCS2_FromObject(tuple)", "newconst = PyUnicode_BuildEncodingMap(tuple)", "newconst = PyUnicode_EncodeFSDefault(tuple)", "newconst = PyWeakref_GetObject(tuple)", "newconst = _PyObject_NextNotImplemented(tuple)", "newconst = _PyUnicodeUCS2_AsDefaultEncodedString(tuple)", "newconst = (constant)", "newconst = (consts)", "newconst = (newconst)", "newconst = (tuple)", "newconst = PyFrozenSet_New((&codestr))", "newconst = PyFrozenSet_New((&constant))", "newconst = PyFrozenSet_New((&consts))", "newconst = PyFrozenSet_New((&i))", "newconst = PyFrozenSet_New((&len_consts))", "newconst = PyFrozenSet_New((&n))", "newconst = PyFrozenSet_New((&newconst))", "newconst = PyFrozenSet_New((&objs))", "newconst = PyFrozenSet_New((&tuple))", "newconst = PyFrozenSet_New((constant))", "newconst = PyFrozenSet_New((consts))", "newconst = PyFrozenSet_New((newconst))", "newconst = PyFrozenSet_New((tuple))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.8443666510960552, -5.8756974510960553, -6.1826974590960546, -6.6973574590960547, -6.4564820590960554, -5.519856059096055, -6.1826974590960546, -5.7607314590960552, -5.3484662190960552]
								}, {
									"case":	2,
									"scores":	[-4.336279859096055]
								}, {
									"case":	3,
									"scores":	[-4.336279859096055]
								}, {
									"case":	4,
									"scores":	[-4.336279859096055]
								}, {
									"case":	5,
									"scores":	[-4.336279859096055]
								}, {
									"case":	6,
									"scores":	[-4.336279859096055]
								}, {
									"case":	7,
									"scores":	[-4.336279859096055]
								}, {
									"case":	8,
									"scores":	[-4.336279859096055]
								}, {
									"case":	9,
									"scores":	[-4.336279859096055]
								}, {
									"case":	10,
									"scores":	[-4.336279859096055]
								}, {
									"case":	11,
									"scores":	[-4.336279859096055]
								}, {
									"case":	12,
									"scores":	[-4.336279859096055]
								}, {
									"case":	13,
									"scores":	[-4.336279859096055]
								}, {
									"case":	14,
									"scores":	[-4.336279859096055]
								}, {
									"case":	15,
									"scores":	[-4.336279859096055]
								}, {
									"case":	16,
									"scores":	[-4.336279859096055]
								}, {
									"case":	17,
									"scores":	[-4.336279859096055]
								}, {
									"case":	18,
									"scores":	[-4.336279859096055]
								}, {
									"case":	19,
									"scores":	[-4.336279859096055]
								}, {
									"case":	20,
									"scores":	[-4.336279859096055]
								}, {
									"case":	21,
									"scores":	[-4.336279859096055]
								}, {
									"case":	22,
									"scores":	[-4.336279859096055]
								}, {
									"case":	23,
									"scores":	[-4.336279859096055]
								}, {
									"case":	24,
									"scores":	[-4.336279859096055]
								}, {
									"case":	25,
									"scores":	[-4.336279859096055]
								}, {
									"case":	26,
									"scores":	[-4.336279859096055]
								}, {
									"case":	27,
									"scores":	[-4.336279859096055]
								}, {
									"case":	28,
									"scores":	[-4.336279859096055]
								}, {
									"case":	29,
									"scores":	[-4.336279859096055]
								}, {
									"case":	30,
									"scores":	[-4.336279859096055]
								}, {
									"case":	31,
									"scores":	[-4.336279859096055]
								}, {
									"case":	32,
									"scores":	[-4.336279859096055]
								}, {
									"case":	33,
									"scores":	[-4.336279859096055]
								}, {
									"case":	34,
									"scores":	[-4.336279859096055]
								}, {
									"case":	35,
									"scores":	[-4.336279859096055]
								}, {
									"case":	36,
									"scores":	[-4.336279859096055]
								}, {
									"case":	37,
									"scores":	[-4.336279859096055]
								}, {
									"case":	38,
									"scores":	[-4.336279859096055]
								}, {
									"case":	39,
									"scores":	[-4.336279859096055]
								}, {
									"case":	40,
									"scores":	[-4.336279859096055]
								}, {
									"case":	41,
									"scores":	[-4.336279859096055]
								}, {
									"case":	42,
									"scores":	[-4.336279859096055]
								}, {
									"case":	43,
									"scores":	[-4.336279859096055]
								}, {
									"case":	44,
									"scores":	[-4.336279859096055]
								}, {
									"case":	45,
									"scores":	[-4.336279859096055]
								}, {
									"case":	46,
									"scores":	[-4.336279859096055]
								}, {
									"case":	47,
									"scores":	[-4.336279859096055]
								}, {
									"case":	48,
									"scores":	[-4.336279859096055]
								}, {
									"case":	49,
									"scores":	[-4.336279859096055]
								}, {
									"case":	50,
									"scores":	[-4.336279859096055]
								}, {
									"case":	51,
									"scores":	[-4.336279859096055]
								}, {
									"case":	52,
									"scores":	[-4.336279859096055]
								}, {
									"case":	53,
									"scores":	[-4.336279859096055]
								}, {
									"case":	54,
									"scores":	[-4.336279859096055]
								}, {
									"case":	55,
									"scores":	[-4.336279859096055]
								}, {
									"case":	56,
									"scores":	[-4.336279859096055]
								}, {
									"case":	57,
									"scores":	[-4.336279859096055]
								}, {
									"case":	58,
									"scores":	[-4.336279859096055]
								}, {
									"case":	59,
									"scores":	[-4.336279859096055]
								}, {
									"case":	60,
									"scores":	[-4.336279859096055]
								}, {
									"case":	61,
									"scores":	[-4.336279859096055]
								}, {
									"case":	62,
									"scores":	[-4.336279859096055]
								}, {
									"case":	63,
									"scores":	[-4.336279859096055]
								}, {
									"case":	64,
									"scores":	[-4.336279859096055]
								}, {
									"case":	65,
									"scores":	[-4.336279859096055]
								}, {
									"case":	66,
									"scores":	[-4.336279859096055]
								}, {
									"case":	67,
									"scores":	[-4.336279859096055]
								}, {
									"case":	68,
									"scores":	[-4.336279859096055]
								}, {
									"case":	69,
									"scores":	[-4.336279859096055]
								}, {
									"case":	70,
									"scores":	[-4.336279859096055]
								}, {
									"case":	71,
									"scores":	[-4.336279859096055]
								}, {
									"case":	72,
									"scores":	[-4.336279859096055]
								}, {
									"case":	73,
									"scores":	[-4.336279859096055]
								}, {
									"case":	74,
									"scores":	[-4.336279859096055]
								}, {
									"case":	75,
									"scores":	[-4.336279859096055]
								}, {
									"case":	76,
									"scores":	[-4.336279859096055]
								}, {
									"case":	77,
									"scores":	[-4.336279859096055]
								}, {
									"case":	78,
									"scores":	[-4.336279859096055]
								}, {
									"case":	79,
									"scores":	[-4.336279859096055]
								}, {
									"case":	80,
									"scores":	[-4.336279859096055]
								}, {
									"case":	81,
									"scores":	[-4.336279859096055]
								}, {
									"case":	82,
									"scores":	[-4.336279859096055]
								}, {
									"case":	83,
									"scores":	[-4.336279859096055]
								}, {
									"case":	84,
									"scores":	[-4.336279859096055]
								}, {
									"case":	85,
									"scores":	[-4.336279859096055]
								}, {
									"case":	86,
									"scores":	[-4.336279859096055]
								}, {
									"case":	87,
									"scores":	[-4.336279859096055]
								}, {
									"case":	88,
									"scores":	[-4.336279859096055]
								}, {
									"case":	89,
									"scores":	[-4.336279859096055]
								}, {
									"case":	90,
									"scores":	[-4.336279859096055]
								}, {
									"case":	91,
									"scores":	[-4.336279859096055]
								}, {
									"case":	92,
									"scores":	[-4.336279859096055]
								}, {
									"case":	93,
									"scores":	[-4.336279859096055]
								}, {
									"case":	94,
									"scores":	[-4.336279859096055]
								}, {
									"case":	95,
									"scores":	[-4.336279859096055]
								}, {
									"case":	96,
									"scores":	[-4.336279859096055]
								}, {
									"case":	97,
									"scores":	[-4.336279859096055]
								}, {
									"case":	98,
									"scores":	[-4.336279859096055]
								}, {
									"case":	99,
									"scores":	[-4.336279859096055]
								}, {
									"case":	100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	111,
									"scores":	[-4.336279859096055]
								}, {
									"case":	112,
									"scores":	[-4.336279859096055]
								}, {
									"case":	113,
									"scores":	[-4.336279859096055]
								}, {
									"case":	114,
									"scores":	[-4.336279859096055]
								}, {
									"case":	115,
									"scores":	[-4.336279859096055]
								}, {
									"case":	116,
									"scores":	[-4.336279859096055]
								}, {
									"case":	117,
									"scores":	[-4.336279859096055]
								}, {
									"case":	118,
									"scores":	[-4.336279859096055]
								}, {
									"case":	119,
									"scores":	[-4.336279859096055]
								}, {
									"case":	120,
									"scores":	[-4.336279859096055]
								}, {
									"case":	121,
									"scores":	[-4.336279859096055]
								}, {
									"case":	122,
									"scores":	[-4.336279859096055]
								}, {
									"case":	123,
									"scores":	[-4.336279859096055]
								}, {
									"case":	124,
									"scores":	[-4.336279859096055]
								}, {
									"case":	125,
									"scores":	[-4.336279859096055]
								}, {
									"case":	126,
									"scores":	[-4.336279859096055]
								}, {
									"case":	127,
									"scores":	[-4.336279859096055]
								}, {
									"case":	128,
									"scores":	[-4.336279859096055]
								}, {
									"case":	129,
									"scores":	[-4.336279859096055]
								}, {
									"case":	130,
									"scores":	[-4.336279859096055]
								}, {
									"case":	131,
									"scores":	[-4.336279859096055]
								}, {
									"case":	132,
									"scores":	[-4.336279859096055]
								}, {
									"case":	133,
									"scores":	[-4.336279859096055]
								}, {
									"case":	134,
									"scores":	[-4.336279859096055]
								}, {
									"case":	135,
									"scores":	[-4.336279859096055]
								}, {
									"case":	136,
									"scores":	[-4.336279859096055]
								}, {
									"case":	137,
									"scores":	[-4.336279859096055]
								}, {
									"case":	138,
									"scores":	[-4.336279859096055]
								}, {
									"case":	139,
									"scores":	[-4.336279859096055]
								}, {
									"case":	140,
									"scores":	[-4.336279859096055]
								}, {
									"case":	141,
									"scores":	[-4.336279859096055]
								}, {
									"case":	142,
									"scores":	[-4.336279859096055]
								}, {
									"case":	143,
									"scores":	[-4.336279859096055]
								}, {
									"case":	144,
									"scores":	[-4.336279859096055]
								}, {
									"case":	145,
									"scores":	[-4.336279859096055]
								}, {
									"case":	146,
									"scores":	[-4.336279859096055]
								}, {
									"case":	147,
									"scores":	[-4.336279859096055]
								}, {
									"case":	148,
									"scores":	[-4.336279859096055]
								}, {
									"case":	149,
									"scores":	[-4.336279859096055]
								}, {
									"case":	150,
									"scores":	[-4.336279859096055]
								}, {
									"case":	151,
									"scores":	[-4.336279859096055]
								}, {
									"case":	152,
									"scores":	[-4.336279859096055]
								}, {
									"case":	153,
									"scores":	[-4.336279859096055]
								}, {
									"case":	154,
									"scores":	[-4.336279859096055]
								}, {
									"case":	155,
									"scores":	[-4.336279859096055]
								}, {
									"case":	156,
									"scores":	[-4.336279859096055]
								}, {
									"case":	157,
									"scores":	[-4.336279859096055]
								}, {
									"case":	158,
									"scores":	[-4.336279859096055]
								}, {
									"case":	159,
									"scores":	[-4.336279859096055]
								}, {
									"case":	160,
									"scores":	[-4.336279859096055]
								}, {
									"case":	161,
									"scores":	[-4.336279859096055]
								}, {
									"case":	162,
									"scores":	[-4.336279859096055]
								}, {
									"case":	163,
									"scores":	[-4.336279859096055]
								}, {
									"case":	164,
									"scores":	[-4.336279859096055]
								}, {
									"case":	165,
									"scores":	[-4.336279859096055]
								}, {
									"case":	166,
									"scores":	[-4.336279859096055]
								}, {
									"case":	167,
									"scores":	[-4.336279859096055]
								}, {
									"case":	168,
									"scores":	[-4.336279859096055]
								}, {
									"case":	169,
									"scores":	[-4.336279859096055]
								}, {
									"case":	170,
									"scores":	[-4.336279859096055]
								}, {
									"case":	171,
									"scores":	[-4.336279859096055]
								}, {
									"case":	172,
									"scores":	[-4.336279859096055]
								}, {
									"case":	173,
									"scores":	[-4.336279859096055]
								}, {
									"case":	174,
									"scores":	[-4.336279859096055]
								}, {
									"case":	175,
									"scores":	[-4.336279859096055]
								}, {
									"case":	176,
									"scores":	[-4.336279859096055]
								}, {
									"case":	177,
									"scores":	[-4.336279859096055]
								}, {
									"case":	178,
									"scores":	[-4.336279859096055]
								}, {
									"case":	179,
									"scores":	[-4.336279859096055]
								}, {
									"case":	180,
									"scores":	[-4.336279859096055]
								}, {
									"case":	181,
									"scores":	[-4.336279859096055]
								}, {
									"case":	182,
									"scores":	[-4.336279859096055]
								}, {
									"case":	183,
									"scores":	[-4.336279859096055]
								}, {
									"case":	184,
									"scores":	[-4.336279859096055]
								}, {
									"case":	185,
									"scores":	[-4.336279859096055]
								}, {
									"case":	186,
									"scores":	[-4.336279859096055]
								}, {
									"case":	187,
									"scores":	[-4.336279859096055]
								}, {
									"case":	188,
									"scores":	[-4.336279859096055]
								}, {
									"case":	189,
									"scores":	[-4.336279859096055]
								}, {
									"case":	190,
									"scores":	[-4.336279859096055]
								}, {
									"case":	191,
									"scores":	[-4.336279859096055]
								}, {
									"case":	192,
									"scores":	[-4.336279859096055]
								}, {
									"case":	193,
									"scores":	[-4.336279859096055]
								}, {
									"case":	194,
									"scores":	[-4.336279859096055]
								}, {
									"case":	195,
									"scores":	[-4.336279859096055]
								}, {
									"case":	196,
									"scores":	[-4.336279859096055]
								}, {
									"case":	197,
									"scores":	[-4.336279859096055]
								}, {
									"case":	198,
									"scores":	[-4.336279859096055]
								}, {
									"case":	199,
									"scores":	[-4.336279859096055]
								}, {
									"case":	200,
									"scores":	[-4.336279859096055]
								}, {
									"case":	201,
									"scores":	[-4.336279859096055]
								}, {
									"case":	202,
									"scores":	[-4.336279859096055]
								}, {
									"case":	203,
									"scores":	[-4.336279859096055]
								}, {
									"case":	204,
									"scores":	[-4.336279859096055]
								}, {
									"case":	205,
									"scores":	[-4.336279859096055]
								}, {
									"case":	206,
									"scores":	[-4.336279859096055]
								}, {
									"case":	207,
									"scores":	[-4.336279859096055]
								}, {
									"case":	208,
									"scores":	[-4.336279859096055]
								}, {
									"case":	209,
									"scores":	[-4.336279859096055]
								}, {
									"case":	210,
									"scores":	[-4.336279859096055]
								}, {
									"case":	211,
									"scores":	[-4.336279859096055]
								}, {
									"case":	212,
									"scores":	[-4.336279859096055]
								}, {
									"case":	213,
									"scores":	[-4.336279859096055]
								}, {
									"case":	214,
									"scores":	[-4.336279859096055]
								}, {
									"case":	215,
									"scores":	[-4.336279859096055]
								}, {
									"case":	216,
									"scores":	[-4.336279859096055]
								}, {
									"case":	217,
									"scores":	[-4.336279859096055]
								}, {
									"case":	218,
									"scores":	[-4.336279859096055]
								}, {
									"case":	219,
									"scores":	[-4.336279859096055]
								}, {
									"case":	220,
									"scores":	[-4.336279859096055]
								}, {
									"case":	221,
									"scores":	[-4.336279859096055]
								}, {
									"case":	222,
									"scores":	[-4.336279859096055]
								}, {
									"case":	223,
									"scores":	[-4.336279859096055]
								}, {
									"case":	224,
									"scores":	[-4.336279859096055]
								}, {
									"case":	225,
									"scores":	[-4.336279859096055]
								}, {
									"case":	226,
									"scores":	[-4.336279859096055]
								}, {
									"case":	227,
									"scores":	[-4.336279859096055]
								}, {
									"case":	228,
									"scores":	[-4.336279859096055]
								}, {
									"case":	229,
									"scores":	[-4.336279859096055]
								}, {
									"case":	230,
									"scores":	[-4.336279859096055]
								}, {
									"case":	231,
									"scores":	[-4.336279859096055]
								}, {
									"case":	232,
									"scores":	[-4.336279859096055]
								}, {
									"case":	233,
									"scores":	[-4.336279859096055]
								}, {
									"case":	234,
									"scores":	[-4.336279859096055]
								}, {
									"case":	235,
									"scores":	[-4.336279859096055]
								}, {
									"case":	236,
									"scores":	[-4.336279859096055]
								}, {
									"case":	237,
									"scores":	[-4.336279859096055]
								}, {
									"case":	238,
									"scores":	[-4.336279859096055]
								}, {
									"case":	239,
									"scores":	[-4.336279859096055]
								}, {
									"case":	240,
									"scores":	[-4.336279859096055]
								}, {
									"case":	241,
									"scores":	[-4.336279859096055]
								}, {
									"case":	242,
									"scores":	[-4.336279859096055]
								}, {
									"case":	243,
									"scores":	[-4.336279859096055]
								}, {
									"case":	244,
									"scores":	[-4.336279859096055]
								}, {
									"case":	245,
									"scores":	[-4.336279859096055]
								}, {
									"case":	246,
									"scores":	[-4.336279859096055]
								}, {
									"case":	247,
									"scores":	[-4.336279859096055]
								}, {
									"case":	248,
									"scores":	[-4.336279859096055]
								}, {
									"case":	249,
									"scores":	[-4.336279859096055]
								}, {
									"case":	250,
									"scores":	[-4.336279859096055]
								}, {
									"case":	251,
									"scores":	[-4.336279859096055]
								}, {
									"case":	252,
									"scores":	[-4.336279859096055]
								}, {
									"case":	253,
									"scores":	[-4.336279859096055]
								}, {
									"case":	254,
									"scores":	[-4.336279859096055]
								}, {
									"case":	255,
									"scores":	[-4.336279859096055]
								}, {
									"case":	256,
									"scores":	[-4.336279859096055]
								}, {
									"case":	257,
									"scores":	[-4.336279859096055]
								}, {
									"case":	258,
									"scores":	[-4.336279859096055]
								}, {
									"case":	259,
									"scores":	[-4.336279859096055]
								}, {
									"case":	260,
									"scores":	[-4.336279859096055]
								}, {
									"case":	261,
									"scores":	[-4.336279859096055]
								}, {
									"case":	262,
									"scores":	[-4.336279859096055]
								}, {
									"case":	263,
									"scores":	[-4.336279859096055]
								}, {
									"case":	264,
									"scores":	[-4.336279859096055]
								}, {
									"case":	265,
									"scores":	[-4.336279859096055]
								}, {
									"case":	266,
									"scores":	[-4.336279859096055]
								}, {
									"case":	267,
									"scores":	[-4.336279859096055]
								}, {
									"case":	268,
									"scores":	[-4.336279859096055]
								}, {
									"case":	269,
									"scores":	[-4.336279859096055]
								}, {
									"case":	270,
									"scores":	[-4.336279859096055]
								}, {
									"case":	271,
									"scores":	[-4.336279859096055]
								}, {
									"case":	272,
									"scores":	[-4.336279859096055]
								}, {
									"case":	273,
									"scores":	[-4.336279859096055]
								}, {
									"case":	274,
									"scores":	[-4.336279859096055]
								}, {
									"case":	275,
									"scores":	[-4.336279859096055]
								}, {
									"case":	276,
									"scores":	[-4.336279859096055]
								}, {
									"case":	277,
									"scores":	[-4.336279859096055]
								}, {
									"case":	278,
									"scores":	[-4.336279859096055]
								}, {
									"case":	279,
									"scores":	[-4.336279859096055]
								}, {
									"case":	280,
									"scores":	[-4.336279859096055]
								}, {
									"case":	281,
									"scores":	[-4.336279859096055]
								}, {
									"case":	282,
									"scores":	[-4.336279859096055]
								}, {
									"case":	283,
									"scores":	[-4.336279859096055]
								}, {
									"case":	284,
									"scores":	[-4.336279859096055]
								}, {
									"case":	285,
									"scores":	[-4.336279859096055]
								}, {
									"case":	286,
									"scores":	[-4.336279859096055]
								}, {
									"case":	287,
									"scores":	[-4.336279859096055]
								}, {
									"case":	288,
									"scores":	[-4.336279859096055]
								}, {
									"case":	289,
									"scores":	[-4.336279859096055]
								}, {
									"case":	290,
									"scores":	[-4.336279859096055]
								}, {
									"case":	291,
									"scores":	[-4.336279859096055]
								}, {
									"case":	292,
									"scores":	[-4.336279859096055]
								}, {
									"case":	293,
									"scores":	[-4.336279859096055]
								}, {
									"case":	294,
									"scores":	[-4.336279859096055]
								}, {
									"case":	295,
									"scores":	[-4.336279859096055]
								}, {
									"case":	296,
									"scores":	[-4.336279859096055]
								}, {
									"case":	297,
									"scores":	[-4.336279859096055]
								}, {
									"case":	298,
									"scores":	[-4.336279859096055]
								}, {
									"case":	299,
									"scores":	[-4.336279859096055]
								}, {
									"case":	300,
									"scores":	[-4.336279859096055]
								}, {
									"case":	301,
									"scores":	[-4.336279859096055]
								}, {
									"case":	302,
									"scores":	[-4.336279859096055]
								}, {
									"case":	303,
									"scores":	[-4.336279859096055]
								}, {
									"case":	304,
									"scores":	[-4.336279859096055]
								}, {
									"case":	305,
									"scores":	[-4.336279859096055]
								}, {
									"case":	306,
									"scores":	[-4.336279859096055]
								}, {
									"case":	307,
									"scores":	[-4.336279859096055]
								}, {
									"case":	308,
									"scores":	[-4.336279859096055]
								}, {
									"case":	309,
									"scores":	[-4.336279859096055]
								}, {
									"case":	310,
									"scores":	[-4.336279859096055]
								}, {
									"case":	311,
									"scores":	[-4.336279859096055]
								}, {
									"case":	312,
									"scores":	[-4.336279859096055]
								}, {
									"case":	313,
									"scores":	[-4.336279859096055]
								}, {
									"case":	314,
									"scores":	[-4.336279859096055]
								}, {
									"case":	315,
									"scores":	[-4.336279859096055]
								}, {
									"case":	316,
									"scores":	[-4.336279859096055]
								}, {
									"case":	317,
									"scores":	[-4.336279859096055]
								}, {
									"case":	318,
									"scores":	[-4.336279859096055]
								}, {
									"case":	319,
									"scores":	[-4.336279859096055]
								}, {
									"case":	320,
									"scores":	[-4.336279859096055]
								}, {
									"case":	321,
									"scores":	[-4.336279859096055]
								}, {
									"case":	322,
									"scores":	[-4.336279859096055]
								}, {
									"case":	323,
									"scores":	[-4.336279859096055]
								}, {
									"case":	324,
									"scores":	[-4.336279859096055]
								}, {
									"case":	325,
									"scores":	[-4.336279859096055]
								}, {
									"case":	326,
									"scores":	[-4.336279859096055]
								}, {
									"case":	327,
									"scores":	[-4.336279859096055]
								}, {
									"case":	328,
									"scores":	[-4.336279859096055]
								}, {
									"case":	329,
									"scores":	[-4.336279859096055]
								}, {
									"case":	330,
									"scores":	[-4.336279859096055]
								}, {
									"case":	331,
									"scores":	[-4.336279859096055]
								}, {
									"case":	332,
									"scores":	[-4.336279859096055]
								}, {
									"case":	333,
									"scores":	[-4.336279859096055]
								}, {
									"case":	334,
									"scores":	[-4.336279859096055]
								}, {
									"case":	335,
									"scores":	[-4.336279859096055]
								}, {
									"case":	336,
									"scores":	[-4.336279859096055]
								}, {
									"case":	337,
									"scores":	[-4.336279859096055]
								}, {
									"case":	338,
									"scores":	[-4.336279859096055]
								}, {
									"case":	339,
									"scores":	[-4.336279859096055]
								}, {
									"case":	340,
									"scores":	[-4.336279859096055]
								}, {
									"case":	341,
									"scores":	[-4.336279859096055]
								}, {
									"case":	342,
									"scores":	[-4.336279859096055]
								}, {
									"case":	343,
									"scores":	[-4.336279859096055]
								}, {
									"case":	344,
									"scores":	[-4.336279859096055]
								}, {
									"case":	345,
									"scores":	[-4.336279859096055]
								}, {
									"case":	346,
									"scores":	[-4.336279859096055]
								}, {
									"case":	347,
									"scores":	[-4.336279859096055]
								}, {
									"case":	348,
									"scores":	[-4.336279859096055]
								}, {
									"case":	349,
									"scores":	[-4.336279859096055]
								}, {
									"case":	350,
									"scores":	[-4.336279859096055]
								}, {
									"case":	351,
									"scores":	[-4.336279859096055]
								}, {
									"case":	352,
									"scores":	[-4.336279859096055]
								}, {
									"case":	353,
									"scores":	[-4.336279859096055]
								}, {
									"case":	354,
									"scores":	[-4.336279859096055]
								}, {
									"case":	355,
									"scores":	[-4.336279859096055]
								}, {
									"case":	356,
									"scores":	[-4.336279859096055]
								}, {
									"case":	357,
									"scores":	[-4.336279859096055]
								}, {
									"case":	358,
									"scores":	[-4.336279859096055]
								}, {
									"case":	359,
									"scores":	[-4.336279859096055]
								}, {
									"case":	360,
									"scores":	[-4.336279859096055]
								}, {
									"case":	361,
									"scores":	[-4.336279859096055]
								}, {
									"case":	362,
									"scores":	[-4.336279859096055]
								}, {
									"case":	363,
									"scores":	[-4.336279859096055]
								}, {
									"case":	364,
									"scores":	[-4.336279859096055]
								}, {
									"case":	365,
									"scores":	[-4.336279859096055]
								}, {
									"case":	366,
									"scores":	[-4.336279859096055]
								}, {
									"case":	367,
									"scores":	[-4.336279859096055]
								}, {
									"case":	368,
									"scores":	[-4.336279859096055]
								}, {
									"case":	369,
									"scores":	[-4.336279859096055]
								}, {
									"case":	370,
									"scores":	[-4.336279859096055]
								}, {
									"case":	371,
									"scores":	[-4.336279859096055]
								}, {
									"case":	372,
									"scores":	[-4.336279859096055]
								}, {
									"case":	373,
									"scores":	[-4.336279859096055]
								}, {
									"case":	374,
									"scores":	[-4.336279859096055]
								}, {
									"case":	375,
									"scores":	[-4.336279859096055]
								}, {
									"case":	376,
									"scores":	[-4.336279859096055]
								}, {
									"case":	377,
									"scores":	[-4.336279859096055]
								}, {
									"case":	378,
									"scores":	[-4.336279859096055]
								}, {
									"case":	379,
									"scores":	[-4.336279859096055]
								}, {
									"case":	380,
									"scores":	[-4.336279859096055]
								}, {
									"case":	381,
									"scores":	[-4.336279859096055]
								}, {
									"case":	382,
									"scores":	[-4.336279859096055]
								}, {
									"case":	383,
									"scores":	[-4.336279859096055]
								}, {
									"case":	384,
									"scores":	[-4.336279859096055]
								}, {
									"case":	385,
									"scores":	[-4.336279859096055]
								}, {
									"case":	386,
									"scores":	[-4.336279859096055]
								}, {
									"case":	387,
									"scores":	[-4.336279859096055]
								}, {
									"case":	388,
									"scores":	[-4.336279859096055]
								}, {
									"case":	389,
									"scores":	[-4.336279859096055]
								}, {
									"case":	390,
									"scores":	[-4.336279859096055]
								}, {
									"case":	391,
									"scores":	[-4.336279859096055]
								}, {
									"case":	392,
									"scores":	[-4.336279859096055]
								}, {
									"case":	393,
									"scores":	[-4.336279859096055]
								}, {
									"case":	394,
									"scores":	[-4.336279859096055]
								}, {
									"case":	395,
									"scores":	[-4.336279859096055]
								}, {
									"case":	396,
									"scores":	[-4.336279859096055]
								}, {
									"case":	397,
									"scores":	[-4.336279859096055]
								}, {
									"case":	398,
									"scores":	[-4.336279859096055]
								}, {
									"case":	399,
									"scores":	[-4.336279859096055]
								}, {
									"case":	400,
									"scores":	[-4.336279859096055]
								}, {
									"case":	401,
									"scores":	[-4.336279859096055]
								}, {
									"case":	402,
									"scores":	[-4.336279859096055]
								}, {
									"case":	403,
									"scores":	[-4.336279859096055]
								}, {
									"case":	404,
									"scores":	[-4.336279859096055]
								}, {
									"case":	405,
									"scores":	[-4.336279859096055]
								}, {
									"case":	406,
									"scores":	[-4.336279859096055]
								}, {
									"case":	407,
									"scores":	[-4.336279859096055]
								}, {
									"case":	408,
									"scores":	[-4.336279859096055]
								}, {
									"case":	409,
									"scores":	[-4.336279859096055]
								}, {
									"case":	410,
									"scores":	[-4.336279859096055]
								}, {
									"case":	411,
									"scores":	[-4.336279859096055]
								}, {
									"case":	412,
									"scores":	[-4.336279859096055]
								}, {
									"case":	413,
									"scores":	[-4.336279859096055]
								}, {
									"case":	414,
									"scores":	[-4.336279859096055]
								}, {
									"case":	415,
									"scores":	[-4.336279859096055]
								}, {
									"case":	416,
									"scores":	[-4.336279859096055]
								}, {
									"case":	417,
									"scores":	[-4.336279859096055]
								}, {
									"case":	418,
									"scores":	[-4.336279859096055]
								}, {
									"case":	419,
									"scores":	[-4.336279859096055]
								}, {
									"case":	420,
									"scores":	[-4.336279859096055]
								}, {
									"case":	421,
									"scores":	[-4.336279859096055]
								}, {
									"case":	422,
									"scores":	[-4.336279859096055]
								}, {
									"case":	423,
									"scores":	[-4.336279859096055]
								}, {
									"case":	424,
									"scores":	[-4.336279859096055]
								}, {
									"case":	425,
									"scores":	[-4.336279859096055]
								}, {
									"case":	426,
									"scores":	[-4.336279859096055]
								}, {
									"case":	427,
									"scores":	[-4.336279859096055]
								}, {
									"case":	428,
									"scores":	[-4.336279859096055]
								}, {
									"case":	429,
									"scores":	[-4.336279859096055]
								}, {
									"case":	430,
									"scores":	[-4.336279859096055]
								}, {
									"case":	431,
									"scores":	[-4.336279859096055]
								}, {
									"case":	432,
									"scores":	[-4.336279859096055]
								}, {
									"case":	433,
									"scores":	[-4.336279859096055]
								}, {
									"case":	434,
									"scores":	[-4.336279859096055]
								}, {
									"case":	435,
									"scores":	[-4.336279859096055]
								}, {
									"case":	436,
									"scores":	[-4.336279859096055]
								}, {
									"case":	437,
									"scores":	[-4.336279859096055]
								}, {
									"case":	438,
									"scores":	[-4.336279859096055]
								}, {
									"case":	439,
									"scores":	[-4.336279859096055]
								}, {
									"case":	440,
									"scores":	[-4.336279859096055]
								}, {
									"case":	441,
									"scores":	[-4.336279859096055]
								}, {
									"case":	442,
									"scores":	[-4.336279859096055]
								}, {
									"case":	443,
									"scores":	[-4.336279859096055]
								}, {
									"case":	444,
									"scores":	[-4.336279859096055]
								}, {
									"case":	445,
									"scores":	[-4.336279859096055]
								}, {
									"case":	446,
									"scores":	[-4.336279859096055]
								}, {
									"case":	447,
									"scores":	[-4.336279859096055]
								}, {
									"case":	448,
									"scores":	[-4.336279859096055]
								}, {
									"case":	449,
									"scores":	[-4.336279859096055]
								}, {
									"case":	450,
									"scores":	[-4.336279859096055]
								}, {
									"case":	451,
									"scores":	[-4.336279859096055]
								}, {
									"case":	452,
									"scores":	[-4.336279859096055]
								}, {
									"case":	453,
									"scores":	[-4.336279859096055]
								}, {
									"case":	454,
									"scores":	[-4.336279859096055]
								}, {
									"case":	455,
									"scores":	[-4.336279859096055]
								}, {
									"case":	456,
									"scores":	[-4.336279859096055]
								}, {
									"case":	457,
									"scores":	[-4.336279859096055]
								}, {
									"case":	458,
									"scores":	[-4.336279859096055]
								}, {
									"case":	459,
									"scores":	[-4.336279859096055]
								}, {
									"case":	460,
									"scores":	[-4.336279859096055]
								}, {
									"case":	461,
									"scores":	[-4.336279859096055]
								}, {
									"case":	462,
									"scores":	[-4.336279859096055]
								}, {
									"case":	463,
									"scores":	[-4.336279859096055]
								}, {
									"case":	464,
									"scores":	[-4.336279859096055]
								}, {
									"case":	465,
									"scores":	[-4.336279859096055]
								}, {
									"case":	466,
									"scores":	[-4.336279859096055]
								}, {
									"case":	467,
									"scores":	[-4.336279859096055]
								}, {
									"case":	468,
									"scores":	[-4.336279859096055]
								}, {
									"case":	469,
									"scores":	[-4.336279859096055]
								}, {
									"case":	470,
									"scores":	[-4.336279859096055]
								}, {
									"case":	471,
									"scores":	[-4.336279859096055]
								}, {
									"case":	472,
									"scores":	[-4.336279859096055]
								}, {
									"case":	473,
									"scores":	[-4.336279859096055]
								}, {
									"case":	474,
									"scores":	[-4.336279859096055]
								}, {
									"case":	475,
									"scores":	[-4.336279859096055]
								}, {
									"case":	476,
									"scores":	[-4.336279859096055]
								}, {
									"case":	477,
									"scores":	[-4.336279859096055]
								}, {
									"case":	478,
									"scores":	[-4.336279859096055]
								}, {
									"case":	479,
									"scores":	[-4.336279859096055]
								}, {
									"case":	480,
									"scores":	[-4.336279859096055]
								}, {
									"case":	481,
									"scores":	[-4.336279859096055]
								}, {
									"case":	482,
									"scores":	[-4.336279859096055]
								}, {
									"case":	483,
									"scores":	[-4.336279859096055]
								}, {
									"case":	484,
									"scores":	[-4.336279859096055]
								}, {
									"case":	485,
									"scores":	[-4.336279859096055]
								}, {
									"case":	486,
									"scores":	[-4.336279859096055]
								}, {
									"case":	487,
									"scores":	[-4.336279859096055]
								}, {
									"case":	488,
									"scores":	[-4.336279859096055]
								}, {
									"case":	489,
									"scores":	[-4.336279859096055]
								}, {
									"case":	490,
									"scores":	[-4.336279859096055]
								}, {
									"case":	491,
									"scores":	[-4.336279859096055]
								}, {
									"case":	492,
									"scores":	[-4.336279859096055]
								}, {
									"case":	493,
									"scores":	[-4.336279859096055]
								}, {
									"case":	494,
									"scores":	[-4.336279859096055]
								}, {
									"case":	495,
									"scores":	[-4.336279859096055]
								}, {
									"case":	496,
									"scores":	[-4.336279859096055]
								}, {
									"case":	497,
									"scores":	[-4.336279859096055]
								}, {
									"case":	498,
									"scores":	[-4.336279859096055]
								}, {
									"case":	499,
									"scores":	[-4.336279859096055]
								}, {
									"case":	500,
									"scores":	[-4.336279859096055]
								}, {
									"case":	501,
									"scores":	[-4.336279859096055]
								}, {
									"case":	502,
									"scores":	[-4.336279859096055]
								}, {
									"case":	503,
									"scores":	[-4.336279859096055]
								}, {
									"case":	504,
									"scores":	[-4.336279859096055]
								}, {
									"case":	505,
									"scores":	[-4.336279859096055]
								}, {
									"case":	506,
									"scores":	[-4.336279859096055]
								}, {
									"case":	507,
									"scores":	[-4.336279859096055]
								}, {
									"case":	508,
									"scores":	[-4.336279859096055]
								}, {
									"case":	509,
									"scores":	[-4.336279859096055]
								}, {
									"case":	510,
									"scores":	[-4.336279859096055]
								}, {
									"case":	511,
									"scores":	[-4.336279859096055]
								}, {
									"case":	512,
									"scores":	[-4.336279859096055]
								}, {
									"case":	513,
									"scores":	[-4.336279859096055]
								}, {
									"case":	514,
									"scores":	[-4.336279859096055]
								}, {
									"case":	515,
									"scores":	[-4.336279859096055]
								}, {
									"case":	516,
									"scores":	[-4.336279859096055]
								}, {
									"case":	517,
									"scores":	[-4.336279859096055]
								}, {
									"case":	518,
									"scores":	[-4.336279859096055]
								}, {
									"case":	519,
									"scores":	[-4.336279859096055]
								}, {
									"case":	520,
									"scores":	[-4.336279859096055]
								}, {
									"case":	521,
									"scores":	[-4.336279859096055]
								}, {
									"case":	522,
									"scores":	[-4.336279859096055]
								}, {
									"case":	523,
									"scores":	[-4.336279859096055]
								}, {
									"case":	524,
									"scores":	[-4.336279859096055]
								}, {
									"case":	525,
									"scores":	[-4.336279859096055]
								}, {
									"case":	526,
									"scores":	[-4.336279859096055]
								}, {
									"case":	527,
									"scores":	[-4.336279859096055]
								}, {
									"case":	528,
									"scores":	[-4.336279859096055]
								}, {
									"case":	529,
									"scores":	[-4.336279859096055]
								}, {
									"case":	530,
									"scores":	[-4.336279859096055]
								}, {
									"case":	531,
									"scores":	[-4.336279859096055]
								}, {
									"case":	532,
									"scores":	[-4.336279859096055]
								}, {
									"case":	533,
									"scores":	[-4.336279859096055]
								}, {
									"case":	534,
									"scores":	[-4.336279859096055]
								}, {
									"case":	535,
									"scores":	[-4.336279859096055]
								}, {
									"case":	536,
									"scores":	[-4.336279859096055]
								}, {
									"case":	537,
									"scores":	[-4.336279859096055]
								}, {
									"case":	538,
									"scores":	[-4.336279859096055]
								}, {
									"case":	539,
									"scores":	[-4.336279859096055]
								}, {
									"case":	540,
									"scores":	[-4.336279859096055]
								}, {
									"case":	541,
									"scores":	[-4.336279859096055]
								}, {
									"case":	542,
									"scores":	[-4.336279859096055]
								}, {
									"case":	543,
									"scores":	[-4.336279859096055]
								}, {
									"case":	544,
									"scores":	[-4.336279859096055]
								}, {
									"case":	545,
									"scores":	[-4.336279859096055]
								}, {
									"case":	546,
									"scores":	[-4.336279859096055]
								}, {
									"case":	547,
									"scores":	[-4.336279859096055]
								}, {
									"case":	548,
									"scores":	[-4.336279859096055]
								}, {
									"case":	549,
									"scores":	[-4.336279859096055]
								}, {
									"case":	550,
									"scores":	[-4.336279859096055]
								}, {
									"case":	551,
									"scores":	[-4.336279859096055]
								}, {
									"case":	552,
									"scores":	[-4.336279859096055]
								}, {
									"case":	553,
									"scores":	[-4.336279859096055]
								}, {
									"case":	554,
									"scores":	[-4.336279859096055]
								}, {
									"case":	555,
									"scores":	[-4.336279859096055]
								}, {
									"case":	556,
									"scores":	[-4.336279859096055]
								}, {
									"case":	557,
									"scores":	[-4.336279859096055]
								}, {
									"case":	558,
									"scores":	[-4.336279859096055]
								}, {
									"case":	559,
									"scores":	[-4.336279859096055]
								}, {
									"case":	560,
									"scores":	[-4.336279859096055]
								}, {
									"case":	561,
									"scores":	[-4.336279859096055]
								}, {
									"case":	562,
									"scores":	[-4.336279859096055]
								}, {
									"case":	563,
									"scores":	[-4.336279859096055]
								}, {
									"case":	564,
									"scores":	[-4.336279859096055]
								}, {
									"case":	565,
									"scores":	[-4.336279859096055]
								}, {
									"case":	566,
									"scores":	[-4.336279859096055]
								}, {
									"case":	567,
									"scores":	[-4.336279859096055]
								}, {
									"case":	568,
									"scores":	[-4.336279859096055]
								}, {
									"case":	569,
									"scores":	[-4.336279859096055]
								}, {
									"case":	570,
									"scores":	[-4.336279859096055]
								}, {
									"case":	571,
									"scores":	[-4.336279859096055]
								}, {
									"case":	572,
									"scores":	[-4.336279859096055]
								}, {
									"case":	573,
									"scores":	[-4.336279859096055]
								}, {
									"case":	574,
									"scores":	[-4.336279859096055]
								}, {
									"case":	575,
									"scores":	[-4.336279859096055]
								}, {
									"case":	576,
									"scores":	[-4.336279859096055]
								}, {
									"case":	577,
									"scores":	[-4.336279859096055]
								}, {
									"case":	578,
									"scores":	[-4.336279859096055]
								}, {
									"case":	579,
									"scores":	[-4.336279859096055]
								}, {
									"case":	580,
									"scores":	[-4.336279859096055]
								}, {
									"case":	581,
									"scores":	[-4.336279859096055]
								}, {
									"case":	582,
									"scores":	[-4.336279859096055]
								}, {
									"case":	583,
									"scores":	[-4.336279859096055]
								}, {
									"case":	584,
									"scores":	[-4.336279859096055]
								}, {
									"case":	585,
									"scores":	[-4.336279859096055]
								}, {
									"case":	586,
									"scores":	[-4.336279859096055]
								}, {
									"case":	587,
									"scores":	[-4.336279859096055]
								}, {
									"case":	588,
									"scores":	[-4.336279859096055]
								}, {
									"case":	589,
									"scores":	[-4.336279859096055]
								}, {
									"case":	590,
									"scores":	[-4.336279859096055]
								}, {
									"case":	591,
									"scores":	[-4.336279859096055]
								}, {
									"case":	592,
									"scores":	[-4.336279859096055]
								}, {
									"case":	593,
									"scores":	[-4.336279859096055]
								}, {
									"case":	594,
									"scores":	[-4.336279859096055]
								}, {
									"case":	595,
									"scores":	[-4.336279859096055]
								}, {
									"case":	596,
									"scores":	[-4.336279859096055]
								}, {
									"case":	597,
									"scores":	[-4.336279859096055]
								}, {
									"case":	598,
									"scores":	[-4.336279859096055]
								}, {
									"case":	599,
									"scores":	[-4.336279859096055]
								}, {
									"case":	600,
									"scores":	[-4.336279859096055]
								}, {
									"case":	601,
									"scores":	[-4.336279859096055]
								}, {
									"case":	602,
									"scores":	[-4.336279859096055]
								}, {
									"case":	603,
									"scores":	[-4.336279859096055]
								}, {
									"case":	604,
									"scores":	[-4.336279859096055]
								}, {
									"case":	605,
									"scores":	[-4.336279859096055]
								}, {
									"case":	606,
									"scores":	[-4.336279859096055]
								}, {
									"case":	607,
									"scores":	[-4.336279859096055]
								}, {
									"case":	608,
									"scores":	[-4.336279859096055]
								}, {
									"case":	609,
									"scores":	[-4.336279859096055]
								}, {
									"case":	610,
									"scores":	[-4.336279859096055]
								}, {
									"case":	611,
									"scores":	[-4.336279859096055]
								}, {
									"case":	612,
									"scores":	[-4.336279859096055]
								}, {
									"case":	613,
									"scores":	[-4.336279859096055]
								}, {
									"case":	614,
									"scores":	[-4.336279859096055]
								}, {
									"case":	615,
									"scores":	[-4.336279859096055]
								}, {
									"case":	616,
									"scores":	[-4.336279859096055]
								}, {
									"case":	617,
									"scores":	[-4.336279859096055]
								}, {
									"case":	618,
									"scores":	[-4.336279859096055]
								}, {
									"case":	619,
									"scores":	[-4.336279859096055]
								}, {
									"case":	620,
									"scores":	[-4.336279859096055]
								}, {
									"case":	621,
									"scores":	[-4.336279859096055]
								}, {
									"case":	622,
									"scores":	[-4.336279859096055]
								}, {
									"case":	623,
									"scores":	[-4.336279859096055]
								}, {
									"case":	624,
									"scores":	[-4.336279859096055]
								}, {
									"case":	625,
									"scores":	[-4.336279859096055]
								}, {
									"case":	626,
									"scores":	[-4.336279859096055]
								}, {
									"case":	627,
									"scores":	[-4.336279859096055]
								}, {
									"case":	628,
									"scores":	[-4.336279859096055]
								}, {
									"case":	629,
									"scores":	[-4.336279859096055]
								}, {
									"case":	630,
									"scores":	[-4.336279859096055]
								}, {
									"case":	631,
									"scores":	[-4.336279859096055]
								}, {
									"case":	632,
									"scores":	[-4.336279859096055]
								}, {
									"case":	633,
									"scores":	[-4.336279859096055]
								}, {
									"case":	634,
									"scores":	[-4.336279859096055]
								}, {
									"case":	635,
									"scores":	[-4.336279859096055]
								}, {
									"case":	636,
									"scores":	[-4.336279859096055]
								}, {
									"case":	637,
									"scores":	[-4.336279859096055]
								}, {
									"case":	638,
									"scores":	[-4.336279859096055]
								}, {
									"case":	639,
									"scores":	[-4.336279859096055]
								}, {
									"case":	640,
									"scores":	[-4.336279859096055]
								}, {
									"case":	641,
									"scores":	[-4.336279859096055]
								}, {
									"case":	642,
									"scores":	[-4.336279859096055]
								}, {
									"case":	643,
									"scores":	[-4.336279859096055]
								}, {
									"case":	644,
									"scores":	[-4.336279859096055]
								}, {
									"case":	645,
									"scores":	[-4.336279859096055]
								}, {
									"case":	646,
									"scores":	[-4.336279859096055]
								}, {
									"case":	647,
									"scores":	[-4.336279859096055]
								}, {
									"case":	648,
									"scores":	[-4.336279859096055]
								}, {
									"case":	649,
									"scores":	[-4.336279859096055]
								}, {
									"case":	650,
									"scores":	[-4.336279859096055]
								}, {
									"case":	651,
									"scores":	[-4.336279859096055]
								}, {
									"case":	652,
									"scores":	[-4.336279859096055]
								}, {
									"case":	653,
									"scores":	[-4.336279859096055]
								}, {
									"case":	654,
									"scores":	[-4.336279859096055]
								}, {
									"case":	655,
									"scores":	[-4.336279859096055]
								}, {
									"case":	656,
									"scores":	[-4.336279859096055]
								}, {
									"case":	657,
									"scores":	[-4.336279859096055]
								}, {
									"case":	658,
									"scores":	[-4.336279859096055]
								}, {
									"case":	659,
									"scores":	[-4.336279859096055]
								}, {
									"case":	660,
									"scores":	[-4.336279859096055]
								}, {
									"case":	661,
									"scores":	[-4.336279859096055]
								}, {
									"case":	662,
									"scores":	[-4.336279859096055]
								}, {
									"case":	663,
									"scores":	[-4.336279859096055]
								}, {
									"case":	664,
									"scores":	[-4.336279859096055]
								}, {
									"case":	665,
									"scores":	[-4.336279859096055]
								}, {
									"case":	666,
									"scores":	[-4.336279859096055]
								}, {
									"case":	667,
									"scores":	[-4.336279859096055]
								}, {
									"case":	668,
									"scores":	[-4.336279859096055]
								}, {
									"case":	669,
									"scores":	[-4.336279859096055]
								}, {
									"case":	670,
									"scores":	[-4.336279859096055]
								}, {
									"case":	671,
									"scores":	[-4.336279859096055]
								}, {
									"case":	672,
									"scores":	[-4.336279859096055]
								}, {
									"case":	673,
									"scores":	[-4.336279859096055]
								}, {
									"case":	674,
									"scores":	[-4.336279859096055]
								}, {
									"case":	675,
									"scores":	[-4.336279859096055]
								}, {
									"case":	676,
									"scores":	[-4.336279859096055]
								}, {
									"case":	677,
									"scores":	[-4.336279859096055]
								}, {
									"case":	678,
									"scores":	[-4.336279859096055]
								}, {
									"case":	679,
									"scores":	[-4.336279859096055]
								}, {
									"case":	680,
									"scores":	[-4.336279859096055]
								}, {
									"case":	681,
									"scores":	[-4.336279859096055]
								}, {
									"case":	682,
									"scores":	[-4.336279859096055]
								}, {
									"case":	683,
									"scores":	[-4.336279859096055]
								}, {
									"case":	684,
									"scores":	[-4.336279859096055]
								}, {
									"case":	685,
									"scores":	[-4.336279859096055]
								}, {
									"case":	686,
									"scores":	[-4.336279859096055]
								}, {
									"case":	687,
									"scores":	[-4.336279859096055]
								}, {
									"case":	688,
									"scores":	[-4.336279859096055]
								}, {
									"case":	689,
									"scores":	[-4.336279859096055]
								}, {
									"case":	690,
									"scores":	[-4.336279859096055]
								}, {
									"case":	691,
									"scores":	[-4.336279859096055]
								}, {
									"case":	692,
									"scores":	[-4.336279859096055]
								}, {
									"case":	693,
									"scores":	[-4.336279859096055]
								}, {
									"case":	694,
									"scores":	[-4.336279859096055]
								}, {
									"case":	695,
									"scores":	[-4.336279859096055]
								}, {
									"case":	696,
									"scores":	[-4.336279859096055]
								}, {
									"case":	697,
									"scores":	[-4.336279859096055]
								}, {
									"case":	698,
									"scores":	[-4.336279859096055]
								}, {
									"case":	699,
									"scores":	[-4.336279859096055]
								}, {
									"case":	700,
									"scores":	[-4.336279859096055]
								}, {
									"case":	701,
									"scores":	[-4.336279859096055]
								}, {
									"case":	702,
									"scores":	[-4.336279859096055]
								}, {
									"case":	703,
									"scores":	[-4.336279859096055]
								}, {
									"case":	704,
									"scores":	[-4.336279859096055]
								}, {
									"case":	705,
									"scores":	[-4.336279859096055]
								}, {
									"case":	706,
									"scores":	[-4.336279859096055]
								}, {
									"case":	707,
									"scores":	[-4.336279859096055]
								}, {
									"case":	708,
									"scores":	[-4.336279859096055]
								}, {
									"case":	709,
									"scores":	[-4.336279859096055]
								}, {
									"case":	710,
									"scores":	[-4.336279859096055]
								}, {
									"case":	711,
									"scores":	[-4.336279859096055]
								}, {
									"case":	712,
									"scores":	[-4.336279859096055]
								}, {
									"case":	713,
									"scores":	[-4.336279859096055]
								}, {
									"case":	714,
									"scores":	[-4.336279859096055]
								}, {
									"case":	715,
									"scores":	[-4.336279859096055]
								}, {
									"case":	716,
									"scores":	[-4.336279859096055]
								}, {
									"case":	717,
									"scores":	[-4.336279859096055]
								}, {
									"case":	718,
									"scores":	[-4.336279859096055]
								}, {
									"case":	719,
									"scores":	[-4.336279859096055]
								}, {
									"case":	720,
									"scores":	[-4.336279859096055]
								}, {
									"case":	721,
									"scores":	[-4.336279859096055]
								}, {
									"case":	722,
									"scores":	[-4.336279859096055]
								}, {
									"case":	723,
									"scores":	[-4.336279859096055]
								}, {
									"case":	724,
									"scores":	[-4.336279859096055]
								}, {
									"case":	725,
									"scores":	[-4.336279859096055]
								}, {
									"case":	726,
									"scores":	[-4.336279859096055]
								}, {
									"case":	727,
									"scores":	[-4.336279859096055]
								}, {
									"case":	728,
									"scores":	[-4.336279859096055]
								}, {
									"case":	729,
									"scores":	[-4.336279859096055]
								}, {
									"case":	730,
									"scores":	[-4.336279859096055]
								}, {
									"case":	731,
									"scores":	[-4.336279859096055]
								}, {
									"case":	732,
									"scores":	[-4.336279859096055]
								}, {
									"case":	733,
									"scores":	[-4.336279859096055]
								}, {
									"case":	734,
									"scores":	[-4.336279859096055]
								}, {
									"case":	735,
									"scores":	[-4.336279859096055]
								}, {
									"case":	736,
									"scores":	[-4.336279859096055]
								}, {
									"case":	737,
									"scores":	[-4.336279859096055]
								}, {
									"case":	738,
									"scores":	[-4.336279859096055]
								}, {
									"case":	739,
									"scores":	[-4.336279859096055]
								}, {
									"case":	740,
									"scores":	[-4.336279859096055]
								}, {
									"case":	741,
									"scores":	[-4.336279859096055]
								}, {
									"case":	742,
									"scores":	[-4.336279859096055]
								}, {
									"case":	743,
									"scores":	[-4.336279859096055]
								}, {
									"case":	744,
									"scores":	[-4.336279859096055]
								}, {
									"case":	745,
									"scores":	[-4.336279859096055]
								}, {
									"case":	746,
									"scores":	[-4.336279859096055]
								}, {
									"case":	747,
									"scores":	[-4.336279859096055]
								}, {
									"case":	748,
									"scores":	[-4.336279859096055]
								}, {
									"case":	749,
									"scores":	[-4.336279859096055]
								}, {
									"case":	750,
									"scores":	[-4.336279859096055]
								}, {
									"case":	751,
									"scores":	[-4.336279859096055]
								}, {
									"case":	752,
									"scores":	[-4.336279859096055]
								}, {
									"case":	753,
									"scores":	[-4.336279859096055]
								}, {
									"case":	754,
									"scores":	[-4.336279859096055]
								}, {
									"case":	755,
									"scores":	[-4.336279859096055]
								}, {
									"case":	756,
									"scores":	[-4.336279859096055]
								}, {
									"case":	757,
									"scores":	[-4.336279859096055]
								}, {
									"case":	758,
									"scores":	[-4.336279859096055]
								}, {
									"case":	759,
									"scores":	[-4.336279859096055]
								}, {
									"case":	760,
									"scores":	[-4.336279859096055]
								}, {
									"case":	761,
									"scores":	[-4.336279859096055]
								}, {
									"case":	762,
									"scores":	[-4.336279859096055]
								}, {
									"case":	763,
									"scores":	[-4.336279859096055]
								}, {
									"case":	764,
									"scores":	[-4.336279859096055]
								}, {
									"case":	765,
									"scores":	[-4.336279859096055]
								}, {
									"case":	766,
									"scores":	[-4.336279859096055]
								}, {
									"case":	767,
									"scores":	[-4.336279859096055]
								}, {
									"case":	768,
									"scores":	[-4.336279859096055]
								}, {
									"case":	769,
									"scores":	[-4.336279859096055]
								}, {
									"case":	770,
									"scores":	[-4.336279859096055]
								}, {
									"case":	771,
									"scores":	[-4.336279859096055]
								}, {
									"case":	772,
									"scores":	[-4.336279859096055]
								}, {
									"case":	773,
									"scores":	[-4.336279859096055]
								}, {
									"case":	774,
									"scores":	[-4.336279859096055]
								}, {
									"case":	775,
									"scores":	[-4.336279859096055]
								}, {
									"case":	776,
									"scores":	[-4.336279859096055]
								}, {
									"case":	777,
									"scores":	[-4.336279859096055]
								}, {
									"case":	778,
									"scores":	[-4.336279859096055]
								}, {
									"case":	779,
									"scores":	[-4.336279859096055]
								}, {
									"case":	780,
									"scores":	[-4.336279859096055]
								}, {
									"case":	781,
									"scores":	[-4.336279859096055]
								}, {
									"case":	782,
									"scores":	[-4.336279859096055]
								}, {
									"case":	783,
									"scores":	[-4.336279859096055]
								}, {
									"case":	784,
									"scores":	[-4.336279859096055]
								}, {
									"case":	785,
									"scores":	[-4.336279859096055]
								}, {
									"case":	786,
									"scores":	[-4.336279859096055]
								}, {
									"case":	787,
									"scores":	[-4.336279859096055]
								}, {
									"case":	788,
									"scores":	[-4.336279859096055]
								}, {
									"case":	789,
									"scores":	[-4.336279859096055]
								}, {
									"case":	790,
									"scores":	[-4.336279859096055]
								}, {
									"case":	791,
									"scores":	[-4.336279859096055]
								}, {
									"case":	792,
									"scores":	[-4.336279859096055]
								}, {
									"case":	793,
									"scores":	[-4.336279859096055]
								}, {
									"case":	794,
									"scores":	[-4.336279859096055]
								}, {
									"case":	795,
									"scores":	[-4.336279859096055]
								}, {
									"case":	796,
									"scores":	[-4.336279859096055]
								}, {
									"case":	797,
									"scores":	[-4.336279859096055]
								}, {
									"case":	798,
									"scores":	[-4.336279859096055]
								}, {
									"case":	799,
									"scores":	[-4.336279859096055]
								}, {
									"case":	800,
									"scores":	[-4.336279859096055]
								}, {
									"case":	801,
									"scores":	[-4.336279859096055]
								}, {
									"case":	802,
									"scores":	[-4.336279859096055]
								}, {
									"case":	803,
									"scores":	[-4.336279859096055]
								}, {
									"case":	804,
									"scores":	[-4.336279859096055]
								}, {
									"case":	805,
									"scores":	[-4.336279859096055]
								}, {
									"case":	806,
									"scores":	[-4.336279859096055]
								}, {
									"case":	807,
									"scores":	[-4.336279859096055]
								}, {
									"case":	808,
									"scores":	[-4.336279859096055]
								}, {
									"case":	809,
									"scores":	[-4.336279859096055]
								}, {
									"case":	810,
									"scores":	[-4.336279859096055]
								}, {
									"case":	811,
									"scores":	[-4.336279859096055]
								}, {
									"case":	812,
									"scores":	[-4.336279859096055]
								}, {
									"case":	813,
									"scores":	[-4.336279859096055]
								}, {
									"case":	814,
									"scores":	[-4.336279859096055]
								}, {
									"case":	815,
									"scores":	[-4.336279859096055]
								}, {
									"case":	816,
									"scores":	[-4.336279859096055]
								}, {
									"case":	817,
									"scores":	[-4.336279859096055]
								}, {
									"case":	818,
									"scores":	[-4.336279859096055]
								}, {
									"case":	819,
									"scores":	[-4.336279859096055]
								}, {
									"case":	820,
									"scores":	[-4.336279859096055]
								}, {
									"case":	821,
									"scores":	[-4.336279859096055]
								}, {
									"case":	822,
									"scores":	[-4.336279859096055]
								}, {
									"case":	823,
									"scores":	[-4.336279859096055]
								}, {
									"case":	824,
									"scores":	[-4.336279859096055]
								}, {
									"case":	825,
									"scores":	[-4.336279859096055]
								}, {
									"case":	826,
									"scores":	[-4.336279859096055]
								}, {
									"case":	827,
									"scores":	[-4.336279859096055]
								}, {
									"case":	828,
									"scores":	[-4.336279859096055]
								}, {
									"case":	829,
									"scores":	[-4.336279859096055]
								}, {
									"case":	830,
									"scores":	[-4.336279859096055]
								}, {
									"case":	831,
									"scores":	[-4.336279859096055]
								}, {
									"case":	832,
									"scores":	[-4.336279859096055]
								}, {
									"case":	833,
									"scores":	[-4.336279859096055]
								}, {
									"case":	834,
									"scores":	[-4.336279859096055]
								}, {
									"case":	835,
									"scores":	[-4.336279859096055]
								}, {
									"case":	836,
									"scores":	[-4.336279859096055]
								}, {
									"case":	837,
									"scores":	[-4.336279859096055]
								}, {
									"case":	838,
									"scores":	[-4.336279859096055]
								}, {
									"case":	839,
									"scores":	[-4.336279859096055]
								}, {
									"case":	840,
									"scores":	[-4.336279859096055]
								}, {
									"case":	841,
									"scores":	[-4.336279859096055]
								}, {
									"case":	842,
									"scores":	[-4.336279859096055]
								}, {
									"case":	843,
									"scores":	[-4.336279859096055]
								}, {
									"case":	844,
									"scores":	[-4.336279859096055]
								}, {
									"case":	845,
									"scores":	[-4.336279859096055]
								}, {
									"case":	846,
									"scores":	[-4.336279859096055]
								}, {
									"case":	847,
									"scores":	[-4.336279859096055]
								}, {
									"case":	848,
									"scores":	[-4.336279859096055]
								}, {
									"case":	849,
									"scores":	[-4.336279859096055]
								}, {
									"case":	850,
									"scores":	[-4.336279859096055]
								}, {
									"case":	851,
									"scores":	[-4.336279859096055]
								}, {
									"case":	852,
									"scores":	[-4.336279859096055]
								}, {
									"case":	853,
									"scores":	[-4.336279859096055]
								}, {
									"case":	854,
									"scores":	[-4.336279859096055]
								}, {
									"case":	855,
									"scores":	[-4.336279859096055]
								}, {
									"case":	856,
									"scores":	[-4.336279859096055]
								}, {
									"case":	857,
									"scores":	[-4.336279859096055]
								}, {
									"case":	858,
									"scores":	[-4.336279859096055]
								}, {
									"case":	859,
									"scores":	[-4.336279859096055]
								}, {
									"case":	860,
									"scores":	[-4.336279859096055]
								}, {
									"case":	861,
									"scores":	[-4.336279859096055]
								}, {
									"case":	862,
									"scores":	[-4.336279859096055]
								}, {
									"case":	863,
									"scores":	[-4.336279859096055]
								}, {
									"case":	864,
									"scores":	[-4.336279859096055]
								}, {
									"case":	865,
									"scores":	[-4.336279859096055]
								}, {
									"case":	866,
									"scores":	[-4.336279859096055]
								}, {
									"case":	867,
									"scores":	[-4.336279859096055]
								}, {
									"case":	868,
									"scores":	[-4.336279859096055]
								}, {
									"case":	869,
									"scores":	[-4.336279859096055]
								}, {
									"case":	870,
									"scores":	[-4.336279859096055]
								}, {
									"case":	871,
									"scores":	[-4.336279859096055]
								}, {
									"case":	872,
									"scores":	[-4.336279859096055]
								}, {
									"case":	873,
									"scores":	[-4.336279859096055]
								}, {
									"case":	874,
									"scores":	[-4.336279859096055]
								}, {
									"case":	875,
									"scores":	[-4.336279859096055]
								}, {
									"case":	876,
									"scores":	[-4.336279859096055]
								}, {
									"case":	877,
									"scores":	[-4.336279859096055]
								}, {
									"case":	878,
									"scores":	[-4.336279859096055]
								}, {
									"case":	879,
									"scores":	[-4.336279859096055]
								}, {
									"case":	880,
									"scores":	[-4.336279859096055]
								}, {
									"case":	881,
									"scores":	[-4.336279859096055]
								}, {
									"case":	882,
									"scores":	[-4.336279859096055]
								}, {
									"case":	883,
									"scores":	[-4.336279859096055]
								}, {
									"case":	884,
									"scores":	[-4.336279859096055]
								}, {
									"case":	885,
									"scores":	[-4.336279859096055]
								}, {
									"case":	886,
									"scores":	[-4.336279859096055]
								}, {
									"case":	887,
									"scores":	[-4.336279859096055]
								}, {
									"case":	888,
									"scores":	[-4.336279859096055]
								}, {
									"case":	889,
									"scores":	[-4.336279859096055]
								}, {
									"case":	890,
									"scores":	[-4.336279859096055]
								}, {
									"case":	891,
									"scores":	[-4.336279859096055]
								}, {
									"case":	892,
									"scores":	[-4.336279859096055]
								}, {
									"case":	893,
									"scores":	[-4.336279859096055]
								}, {
									"case":	894,
									"scores":	[-4.336279859096055]
								}, {
									"case":	895,
									"scores":	[-4.336279859096055]
								}, {
									"case":	896,
									"scores":	[-4.336279859096055]
								}, {
									"case":	897,
									"scores":	[-4.336279859096055]
								}, {
									"case":	898,
									"scores":	[-4.336279859096055]
								}, {
									"case":	899,
									"scores":	[-4.336279859096055]
								}, {
									"case":	900,
									"scores":	[-4.336279859096055]
								}, {
									"case":	901,
									"scores":	[-4.336279859096055]
								}, {
									"case":	902,
									"scores":	[-4.336279859096055]
								}, {
									"case":	903,
									"scores":	[-4.336279859096055]
								}, {
									"case":	904,
									"scores":	[-4.336279859096055]
								}, {
									"case":	905,
									"scores":	[-4.336279859096055]
								}, {
									"case":	906,
									"scores":	[-4.336279859096055]
								}, {
									"case":	907,
									"scores":	[-4.336279859096055]
								}, {
									"case":	908,
									"scores":	[-4.336279859096055]
								}, {
									"case":	909,
									"scores":	[-4.336279859096055]
								}, {
									"case":	910,
									"scores":	[-4.336279859096055]
								}, {
									"case":	911,
									"scores":	[-4.336279859096055]
								}, {
									"case":	912,
									"scores":	[-4.336279859096055]
								}, {
									"case":	913,
									"scores":	[-4.336279859096055]
								}, {
									"case":	914,
									"scores":	[-4.336279859096055]
								}, {
									"case":	915,
									"scores":	[-4.336279859096055]
								}, {
									"case":	916,
									"scores":	[-4.336279859096055]
								}, {
									"case":	917,
									"scores":	[-4.336279859096055]
								}, {
									"case":	918,
									"scores":	[-4.336279859096055]
								}, {
									"case":	919,
									"scores":	[-4.336279859096055]
								}, {
									"case":	920,
									"scores":	[-4.336279859096055]
								}, {
									"case":	921,
									"scores":	[-4.336279859096055]
								}, {
									"case":	922,
									"scores":	[-4.336279859096055]
								}, {
									"case":	923,
									"scores":	[-4.336279859096055]
								}, {
									"case":	924,
									"scores":	[-4.336279859096055]
								}, {
									"case":	925,
									"scores":	[-4.336279859096055]
								}, {
									"case":	926,
									"scores":	[-4.336279859096055]
								}, {
									"case":	927,
									"scores":	[-4.336279859096055]
								}, {
									"case":	928,
									"scores":	[-4.336279859096055]
								}, {
									"case":	929,
									"scores":	[-4.336279859096055]
								}, {
									"case":	930,
									"scores":	[-4.336279859096055]
								}, {
									"case":	931,
									"scores":	[-4.336279859096055]
								}, {
									"case":	932,
									"scores":	[-4.336279859096055]
								}, {
									"case":	933,
									"scores":	[-4.336279859096055]
								}, {
									"case":	934,
									"scores":	[-4.336279859096055]
								}, {
									"case":	935,
									"scores":	[-4.336279859096055]
								}, {
									"case":	936,
									"scores":	[-4.336279859096055]
								}, {
									"case":	937,
									"scores":	[-4.336279859096055]
								}, {
									"case":	938,
									"scores":	[-4.336279859096055]
								}, {
									"case":	939,
									"scores":	[-4.336279859096055]
								}, {
									"case":	940,
									"scores":	[-4.336279859096055]
								}, {
									"case":	941,
									"scores":	[-4.336279859096055]
								}, {
									"case":	942,
									"scores":	[-4.336279859096055]
								}, {
									"case":	943,
									"scores":	[-4.336279859096055]
								}, {
									"case":	944,
									"scores":	[-4.336279859096055]
								}, {
									"case":	945,
									"scores":	[-4.336279859096055]
								}, {
									"case":	946,
									"scores":	[-4.336279859096055]
								}, {
									"case":	947,
									"scores":	[-4.336279859096055]
								}, {
									"case":	948,
									"scores":	[-4.336279859096055]
								}, {
									"case":	949,
									"scores":	[-4.336279859096055]
								}, {
									"case":	950,
									"scores":	[-4.336279859096055]
								}, {
									"case":	951,
									"scores":	[-4.336279859096055]
								}, {
									"case":	952,
									"scores":	[-4.336279859096055]
								}, {
									"case":	953,
									"scores":	[-4.336279859096055]
								}, {
									"case":	954,
									"scores":	[-4.336279859096055]
								}, {
									"case":	955,
									"scores":	[-4.336279859096055]
								}, {
									"case":	956,
									"scores":	[-4.336279859096055]
								}, {
									"case":	957,
									"scores":	[-4.336279859096055]
								}, {
									"case":	958,
									"scores":	[-4.336279859096055]
								}, {
									"case":	959,
									"scores":	[-4.336279859096055]
								}, {
									"case":	960,
									"scores":	[-4.336279859096055]
								}, {
									"case":	961,
									"scores":	[-4.336279859096055]
								}, {
									"case":	962,
									"scores":	[-4.336279859096055]
								}, {
									"case":	963,
									"scores":	[-4.336279859096055]
								}, {
									"case":	964,
									"scores":	[-4.336279859096055]
								}, {
									"case":	965,
									"scores":	[-4.336279859096055]
								}, {
									"case":	966,
									"scores":	[-4.336279859096055]
								}, {
									"case":	967,
									"scores":	[-4.336279859096055]
								}, {
									"case":	968,
									"scores":	[-4.336279859096055]
								}, {
									"case":	969,
									"scores":	[-4.336279859096055]
								}, {
									"case":	970,
									"scores":	[-4.336279859096055]
								}, {
									"case":	971,
									"scores":	[-4.336279859096055]
								}, {
									"case":	972,
									"scores":	[-4.336279859096055]
								}, {
									"case":	973,
									"scores":	[-4.336279859096055]
								}, {
									"case":	974,
									"scores":	[-4.336279859096055]
								}, {
									"case":	975,
									"scores":	[-4.336279859096055]
								}, {
									"case":	976,
									"scores":	[-4.336279859096055]
								}, {
									"case":	977,
									"scores":	[-4.336279859096055]
								}, {
									"case":	978,
									"scores":	[-4.336279859096055]
								}, {
									"case":	979,
									"scores":	[-4.336279859096055]
								}, {
									"case":	980,
									"scores":	[-4.336279859096055]
								}, {
									"case":	981,
									"scores":	[-4.336279859096055]
								}, {
									"case":	982,
									"scores":	[-4.336279859096055]
								}, {
									"case":	983,
									"scores":	[-4.336279859096055]
								}, {
									"case":	984,
									"scores":	[-4.336279859096055]
								}, {
									"case":	985,
									"scores":	[-4.336279859096055]
								}, {
									"case":	986,
									"scores":	[-4.336279859096055]
								}, {
									"case":	987,
									"scores":	[-4.336279859096055]
								}, {
									"case":	988,
									"scores":	[-4.336279859096055]
								}, {
									"case":	989,
									"scores":	[-4.336279859096055]
								}, {
									"case":	990,
									"scores":	[-4.336279859096055]
								}, {
									"case":	991,
									"scores":	[-4.336279859096055]
								}, {
									"case":	992,
									"scores":	[-4.336279859096055]
								}, {
									"case":	993,
									"scores":	[-4.336279859096055]
								}, {
									"case":	994,
									"scores":	[-4.336279859096055]
								}, {
									"case":	995,
									"scores":	[-4.336279859096055]
								}, {
									"case":	996,
									"scores":	[-4.336279859096055]
								}, {
									"case":	997,
									"scores":	[-4.336279859096055]
								}, {
									"case":	998,
									"scores":	[-4.336279859096055]
								}, {
									"case":	999,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1000,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1001,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1002,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1003,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1004,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1005,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1006,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1007,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1008,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1009,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1010,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1011,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1012,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1013,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1014,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1015,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1016,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1017,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1018,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1019,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1020,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1021,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1022,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1023,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1024,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1025,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1026,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1027,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1028,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1029,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1030,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1031,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1032,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1033,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1034,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1035,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1036,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1037,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1038,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1039,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1040,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1041,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1042,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1043,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1044,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1045,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1046,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1047,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1048,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1049,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1050,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1051,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1052,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1053,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1054,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1055,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1056,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1057,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1058,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1059,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1060,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1061,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1062,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1063,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1064,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1065,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1066,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1067,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1068,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1069,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1070,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1071,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1072,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1073,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1074,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1075,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1076,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1077,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1078,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1079,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1080,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1081,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1082,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1083,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1084,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1085,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1086,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1087,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1088,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1089,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1090,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1091,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1092,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1093,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1094,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1095,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1096,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1097,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1098,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1099,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1111,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1112,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1113,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1114,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1115,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1116,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1117,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1118,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1119,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1120,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1121,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1122,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1123,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1124,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1125,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1126,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1127,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1128,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1129,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1130,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1131,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1132,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1133,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1134,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1135,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1136,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1137,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1138,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1139,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1140,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1141,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1142,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1143,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1144,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1145,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1146,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1147,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1148,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1149,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1150,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1151,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1152,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1153,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1154,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1155,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1156,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1157,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1158,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1159,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1160,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1161,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1162,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1163,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1164,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1165,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1166,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1167,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1168,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1169,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1170,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1171,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1172,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1173,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1174,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1175,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1176,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1177,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1178,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1179,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1180,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1181,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1182,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1183,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1184,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1185,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1186,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1187,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1188,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1189,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1190,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1191,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1192,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1193,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1194,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1195,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1196,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1197,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1198,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1199,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1200,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1201,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1202,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1203,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1204,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1205,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1206,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1207,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1208,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1209,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1210,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1211,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1212,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1213,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1214,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1215,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1216,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1217,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1218,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1219,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1220,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1221,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1222,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1223,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1224,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1225,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1226,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1227,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1228,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1229,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1230,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1231,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1232,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1233,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1234,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1235,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1236,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1237,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1238,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1239,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1240,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1241,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1242,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1243,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1244,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1245,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1246,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1247,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1248,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1249,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1250,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1251,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1252,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1253,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1254,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1255,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1256,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1257,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1258,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1259,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1260,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1261,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1262,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1263,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1264,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1265,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1266,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1267,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1268,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1269,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1270,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1271,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1272,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1273,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1274,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1275,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1276,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1277,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1278,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1279,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1280,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1281,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1282,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1283,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1284,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1285,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1286,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1287,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1288,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1289,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1290,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1291,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1292,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1293,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1294,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1295,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1296,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1297,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1298,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1299,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1300,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1301,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1302,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1303,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1304,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1305,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1306,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1307,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1308,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1309,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1310,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1311,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1312,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1313,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1314,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1315,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1316,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1317,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1318,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1319,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1320,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1321,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1322,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1323,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1324,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1325,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1326,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1327,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1328,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1329,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1330,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1331,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1332,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1333,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1334,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1335,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1336,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1337,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1338,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1339,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1340,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1341,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1342,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1343,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1344,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1345,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1346,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1347,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1348,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1349,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1350,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1351,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1352,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1353,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1354,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1355,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1356,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1357,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1358,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1359,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1360,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1361,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1362,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1363,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1364,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1365,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1366,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1367,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1368,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1369,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1370,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1371,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1372,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1373,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1374,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1375,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1376,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1377,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1378,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1379,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1380,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1381,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1382,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1383,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1384,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1385,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1386,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1387,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1388,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1389,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1390,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1391,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1392,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1393,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1394,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1395,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1396,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1397,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1398,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1399,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1400,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1401,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1402,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1403,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1404,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1405,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1406,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1407,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1408,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1409,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1410,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1411,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1412,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1413,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1414,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1415,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1416,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1417,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1418,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1419,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1420,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1421,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1422,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1423,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1424,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1425,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1426,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1427,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1428,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1429,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1430,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1431,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1432,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1433,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1434,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1435,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1436,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1437,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1438,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1439,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1440,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1441,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1442,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1443,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1444,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1445,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1446,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1447,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1448,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1449,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1450,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1451,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1452,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1453,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1454,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1455,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1456,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1457,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1458,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1459,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1460,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1461,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1462,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1463,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1464,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1465,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1466,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1467,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1468,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1469,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1470,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1471,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1472,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1473,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1474,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1475,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1476,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1477,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1478,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1479,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1480,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1481,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1482,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1483,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1484,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1485,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1486,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1487,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1488,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1489,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1490,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1491,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1492,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1493,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1494,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1495,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1496,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1497,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1498,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1499,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1500,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1501,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1502,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1503,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1504,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1505,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1506,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1507,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1508,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1509,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1510,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1511,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1512,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1513,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1514,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1515,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1516,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1517,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1518,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1519,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1520,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1521,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1522,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1523,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1524,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1525,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1526,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1527,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1528,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1529,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1530,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1531,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1532,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1533,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1534,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1535,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1536,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1537,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1538,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1539,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1540,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1541,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1542,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1543,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1544,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1545,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1546,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1547,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1548,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1549,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1550,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1551,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1552,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1553,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1554,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1555,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1556,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1557,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1558,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1559,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1560,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1561,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1562,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1563,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1564,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1565,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1566,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1567,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1568,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1569,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1570,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1571,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1572,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1573,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1574,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1575,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1576,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1577,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1578,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1579,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1580,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1581,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1582,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1583,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1584,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1585,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1586,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1587,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1588,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1589,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1590,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1591,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1592,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1593,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1594,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1595,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1596,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1597,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1598,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1599,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1600,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1601,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1602,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1603,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1604,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1605,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1606,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1607,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1608,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1609,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1610,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1611,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1612,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1613,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1614,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1615,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1616,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1617,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1618,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1619,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1620,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1621,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1622,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1623,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1624,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1625,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1626,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1627,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1628,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1629,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1630,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1631,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1632,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1633,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1634,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1635,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1636,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1637,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1638,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1639,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1640,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1641,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1642,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1643,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1644,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1645,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1646,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1647,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1648,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1649,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1650,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1651,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1652,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1653,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1654,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1655,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1656,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1657,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1658,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1659,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1660,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1661,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1662,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1663,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1664,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1665,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1666,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1667,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1668,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1669,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1670,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1671,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1672,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1673,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1674,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1675,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1676,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1677,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1678,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1679,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1680,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1681,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1682,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1683,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1684,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1685,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1686,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1687,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1688,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1689,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1690,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1691,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1692,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1693,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1694,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1695,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1696,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1697,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1698,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1699,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1700,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1701,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1702,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1703,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1704,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1705,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1706,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1707,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1708,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1709,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1710,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1711,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1712,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1713,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1714,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1715,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1716,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1717,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1718,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1719,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1720,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1721,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1722,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1723,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1724,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1725,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1726,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1727,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1728,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1729,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1730,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1731,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1732,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1733,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1734,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1735,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1736,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1737,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1738,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1739,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1740,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1741,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1742,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1743,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1744,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1745,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1746,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1747,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1748,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1749,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1750,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1751,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1752,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1753,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1754,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1755,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1756,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1757,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1758,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1759,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1760,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1761,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1762,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1763,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1764,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1765,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1766,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1767,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1768,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1769,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1770,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1771,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1772,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1773,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1774,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1775,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1776,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1777,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1778,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1779,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1780,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1781,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1782,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1783,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1784,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1785,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1786,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1787,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1788,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1789,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1790,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1791,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1792,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1793,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1794,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1795,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1796,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1797,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1798,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1799,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1800,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1801,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1802,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1803,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1804,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1805,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1806,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1807,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1808,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1809,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1810,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1811,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1812,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1813,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1814,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1815,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1816,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1817,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1818,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1819,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1820,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1821,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1822,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1823,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1824,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1825,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1826,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1827,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1828,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1829,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1830,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1831,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1832,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1833,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1834,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1835,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1836,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1837,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1838,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1839,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1840,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1841,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1842,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1843,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1844,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1845,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1846,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1847,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1848,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1849,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1850,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1851,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1852,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1853,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1854,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1855,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1856,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1857,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1858,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1859,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1860,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1861,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1862,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1863,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1864,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1865,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1866,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1867,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1868,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1869,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1870,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1871,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1872,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1873,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1874,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1875,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1876,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1877,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1878,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1879,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1880,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1881,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1882,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1883,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1884,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1885,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1886,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1887,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1888,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1889,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1890,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1891,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1892,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1893,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1894,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1895,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1896,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1897,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1898,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1899,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1900,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1901,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1902,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1903,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1904,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1905,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1906,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1907,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1908,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1909,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1910,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1911,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1912,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1913,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1914,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1915,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1916,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1917,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1918,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1919,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1920,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1921,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1922,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1923,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1924,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1925,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1926,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1927,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1928,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1929,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1930,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1931,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1932,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1933,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1934,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1935,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1936,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1937,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1938,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1939,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1940,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1941,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1942,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1943,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1944,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1945,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1946,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1947,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1948,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1949,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1950,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1951,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1952,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1953,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1954,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1955,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1956,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1957,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1958,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1959,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1960,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1961,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1962,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1963,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1964,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1965,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1966,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1967,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1968,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1969,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1970,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1971,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1972,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1973,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1974,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1975,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1976,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1977,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1978,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1979,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1980,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1981,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1982,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1983,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1984,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1985,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1986,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1987,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1988,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1989,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1990,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1991,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1992,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1993,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1994,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1995,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1996,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1997,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1998,
									"scores":	[-4.336279859096055]
								}, {
									"case":	1999,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2000,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2001,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2002,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2003,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2004,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2005,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2006,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2007,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2008,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2009,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2010,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2011,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2012,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2013,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2014,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2015,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2016,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2017,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2018,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2019,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2020,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2021,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2022,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2023,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2024,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2025,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2026,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2027,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2028,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2029,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2030,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2031,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2032,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2033,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2034,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2035,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2036,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2037,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2038,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2039,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2040,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2041,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2042,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2043,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2044,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2045,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2046,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2047,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2048,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2049,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2050,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2051,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2052,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2053,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2054,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2055,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2056,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2057,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2058,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2059,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2060,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2061,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2062,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2063,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2064,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2065,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2066,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2067,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2068,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2069,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2070,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2071,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2072,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2073,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2074,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2075,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2076,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2077,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2078,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2079,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2080,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2081,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2082,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2083,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2084,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2085,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2086,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2087,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2088,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2089,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2090,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2091,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2092,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2093,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2094,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2095,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2096,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2097,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2098,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2099,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2100,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2101,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2102,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2103,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2104,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2105,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2106,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2107,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2108,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2109,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2110,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2111,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2112,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2113,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2114,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2115,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2116,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2117,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2118,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2119,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2120,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2121,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2122,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2123,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2124,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2125,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2126,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2127,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2128,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2129,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2130,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2131,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2132,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2133,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2134,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2135,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2136,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2137,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2138,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2139,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2140,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2141,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2142,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2143,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2144,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2145,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2146,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2147,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2148,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2149,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2150,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2151,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2152,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2153,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2154,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2155,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2156,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2157,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2158,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2159,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2160,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2161,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2162,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2163,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2164,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2165,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2166,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2167,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2168,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2169,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2170,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2171,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2172,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2173,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2174,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2175,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2176,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2177,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2178,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2179,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2180,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2181,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2182,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2183,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2184,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2185,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2186,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2187,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2188,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2189,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2190,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2191,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2192,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2193,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2194,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2195,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2196,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2197,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2198,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2199,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2200,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2201,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2202,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2203,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2204,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2205,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2206,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2207,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2208,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2209,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2210,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2211,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2212,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2213,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2214,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2215,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2216,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2217,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2218,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2219,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2220,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2221,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2222,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2223,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2224,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2225,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2226,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2227,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2228,
									"scores":	[-4.336279859096055]
								}, {
									"case":	2229,
									"scores":	[-4.336279859096055]
								}]
						}]
				}, {
					"line":	119,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	120,
							"begin_column":	7,
							"end_line":	120,
							"end_column":	7,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "(((PyTupleObject *)(newconst))->ob_item[i] = (constant))", "(((PyTupleObject *)(newconst))->ob_item[i] = (consts))", "(((PyTupleObject *)(newconst))->ob_item[i] = (newconst))", "(((PyTupleObject *)(newconst))->ob_item[i] = (tuple))", "PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (100)", "codestr[0] = (102)", "codestr[0] = (104)", "codestr[0] = (120)", "codestr[0] = (127)", "codestr[0] = (130)", "codestr[0] = (2)", "codestr[0] = (255)", "codestr[0] = (8)", "constant = (constant)", "constant = (consts)", "constant = (newconst)", "constant = (objs)[i]", "constant = (tuple)", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (102)", "len_consts = (104)", "len_consts = (120)", "len_consts = (127)", "len_consts = (130)", "len_consts = (2)", "len_consts = (255)", "len_consts = (8)", "len_consts = (i)", "len_consts = (len_consts)", "len_consts = (n)", "newconst = (constant)", "newconst = (consts)", "newconst = (newconst)", "newconst = (tuple)", "newconst = PyFrozenSet_New((constant))", "newconst = PyFrozenSet_New((consts))", "newconst = PyFrozenSet_New((newconst))", "newconst = PyFrozenSet_New((tuple))", "(((PyTupleObject *)(newconst))->ob_item[i] = constant)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__);\n}))", "(_Py_RefTotal++ , ((PyObject *)(constant))->ob_refcnt++)", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 100", "constant = objs[i]", "len_consts = (((PyVarObject *)(consts))->ob_size)", "newconst = PyFrozenSet_New(tuple)", "newconst = PyTuple_New(n)", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 0;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 100;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 102;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 104;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 120;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 127;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 130;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 1;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 255;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 2;\n", "if (__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	2,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	3,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	4,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	5,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	6,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	7,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	8,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	9,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	10,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	11,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	12,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	13,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	14,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	15,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	16,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	17,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	18,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	19,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	20,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	21,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	22,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	23,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	24,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	25,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	26,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	27,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	28,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	29,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	30,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	31,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	32,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	33,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	34,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	35,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	36,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	37,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	38,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	39,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	40,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	41,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	42,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	43,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	44,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	45,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	46,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	47,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	48,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	49,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	50,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	51,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	52,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	53,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	54,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	55,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	56,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	57,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	58,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	59,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	60,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	61,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	62,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	63,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	64,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	65,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	66,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	67,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	68,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	69,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	70,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	71,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	72,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	73,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	74,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	75,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	76,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	77,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	78,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	79,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	80,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	81,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	82,
									"scores":	[-4.2756717371434965]
								}, {
									"case":	83,
									"scores":	[-7.9647361471434976, -6.3993818871434964, -7.5811513001434969, -7.9354078701434965, -7.7354724871434968, -7.1231302071434968, -7.5811513001434969, -7.3230655901434965, -6.6043602071434968]
								}, {
									"case":	84,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	85,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	86,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	87,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	88,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	89,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	90,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	91,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	92,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}, {
									"case":	93,
									"scores":	[-10.4874177771435, -8.9220635171434957, -10.103832930143497, -10.4580895001435, -10.2581541171435, -9.6458118371435, -10.103832930143497, -9.8457472201435, -9.1270418371435]
								}]
						}, {
							"switch":	5,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	120,
							"begin_column":	9,
							"end_line":	120,
							"end_column":	24,
							"patch_codes":	["if (!__is_neg(\"\", \"L120\", 9, &(tuple), sizeof (tuple), &(newconst), sizeof (newconst), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    do {\n        if (_Py_RefTotal-- , --((PyObject *)(tuple))->ob_refcnt != 0) {\n            if (((PyObject *)tuple)->ob_refcnt < 0)\n                _Py_NegativeRefcount(\"Python/peephole.c\", 120, (PyObject *)(tuple));\n        } else\n            _Py_Dealloc((PyObject *)(tuple));\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8142808671434967, -4.7801847271434967, -6.4848743371434958, -6.9995343371434959, -6.7586589371434957, -5.8220329371434962, -6.4848743371434958, -6.0629083371434964, -5.6506430971434964]
								}]
						}]
				}, {
					"line":	120,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	121,
							"begin_column":	7,
							"end_line":	121,
							"end_column":	7,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "(((PyTupleObject *)(newconst))->ob_item[i] = (constant))", "(((PyTupleObject *)(newconst))->ob_item[i] = (consts))", "(((PyTupleObject *)(newconst))->ob_item[i] = (newconst))", "(((PyTupleObject *)(newconst))->ob_item[i] = (tuple))", "PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (100)", "codestr[0] = (102)", "codestr[0] = (104)", "codestr[0] = (120)", "codestr[0] = (127)", "codestr[0] = (130)", "codestr[0] = (2)", "codestr[0] = (255)", "codestr[0] = (8)", "constant = (constant)", "constant = (consts)", "constant = (newconst)", "constant = (objs)[i]", "constant = (tuple)", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (102)", "len_consts = (104)", "len_consts = (120)", "len_consts = (127)", "len_consts = (130)", "len_consts = (2)", "len_consts = (255)", "len_consts = (8)", "len_consts = (i)", "len_consts = (len_consts)", "len_consts = (n)", "newconst = (constant)", "newconst = (consts)", "newconst = (newconst)", "newconst = (tuple)", "newconst = PyFrozenSet_New((constant))", "newconst = PyFrozenSet_New((consts))", "newconst = PyFrozenSet_New((newconst))", "newconst = PyFrozenSet_New((tuple))", "(((PyTupleObject *)(newconst))->ob_item[i] = constant)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__);\n}))", "(_Py_RefTotal++ , ((PyObject *)(constant))->ob_refcnt++)", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 100", "constant = objs[i]", "len_consts = (((PyVarObject *)(consts))->ob_size)", "newconst = PyFrozenSet_New(tuple)", "newconst = PyTuple_New(n)", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 0;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 100;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 102;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 104;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 120;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 127;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 130;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 1;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 255;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 2;\n", "if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.255469029825977]
								}, {
									"case":	2,
									"scores":	[-4.255469029825977]
								}, {
									"case":	3,
									"scores":	[-4.255469029825977]
								}, {
									"case":	4,
									"scores":	[-4.255469029825977]
								}, {
									"case":	5,
									"scores":	[-4.255469029825977]
								}, {
									"case":	6,
									"scores":	[-4.255469029825977]
								}, {
									"case":	7,
									"scores":	[-4.255469029825977]
								}, {
									"case":	8,
									"scores":	[-4.255469029825977]
								}, {
									"case":	9,
									"scores":	[-4.255469029825977]
								}, {
									"case":	10,
									"scores":	[-4.255469029825977]
								}, {
									"case":	11,
									"scores":	[-4.255469029825977]
								}, {
									"case":	12,
									"scores":	[-4.255469029825977]
								}, {
									"case":	13,
									"scores":	[-4.255469029825977]
								}, {
									"case":	14,
									"scores":	[-4.255469029825977]
								}, {
									"case":	15,
									"scores":	[-4.255469029825977]
								}, {
									"case":	16,
									"scores":	[-4.255469029825977]
								}, {
									"case":	17,
									"scores":	[-4.255469029825977]
								}, {
									"case":	18,
									"scores":	[-4.255469029825977]
								}, {
									"case":	19,
									"scores":	[-4.255469029825977]
								}, {
									"case":	20,
									"scores":	[-4.255469029825977]
								}, {
									"case":	21,
									"scores":	[-4.255469029825977]
								}, {
									"case":	22,
									"scores":	[-4.255469029825977]
								}, {
									"case":	23,
									"scores":	[-4.255469029825977]
								}, {
									"case":	24,
									"scores":	[-4.255469029825977]
								}, {
									"case":	25,
									"scores":	[-4.255469029825977]
								}, {
									"case":	26,
									"scores":	[-4.255469029825977]
								}, {
									"case":	27,
									"scores":	[-4.255469029825977]
								}, {
									"case":	28,
									"scores":	[-4.255469029825977]
								}, {
									"case":	29,
									"scores":	[-4.255469029825977]
								}, {
									"case":	30,
									"scores":	[-4.255469029825977]
								}, {
									"case":	31,
									"scores":	[-4.255469029825977]
								}, {
									"case":	32,
									"scores":	[-4.255469029825977]
								}, {
									"case":	33,
									"scores":	[-4.255469029825977]
								}, {
									"case":	34,
									"scores":	[-4.255469029825977]
								}, {
									"case":	35,
									"scores":	[-4.255469029825977]
								}, {
									"case":	36,
									"scores":	[-4.255469029825977]
								}, {
									"case":	37,
									"scores":	[-4.255469029825977]
								}, {
									"case":	38,
									"scores":	[-4.255469029825977]
								}, {
									"case":	39,
									"scores":	[-4.255469029825977]
								}, {
									"case":	40,
									"scores":	[-4.255469029825977]
								}, {
									"case":	41,
									"scores":	[-4.255469029825977]
								}, {
									"case":	42,
									"scores":	[-4.255469029825977]
								}, {
									"case":	43,
									"scores":	[-4.255469029825977]
								}, {
									"case":	44,
									"scores":	[-4.255469029825977]
								}, {
									"case":	45,
									"scores":	[-4.255469029825977]
								}, {
									"case":	46,
									"scores":	[-4.255469029825977]
								}, {
									"case":	47,
									"scores":	[-4.255469029825977]
								}, {
									"case":	48,
									"scores":	[-4.255469029825977]
								}, {
									"case":	49,
									"scores":	[-4.255469029825977]
								}, {
									"case":	50,
									"scores":	[-4.255469029825977]
								}, {
									"case":	51,
									"scores":	[-4.255469029825977]
								}, {
									"case":	52,
									"scores":	[-4.255469029825977]
								}, {
									"case":	53,
									"scores":	[-4.255469029825977]
								}, {
									"case":	54,
									"scores":	[-4.255469029825977]
								}, {
									"case":	55,
									"scores":	[-4.255469029825977]
								}, {
									"case":	56,
									"scores":	[-4.255469029825977]
								}, {
									"case":	57,
									"scores":	[-4.255469029825977]
								}, {
									"case":	58,
									"scores":	[-4.255469029825977]
								}, {
									"case":	59,
									"scores":	[-4.255469029825977]
								}, {
									"case":	60,
									"scores":	[-4.255469029825977]
								}, {
									"case":	61,
									"scores":	[-4.255469029825977]
								}, {
									"case":	62,
									"scores":	[-4.255469029825977]
								}, {
									"case":	63,
									"scores":	[-4.255469029825977]
								}, {
									"case":	64,
									"scores":	[-4.255469029825977]
								}, {
									"case":	65,
									"scores":	[-4.255469029825977]
								}, {
									"case":	66,
									"scores":	[-4.255469029825977]
								}, {
									"case":	67,
									"scores":	[-4.255469029825977]
								}, {
									"case":	68,
									"scores":	[-4.255469029825977]
								}, {
									"case":	69,
									"scores":	[-4.255469029825977]
								}, {
									"case":	70,
									"scores":	[-4.255469029825977]
								}, {
									"case":	71,
									"scores":	[-4.255469029825977]
								}, {
									"case":	72,
									"scores":	[-4.255469029825977]
								}, {
									"case":	73,
									"scores":	[-4.255469029825977]
								}, {
									"case":	74,
									"scores":	[-4.255469029825977]
								}, {
									"case":	75,
									"scores":	[-4.255469029825977]
								}, {
									"case":	76,
									"scores":	[-4.255469029825977]
								}, {
									"case":	77,
									"scores":	[-4.255469029825977]
								}, {
									"case":	78,
									"scores":	[-4.255469029825977]
								}, {
									"case":	79,
									"scores":	[-4.255469029825977]
								}, {
									"case":	80,
									"scores":	[-4.255469029825977]
								}, {
									"case":	81,
									"scores":	[-4.255469029825977]
								}, {
									"case":	82,
									"scores":	[-4.255469029825977]
								}, {
									"case":	83,
									"scores":	[-6.0034846798259762, -8.3092519398259768, -8.1739745928259762, -8.52823116282598, -8.32829577982598, -7.7159534998259769, -8.1739745928259762, -7.9158888828259766, -7.1971834998259769]
								}, {
									"case":	84,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	85,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	86,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	87,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	88,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	89,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	90,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	91,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	92,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}, {
									"case":	93,
									"scores":	[-8.5261663098259763, -10.831933569825978, -10.696656222825975, -11.050912792825976, -10.850977409825976, -10.238635129825976, -10.696656222825975, -10.438570512825976, -9.7198651298259762]
								}]
						}, {
							"switch":	7,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	121,
							"begin_column":	9,
							"end_line":	122,
							"end_column":	20,
							"patch_codes":	["if (__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 0;\n", "if ((newconst == ((void *)0)) || __is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 0;\n", "if ((newconst == ((void *)0)) && !__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.8426158954281457, -4.9100290354281455, -4.7644965054281458, -5.279156505428146, -5.0382811054281458, -4.1016551054281463, -4.7644965054281458, -4.3425305054281456, -3.930265265428146]
								}, {
									"case":	2,
									"scores":	[-2.593382828428147, -5.6607959684281459, -5.5152634384281463, -6.0299234384281455, -5.7890480384281453, -4.8524220384281458, -5.5152634384281463, -5.093297438428146, -4.681032198428146]
								}, {
									"case":	3,
									"scores":	[-2.593382828428147, -5.6607959684281459, -5.5152634384281463, -6.0299234384281455, -5.7890480384281453, -4.8524220384281458, -5.5152634384281463, -5.093297438428146, -4.681032198428146]
								}]
						}, {
							"switch":	8,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	121,
							"begin_column":	9,
							"end_line":	122,
							"end_column":	20,
							"patch_codes":	["if (!__is_neg(\"\", \"L121\", 9, &(newconst), sizeof (newconst), &(tuple), sizeof (tuple), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(len_consts), sizeof (len_consts)))\n    if (newconst == ((void *)0))\n        return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.8200488198259768, -6.887461959825977, -6.7419294298259764, -7.2565894298259765, -7.0157140298259764, -6.0790880298259768, -6.7419294298259764, -6.319963429825977, -5.9076981898259771]
								}]
						}]
				}, {
					"line":	116,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [], [], [], [], [], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [], [], [], [], [], []],
							"begin_line":	117,
							"begin_column":	3,
							"end_line":	117,
							"end_column":	3,
							"patch_codes":	["(((PyTupleObject *)(newconst))->ob_item[i] = (constant))", "(((PyTupleObject *)(newconst))->ob_item[i] = (consts))", "(((PyTupleObject *)(newconst))->ob_item[i] = (newconst))", "PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (100)", "codestr[0] = (102)", "codestr[0] = (104)", "codestr[0] = (120)", "codestr[0] = (127)", "codestr[0] = (130)", "codestr[0] = (2)", "codestr[0] = (255)", "codestr[0] = (8)", "constant = (constant)", "constant = (consts)", "constant = (newconst)", "constant = (objs)[i]", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (102)", "len_consts = (104)", "len_consts = (120)", "len_consts = (127)", "len_consts = (130)", "len_consts = (2)", "len_consts = (255)", "len_consts = (8)", "len_consts = (i)", "len_consts = (len_consts)", "len_consts = (n)", "newconst = (constant)", "newconst = (consts)", "newconst = (newconst)", "newconst = PyFrozenSet_New((constant))", "newconst = PyFrozenSet_New((consts))", "newconst = PyFrozenSet_New((newconst))", "(((PyTupleObject *)(newconst))->ob_item[i] = constant)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__);\n}))", "(_Py_RefTotal++ , ((PyObject *)(constant))->ob_refcnt++)", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 100", "constant = objs[i]", "len_consts = (((PyVarObject *)(consts))->ob_size)", "newconst = PyTuple_New(n)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	2,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	3,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	4,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	5,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	6,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	7,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	8,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	9,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	10,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	11,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	12,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	13,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	14,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	15,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	16,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	17,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	18,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	19,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	20,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	21,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	22,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	23,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	24,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	25,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	26,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	27,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	28,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	29,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	30,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	31,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	32,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	33,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	34,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	35,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	36,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	37,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	38,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	39,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	40,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	41,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	42,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	43,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	44,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	45,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	46,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	47,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	48,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	49,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	50,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	51,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	52,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	53,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	54,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	55,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	56,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	57,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	58,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	59,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	60,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	61,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	62,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	63,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	64,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	65,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	66,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	67,
									"scores":	[-4.3564825664135745]
								}, {
									"case":	68,
									"scores":	[-4.3564825664135745]
								}]
						}, {
							"switch":	1,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	117,
							"begin_column":	5,
							"end_line":	123,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L117\", 8, &(codestr), sizeof (codestr), &(newconst), sizeof (newconst), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts))) {\n    PyObject *tuple = newconst;\n    newconst = PyFrozenSet_New(tuple);\n    do {\n        if (_Py_RefTotal-- , --((PyObject *)(tuple))->ob_refcnt != 0) {\n            if (((PyObject *)tuple)->ob_refcnt < 0)\n                _Py_NegativeRefcount(\"Python/peephole.c\", 120, (PyObject *)(tuple));\n        } else\n            _Py_Dealloc((PyObject *)(tuple));\n    } while (0);\n    if (newconst == ((void *)0))\n        return 0;\n}\n", "if ((codestr[0] == 104) && !__is_neg(\"\", \"L117\", 8, &(codestr), sizeof (codestr), &(newconst), sizeof (newconst), &(constant), sizeof (constant), &(i), sizeof (i), &(objs), sizeof (objs), &(n), sizeof (n), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts))) {\n    PyObject *tuple = newconst;\n    newconst = PyFrozenSet_New(tuple);\n    do {\n        if (_Py_RefTotal-- , --((PyObject *)(tuple))->ob_refcnt != 0) {\n            if (((PyObject *)tuple)->ob_refcnt < 0)\n                _Py_NegativeRefcount(\"Python/peephole.c\", 120, (PyObject *)(tuple));\n        } else\n            _Py_Dealloc((PyObject *)(tuple));\n    } while (0);\n    if (newconst == ((void *)0))\n        return 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.6976129825281481, -3.5573110075281469, -5.7652888255281454, -6.6463127755281466, -6.2845116355281458, -5.2513134355281439, -5.7772677355281479, -4.6572729855281452]
								}, {
									"case":	2,
									"scores":	[-2.2414097754281461, -0.10110780042814627, -2.3090856184281461, -3.1901095684281464, -2.8283084284281461, -1.7951102284281455, -2.3210645284281464, -1.2010697784281463]
								}]
						}]
				}, {
					"line":	186,
					"switches":	[{
							"switch":	9,
							"types":	[[], [], [], [], [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	187,
							"begin_column":	11,
							"end_line":	187,
							"end_column":	11,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "len_consts = (-1)", "len_consts = (-2)", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (157)", "len_consts = (19)", "len_consts = (2)", "len_consts = (20)", "len_consts = (22)", "len_consts = (221)", "len_consts = (228)", "len_consts = (23)", "len_consts = (231)", "len_consts = (24)", "len_consts = (25)", "len_consts = (255)", "len_consts = (26)", "len_consts = (27)", "len_consts = (62)", "len_consts = (63)", "len_consts = (64)", "len_consts = (65)", "len_consts = (66)", "len_consts = (8)", "len_consts = (len_consts)", "len_consts = (size)", "opcode = (-1)", "opcode = (-2)", "opcode = (0)", "opcode = (1)", "opcode = (100)", "opcode = (157)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (221)", "opcode = (228)", "opcode = (23)", "opcode = (231)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (26)", "opcode = (27)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (8)", "opcode = (codestr)[0]", "opcode = (opcode)", "size = (-1)", "size = (-2)", "size = (0)", "size = (1)", "size = (100)", "size = (157)", "size = (19)", "size = (2)", "size = (20)", "size = (22)", "size = (221)", "size = (228)", "size = (23)", "size = (231)", "size = (24)", "size = (25)", "size = (255)", "size = (26)", "size = (27)", "size = (62)", "size = (63)", "size = (64)", "size = (65)", "size = (66)", "size = (8)", "size = (len_consts)", "size = (size)", "size = PyObject_Size((consts))", "size = PyObject_Size((newconst))", "size = PyObject_Size((v))", "size = PyObject_Size((w))", "v = (consts)", "v = (newconst)", "v = (objs)[0]", "v = (v)", "v = (w)", "w = (consts)", "w = (newconst)", "w = (objs)[1]", "w = (v)", "w = (w)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[0]", "size = PyObject_Size(newconst)", "v = objs[0]", "w = objs[1]", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return -1;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return -2;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 0;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 100;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 157;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 19;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 1;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 20;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 221;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 228;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 22;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 231;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 23;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 24;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 255;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 25;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 26;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 27;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 2;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 62;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 63;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 64;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 65;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 66;\n", "if (__is_neg(\"\", \"L187\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.09384737128582]
								}, {
									"case":	2,
									"scores":	[-4.09384737128582]
								}, {
									"case":	3,
									"scores":	[-4.09384737128582]
								}, {
									"case":	4,
									"scores":	[-4.09384737128582]
								}, {
									"case":	5,
									"scores":	[-4.09384737128582]
								}, {
									"case":	6,
									"scores":	[-4.09384737128582]
								}, {
									"case":	7,
									"scores":	[-4.09384737128582]
								}, {
									"case":	8,
									"scores":	[-4.09384737128582]
								}, {
									"case":	9,
									"scores":	[-4.09384737128582]
								}, {
									"case":	10,
									"scores":	[-4.09384737128582]
								}, {
									"case":	11,
									"scores":	[-4.09384737128582]
								}, {
									"case":	12,
									"scores":	[-4.09384737128582]
								}, {
									"case":	13,
									"scores":	[-4.09384737128582]
								}, {
									"case":	14,
									"scores":	[-4.09384737128582]
								}, {
									"case":	15,
									"scores":	[-4.09384737128582]
								}, {
									"case":	16,
									"scores":	[-4.09384737128582]
								}, {
									"case":	17,
									"scores":	[-4.09384737128582]
								}, {
									"case":	18,
									"scores":	[-4.09384737128582]
								}, {
									"case":	19,
									"scores":	[-4.09384737128582]
								}, {
									"case":	20,
									"scores":	[-4.09384737128582]
								}, {
									"case":	21,
									"scores":	[-4.09384737128582]
								}, {
									"case":	22,
									"scores":	[-4.09384737128582]
								}, {
									"case":	23,
									"scores":	[-4.09384737128582]
								}, {
									"case":	24,
									"scores":	[-4.09384737128582]
								}, {
									"case":	25,
									"scores":	[-4.09384737128582]
								}, {
									"case":	26,
									"scores":	[-4.09384737128582]
								}, {
									"case":	27,
									"scores":	[-4.09384737128582]
								}, {
									"case":	28,
									"scores":	[-4.09384737128582]
								}, {
									"case":	29,
									"scores":	[-4.09384737128582]
								}, {
									"case":	30,
									"scores":	[-4.09384737128582]
								}, {
									"case":	31,
									"scores":	[-4.09384737128582]
								}, {
									"case":	32,
									"scores":	[-4.09384737128582]
								}, {
									"case":	33,
									"scores":	[-4.09384737128582]
								}, {
									"case":	34,
									"scores":	[-4.09384737128582]
								}, {
									"case":	35,
									"scores":	[-4.09384737128582]
								}, {
									"case":	36,
									"scores":	[-4.09384737128582]
								}, {
									"case":	37,
									"scores":	[-4.09384737128582]
								}, {
									"case":	38,
									"scores":	[-4.09384737128582]
								}, {
									"case":	39,
									"scores":	[-4.09384737128582]
								}, {
									"case":	40,
									"scores":	[-4.09384737128582]
								}, {
									"case":	41,
									"scores":	[-4.09384737128582]
								}, {
									"case":	42,
									"scores":	[-4.09384737128582]
								}, {
									"case":	43,
									"scores":	[-4.09384737128582]
								}, {
									"case":	44,
									"scores":	[-4.09384737128582]
								}, {
									"case":	45,
									"scores":	[-4.09384737128582]
								}, {
									"case":	46,
									"scores":	[-4.09384737128582]
								}, {
									"case":	47,
									"scores":	[-4.09384737128582]
								}, {
									"case":	48,
									"scores":	[-4.09384737128582]
								}, {
									"case":	49,
									"scores":	[-4.09384737128582]
								}, {
									"case":	50,
									"scores":	[-4.09384737128582]
								}, {
									"case":	51,
									"scores":	[-4.09384737128582]
								}, {
									"case":	52,
									"scores":	[-4.09384737128582]
								}, {
									"case":	53,
									"scores":	[-4.09384737128582]
								}, {
									"case":	54,
									"scores":	[-4.09384737128582]
								}, {
									"case":	55,
									"scores":	[-4.09384737128582]
								}, {
									"case":	56,
									"scores":	[-4.09384737128582]
								}, {
									"case":	57,
									"scores":	[-4.09384737128582]
								}, {
									"case":	58,
									"scores":	[-4.09384737128582]
								}, {
									"case":	59,
									"scores":	[-4.09384737128582]
								}, {
									"case":	60,
									"scores":	[-4.09384737128582]
								}, {
									"case":	61,
									"scores":	[-4.09384737128582]
								}, {
									"case":	62,
									"scores":	[-4.09384737128582]
								}, {
									"case":	63,
									"scores":	[-4.09384737128582]
								}, {
									"case":	64,
									"scores":	[-4.09384737128582]
								}, {
									"case":	65,
									"scores":	[-4.09384737128582]
								}, {
									"case":	66,
									"scores":	[-4.09384737128582]
								}, {
									"case":	67,
									"scores":	[-4.09384737128582]
								}, {
									"case":	68,
									"scores":	[-4.09384737128582]
								}, {
									"case":	69,
									"scores":	[-4.09384737128582]
								}, {
									"case":	70,
									"scores":	[-4.09384737128582]
								}, {
									"case":	71,
									"scores":	[-4.09384737128582]
								}, {
									"case":	72,
									"scores":	[-4.09384737128582]
								}, {
									"case":	73,
									"scores":	[-4.09384737128582]
								}, {
									"case":	74,
									"scores":	[-4.09384737128582]
								}, {
									"case":	75,
									"scores":	[-4.09384737128582]
								}, {
									"case":	76,
									"scores":	[-4.09384737128582]
								}, {
									"case":	77,
									"scores":	[-4.09384737128582]
								}, {
									"case":	78,
									"scores":	[-4.09384737128582]
								}, {
									"case":	79,
									"scores":	[-4.09384737128582]
								}, {
									"case":	80,
									"scores":	[-4.09384737128582]
								}, {
									"case":	81,
									"scores":	[-4.09384737128582]
								}, {
									"case":	82,
									"scores":	[-4.09384737128582]
								}, {
									"case":	83,
									"scores":	[-4.09384737128582]
								}, {
									"case":	84,
									"scores":	[-4.09384737128582]
								}, {
									"case":	85,
									"scores":	[-4.09384737128582]
								}, {
									"case":	86,
									"scores":	[-4.09384737128582]
								}, {
									"case":	87,
									"scores":	[-4.09384737128582]
								}, {
									"case":	88,
									"scores":	[-4.09384737128582]
								}, {
									"case":	89,
									"scores":	[-4.09384737128582]
								}, {
									"case":	90,
									"scores":	[-4.09384737128582]
								}, {
									"case":	91,
									"scores":	[-4.09384737128582]
								}, {
									"case":	92,
									"scores":	[-4.09384737128582]
								}, {
									"case":	93,
									"scores":	[-4.09384737128582]
								}, {
									"case":	94,
									"scores":	[-4.09384737128582]
								}, {
									"case":	95,
									"scores":	[-4.09384737128582]
								}, {
									"case":	96,
									"scores":	[-4.09384737128582]
								}, {
									"case":	97,
									"scores":	[-4.09384737128582]
								}, {
									"case":	98,
									"scores":	[-4.09384737128582]
								}, {
									"case":	99,
									"scores":	[-4.09384737128582]
								}, {
									"case":	100,
									"scores":	[-4.09384737128582]
								}, {
									"case":	101,
									"scores":	[-4.09384737128582]
								}, {
									"case":	102,
									"scores":	[-4.09384737128582]
								}, {
									"case":	103,
									"scores":	[-4.09384737128582]
								}, {
									"case":	104,
									"scores":	[-4.09384737128582]
								}, {
									"case":	105,
									"scores":	[-4.09384737128582]
								}, {
									"case":	106,
									"scores":	[-4.09384737128582]
								}, {
									"case":	107,
									"scores":	[-4.09384737128582]
								}, {
									"case":	108,
									"scores":	[-4.09384737128582]
								}, {
									"case":	109,
									"scores":	[-4.09384737128582]
								}, {
									"case":	110,
									"scores":	[-4.09384737128582]
								}, {
									"case":	111,
									"scores":	[-4.09384737128582]
								}, {
									"case":	112,
									"scores":	[-4.09384737128582]
								}, {
									"case":	113,
									"scores":	[-4.09384737128582]
								}, {
									"case":	114,
									"scores":	[-4.09384737128582]
								}, {
									"case":	115,
									"scores":	[-4.09384737128582]
								}, {
									"case":	116,
									"scores":	[-4.09384737128582]
								}, {
									"case":	117,
									"scores":	[-4.09384737128582]
								}, {
									"case":	118,
									"scores":	[-4.09384737128582]
								}, {
									"case":	119,
									"scores":	[-4.09384737128582]
								}, {
									"case":	120,
									"scores":	[-4.09384737128582]
								}, {
									"case":	121,
									"scores":	[-4.09384737128582]
								}, {
									"case":	122,
									"scores":	[-4.09384737128582]
								}, {
									"case":	123,
									"scores":	[-4.09384737128582]
								}, {
									"case":	124,
									"scores":	[-4.09384737128582]
								}, {
									"case":	125,
									"scores":	[-4.09384737128582]
								}, {
									"case":	126,
									"scores":	[-4.09384737128582]
								}, {
									"case":	127,
									"scores":	[-4.09384737128582]
								}, {
									"case":	128,
									"scores":	[-4.09384737128582]
								}, {
									"case":	129,
									"scores":	[-4.09384737128582]
								}, {
									"case":	130,
									"scores":	[-4.09384737128582]
								}, {
									"case":	131,
									"scores":	[-4.09384737128582]
								}, {
									"case":	132,
									"scores":	[-4.09384737128582]
								}, {
									"case":	133,
									"scores":	[-4.09384737128582]
								}, {
									"case":	134,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	135,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	136,
									"scores":	[-4.89603145828582, -6.50632514828582, -6.50632514828582, -6.71548666128582, -5.46074936128582, -6.71548666128582, -6.4793144542858219, -6.4793144542858219, -5.46074936128582, -6.8335710242858214, -5.50252336128582]
								}, {
									"case":	137,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	138,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	139,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	140,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	141,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	142,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	143,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	144,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	145,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	146,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	147,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	148,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	149,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	150,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	151,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	152,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	153,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	154,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	155,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	156,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	157,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}, {
									"case":	158,
									"scores":	[-7.41871308828582, -9.02900677828582, -9.02900677828582, -9.23816829128582, -7.98343099128582, -9.23816829128582, -9.00199608428582, -9.00199608428582, -7.98343099128582, -9.35625265428582, -8.02520499128582]
								}]
						}]
				}, {
					"line":	192,
					"switches":	[{
							"switch":	10,
							"types":	[[], [], [], [], [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	193,
							"begin_column":	11,
							"end_line":	193,
							"end_column":	11,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "len_consts = (-1)", "len_consts = (-2)", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (157)", "len_consts = (19)", "len_consts = (2)", "len_consts = (20)", "len_consts = (22)", "len_consts = (221)", "len_consts = (228)", "len_consts = (23)", "len_consts = (231)", "len_consts = (24)", "len_consts = (25)", "len_consts = (255)", "len_consts = (26)", "len_consts = (27)", "len_consts = (62)", "len_consts = (63)", "len_consts = (64)", "len_consts = (65)", "len_consts = (66)", "len_consts = (8)", "len_consts = (len_consts)", "len_consts = (size)", "opcode = (-1)", "opcode = (-2)", "opcode = (0)", "opcode = (1)", "opcode = (100)", "opcode = (157)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (221)", "opcode = (228)", "opcode = (23)", "opcode = (231)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (26)", "opcode = (27)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (8)", "opcode = (codestr)[0]", "opcode = (opcode)", "size = (-1)", "size = (-2)", "size = (0)", "size = (1)", "size = (100)", "size = (157)", "size = (19)", "size = (2)", "size = (20)", "size = (22)", "size = (221)", "size = (228)", "size = (23)", "size = (231)", "size = (24)", "size = (25)", "size = (255)", "size = (26)", "size = (27)", "size = (62)", "size = (63)", "size = (64)", "size = (65)", "size = (66)", "size = (8)", "size = (len_consts)", "size = (size)", "size = PyObject_Size((consts))", "size = PyObject_Size((newconst))", "size = PyObject_Size((v))", "size = PyObject_Size((w))", "v = (consts)", "v = (newconst)", "v = (objs)[0]", "v = (v)", "v = (w)", "w = (consts)", "w = (newconst)", "w = (objs)[1]", "w = (v)", "w = (w)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[0]", "size = PyObject_Size(newconst)", "v = objs[0]", "w = objs[1]", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return -1;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return -2;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 0;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 100;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 157;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 19;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 1;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 20;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 221;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 228;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 22;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 231;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 23;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 24;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 255;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 25;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 26;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 27;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 2;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 62;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 63;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 64;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 65;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 66;\n", "if (__is_neg(\"\", \"L193\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(codestr), sizeof (codestr), &(objs), sizeof (objs), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	2,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	3,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	4,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	5,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	6,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	7,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	8,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	9,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	10,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	11,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	12,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	13,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	14,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	15,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	16,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	17,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	18,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	19,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	20,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	21,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	22,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	23,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	24,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	25,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	26,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	27,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	28,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	29,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	30,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	31,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	32,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	33,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	34,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	35,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	36,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	37,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	38,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	39,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	40,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	41,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	42,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	43,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	44,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	45,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	46,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	47,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	48,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	49,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	50,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	51,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	52,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	53,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	54,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	55,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	56,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	57,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	58,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	59,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	60,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	61,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	62,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	63,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	64,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	65,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	66,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	67,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	68,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	69,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	70,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	71,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	72,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	73,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	74,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	75,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	76,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	77,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	78,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	79,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	80,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	81,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	82,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	83,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	84,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	85,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	86,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	87,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	88,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	89,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	90,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	91,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	92,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	93,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	94,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	95,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	96,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	97,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	98,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	99,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	100,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	101,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	102,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	103,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	104,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	105,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	106,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	107,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	108,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	109,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	110,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	111,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	112,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	113,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	114,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	115,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	116,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	117,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	118,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	119,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	120,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	121,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	122,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	123,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	124,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	125,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	126,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	127,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	128,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	129,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	130,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	131,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	132,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	133,
									"scores":	[-4.4372933956836524]
								}, {
									"case":	134,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	135,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	136,
									"scores":	[-5.2394774826836521, -6.8497711726836528, -6.8497711726836528, -7.0589326856836525, -5.8041953856836521, -7.0589326856836525, -5.8041953856836521, -6.8227604786836533, -6.8227604786836533, -7.1770170486836529, -5.8459693856836523]
								}, {
									"case":	137,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	138,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	139,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	140,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	141,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	142,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	143,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	144,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	145,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	146,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	147,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	148,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	149,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	150,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	151,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	152,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	153,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	154,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	155,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	156,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	157,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}, {
									"case":	158,
									"scores":	[-7.7621591126836522, -9.3724528026836538, -9.3724528026836538, -9.58161431568365, -8.3268770156836531, -9.58161431568365, -8.3268770156836531, -9.34544210868365, -9.34544210868365, -9.699698678683653, -8.3686510156836533]
								}]
						}]
				}, {
					"line":	195,
					"switches":	[{
							"switch":	11,
							"types":	[[], [], [], [], [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	196,
							"begin_column":	11,
							"end_line":	196,
							"end_column":	11,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "len_consts = (-1)", "len_consts = (-2)", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (157)", "len_consts = (19)", "len_consts = (2)", "len_consts = (20)", "len_consts = (22)", "len_consts = (221)", "len_consts = (228)", "len_consts = (23)", "len_consts = (231)", "len_consts = (24)", "len_consts = (25)", "len_consts = (255)", "len_consts = (26)", "len_consts = (27)", "len_consts = (62)", "len_consts = (63)", "len_consts = (64)", "len_consts = (65)", "len_consts = (66)", "len_consts = (8)", "len_consts = (len_consts)", "len_consts = (size)", "opcode = (-1)", "opcode = (-2)", "opcode = (0)", "opcode = (1)", "opcode = (100)", "opcode = (157)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (221)", "opcode = (228)", "opcode = (23)", "opcode = (231)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (26)", "opcode = (27)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (8)", "opcode = (codestr)[0]", "opcode = (opcode)", "size = (-1)", "size = (-2)", "size = (0)", "size = (1)", "size = (100)", "size = (157)", "size = (19)", "size = (2)", "size = (20)", "size = (22)", "size = (221)", "size = (228)", "size = (23)", "size = (231)", "size = (24)", "size = (25)", "size = (255)", "size = (26)", "size = (27)", "size = (62)", "size = (63)", "size = (64)", "size = (65)", "size = (66)", "size = (8)", "size = (len_consts)", "size = (size)", "size = PyObject_Size((consts))", "size = PyObject_Size((newconst))", "size = PyObject_Size((v))", "size = PyObject_Size((w))", "v = (consts)", "v = (newconst)", "v = (objs)[0]", "v = (v)", "v = (w)", "w = (consts)", "w = (newconst)", "w = (objs)[1]", "w = (v)", "w = (w)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[0]", "size = PyObject_Size(newconst)", "v = objs[0]", "w = objs[1]", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return -1;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return -2;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 0;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 100;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 157;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 19;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 1;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 20;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 221;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 228;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 22;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 231;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 23;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 24;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 255;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 25;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 26;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 27;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 2;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 62;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 63;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 64;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 65;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 66;\n", "if (__is_neg(\"\", \"L196\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	2,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	3,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	4,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	5,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	6,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	7,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	8,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	9,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	10,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	11,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	12,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	13,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	14,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	15,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	16,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	17,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	18,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	19,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	20,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	21,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	22,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	23,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	24,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	25,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	26,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	27,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	28,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	29,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	30,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	31,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	32,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	33,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	34,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	35,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	36,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	37,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	38,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	39,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	40,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	41,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	42,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	43,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	44,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	45,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	46,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	47,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	48,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	49,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	50,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	51,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	52,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	53,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	54,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	55,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	56,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	57,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	58,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	59,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	60,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	61,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	62,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	63,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	64,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	65,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	66,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	67,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	68,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	69,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	70,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	71,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	72,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	73,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	74,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	75,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	76,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	77,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	78,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	79,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	80,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	81,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	82,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	83,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	84,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	85,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	86,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	87,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	88,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	89,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	90,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	91,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	92,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	93,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	94,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	95,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	96,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	97,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	98,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	99,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	100,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	101,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	102,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	103,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	104,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	105,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	106,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	107,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	108,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	109,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	110,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	111,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	112,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	113,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	114,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	115,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	116,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	117,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	118,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	119,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	120,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	121,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	122,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	123,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	124,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	125,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	126,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	127,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	128,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	129,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	130,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	131,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	132,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	133,
									"scores":	[-4.4170906883661329]
								}, {
									"case":	134,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	135,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	136,
									"scores":	[-5.2192747753661326, -6.8295684653661333, -6.8295684653661333, -7.038729978366133, -5.7839926783661326, -7.038729978366133, -5.7839926783661326, -7.1568143413661334, -5.8257666783661328, -6.8025577713661338, -6.8025577713661338]
								}, {
									"case":	137,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	138,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	139,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	140,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	141,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	142,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	143,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	144,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	145,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	146,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	147,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	148,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	149,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	150,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	151,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	152,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	153,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	154,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	155,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	156,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	157,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}, {
									"case":	158,
									"scores":	[-7.7419564053661327, -9.3522500953661343, -9.3522500953661343, -9.56141160836613, -8.3066743083661336, -9.56141160836613, -8.3066743083661336, -9.6794959713661335, -8.3484483083661338, -9.3252394013661331, -9.3252394013661331]
								}]
						}]
				}, {
					"line":	198,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	199,
							"begin_column":	11,
							"end_line":	199,
							"end_column":	11,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "len_consts = (-1)", "len_consts = (-2)", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (157)", "len_consts = (19)", "len_consts = (2)", "len_consts = (20)", "len_consts = (22)", "len_consts = (221)", "len_consts = (228)", "len_consts = (23)", "len_consts = (231)", "len_consts = (24)", "len_consts = (25)", "len_consts = (255)", "len_consts = (26)", "len_consts = (27)", "len_consts = (62)", "len_consts = (63)", "len_consts = (64)", "len_consts = (65)", "len_consts = (66)", "len_consts = (8)", "len_consts = (len_consts)", "len_consts = (size)", "opcode = (-1)", "opcode = (-2)", "opcode = (0)", "opcode = (1)", "opcode = (100)", "opcode = (157)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (221)", "opcode = (228)", "opcode = (23)", "opcode = (231)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (26)", "opcode = (27)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (8)", "opcode = (codestr)[0]", "opcode = (opcode)", "size = (-1)", "size = (-2)", "size = (0)", "size = (1)", "size = (100)", "size = (157)", "size = (19)", "size = (2)", "size = (20)", "size = (22)", "size = (221)", "size = (228)", "size = (23)", "size = (231)", "size = (24)", "size = (25)", "size = (255)", "size = (26)", "size = (27)", "size = (62)", "size = (63)", "size = (64)", "size = (65)", "size = (66)", "size = (8)", "size = (len_consts)", "size = (size)", "size = PyObject_Size((consts))", "size = PyObject_Size((newconst))", "size = PyObject_Size((v))", "size = PyObject_Size((w))", "v = (consts)", "v = (newconst)", "v = (objs)[0]", "v = (v)", "v = (w)", "w = (consts)", "w = (newconst)", "w = (objs)[1]", "w = (v)", "w = (w)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[0]", "size = PyObject_Size(newconst)", "v = objs[0]", "w = objs[1]", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return -1;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return -2;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 0;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 100;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 157;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 19;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 1;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 20;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 221;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 228;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 22;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 231;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 23;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 24;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 255;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 25;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 26;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 27;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 2;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 62;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 63;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 64;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 65;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 66;\n", "if (__is_neg(\"\", \"L199\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	2,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	3,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	4,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	5,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	6,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	7,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	8,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	9,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	10,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	11,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	12,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	13,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	14,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	15,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	16,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	17,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	18,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	19,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	20,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	21,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	22,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	23,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	24,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	25,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	26,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	27,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	28,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	29,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	30,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	31,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	32,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	33,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	34,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	35,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	36,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	37,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	38,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	39,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	40,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	41,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	42,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	43,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	44,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	45,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	46,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	47,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	48,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	49,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	50,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	51,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	52,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	53,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	54,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	55,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	56,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	57,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	58,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	59,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	60,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	61,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	62,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	63,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	64,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	65,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	66,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	67,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	68,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	69,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	70,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	71,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	72,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	73,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	74,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	75,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	76,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	77,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	78,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	79,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	80,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	81,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	82,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	83,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	84,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	85,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	86,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	87,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	88,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	89,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	90,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	91,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	92,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	93,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	94,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	95,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	96,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	97,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	98,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	99,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	100,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	101,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	102,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	103,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	104,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	105,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	106,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	107,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	108,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	109,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	110,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	111,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	112,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	113,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	114,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	115,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	116,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	117,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	118,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	119,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	120,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	121,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	122,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	123,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	124,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	125,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	126,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	127,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	128,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	129,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	130,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	131,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	132,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	133,
									"scores":	[-4.3968879810486134]
								}, {
									"case":	134,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	135,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	136,
									"scores":	[-5.5458660680486132, -7.1561597580486138, -7.1561597580486138, -7.8157761310486134, -6.5610388310486139, -7.3653212710486127, -6.1105839710486132, -7.4834056340486139, -6.1523579710486134, -7.1291490640486135, -7.1291490640486135]
								}, {
									"case":	137,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	138,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	139,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	140,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	141,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	142,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	143,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	144,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	145,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	146,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	147,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	148,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	149,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	150,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	151,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	152,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	153,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	154,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	155,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	156,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	157,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}, {
									"case":	158,
									"scores":	[-8.0685476980486133, -9.6788413880486139, -9.6788413880486139, -10.338457761048613, -9.083720461048614, -9.88800290104861, -8.6332656010486133, -10.006087264048613, -8.6750396010486135, -9.6518306940486127, -9.6518306940486127]
								}]
						}]
				}, {
					"line":	201,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], [], [], [], [], [], []],
							"begin_line":	202,
							"begin_column":	11,
							"end_line":	202,
							"end_column":	11,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "len_consts = (-1)", "len_consts = (-2)", "len_consts = (0)", "len_consts = (1)", "len_consts = (100)", "len_consts = (157)", "len_consts = (19)", "len_consts = (2)", "len_consts = (20)", "len_consts = (22)", "len_consts = (221)", "len_consts = (228)", "len_consts = (23)", "len_consts = (231)", "len_consts = (24)", "len_consts = (25)", "len_consts = (255)", "len_consts = (26)", "len_consts = (27)", "len_consts = (62)", "len_consts = (63)", "len_consts = (64)", "len_consts = (65)", "len_consts = (66)", "len_consts = (8)", "len_consts = (len_consts)", "len_consts = (size)", "opcode = (-1)", "opcode = (-2)", "opcode = (0)", "opcode = (1)", "opcode = (100)", "opcode = (157)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (221)", "opcode = (228)", "opcode = (23)", "opcode = (231)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (26)", "opcode = (27)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (8)", "opcode = (codestr)[0]", "opcode = (opcode)", "size = (-1)", "size = (-2)", "size = (0)", "size = (1)", "size = (100)", "size = (157)", "size = (19)", "size = (2)", "size = (20)", "size = (22)", "size = (221)", "size = (228)", "size = (23)", "size = (231)", "size = (24)", "size = (25)", "size = (255)", "size = (26)", "size = (27)", "size = (62)", "size = (63)", "size = (64)", "size = (65)", "size = (66)", "size = (8)", "size = (len_consts)", "size = (size)", "size = PyObject_Size((consts))", "size = PyObject_Size((newconst))", "size = PyObject_Size((v))", "size = PyObject_Size((w))", "v = (consts)", "v = (newconst)", "v = (objs)[0]", "v = (v)", "v = (w)", "w = (consts)", "w = (newconst)", "w = (objs)[1]", "w = (v)", "w = (w)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[0]", "size = PyObject_Size(newconst)", "v = objs[0]", "w = objs[1]", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return -1;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return -2;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 0;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 100;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 157;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 19;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 1;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 20;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 221;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 228;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 22;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 231;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 23;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 24;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 255;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 25;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 26;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 27;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 2;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 62;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 63;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 64;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 65;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 66;\n", "if (__is_neg(\"\", \"L202\", 11, &(newconst), sizeof (newconst), &(v), sizeof (v), &(w), sizeof (w), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(opcode), sizeof (opcode), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(size), sizeof (size), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(codestr), sizeof (codestr), &(objs), sizeof (objs)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.376685273731094]
								}, {
									"case":	2,
									"scores":	[-4.376685273731094]
								}, {
									"case":	3,
									"scores":	[-4.376685273731094]
								}, {
									"case":	4,
									"scores":	[-4.376685273731094]
								}, {
									"case":	5,
									"scores":	[-4.376685273731094]
								}, {
									"case":	6,
									"scores":	[-4.376685273731094]
								}, {
									"case":	7,
									"scores":	[-4.376685273731094]
								}, {
									"case":	8,
									"scores":	[-4.376685273731094]
								}, {
									"case":	9,
									"scores":	[-4.376685273731094]
								}, {
									"case":	10,
									"scores":	[-4.376685273731094]
								}, {
									"case":	11,
									"scores":	[-4.376685273731094]
								}, {
									"case":	12,
									"scores":	[-4.376685273731094]
								}, {
									"case":	13,
									"scores":	[-4.376685273731094]
								}, {
									"case":	14,
									"scores":	[-4.376685273731094]
								}, {
									"case":	15,
									"scores":	[-4.376685273731094]
								}, {
									"case":	16,
									"scores":	[-4.376685273731094]
								}, {
									"case":	17,
									"scores":	[-4.376685273731094]
								}, {
									"case":	18,
									"scores":	[-4.376685273731094]
								}, {
									"case":	19,
									"scores":	[-4.376685273731094]
								}, {
									"case":	20,
									"scores":	[-4.376685273731094]
								}, {
									"case":	21,
									"scores":	[-4.376685273731094]
								}, {
									"case":	22,
									"scores":	[-4.376685273731094]
								}, {
									"case":	23,
									"scores":	[-4.376685273731094]
								}, {
									"case":	24,
									"scores":	[-4.376685273731094]
								}, {
									"case":	25,
									"scores":	[-4.376685273731094]
								}, {
									"case":	26,
									"scores":	[-4.376685273731094]
								}, {
									"case":	27,
									"scores":	[-4.376685273731094]
								}, {
									"case":	28,
									"scores":	[-4.376685273731094]
								}, {
									"case":	29,
									"scores":	[-4.376685273731094]
								}, {
									"case":	30,
									"scores":	[-4.376685273731094]
								}, {
									"case":	31,
									"scores":	[-4.376685273731094]
								}, {
									"case":	32,
									"scores":	[-4.376685273731094]
								}, {
									"case":	33,
									"scores":	[-4.376685273731094]
								}, {
									"case":	34,
									"scores":	[-4.376685273731094]
								}, {
									"case":	35,
									"scores":	[-4.376685273731094]
								}, {
									"case":	36,
									"scores":	[-4.376685273731094]
								}, {
									"case":	37,
									"scores":	[-4.376685273731094]
								}, {
									"case":	38,
									"scores":	[-4.376685273731094]
								}, {
									"case":	39,
									"scores":	[-4.376685273731094]
								}, {
									"case":	40,
									"scores":	[-4.376685273731094]
								}, {
									"case":	41,
									"scores":	[-4.376685273731094]
								}, {
									"case":	42,
									"scores":	[-4.376685273731094]
								}, {
									"case":	43,
									"scores":	[-4.376685273731094]
								}, {
									"case":	44,
									"scores":	[-4.376685273731094]
								}, {
									"case":	45,
									"scores":	[-4.376685273731094]
								}, {
									"case":	46,
									"scores":	[-4.376685273731094]
								}, {
									"case":	47,
									"scores":	[-4.376685273731094]
								}, {
									"case":	48,
									"scores":	[-4.376685273731094]
								}, {
									"case":	49,
									"scores":	[-4.376685273731094]
								}, {
									"case":	50,
									"scores":	[-4.376685273731094]
								}, {
									"case":	51,
									"scores":	[-4.376685273731094]
								}, {
									"case":	52,
									"scores":	[-4.376685273731094]
								}, {
									"case":	53,
									"scores":	[-4.376685273731094]
								}, {
									"case":	54,
									"scores":	[-4.376685273731094]
								}, {
									"case":	55,
									"scores":	[-4.376685273731094]
								}, {
									"case":	56,
									"scores":	[-4.376685273731094]
								}, {
									"case":	57,
									"scores":	[-4.376685273731094]
								}, {
									"case":	58,
									"scores":	[-4.376685273731094]
								}, {
									"case":	59,
									"scores":	[-4.376685273731094]
								}, {
									"case":	60,
									"scores":	[-4.376685273731094]
								}, {
									"case":	61,
									"scores":	[-4.376685273731094]
								}, {
									"case":	62,
									"scores":	[-4.376685273731094]
								}, {
									"case":	63,
									"scores":	[-4.376685273731094]
								}, {
									"case":	64,
									"scores":	[-4.376685273731094]
								}, {
									"case":	65,
									"scores":	[-4.376685273731094]
								}, {
									"case":	66,
									"scores":	[-4.376685273731094]
								}, {
									"case":	67,
									"scores":	[-4.376685273731094]
								}, {
									"case":	68,
									"scores":	[-4.376685273731094]
								}, {
									"case":	69,
									"scores":	[-4.376685273731094]
								}, {
									"case":	70,
									"scores":	[-4.376685273731094]
								}, {
									"case":	71,
									"scores":	[-4.376685273731094]
								}, {
									"case":	72,
									"scores":	[-4.376685273731094]
								}, {
									"case":	73,
									"scores":	[-4.376685273731094]
								}, {
									"case":	74,
									"scores":	[-4.376685273731094]
								}, {
									"case":	75,
									"scores":	[-4.376685273731094]
								}, {
									"case":	76,
									"scores":	[-4.376685273731094]
								}, {
									"case":	77,
									"scores":	[-4.376685273731094]
								}, {
									"case":	78,
									"scores":	[-4.376685273731094]
								}, {
									"case":	79,
									"scores":	[-4.376685273731094]
								}, {
									"case":	80,
									"scores":	[-4.376685273731094]
								}, {
									"case":	81,
									"scores":	[-4.376685273731094]
								}, {
									"case":	82,
									"scores":	[-4.376685273731094]
								}, {
									"case":	83,
									"scores":	[-4.376685273731094]
								}, {
									"case":	84,
									"scores":	[-4.376685273731094]
								}, {
									"case":	85,
									"scores":	[-4.376685273731094]
								}, {
									"case":	86,
									"scores":	[-4.376685273731094]
								}, {
									"case":	87,
									"scores":	[-4.376685273731094]
								}, {
									"case":	88,
									"scores":	[-4.376685273731094]
								}, {
									"case":	89,
									"scores":	[-4.376685273731094]
								}, {
									"case":	90,
									"scores":	[-4.376685273731094]
								}, {
									"case":	91,
									"scores":	[-4.376685273731094]
								}, {
									"case":	92,
									"scores":	[-4.376685273731094]
								}, {
									"case":	93,
									"scores":	[-4.376685273731094]
								}, {
									"case":	94,
									"scores":	[-4.376685273731094]
								}, {
									"case":	95,
									"scores":	[-4.376685273731094]
								}, {
									"case":	96,
									"scores":	[-4.376685273731094]
								}, {
									"case":	97,
									"scores":	[-4.376685273731094]
								}, {
									"case":	98,
									"scores":	[-4.376685273731094]
								}, {
									"case":	99,
									"scores":	[-4.376685273731094]
								}, {
									"case":	100,
									"scores":	[-4.376685273731094]
								}, {
									"case":	101,
									"scores":	[-4.376685273731094]
								}, {
									"case":	102,
									"scores":	[-4.376685273731094]
								}, {
									"case":	103,
									"scores":	[-4.376685273731094]
								}, {
									"case":	104,
									"scores":	[-4.376685273731094]
								}, {
									"case":	105,
									"scores":	[-4.376685273731094]
								}, {
									"case":	106,
									"scores":	[-4.376685273731094]
								}, {
									"case":	107,
									"scores":	[-4.376685273731094]
								}, {
									"case":	108,
									"scores":	[-4.376685273731094]
								}, {
									"case":	109,
									"scores":	[-4.376685273731094]
								}, {
									"case":	110,
									"scores":	[-4.376685273731094]
								}, {
									"case":	111,
									"scores":	[-4.376685273731094]
								}, {
									"case":	112,
									"scores":	[-4.376685273731094]
								}, {
									"case":	113,
									"scores":	[-4.376685273731094]
								}, {
									"case":	114,
									"scores":	[-4.376685273731094]
								}, {
									"case":	115,
									"scores":	[-4.376685273731094]
								}, {
									"case":	116,
									"scores":	[-4.376685273731094]
								}, {
									"case":	117,
									"scores":	[-4.376685273731094]
								}, {
									"case":	118,
									"scores":	[-4.376685273731094]
								}, {
									"case":	119,
									"scores":	[-4.376685273731094]
								}, {
									"case":	120,
									"scores":	[-4.376685273731094]
								}, {
									"case":	121,
									"scores":	[-4.376685273731094]
								}, {
									"case":	122,
									"scores":	[-4.376685273731094]
								}, {
									"case":	123,
									"scores":	[-4.376685273731094]
								}, {
									"case":	124,
									"scores":	[-4.376685273731094]
								}, {
									"case":	125,
									"scores":	[-4.376685273731094]
								}, {
									"case":	126,
									"scores":	[-4.376685273731094]
								}, {
									"case":	127,
									"scores":	[-4.376685273731094]
								}, {
									"case":	128,
									"scores":	[-4.376685273731094]
								}, {
									"case":	129,
									"scores":	[-4.376685273731094]
								}, {
									"case":	130,
									"scores":	[-4.376685273731094]
								}, {
									"case":	131,
									"scores":	[-4.376685273731094]
								}, {
									"case":	132,
									"scores":	[-4.376685273731094]
								}, {
									"case":	133,
									"scores":	[-4.376685273731094]
								}, {
									"case":	134,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	135,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	136,
									"scores":	[-4.9519564237310938, -6.6817061837310945, -6.6817061837310945, -7.7935999037310939, -6.5388626037310944, -7.3431450437310932, -6.0884077437310937, -7.4612294067310945, -6.1301817437310939, -7.106972836731094, -7.106972836731094]
								}, {
									"case":	137,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	138,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	139,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	140,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	141,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	142,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	143,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	144,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	145,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	146,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	147,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	148,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	149,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	150,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	151,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	152,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	153,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	154,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	155,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	156,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	157,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}, {
									"case":	158,
									"scores":	[-7.4746380537310939, -9.2043878137310937, -9.2043878137310937, -10.316281533731093, -9.0615442337310945, -9.86582667373109, -8.6110893737310938, -9.9839110367310937, -8.652863373731094, -9.6296544667310933, -9.6296544667310933]
								}]
						}]
				}, {
					"line":	257,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	258,
							"begin_column":	11,
							"end_line":	258,
							"end_column":	11,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (10)", "codestr[0] = (100)", "codestr[0] = (11)", "codestr[0] = (15)", "codestr[0] = (2)", "codestr[0] = (247)", "codestr[0] = (248)", "codestr[0] = (255)", "codestr[0] = (278)", "codestr[0] = (281)", "codestr[0] = (3)", "codestr[0] = (8)", "codestr[0] = (9)", "codestr[1] = (0)", "codestr[1] = (1)", "codestr[1] = (10)", "codestr[1] = (100)", "codestr[1] = (11)", "codestr[1] = (15)", "codestr[1] = (2)", "codestr[1] = (247)", "codestr[1] = (248)", "codestr[1] = (255)", "codestr[1] = (278)", "codestr[1] = (281)", "codestr[1] = (3)", "codestr[1] = (8)", "codestr[1] = (9)", "len_consts = (0)", "len_consts = (1)", "len_consts = (10)", "len_consts = (100)", "len_consts = (11)", "len_consts = (15)", "len_consts = (2)", "len_consts = (247)", "len_consts = (248)", "len_consts = (255)", "len_consts = (278)", "len_consts = (281)", "len_consts = (3)", "len_consts = (8)", "len_consts = (9)", "len_consts = (len_consts)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (11)", "opcode = (15)", "opcode = (2)", "opcode = (247)", "opcode = (248)", "opcode = (255)", "opcode = (278)", "opcode = (281)", "opcode = (3)", "opcode = (8)", "opcode = (9)", "opcode = (codestr)[3]", "opcode = (opcode)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[0] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[0] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 9", "codestr[1] = 100", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[3]", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 0;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 100;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 10;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 11;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 15;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 1;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 247;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 248;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 255;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 278;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 281;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 2;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 3;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 8;\n", "if (__is_neg(\"\", \"L258\", 8, &(v), sizeof (v), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(consts), sizeof (consts), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(len_consts), sizeof (len_consts)))\n    return 9;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.37675329816552]
								}, {
									"case":	2,
									"scores":	[-6.37675329816552]
								}, {
									"case":	3,
									"scores":	[-6.37675329816552]
								}, {
									"case":	4,
									"scores":	[-6.37675329816552]
								}, {
									"case":	5,
									"scores":	[-6.37675329816552]
								}, {
									"case":	6,
									"scores":	[-6.37675329816552]
								}, {
									"case":	7,
									"scores":	[-6.37675329816552]
								}, {
									"case":	8,
									"scores":	[-6.37675329816552]
								}, {
									"case":	9,
									"scores":	[-6.37675329816552]
								}, {
									"case":	10,
									"scores":	[-6.37675329816552]
								}, {
									"case":	11,
									"scores":	[-6.37675329816552]
								}, {
									"case":	12,
									"scores":	[-6.37675329816552]
								}, {
									"case":	13,
									"scores":	[-6.37675329816552]
								}, {
									"case":	14,
									"scores":	[-6.37675329816552]
								}, {
									"case":	15,
									"scores":	[-6.37675329816552]
								}, {
									"case":	16,
									"scores":	[-6.37675329816552]
								}, {
									"case":	17,
									"scores":	[-6.37675329816552]
								}, {
									"case":	18,
									"scores":	[-6.37675329816552]
								}, {
									"case":	19,
									"scores":	[-6.37675329816552]
								}, {
									"case":	20,
									"scores":	[-6.37675329816552]
								}, {
									"case":	21,
									"scores":	[-6.37675329816552]
								}, {
									"case":	22,
									"scores":	[-6.37675329816552]
								}, {
									"case":	23,
									"scores":	[-6.37675329816552]
								}, {
									"case":	24,
									"scores":	[-6.37675329816552]
								}, {
									"case":	25,
									"scores":	[-6.37675329816552]
								}, {
									"case":	26,
									"scores":	[-6.37675329816552]
								}, {
									"case":	27,
									"scores":	[-6.37675329816552]
								}, {
									"case":	28,
									"scores":	[-6.37675329816552]
								}, {
									"case":	29,
									"scores":	[-6.37675329816552]
								}, {
									"case":	30,
									"scores":	[-6.37675329816552]
								}, {
									"case":	31,
									"scores":	[-6.37675329816552]
								}, {
									"case":	32,
									"scores":	[-6.37675329816552]
								}, {
									"case":	33,
									"scores":	[-6.37675329816552]
								}, {
									"case":	34,
									"scores":	[-6.37675329816552]
								}, {
									"case":	35,
									"scores":	[-6.37675329816552]
								}, {
									"case":	36,
									"scores":	[-6.37675329816552]
								}, {
									"case":	37,
									"scores":	[-6.37675329816552]
								}, {
									"case":	38,
									"scores":	[-6.37675329816552]
								}, {
									"case":	39,
									"scores":	[-6.37675329816552]
								}, {
									"case":	40,
									"scores":	[-6.37675329816552]
								}, {
									"case":	41,
									"scores":	[-6.37675329816552]
								}, {
									"case":	42,
									"scores":	[-6.37675329816552]
								}, {
									"case":	43,
									"scores":	[-6.37675329816552]
								}, {
									"case":	44,
									"scores":	[-6.37675329816552]
								}, {
									"case":	45,
									"scores":	[-6.37675329816552]
								}, {
									"case":	46,
									"scores":	[-6.37675329816552]
								}, {
									"case":	47,
									"scores":	[-6.37675329816552]
								}, {
									"case":	48,
									"scores":	[-6.37675329816552]
								}, {
									"case":	49,
									"scores":	[-6.37675329816552]
								}, {
									"case":	50,
									"scores":	[-6.37675329816552]
								}, {
									"case":	51,
									"scores":	[-6.37675329816552]
								}, {
									"case":	52,
									"scores":	[-6.37675329816552]
								}, {
									"case":	53,
									"scores":	[-6.37675329816552]
								}, {
									"case":	54,
									"scores":	[-6.37675329816552]
								}, {
									"case":	55,
									"scores":	[-6.37675329816552]
								}, {
									"case":	56,
									"scores":	[-6.37675329816552]
								}, {
									"case":	57,
									"scores":	[-6.37675329816552]
								}, {
									"case":	58,
									"scores":	[-6.37675329816552]
								}, {
									"case":	59,
									"scores":	[-6.37675329816552]
								}, {
									"case":	60,
									"scores":	[-6.37675329816552]
								}, {
									"case":	61,
									"scores":	[-6.37675329816552]
								}, {
									"case":	62,
									"scores":	[-6.37675329816552]
								}, {
									"case":	63,
									"scores":	[-6.37675329816552]
								}, {
									"case":	64,
									"scores":	[-6.37675329816552]
								}, {
									"case":	65,
									"scores":	[-6.37675329816552]
								}, {
									"case":	66,
									"scores":	[-6.37675329816552]
								}, {
									"case":	67,
									"scores":	[-6.37675329816552]
								}, {
									"case":	68,
									"scores":	[-6.37675329816552]
								}, {
									"case":	69,
									"scores":	[-6.37675329816552]
								}, {
									"case":	70,
									"scores":	[-6.37675329816552]
								}, {
									"case":	71,
									"scores":	[-6.37675329816552]
								}, {
									"case":	72,
									"scores":	[-6.37675329816552]
								}, {
									"case":	73,
									"scores":	[-6.37675329816552]
								}, {
									"case":	74,
									"scores":	[-6.37675329816552]
								}, {
									"case":	75,
									"scores":	[-6.37675329816552]
								}, {
									"case":	76,
									"scores":	[-6.37675329816552]
								}, {
									"case":	77,
									"scores":	[-6.37675329816552]
								}, {
									"case":	78,
									"scores":	[-6.37675329816552]
								}, {
									"case":	79,
									"scores":	[-6.37675329816552]
								}, {
									"case":	80,
									"scores":	[-6.37675329816552]
								}, {
									"case":	81,
									"scores":	[-6.37675329816552]
								}, {
									"case":	82,
									"scores":	[-6.37675329816552]
								}, {
									"case":	83,
									"scores":	[-6.37675329816552]
								}, {
									"case":	84,
									"scores":	[-6.37675329816552]
								}, {
									"case":	85,
									"scores":	[-6.37675329816552]
								}, {
									"case":	86,
									"scores":	[-6.37675329816552]
								}, {
									"case":	87,
									"scores":	[-6.37675329816552]
								}, {
									"case":	88,
									"scores":	[-6.37675329816552]
								}, {
									"case":	89,
									"scores":	[-6.37675329816552]
								}, {
									"case":	90,
									"scores":	[-6.37675329816552]
								}, {
									"case":	91,
									"scores":	[-6.37675329816552]
								}, {
									"case":	92,
									"scores":	[-6.37675329816552]
								}, {
									"case":	93,
									"scores":	[-6.37675329816552]
								}, {
									"case":	94,
									"scores":	[-6.37675329816552]
								}, {
									"case":	95,
									"scores":	[-6.37675329816552]
								}, {
									"case":	96,
									"scores":	[-6.37675329816552]
								}, {
									"case":	97,
									"scores":	[-6.37675329816552]
								}, {
									"case":	98,
									"scores":	[-6.37675329816552]
								}, {
									"case":	99,
									"scores":	[-6.37675329816552]
								}, {
									"case":	100,
									"scores":	[-6.37675329816552]
								}, {
									"case":	101,
									"scores":	[-6.37675329816552]
								}, {
									"case":	102,
									"scores":	[-9.89650445816552, -7.52573138516552, -9.10144814816552, -9.79564144816552, -9.10901438116552, -9.46327095116552, -9.34518658816552, -8.13222328816552]
								}, {
									"case":	103,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	104,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	105,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	106,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	107,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	108,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	109,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	110,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	111,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	112,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	113,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	114,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	115,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}, {
									"case":	116,
									"scores":	[-12.419186088165521, -10.04841301516552, -11.624129778165521, -12.31832307816552, -11.63169601116552, -11.98595258116552, -11.867868218165519, -10.654904918165521]
								}]
						}]
				}, {
					"line":	270,
					"switches":	[{
							"switch":	19,
							"types":	[[], [], [], [], [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	271,
							"begin_column":	11,
							"end_line":	271,
							"end_column":	11,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (10)", "codestr[0] = (100)", "codestr[0] = (11)", "codestr[0] = (15)", "codestr[0] = (2)", "codestr[0] = (247)", "codestr[0] = (248)", "codestr[0] = (255)", "codestr[0] = (278)", "codestr[0] = (281)", "codestr[0] = (3)", "codestr[0] = (8)", "codestr[0] = (9)", "codestr[1] = (0)", "codestr[1] = (1)", "codestr[1] = (10)", "codestr[1] = (100)", "codestr[1] = (11)", "codestr[1] = (15)", "codestr[1] = (2)", "codestr[1] = (247)", "codestr[1] = (248)", "codestr[1] = (255)", "codestr[1] = (278)", "codestr[1] = (281)", "codestr[1] = (3)", "codestr[1] = (8)", "codestr[1] = (9)", "len_consts = (0)", "len_consts = (1)", "len_consts = (10)", "len_consts = (100)", "len_consts = (11)", "len_consts = (15)", "len_consts = (2)", "len_consts = (247)", "len_consts = (248)", "len_consts = (255)", "len_consts = (278)", "len_consts = (281)", "len_consts = (3)", "len_consts = (8)", "len_consts = (9)", "len_consts = (len_consts)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (11)", "opcode = (15)", "opcode = (2)", "opcode = (247)", "opcode = (248)", "opcode = (255)", "opcode = (278)", "opcode = (281)", "opcode = (3)", "opcode = (8)", "opcode = (9)", "opcode = (codestr)[3]", "opcode = (opcode)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[0] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[0] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 9", "codestr[1] = 100", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[3]", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 0;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 100;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 10;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 11;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 15;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 1;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 247;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 248;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 255;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 278;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 281;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 2;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 3;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 8;\n", "if (__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 9;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	22,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	23,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	24,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	25,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	26,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	27,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	28,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	29,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	30,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	31,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	32,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	33,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	34,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	35,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	36,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	37,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	38,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	39,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	40,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	41,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	42,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	43,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	44,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	45,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	46,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	47,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	48,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	49,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	50,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	51,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	52,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	53,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	54,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	55,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	56,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	57,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	58,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	59,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	60,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	61,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	62,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	63,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	64,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	65,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	66,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	67,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	68,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	69,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	70,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	71,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	72,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	73,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	74,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	75,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	76,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	77,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	78,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	79,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	80,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	81,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	82,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	83,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	84,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	85,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	86,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	87,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	88,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	89,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	90,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	91,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	92,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	93,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	94,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	95,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	96,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	97,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	98,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	99,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	100,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	101,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	102,
									"scores":	[-6.3377802386982243, -6.255929218698224, -6.4558646016982237, -5.1248169386982241, -5.643586938698224, -6.3377802386982243, -6.4558646016982237, -6.1016080316982242, -6.4046496386982241, -6.4046496386982241, -5.7923073586982241, -6.4046496386982241]
								}, {
									"case":	103,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	104,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	105,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	106,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	107,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	108,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	109,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	110,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	111,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	112,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	113,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	114,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	115,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}, {
									"case":	116,
									"scores":	[-8.8604618686982235, -8.7786108486982233, -8.9785462316982247, -7.6474985686982233, -8.1662685686982233, -8.8604618686982235, -8.9785462316982247, -8.6242896616982243, -8.9273312686982234, -8.9273312686982234, -8.3149889886982233, -8.9273312686982234]
								}]
						}, {
							"switch":	20,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	271,
							"begin_column":	13,
							"end_line":	271,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L271\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    PyErr_Clear();\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0418093886982245, -6.0558041686982236, -6.2966795686982238, -4.9477883286982234, -5.1191781686982241, -6.0418093886982245, -6.2966795686982238, -5.7820195686982236, -6.2980211686982237, -6.2980211686982237, -5.3613951686982233, -6.2980211686982237]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}]
						}]
				}, {
					"line":	269,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	270,
							"begin_column":	7,
							"end_line":	270,
							"end_column":	7,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (10)", "codestr[0] = (100)", "codestr[0] = (11)", "codestr[0] = (15)", "codestr[0] = (2)", "codestr[0] = (247)", "codestr[0] = (248)", "codestr[0] = (255)", "codestr[0] = (278)", "codestr[0] = (281)", "codestr[0] = (3)", "codestr[0] = (8)", "codestr[0] = (9)", "codestr[1] = (0)", "codestr[1] = (1)", "codestr[1] = (10)", "codestr[1] = (100)", "codestr[1] = (11)", "codestr[1] = (15)", "codestr[1] = (2)", "codestr[1] = (247)", "codestr[1] = (248)", "codestr[1] = (255)", "codestr[1] = (278)", "codestr[1] = (281)", "codestr[1] = (3)", "codestr[1] = (8)", "codestr[1] = (9)", "len_consts = (0)", "len_consts = (1)", "len_consts = (10)", "len_consts = (100)", "len_consts = (11)", "len_consts = (15)", "len_consts = (2)", "len_consts = (247)", "len_consts = (248)", "len_consts = (255)", "len_consts = (278)", "len_consts = (281)", "len_consts = (3)", "len_consts = (8)", "len_consts = (9)", "len_consts = (len_consts)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (11)", "opcode = (15)", "opcode = (2)", "opcode = (247)", "opcode = (248)", "opcode = (255)", "opcode = (278)", "opcode = (281)", "opcode = (3)", "opcode = (8)", "opcode = (9)", "opcode = (codestr)[3]", "opcode = (opcode)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[0] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[0] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 9", "codestr[1] = 100", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[3]", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 0;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 100;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 10;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 11;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 15;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 1;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 247;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 248;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 255;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 278;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 281;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 2;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 3;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 8;\n", "if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    return 9;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.013036542015743]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}, {
									"case":	36,
									"scores":	[-4.013036542015743]
								}, {
									"case":	37,
									"scores":	[-4.013036542015743]
								}, {
									"case":	38,
									"scores":	[-4.013036542015743]
								}, {
									"case":	39,
									"scores":	[-4.013036542015743]
								}, {
									"case":	40,
									"scores":	[-4.013036542015743]
								}, {
									"case":	41,
									"scores":	[-4.013036542015743]
								}, {
									"case":	42,
									"scores":	[-4.013036542015743]
								}, {
									"case":	43,
									"scores":	[-4.013036542015743]
								}, {
									"case":	44,
									"scores":	[-4.013036542015743]
								}, {
									"case":	45,
									"scores":	[-4.013036542015743]
								}, {
									"case":	46,
									"scores":	[-4.013036542015743]
								}, {
									"case":	47,
									"scores":	[-4.013036542015743]
								}, {
									"case":	48,
									"scores":	[-4.013036542015743]
								}, {
									"case":	49,
									"scores":	[-4.013036542015743]
								}, {
									"case":	50,
									"scores":	[-4.013036542015743]
								}, {
									"case":	51,
									"scores":	[-4.013036542015743]
								}, {
									"case":	52,
									"scores":	[-4.013036542015743]
								}, {
									"case":	53,
									"scores":	[-4.013036542015743]
								}, {
									"case":	54,
									"scores":	[-4.013036542015743]
								}, {
									"case":	55,
									"scores":	[-4.013036542015743]
								}, {
									"case":	56,
									"scores":	[-4.013036542015743]
								}, {
									"case":	57,
									"scores":	[-4.013036542015743]
								}, {
									"case":	58,
									"scores":	[-4.013036542015743]
								}, {
									"case":	59,
									"scores":	[-4.013036542015743]
								}, {
									"case":	60,
									"scores":	[-4.013036542015743]
								}, {
									"case":	61,
									"scores":	[-4.013036542015743]
								}, {
									"case":	62,
									"scores":	[-4.013036542015743]
								}, {
									"case":	63,
									"scores":	[-4.013036542015743]
								}, {
									"case":	64,
									"scores":	[-4.013036542015743]
								}, {
									"case":	65,
									"scores":	[-4.013036542015743]
								}, {
									"case":	66,
									"scores":	[-4.013036542015743]
								}, {
									"case":	67,
									"scores":	[-4.013036542015743]
								}, {
									"case":	68,
									"scores":	[-4.013036542015743]
								}, {
									"case":	69,
									"scores":	[-4.013036542015743]
								}, {
									"case":	70,
									"scores":	[-4.013036542015743]
								}, {
									"case":	71,
									"scores":	[-4.013036542015743]
								}, {
									"case":	72,
									"scores":	[-4.013036542015743]
								}, {
									"case":	73,
									"scores":	[-4.013036542015743]
								}, {
									"case":	74,
									"scores":	[-4.013036542015743]
								}, {
									"case":	75,
									"scores":	[-4.013036542015743]
								}, {
									"case":	76,
									"scores":	[-4.013036542015743]
								}, {
									"case":	77,
									"scores":	[-4.013036542015743]
								}, {
									"case":	78,
									"scores":	[-4.013036542015743]
								}, {
									"case":	79,
									"scores":	[-4.013036542015743]
								}, {
									"case":	80,
									"scores":	[-4.013036542015743]
								}, {
									"case":	81,
									"scores":	[-4.013036542015743]
								}, {
									"case":	82,
									"scores":	[-4.013036542015743]
								}, {
									"case":	83,
									"scores":	[-4.013036542015743]
								}, {
									"case":	84,
									"scores":	[-4.013036542015743]
								}, {
									"case":	85,
									"scores":	[-4.013036542015743]
								}, {
									"case":	86,
									"scores":	[-4.013036542015743]
								}, {
									"case":	87,
									"scores":	[-4.013036542015743]
								}, {
									"case":	88,
									"scores":	[-4.013036542015743]
								}, {
									"case":	89,
									"scores":	[-4.013036542015743]
								}, {
									"case":	90,
									"scores":	[-4.013036542015743]
								}, {
									"case":	91,
									"scores":	[-4.013036542015743]
								}, {
									"case":	92,
									"scores":	[-4.013036542015743]
								}, {
									"case":	93,
									"scores":	[-4.013036542015743]
								}, {
									"case":	94,
									"scores":	[-4.013036542015743]
								}, {
									"case":	95,
									"scores":	[-4.013036542015743]
								}, {
									"case":	96,
									"scores":	[-4.013036542015743]
								}, {
									"case":	97,
									"scores":	[-4.013036542015743]
								}, {
									"case":	98,
									"scores":	[-4.013036542015743]
								}, {
									"case":	99,
									"scores":	[-4.013036542015743]
								}, {
									"case":	100,
									"scores":	[-4.013036542015743]
								}, {
									"case":	101,
									"scores":	[-4.013036542015743]
								}, {
									"case":	102,
									"scores":	[-7.0759473060157436, -7.901737926015743, -7.289395646015743, -8.1016733090157445, -6.770625646015743, -7.9835889460157432, -8.1016733090157445, -7.7474167390157431, -8.0504583460157431, -8.0504583460157431, -7.438116066015743, -8.0504583460157431]
								}, {
									"case":	103,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	104,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	105,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	106,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	107,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	108,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	109,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	110,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	111,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	112,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	113,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	114,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	115,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}, {
									"case":	116,
									"scores":	[-9.5986289360157429, -10.424419556015742, -9.81207727601574, -10.624354939015742, -9.29330727601574, -10.506270576015742, -10.624354939015742, -10.270098369015741, -10.573139976015742, -10.573139976015742, -9.96079769601574, -10.573139976015742]
								}]
						}, {
							"switch":	18,
							"types":	[[23], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], []],
							"begin_line":	270,
							"begin_column":	9,
							"end_line":	271,
							"end_column":	25,
							"patch_codes":	["if (__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    PyErr_Clear();\n", "if ((!PyErr_ExceptionMatches(PyExc_KeyboardInterrupt)) || __is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    PyErr_Clear();\n", "if (!PyAST_Check(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyArg_ValidateKeywordArguments(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyCFunction_GetFlags(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyCallable_Check(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyCodec_Register(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyImport_ImportFrozenModuleObject(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyList_Reverse(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyList_Sort(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyMapping_Check(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyNumber_Check(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyObject_AsFileDescriptor(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyObject_CheckReadBuffer(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyObject_IsTrue(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyObject_Not(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PySequence_Check(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PySet_Clear(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!PyUnicodeUCS2_IsIdentifier(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!Py_ReprEnter(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!_PyDict_HasOnlyStringKeys(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if (!_PyLong_Sign(PyExc_KeyboardInterrupt))\n    PyErr_Clear();\n", "if ((!PyErr_ExceptionMatches(PyExc_KeyboardInterrupt)) && !__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    PyErr_Clear();\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.2595112504281456, -4.9882400304281456, -4.0516140304281461, -5.2291154304281457, -3.8802241904281458, -4.9742452504281456, -5.2291154304281457, -4.7144554304281456, -5.2304570304281457, -5.2304570304281457, -4.2938310304281462, -5.2304570304281457]
								}, {
									"case":	2,
									"scores":	[-5.547287050428146, -6.2760158304281459, -5.3393898304281464, -6.5168912304281461, -5.1679999904281457, -6.2620210504281459, -6.5168912304281461, -6.002231230428146, -6.5182328304281461, -6.5182328304281461, -5.5816068304281456, -6.5182328304281461]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-5.547287050428146, -6.2760158304281459, -5.3393898304281464, -6.5168912304281461, -5.1679999904281457, -6.2620210504281459, -6.5168912304281461, -6.002231230428146, -6.5182328304281461, -6.5182328304281461, -5.5816068304281456, -6.5182328304281461]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	270,
							"begin_column":	9,
							"end_line":	271,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)))\n    if (!PyErr_ExceptionMatches(PyExc_KeyboardInterrupt))\n        PyErr_Clear();\n", "if (!__is_neg(\"\", \"L270\", 12, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(opcode), sizeof (opcode), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type)) && (!PyErr_ExceptionMatches(PyExc_KeyboardInterrupt)))\n    PyErr_Clear();\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.0946402430157427, -6.8233690230157427, -5.8867430230157431, -7.064244423015742, -5.7153531830157425, -6.8093742430157427, -7.064244423015742, -6.5495844230157427, -7.0655860230157428, -7.0655860230157428, -6.1289600230157433, -7.0655860230157428]
								}, {
									"case":	2,
									"scores":	[-7.1829975430157429, -7.911726323015742, -6.9751003230157433, -8.15260172301574, -6.8037104830157435, -7.8977315430157429, -8.15260172301574, -7.6379417230157429, -8.15394332301574, -8.15394332301574, -7.2173173230157435, -8.15394332301574]
								}]
						}]
				}, {
					"line":	271,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], [1, 2, 3, 4, 5, 6, 7, 8, 9], [], [], [], [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], [], [], [], [], [], []],
							"begin_line":	272,
							"begin_column":	7,
							"end_line":	272,
							"end_column":	7,
							"patch_codes":	["memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyVarObject *)(consts))->ob_base, 0, sizeof (*(&((PyVarObject *)(consts))->ob_base)))", "memset(&((PyVarObject *)(consts))->ob_size, 0, sizeof (*(&((PyVarObject *)(consts))->ob_size)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (10)", "codestr[0] = (100)", "codestr[0] = (11)", "codestr[0] = (15)", "codestr[0] = (2)", "codestr[0] = (247)", "codestr[0] = (248)", "codestr[0] = (255)", "codestr[0] = (278)", "codestr[0] = (281)", "codestr[0] = (3)", "codestr[0] = (8)", "codestr[0] = (9)", "codestr[1] = (0)", "codestr[1] = (1)", "codestr[1] = (10)", "codestr[1] = (100)", "codestr[1] = (11)", "codestr[1] = (15)", "codestr[1] = (2)", "codestr[1] = (247)", "codestr[1] = (248)", "codestr[1] = (255)", "codestr[1] = (278)", "codestr[1] = (281)", "codestr[1] = (3)", "codestr[1] = (8)", "codestr[1] = (9)", "len_consts = (0)", "len_consts = (1)", "len_consts = (10)", "len_consts = (100)", "len_consts = (11)", "len_consts = (15)", "len_consts = (2)", "len_consts = (247)", "len_consts = (248)", "len_consts = (255)", "len_consts = (278)", "len_consts = (281)", "len_consts = (3)", "len_consts = (8)", "len_consts = (9)", "len_consts = (len_consts)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (11)", "opcode = (15)", "opcode = (2)", "opcode = (247)", "opcode = (248)", "opcode = (255)", "opcode = (278)", "opcode = (281)", "opcode = (3)", "opcode = (8)", "opcode = (9)", "opcode = (codestr)[3]", "opcode = (opcode)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[0] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[0] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 9", "codestr[1] = 100", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[3]", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 0;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 100;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 10;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 11;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 15;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 1;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 247;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 248;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 255;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 278;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 281;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 2;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 3;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 8;\n", "if (__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 9;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	2,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	3,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	4,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	5,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	6,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	7,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	8,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	9,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	10,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	11,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	12,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	13,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	14,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	15,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	16,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	17,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	18,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	19,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	20,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	21,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	22,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	23,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	24,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	25,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	26,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	27,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	28,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	29,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	30,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	31,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	32,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	33,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	34,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	35,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	36,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	37,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	38,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	39,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	40,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	41,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	42,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	43,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	44,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	45,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	46,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	47,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	48,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	49,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	50,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	51,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	52,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	53,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	54,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	55,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	56,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	57,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	58,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	59,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	60,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	61,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	62,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	63,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	64,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	65,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	66,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	67,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	68,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	69,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	70,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	71,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	72,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	73,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	74,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	75,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	76,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	77,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	78,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	79,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	80,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	81,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	82,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	83,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	84,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	85,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	86,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	87,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	88,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	89,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	90,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	91,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	92,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	93,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	94,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	95,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	96,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	97,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	98,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	99,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	100,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	101,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	102,
									"scores":	[-7.7038780573807051, -7.242508877380704, -7.4424442603807046, -6.1113965973807041, -6.630166597380704, -7.3243598973807043, -7.0881876903807051, -7.4424442603807046]
								}, {
									"case":	103,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	104,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	105,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	106,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	107,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	108,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	109,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	110,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	111,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	112,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	113,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	114,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	115,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}, {
									"case":	116,
									"scores":	[-10.226559687380705, -9.765190507380705, -9.9651258903807047, -8.6340782273807051, -9.152848227380705, -9.8470415273807035, -9.6108693203807043, -9.9651258903807047]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	272,
							"begin_column":	9,
							"end_line":	272,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L272\", 8, &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(newconst), sizeof (newconst), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(codestr), sizeof (codestr), &(v), sizeof (v)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.360427624380705, -6.1902349743807044, -6.4311103743807045, -5.0822191343807042, -5.253608974380704, -6.1762401943807035, -5.9164503743807044, -6.4311103743807045]
								}]
						}]
				}, {
					"line":	268,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [], [], [], [], [], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [], [], []],
							"begin_line":	269,
							"begin_column":	3,
							"end_line":	269,
							"end_column":	3,
							"patch_codes":	["PyMem_Free((codestr))", "codestr[0] = (0)", "codestr[0] = (1)", "codestr[0] = (10)", "codestr[0] = (100)", "codestr[0] = (11)", "codestr[0] = (15)", "codestr[0] = (2)", "codestr[0] = (247)", "codestr[0] = (248)", "codestr[0] = (255)", "codestr[0] = (278)", "codestr[0] = (281)", "codestr[0] = (3)", "codestr[0] = (8)", "codestr[0] = (9)", "codestr[1] = (0)", "codestr[1] = (1)", "codestr[1] = (10)", "codestr[1] = (100)", "codestr[1] = (11)", "codestr[1] = (15)", "codestr[1] = (2)", "codestr[1] = (247)", "codestr[1] = (248)", "codestr[1] = (255)", "codestr[1] = (278)", "codestr[1] = (281)", "codestr[1] = (3)", "codestr[1] = (8)", "codestr[1] = (9)", "len_consts = (0)", "len_consts = (1)", "len_consts = (10)", "len_consts = (100)", "len_consts = (11)", "len_consts = (15)", "len_consts = (2)", "len_consts = (247)", "len_consts = (248)", "len_consts = (255)", "len_consts = (278)", "len_consts = (281)", "len_consts = (3)", "len_consts = (8)", "len_consts = (9)", "len_consts = (len_consts)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (11)", "opcode = (15)", "opcode = (2)", "opcode = (247)", "opcode = (248)", "opcode = (255)", "opcode = (278)", "opcode = (281)", "opcode = (3)", "opcode = (8)", "opcode = (9)", "opcode = (codestr)[3]", "opcode = (opcode)", "((void)sizeof ((((((PyObject *)(consts))->ob_type) == &PyList_Type)) ? 1 : 0) , __extension__ ({\n    if (((((PyObject *)(consts))->ob_type) == &PyList_Type))\n        ;\n    else\n        __assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[0] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[0] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "codestr[0] = 9", "codestr[1] = 100", "len_consts = (((PyVarObject *)(consts))->ob_size)", "opcode = codestr[3]"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.013036542015743]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}, {
									"case":	36,
									"scores":	[-4.013036542015743]
								}, {
									"case":	37,
									"scores":	[-4.013036542015743]
								}, {
									"case":	38,
									"scores":	[-4.013036542015743]
								}, {
									"case":	39,
									"scores":	[-4.013036542015743]
								}, {
									"case":	40,
									"scores":	[-4.013036542015743]
								}, {
									"case":	41,
									"scores":	[-4.013036542015743]
								}, {
									"case":	42,
									"scores":	[-4.013036542015743]
								}, {
									"case":	43,
									"scores":	[-4.013036542015743]
								}, {
									"case":	44,
									"scores":	[-4.013036542015743]
								}, {
									"case":	45,
									"scores":	[-4.013036542015743]
								}, {
									"case":	46,
									"scores":	[-4.013036542015743]
								}, {
									"case":	47,
									"scores":	[-4.013036542015743]
								}, {
									"case":	48,
									"scores":	[-4.013036542015743]
								}, {
									"case":	49,
									"scores":	[-4.013036542015743]
								}, {
									"case":	50,
									"scores":	[-4.013036542015743]
								}, {
									"case":	51,
									"scores":	[-4.013036542015743]
								}, {
									"case":	52,
									"scores":	[-4.013036542015743]
								}, {
									"case":	53,
									"scores":	[-4.013036542015743]
								}, {
									"case":	54,
									"scores":	[-4.013036542015743]
								}, {
									"case":	55,
									"scores":	[-4.013036542015743]
								}, {
									"case":	56,
									"scores":	[-4.013036542015743]
								}, {
									"case":	57,
									"scores":	[-4.013036542015743]
								}, {
									"case":	58,
									"scores":	[-4.013036542015743]
								}, {
									"case":	59,
									"scores":	[-4.013036542015743]
								}, {
									"case":	60,
									"scores":	[-4.013036542015743]
								}, {
									"case":	61,
									"scores":	[-4.013036542015743]
								}, {
									"case":	62,
									"scores":	[-4.013036542015743]
								}, {
									"case":	63,
									"scores":	[-4.013036542015743]
								}, {
									"case":	64,
									"scores":	[-4.013036542015743]
								}, {
									"case":	65,
									"scores":	[-4.013036542015743]
								}, {
									"case":	66,
									"scores":	[-4.013036542015743]
								}, {
									"case":	67,
									"scores":	[-4.013036542015743]
								}, {
									"case":	68,
									"scores":	[-4.013036542015743]
								}, {
									"case":	69,
									"scores":	[-4.013036542015743]
								}, {
									"case":	70,
									"scores":	[-4.013036542015743]
								}, {
									"case":	71,
									"scores":	[-4.013036542015743]
								}, {
									"case":	72,
									"scores":	[-4.013036542015743]
								}, {
									"case":	73,
									"scores":	[-4.013036542015743]
								}, {
									"case":	74,
									"scores":	[-4.013036542015743]
								}, {
									"case":	75,
									"scores":	[-4.013036542015743]
								}, {
									"case":	76,
									"scores":	[-4.013036542015743]
								}, {
									"case":	77,
									"scores":	[-4.013036542015743]
								}, {
									"case":	78,
									"scores":	[-4.013036542015743]
								}, {
									"case":	79,
									"scores":	[-4.013036542015743]
								}, {
									"case":	80,
									"scores":	[-4.013036542015743]
								}, {
									"case":	81,
									"scores":	[-4.013036542015743]
								}, {
									"case":	82,
									"scores":	[-4.013036542015743]
								}, {
									"case":	83,
									"scores":	[-4.013036542015743]
								}, {
									"case":	84,
									"scores":	[-4.013036542015743]
								}, {
									"case":	85,
									"scores":	[-4.013036542015743]
								}, {
									"case":	86,
									"scores":	[-4.013036542015743]
								}, {
									"case":	87,
									"scores":	[-4.013036542015743]
								}, {
									"case":	88,
									"scores":	[-4.013036542015743]
								}, {
									"case":	89,
									"scores":	[-4.013036542015743]
								}, {
									"case":	90,
									"scores":	[-4.013036542015743]
								}, {
									"case":	91,
									"scores":	[-4.013036542015743]
								}, {
									"case":	92,
									"scores":	[-4.013036542015743]
								}]
						}, {
							"switch":	16,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	269,
							"begin_column":	5,
							"end_line":	273,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L269\", 12, &(newconst), sizeof (newconst), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type))) {\n    if (!PyErr_ExceptionMatches(PyExc_KeyboardInterrupt))\n        PyErr_Clear();\n    return 0;\n}\n", "if ((newconst == ((void *)0)) && !__is_neg(\"\", \"L269\", 12, &(newconst), sizeof (newconst), &(PyExc_KeyboardInterrupt), sizeof (PyExc_KeyboardInterrupt), &(opcode), sizeof (opcode), &(PyExc_SystemError), sizeof (PyExc_SystemError), &(consts), sizeof (consts), &(len_consts), sizeof (len_consts), &(v), sizeof (v), &(codestr), sizeof (codestr), &(PyExc_KeyboardInterrupt->_ob_next), sizeof (PyExc_KeyboardInterrupt->_ob_next), &(PyExc_KeyboardInterrupt->_ob_prev), sizeof (PyExc_KeyboardInterrupt->_ob_prev), &(PyExc_KeyboardInterrupt->ob_refcnt), sizeof (PyExc_KeyboardInterrupt->ob_refcnt), &(PyExc_KeyboardInterrupt->ob_type), sizeof (PyExc_KeyboardInterrupt->ob_type))) {\n    if (!PyErr_ExceptionMatches(PyExc_KeyboardInterrupt))\n        PyErr_Clear();\n    return 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.3331239294281465, -5.795588559428146, -4.9780735594281458, -6.6945099894281457, -6.3223797784281457, -5.5691127384281458, -6.6369406694281459, -6.2497349394281461, -6.7665343394281461, -6.7665343394281461, -5.8299083394281457, -6.7665343394281461]
								}, {
									"case":	2,
									"scores":	[-1.7824557624281439, -4.2449203924281456, -3.4274053924281458, -5.1438418224281461, -4.7717116114281453, -4.0184445714281454, -5.0862725024281454, -4.6990667724281456, -5.2158661724281457, -5.2158661724281457, -4.2792401724281453, -5.2158661724281457]
								}]
						}]
				}, {
					"line":	540,
					"switches":	[{
							"switch":	26,
							"types":	[[], [], [], [], [1671, 1672, 1673, 1674, 1675], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], [], [], [], [1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670], [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594], [], [], [], [], [], []],
							"begin_line":	541,
							"begin_column":	19,
							"end_line":	541,
							"end_column":	19,
							"patch_codes":	["memset(&((((PyObject *)(code))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->ob_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(code))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_call)))", "memset(&((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_del)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_free)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_init)))", "memset(&((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_members)))", "memset(&((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_name)))", "memset(&((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_new)))", "memset(&((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_print)))", "memset(&((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_str)))", "memset(&((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(code))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->ob_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->ob_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset)))", "memset(&((PyBytesObject *)(code))->ob_base, 0, sizeof (*(&((PyBytesObject *)(code))->ob_base)))", "memset(&((PyBytesObject *)(code))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(code))->ob_shash)))", "memset(&((PyBytesObject *)(code))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(code))->ob_sval)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_base)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_shash)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_sval)))", "memset(&((PyListObject *)(consts))->allocated, 0, sizeof (*(&((PyListObject *)(consts))->allocated)))", "memset(&((PyListObject *)(consts))->ob_base, 0, sizeof (*(&((PyListObject *)(consts))->ob_base)))", "memset(&((PyListObject *)(consts))->ob_item, 0, sizeof (*(&((PyListObject *)(consts))->ob_item)))", "memset(&((PyObject *)(code))->_ob_next, 0, sizeof (*(&((PyObject *)(code))->_ob_next)))", "memset(&((PyObject *)(code))->_ob_prev, 0, sizeof (*(&((PyObject *)(code))->_ob_prev)))", "memset(&((PyObject *)(code))->ob_refcnt, 0, sizeof (*(&((PyObject *)(code))->ob_refcnt)))", "memset(&((PyObject *)(code))->ob_type, 0, sizeof (*(&((PyObject *)(code))->ob_type)))", "memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_next)))", "memset(&((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_prev)))", "memset(&((PyObject *)(lineno_obj))->ob_refcnt, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_refcnt)))", "memset(&((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_type)))", "memset(&((PyTupleObject *)(names))->ob_base, 0, sizeof (*(&((PyTupleObject *)(names))->ob_base)))", "memset(&((PyTupleObject *)(names))->ob_item, 0, sizeof (*(&((PyTupleObject *)(names))->ob_item)))", "memset(&((PyVarObject *)(code))->ob_base, 0, sizeof (*(&((PyVarObject *)(code))->ob_base)))", "memset(&((PyVarObject *)(code))->ob_size, 0, sizeof (*(&((PyVarObject *)(code))->ob_size)))", "memset(&((PyVarObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_base)))", "memset(&((PyVarObject *)(lineno_obj))->ob_size, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_size)))", "memset(((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_base)))", "memset(((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_call)))", "memset(((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_del)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_free)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_init)))", "memset(((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_members)))", "memset(((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_name)))", "memset(((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_new)))", "memset(((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_print)))", "memset(((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_str)))", "memset(((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(((PyListObject *)(consts))->ob_item, 0, sizeof (*(((PyListObject *)(consts))->ob_item)))", "memset(((PyObject *)(code))->_ob_next, 0, sizeof (*(((PyObject *)(code))->_ob_next)))", "memset(((PyObject *)(code))->_ob_prev, 0, sizeof (*(((PyObject *)(code))->_ob_prev)))", "memset(((PyObject *)(code))->ob_type, 0, sizeof (*(((PyObject *)(code))->ob_type)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "memset(((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_next)))", "memset(((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_prev)))", "memset(((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(((PyObject *)(lineno_obj))->ob_type)))", "PyMem_Free((addrmap))", "PyMem_Free((blocks))", "PyMem_Free((codestr))", "PyMem_Free((lineno))", "addrmap = (addrmap)", "addrmap[i] = (-1)", "addrmap[i] = (0)", "addrmap[i] = (1)", "addrmap[i] = (10)", "addrmap[i] = (100)", "addrmap[i] = (101)", "addrmap[i] = (102)", "addrmap[i] = (103)", "addrmap[i] = (104)", "addrmap[i] = (107)", "addrmap[i] = (11)", "addrmap[i] = (110)", "addrmap[i] = (111)", "addrmap[i] = (112)", "addrmap[i] = (113)", "addrmap[i] = (114)", "addrmap[i] = (115)", "addrmap[i] = (116)", "addrmap[i] = (119)", "addrmap[i] = (12)", "addrmap[i] = (120)", "addrmap[i] = (121)", "addrmap[i] = (122)", "addrmap[i] = (132)", "addrmap[i] = (134217728)", "addrmap[i] = (143)", "addrmap[i] = (144)", "addrmap[i] = (15)", "addrmap[i] = (19)", "addrmap[i] = (2)", "addrmap[i] = (20)", "addrmap[i] = (22)", "addrmap[i] = (23)", "addrmap[i] = (24)", "addrmap[i] = (25)", "addrmap[i] = (255)", "addrmap[i] = (256)", "addrmap[i] = (26)", "addrmap[i] = (27)", "addrmap[i] = (3)", "addrmap[i] = (32700)", "addrmap[i] = (33554432)", "addrmap[i] = (4)", "addrmap[i] = (403)", "addrmap[i] = (404)", "addrmap[i] = (405)", "addrmap[i] = (410)", "addrmap[i] = (411)", "addrmap[i] = (420)", "addrmap[i] = (438)", "addrmap[i] = (492)", "addrmap[i] = (499)", "addrmap[i] = (5)", "addrmap[i] = (521)", "addrmap[i] = (531)", "addrmap[i] = (533)", "addrmap[i] = (534)", "addrmap[i] = (574)", "addrmap[i] = (580)", "addrmap[i] = (581)", "addrmap[i] = (582)", "addrmap[i] = (592)", "addrmap[i] = (597)", "addrmap[i] = (598)", "addrmap[i] = (599)", "addrmap[i] = (6)", "addrmap[i] = (62)", "addrmap[i] = (63)", "addrmap[i] = (64)", "addrmap[i] = (65)", "addrmap[i] = (66)", "addrmap[i] = (7)", "addrmap[i] = (716)", "addrmap[i] = (753)", "addrmap[i] = (8)", "addrmap[i] = (83)", "addrmap[i] = (9)", "addrmap[i] = (90)", "addrmap[i] = (92)", "addrmap[i] = (93)", "addrmap[i] = (adj)", "addrmap[i] = (cum_orig_line)", "addrmap[i] = (h)", "addrmap[i] = (in_consts)", "addrmap[i] = (last_line)", "addrmap[i] = (new_line)", "addrmap[i] = (nops)", "addrmap[i] = (opcode)", "addrmap[i] = (tabsiz)", "addrmap[i] = (tgt)", "addrmap[i] = (tgttgt)", "adj = (-1)", "adj = (0)", "adj = (1)", "adj = (10)", "adj = (100)", "adj = (101)", "adj = (102)", "adj = (103)", "adj = (104)", "adj = (107)", "adj = (11)", "adj = (110)", "adj = (111)", "adj = (112)", "adj = (113)", "adj = (114)", "adj = (115)", "adj = (116)", "adj = (119)", "adj = (12)", "adj = (120)", "adj = (121)", "adj = (122)", "adj = (132)", "adj = (134217728)", "adj = (143)", "adj = (144)", "adj = (15)", "adj = (19)", "adj = (2)", "adj = (20)", "adj = (22)", "adj = (23)", "adj = (24)", "adj = (25)", "adj = (255)", "adj = (256)", "adj = (26)", "adj = (27)", "adj = (3)", "adj = (32700)", "adj = (33554432)", "adj = (4)", "adj = (403)", "adj = (404)", "adj = (405)", "adj = (410)", "adj = (411)", "adj = (420)", "adj = (438)", "adj = (492)", "adj = (499)", "adj = (5)", "adj = (521)", "adj = (531)", "adj = (533)", "adj = (534)", "adj = (574)", "adj = (580)", "adj = (581)", "adj = (582)", "adj = (592)", "adj = (597)", "adj = (598)", "adj = (599)", "adj = (6)", "adj = (62)", "adj = (63)", "adj = (64)", "adj = (65)", "adj = (66)", "adj = (7)", "adj = (716)", "adj = (753)", "adj = (8)", "adj = (83)", "adj = (9)", "adj = (90)", "adj = (92)", "adj = (93)", "adj = (adj)", "adj = (cum_orig_line)", "adj = (h)", "adj = (in_consts)", "adj = (last_line)", "adj = (new_line)", "adj = (nops)", "adj = (opcode)", "adj = (tabsiz)", "adj = (tgt)", "adj = (tgttgt)", "blocks = (blocks)", "blocks = markblocks((codestr), codelen)", "blocks = markblocks((lineno), codelen)", "code = (code)", "code = (consts)", "code = (lineno_obj)", "code = (names)", "codelen = (-1)", "codelen = (0)", "codelen = (1)", "codelen = (10)", "codelen = (100)", "codelen = (101)", "codelen = (102)", "codelen = (103)", "codelen = (104)", "codelen = (107)", "codelen = (11)", "codelen = (110)", "codelen = (111)", "codelen = (112)", "codelen = (113)", "codelen = (114)", "codelen = (115)", "codelen = (116)", "codelen = (119)", "codelen = (12)", "codelen = (120)", "codelen = (121)", "codelen = (122)", "codelen = (132)", "codelen = (134217728)", "codelen = (143)", "codelen = (144)", "codelen = (15)", "codelen = (19)", "codelen = (2)", "codelen = (20)", "codelen = (22)", "codelen = (23)", "codelen = (24)", "codelen = (25)", "codelen = (255)", "codelen = (256)", "codelen = (26)", "codelen = (27)", "codelen = (3)", "codelen = (32700)", "codelen = (33554432)", "codelen = (4)", "codelen = (403)", "codelen = (404)", "codelen = (405)", "codelen = (410)", "codelen = (411)", "codelen = (420)", "codelen = (438)", "codelen = (492)", "codelen = (499)", "codelen = (5)", "codelen = (521)", "codelen = (531)", "codelen = (533)", "codelen = (534)", "codelen = (574)", "codelen = (580)", "codelen = (581)", "codelen = (582)", "codelen = (592)", "codelen = (597)", "codelen = (598)", "codelen = (599)", "codelen = (6)", "codelen = (62)", "codelen = (63)", "codelen = (64)", "codelen = (65)", "codelen = (66)", "codelen = (7)", "codelen = (716)", "codelen = (753)", "codelen = (8)", "codelen = (83)", "codelen = (9)", "codelen = (90)", "codelen = (92)", "codelen = (93)", "codelen = (codelen)", "codelen = (const_stack_size)", "codelen = (const_stack_top)", "codelen = (i)", "codelen = (j)", "codestr = (codestr)", "codestr = (lineno)", "codestr[i] = (-1)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "cum_orig_line = (-1)", "cum_orig_line = (0)", "cum_orig_line = (1)", "cum_orig_line = (10)", "cum_orig_line = (100)", "cum_orig_line = (101)", "cum_orig_line = (102)", "cum_orig_line = (103)", "cum_orig_line = (104)", "cum_orig_line = (107)", "cum_orig_line = (11)", "cum_orig_line = (110)", "cum_orig_line = (111)", "cum_orig_line = (112)", "cum_orig_line = (113)", "cum_orig_line = (114)", "cum_orig_line = (115)", "cum_orig_line = (116)", "cum_orig_line = (119)", "cum_orig_line = (12)", "cum_orig_line = (120)", "cum_orig_line = (121)", "cum_orig_line = (122)", "cum_orig_line = (132)", "cum_orig_line = (134217728)", "cum_orig_line = (143)", "cum_orig_line = (144)", "cum_orig_line = (15)", "cum_orig_line = (19)", "cum_orig_line = (2)", "cum_orig_line = (20)", "cum_orig_line = (22)", "cum_orig_line = (23)", "cum_orig_line = (24)", "cum_orig_line = (25)", "cum_orig_line = (255)", "cum_orig_line = (256)", "cum_orig_line = (26)", "cum_orig_line = (27)", "cum_orig_line = (3)", "cum_orig_line = (32700)", "cum_orig_line = (33554432)", "cum_orig_line = (4)", "cum_orig_line = (403)", "cum_orig_line = (404)", "cum_orig_line = (405)", "cum_orig_line = (410)", "cum_orig_line = (411)", "cum_orig_line = (420)", "cum_orig_line = (438)", "cum_orig_line = (492)", "cum_orig_line = (499)", "cum_orig_line = (5)", "cum_orig_line = (521)", "cum_orig_line = (531)", "cum_orig_line = (533)", "cum_orig_line = (534)", "cum_orig_line = (574)", "cum_orig_line = (580)", "cum_orig_line = (581)", "cum_orig_line = (582)", "cum_orig_line = (592)", "cum_orig_line = (597)", "cum_orig_line = (598)", "cum_orig_line = (599)", "cum_orig_line = (6)", "cum_orig_line = (62)", "cum_orig_line = (63)", "cum_orig_line = (64)", "cum_orig_line = (65)", "cum_orig_line = (66)", "cum_orig_line = (7)", "cum_orig_line = (716)", "cum_orig_line = (753)", "cum_orig_line = (8)", "cum_orig_line = (83)", "cum_orig_line = (9)", "cum_orig_line = (90)", "cum_orig_line = (92)", "cum_orig_line = (93)", "cum_orig_line = (adj)", "cum_orig_line = (cum_orig_line)", "cum_orig_line = (h)", "cum_orig_line = (in_consts)", "cum_orig_line = (last_line)", "cum_orig_line = (new_line)", "cum_orig_line = (nops)", "cum_orig_line = (opcode)", "cum_orig_line = (tabsiz)", "cum_orig_line = (tgt)", "cum_orig_line = (tgttgt)", "h = ((const_stack_top >= j - 1) ? (load_const_stack)[const_stack_top - j + 1] : -1)", "h = (-1)", "h = (0)", "h = (1)", "h = (10)", "h = (100)", "h = (101)", "h = (102)", "h = (103)", "h = (104)", "h = (107)", "h = (11)", "h = (110)", "h = (111)", "h = (112)", "h = (113)", "h = (114)", "h = (115)", "h = (116)", "h = (119)", "h = (12)", "h = (120)", "h = (121)", "h = (122)", "h = (132)", "h = (134217728)", "h = (143)", "h = (144)", "h = (15)", "h = (19)", "h = (2)", "h = (20)", "h = (22)", "h = (23)", "h = (24)", "h = (25)", "h = (255)", "h = (256)", "h = (26)", "h = (27)", "h = (3)", "h = (32700)", "h = (33554432)", "h = (4)", "h = (403)", "h = (404)", "h = (405)", "h = (410)", "h = (411)", "h = (420)", "h = (438)", "h = (492)", "h = (499)", "h = (5)", "h = (521)", "h = (531)", "h = (533)", "h = (534)", "h = (574)", "h = (580)", "h = (581)", "h = (582)", "h = (592)", "h = (597)", "h = (598)", "h = (599)", "h = (6)", "h = (62)", "h = (63)", "h = (64)", "h = (65)", "h = (66)", "h = (7)", "h = (716)", "h = (753)", "h = (8)", "h = (83)", "h = (9)", "h = (90)", "h = (92)", "h = (93)", "h = (adj)", "h = (cum_orig_line)", "h = (h)", "h = (in_consts)", "h = (last_line)", "h = (new_line)", "h = (nops)", "h = (opcode)", "h = (tabsiz)", "h = (tgt)", "h = (tgttgt)", "h = load_global((codestr), i, name, consts)", "h = load_global((lineno), i, name, consts)", "h = load_global(codestr, i, (name), consts)", "h = load_global(codestr, i, name, (code))", "h = load_global(codestr, i, name, (consts))", "h = load_global(codestr, i, name, (lineno_obj))", "h = load_global(codestr, i, name, (names))", "in_consts = (-1)", "in_consts = (0)", "in_consts = (1)", "in_consts = (10)", "in_consts = (100)", "in_consts = (101)", "in_consts = (102)", "in_consts = (103)", "in_consts = (104)", "in_consts = (107)", "in_consts = (11)", "in_consts = (110)", "in_consts = (111)", "in_consts = (112)", "in_consts = (113)", "in_consts = (114)", "in_consts = (115)", "in_consts = (116)", "in_consts = (119)", "in_consts = (12)", "in_consts = (120)", "in_consts = (121)", "in_consts = (122)", "in_consts = (132)", "in_consts = (134217728)", "in_consts = (143)", "in_consts = (144)", "in_consts = (15)", "in_consts = (19)", "in_consts = (2)", "in_consts = (20)", "in_consts = (22)", "in_consts = (23)", "in_consts = (24)", "in_consts = (25)", "in_consts = (255)", "in_consts = (256)", "in_consts = (26)", "in_consts = (27)", "in_consts = (3)", "in_consts = (32700)", "in_consts = (33554432)", "in_consts = (4)", "in_consts = (403)", "in_consts = (404)", "in_consts = (405)", "in_consts = (410)", "in_consts = (411)", "in_consts = (420)", "in_consts = (438)", "in_consts = (492)", "in_consts = (499)", "in_consts = (5)", "in_consts = (521)", "in_consts = (531)", "in_consts = (533)", "in_consts = (534)", "in_consts = (574)", "in_consts = (580)", "in_consts = (581)", "in_consts = (582)", "in_consts = (592)", "in_consts = (597)", "in_consts = (598)", "in_consts = (599)", "in_consts = (6)", "in_consts = (62)", "in_consts = (63)", "in_consts = (64)", "in_consts = (65)", "in_consts = (66)", "in_consts = (7)", "in_consts = (716)", "in_consts = (753)", "in_consts = (8)", "in_consts = (83)", "in_consts = (9)", "in_consts = (90)", "in_consts = (92)", "in_consts = (93)", "in_consts = (adj)", "in_consts = (cum_orig_line)", "in_consts = (h)", "in_consts = (in_consts)", "in_consts = (last_line)", "in_consts = (new_line)", "in_consts = (nops)", "in_consts = (opcode)", "in_consts = (tabsiz)", "in_consts = (tgt)", "in_consts = (tgttgt)", "j = (-1)", "j = (0)", "j = (1)", "j = (10)", "j = (100)", "j = (101)", "j = (102)", "j = (103)", "j = (104)", "j = (107)", "j = (11)", "j = (110)", "j = (111)", "j = (112)", "j = (113)", "j = (114)", "j = (115)", "j = (116)", "j = (119)", "j = (12)", "j = (120)", "j = (121)", "j = (122)", "j = (132)", "j = (134217728)", "j = (143)", "j = (144)", "j = (15)", "j = (19)", "j = (2)", "j = (20)", "j = (22)", "j = (23)", "j = (24)", "j = (25)", "j = (255)", "j = (256)", "j = (26)", "j = (27)", "j = (3)", "j = (32700)", "j = (33554432)", "j = (4)", "j = (403)", "j = (404)", "j = (405)", "j = (410)", "j = (411)", "j = (420)", "j = (438)", "j = (492)", "j = (499)", "j = (5)", "j = (521)", "j = (531)", "j = (533)", "j = (534)", "j = (574)", "j = (580)", "j = (581)", "j = (582)", "j = (592)", "j = (597)", "j = (598)", "j = (599)", "j = (6)", "j = (62)", "j = (63)", "j = (64)", "j = (65)", "j = (66)", "j = (7)", "j = (716)", "j = (753)", "j = (8)", "j = (83)", "j = (9)", "j = (90)", "j = (92)", "j = (93)", "j = (codelen)", "j = (codestr)[tgt]", "j = (const_stack_size)", "j = (const_stack_top)", "j = (i)", "j = (j)", "j = (lineno)[tgt]", "last_line = (-1)", "last_line = (0)", "last_line = (1)", "last_line = (10)", "last_line = (100)", "last_line = (101)", "last_line = (102)", "last_line = (103)", "last_line = (104)", "last_line = (107)", "last_line = (11)", "last_line = (110)", "last_line = (111)", "last_line = (112)", "last_line = (113)", "last_line = (114)", "last_line = (115)", "last_line = (116)", "last_line = (119)", "last_line = (12)", "last_line = (120)", "last_line = (121)", "last_line = (122)", "last_line = (132)", "last_line = (134217728)", "last_line = (143)", "last_line = (144)", "last_line = (15)", "last_line = (19)", "last_line = (2)", "last_line = (20)", "last_line = (22)", "last_line = (23)", "last_line = (24)", "last_line = (25)", "last_line = (255)", "last_line = (256)", "last_line = (26)", "last_line = (27)", "last_line = (3)", "last_line = (32700)", "last_line = (33554432)", "last_line = (4)", "last_line = (403)", "last_line = (404)", "last_line = (405)", "last_line = (410)", "last_line = (411)", "last_line = (420)", "last_line = (438)", "last_line = (492)", "last_line = (499)", "last_line = (5)", "last_line = (521)", "last_line = (531)", "last_line = (533)", "last_line = (534)", "last_line = (574)", "last_line = (580)", "last_line = (581)", "last_line = (582)", "last_line = (592)", "last_line = (597)", "last_line = (598)", "last_line = (599)", "last_line = (6)", "last_line = (62)", "last_line = (63)", "last_line = (64)", "last_line = (65)", "last_line = (66)", "last_line = (7)", "last_line = (716)", "last_line = (753)", "last_line = (8)", "last_line = (83)", "last_line = (9)", "last_line = (90)", "last_line = (92)", "last_line = (93)", "last_line = (adj)", "last_line = (cum_orig_line)", "last_line = (h)", "last_line = (in_consts)", "last_line = (last_line)", "last_line = (new_line)", "last_line = (nops)", "last_line = (opcode)", "last_line = (tabsiz)", "last_line = (tgt)", "last_line = (tgttgt)", "lineno = (codestr)", "lineno = (lineno)", "lineno[i] = (-1)", "lineno[i] = (0)", "lineno[i] = (1)", "lineno[i] = (10)", "lineno[i] = (100)", "lineno[i] = (101)", "lineno[i] = (102)", "lineno[i] = (103)", "lineno[i] = (104)", "lineno[i] = (107)", "lineno[i] = (11)", "lineno[i] = (110)", "lineno[i] = (111)", "lineno[i] = (112)", "lineno[i] = (113)", "lineno[i] = (114)", "lineno[i] = (115)", "lineno[i] = (116)", "lineno[i] = (119)", "lineno[i] = (12)", "lineno[i] = (120)", "lineno[i] = (121)", "lineno[i] = (122)", "lineno[i] = (132)", "lineno[i] = (134217728)", "lineno[i] = (143)", "lineno[i] = (144)", "lineno[i] = (15)", "lineno[i] = (19)", "lineno[i] = (2)", "lineno[i] = (20)", "lineno[i] = (22)", "lineno[i] = (23)", "lineno[i] = (24)", "lineno[i] = (25)", "lineno[i] = (255)", "lineno[i] = (256)", "lineno[i] = (26)", "lineno[i] = (27)", "lineno[i] = (3)", "lineno[i] = (32700)", "lineno[i] = (33554432)", "lineno[i] = (4)", "lineno[i] = (403)", "lineno[i] = (404)", "lineno[i] = (405)", "lineno[i] = (410)", "lineno[i] = (411)", "lineno[i] = (420)", "lineno[i] = (438)", "lineno[i] = (492)", "lineno[i] = (499)", "lineno[i] = (5)", "lineno[i] = (521)", "lineno[i] = (531)", "lineno[i] = (533)", "lineno[i] = (534)", "lineno[i] = (574)", "lineno[i] = (580)", "lineno[i] = (581)", "lineno[i] = (582)", "lineno[i] = (592)", "lineno[i] = (597)", "lineno[i] = (598)", "lineno[i] = (599)", "lineno[i] = (6)", "lineno[i] = (62)", "lineno[i] = (63)", "lineno[i] = (64)", "lineno[i] = (65)", "lineno[i] = (66)", "lineno[i] = (7)", "lineno[i] = (716)", "lineno[i] = (753)", "lineno[i] = (8)", "lineno[i] = (83)", "lineno[i] = (9)", "lineno[i] = (90)", "lineno[i] = (92)", "lineno[i] = (93)", "memset(&(codestr)[h], 9, i - h)", "memset(&(lineno)[h], 9, i - h)", "memset((codestr) + i + 1, 9, 2)", "memset((codestr) + i + 1, 9, 3)", "memset((codestr) + i + 1, 9, 4)", "memset((codestr) + i + 1, 9, 5)", "memset((codestr) + i + 2, 9, 4)", "memset((codestr) + i, 9, 6)", "memset((lineno) + i + 1, 9, 2)", "memset((lineno) + i + 1, 9, 3)", "memset((lineno) + i + 1, 9, 4)", "memset((lineno) + i + 1, 9, 5)", "memset((lineno) + i + 2, 9, 4)", "memset((lineno) + i, 9, 6)", "name = (name)", "new_line = (-1)", "new_line = (0)", "new_line = (1)", "new_line = (10)", "new_line = (100)", "new_line = (101)", "new_line = (102)", "new_line = (103)", "new_line = (104)", "new_line = (107)", "new_line = (11)", "new_line = (110)", "new_line = (111)", "new_line = (112)", "new_line = (113)", "new_line = (114)", "new_line = (115)", "new_line = (116)", "new_line = (119)", "new_line = (12)", "new_line = (120)", "new_line = (121)", "new_line = (122)", "new_line = (132)", "new_line = (134217728)", "new_line = (143)", "new_line = (144)", "new_line = (15)", "new_line = (19)", "new_line = (2)", "new_line = (20)", "new_line = (22)", "new_line = (23)", "new_line = (24)", "new_line = (25)", "new_line = (255)", "new_line = (256)", "new_line = (26)", "new_line = (27)", "new_line = (3)", "new_line = (32700)", "new_line = (33554432)", "new_line = (4)", "new_line = (403)", "new_line = (404)", "new_line = (405)", "new_line = (410)", "new_line = (411)", "new_line = (420)", "new_line = (438)", "new_line = (492)", "new_line = (499)", "new_line = (5)", "new_line = (521)", "new_line = (531)", "new_line = (533)", "new_line = (534)", "new_line = (574)", "new_line = (580)", "new_line = (581)", "new_line = (582)", "new_line = (592)", "new_line = (597)", "new_line = (598)", "new_line = (599)", "new_line = (6)", "new_line = (62)", "new_line = (63)", "new_line = (64)", "new_line = (65)", "new_line = (66)", "new_line = (7)", "new_line = (716)", "new_line = (753)", "new_line = (8)", "new_line = (83)", "new_line = (9)", "new_line = (90)", "new_line = (92)", "new_line = (93)", "new_line = (addrmap)[cum_orig_line]", "new_line = (adj)", "new_line = (cum_orig_line)", "new_line = (h)", "new_line = (in_consts)", "new_line = (last_line)", "new_line = (new_line)", "new_line = (nops)", "new_line = (opcode)", "new_line = (tabsiz)", "new_line = (tgt)", "new_line = (tgttgt)", "opcode = (-1)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (101)", "opcode = (102)", "opcode = (103)", "opcode = (104)", "opcode = (107)", "opcode = (11)", "opcode = (110)", "opcode = (111)", "opcode = (112)", "opcode = (113)", "opcode = (114)", "opcode = (115)", "opcode = (116)", "opcode = (119)", "opcode = (12)", "opcode = (120)", "opcode = (121)", "opcode = (122)", "opcode = (132)", "opcode = (134217728)", "opcode = (143)", "opcode = (144)", "opcode = (15)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (23)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (256)", "opcode = (26)", "opcode = (27)", "opcode = (3)", "opcode = (32700)", "opcode = (33554432)", "opcode = (4)", "opcode = (403)", "opcode = (404)", "opcode = (405)", "opcode = (410)", "opcode = (411)", "opcode = (420)", "opcode = (438)", "opcode = (492)", "opcode = (499)", "opcode = (5)", "opcode = (521)", "opcode = (531)", "opcode = (533)", "opcode = (534)", "opcode = (574)", "opcode = (580)", "opcode = (581)", "opcode = (582)", "opcode = (592)", "opcode = (597)", "opcode = (598)", "opcode = (599)", "opcode = (6)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (7)", "opcode = (716)", "opcode = (753)", "opcode = (8)", "opcode = (83)", "opcode = (9)", "opcode = (90)", "opcode = (92)", "opcode = (93)", "opcode = (adj)", "opcode = (codestr)[i]", "opcode = (cum_orig_line)", "opcode = (h)", "opcode = (in_consts)", "opcode = (last_line)", "opcode = (lineno)[i]", "opcode = (new_line)", "opcode = (nops)", "opcode = (opcode)", "opcode = (tabsiz)", "opcode = (tgt)", "opcode = (tgttgt)", "tabsiz = (-1)", "tabsiz = (0)", "tabsiz = (1)", "tabsiz = (10)", "tabsiz = (100)", "tabsiz = (101)", "tabsiz = (102)", "tabsiz = (103)", "tabsiz = (104)", "tabsiz = (107)", "tabsiz = (11)", "tabsiz = (110)", "tabsiz = (111)", "tabsiz = (112)", "tabsiz = (113)", "tabsiz = (114)", "tabsiz = (115)", "tabsiz = (116)", "tabsiz = (119)", "tabsiz = (12)", "tabsiz = (120)", "tabsiz = (121)", "tabsiz = (122)", "tabsiz = (132)", "tabsiz = (134217728)", "tabsiz = (143)", "tabsiz = (144)", "tabsiz = (15)", "tabsiz = (19)", "tabsiz = (2)", "tabsiz = (20)", "tabsiz = (22)", "tabsiz = (23)", "tabsiz = (24)", "tabsiz = (25)", "tabsiz = (255)", "tabsiz = (256)", "tabsiz = (26)", "tabsiz = (27)", "tabsiz = (3)", "tabsiz = (32700)", "tabsiz = (33554432)", "tabsiz = (4)", "tabsiz = (403)", "tabsiz = (404)", "tabsiz = (405)", "tabsiz = (410)", "tabsiz = (411)", "tabsiz = (420)", "tabsiz = (438)", "tabsiz = (492)", "tabsiz = (499)", "tabsiz = (5)", "tabsiz = (521)", "tabsiz = (531)", "tabsiz = (533)", "tabsiz = (534)", "tabsiz = (574)", "tabsiz = (580)", "tabsiz = (581)", "tabsiz = (582)", "tabsiz = (592)", "tabsiz = (597)", "tabsiz = (598)", "tabsiz = (599)", "tabsiz = (6)", "tabsiz = (62)", "tabsiz = (63)", "tabsiz = (64)", "tabsiz = (65)", "tabsiz = (66)", "tabsiz = (7)", "tabsiz = (716)", "tabsiz = (753)", "tabsiz = (8)", "tabsiz = (83)", "tabsiz = (9)", "tabsiz = (90)", "tabsiz = (92)", "tabsiz = (93)", "tabsiz = (adj)", "tabsiz = (cum_orig_line)", "tabsiz = (h)", "tabsiz = (in_consts)", "tabsiz = (last_line)", "tabsiz = (new_line)", "tabsiz = (nops)", "tabsiz = (opcode)", "tabsiz = (tabsiz)", "tabsiz = (tgt)", "tabsiz = (tgttgt)", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((codestr)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((lineno)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (codestr)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (lineno)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (codestr)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (lineno)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (codestr)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (lineno)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (codestr)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (lineno)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (codestr)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (lineno)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (-1)", "tgttgt = (0)", "tgttgt = (1)", "tgttgt = (10)", "tgttgt = (100)", "tgttgt = (101)", "tgttgt = (102)", "tgttgt = (103)", "tgttgt = (104)", "tgttgt = (107)", "tgttgt = (11)", "tgttgt = (110)", "tgttgt = (111)", "tgttgt = (112)", "tgttgt = (113)", "tgttgt = (114)", "tgttgt = (115)", "tgttgt = (116)", "tgttgt = (119)", "tgttgt = (12)", "tgttgt = (120)", "tgttgt = (121)", "tgttgt = (122)", "tgttgt = (132)", "tgttgt = (134217728)", "tgttgt = (143)", "tgttgt = (144)", "tgttgt = (15)", "tgttgt = (19)", "tgttgt = (2)", "tgttgt = (20)", "tgttgt = (22)", "tgttgt = (23)", "tgttgt = (24)", "tgttgt = (25)", "tgttgt = (255)", "tgttgt = (256)", "tgttgt = (26)", "tgttgt = (27)", "tgttgt = (3)", "tgttgt = (32700)", "tgttgt = (33554432)", "tgttgt = (4)", "tgttgt = (403)", "tgttgt = (404)", "tgttgt = (405)", "tgttgt = (410)", "tgttgt = (411)", "tgttgt = (420)", "tgttgt = (438)", "tgttgt = (492)", "tgttgt = (499)", "tgttgt = (5)", "tgttgt = (521)", "tgttgt = (531)", "tgttgt = (533)", "tgttgt = (534)", "tgttgt = (574)", "tgttgt = (580)", "tgttgt = (581)", "tgttgt = (582)", "tgttgt = (592)", "tgttgt = (597)", "tgttgt = (598)", "tgttgt = (599)", "tgttgt = (6)", "tgttgt = (62)", "tgttgt = (63)", "tgttgt = (64)", "tgttgt = (65)", "tgttgt = (66)", "tgttgt = (7)", "tgttgt = (716)", "tgttgt = (753)", "tgttgt = (8)", "tgttgt = (83)", "tgttgt = (9)", "tgttgt = (90)", "tgttgt = (92)", "tgttgt = (93)", "tgttgt = (adj)", "tgttgt = (cum_orig_line)", "tgttgt = (h)", "tgttgt = (in_consts)", "tgttgt = (last_line)", "tgttgt = (new_line)", "tgttgt = (nops)", "tgttgt = (opcode)", "tgttgt = (tabsiz)", "tgttgt = (tgt)", "tgttgt = (tgttgt)", "((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0))\n        ;\n    else\n        __assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 1)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 1))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 2)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 2))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < j)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < j))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((h + nops == codelen) ? 1 : 0) , __extension__ ({\n    if (h + nops == codelen)\n        ;\n    else\n        __assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((new_line - last_line < 255) ? 1 : 0) , __extension__ ({\n    if (new_line - last_line < 255)\n        ;\n    else\n        __assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "PyMem_Free(addrmap)", "PyMem_Free(blocks)", "PyMem_Free(codestr)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "addrmap = (int *)PyMem_Malloc(codelen * sizeof(int))", "addrmap[i] = i - nops", "adj = (((opcode) >= 90) ? 3 : 1)", "blocks = markblocks(codestr, codelen)", "code = PyBytes_FromStringAndSize((char *)codestr, h)", "codelen = (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(code))->ob_size))", "codestr = (unsigned char *)PyMem_Malloc(codelen)", "codestr = (unsigned char *)memcpy(codestr, (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(code))->ob_sval)), codelen)", "codestr[i] = 114", "codestr[i] = 115", "codestr[i] = 2", "codestr[i] = 3", "codestr[i] = 83", "codestr[i] = j", "codestr[i] = opcode", "cum_orig_line = 0", "h = ((const_stack_top >= j - 1) ? load_const_stack[const_stack_top - j + 1] : -1)", "h = load_global(codestr, i, name, consts)", "in_consts = 0", "j = ((int)((codestr[i + 1 + 2] << 8) + codestr[i + 1 + 1]))", "j = ((int)((codestr[i + 2] << 8) + codestr[i + 1]))", "j = codestr[tgt]", "last_line = 0", "last_line = new_line", "lineno = (unsigned char *)(((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(lineno_obj))->ob_sval))", "lineno[i] = ((unsigned char)(new_line - last_line))", "memset(&codestr[h], 9, i - h)", "memset(codestr + i + 1, 9, 2)", "memset(codestr + i + 1, 9, 3)", "memset(codestr + i + 1, 9, 4)", "memset(codestr + i + 1, 9, 5)", "memset(codestr + i + 2, 9, 4)", "memset(codestr + i, 9, 6)", "name = _PyUnicode_AsString((((PyTupleObject *)(names))->ob_item[j]))", "new_line = addrmap[cum_orig_line]", "nops++", "opcode = 113", "opcode = codestr[i]", "tabsiz = (((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(lineno_obj))->ob_size))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "if (__is_neg(\"\", \"L541\", 27, &(j), sizeof (j), &(opcode), sizeof (opcode), &(i), sizeof (i), &(codestr), sizeof (codestr), &(blocks), sizeof (blocks), &(const_stack_top), sizeof (const_stack_top), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    break;\n", "if (__is_neg(\"\", \"L541\", 27, &(j), sizeof (j), &(opcode), sizeof (opcode), &(i), sizeof (i), &(codestr), sizeof (codestr), &(blocks), sizeof (blocks), &(const_stack_top), sizeof (const_stack_top), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitError;\n", "if (__is_neg(\"\", \"L541\", 27, &(j), sizeof (j), &(opcode), sizeof (opcode), &(i), sizeof (i), &(codestr), sizeof (codestr), &(blocks), sizeof (blocks), &(const_stack_top), sizeof (const_stack_top), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitUnchanged;\n", "if (__is_neg(\"\", \"L541\", 27, &(j), sizeof (j), &(opcode), sizeof (opcode), &(i), sizeof (i), &(codestr), sizeof (codestr), &(blocks), sizeof (blocks), &(const_stack_top), sizeof (const_stack_top), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto reoptimize_current;\n", "if (__is_neg(\"\", \"L541\", 27, &(j), sizeof (j), &(opcode), sizeof (opcode), &(i), sizeof (i), &(codestr), sizeof (codestr), &(blocks), sizeof (blocks), &(const_stack_top), sizeof (const_stack_top), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	248,
									"scores":	[-3.912023005428146]
								}, {
									"case":	249,
									"scores":	[-3.912023005428146]
								}, {
									"case":	250,
									"scores":	[-3.912023005428146]
								}, {
									"case":	251,
									"scores":	[-3.912023005428146]
								}, {
									"case":	252,
									"scores":	[-3.912023005428146]
								}, {
									"case":	253,
									"scores":	[-3.912023005428146]
								}, {
									"case":	254,
									"scores":	[-3.912023005428146]
								}, {
									"case":	255,
									"scores":	[-3.912023005428146]
								}, {
									"case":	256,
									"scores":	[-3.912023005428146]
								}, {
									"case":	257,
									"scores":	[-3.912023005428146]
								}, {
									"case":	258,
									"scores":	[-3.912023005428146]
								}, {
									"case":	259,
									"scores":	[-3.912023005428146]
								}, {
									"case":	260,
									"scores":	[-3.912023005428146]
								}, {
									"case":	261,
									"scores":	[-3.912023005428146]
								}, {
									"case":	262,
									"scores":	[-3.912023005428146]
								}, {
									"case":	263,
									"scores":	[-3.912023005428146]
								}, {
									"case":	264,
									"scores":	[-3.912023005428146]
								}, {
									"case":	265,
									"scores":	[-3.912023005428146]
								}, {
									"case":	266,
									"scores":	[-3.912023005428146]
								}, {
									"case":	267,
									"scores":	[-3.912023005428146]
								}, {
									"case":	268,
									"scores":	[-3.912023005428146]
								}, {
									"case":	269,
									"scores":	[-3.912023005428146]
								}, {
									"case":	270,
									"scores":	[-3.912023005428146]
								}, {
									"case":	271,
									"scores":	[-3.912023005428146]
								}, {
									"case":	272,
									"scores":	[-3.912023005428146]
								}, {
									"case":	273,
									"scores":	[-3.912023005428146]
								}, {
									"case":	274,
									"scores":	[-3.912023005428146]
								}, {
									"case":	275,
									"scores":	[-3.912023005428146]
								}, {
									"case":	276,
									"scores":	[-3.912023005428146]
								}, {
									"case":	277,
									"scores":	[-3.912023005428146]
								}, {
									"case":	278,
									"scores":	[-3.912023005428146]
								}, {
									"case":	279,
									"scores":	[-3.912023005428146]
								}, {
									"case":	280,
									"scores":	[-3.912023005428146]
								}, {
									"case":	281,
									"scores":	[-3.912023005428146]
								}, {
									"case":	282,
									"scores":	[-3.912023005428146]
								}, {
									"case":	283,
									"scores":	[-3.912023005428146]
								}, {
									"case":	284,
									"scores":	[-3.912023005428146]
								}, {
									"case":	285,
									"scores":	[-3.912023005428146]
								}, {
									"case":	286,
									"scores":	[-3.912023005428146]
								}, {
									"case":	287,
									"scores":	[-3.912023005428146]
								}, {
									"case":	288,
									"scores":	[-3.912023005428146]
								}, {
									"case":	289,
									"scores":	[-3.912023005428146]
								}, {
									"case":	290,
									"scores":	[-3.912023005428146]
								}, {
									"case":	291,
									"scores":	[-3.912023005428146]
								}, {
									"case":	292,
									"scores":	[-3.912023005428146]
								}, {
									"case":	293,
									"scores":	[-3.912023005428146]
								}, {
									"case":	294,
									"scores":	[-3.912023005428146]
								}, {
									"case":	295,
									"scores":	[-3.912023005428146]
								}, {
									"case":	296,
									"scores":	[-3.912023005428146]
								}, {
									"case":	297,
									"scores":	[-3.912023005428146]
								}, {
									"case":	298,
									"scores":	[-3.912023005428146]
								}, {
									"case":	299,
									"scores":	[-3.912023005428146]
								}, {
									"case":	300,
									"scores":	[-3.912023005428146]
								}, {
									"case":	301,
									"scores":	[-3.912023005428146]
								}, {
									"case":	302,
									"scores":	[-3.912023005428146]
								}, {
									"case":	303,
									"scores":	[-3.912023005428146]
								}, {
									"case":	304,
									"scores":	[-3.912023005428146]
								}, {
									"case":	305,
									"scores":	[-3.912023005428146]
								}, {
									"case":	306,
									"scores":	[-3.912023005428146]
								}, {
									"case":	307,
									"scores":	[-3.912023005428146]
								}, {
									"case":	308,
									"scores":	[-3.912023005428146]
								}, {
									"case":	309,
									"scores":	[-3.912023005428146]
								}, {
									"case":	310,
									"scores":	[-3.912023005428146]
								}, {
									"case":	311,
									"scores":	[-3.912023005428146]
								}, {
									"case":	312,
									"scores":	[-3.912023005428146]
								}, {
									"case":	313,
									"scores":	[-3.912023005428146]
								}, {
									"case":	314,
									"scores":	[-3.912023005428146]
								}, {
									"case":	315,
									"scores":	[-3.912023005428146]
								}, {
									"case":	316,
									"scores":	[-3.912023005428146]
								}, {
									"case":	317,
									"scores":	[-3.912023005428146]
								}, {
									"case":	318,
									"scores":	[-3.912023005428146]
								}, {
									"case":	319,
									"scores":	[-3.912023005428146]
								}, {
									"case":	320,
									"scores":	[-3.912023005428146]
								}, {
									"case":	321,
									"scores":	[-3.912023005428146]
								}, {
									"case":	322,
									"scores":	[-3.912023005428146]
								}, {
									"case":	323,
									"scores":	[-3.912023005428146]
								}, {
									"case":	324,
									"scores":	[-3.912023005428146]
								}, {
									"case":	325,
									"scores":	[-3.912023005428146]
								}, {
									"case":	326,
									"scores":	[-3.912023005428146]
								}, {
									"case":	327,
									"scores":	[-3.912023005428146]
								}, {
									"case":	328,
									"scores":	[-3.912023005428146]
								}, {
									"case":	329,
									"scores":	[-3.912023005428146]
								}, {
									"case":	330,
									"scores":	[-3.912023005428146]
								}, {
									"case":	331,
									"scores":	[-3.912023005428146]
								}, {
									"case":	332,
									"scores":	[-3.912023005428146]
								}, {
									"case":	333,
									"scores":	[-3.912023005428146]
								}, {
									"case":	334,
									"scores":	[-3.912023005428146]
								}, {
									"case":	335,
									"scores":	[-3.912023005428146]
								}, {
									"case":	336,
									"scores":	[-3.912023005428146]
								}, {
									"case":	337,
									"scores":	[-3.912023005428146]
								}, {
									"case":	338,
									"scores":	[-3.912023005428146]
								}, {
									"case":	339,
									"scores":	[-3.912023005428146]
								}, {
									"case":	340,
									"scores":	[-3.912023005428146]
								}, {
									"case":	341,
									"scores":	[-3.912023005428146]
								}, {
									"case":	342,
									"scores":	[-3.912023005428146]
								}, {
									"case":	343,
									"scores":	[-3.912023005428146]
								}, {
									"case":	344,
									"scores":	[-3.912023005428146]
								}, {
									"case":	345,
									"scores":	[-3.912023005428146]
								}, {
									"case":	346,
									"scores":	[-3.912023005428146]
								}, {
									"case":	347,
									"scores":	[-3.912023005428146]
								}, {
									"case":	348,
									"scores":	[-3.912023005428146]
								}, {
									"case":	349,
									"scores":	[-3.912023005428146]
								}, {
									"case":	350,
									"scores":	[-3.912023005428146]
								}, {
									"case":	351,
									"scores":	[-3.912023005428146]
								}, {
									"case":	352,
									"scores":	[-3.912023005428146]
								}, {
									"case":	353,
									"scores":	[-3.912023005428146]
								}, {
									"case":	354,
									"scores":	[-3.912023005428146]
								}, {
									"case":	355,
									"scores":	[-3.912023005428146]
								}, {
									"case":	356,
									"scores":	[-3.912023005428146]
								}, {
									"case":	357,
									"scores":	[-3.912023005428146]
								}, {
									"case":	358,
									"scores":	[-3.912023005428146]
								}, {
									"case":	359,
									"scores":	[-3.912023005428146]
								}, {
									"case":	360,
									"scores":	[-3.912023005428146]
								}, {
									"case":	361,
									"scores":	[-3.912023005428146]
								}, {
									"case":	362,
									"scores":	[-3.912023005428146]
								}, {
									"case":	363,
									"scores":	[-3.912023005428146]
								}, {
									"case":	364,
									"scores":	[-3.912023005428146]
								}, {
									"case":	365,
									"scores":	[-3.912023005428146]
								}, {
									"case":	366,
									"scores":	[-3.912023005428146]
								}, {
									"case":	367,
									"scores":	[-3.912023005428146]
								}, {
									"case":	368,
									"scores":	[-3.912023005428146]
								}, {
									"case":	369,
									"scores":	[-3.912023005428146]
								}, {
									"case":	370,
									"scores":	[-3.912023005428146]
								}, {
									"case":	371,
									"scores":	[-3.912023005428146]
								}, {
									"case":	372,
									"scores":	[-3.912023005428146]
								}, {
									"case":	373,
									"scores":	[-3.912023005428146]
								}, {
									"case":	374,
									"scores":	[-3.912023005428146]
								}, {
									"case":	375,
									"scores":	[-3.912023005428146]
								}, {
									"case":	376,
									"scores":	[-3.912023005428146]
								}, {
									"case":	377,
									"scores":	[-3.912023005428146]
								}, {
									"case":	378,
									"scores":	[-3.912023005428146]
								}, {
									"case":	379,
									"scores":	[-3.912023005428146]
								}, {
									"case":	380,
									"scores":	[-3.912023005428146]
								}, {
									"case":	381,
									"scores":	[-3.912023005428146]
								}, {
									"case":	382,
									"scores":	[-3.912023005428146]
								}, {
									"case":	383,
									"scores":	[-3.912023005428146]
								}, {
									"case":	384,
									"scores":	[-3.912023005428146]
								}, {
									"case":	385,
									"scores":	[-3.912023005428146]
								}, {
									"case":	386,
									"scores":	[-3.912023005428146]
								}, {
									"case":	387,
									"scores":	[-3.912023005428146]
								}, {
									"case":	388,
									"scores":	[-3.912023005428146]
								}, {
									"case":	389,
									"scores":	[-3.912023005428146]
								}, {
									"case":	390,
									"scores":	[-3.912023005428146]
								}, {
									"case":	391,
									"scores":	[-3.912023005428146]
								}, {
									"case":	392,
									"scores":	[-3.912023005428146]
								}, {
									"case":	393,
									"scores":	[-3.912023005428146]
								}, {
									"case":	394,
									"scores":	[-3.912023005428146]
								}, {
									"case":	395,
									"scores":	[-3.912023005428146]
								}, {
									"case":	396,
									"scores":	[-3.912023005428146]
								}, {
									"case":	397,
									"scores":	[-3.912023005428146]
								}, {
									"case":	398,
									"scores":	[-3.912023005428146]
								}, {
									"case":	399,
									"scores":	[-3.912023005428146]
								}, {
									"case":	400,
									"scores":	[-3.912023005428146]
								}, {
									"case":	401,
									"scores":	[-3.912023005428146]
								}, {
									"case":	402,
									"scores":	[-3.912023005428146]
								}, {
									"case":	403,
									"scores":	[-3.912023005428146]
								}, {
									"case":	404,
									"scores":	[-3.912023005428146]
								}, {
									"case":	405,
									"scores":	[-3.912023005428146]
								}, {
									"case":	406,
									"scores":	[-3.912023005428146]
								}, {
									"case":	407,
									"scores":	[-3.912023005428146]
								}, {
									"case":	408,
									"scores":	[-3.912023005428146]
								}, {
									"case":	409,
									"scores":	[-3.912023005428146]
								}, {
									"case":	410,
									"scores":	[-3.912023005428146]
								}, {
									"case":	411,
									"scores":	[-3.912023005428146]
								}, {
									"case":	412,
									"scores":	[-3.912023005428146]
								}, {
									"case":	413,
									"scores":	[-3.912023005428146]
								}, {
									"case":	414,
									"scores":	[-3.912023005428146]
								}, {
									"case":	415,
									"scores":	[-3.912023005428146]
								}, {
									"case":	416,
									"scores":	[-3.912023005428146]
								}, {
									"case":	417,
									"scores":	[-3.912023005428146]
								}, {
									"case":	418,
									"scores":	[-3.912023005428146]
								}, {
									"case":	419,
									"scores":	[-3.912023005428146]
								}, {
									"case":	420,
									"scores":	[-3.912023005428146]
								}, {
									"case":	421,
									"scores":	[-3.912023005428146]
								}, {
									"case":	422,
									"scores":	[-3.912023005428146]
								}, {
									"case":	423,
									"scores":	[-3.912023005428146]
								}, {
									"case":	424,
									"scores":	[-3.912023005428146]
								}, {
									"case":	425,
									"scores":	[-3.912023005428146]
								}, {
									"case":	426,
									"scores":	[-3.912023005428146]
								}, {
									"case":	427,
									"scores":	[-3.912023005428146]
								}, {
									"case":	428,
									"scores":	[-3.912023005428146]
								}, {
									"case":	429,
									"scores":	[-3.912023005428146]
								}, {
									"case":	430,
									"scores":	[-3.912023005428146]
								}, {
									"case":	431,
									"scores":	[-3.912023005428146]
								}, {
									"case":	432,
									"scores":	[-3.912023005428146]
								}, {
									"case":	433,
									"scores":	[-3.912023005428146]
								}, {
									"case":	434,
									"scores":	[-3.912023005428146]
								}, {
									"case":	435,
									"scores":	[-3.912023005428146]
								}, {
									"case":	436,
									"scores":	[-3.912023005428146]
								}, {
									"case":	437,
									"scores":	[-3.912023005428146]
								}, {
									"case":	438,
									"scores":	[-3.912023005428146]
								}, {
									"case":	439,
									"scores":	[-3.912023005428146]
								}, {
									"case":	440,
									"scores":	[-3.912023005428146]
								}, {
									"case":	441,
									"scores":	[-3.912023005428146]
								}, {
									"case":	442,
									"scores":	[-3.912023005428146]
								}, {
									"case":	443,
									"scores":	[-3.912023005428146]
								}, {
									"case":	444,
									"scores":	[-3.912023005428146]
								}, {
									"case":	445,
									"scores":	[-3.912023005428146]
								}, {
									"case":	446,
									"scores":	[-3.912023005428146]
								}, {
									"case":	447,
									"scores":	[-3.912023005428146]
								}, {
									"case":	448,
									"scores":	[-3.912023005428146]
								}, {
									"case":	449,
									"scores":	[-3.912023005428146]
								}, {
									"case":	450,
									"scores":	[-3.912023005428146]
								}, {
									"case":	451,
									"scores":	[-3.912023005428146]
								}, {
									"case":	452,
									"scores":	[-3.912023005428146]
								}, {
									"case":	453,
									"scores":	[-3.912023005428146]
								}, {
									"case":	454,
									"scores":	[-3.912023005428146]
								}, {
									"case":	455,
									"scores":	[-3.912023005428146]
								}, {
									"case":	456,
									"scores":	[-3.912023005428146]
								}, {
									"case":	457,
									"scores":	[-3.912023005428146]
								}, {
									"case":	458,
									"scores":	[-3.912023005428146]
								}, {
									"case":	459,
									"scores":	[-3.912023005428146]
								}, {
									"case":	460,
									"scores":	[-3.912023005428146]
								}, {
									"case":	461,
									"scores":	[-3.912023005428146]
								}, {
									"case":	462,
									"scores":	[-3.912023005428146]
								}, {
									"case":	463,
									"scores":	[-3.912023005428146]
								}, {
									"case":	464,
									"scores":	[-3.912023005428146]
								}, {
									"case":	465,
									"scores":	[-3.912023005428146]
								}, {
									"case":	466,
									"scores":	[-3.912023005428146]
								}, {
									"case":	467,
									"scores":	[-3.912023005428146]
								}, {
									"case":	468,
									"scores":	[-3.912023005428146]
								}, {
									"case":	469,
									"scores":	[-3.912023005428146]
								}, {
									"case":	470,
									"scores":	[-3.912023005428146]
								}, {
									"case":	471,
									"scores":	[-3.912023005428146]
								}, {
									"case":	472,
									"scores":	[-3.912023005428146]
								}, {
									"case":	473,
									"scores":	[-3.912023005428146]
								}, {
									"case":	474,
									"scores":	[-3.912023005428146]
								}, {
									"case":	475,
									"scores":	[-3.912023005428146]
								}, {
									"case":	476,
									"scores":	[-3.912023005428146]
								}, {
									"case":	477,
									"scores":	[-3.912023005428146]
								}, {
									"case":	478,
									"scores":	[-3.912023005428146]
								}, {
									"case":	479,
									"scores":	[-3.912023005428146]
								}, {
									"case":	480,
									"scores":	[-3.912023005428146]
								}, {
									"case":	481,
									"scores":	[-3.912023005428146]
								}, {
									"case":	482,
									"scores":	[-3.912023005428146]
								}, {
									"case":	483,
									"scores":	[-3.912023005428146]
								}, {
									"case":	484,
									"scores":	[-3.912023005428146]
								}, {
									"case":	485,
									"scores":	[-3.912023005428146]
								}, {
									"case":	486,
									"scores":	[-3.912023005428146]
								}, {
									"case":	487,
									"scores":	[-3.912023005428146]
								}, {
									"case":	488,
									"scores":	[-3.912023005428146]
								}, {
									"case":	489,
									"scores":	[-3.912023005428146]
								}, {
									"case":	490,
									"scores":	[-3.912023005428146]
								}, {
									"case":	491,
									"scores":	[-3.912023005428146]
								}, {
									"case":	492,
									"scores":	[-3.912023005428146]
								}, {
									"case":	493,
									"scores":	[-3.912023005428146]
								}, {
									"case":	494,
									"scores":	[-3.912023005428146]
								}, {
									"case":	495,
									"scores":	[-3.912023005428146]
								}, {
									"case":	496,
									"scores":	[-3.912023005428146]
								}, {
									"case":	497,
									"scores":	[-3.912023005428146]
								}, {
									"case":	498,
									"scores":	[-3.912023005428146]
								}, {
									"case":	499,
									"scores":	[-3.912023005428146]
								}, {
									"case":	500,
									"scores":	[-3.912023005428146]
								}, {
									"case":	501,
									"scores":	[-3.912023005428146]
								}, {
									"case":	502,
									"scores":	[-3.912023005428146]
								}, {
									"case":	503,
									"scores":	[-3.912023005428146]
								}, {
									"case":	504,
									"scores":	[-3.912023005428146]
								}, {
									"case":	505,
									"scores":	[-3.912023005428146]
								}, {
									"case":	506,
									"scores":	[-3.912023005428146]
								}, {
									"case":	507,
									"scores":	[-3.912023005428146]
								}, {
									"case":	508,
									"scores":	[-3.912023005428146]
								}, {
									"case":	509,
									"scores":	[-3.912023005428146]
								}, {
									"case":	510,
									"scores":	[-3.912023005428146]
								}, {
									"case":	511,
									"scores":	[-3.912023005428146]
								}, {
									"case":	512,
									"scores":	[-3.912023005428146]
								}, {
									"case":	513,
									"scores":	[-3.912023005428146]
								}, {
									"case":	514,
									"scores":	[-3.912023005428146]
								}, {
									"case":	515,
									"scores":	[-3.912023005428146]
								}, {
									"case":	516,
									"scores":	[-3.912023005428146]
								}, {
									"case":	517,
									"scores":	[-3.912023005428146]
								}, {
									"case":	518,
									"scores":	[-3.912023005428146]
								}, {
									"case":	519,
									"scores":	[-3.912023005428146]
								}, {
									"case":	520,
									"scores":	[-3.912023005428146]
								}, {
									"case":	521,
									"scores":	[-3.912023005428146]
								}, {
									"case":	522,
									"scores":	[-3.912023005428146]
								}, {
									"case":	523,
									"scores":	[-3.912023005428146]
								}, {
									"case":	524,
									"scores":	[-3.912023005428146]
								}, {
									"case":	525,
									"scores":	[-3.912023005428146]
								}, {
									"case":	526,
									"scores":	[-3.912023005428146]
								}, {
									"case":	527,
									"scores":	[-3.912023005428146]
								}, {
									"case":	528,
									"scores":	[-3.912023005428146]
								}, {
									"case":	529,
									"scores":	[-3.912023005428146]
								}, {
									"case":	530,
									"scores":	[-3.912023005428146]
								}, {
									"case":	531,
									"scores":	[-3.912023005428146]
								}, {
									"case":	532,
									"scores":	[-3.912023005428146]
								}, {
									"case":	533,
									"scores":	[-3.912023005428146]
								}, {
									"case":	534,
									"scores":	[-3.912023005428146]
								}, {
									"case":	535,
									"scores":	[-3.912023005428146]
								}, {
									"case":	536,
									"scores":	[-3.912023005428146]
								}, {
									"case":	537,
									"scores":	[-3.912023005428146]
								}, {
									"case":	538,
									"scores":	[-3.912023005428146]
								}, {
									"case":	539,
									"scores":	[-3.912023005428146]
								}, {
									"case":	540,
									"scores":	[-3.912023005428146]
								}, {
									"case":	541,
									"scores":	[-3.912023005428146]
								}, {
									"case":	542,
									"scores":	[-3.912023005428146]
								}, {
									"case":	543,
									"scores":	[-3.912023005428146]
								}, {
									"case":	544,
									"scores":	[-3.912023005428146]
								}, {
									"case":	545,
									"scores":	[-3.912023005428146]
								}, {
									"case":	546,
									"scores":	[-3.912023005428146]
								}, {
									"case":	547,
									"scores":	[-3.912023005428146]
								}, {
									"case":	548,
									"scores":	[-3.912023005428146]
								}, {
									"case":	549,
									"scores":	[-3.912023005428146]
								}, {
									"case":	550,
									"scores":	[-3.912023005428146]
								}, {
									"case":	551,
									"scores":	[-3.912023005428146]
								}, {
									"case":	552,
									"scores":	[-3.912023005428146]
								}, {
									"case":	553,
									"scores":	[-3.912023005428146]
								}, {
									"case":	554,
									"scores":	[-3.912023005428146]
								}, {
									"case":	555,
									"scores":	[-3.912023005428146]
								}, {
									"case":	556,
									"scores":	[-3.912023005428146]
								}, {
									"case":	557,
									"scores":	[-3.912023005428146]
								}, {
									"case":	558,
									"scores":	[-3.912023005428146]
								}, {
									"case":	559,
									"scores":	[-3.912023005428146]
								}, {
									"case":	560,
									"scores":	[-3.912023005428146]
								}, {
									"case":	561,
									"scores":	[-3.912023005428146]
								}, {
									"case":	562,
									"scores":	[-3.912023005428146]
								}, {
									"case":	563,
									"scores":	[-3.912023005428146]
								}, {
									"case":	564,
									"scores":	[-3.912023005428146]
								}, {
									"case":	565,
									"scores":	[-3.912023005428146]
								}, {
									"case":	566,
									"scores":	[-3.912023005428146]
								}, {
									"case":	567,
									"scores":	[-3.912023005428146]
								}, {
									"case":	568,
									"scores":	[-3.912023005428146]
								}, {
									"case":	569,
									"scores":	[-3.912023005428146]
								}, {
									"case":	570,
									"scores":	[-3.912023005428146]
								}, {
									"case":	571,
									"scores":	[-3.912023005428146]
								}, {
									"case":	572,
									"scores":	[-3.912023005428146]
								}, {
									"case":	573,
									"scores":	[-3.912023005428146]
								}, {
									"case":	574,
									"scores":	[-3.912023005428146]
								}, {
									"case":	575,
									"scores":	[-3.912023005428146]
								}, {
									"case":	576,
									"scores":	[-3.912023005428146]
								}, {
									"case":	577,
									"scores":	[-3.912023005428146]
								}, {
									"case":	578,
									"scores":	[-3.912023005428146]
								}, {
									"case":	579,
									"scores":	[-3.912023005428146]
								}, {
									"case":	580,
									"scores":	[-3.912023005428146]
								}, {
									"case":	581,
									"scores":	[-3.912023005428146]
								}, {
									"case":	582,
									"scores":	[-3.912023005428146]
								}, {
									"case":	583,
									"scores":	[-3.912023005428146]
								}, {
									"case":	584,
									"scores":	[-3.912023005428146]
								}, {
									"case":	585,
									"scores":	[-3.912023005428146]
								}, {
									"case":	586,
									"scores":	[-3.912023005428146]
								}, {
									"case":	587,
									"scores":	[-3.912023005428146]
								}, {
									"case":	588,
									"scores":	[-3.912023005428146]
								}, {
									"case":	589,
									"scores":	[-3.912023005428146]
								}, {
									"case":	590,
									"scores":	[-3.912023005428146]
								}, {
									"case":	591,
									"scores":	[-3.912023005428146]
								}, {
									"case":	592,
									"scores":	[-3.912023005428146]
								}, {
									"case":	593,
									"scores":	[-3.912023005428146]
								}, {
									"case":	594,
									"scores":	[-3.912023005428146]
								}, {
									"case":	595,
									"scores":	[-3.912023005428146]
								}, {
									"case":	596,
									"scores":	[-3.912023005428146]
								}, {
									"case":	597,
									"scores":	[-3.912023005428146]
								}, {
									"case":	598,
									"scores":	[-3.912023005428146]
								}, {
									"case":	599,
									"scores":	[-3.912023005428146]
								}, {
									"case":	600,
									"scores":	[-3.912023005428146]
								}, {
									"case":	601,
									"scores":	[-3.912023005428146]
								}, {
									"case":	602,
									"scores":	[-3.912023005428146]
								}, {
									"case":	603,
									"scores":	[-3.912023005428146]
								}, {
									"case":	604,
									"scores":	[-3.912023005428146]
								}, {
									"case":	605,
									"scores":	[-3.912023005428146]
								}, {
									"case":	606,
									"scores":	[-3.912023005428146]
								}, {
									"case":	607,
									"scores":	[-3.912023005428146]
								}, {
									"case":	608,
									"scores":	[-3.912023005428146]
								}, {
									"case":	609,
									"scores":	[-3.912023005428146]
								}, {
									"case":	610,
									"scores":	[-3.912023005428146]
								}, {
									"case":	611,
									"scores":	[-3.912023005428146]
								}, {
									"case":	612,
									"scores":	[-3.912023005428146]
								}, {
									"case":	613,
									"scores":	[-3.912023005428146]
								}, {
									"case":	614,
									"scores":	[-3.912023005428146]
								}, {
									"case":	615,
									"scores":	[-3.912023005428146]
								}, {
									"case":	616,
									"scores":	[-3.912023005428146]
								}, {
									"case":	617,
									"scores":	[-3.912023005428146]
								}, {
									"case":	618,
									"scores":	[-3.912023005428146]
								}, {
									"case":	619,
									"scores":	[-3.912023005428146]
								}, {
									"case":	620,
									"scores":	[-3.912023005428146]
								}, {
									"case":	621,
									"scores":	[-3.912023005428146]
								}, {
									"case":	622,
									"scores":	[-3.912023005428146]
								}, {
									"case":	623,
									"scores":	[-3.912023005428146]
								}, {
									"case":	624,
									"scores":	[-3.912023005428146]
								}, {
									"case":	625,
									"scores":	[-3.912023005428146]
								}, {
									"case":	626,
									"scores":	[-3.912023005428146]
								}, {
									"case":	627,
									"scores":	[-3.912023005428146]
								}, {
									"case":	628,
									"scores":	[-3.912023005428146]
								}, {
									"case":	629,
									"scores":	[-3.912023005428146]
								}, {
									"case":	630,
									"scores":	[-3.912023005428146]
								}, {
									"case":	631,
									"scores":	[-3.912023005428146]
								}, {
									"case":	632,
									"scores":	[-3.912023005428146]
								}, {
									"case":	633,
									"scores":	[-3.912023005428146]
								}, {
									"case":	634,
									"scores":	[-3.912023005428146]
								}, {
									"case":	635,
									"scores":	[-3.912023005428146]
								}, {
									"case":	636,
									"scores":	[-3.912023005428146]
								}, {
									"case":	637,
									"scores":	[-3.912023005428146]
								}, {
									"case":	638,
									"scores":	[-3.912023005428146]
								}, {
									"case":	639,
									"scores":	[-3.912023005428146]
								}, {
									"case":	640,
									"scores":	[-3.912023005428146]
								}, {
									"case":	641,
									"scores":	[-3.912023005428146]
								}, {
									"case":	642,
									"scores":	[-3.912023005428146]
								}, {
									"case":	643,
									"scores":	[-3.912023005428146]
								}, {
									"case":	644,
									"scores":	[-3.912023005428146]
								}, {
									"case":	645,
									"scores":	[-3.912023005428146]
								}, {
									"case":	646,
									"scores":	[-3.912023005428146]
								}, {
									"case":	647,
									"scores":	[-3.912023005428146]
								}, {
									"case":	648,
									"scores":	[-3.912023005428146]
								}, {
									"case":	649,
									"scores":	[-3.912023005428146]
								}, {
									"case":	650,
									"scores":	[-3.912023005428146]
								}, {
									"case":	651,
									"scores":	[-3.912023005428146]
								}, {
									"case":	652,
									"scores":	[-3.912023005428146]
								}, {
									"case":	653,
									"scores":	[-3.912023005428146]
								}, {
									"case":	654,
									"scores":	[-3.912023005428146]
								}, {
									"case":	655,
									"scores":	[-3.912023005428146]
								}, {
									"case":	656,
									"scores":	[-3.912023005428146]
								}, {
									"case":	657,
									"scores":	[-3.912023005428146]
								}, {
									"case":	658,
									"scores":	[-3.912023005428146]
								}, {
									"case":	659,
									"scores":	[-3.912023005428146]
								}, {
									"case":	660,
									"scores":	[-3.912023005428146]
								}, {
									"case":	661,
									"scores":	[-3.912023005428146]
								}, {
									"case":	662,
									"scores":	[-3.912023005428146]
								}, {
									"case":	663,
									"scores":	[-3.912023005428146]
								}, {
									"case":	664,
									"scores":	[-3.912023005428146]
								}, {
									"case":	665,
									"scores":	[-3.912023005428146]
								}, {
									"case":	666,
									"scores":	[-3.912023005428146]
								}, {
									"case":	667,
									"scores":	[-3.912023005428146]
								}, {
									"case":	668,
									"scores":	[-3.912023005428146]
								}, {
									"case":	669,
									"scores":	[-3.912023005428146]
								}, {
									"case":	670,
									"scores":	[-3.912023005428146]
								}, {
									"case":	671,
									"scores":	[-3.912023005428146]
								}, {
									"case":	672,
									"scores":	[-3.912023005428146]
								}, {
									"case":	673,
									"scores":	[-3.912023005428146]
								}, {
									"case":	674,
									"scores":	[-3.912023005428146]
								}, {
									"case":	675,
									"scores":	[-3.912023005428146]
								}, {
									"case":	676,
									"scores":	[-3.912023005428146]
								}, {
									"case":	677,
									"scores":	[-3.912023005428146]
								}, {
									"case":	678,
									"scores":	[-3.912023005428146]
								}, {
									"case":	679,
									"scores":	[-3.912023005428146]
								}, {
									"case":	680,
									"scores":	[-3.912023005428146]
								}, {
									"case":	681,
									"scores":	[-3.912023005428146]
								}, {
									"case":	682,
									"scores":	[-3.912023005428146]
								}, {
									"case":	683,
									"scores":	[-3.912023005428146]
								}, {
									"case":	684,
									"scores":	[-3.912023005428146]
								}, {
									"case":	685,
									"scores":	[-3.912023005428146]
								}, {
									"case":	686,
									"scores":	[-3.912023005428146]
								}, {
									"case":	687,
									"scores":	[-3.912023005428146]
								}, {
									"case":	688,
									"scores":	[-3.912023005428146]
								}, {
									"case":	689,
									"scores":	[-3.912023005428146]
								}, {
									"case":	690,
									"scores":	[-3.912023005428146]
								}, {
									"case":	691,
									"scores":	[-3.912023005428146]
								}, {
									"case":	692,
									"scores":	[-3.912023005428146]
								}, {
									"case":	693,
									"scores":	[-3.912023005428146]
								}, {
									"case":	694,
									"scores":	[-3.912023005428146]
								}, {
									"case":	695,
									"scores":	[-3.912023005428146]
								}, {
									"case":	696,
									"scores":	[-3.912023005428146]
								}, {
									"case":	697,
									"scores":	[-3.912023005428146]
								}, {
									"case":	698,
									"scores":	[-3.912023005428146]
								}, {
									"case":	699,
									"scores":	[-3.912023005428146]
								}, {
									"case":	700,
									"scores":	[-3.912023005428146]
								}, {
									"case":	701,
									"scores":	[-3.912023005428146]
								}, {
									"case":	702,
									"scores":	[-3.912023005428146]
								}, {
									"case":	703,
									"scores":	[-3.912023005428146]
								}, {
									"case":	704,
									"scores":	[-3.912023005428146]
								}, {
									"case":	705,
									"scores":	[-3.912023005428146]
								}, {
									"case":	706,
									"scores":	[-3.912023005428146]
								}, {
									"case":	707,
									"scores":	[-3.912023005428146]
								}, {
									"case":	708,
									"scores":	[-3.912023005428146]
								}, {
									"case":	709,
									"scores":	[-3.912023005428146]
								}, {
									"case":	710,
									"scores":	[-3.912023005428146]
								}, {
									"case":	711,
									"scores":	[-3.912023005428146]
								}, {
									"case":	712,
									"scores":	[-3.912023005428146]
								}, {
									"case":	713,
									"scores":	[-3.912023005428146]
								}, {
									"case":	714,
									"scores":	[-3.912023005428146]
								}, {
									"case":	715,
									"scores":	[-3.912023005428146]
								}, {
									"case":	716,
									"scores":	[-3.912023005428146]
								}, {
									"case":	717,
									"scores":	[-3.912023005428146]
								}, {
									"case":	718,
									"scores":	[-3.912023005428146]
								}, {
									"case":	719,
									"scores":	[-3.912023005428146]
								}, {
									"case":	720,
									"scores":	[-3.912023005428146]
								}, {
									"case":	721,
									"scores":	[-3.912023005428146]
								}, {
									"case":	722,
									"scores":	[-3.912023005428146]
								}, {
									"case":	723,
									"scores":	[-3.912023005428146]
								}, {
									"case":	724,
									"scores":	[-3.912023005428146]
								}, {
									"case":	725,
									"scores":	[-3.912023005428146]
								}, {
									"case":	726,
									"scores":	[-3.912023005428146]
								}, {
									"case":	727,
									"scores":	[-3.912023005428146]
								}, {
									"case":	728,
									"scores":	[-3.912023005428146]
								}, {
									"case":	729,
									"scores":	[-3.912023005428146]
								}, {
									"case":	730,
									"scores":	[-3.912023005428146]
								}, {
									"case":	731,
									"scores":	[-3.912023005428146]
								}, {
									"case":	732,
									"scores":	[-3.912023005428146]
								}, {
									"case":	733,
									"scores":	[-3.912023005428146]
								}, {
									"case":	734,
									"scores":	[-3.912023005428146]
								}, {
									"case":	735,
									"scores":	[-3.912023005428146]
								}, {
									"case":	736,
									"scores":	[-3.912023005428146]
								}, {
									"case":	737,
									"scores":	[-3.912023005428146]
								}, {
									"case":	738,
									"scores":	[-3.912023005428146]
								}, {
									"case":	739,
									"scores":	[-3.912023005428146]
								}, {
									"case":	740,
									"scores":	[-3.912023005428146]
								}, {
									"case":	741,
									"scores":	[-3.912023005428146]
								}, {
									"case":	742,
									"scores":	[-3.912023005428146]
								}, {
									"case":	743,
									"scores":	[-3.912023005428146]
								}, {
									"case":	744,
									"scores":	[-3.912023005428146]
								}, {
									"case":	745,
									"scores":	[-3.912023005428146]
								}, {
									"case":	746,
									"scores":	[-3.912023005428146]
								}, {
									"case":	747,
									"scores":	[-3.912023005428146]
								}, {
									"case":	748,
									"scores":	[-3.912023005428146]
								}, {
									"case":	749,
									"scores":	[-3.912023005428146]
								}, {
									"case":	750,
									"scores":	[-3.912023005428146]
								}, {
									"case":	751,
									"scores":	[-3.912023005428146]
								}, {
									"case":	752,
									"scores":	[-3.912023005428146]
								}, {
									"case":	753,
									"scores":	[-3.912023005428146]
								}, {
									"case":	754,
									"scores":	[-3.912023005428146]
								}, {
									"case":	755,
									"scores":	[-3.912023005428146]
								}, {
									"case":	756,
									"scores":	[-3.912023005428146]
								}, {
									"case":	757,
									"scores":	[-3.912023005428146]
								}, {
									"case":	758,
									"scores":	[-3.912023005428146]
								}, {
									"case":	759,
									"scores":	[-3.912023005428146]
								}, {
									"case":	760,
									"scores":	[-3.912023005428146]
								}, {
									"case":	761,
									"scores":	[-3.912023005428146]
								}, {
									"case":	762,
									"scores":	[-3.912023005428146]
								}, {
									"case":	763,
									"scores":	[-3.912023005428146]
								}, {
									"case":	764,
									"scores":	[-3.912023005428146]
								}, {
									"case":	765,
									"scores":	[-3.912023005428146]
								}, {
									"case":	766,
									"scores":	[-3.912023005428146]
								}, {
									"case":	767,
									"scores":	[-3.912023005428146]
								}, {
									"case":	768,
									"scores":	[-3.912023005428146]
								}, {
									"case":	769,
									"scores":	[-3.912023005428146]
								}, {
									"case":	770,
									"scores":	[-3.912023005428146]
								}, {
									"case":	771,
									"scores":	[-3.912023005428146]
								}, {
									"case":	772,
									"scores":	[-3.912023005428146]
								}, {
									"case":	773,
									"scores":	[-3.912023005428146]
								}, {
									"case":	774,
									"scores":	[-3.912023005428146]
								}, {
									"case":	775,
									"scores":	[-3.912023005428146]
								}, {
									"case":	776,
									"scores":	[-3.912023005428146]
								}, {
									"case":	777,
									"scores":	[-3.912023005428146]
								}, {
									"case":	778,
									"scores":	[-3.912023005428146]
								}, {
									"case":	779,
									"scores":	[-3.912023005428146]
								}, {
									"case":	780,
									"scores":	[-3.912023005428146]
								}, {
									"case":	781,
									"scores":	[-3.912023005428146]
								}, {
									"case":	782,
									"scores":	[-3.912023005428146]
								}, {
									"case":	783,
									"scores":	[-3.912023005428146]
								}, {
									"case":	784,
									"scores":	[-3.912023005428146]
								}, {
									"case":	785,
									"scores":	[-3.912023005428146]
								}, {
									"case":	786,
									"scores":	[-3.912023005428146]
								}, {
									"case":	787,
									"scores":	[-3.912023005428146]
								}, {
									"case":	788,
									"scores":	[-3.912023005428146]
								}, {
									"case":	789,
									"scores":	[-3.912023005428146]
								}, {
									"case":	790,
									"scores":	[-3.912023005428146]
								}, {
									"case":	791,
									"scores":	[-3.912023005428146]
								}, {
									"case":	792,
									"scores":	[-3.912023005428146]
								}, {
									"case":	793,
									"scores":	[-3.912023005428146]
								}, {
									"case":	794,
									"scores":	[-3.912023005428146]
								}, {
									"case":	795,
									"scores":	[-3.912023005428146]
								}, {
									"case":	796,
									"scores":	[-3.912023005428146]
								}, {
									"case":	797,
									"scores":	[-3.912023005428146]
								}, {
									"case":	798,
									"scores":	[-3.912023005428146]
								}, {
									"case":	799,
									"scores":	[-3.912023005428146]
								}, {
									"case":	800,
									"scores":	[-3.912023005428146]
								}, {
									"case":	801,
									"scores":	[-3.912023005428146]
								}, {
									"case":	802,
									"scores":	[-3.912023005428146]
								}, {
									"case":	803,
									"scores":	[-3.912023005428146]
								}, {
									"case":	804,
									"scores":	[-3.912023005428146]
								}, {
									"case":	805,
									"scores":	[-3.912023005428146]
								}, {
									"case":	806,
									"scores":	[-3.912023005428146]
								}, {
									"case":	807,
									"scores":	[-3.912023005428146]
								}, {
									"case":	808,
									"scores":	[-3.912023005428146]
								}, {
									"case":	809,
									"scores":	[-3.912023005428146]
								}, {
									"case":	810,
									"scores":	[-3.912023005428146]
								}, {
									"case":	811,
									"scores":	[-3.912023005428146]
								}, {
									"case":	812,
									"scores":	[-3.912023005428146]
								}, {
									"case":	813,
									"scores":	[-3.912023005428146]
								}, {
									"case":	814,
									"scores":	[-3.912023005428146]
								}, {
									"case":	815,
									"scores":	[-3.912023005428146]
								}, {
									"case":	816,
									"scores":	[-3.912023005428146]
								}, {
									"case":	817,
									"scores":	[-3.912023005428146]
								}, {
									"case":	818,
									"scores":	[-3.912023005428146]
								}, {
									"case":	819,
									"scores":	[-3.912023005428146]
								}, {
									"case":	820,
									"scores":	[-3.912023005428146]
								}, {
									"case":	821,
									"scores":	[-3.912023005428146]
								}, {
									"case":	822,
									"scores":	[-3.912023005428146]
								}, {
									"case":	823,
									"scores":	[-3.912023005428146]
								}, {
									"case":	824,
									"scores":	[-3.912023005428146]
								}, {
									"case":	825,
									"scores":	[-3.912023005428146]
								}, {
									"case":	826,
									"scores":	[-3.912023005428146]
								}, {
									"case":	827,
									"scores":	[-3.912023005428146]
								}, {
									"case":	828,
									"scores":	[-3.912023005428146]
								}, {
									"case":	829,
									"scores":	[-3.912023005428146]
								}, {
									"case":	830,
									"scores":	[-3.912023005428146]
								}, {
									"case":	831,
									"scores":	[-3.912023005428146]
								}, {
									"case":	832,
									"scores":	[-3.912023005428146]
								}, {
									"case":	833,
									"scores":	[-3.912023005428146]
								}, {
									"case":	834,
									"scores":	[-3.912023005428146]
								}, {
									"case":	835,
									"scores":	[-3.912023005428146]
								}, {
									"case":	836,
									"scores":	[-3.912023005428146]
								}, {
									"case":	837,
									"scores":	[-3.912023005428146]
								}, {
									"case":	838,
									"scores":	[-3.912023005428146]
								}, {
									"case":	839,
									"scores":	[-3.912023005428146]
								}, {
									"case":	840,
									"scores":	[-3.912023005428146]
								}, {
									"case":	841,
									"scores":	[-3.912023005428146]
								}, {
									"case":	842,
									"scores":	[-3.912023005428146]
								}, {
									"case":	843,
									"scores":	[-3.912023005428146]
								}, {
									"case":	844,
									"scores":	[-3.912023005428146]
								}, {
									"case":	845,
									"scores":	[-3.912023005428146]
								}, {
									"case":	846,
									"scores":	[-3.912023005428146]
								}, {
									"case":	847,
									"scores":	[-3.912023005428146]
								}, {
									"case":	848,
									"scores":	[-3.912023005428146]
								}, {
									"case":	849,
									"scores":	[-3.912023005428146]
								}, {
									"case":	850,
									"scores":	[-3.912023005428146]
								}, {
									"case":	851,
									"scores":	[-3.912023005428146]
								}, {
									"case":	852,
									"scores":	[-3.912023005428146]
								}, {
									"case":	853,
									"scores":	[-3.912023005428146]
								}, {
									"case":	854,
									"scores":	[-3.912023005428146]
								}, {
									"case":	855,
									"scores":	[-3.912023005428146]
								}, {
									"case":	856,
									"scores":	[-3.912023005428146]
								}, {
									"case":	857,
									"scores":	[-3.912023005428146]
								}, {
									"case":	858,
									"scores":	[-3.912023005428146]
								}, {
									"case":	859,
									"scores":	[-3.912023005428146]
								}, {
									"case":	860,
									"scores":	[-3.912023005428146]
								}, {
									"case":	861,
									"scores":	[-3.912023005428146]
								}, {
									"case":	862,
									"scores":	[-3.912023005428146]
								}, {
									"case":	863,
									"scores":	[-3.912023005428146]
								}, {
									"case":	864,
									"scores":	[-3.912023005428146]
								}, {
									"case":	865,
									"scores":	[-3.912023005428146]
								}, {
									"case":	866,
									"scores":	[-3.912023005428146]
								}, {
									"case":	867,
									"scores":	[-3.912023005428146]
								}, {
									"case":	868,
									"scores":	[-3.912023005428146]
								}, {
									"case":	869,
									"scores":	[-3.912023005428146]
								}, {
									"case":	870,
									"scores":	[-3.912023005428146]
								}, {
									"case":	871,
									"scores":	[-3.912023005428146]
								}, {
									"case":	872,
									"scores":	[-3.912023005428146]
								}, {
									"case":	873,
									"scores":	[-3.912023005428146]
								}, {
									"case":	874,
									"scores":	[-3.912023005428146]
								}, {
									"case":	875,
									"scores":	[-3.912023005428146]
								}, {
									"case":	876,
									"scores":	[-3.912023005428146]
								}, {
									"case":	877,
									"scores":	[-3.912023005428146]
								}, {
									"case":	878,
									"scores":	[-3.912023005428146]
								}, {
									"case":	879,
									"scores":	[-3.912023005428146]
								}, {
									"case":	880,
									"scores":	[-3.912023005428146]
								}, {
									"case":	881,
									"scores":	[-3.912023005428146]
								}, {
									"case":	882,
									"scores":	[-3.912023005428146]
								}, {
									"case":	883,
									"scores":	[-3.912023005428146]
								}, {
									"case":	884,
									"scores":	[-3.912023005428146]
								}, {
									"case":	885,
									"scores":	[-3.912023005428146]
								}, {
									"case":	886,
									"scores":	[-3.912023005428146]
								}, {
									"case":	887,
									"scores":	[-3.912023005428146]
								}, {
									"case":	888,
									"scores":	[-3.912023005428146]
								}, {
									"case":	889,
									"scores":	[-3.912023005428146]
								}, {
									"case":	890,
									"scores":	[-3.912023005428146]
								}, {
									"case":	891,
									"scores":	[-3.912023005428146]
								}, {
									"case":	892,
									"scores":	[-3.912023005428146]
								}, {
									"case":	893,
									"scores":	[-3.912023005428146]
								}, {
									"case":	894,
									"scores":	[-3.912023005428146]
								}, {
									"case":	895,
									"scores":	[-3.912023005428146]
								}, {
									"case":	896,
									"scores":	[-3.912023005428146]
								}, {
									"case":	897,
									"scores":	[-3.912023005428146]
								}, {
									"case":	898,
									"scores":	[-3.912023005428146]
								}, {
									"case":	899,
									"scores":	[-3.912023005428146]
								}, {
									"case":	900,
									"scores":	[-3.912023005428146]
								}, {
									"case":	901,
									"scores":	[-3.912023005428146]
								}, {
									"case":	902,
									"scores":	[-3.912023005428146]
								}, {
									"case":	903,
									"scores":	[-3.912023005428146]
								}, {
									"case":	904,
									"scores":	[-3.912023005428146]
								}, {
									"case":	905,
									"scores":	[-3.912023005428146]
								}, {
									"case":	906,
									"scores":	[-3.912023005428146]
								}, {
									"case":	907,
									"scores":	[-3.912023005428146]
								}, {
									"case":	908,
									"scores":	[-3.912023005428146]
								}, {
									"case":	909,
									"scores":	[-3.912023005428146]
								}, {
									"case":	910,
									"scores":	[-3.912023005428146]
								}, {
									"case":	911,
									"scores":	[-3.912023005428146]
								}, {
									"case":	912,
									"scores":	[-3.912023005428146]
								}, {
									"case":	913,
									"scores":	[-3.912023005428146]
								}, {
									"case":	914,
									"scores":	[-3.912023005428146]
								}, {
									"case":	915,
									"scores":	[-3.912023005428146]
								}, {
									"case":	916,
									"scores":	[-3.912023005428146]
								}, {
									"case":	917,
									"scores":	[-3.912023005428146]
								}, {
									"case":	918,
									"scores":	[-3.912023005428146]
								}, {
									"case":	919,
									"scores":	[-3.912023005428146]
								}, {
									"case":	920,
									"scores":	[-3.912023005428146]
								}, {
									"case":	921,
									"scores":	[-3.912023005428146]
								}, {
									"case":	922,
									"scores":	[-3.912023005428146]
								}, {
									"case":	923,
									"scores":	[-3.912023005428146]
								}, {
									"case":	924,
									"scores":	[-3.912023005428146]
								}, {
									"case":	925,
									"scores":	[-3.912023005428146]
								}, {
									"case":	926,
									"scores":	[-3.912023005428146]
								}, {
									"case":	927,
									"scores":	[-3.912023005428146]
								}, {
									"case":	928,
									"scores":	[-3.912023005428146]
								}, {
									"case":	929,
									"scores":	[-3.912023005428146]
								}, {
									"case":	930,
									"scores":	[-3.912023005428146]
								}, {
									"case":	931,
									"scores":	[-3.912023005428146]
								}, {
									"case":	932,
									"scores":	[-3.912023005428146]
								}, {
									"case":	933,
									"scores":	[-3.912023005428146]
								}, {
									"case":	934,
									"scores":	[-3.912023005428146]
								}, {
									"case":	935,
									"scores":	[-3.912023005428146]
								}, {
									"case":	936,
									"scores":	[-3.912023005428146]
								}, {
									"case":	937,
									"scores":	[-3.912023005428146]
								}, {
									"case":	938,
									"scores":	[-3.912023005428146]
								}, {
									"case":	939,
									"scores":	[-3.912023005428146]
								}, {
									"case":	940,
									"scores":	[-3.912023005428146]
								}, {
									"case":	941,
									"scores":	[-3.912023005428146]
								}, {
									"case":	942,
									"scores":	[-3.912023005428146]
								}, {
									"case":	943,
									"scores":	[-3.912023005428146]
								}, {
									"case":	944,
									"scores":	[-3.912023005428146]
								}, {
									"case":	945,
									"scores":	[-3.912023005428146]
								}, {
									"case":	946,
									"scores":	[-3.912023005428146]
								}, {
									"case":	947,
									"scores":	[-3.912023005428146]
								}, {
									"case":	948,
									"scores":	[-3.912023005428146]
								}, {
									"case":	949,
									"scores":	[-3.912023005428146]
								}, {
									"case":	950,
									"scores":	[-3.912023005428146]
								}, {
									"case":	951,
									"scores":	[-3.912023005428146]
								}, {
									"case":	952,
									"scores":	[-3.912023005428146]
								}, {
									"case":	953,
									"scores":	[-3.912023005428146]
								}, {
									"case":	954,
									"scores":	[-3.912023005428146]
								}, {
									"case":	955,
									"scores":	[-3.912023005428146]
								}, {
									"case":	956,
									"scores":	[-3.912023005428146]
								}, {
									"case":	957,
									"scores":	[-3.912023005428146]
								}, {
									"case":	958,
									"scores":	[-3.912023005428146]
								}, {
									"case":	959,
									"scores":	[-3.912023005428146]
								}, {
									"case":	960,
									"scores":	[-3.912023005428146]
								}, {
									"case":	961,
									"scores":	[-3.912023005428146]
								}, {
									"case":	962,
									"scores":	[-3.912023005428146]
								}, {
									"case":	963,
									"scores":	[-3.912023005428146]
								}, {
									"case":	964,
									"scores":	[-3.912023005428146]
								}, {
									"case":	965,
									"scores":	[-3.912023005428146]
								}, {
									"case":	966,
									"scores":	[-3.912023005428146]
								}, {
									"case":	967,
									"scores":	[-3.912023005428146]
								}, {
									"case":	968,
									"scores":	[-3.912023005428146]
								}, {
									"case":	969,
									"scores":	[-3.912023005428146]
								}, {
									"case":	970,
									"scores":	[-3.912023005428146]
								}, {
									"case":	971,
									"scores":	[-3.912023005428146]
								}, {
									"case":	972,
									"scores":	[-3.912023005428146]
								}, {
									"case":	973,
									"scores":	[-3.912023005428146]
								}, {
									"case":	974,
									"scores":	[-3.912023005428146]
								}, {
									"case":	975,
									"scores":	[-3.912023005428146]
								}, {
									"case":	976,
									"scores":	[-3.912023005428146]
								}, {
									"case":	977,
									"scores":	[-3.912023005428146]
								}, {
									"case":	978,
									"scores":	[-3.912023005428146]
								}, {
									"case":	979,
									"scores":	[-3.912023005428146]
								}, {
									"case":	980,
									"scores":	[-3.912023005428146]
								}, {
									"case":	981,
									"scores":	[-3.912023005428146]
								}, {
									"case":	982,
									"scores":	[-3.912023005428146]
								}, {
									"case":	983,
									"scores":	[-3.912023005428146]
								}, {
									"case":	984,
									"scores":	[-3.912023005428146]
								}, {
									"case":	985,
									"scores":	[-3.912023005428146]
								}, {
									"case":	986,
									"scores":	[-3.912023005428146]
								}, {
									"case":	987,
									"scores":	[-3.912023005428146]
								}, {
									"case":	988,
									"scores":	[-3.912023005428146]
								}, {
									"case":	989,
									"scores":	[-3.912023005428146]
								}, {
									"case":	990,
									"scores":	[-3.912023005428146]
								}, {
									"case":	991,
									"scores":	[-3.912023005428146]
								}, {
									"case":	992,
									"scores":	[-3.912023005428146]
								}, {
									"case":	993,
									"scores":	[-3.912023005428146]
								}, {
									"case":	994,
									"scores":	[-3.912023005428146]
								}, {
									"case":	995,
									"scores":	[-3.912023005428146]
								}, {
									"case":	996,
									"scores":	[-3.912023005428146]
								}, {
									"case":	997,
									"scores":	[-3.912023005428146]
								}, {
									"case":	998,
									"scores":	[-3.912023005428146]
								}, {
									"case":	999,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1000,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1001,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1002,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1003,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1004,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1005,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1006,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1007,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1008,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1009,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1010,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1011,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1012,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1013,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1014,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1015,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1016,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1017,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1018,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1019,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1020,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1021,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1022,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1023,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1024,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1025,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1026,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1027,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1028,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1029,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1030,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1031,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1032,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1033,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1034,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1035,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1036,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1037,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1038,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1039,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1040,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1041,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1042,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1043,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1044,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1045,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1046,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1047,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1048,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1049,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1050,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1051,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1052,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1053,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1054,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1055,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1056,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1057,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1058,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1059,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1060,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1061,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1062,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1063,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1064,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1065,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1066,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1067,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1068,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1069,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1070,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1071,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1072,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1073,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1074,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1075,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1076,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1077,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1078,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1079,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1080,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1081,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1082,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1083,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1084,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1085,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1086,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1087,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1088,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1089,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1090,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1091,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1092,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1093,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1094,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1095,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1096,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1097,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1098,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1099,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1248,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1249,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1250,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1251,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1252,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1253,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1254,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1255,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1256,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1257,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1258,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1259,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1260,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1261,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1262,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1263,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1264,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1265,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1266,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1267,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1268,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1269,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1270,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1271,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1272,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1273,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1274,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1275,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1276,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1277,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1278,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1279,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1280,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1281,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1282,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1283,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1284,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1285,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1286,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1287,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1288,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1289,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1290,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1291,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1292,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1293,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1294,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1295,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1296,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1297,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1298,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1299,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1300,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1301,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1302,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1303,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1304,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1305,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1306,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1307,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1308,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1309,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1310,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1311,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1312,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1313,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1314,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1315,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1316,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1317,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1318,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1319,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1320,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1321,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1322,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1323,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1324,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1325,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1326,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1327,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1328,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1329,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1330,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1331,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1332,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1333,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1334,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1335,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1336,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1337,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1338,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1339,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1340,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1341,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1342,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1343,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1344,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1345,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1346,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1347,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1348,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1349,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1350,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1351,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1352,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1353,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1354,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1355,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1356,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1357,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1358,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1359,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1360,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1361,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1362,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1363,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1364,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1365,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1366,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1367,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1368,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1369,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1370,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1371,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1372,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1373,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1374,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1375,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1376,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1377,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1378,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1379,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1380,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1381,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1382,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1383,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1384,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1385,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1386,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1387,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1388,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1389,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1390,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1391,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1392,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1393,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1394,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1395,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1396,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1397,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1398,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1399,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1400,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1401,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1402,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1403,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1404,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1405,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1406,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1407,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1408,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1409,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1410,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1411,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1412,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1413,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1414,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1415,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1416,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1417,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1418,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1419,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1420,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1421,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1422,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1423,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1424,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1425,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1426,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1427,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1428,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1429,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1430,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1431,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1432,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1433,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1434,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1435,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1436,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1437,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1438,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1439,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1440,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1441,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1442,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1443,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1444,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1445,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1446,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1447,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1448,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1449,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1450,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1451,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1452,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1453,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1454,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1455,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1456,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1457,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1458,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1459,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1460,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1461,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1462,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1463,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1464,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1465,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1466,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1467,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1468,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1469,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1470,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1471,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1472,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1473,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1474,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1475,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1476,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1477,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1478,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1479,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1480,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1481,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1482,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1483,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1484,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1485,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1486,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1487,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1488,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1489,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1490,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1491,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1492,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1493,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1494,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1495,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1496,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1497,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1498,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1499,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1500,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1501,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1502,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1503,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1504,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1505,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1506,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1507,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1508,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1509,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1510,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1511,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1512,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1513,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1514,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1515,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1516,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1517,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1518,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1519,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1520,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1521,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1522,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1523,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1524,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1525,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1526,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1527,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1528,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1529,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1530,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1531,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1532,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1533,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1534,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1535,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1536,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1537,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1538,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1539,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1540,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1541,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1542,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1543,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1544,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1545,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1546,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1547,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1548,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1549,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1550,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1551,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1552,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1553,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1554,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1555,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1556,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1557,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1558,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1559,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1560,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1561,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1562,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1563,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1564,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1565,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1566,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1567,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1568,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1569,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1570,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1571,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1572,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1573,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1574,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1575,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1576,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1577,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1578,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1579,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1580,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1581,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1582,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1583,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1584,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1585,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1586,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1587,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1588,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1589,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1590,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1591,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1592,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1593,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1594,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1595,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1596,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1597,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1598,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1599,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1600,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1601,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1602,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1603,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1604,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1605,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1606,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1607,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1608,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1609,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1610,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1611,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1612,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1613,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1614,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1615,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1616,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1617,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1618,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1619,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1620,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1621,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1622,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1623,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1624,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1625,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1626,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1627,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1628,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1629,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1630,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1631,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1632,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1633,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1634,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1635,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1636,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1637,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1638,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1639,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1640,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1641,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1642,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1643,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1644,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1645,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1646,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1647,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1648,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1649,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1650,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1651,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1652,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1653,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1654,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1655,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1656,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1657,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1658,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1659,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1660,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1661,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1662,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1663,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1664,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1665,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1666,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1667,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1668,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1669,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1670,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1671,
									"scores":	[-4.7726631054281459, -5.333207105428146, -5.333207105428146, -5.5912928154281456, -5.0307488154281454, -4.7726631054281459, -6.1454847684281457, -5.0307488154281454, -5.0307488154281454, -4.7726631054281459, -4.7726631054281459, -4.7726631054281459, -5.0307488154281454, -5.5849407684281456, -4.7726631054281459, -4.7726631054281459, -4.2538931054281459, -5.0307488154281454, -5.5849407684281456, -5.0307488154281454, -4.7726631054281459, -5.5849407684281456, -4.7726631054281459, -4.7726631054281459, -4.7726631054281459, -4.7726631054281459, -4.7726631054281459]
								}, {
									"case":	1672,
									"scores":	[-4.7716631054281464, -5.3322071054281466, -5.3322071054281466, -5.5902928154281462, -5.029748815428146, -4.7716631054281464, -6.1444847684281463, -5.029748815428146, -5.029748815428146, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -5.029748815428146, -5.5839407684281461, -4.7716631054281464, -4.7716631054281464, -4.2528931054281465, -5.029748815428146, -5.5839407684281461, -5.029748815428146, -4.7716631054281464, -5.5839407684281461, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464]
								}, {
									"case":	1673,
									"scores":	[-4.7716631054281464, -5.3322071054281466, -5.3322071054281466, -5.5902928154281462, -5.029748815428146, -4.7716631054281464, -6.1444847684281463, -5.029748815428146, -5.029748815428146, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -5.029748815428146, -5.5839407684281461, -4.7716631054281464, -4.7716631054281464, -4.2528931054281465, -5.029748815428146, -5.5839407684281461, -5.029748815428146, -4.7716631054281464, -5.5839407684281461, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464]
								}, {
									"case":	1674,
									"scores":	[-4.7716631054281464, -5.3322071054281466, -5.3322071054281466, -5.5902928154281462, -5.029748815428146, -4.7716631054281464, -6.1444847684281463, -5.029748815428146, -5.029748815428146, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -5.029748815428146, -5.5839407684281461, -4.7716631054281464, -4.7716631054281464, -4.2528931054281465, -5.029748815428146, -5.5839407684281461, -5.029748815428146, -4.7716631054281464, -5.5839407684281461, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464, -4.7716631054281464]
								}, {
									"case":	1675,
									"scores":	[-4.7753814754281461, -5.3359254754281462, -5.3359254754281462, -5.5940111854281458, -5.0334671854281456, -4.7753814754281461, -6.1482031384281459, -5.0334671854281456, -5.0334671854281456, -4.7753814754281461, -4.7753814754281461, -4.7753814754281461, -5.0334671854281456, -5.5876591384281458, -4.7753814754281461, -4.7753814754281461, -4.2566114754281461, -5.0334671854281456, -5.5876591384281458, -5.0334671854281456, -4.7753814754281461, -5.5876591384281458, -4.7753814754281461, -4.7753814754281461, -4.7753814754281461, -4.7753814754281461, -4.7753814754281461]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	541,
							"begin_column":	21,
							"end_line":	541,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L541\", 27, &(j), sizeof (j), &(opcode), sizeof (opcode), &(i), sizeof (i), &(codestr), sizeof (codestr), &(blocks), sizeof (blocks), &(const_stack_top), sizeof (const_stack_top), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    continue;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4532580054281459, -4.9988020054281463, -4.9988020054281463, -5.4207680054281457, -4.8752240054281462, -4.4532580054281459, -6.1763034054281452, -4.8752240054281462, -4.8752240054281462, -4.4532580054281459, -4.4532580054281459, -4.4532580054281459, -4.8752240054281462, -5.6307594054281456, -4.4532580054281459, -4.4532580054281459, -4.2818681654281461, -4.8752240054281462, -5.6307594054281456, -4.8752240054281462, -4.4532580054281459, -5.6307594054281456, -4.4532580054281459, -4.4532580054281459, -4.4532580054281459, -4.4532580054281459, -4.4532580054281459]
								}]
						}]
				}, {
					"line":	536,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [], [], [], [], [], [1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296], [], [], [], [], [], []],
							"begin_line":	537,
							"begin_column":	15,
							"end_line":	537,
							"end_column":	15,
							"patch_codes":	["PyMem_Free((addrmap))", "PyMem_Free((blocks))", "PyMem_Free((codestr))", "PyMem_Free((lineno))", "addrmap = (addrmap)", "addrmap[i] = (-1)", "addrmap[i] = (0)", "addrmap[i] = (1)", "addrmap[i] = (10)", "addrmap[i] = (100)", "addrmap[i] = (101)", "addrmap[i] = (102)", "addrmap[i] = (103)", "addrmap[i] = (104)", "addrmap[i] = (107)", "addrmap[i] = (11)", "addrmap[i] = (110)", "addrmap[i] = (111)", "addrmap[i] = (112)", "addrmap[i] = (113)", "addrmap[i] = (114)", "addrmap[i] = (115)", "addrmap[i] = (116)", "addrmap[i] = (119)", "addrmap[i] = (12)", "addrmap[i] = (120)", "addrmap[i] = (121)", "addrmap[i] = (122)", "addrmap[i] = (132)", "addrmap[i] = (134217728)", "addrmap[i] = (143)", "addrmap[i] = (144)", "addrmap[i] = (15)", "addrmap[i] = (19)", "addrmap[i] = (2)", "addrmap[i] = (20)", "addrmap[i] = (22)", "addrmap[i] = (23)", "addrmap[i] = (24)", "addrmap[i] = (25)", "addrmap[i] = (255)", "addrmap[i] = (256)", "addrmap[i] = (26)", "addrmap[i] = (27)", "addrmap[i] = (3)", "addrmap[i] = (32700)", "addrmap[i] = (33554432)", "addrmap[i] = (4)", "addrmap[i] = (403)", "addrmap[i] = (404)", "addrmap[i] = (405)", "addrmap[i] = (410)", "addrmap[i] = (411)", "addrmap[i] = (420)", "addrmap[i] = (438)", "addrmap[i] = (492)", "addrmap[i] = (499)", "addrmap[i] = (5)", "addrmap[i] = (521)", "addrmap[i] = (531)", "addrmap[i] = (533)", "addrmap[i] = (534)", "addrmap[i] = (574)", "addrmap[i] = (580)", "addrmap[i] = (581)", "addrmap[i] = (582)", "addrmap[i] = (592)", "addrmap[i] = (597)", "addrmap[i] = (598)", "addrmap[i] = (599)", "addrmap[i] = (6)", "addrmap[i] = (62)", "addrmap[i] = (63)", "addrmap[i] = (64)", "addrmap[i] = (65)", "addrmap[i] = (66)", "addrmap[i] = (7)", "addrmap[i] = (716)", "addrmap[i] = (753)", "addrmap[i] = (8)", "addrmap[i] = (83)", "addrmap[i] = (9)", "addrmap[i] = (90)", "addrmap[i] = (92)", "addrmap[i] = (93)", "addrmap[i] = (adj)", "addrmap[i] = (cum_orig_line)", "addrmap[i] = (h)", "addrmap[i] = (in_consts)", "addrmap[i] = (last_line)", "addrmap[i] = (new_line)", "addrmap[i] = (nops)", "addrmap[i] = (opcode)", "addrmap[i] = (tabsiz)", "addrmap[i] = (tgt)", "addrmap[i] = (tgttgt)", "adj = (-1)", "adj = (0)", "adj = (1)", "adj = (10)", "adj = (100)", "adj = (101)", "adj = (102)", "adj = (103)", "adj = (104)", "adj = (107)", "adj = (11)", "adj = (110)", "adj = (111)", "adj = (112)", "adj = (113)", "adj = (114)", "adj = (115)", "adj = (116)", "adj = (119)", "adj = (12)", "adj = (120)", "adj = (121)", "adj = (122)", "adj = (132)", "adj = (134217728)", "adj = (143)", "adj = (144)", "adj = (15)", "adj = (19)", "adj = (2)", "adj = (20)", "adj = (22)", "adj = (23)", "adj = (24)", "adj = (25)", "adj = (255)", "adj = (256)", "adj = (26)", "adj = (27)", "adj = (3)", "adj = (32700)", "adj = (33554432)", "adj = (4)", "adj = (403)", "adj = (404)", "adj = (405)", "adj = (410)", "adj = (411)", "adj = (420)", "adj = (438)", "adj = (492)", "adj = (499)", "adj = (5)", "adj = (521)", "adj = (531)", "adj = (533)", "adj = (534)", "adj = (574)", "adj = (580)", "adj = (581)", "adj = (582)", "adj = (592)", "adj = (597)", "adj = (598)", "adj = (599)", "adj = (6)", "adj = (62)", "adj = (63)", "adj = (64)", "adj = (65)", "adj = (66)", "adj = (7)", "adj = (716)", "adj = (753)", "adj = (8)", "adj = (83)", "adj = (9)", "adj = (90)", "adj = (92)", "adj = (93)", "adj = (adj)", "adj = (cum_orig_line)", "adj = (h)", "adj = (in_consts)", "adj = (last_line)", "adj = (new_line)", "adj = (nops)", "adj = (opcode)", "adj = (tabsiz)", "adj = (tgt)", "adj = (tgttgt)", "blocks = (blocks)", "blocks = markblocks((codestr), codelen)", "blocks = markblocks((lineno), codelen)", "code = (code)", "code = (consts)", "code = (lineno_obj)", "code = (names)", "codelen = (-1)", "codelen = (0)", "codelen = (1)", "codelen = (10)", "codelen = (100)", "codelen = (101)", "codelen = (102)", "codelen = (103)", "codelen = (104)", "codelen = (107)", "codelen = (11)", "codelen = (110)", "codelen = (111)", "codelen = (112)", "codelen = (113)", "codelen = (114)", "codelen = (115)", "codelen = (116)", "codelen = (119)", "codelen = (12)", "codelen = (120)", "codelen = (121)", "codelen = (122)", "codelen = (132)", "codelen = (134217728)", "codelen = (143)", "codelen = (144)", "codelen = (15)", "codelen = (19)", "codelen = (2)", "codelen = (20)", "codelen = (22)", "codelen = (23)", "codelen = (24)", "codelen = (25)", "codelen = (255)", "codelen = (256)", "codelen = (26)", "codelen = (27)", "codelen = (3)", "codelen = (32700)", "codelen = (33554432)", "codelen = (4)", "codelen = (403)", "codelen = (404)", "codelen = (405)", "codelen = (410)", "codelen = (411)", "codelen = (420)", "codelen = (438)", "codelen = (492)", "codelen = (499)", "codelen = (5)", "codelen = (521)", "codelen = (531)", "codelen = (533)", "codelen = (534)", "codelen = (574)", "codelen = (580)", "codelen = (581)", "codelen = (582)", "codelen = (592)", "codelen = (597)", "codelen = (598)", "codelen = (599)", "codelen = (6)", "codelen = (62)", "codelen = (63)", "codelen = (64)", "codelen = (65)", "codelen = (66)", "codelen = (7)", "codelen = (716)", "codelen = (753)", "codelen = (8)", "codelen = (83)", "codelen = (9)", "codelen = (90)", "codelen = (92)", "codelen = (93)", "codelen = (codelen)", "codelen = (const_stack_size)", "codelen = (const_stack_top)", "codelen = (i)", "codelen = (j)", "codestr = (codestr)", "codestr = (lineno)", "codestr[i] = (-1)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "cum_orig_line = (-1)", "cum_orig_line = (0)", "cum_orig_line = (1)", "cum_orig_line = (10)", "cum_orig_line = (100)", "cum_orig_line = (101)", "cum_orig_line = (102)", "cum_orig_line = (103)", "cum_orig_line = (104)", "cum_orig_line = (107)", "cum_orig_line = (11)", "cum_orig_line = (110)", "cum_orig_line = (111)", "cum_orig_line = (112)", "cum_orig_line = (113)", "cum_orig_line = (114)", "cum_orig_line = (115)", "cum_orig_line = (116)", "cum_orig_line = (119)", "cum_orig_line = (12)", "cum_orig_line = (120)", "cum_orig_line = (121)", "cum_orig_line = (122)", "cum_orig_line = (132)", "cum_orig_line = (134217728)", "cum_orig_line = (143)", "cum_orig_line = (144)", "cum_orig_line = (15)", "cum_orig_line = (19)", "cum_orig_line = (2)", "cum_orig_line = (20)", "cum_orig_line = (22)", "cum_orig_line = (23)", "cum_orig_line = (24)", "cum_orig_line = (25)", "cum_orig_line = (255)", "cum_orig_line = (256)", "cum_orig_line = (26)", "cum_orig_line = (27)", "cum_orig_line = (3)", "cum_orig_line = (32700)", "cum_orig_line = (33554432)", "cum_orig_line = (4)", "cum_orig_line = (403)", "cum_orig_line = (404)", "cum_orig_line = (405)", "cum_orig_line = (410)", "cum_orig_line = (411)", "cum_orig_line = (420)", "cum_orig_line = (438)", "cum_orig_line = (492)", "cum_orig_line = (499)", "cum_orig_line = (5)", "cum_orig_line = (521)", "cum_orig_line = (531)", "cum_orig_line = (533)", "cum_orig_line = (534)", "cum_orig_line = (574)", "cum_orig_line = (580)", "cum_orig_line = (581)", "cum_orig_line = (582)", "cum_orig_line = (592)", "cum_orig_line = (597)", "cum_orig_line = (598)", "cum_orig_line = (599)", "cum_orig_line = (6)", "cum_orig_line = (62)", "cum_orig_line = (63)", "cum_orig_line = (64)", "cum_orig_line = (65)", "cum_orig_line = (66)", "cum_orig_line = (7)", "cum_orig_line = (716)", "cum_orig_line = (753)", "cum_orig_line = (8)", "cum_orig_line = (83)", "cum_orig_line = (9)", "cum_orig_line = (90)", "cum_orig_line = (92)", "cum_orig_line = (93)", "cum_orig_line = (adj)", "cum_orig_line = (cum_orig_line)", "cum_orig_line = (h)", "cum_orig_line = (in_consts)", "cum_orig_line = (last_line)", "cum_orig_line = (new_line)", "cum_orig_line = (nops)", "cum_orig_line = (opcode)", "cum_orig_line = (tabsiz)", "cum_orig_line = (tgt)", "cum_orig_line = (tgttgt)", "h = ((const_stack_top >= j - 1) ? (load_const_stack)[const_stack_top - j + 1] : -1)", "h = (-1)", "h = (0)", "h = (1)", "h = (10)", "h = (100)", "h = (101)", "h = (102)", "h = (103)", "h = (104)", "h = (107)", "h = (11)", "h = (110)", "h = (111)", "h = (112)", "h = (113)", "h = (114)", "h = (115)", "h = (116)", "h = (119)", "h = (12)", "h = (120)", "h = (121)", "h = (122)", "h = (132)", "h = (134217728)", "h = (143)", "h = (144)", "h = (15)", "h = (19)", "h = (2)", "h = (20)", "h = (22)", "h = (23)", "h = (24)", "h = (25)", "h = (255)", "h = (256)", "h = (26)", "h = (27)", "h = (3)", "h = (32700)", "h = (33554432)", "h = (4)", "h = (403)", "h = (404)", "h = (405)", "h = (410)", "h = (411)", "h = (420)", "h = (438)", "h = (492)", "h = (499)", "h = (5)", "h = (521)", "h = (531)", "h = (533)", "h = (534)", "h = (574)", "h = (580)", "h = (581)", "h = (582)", "h = (592)", "h = (597)", "h = (598)", "h = (599)", "h = (6)", "h = (62)", "h = (63)", "h = (64)", "h = (65)", "h = (66)", "h = (7)", "h = (716)", "h = (753)", "h = (8)", "h = (83)", "h = (9)", "h = (90)", "h = (92)", "h = (93)", "h = (adj)", "h = (cum_orig_line)", "h = (h)", "h = (in_consts)", "h = (last_line)", "h = (new_line)", "h = (nops)", "h = (opcode)", "h = (tabsiz)", "h = (tgt)", "h = (tgttgt)", "h = load_global((codestr), i, name, consts)", "h = load_global((lineno), i, name, consts)", "h = load_global(codestr, i, (name), consts)", "h = load_global(codestr, i, name, (code))", "h = load_global(codestr, i, name, (consts))", "h = load_global(codestr, i, name, (lineno_obj))", "h = load_global(codestr, i, name, (names))", "in_consts = (-1)", "in_consts = (0)", "in_consts = (1)", "in_consts = (10)", "in_consts = (100)", "in_consts = (101)", "in_consts = (102)", "in_consts = (103)", "in_consts = (104)", "in_consts = (107)", "in_consts = (11)", "in_consts = (110)", "in_consts = (111)", "in_consts = (112)", "in_consts = (113)", "in_consts = (114)", "in_consts = (115)", "in_consts = (116)", "in_consts = (119)", "in_consts = (12)", "in_consts = (120)", "in_consts = (121)", "in_consts = (122)", "in_consts = (132)", "in_consts = (134217728)", "in_consts = (143)", "in_consts = (144)", "in_consts = (15)", "in_consts = (19)", "in_consts = (2)", "in_consts = (20)", "in_consts = (22)", "in_consts = (23)", "in_consts = (24)", "in_consts = (25)", "in_consts = (255)", "in_consts = (256)", "in_consts = (26)", "in_consts = (27)", "in_consts = (3)", "in_consts = (32700)", "in_consts = (33554432)", "in_consts = (4)", "in_consts = (403)", "in_consts = (404)", "in_consts = (405)", "in_consts = (410)", "in_consts = (411)", "in_consts = (420)", "in_consts = (438)", "in_consts = (492)", "in_consts = (499)", "in_consts = (5)", "in_consts = (521)", "in_consts = (531)", "in_consts = (533)", "in_consts = (534)", "in_consts = (574)", "in_consts = (580)", "in_consts = (581)", "in_consts = (582)", "in_consts = (592)", "in_consts = (597)", "in_consts = (598)", "in_consts = (599)", "in_consts = (6)", "in_consts = (62)", "in_consts = (63)", "in_consts = (64)", "in_consts = (65)", "in_consts = (66)", "in_consts = (7)", "in_consts = (716)", "in_consts = (753)", "in_consts = (8)", "in_consts = (83)", "in_consts = (9)", "in_consts = (90)", "in_consts = (92)", "in_consts = (93)", "in_consts = (adj)", "in_consts = (cum_orig_line)", "in_consts = (h)", "in_consts = (in_consts)", "in_consts = (last_line)", "in_consts = (new_line)", "in_consts = (nops)", "in_consts = (opcode)", "in_consts = (tabsiz)", "in_consts = (tgt)", "in_consts = (tgttgt)", "j = (-1)", "j = (0)", "j = (1)", "j = (10)", "j = (100)", "j = (101)", "j = (102)", "j = (103)", "j = (104)", "j = (107)", "j = (11)", "j = (110)", "j = (111)", "j = (112)", "j = (113)", "j = (114)", "j = (115)", "j = (116)", "j = (119)", "j = (12)", "j = (120)", "j = (121)", "j = (122)", "j = (132)", "j = (134217728)", "j = (143)", "j = (144)", "j = (15)", "j = (19)", "j = (2)", "j = (20)", "j = (22)", "j = (23)", "j = (24)", "j = (25)", "j = (255)", "j = (256)", "j = (26)", "j = (27)", "j = (3)", "j = (32700)", "j = (33554432)", "j = (4)", "j = (403)", "j = (404)", "j = (405)", "j = (410)", "j = (411)", "j = (420)", "j = (438)", "j = (492)", "j = (499)", "j = (5)", "j = (521)", "j = (531)", "j = (533)", "j = (534)", "j = (574)", "j = (580)", "j = (581)", "j = (582)", "j = (592)", "j = (597)", "j = (598)", "j = (599)", "j = (6)", "j = (62)", "j = (63)", "j = (64)", "j = (65)", "j = (66)", "j = (7)", "j = (716)", "j = (753)", "j = (8)", "j = (83)", "j = (9)", "j = (90)", "j = (92)", "j = (93)", "j = (codelen)", "j = (codestr)[tgt]", "j = (const_stack_size)", "j = (const_stack_top)", "j = (i)", "j = (j)", "j = (lineno)[tgt]", "last_line = (-1)", "last_line = (0)", "last_line = (1)", "last_line = (10)", "last_line = (100)", "last_line = (101)", "last_line = (102)", "last_line = (103)", "last_line = (104)", "last_line = (107)", "last_line = (11)", "last_line = (110)", "last_line = (111)", "last_line = (112)", "last_line = (113)", "last_line = (114)", "last_line = (115)", "last_line = (116)", "last_line = (119)", "last_line = (12)", "last_line = (120)", "last_line = (121)", "last_line = (122)", "last_line = (132)", "last_line = (134217728)", "last_line = (143)", "last_line = (144)", "last_line = (15)", "last_line = (19)", "last_line = (2)", "last_line = (20)", "last_line = (22)", "last_line = (23)", "last_line = (24)", "last_line = (25)", "last_line = (255)", "last_line = (256)", "last_line = (26)", "last_line = (27)", "last_line = (3)", "last_line = (32700)", "last_line = (33554432)", "last_line = (4)", "last_line = (403)", "last_line = (404)", "last_line = (405)", "last_line = (410)", "last_line = (411)", "last_line = (420)", "last_line = (438)", "last_line = (492)", "last_line = (499)", "last_line = (5)", "last_line = (521)", "last_line = (531)", "last_line = (533)", "last_line = (534)", "last_line = (574)", "last_line = (580)", "last_line = (581)", "last_line = (582)", "last_line = (592)", "last_line = (597)", "last_line = (598)", "last_line = (599)", "last_line = (6)", "last_line = (62)", "last_line = (63)", "last_line = (64)", "last_line = (65)", "last_line = (66)", "last_line = (7)", "last_line = (716)", "last_line = (753)", "last_line = (8)", "last_line = (83)", "last_line = (9)", "last_line = (90)", "last_line = (92)", "last_line = (93)", "last_line = (adj)", "last_line = (cum_orig_line)", "last_line = (h)", "last_line = (in_consts)", "last_line = (last_line)", "last_line = (new_line)", "last_line = (nops)", "last_line = (opcode)", "last_line = (tabsiz)", "last_line = (tgt)", "last_line = (tgttgt)", "lineno = (codestr)", "lineno = (lineno)", "lineno[i] = (-1)", "lineno[i] = (0)", "lineno[i] = (1)", "lineno[i] = (10)", "lineno[i] = (100)", "lineno[i] = (101)", "lineno[i] = (102)", "lineno[i] = (103)", "lineno[i] = (104)", "lineno[i] = (107)", "lineno[i] = (11)", "lineno[i] = (110)", "lineno[i] = (111)", "lineno[i] = (112)", "lineno[i] = (113)", "lineno[i] = (114)", "lineno[i] = (115)", "lineno[i] = (116)", "lineno[i] = (119)", "lineno[i] = (12)", "lineno[i] = (120)", "lineno[i] = (121)", "lineno[i] = (122)", "lineno[i] = (132)", "lineno[i] = (134217728)", "lineno[i] = (143)", "lineno[i] = (144)", "lineno[i] = (15)", "lineno[i] = (19)", "lineno[i] = (2)", "lineno[i] = (20)", "lineno[i] = (22)", "lineno[i] = (23)", "lineno[i] = (24)", "lineno[i] = (25)", "lineno[i] = (255)", "lineno[i] = (256)", "lineno[i] = (26)", "lineno[i] = (27)", "lineno[i] = (3)", "lineno[i] = (32700)", "lineno[i] = (33554432)", "lineno[i] = (4)", "lineno[i] = (403)", "lineno[i] = (404)", "lineno[i] = (405)", "lineno[i] = (410)", "lineno[i] = (411)", "lineno[i] = (420)", "lineno[i] = (438)", "lineno[i] = (492)", "lineno[i] = (499)", "lineno[i] = (5)", "lineno[i] = (521)", "lineno[i] = (531)", "lineno[i] = (533)", "lineno[i] = (534)", "lineno[i] = (574)", "lineno[i] = (580)", "lineno[i] = (581)", "lineno[i] = (582)", "lineno[i] = (592)", "lineno[i] = (597)", "lineno[i] = (598)", "lineno[i] = (599)", "lineno[i] = (6)", "lineno[i] = (62)", "lineno[i] = (63)", "lineno[i] = (64)", "lineno[i] = (65)", "lineno[i] = (66)", "lineno[i] = (7)", "lineno[i] = (716)", "lineno[i] = (753)", "lineno[i] = (8)", "lineno[i] = (83)", "lineno[i] = (9)", "lineno[i] = (90)", "lineno[i] = (92)", "lineno[i] = (93)", "memset(&(codestr)[h], 9, i - h)", "memset(&(lineno)[h], 9, i - h)", "memset((codestr) + i + 1, 9, 2)", "memset((codestr) + i + 1, 9, 3)", "memset((codestr) + i + 1, 9, 4)", "memset((codestr) + i + 1, 9, 5)", "memset((codestr) + i + 2, 9, 4)", "memset((codestr) + i, 9, 6)", "memset((lineno) + i + 1, 9, 2)", "memset((lineno) + i + 1, 9, 3)", "memset((lineno) + i + 1, 9, 4)", "memset((lineno) + i + 1, 9, 5)", "memset((lineno) + i + 2, 9, 4)", "memset((lineno) + i, 9, 6)", "name = (name)", "new_line = (-1)", "new_line = (0)", "new_line = (1)", "new_line = (10)", "new_line = (100)", "new_line = (101)", "new_line = (102)", "new_line = (103)", "new_line = (104)", "new_line = (107)", "new_line = (11)", "new_line = (110)", "new_line = (111)", "new_line = (112)", "new_line = (113)", "new_line = (114)", "new_line = (115)", "new_line = (116)", "new_line = (119)", "new_line = (12)", "new_line = (120)", "new_line = (121)", "new_line = (122)", "new_line = (132)", "new_line = (134217728)", "new_line = (143)", "new_line = (144)", "new_line = (15)", "new_line = (19)", "new_line = (2)", "new_line = (20)", "new_line = (22)", "new_line = (23)", "new_line = (24)", "new_line = (25)", "new_line = (255)", "new_line = (256)", "new_line = (26)", "new_line = (27)", "new_line = (3)", "new_line = (32700)", "new_line = (33554432)", "new_line = (4)", "new_line = (403)", "new_line = (404)", "new_line = (405)", "new_line = (410)", "new_line = (411)", "new_line = (420)", "new_line = (438)", "new_line = (492)", "new_line = (499)", "new_line = (5)", "new_line = (521)", "new_line = (531)", "new_line = (533)", "new_line = (534)", "new_line = (574)", "new_line = (580)", "new_line = (581)", "new_line = (582)", "new_line = (592)", "new_line = (597)", "new_line = (598)", "new_line = (599)", "new_line = (6)", "new_line = (62)", "new_line = (63)", "new_line = (64)", "new_line = (65)", "new_line = (66)", "new_line = (7)", "new_line = (716)", "new_line = (753)", "new_line = (8)", "new_line = (83)", "new_line = (9)", "new_line = (90)", "new_line = (92)", "new_line = (93)", "new_line = (addrmap)[cum_orig_line]", "new_line = (adj)", "new_line = (cum_orig_line)", "new_line = (h)", "new_line = (in_consts)", "new_line = (last_line)", "new_line = (new_line)", "new_line = (nops)", "new_line = (opcode)", "new_line = (tabsiz)", "new_line = (tgt)", "new_line = (tgttgt)", "opcode = (-1)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (101)", "opcode = (102)", "opcode = (103)", "opcode = (104)", "opcode = (107)", "opcode = (11)", "opcode = (110)", "opcode = (111)", "opcode = (112)", "opcode = (113)", "opcode = (114)", "opcode = (115)", "opcode = (116)", "opcode = (119)", "opcode = (12)", "opcode = (120)", "opcode = (121)", "opcode = (122)", "opcode = (132)", "opcode = (134217728)", "opcode = (143)", "opcode = (144)", "opcode = (15)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (23)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (256)", "opcode = (26)", "opcode = (27)", "opcode = (3)", "opcode = (32700)", "opcode = (33554432)", "opcode = (4)", "opcode = (403)", "opcode = (404)", "opcode = (405)", "opcode = (410)", "opcode = (411)", "opcode = (420)", "opcode = (438)", "opcode = (492)", "opcode = (499)", "opcode = (5)", "opcode = (521)", "opcode = (531)", "opcode = (533)", "opcode = (534)", "opcode = (574)", "opcode = (580)", "opcode = (581)", "opcode = (582)", "opcode = (592)", "opcode = (597)", "opcode = (598)", "opcode = (599)", "opcode = (6)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (7)", "opcode = (716)", "opcode = (753)", "opcode = (8)", "opcode = (83)", "opcode = (9)", "opcode = (90)", "opcode = (92)", "opcode = (93)", "opcode = (adj)", "opcode = (codestr)[i]", "opcode = (cum_orig_line)", "opcode = (h)", "opcode = (in_consts)", "opcode = (last_line)", "opcode = (lineno)[i]", "opcode = (new_line)", "opcode = (nops)", "opcode = (opcode)", "opcode = (tabsiz)", "opcode = (tgt)", "opcode = (tgttgt)", "tabsiz = (-1)", "tabsiz = (0)", "tabsiz = (1)", "tabsiz = (10)", "tabsiz = (100)", "tabsiz = (101)", "tabsiz = (102)", "tabsiz = (103)", "tabsiz = (104)", "tabsiz = (107)", "tabsiz = (11)", "tabsiz = (110)", "tabsiz = (111)", "tabsiz = (112)", "tabsiz = (113)", "tabsiz = (114)", "tabsiz = (115)", "tabsiz = (116)", "tabsiz = (119)", "tabsiz = (12)", "tabsiz = (120)", "tabsiz = (121)", "tabsiz = (122)", "tabsiz = (132)", "tabsiz = (134217728)", "tabsiz = (143)", "tabsiz = (144)", "tabsiz = (15)", "tabsiz = (19)", "tabsiz = (2)", "tabsiz = (20)", "tabsiz = (22)", "tabsiz = (23)", "tabsiz = (24)", "tabsiz = (25)", "tabsiz = (255)", "tabsiz = (256)", "tabsiz = (26)", "tabsiz = (27)", "tabsiz = (3)", "tabsiz = (32700)", "tabsiz = (33554432)", "tabsiz = (4)", "tabsiz = (403)", "tabsiz = (404)", "tabsiz = (405)", "tabsiz = (410)", "tabsiz = (411)", "tabsiz = (420)", "tabsiz = (438)", "tabsiz = (492)", "tabsiz = (499)", "tabsiz = (5)", "tabsiz = (521)", "tabsiz = (531)", "tabsiz = (533)", "tabsiz = (534)", "tabsiz = (574)", "tabsiz = (580)", "tabsiz = (581)", "tabsiz = (582)", "tabsiz = (592)", "tabsiz = (597)", "tabsiz = (598)", "tabsiz = (599)", "tabsiz = (6)", "tabsiz = (62)", "tabsiz = (63)", "tabsiz = (64)", "tabsiz = (65)", "tabsiz = (66)", "tabsiz = (7)", "tabsiz = (716)", "tabsiz = (753)", "tabsiz = (8)", "tabsiz = (83)", "tabsiz = (9)", "tabsiz = (90)", "tabsiz = (92)", "tabsiz = (93)", "tabsiz = (adj)", "tabsiz = (cum_orig_line)", "tabsiz = (h)", "tabsiz = (in_consts)", "tabsiz = (last_line)", "tabsiz = (new_line)", "tabsiz = (nops)", "tabsiz = (opcode)", "tabsiz = (tabsiz)", "tabsiz = (tgt)", "tabsiz = (tgttgt)", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((codestr)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((lineno)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (codestr)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (lineno)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (codestr)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (lineno)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (codestr)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (lineno)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (codestr)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (lineno)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (codestr)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (lineno)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (-1)", "tgttgt = (0)", "tgttgt = (1)", "tgttgt = (10)", "tgttgt = (100)", "tgttgt = (101)", "tgttgt = (102)", "tgttgt = (103)", "tgttgt = (104)", "tgttgt = (107)", "tgttgt = (11)", "tgttgt = (110)", "tgttgt = (111)", "tgttgt = (112)", "tgttgt = (113)", "tgttgt = (114)", "tgttgt = (115)", "tgttgt = (116)", "tgttgt = (119)", "tgttgt = (12)", "tgttgt = (120)", "tgttgt = (121)", "tgttgt = (122)", "tgttgt = (132)", "tgttgt = (134217728)", "tgttgt = (143)", "tgttgt = (144)", "tgttgt = (15)", "tgttgt = (19)", "tgttgt = (2)", "tgttgt = (20)", "tgttgt = (22)", "tgttgt = (23)", "tgttgt = (24)", "tgttgt = (25)", "tgttgt = (255)", "tgttgt = (256)", "tgttgt = (26)", "tgttgt = (27)", "tgttgt = (3)", "tgttgt = (32700)", "tgttgt = (33554432)", "tgttgt = (4)", "tgttgt = (403)", "tgttgt = (404)", "tgttgt = (405)", "tgttgt = (410)", "tgttgt = (411)", "tgttgt = (420)", "tgttgt = (438)", "tgttgt = (492)", "tgttgt = (499)", "tgttgt = (5)", "tgttgt = (521)", "tgttgt = (531)", "tgttgt = (533)", "tgttgt = (534)", "tgttgt = (574)", "tgttgt = (580)", "tgttgt = (581)", "tgttgt = (582)", "tgttgt = (592)", "tgttgt = (597)", "tgttgt = (598)", "tgttgt = (599)", "tgttgt = (6)", "tgttgt = (62)", "tgttgt = (63)", "tgttgt = (64)", "tgttgt = (65)", "tgttgt = (66)", "tgttgt = (7)", "tgttgt = (716)", "tgttgt = (753)", "tgttgt = (8)", "tgttgt = (83)", "tgttgt = (9)", "tgttgt = (90)", "tgttgt = (92)", "tgttgt = (93)", "tgttgt = (adj)", "tgttgt = (cum_orig_line)", "tgttgt = (h)", "tgttgt = (in_consts)", "tgttgt = (last_line)", "tgttgt = (new_line)", "tgttgt = (nops)", "tgttgt = (opcode)", "tgttgt = (tabsiz)", "tgttgt = (tgt)", "tgttgt = (tgttgt)", "((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0))\n        ;\n    else\n        __assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 1)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 1))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 2)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 2))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < j)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < j))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((h + nops == codelen) ? 1 : 0) , __extension__ ({\n    if (h + nops == codelen)\n        ;\n    else\n        __assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((new_line - last_line < 255) ? 1 : 0) , __extension__ ({\n    if (new_line - last_line < 255)\n        ;\n    else\n        __assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "PyMem_Free(addrmap)", "PyMem_Free(blocks)", "PyMem_Free(codestr)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "addrmap = (int *)PyMem_Malloc(codelen * sizeof(int))", "addrmap[i] = i - nops", "adj = (((opcode) >= 90) ? 3 : 1)", "blocks = markblocks(codestr, codelen)", "code = PyBytes_FromStringAndSize((char *)codestr, h)", "codelen = (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(code))->ob_size))", "codestr = (unsigned char *)PyMem_Malloc(codelen)", "codestr = (unsigned char *)memcpy(codestr, (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(code))->ob_sval)), codelen)", "codestr[i] = 114", "codestr[i] = 115", "codestr[i] = 2", "codestr[i] = 3", "codestr[i] = 83", "codestr[i] = j", "codestr[i] = opcode", "cum_orig_line = 0", "h = ((const_stack_top >= j - 1) ? load_const_stack[const_stack_top - j + 1] : -1)", "h = load_global(codestr, i, name, consts)", "in_consts = 0", "j = ((int)((codestr[i + 1 + 2] << 8) + codestr[i + 1 + 1]))", "j = ((int)((codestr[i + 2] << 8) + codestr[i + 1]))", "j = codestr[tgt]", "last_line = 0", "last_line = new_line", "lineno = (unsigned char *)(((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(lineno_obj))->ob_sval))", "lineno[i] = ((unsigned char)(new_line - last_line))", "memset(&codestr[h], 9, i - h)", "memset(codestr + i + 1, 9, 2)", "memset(codestr + i + 1, 9, 3)", "memset(codestr + i + 1, 9, 4)", "memset(codestr + i + 1, 9, 5)", "memset(codestr + i + 2, 9, 4)", "memset(codestr + i, 9, 6)", "name = _PyUnicode_AsString((((PyTupleObject *)(names))->ob_item[j]))", "new_line = addrmap[cum_orig_line]", "nops++", "opcode = 113", "opcode = codestr[i]", "tabsiz = (((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(lineno_obj))->ob_size))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	248,
									"scores":	[-3.912023005428146]
								}, {
									"case":	249,
									"scores":	[-3.912023005428146]
								}, {
									"case":	250,
									"scores":	[-3.912023005428146]
								}, {
									"case":	251,
									"scores":	[-3.912023005428146]
								}, {
									"case":	252,
									"scores":	[-3.912023005428146]
								}, {
									"case":	253,
									"scores":	[-3.912023005428146]
								}, {
									"case":	254,
									"scores":	[-3.912023005428146]
								}, {
									"case":	255,
									"scores":	[-3.912023005428146]
								}, {
									"case":	256,
									"scores":	[-3.912023005428146]
								}, {
									"case":	257,
									"scores":	[-3.912023005428146]
								}, {
									"case":	258,
									"scores":	[-3.912023005428146]
								}, {
									"case":	259,
									"scores":	[-3.912023005428146]
								}, {
									"case":	260,
									"scores":	[-3.912023005428146]
								}, {
									"case":	261,
									"scores":	[-3.912023005428146]
								}, {
									"case":	262,
									"scores":	[-3.912023005428146]
								}, {
									"case":	263,
									"scores":	[-3.912023005428146]
								}, {
									"case":	264,
									"scores":	[-3.912023005428146]
								}, {
									"case":	265,
									"scores":	[-3.912023005428146]
								}, {
									"case":	266,
									"scores":	[-3.912023005428146]
								}, {
									"case":	267,
									"scores":	[-3.912023005428146]
								}, {
									"case":	268,
									"scores":	[-3.912023005428146]
								}, {
									"case":	269,
									"scores":	[-3.912023005428146]
								}, {
									"case":	270,
									"scores":	[-3.912023005428146]
								}, {
									"case":	271,
									"scores":	[-3.912023005428146]
								}, {
									"case":	272,
									"scores":	[-3.912023005428146]
								}, {
									"case":	273,
									"scores":	[-3.912023005428146]
								}, {
									"case":	274,
									"scores":	[-3.912023005428146]
								}, {
									"case":	275,
									"scores":	[-3.912023005428146]
								}, {
									"case":	276,
									"scores":	[-3.912023005428146]
								}, {
									"case":	277,
									"scores":	[-3.912023005428146]
								}, {
									"case":	278,
									"scores":	[-3.912023005428146]
								}, {
									"case":	279,
									"scores":	[-3.912023005428146]
								}, {
									"case":	280,
									"scores":	[-3.912023005428146]
								}, {
									"case":	281,
									"scores":	[-3.912023005428146]
								}, {
									"case":	282,
									"scores":	[-3.912023005428146]
								}, {
									"case":	283,
									"scores":	[-3.912023005428146]
								}, {
									"case":	284,
									"scores":	[-3.912023005428146]
								}, {
									"case":	285,
									"scores":	[-3.912023005428146]
								}, {
									"case":	286,
									"scores":	[-3.912023005428146]
								}, {
									"case":	287,
									"scores":	[-3.912023005428146]
								}, {
									"case":	288,
									"scores":	[-3.912023005428146]
								}, {
									"case":	289,
									"scores":	[-3.912023005428146]
								}, {
									"case":	290,
									"scores":	[-3.912023005428146]
								}, {
									"case":	291,
									"scores":	[-3.912023005428146]
								}, {
									"case":	292,
									"scores":	[-3.912023005428146]
								}, {
									"case":	293,
									"scores":	[-3.912023005428146]
								}, {
									"case":	294,
									"scores":	[-3.912023005428146]
								}, {
									"case":	295,
									"scores":	[-3.912023005428146]
								}, {
									"case":	296,
									"scores":	[-3.912023005428146]
								}, {
									"case":	297,
									"scores":	[-3.912023005428146]
								}, {
									"case":	298,
									"scores":	[-3.912023005428146]
								}, {
									"case":	299,
									"scores":	[-3.912023005428146]
								}, {
									"case":	300,
									"scores":	[-3.912023005428146]
								}, {
									"case":	301,
									"scores":	[-3.912023005428146]
								}, {
									"case":	302,
									"scores":	[-3.912023005428146]
								}, {
									"case":	303,
									"scores":	[-3.912023005428146]
								}, {
									"case":	304,
									"scores":	[-3.912023005428146]
								}, {
									"case":	305,
									"scores":	[-3.912023005428146]
								}, {
									"case":	306,
									"scores":	[-3.912023005428146]
								}, {
									"case":	307,
									"scores":	[-3.912023005428146]
								}, {
									"case":	308,
									"scores":	[-3.912023005428146]
								}, {
									"case":	309,
									"scores":	[-3.912023005428146]
								}, {
									"case":	310,
									"scores":	[-3.912023005428146]
								}, {
									"case":	311,
									"scores":	[-3.912023005428146]
								}, {
									"case":	312,
									"scores":	[-3.912023005428146]
								}, {
									"case":	313,
									"scores":	[-3.912023005428146]
								}, {
									"case":	314,
									"scores":	[-3.912023005428146]
								}, {
									"case":	315,
									"scores":	[-3.912023005428146]
								}, {
									"case":	316,
									"scores":	[-3.912023005428146]
								}, {
									"case":	317,
									"scores":	[-3.912023005428146]
								}, {
									"case":	318,
									"scores":	[-3.912023005428146]
								}, {
									"case":	319,
									"scores":	[-3.912023005428146]
								}, {
									"case":	320,
									"scores":	[-3.912023005428146]
								}, {
									"case":	321,
									"scores":	[-3.912023005428146]
								}, {
									"case":	322,
									"scores":	[-3.912023005428146]
								}, {
									"case":	323,
									"scores":	[-3.912023005428146]
								}, {
									"case":	324,
									"scores":	[-3.912023005428146]
								}, {
									"case":	325,
									"scores":	[-3.912023005428146]
								}, {
									"case":	326,
									"scores":	[-3.912023005428146]
								}, {
									"case":	327,
									"scores":	[-3.912023005428146]
								}, {
									"case":	328,
									"scores":	[-3.912023005428146]
								}, {
									"case":	329,
									"scores":	[-3.912023005428146]
								}, {
									"case":	330,
									"scores":	[-3.912023005428146]
								}, {
									"case":	331,
									"scores":	[-3.912023005428146]
								}, {
									"case":	332,
									"scores":	[-3.912023005428146]
								}, {
									"case":	333,
									"scores":	[-3.912023005428146]
								}, {
									"case":	334,
									"scores":	[-3.912023005428146]
								}, {
									"case":	335,
									"scores":	[-3.912023005428146]
								}, {
									"case":	336,
									"scores":	[-3.912023005428146]
								}, {
									"case":	337,
									"scores":	[-3.912023005428146]
								}, {
									"case":	338,
									"scores":	[-3.912023005428146]
								}, {
									"case":	339,
									"scores":	[-3.912023005428146]
								}, {
									"case":	340,
									"scores":	[-3.912023005428146]
								}, {
									"case":	341,
									"scores":	[-3.912023005428146]
								}, {
									"case":	342,
									"scores":	[-3.912023005428146]
								}, {
									"case":	343,
									"scores":	[-3.912023005428146]
								}, {
									"case":	344,
									"scores":	[-3.912023005428146]
								}, {
									"case":	345,
									"scores":	[-3.912023005428146]
								}, {
									"case":	346,
									"scores":	[-3.912023005428146]
								}, {
									"case":	347,
									"scores":	[-3.912023005428146]
								}, {
									"case":	348,
									"scores":	[-3.912023005428146]
								}, {
									"case":	349,
									"scores":	[-3.912023005428146]
								}, {
									"case":	350,
									"scores":	[-3.912023005428146]
								}, {
									"case":	351,
									"scores":	[-3.912023005428146]
								}, {
									"case":	352,
									"scores":	[-3.912023005428146]
								}, {
									"case":	353,
									"scores":	[-3.912023005428146]
								}, {
									"case":	354,
									"scores":	[-3.912023005428146]
								}, {
									"case":	355,
									"scores":	[-3.912023005428146]
								}, {
									"case":	356,
									"scores":	[-3.912023005428146]
								}, {
									"case":	357,
									"scores":	[-3.912023005428146]
								}, {
									"case":	358,
									"scores":	[-3.912023005428146]
								}, {
									"case":	359,
									"scores":	[-3.912023005428146]
								}, {
									"case":	360,
									"scores":	[-3.912023005428146]
								}, {
									"case":	361,
									"scores":	[-3.912023005428146]
								}, {
									"case":	362,
									"scores":	[-3.912023005428146]
								}, {
									"case":	363,
									"scores":	[-3.912023005428146]
								}, {
									"case":	364,
									"scores":	[-3.912023005428146]
								}, {
									"case":	365,
									"scores":	[-3.912023005428146]
								}, {
									"case":	366,
									"scores":	[-3.912023005428146]
								}, {
									"case":	367,
									"scores":	[-3.912023005428146]
								}, {
									"case":	368,
									"scores":	[-3.912023005428146]
								}, {
									"case":	369,
									"scores":	[-3.912023005428146]
								}, {
									"case":	370,
									"scores":	[-3.912023005428146]
								}, {
									"case":	371,
									"scores":	[-3.912023005428146]
								}, {
									"case":	372,
									"scores":	[-3.912023005428146]
								}, {
									"case":	373,
									"scores":	[-3.912023005428146]
								}, {
									"case":	374,
									"scores":	[-3.912023005428146]
								}, {
									"case":	375,
									"scores":	[-3.912023005428146]
								}, {
									"case":	376,
									"scores":	[-3.912023005428146]
								}, {
									"case":	377,
									"scores":	[-3.912023005428146]
								}, {
									"case":	378,
									"scores":	[-3.912023005428146]
								}, {
									"case":	379,
									"scores":	[-3.912023005428146]
								}, {
									"case":	380,
									"scores":	[-3.912023005428146]
								}, {
									"case":	381,
									"scores":	[-3.912023005428146]
								}, {
									"case":	382,
									"scores":	[-3.912023005428146]
								}, {
									"case":	383,
									"scores":	[-3.912023005428146]
								}, {
									"case":	384,
									"scores":	[-3.912023005428146]
								}, {
									"case":	385,
									"scores":	[-3.912023005428146]
								}, {
									"case":	386,
									"scores":	[-3.912023005428146]
								}, {
									"case":	387,
									"scores":	[-3.912023005428146]
								}, {
									"case":	388,
									"scores":	[-3.912023005428146]
								}, {
									"case":	389,
									"scores":	[-3.912023005428146]
								}, {
									"case":	390,
									"scores":	[-3.912023005428146]
								}, {
									"case":	391,
									"scores":	[-3.912023005428146]
								}, {
									"case":	392,
									"scores":	[-3.912023005428146]
								}, {
									"case":	393,
									"scores":	[-3.912023005428146]
								}, {
									"case":	394,
									"scores":	[-3.912023005428146]
								}, {
									"case":	395,
									"scores":	[-3.912023005428146]
								}, {
									"case":	396,
									"scores":	[-3.912023005428146]
								}, {
									"case":	397,
									"scores":	[-3.912023005428146]
								}, {
									"case":	398,
									"scores":	[-3.912023005428146]
								}, {
									"case":	399,
									"scores":	[-3.912023005428146]
								}, {
									"case":	400,
									"scores":	[-3.912023005428146]
								}, {
									"case":	401,
									"scores":	[-3.912023005428146]
								}, {
									"case":	402,
									"scores":	[-3.912023005428146]
								}, {
									"case":	403,
									"scores":	[-3.912023005428146]
								}, {
									"case":	404,
									"scores":	[-3.912023005428146]
								}, {
									"case":	405,
									"scores":	[-3.912023005428146]
								}, {
									"case":	406,
									"scores":	[-3.912023005428146]
								}, {
									"case":	407,
									"scores":	[-3.912023005428146]
								}, {
									"case":	408,
									"scores":	[-3.912023005428146]
								}, {
									"case":	409,
									"scores":	[-3.912023005428146]
								}, {
									"case":	410,
									"scores":	[-3.912023005428146]
								}, {
									"case":	411,
									"scores":	[-3.912023005428146]
								}, {
									"case":	412,
									"scores":	[-3.912023005428146]
								}, {
									"case":	413,
									"scores":	[-3.912023005428146]
								}, {
									"case":	414,
									"scores":	[-3.912023005428146]
								}, {
									"case":	415,
									"scores":	[-3.912023005428146]
								}, {
									"case":	416,
									"scores":	[-3.912023005428146]
								}, {
									"case":	417,
									"scores":	[-3.912023005428146]
								}, {
									"case":	418,
									"scores":	[-3.912023005428146]
								}, {
									"case":	419,
									"scores":	[-3.912023005428146]
								}, {
									"case":	420,
									"scores":	[-3.912023005428146]
								}, {
									"case":	421,
									"scores":	[-3.912023005428146]
								}, {
									"case":	422,
									"scores":	[-3.912023005428146]
								}, {
									"case":	423,
									"scores":	[-3.912023005428146]
								}, {
									"case":	424,
									"scores":	[-3.912023005428146]
								}, {
									"case":	425,
									"scores":	[-3.912023005428146]
								}, {
									"case":	426,
									"scores":	[-3.912023005428146]
								}, {
									"case":	427,
									"scores":	[-3.912023005428146]
								}, {
									"case":	428,
									"scores":	[-3.912023005428146]
								}, {
									"case":	429,
									"scores":	[-3.912023005428146]
								}, {
									"case":	430,
									"scores":	[-3.912023005428146]
								}, {
									"case":	431,
									"scores":	[-3.912023005428146]
								}, {
									"case":	432,
									"scores":	[-3.912023005428146]
								}, {
									"case":	433,
									"scores":	[-3.912023005428146]
								}, {
									"case":	434,
									"scores":	[-3.912023005428146]
								}, {
									"case":	435,
									"scores":	[-3.912023005428146]
								}, {
									"case":	436,
									"scores":	[-3.912023005428146]
								}, {
									"case":	437,
									"scores":	[-3.912023005428146]
								}, {
									"case":	438,
									"scores":	[-3.912023005428146]
								}, {
									"case":	439,
									"scores":	[-3.912023005428146]
								}, {
									"case":	440,
									"scores":	[-3.912023005428146]
								}, {
									"case":	441,
									"scores":	[-3.912023005428146]
								}, {
									"case":	442,
									"scores":	[-3.912023005428146]
								}, {
									"case":	443,
									"scores":	[-3.912023005428146]
								}, {
									"case":	444,
									"scores":	[-3.912023005428146]
								}, {
									"case":	445,
									"scores":	[-3.912023005428146]
								}, {
									"case":	446,
									"scores":	[-3.912023005428146]
								}, {
									"case":	447,
									"scores":	[-3.912023005428146]
								}, {
									"case":	448,
									"scores":	[-3.912023005428146]
								}, {
									"case":	449,
									"scores":	[-3.912023005428146]
								}, {
									"case":	450,
									"scores":	[-3.912023005428146]
								}, {
									"case":	451,
									"scores":	[-3.912023005428146]
								}, {
									"case":	452,
									"scores":	[-3.912023005428146]
								}, {
									"case":	453,
									"scores":	[-3.912023005428146]
								}, {
									"case":	454,
									"scores":	[-3.912023005428146]
								}, {
									"case":	455,
									"scores":	[-3.912023005428146]
								}, {
									"case":	456,
									"scores":	[-3.912023005428146]
								}, {
									"case":	457,
									"scores":	[-3.912023005428146]
								}, {
									"case":	458,
									"scores":	[-3.912023005428146]
								}, {
									"case":	459,
									"scores":	[-3.912023005428146]
								}, {
									"case":	460,
									"scores":	[-3.912023005428146]
								}, {
									"case":	461,
									"scores":	[-3.912023005428146]
								}, {
									"case":	462,
									"scores":	[-3.912023005428146]
								}, {
									"case":	463,
									"scores":	[-3.912023005428146]
								}, {
									"case":	464,
									"scores":	[-3.912023005428146]
								}, {
									"case":	465,
									"scores":	[-3.912023005428146]
								}, {
									"case":	466,
									"scores":	[-3.912023005428146]
								}, {
									"case":	467,
									"scores":	[-3.912023005428146]
								}, {
									"case":	468,
									"scores":	[-3.912023005428146]
								}, {
									"case":	469,
									"scores":	[-3.912023005428146]
								}, {
									"case":	470,
									"scores":	[-3.912023005428146]
								}, {
									"case":	471,
									"scores":	[-3.912023005428146]
								}, {
									"case":	472,
									"scores":	[-3.912023005428146]
								}, {
									"case":	473,
									"scores":	[-3.912023005428146]
								}, {
									"case":	474,
									"scores":	[-3.912023005428146]
								}, {
									"case":	475,
									"scores":	[-3.912023005428146]
								}, {
									"case":	476,
									"scores":	[-3.912023005428146]
								}, {
									"case":	477,
									"scores":	[-3.912023005428146]
								}, {
									"case":	478,
									"scores":	[-3.912023005428146]
								}, {
									"case":	479,
									"scores":	[-3.912023005428146]
								}, {
									"case":	480,
									"scores":	[-3.912023005428146]
								}, {
									"case":	481,
									"scores":	[-3.912023005428146]
								}, {
									"case":	482,
									"scores":	[-3.912023005428146]
								}, {
									"case":	483,
									"scores":	[-3.912023005428146]
								}, {
									"case":	484,
									"scores":	[-3.912023005428146]
								}, {
									"case":	485,
									"scores":	[-3.912023005428146]
								}, {
									"case":	486,
									"scores":	[-3.912023005428146]
								}, {
									"case":	487,
									"scores":	[-3.912023005428146]
								}, {
									"case":	488,
									"scores":	[-3.912023005428146]
								}, {
									"case":	489,
									"scores":	[-3.912023005428146]
								}, {
									"case":	490,
									"scores":	[-3.912023005428146]
								}, {
									"case":	491,
									"scores":	[-3.912023005428146]
								}, {
									"case":	492,
									"scores":	[-3.912023005428146]
								}, {
									"case":	493,
									"scores":	[-3.912023005428146]
								}, {
									"case":	494,
									"scores":	[-3.912023005428146]
								}, {
									"case":	495,
									"scores":	[-3.912023005428146]
								}, {
									"case":	496,
									"scores":	[-3.912023005428146]
								}, {
									"case":	497,
									"scores":	[-3.912023005428146]
								}, {
									"case":	498,
									"scores":	[-3.912023005428146]
								}, {
									"case":	499,
									"scores":	[-3.912023005428146]
								}, {
									"case":	500,
									"scores":	[-3.912023005428146]
								}, {
									"case":	501,
									"scores":	[-3.912023005428146]
								}, {
									"case":	502,
									"scores":	[-3.912023005428146]
								}, {
									"case":	503,
									"scores":	[-3.912023005428146]
								}, {
									"case":	504,
									"scores":	[-3.912023005428146]
								}, {
									"case":	505,
									"scores":	[-3.912023005428146]
								}, {
									"case":	506,
									"scores":	[-3.912023005428146]
								}, {
									"case":	507,
									"scores":	[-3.912023005428146]
								}, {
									"case":	508,
									"scores":	[-3.912023005428146]
								}, {
									"case":	509,
									"scores":	[-3.912023005428146]
								}, {
									"case":	510,
									"scores":	[-3.912023005428146]
								}, {
									"case":	511,
									"scores":	[-3.912023005428146]
								}, {
									"case":	512,
									"scores":	[-3.912023005428146]
								}, {
									"case":	513,
									"scores":	[-3.912023005428146]
								}, {
									"case":	514,
									"scores":	[-3.912023005428146]
								}, {
									"case":	515,
									"scores":	[-3.912023005428146]
								}, {
									"case":	516,
									"scores":	[-3.912023005428146]
								}, {
									"case":	517,
									"scores":	[-3.912023005428146]
								}, {
									"case":	518,
									"scores":	[-3.912023005428146]
								}, {
									"case":	519,
									"scores":	[-3.912023005428146]
								}, {
									"case":	520,
									"scores":	[-3.912023005428146]
								}, {
									"case":	521,
									"scores":	[-3.912023005428146]
								}, {
									"case":	522,
									"scores":	[-3.912023005428146]
								}, {
									"case":	523,
									"scores":	[-3.912023005428146]
								}, {
									"case":	524,
									"scores":	[-3.912023005428146]
								}, {
									"case":	525,
									"scores":	[-3.912023005428146]
								}, {
									"case":	526,
									"scores":	[-3.912023005428146]
								}, {
									"case":	527,
									"scores":	[-3.912023005428146]
								}, {
									"case":	528,
									"scores":	[-3.912023005428146]
								}, {
									"case":	529,
									"scores":	[-3.912023005428146]
								}, {
									"case":	530,
									"scores":	[-3.912023005428146]
								}, {
									"case":	531,
									"scores":	[-3.912023005428146]
								}, {
									"case":	532,
									"scores":	[-3.912023005428146]
								}, {
									"case":	533,
									"scores":	[-3.912023005428146]
								}, {
									"case":	534,
									"scores":	[-3.912023005428146]
								}, {
									"case":	535,
									"scores":	[-3.912023005428146]
								}, {
									"case":	536,
									"scores":	[-3.912023005428146]
								}, {
									"case":	537,
									"scores":	[-3.912023005428146]
								}, {
									"case":	538,
									"scores":	[-3.912023005428146]
								}, {
									"case":	539,
									"scores":	[-3.912023005428146]
								}, {
									"case":	540,
									"scores":	[-3.912023005428146]
								}, {
									"case":	541,
									"scores":	[-3.912023005428146]
								}, {
									"case":	542,
									"scores":	[-3.912023005428146]
								}, {
									"case":	543,
									"scores":	[-3.912023005428146]
								}, {
									"case":	544,
									"scores":	[-3.912023005428146]
								}, {
									"case":	545,
									"scores":	[-3.912023005428146]
								}, {
									"case":	546,
									"scores":	[-3.912023005428146]
								}, {
									"case":	547,
									"scores":	[-3.912023005428146]
								}, {
									"case":	548,
									"scores":	[-3.912023005428146]
								}, {
									"case":	549,
									"scores":	[-3.912023005428146]
								}, {
									"case":	550,
									"scores":	[-3.912023005428146]
								}, {
									"case":	551,
									"scores":	[-3.912023005428146]
								}, {
									"case":	552,
									"scores":	[-3.912023005428146]
								}, {
									"case":	553,
									"scores":	[-3.912023005428146]
								}, {
									"case":	554,
									"scores":	[-3.912023005428146]
								}, {
									"case":	555,
									"scores":	[-3.912023005428146]
								}, {
									"case":	556,
									"scores":	[-3.912023005428146]
								}, {
									"case":	557,
									"scores":	[-3.912023005428146]
								}, {
									"case":	558,
									"scores":	[-3.912023005428146]
								}, {
									"case":	559,
									"scores":	[-3.912023005428146]
								}, {
									"case":	560,
									"scores":	[-3.912023005428146]
								}, {
									"case":	561,
									"scores":	[-3.912023005428146]
								}, {
									"case":	562,
									"scores":	[-3.912023005428146]
								}, {
									"case":	563,
									"scores":	[-3.912023005428146]
								}, {
									"case":	564,
									"scores":	[-3.912023005428146]
								}, {
									"case":	565,
									"scores":	[-3.912023005428146]
								}, {
									"case":	566,
									"scores":	[-3.912023005428146]
								}, {
									"case":	567,
									"scores":	[-3.912023005428146]
								}, {
									"case":	568,
									"scores":	[-3.912023005428146]
								}, {
									"case":	569,
									"scores":	[-3.912023005428146]
								}, {
									"case":	570,
									"scores":	[-3.912023005428146]
								}, {
									"case":	571,
									"scores":	[-3.912023005428146]
								}, {
									"case":	572,
									"scores":	[-3.912023005428146]
								}, {
									"case":	573,
									"scores":	[-3.912023005428146]
								}, {
									"case":	574,
									"scores":	[-3.912023005428146]
								}, {
									"case":	575,
									"scores":	[-3.912023005428146]
								}, {
									"case":	576,
									"scores":	[-3.912023005428146]
								}, {
									"case":	577,
									"scores":	[-3.912023005428146]
								}, {
									"case":	578,
									"scores":	[-3.912023005428146]
								}, {
									"case":	579,
									"scores":	[-3.912023005428146]
								}, {
									"case":	580,
									"scores":	[-3.912023005428146]
								}, {
									"case":	581,
									"scores":	[-3.912023005428146]
								}, {
									"case":	582,
									"scores":	[-3.912023005428146]
								}, {
									"case":	583,
									"scores":	[-3.912023005428146]
								}, {
									"case":	584,
									"scores":	[-3.912023005428146]
								}, {
									"case":	585,
									"scores":	[-3.912023005428146]
								}, {
									"case":	586,
									"scores":	[-3.912023005428146]
								}, {
									"case":	587,
									"scores":	[-3.912023005428146]
								}, {
									"case":	588,
									"scores":	[-3.912023005428146]
								}, {
									"case":	589,
									"scores":	[-3.912023005428146]
								}, {
									"case":	590,
									"scores":	[-3.912023005428146]
								}, {
									"case":	591,
									"scores":	[-3.912023005428146]
								}, {
									"case":	592,
									"scores":	[-3.912023005428146]
								}, {
									"case":	593,
									"scores":	[-3.912023005428146]
								}, {
									"case":	594,
									"scores":	[-3.912023005428146]
								}, {
									"case":	595,
									"scores":	[-3.912023005428146]
								}, {
									"case":	596,
									"scores":	[-3.912023005428146]
								}, {
									"case":	597,
									"scores":	[-3.912023005428146]
								}, {
									"case":	598,
									"scores":	[-3.912023005428146]
								}, {
									"case":	599,
									"scores":	[-3.912023005428146]
								}, {
									"case":	600,
									"scores":	[-3.912023005428146]
								}, {
									"case":	601,
									"scores":	[-3.912023005428146]
								}, {
									"case":	602,
									"scores":	[-3.912023005428146]
								}, {
									"case":	603,
									"scores":	[-3.912023005428146]
								}, {
									"case":	604,
									"scores":	[-3.912023005428146]
								}, {
									"case":	605,
									"scores":	[-3.912023005428146]
								}, {
									"case":	606,
									"scores":	[-3.912023005428146]
								}, {
									"case":	607,
									"scores":	[-3.912023005428146]
								}, {
									"case":	608,
									"scores":	[-3.912023005428146]
								}, {
									"case":	609,
									"scores":	[-3.912023005428146]
								}, {
									"case":	610,
									"scores":	[-3.912023005428146]
								}, {
									"case":	611,
									"scores":	[-3.912023005428146]
								}, {
									"case":	612,
									"scores":	[-3.912023005428146]
								}, {
									"case":	613,
									"scores":	[-3.912023005428146]
								}, {
									"case":	614,
									"scores":	[-3.912023005428146]
								}, {
									"case":	615,
									"scores":	[-3.912023005428146]
								}, {
									"case":	616,
									"scores":	[-3.912023005428146]
								}, {
									"case":	617,
									"scores":	[-3.912023005428146]
								}, {
									"case":	618,
									"scores":	[-3.912023005428146]
								}, {
									"case":	619,
									"scores":	[-3.912023005428146]
								}, {
									"case":	620,
									"scores":	[-3.912023005428146]
								}, {
									"case":	621,
									"scores":	[-3.912023005428146]
								}, {
									"case":	622,
									"scores":	[-3.912023005428146]
								}, {
									"case":	623,
									"scores":	[-3.912023005428146]
								}, {
									"case":	624,
									"scores":	[-3.912023005428146]
								}, {
									"case":	625,
									"scores":	[-3.912023005428146]
								}, {
									"case":	626,
									"scores":	[-3.912023005428146]
								}, {
									"case":	627,
									"scores":	[-3.912023005428146]
								}, {
									"case":	628,
									"scores":	[-3.912023005428146]
								}, {
									"case":	629,
									"scores":	[-3.912023005428146]
								}, {
									"case":	630,
									"scores":	[-3.912023005428146]
								}, {
									"case":	631,
									"scores":	[-3.912023005428146]
								}, {
									"case":	632,
									"scores":	[-3.912023005428146]
								}, {
									"case":	633,
									"scores":	[-3.912023005428146]
								}, {
									"case":	634,
									"scores":	[-3.912023005428146]
								}, {
									"case":	635,
									"scores":	[-3.912023005428146]
								}, {
									"case":	636,
									"scores":	[-3.912023005428146]
								}, {
									"case":	637,
									"scores":	[-3.912023005428146]
								}, {
									"case":	638,
									"scores":	[-3.912023005428146]
								}, {
									"case":	639,
									"scores":	[-3.912023005428146]
								}, {
									"case":	640,
									"scores":	[-3.912023005428146]
								}, {
									"case":	641,
									"scores":	[-3.912023005428146]
								}, {
									"case":	642,
									"scores":	[-3.912023005428146]
								}, {
									"case":	643,
									"scores":	[-3.912023005428146]
								}, {
									"case":	644,
									"scores":	[-3.912023005428146]
								}, {
									"case":	645,
									"scores":	[-3.912023005428146]
								}, {
									"case":	646,
									"scores":	[-3.912023005428146]
								}, {
									"case":	647,
									"scores":	[-3.912023005428146]
								}, {
									"case":	648,
									"scores":	[-3.912023005428146]
								}, {
									"case":	649,
									"scores":	[-3.912023005428146]
								}, {
									"case":	650,
									"scores":	[-3.912023005428146]
								}, {
									"case":	651,
									"scores":	[-3.912023005428146]
								}, {
									"case":	652,
									"scores":	[-3.912023005428146]
								}, {
									"case":	653,
									"scores":	[-3.912023005428146]
								}, {
									"case":	654,
									"scores":	[-3.912023005428146]
								}, {
									"case":	655,
									"scores":	[-3.912023005428146]
								}, {
									"case":	656,
									"scores":	[-3.912023005428146]
								}, {
									"case":	657,
									"scores":	[-3.912023005428146]
								}, {
									"case":	658,
									"scores":	[-3.912023005428146]
								}, {
									"case":	659,
									"scores":	[-3.912023005428146]
								}, {
									"case":	660,
									"scores":	[-3.912023005428146]
								}, {
									"case":	661,
									"scores":	[-3.912023005428146]
								}, {
									"case":	662,
									"scores":	[-3.912023005428146]
								}, {
									"case":	663,
									"scores":	[-3.912023005428146]
								}, {
									"case":	664,
									"scores":	[-3.912023005428146]
								}, {
									"case":	665,
									"scores":	[-3.912023005428146]
								}, {
									"case":	666,
									"scores":	[-3.912023005428146]
								}, {
									"case":	667,
									"scores":	[-3.912023005428146]
								}, {
									"case":	668,
									"scores":	[-3.912023005428146]
								}, {
									"case":	669,
									"scores":	[-3.912023005428146]
								}, {
									"case":	670,
									"scores":	[-3.912023005428146]
								}, {
									"case":	671,
									"scores":	[-3.912023005428146]
								}, {
									"case":	672,
									"scores":	[-3.912023005428146]
								}, {
									"case":	673,
									"scores":	[-3.912023005428146]
								}, {
									"case":	674,
									"scores":	[-3.912023005428146]
								}, {
									"case":	675,
									"scores":	[-3.912023005428146]
								}, {
									"case":	676,
									"scores":	[-3.912023005428146]
								}, {
									"case":	677,
									"scores":	[-3.912023005428146]
								}, {
									"case":	678,
									"scores":	[-3.912023005428146]
								}, {
									"case":	679,
									"scores":	[-3.912023005428146]
								}, {
									"case":	680,
									"scores":	[-3.912023005428146]
								}, {
									"case":	681,
									"scores":	[-3.912023005428146]
								}, {
									"case":	682,
									"scores":	[-3.912023005428146]
								}, {
									"case":	683,
									"scores":	[-3.912023005428146]
								}, {
									"case":	684,
									"scores":	[-3.912023005428146]
								}, {
									"case":	685,
									"scores":	[-3.912023005428146]
								}, {
									"case":	686,
									"scores":	[-3.912023005428146]
								}, {
									"case":	687,
									"scores":	[-3.912023005428146]
								}, {
									"case":	688,
									"scores":	[-3.912023005428146]
								}, {
									"case":	689,
									"scores":	[-3.912023005428146]
								}, {
									"case":	690,
									"scores":	[-3.912023005428146]
								}, {
									"case":	691,
									"scores":	[-3.912023005428146]
								}, {
									"case":	692,
									"scores":	[-3.912023005428146]
								}, {
									"case":	693,
									"scores":	[-3.912023005428146]
								}, {
									"case":	694,
									"scores":	[-3.912023005428146]
								}, {
									"case":	695,
									"scores":	[-3.912023005428146]
								}, {
									"case":	696,
									"scores":	[-3.912023005428146]
								}, {
									"case":	697,
									"scores":	[-3.912023005428146]
								}, {
									"case":	698,
									"scores":	[-3.912023005428146]
								}, {
									"case":	699,
									"scores":	[-3.912023005428146]
								}, {
									"case":	700,
									"scores":	[-3.912023005428146]
								}, {
									"case":	701,
									"scores":	[-3.912023005428146]
								}, {
									"case":	702,
									"scores":	[-3.912023005428146]
								}, {
									"case":	703,
									"scores":	[-3.912023005428146]
								}, {
									"case":	704,
									"scores":	[-3.912023005428146]
								}, {
									"case":	705,
									"scores":	[-3.912023005428146]
								}, {
									"case":	706,
									"scores":	[-3.912023005428146]
								}, {
									"case":	707,
									"scores":	[-3.912023005428146]
								}, {
									"case":	708,
									"scores":	[-3.912023005428146]
								}, {
									"case":	709,
									"scores":	[-3.912023005428146]
								}, {
									"case":	710,
									"scores":	[-3.912023005428146]
								}, {
									"case":	711,
									"scores":	[-3.912023005428146]
								}, {
									"case":	712,
									"scores":	[-3.912023005428146]
								}, {
									"case":	713,
									"scores":	[-3.912023005428146]
								}, {
									"case":	714,
									"scores":	[-3.912023005428146]
								}, {
									"case":	715,
									"scores":	[-3.912023005428146]
								}, {
									"case":	716,
									"scores":	[-3.912023005428146]
								}, {
									"case":	717,
									"scores":	[-3.912023005428146]
								}, {
									"case":	718,
									"scores":	[-3.912023005428146]
								}, {
									"case":	719,
									"scores":	[-3.912023005428146]
								}, {
									"case":	720,
									"scores":	[-3.912023005428146]
								}, {
									"case":	721,
									"scores":	[-3.912023005428146]
								}, {
									"case":	722,
									"scores":	[-3.912023005428146]
								}, {
									"case":	723,
									"scores":	[-3.912023005428146]
								}, {
									"case":	724,
									"scores":	[-3.912023005428146]
								}, {
									"case":	725,
									"scores":	[-3.912023005428146]
								}, {
									"case":	726,
									"scores":	[-3.912023005428146]
								}, {
									"case":	727,
									"scores":	[-3.912023005428146]
								}, {
									"case":	728,
									"scores":	[-3.912023005428146]
								}, {
									"case":	729,
									"scores":	[-3.912023005428146]
								}, {
									"case":	730,
									"scores":	[-3.912023005428146]
								}, {
									"case":	731,
									"scores":	[-3.912023005428146]
								}, {
									"case":	732,
									"scores":	[-3.912023005428146]
								}, {
									"case":	733,
									"scores":	[-3.912023005428146]
								}, {
									"case":	734,
									"scores":	[-3.912023005428146]
								}, {
									"case":	735,
									"scores":	[-3.912023005428146]
								}, {
									"case":	736,
									"scores":	[-3.912023005428146]
								}, {
									"case":	737,
									"scores":	[-3.912023005428146]
								}, {
									"case":	738,
									"scores":	[-3.912023005428146]
								}, {
									"case":	739,
									"scores":	[-3.912023005428146]
								}, {
									"case":	740,
									"scores":	[-3.912023005428146]
								}, {
									"case":	741,
									"scores":	[-3.912023005428146]
								}, {
									"case":	742,
									"scores":	[-3.912023005428146]
								}, {
									"case":	743,
									"scores":	[-3.912023005428146]
								}, {
									"case":	744,
									"scores":	[-3.912023005428146]
								}, {
									"case":	745,
									"scores":	[-3.912023005428146]
								}, {
									"case":	746,
									"scores":	[-3.912023005428146]
								}, {
									"case":	747,
									"scores":	[-3.912023005428146]
								}, {
									"case":	748,
									"scores":	[-3.912023005428146]
								}, {
									"case":	749,
									"scores":	[-3.912023005428146]
								}, {
									"case":	750,
									"scores":	[-3.912023005428146]
								}, {
									"case":	751,
									"scores":	[-3.912023005428146]
								}, {
									"case":	752,
									"scores":	[-3.912023005428146]
								}, {
									"case":	753,
									"scores":	[-3.912023005428146]
								}, {
									"case":	754,
									"scores":	[-3.912023005428146]
								}, {
									"case":	755,
									"scores":	[-3.912023005428146]
								}, {
									"case":	756,
									"scores":	[-3.912023005428146]
								}, {
									"case":	757,
									"scores":	[-3.912023005428146]
								}, {
									"case":	758,
									"scores":	[-3.912023005428146]
								}, {
									"case":	759,
									"scores":	[-3.912023005428146]
								}, {
									"case":	760,
									"scores":	[-3.912023005428146]
								}, {
									"case":	761,
									"scores":	[-3.912023005428146]
								}, {
									"case":	762,
									"scores":	[-3.912023005428146]
								}, {
									"case":	763,
									"scores":	[-3.912023005428146]
								}, {
									"case":	764,
									"scores":	[-3.912023005428146]
								}, {
									"case":	765,
									"scores":	[-3.912023005428146]
								}, {
									"case":	766,
									"scores":	[-3.912023005428146]
								}, {
									"case":	767,
									"scores":	[-3.912023005428146]
								}, {
									"case":	768,
									"scores":	[-3.912023005428146]
								}, {
									"case":	769,
									"scores":	[-3.912023005428146]
								}, {
									"case":	770,
									"scores":	[-3.912023005428146]
								}, {
									"case":	771,
									"scores":	[-3.912023005428146]
								}, {
									"case":	772,
									"scores":	[-3.912023005428146]
								}, {
									"case":	773,
									"scores":	[-3.912023005428146]
								}, {
									"case":	774,
									"scores":	[-3.912023005428146]
								}, {
									"case":	775,
									"scores":	[-3.912023005428146]
								}, {
									"case":	776,
									"scores":	[-3.912023005428146]
								}, {
									"case":	777,
									"scores":	[-3.912023005428146]
								}, {
									"case":	778,
									"scores":	[-3.912023005428146]
								}, {
									"case":	779,
									"scores":	[-3.912023005428146]
								}, {
									"case":	780,
									"scores":	[-3.912023005428146]
								}, {
									"case":	781,
									"scores":	[-3.912023005428146]
								}, {
									"case":	782,
									"scores":	[-3.912023005428146]
								}, {
									"case":	783,
									"scores":	[-3.912023005428146]
								}, {
									"case":	784,
									"scores":	[-3.912023005428146]
								}, {
									"case":	785,
									"scores":	[-3.912023005428146]
								}, {
									"case":	786,
									"scores":	[-3.912023005428146]
								}, {
									"case":	787,
									"scores":	[-3.912023005428146]
								}, {
									"case":	788,
									"scores":	[-3.912023005428146]
								}, {
									"case":	789,
									"scores":	[-3.912023005428146]
								}, {
									"case":	790,
									"scores":	[-3.912023005428146]
								}, {
									"case":	791,
									"scores":	[-3.912023005428146]
								}, {
									"case":	792,
									"scores":	[-3.912023005428146]
								}, {
									"case":	793,
									"scores":	[-3.912023005428146]
								}, {
									"case":	794,
									"scores":	[-3.912023005428146]
								}, {
									"case":	795,
									"scores":	[-3.912023005428146]
								}, {
									"case":	796,
									"scores":	[-3.912023005428146]
								}, {
									"case":	797,
									"scores":	[-3.912023005428146]
								}, {
									"case":	798,
									"scores":	[-3.912023005428146]
								}, {
									"case":	799,
									"scores":	[-3.912023005428146]
								}, {
									"case":	800,
									"scores":	[-3.912023005428146]
								}, {
									"case":	801,
									"scores":	[-3.912023005428146]
								}, {
									"case":	802,
									"scores":	[-3.912023005428146]
								}, {
									"case":	803,
									"scores":	[-3.912023005428146]
								}, {
									"case":	804,
									"scores":	[-3.912023005428146]
								}, {
									"case":	805,
									"scores":	[-3.912023005428146]
								}, {
									"case":	806,
									"scores":	[-3.912023005428146]
								}, {
									"case":	807,
									"scores":	[-3.912023005428146]
								}, {
									"case":	808,
									"scores":	[-3.912023005428146]
								}, {
									"case":	809,
									"scores":	[-3.912023005428146]
								}, {
									"case":	810,
									"scores":	[-3.912023005428146]
								}, {
									"case":	811,
									"scores":	[-3.912023005428146]
								}, {
									"case":	812,
									"scores":	[-3.912023005428146]
								}, {
									"case":	813,
									"scores":	[-3.912023005428146]
								}, {
									"case":	814,
									"scores":	[-3.912023005428146]
								}, {
									"case":	815,
									"scores":	[-3.912023005428146]
								}, {
									"case":	816,
									"scores":	[-3.912023005428146]
								}, {
									"case":	817,
									"scores":	[-3.912023005428146]
								}, {
									"case":	818,
									"scores":	[-3.912023005428146]
								}, {
									"case":	819,
									"scores":	[-3.912023005428146]
								}, {
									"case":	820,
									"scores":	[-3.912023005428146]
								}, {
									"case":	821,
									"scores":	[-3.912023005428146]
								}, {
									"case":	822,
									"scores":	[-3.912023005428146]
								}, {
									"case":	823,
									"scores":	[-3.912023005428146]
								}, {
									"case":	824,
									"scores":	[-3.912023005428146]
								}, {
									"case":	825,
									"scores":	[-3.912023005428146]
								}, {
									"case":	826,
									"scores":	[-3.912023005428146]
								}, {
									"case":	827,
									"scores":	[-3.912023005428146]
								}, {
									"case":	828,
									"scores":	[-3.912023005428146]
								}, {
									"case":	829,
									"scores":	[-3.912023005428146]
								}, {
									"case":	830,
									"scores":	[-3.912023005428146]
								}, {
									"case":	831,
									"scores":	[-3.912023005428146]
								}, {
									"case":	832,
									"scores":	[-3.912023005428146]
								}, {
									"case":	833,
									"scores":	[-3.912023005428146]
								}, {
									"case":	834,
									"scores":	[-3.912023005428146]
								}, {
									"case":	835,
									"scores":	[-3.912023005428146]
								}, {
									"case":	836,
									"scores":	[-3.912023005428146]
								}, {
									"case":	837,
									"scores":	[-3.912023005428146]
								}, {
									"case":	838,
									"scores":	[-3.912023005428146]
								}, {
									"case":	839,
									"scores":	[-3.912023005428146]
								}, {
									"case":	840,
									"scores":	[-3.912023005428146]
								}, {
									"case":	841,
									"scores":	[-3.912023005428146]
								}, {
									"case":	842,
									"scores":	[-3.912023005428146]
								}, {
									"case":	843,
									"scores":	[-3.912023005428146]
								}, {
									"case":	844,
									"scores":	[-3.912023005428146]
								}, {
									"case":	845,
									"scores":	[-3.912023005428146]
								}, {
									"case":	846,
									"scores":	[-3.912023005428146]
								}, {
									"case":	847,
									"scores":	[-3.912023005428146]
								}, {
									"case":	848,
									"scores":	[-3.912023005428146]
								}, {
									"case":	849,
									"scores":	[-3.912023005428146]
								}, {
									"case":	850,
									"scores":	[-3.912023005428146]
								}, {
									"case":	851,
									"scores":	[-3.912023005428146]
								}, {
									"case":	852,
									"scores":	[-3.912023005428146]
								}, {
									"case":	853,
									"scores":	[-3.912023005428146]
								}, {
									"case":	854,
									"scores":	[-3.912023005428146]
								}, {
									"case":	855,
									"scores":	[-3.912023005428146]
								}, {
									"case":	856,
									"scores":	[-3.912023005428146]
								}, {
									"case":	857,
									"scores":	[-3.912023005428146]
								}, {
									"case":	858,
									"scores":	[-3.912023005428146]
								}, {
									"case":	859,
									"scores":	[-3.912023005428146]
								}, {
									"case":	860,
									"scores":	[-3.912023005428146]
								}, {
									"case":	861,
									"scores":	[-3.912023005428146]
								}, {
									"case":	862,
									"scores":	[-3.912023005428146]
								}, {
									"case":	863,
									"scores":	[-3.912023005428146]
								}, {
									"case":	864,
									"scores":	[-3.912023005428146]
								}, {
									"case":	865,
									"scores":	[-3.912023005428146]
								}, {
									"case":	866,
									"scores":	[-3.912023005428146]
								}, {
									"case":	867,
									"scores":	[-3.912023005428146]
								}, {
									"case":	868,
									"scores":	[-3.912023005428146]
								}, {
									"case":	869,
									"scores":	[-3.912023005428146]
								}, {
									"case":	870,
									"scores":	[-3.912023005428146]
								}, {
									"case":	871,
									"scores":	[-3.912023005428146]
								}, {
									"case":	872,
									"scores":	[-3.912023005428146]
								}, {
									"case":	873,
									"scores":	[-3.912023005428146]
								}, {
									"case":	874,
									"scores":	[-3.912023005428146]
								}, {
									"case":	875,
									"scores":	[-3.912023005428146]
								}, {
									"case":	876,
									"scores":	[-3.912023005428146]
								}, {
									"case":	877,
									"scores":	[-3.912023005428146]
								}, {
									"case":	878,
									"scores":	[-3.912023005428146]
								}, {
									"case":	879,
									"scores":	[-3.912023005428146]
								}, {
									"case":	880,
									"scores":	[-3.912023005428146]
								}, {
									"case":	881,
									"scores":	[-3.912023005428146]
								}, {
									"case":	882,
									"scores":	[-3.912023005428146]
								}, {
									"case":	883,
									"scores":	[-3.912023005428146]
								}, {
									"case":	884,
									"scores":	[-3.912023005428146]
								}, {
									"case":	885,
									"scores":	[-3.912023005428146]
								}, {
									"case":	886,
									"scores":	[-3.912023005428146]
								}, {
									"case":	887,
									"scores":	[-3.912023005428146]
								}, {
									"case":	888,
									"scores":	[-3.912023005428146]
								}, {
									"case":	889,
									"scores":	[-3.912023005428146]
								}, {
									"case":	890,
									"scores":	[-3.912023005428146]
								}, {
									"case":	891,
									"scores":	[-3.912023005428146]
								}, {
									"case":	892,
									"scores":	[-3.912023005428146]
								}, {
									"case":	893,
									"scores":	[-3.912023005428146]
								}, {
									"case":	894,
									"scores":	[-3.912023005428146]
								}, {
									"case":	895,
									"scores":	[-3.912023005428146]
								}, {
									"case":	896,
									"scores":	[-3.912023005428146]
								}, {
									"case":	897,
									"scores":	[-3.912023005428146]
								}, {
									"case":	898,
									"scores":	[-3.912023005428146]
								}, {
									"case":	899,
									"scores":	[-3.912023005428146]
								}, {
									"case":	900,
									"scores":	[-3.912023005428146]
								}, {
									"case":	901,
									"scores":	[-3.912023005428146]
								}, {
									"case":	902,
									"scores":	[-3.912023005428146]
								}, {
									"case":	903,
									"scores":	[-3.912023005428146]
								}, {
									"case":	904,
									"scores":	[-3.912023005428146]
								}, {
									"case":	905,
									"scores":	[-3.912023005428146]
								}, {
									"case":	906,
									"scores":	[-3.912023005428146]
								}, {
									"case":	907,
									"scores":	[-3.912023005428146]
								}, {
									"case":	908,
									"scores":	[-3.912023005428146]
								}, {
									"case":	909,
									"scores":	[-3.912023005428146]
								}, {
									"case":	910,
									"scores":	[-3.912023005428146]
								}, {
									"case":	911,
									"scores":	[-3.912023005428146]
								}, {
									"case":	912,
									"scores":	[-3.912023005428146]
								}, {
									"case":	913,
									"scores":	[-3.912023005428146]
								}, {
									"case":	914,
									"scores":	[-3.912023005428146]
								}, {
									"case":	915,
									"scores":	[-3.912023005428146]
								}, {
									"case":	916,
									"scores":	[-3.912023005428146]
								}, {
									"case":	917,
									"scores":	[-3.912023005428146]
								}, {
									"case":	918,
									"scores":	[-3.912023005428146]
								}, {
									"case":	919,
									"scores":	[-3.912023005428146]
								}, {
									"case":	920,
									"scores":	[-3.912023005428146]
								}, {
									"case":	921,
									"scores":	[-3.912023005428146]
								}, {
									"case":	922,
									"scores":	[-3.912023005428146]
								}, {
									"case":	923,
									"scores":	[-3.912023005428146]
								}, {
									"case":	924,
									"scores":	[-3.912023005428146]
								}, {
									"case":	925,
									"scores":	[-3.912023005428146]
								}, {
									"case":	926,
									"scores":	[-3.912023005428146]
								}, {
									"case":	927,
									"scores":	[-3.912023005428146]
								}, {
									"case":	928,
									"scores":	[-3.912023005428146]
								}, {
									"case":	929,
									"scores":	[-3.912023005428146]
								}, {
									"case":	930,
									"scores":	[-3.912023005428146]
								}, {
									"case":	931,
									"scores":	[-3.912023005428146]
								}, {
									"case":	932,
									"scores":	[-3.912023005428146]
								}, {
									"case":	933,
									"scores":	[-3.912023005428146]
								}, {
									"case":	934,
									"scores":	[-3.912023005428146]
								}, {
									"case":	935,
									"scores":	[-3.912023005428146]
								}, {
									"case":	936,
									"scores":	[-3.912023005428146]
								}, {
									"case":	937,
									"scores":	[-3.912023005428146]
								}, {
									"case":	938,
									"scores":	[-3.912023005428146]
								}, {
									"case":	939,
									"scores":	[-3.912023005428146]
								}, {
									"case":	940,
									"scores":	[-3.912023005428146]
								}, {
									"case":	941,
									"scores":	[-3.912023005428146]
								}, {
									"case":	942,
									"scores":	[-3.912023005428146]
								}, {
									"case":	943,
									"scores":	[-3.912023005428146]
								}, {
									"case":	944,
									"scores":	[-3.912023005428146]
								}, {
									"case":	945,
									"scores":	[-3.912023005428146]
								}, {
									"case":	946,
									"scores":	[-3.912023005428146]
								}, {
									"case":	947,
									"scores":	[-3.912023005428146]
								}, {
									"case":	948,
									"scores":	[-3.912023005428146]
								}, {
									"case":	949,
									"scores":	[-3.912023005428146]
								}, {
									"case":	950,
									"scores":	[-3.912023005428146]
								}, {
									"case":	951,
									"scores":	[-3.912023005428146]
								}, {
									"case":	952,
									"scores":	[-3.912023005428146]
								}, {
									"case":	953,
									"scores":	[-3.912023005428146]
								}, {
									"case":	954,
									"scores":	[-3.912023005428146]
								}, {
									"case":	955,
									"scores":	[-3.912023005428146]
								}, {
									"case":	956,
									"scores":	[-3.912023005428146]
								}, {
									"case":	957,
									"scores":	[-3.912023005428146]
								}, {
									"case":	958,
									"scores":	[-3.912023005428146]
								}, {
									"case":	959,
									"scores":	[-3.912023005428146]
								}, {
									"case":	960,
									"scores":	[-3.912023005428146]
								}, {
									"case":	961,
									"scores":	[-3.912023005428146]
								}, {
									"case":	962,
									"scores":	[-3.912023005428146]
								}, {
									"case":	963,
									"scores":	[-3.912023005428146]
								}, {
									"case":	964,
									"scores":	[-3.912023005428146]
								}, {
									"case":	965,
									"scores":	[-3.912023005428146]
								}, {
									"case":	966,
									"scores":	[-3.912023005428146]
								}, {
									"case":	967,
									"scores":	[-3.912023005428146]
								}, {
									"case":	968,
									"scores":	[-3.912023005428146]
								}, {
									"case":	969,
									"scores":	[-3.912023005428146]
								}, {
									"case":	970,
									"scores":	[-3.912023005428146]
								}, {
									"case":	971,
									"scores":	[-3.912023005428146]
								}, {
									"case":	972,
									"scores":	[-3.912023005428146]
								}, {
									"case":	973,
									"scores":	[-3.912023005428146]
								}, {
									"case":	974,
									"scores":	[-3.912023005428146]
								}, {
									"case":	975,
									"scores":	[-3.912023005428146]
								}, {
									"case":	976,
									"scores":	[-3.912023005428146]
								}, {
									"case":	977,
									"scores":	[-3.912023005428146]
								}, {
									"case":	978,
									"scores":	[-3.912023005428146]
								}, {
									"case":	979,
									"scores":	[-3.912023005428146]
								}, {
									"case":	980,
									"scores":	[-3.912023005428146]
								}, {
									"case":	981,
									"scores":	[-3.912023005428146]
								}, {
									"case":	982,
									"scores":	[-3.912023005428146]
								}, {
									"case":	983,
									"scores":	[-3.912023005428146]
								}, {
									"case":	984,
									"scores":	[-3.912023005428146]
								}, {
									"case":	985,
									"scores":	[-3.912023005428146]
								}, {
									"case":	986,
									"scores":	[-3.912023005428146]
								}, {
									"case":	987,
									"scores":	[-3.912023005428146]
								}, {
									"case":	988,
									"scores":	[-3.912023005428146]
								}, {
									"case":	989,
									"scores":	[-3.912023005428146]
								}, {
									"case":	990,
									"scores":	[-3.912023005428146]
								}, {
									"case":	991,
									"scores":	[-3.912023005428146]
								}, {
									"case":	992,
									"scores":	[-3.912023005428146]
								}, {
									"case":	993,
									"scores":	[-3.912023005428146]
								}, {
									"case":	994,
									"scores":	[-3.912023005428146]
								}, {
									"case":	995,
									"scores":	[-3.912023005428146]
								}, {
									"case":	996,
									"scores":	[-3.912023005428146]
								}, {
									"case":	997,
									"scores":	[-3.912023005428146]
								}, {
									"case":	998,
									"scores":	[-3.912023005428146]
								}, {
									"case":	999,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1000,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1001,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1002,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1003,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1004,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1005,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1006,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1007,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1008,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1009,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1010,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1011,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1012,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1013,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1014,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1015,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1016,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1017,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1018,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1019,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1020,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1021,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1022,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1023,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1024,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1025,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1026,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1027,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1028,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1029,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1030,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1031,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1032,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1033,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1034,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1035,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1036,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1037,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1038,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1039,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1040,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1041,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1042,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1043,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1044,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1045,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1046,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1047,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1048,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1049,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1050,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1051,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1052,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1053,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1054,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1055,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1056,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1057,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1058,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1059,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1060,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1061,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1062,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1063,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1064,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1065,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1066,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1067,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1068,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1069,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1070,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1071,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1072,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1073,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1074,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1075,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1076,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1077,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1078,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1079,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1080,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1081,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1082,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1083,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1084,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1085,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1086,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1087,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1088,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1089,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1090,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1091,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1092,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1093,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1094,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1095,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1096,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1097,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1098,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1099,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1110,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1111,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1112,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1113,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1114,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1115,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1116,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1117,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1118,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1119,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1120,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1121,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1122,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1123,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1124,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1125,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1126,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1127,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1128,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1129,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1130,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1131,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1132,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1133,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1134,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1135,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1136,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1137,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1138,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1139,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1140,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1141,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1142,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1143,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1144,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1145,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1146,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1147,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1148,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1149,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1150,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1151,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1152,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1153,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1154,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1155,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1156,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1157,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1158,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1159,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1160,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1161,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1162,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1163,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1164,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1165,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1166,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1167,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1168,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1169,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1170,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1171,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1172,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1173,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1174,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1175,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1176,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1177,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1178,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1179,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1180,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1181,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1182,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1183,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1184,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1185,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1186,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1187,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1188,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1189,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1190,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1191,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1192,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1193,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1194,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1195,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1196,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1197,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1198,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1199,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1200,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1201,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1202,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1203,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1204,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1205,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1206,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1207,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1208,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1209,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1210,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1211,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1212,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1213,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1214,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1215,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1216,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1217,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1218,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1219,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1220,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1221,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1222,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1223,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1224,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1225,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1226,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1227,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1228,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1229,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1230,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1231,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1232,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1233,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1234,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1235,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1236,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1237,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1238,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1239,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1240,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1241,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1242,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1243,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1244,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1245,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1246,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1247,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1248,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1249,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1250,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1251,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1252,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1253,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1254,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1255,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1256,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1257,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1258,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1259,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1260,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1261,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1262,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1263,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1264,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1265,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1266,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1267,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1268,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1269,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1270,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1271,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1272,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1273,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1274,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1275,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1276,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1277,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1278,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1279,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1280,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1281,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1282,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1283,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1284,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1285,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1286,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1287,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1288,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1289,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1290,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1291,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1292,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1293,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1294,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1295,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1296,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1297,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1298,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1299,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1300,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1301,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1302,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1303,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1304,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1305,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1306,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1307,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1308,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1309,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1310,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1311,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1312,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1313,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1314,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1315,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1316,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1317,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1318,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1319,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1320,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1321,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1322,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1323,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1324,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1325,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1326,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1327,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1328,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1329,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1330,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1331,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1332,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1333,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1334,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1335,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1336,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1337,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1338,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1339,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1340,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1341,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1342,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1343,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1344,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1345,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1346,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1347,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1348,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1349,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1350,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1351,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1352,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1353,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1354,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1355,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1356,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1357,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1358,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1359,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1360,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1361,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1362,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1363,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1364,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1365,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1366,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1367,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1368,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1369,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1370,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1371,
									"scores":	[-3.912023005428146]
								}, {
									"case":	1372,
									"scores":	[-3.912023005428146]
								}]
						}, {
							"switch":	25,
							"types":	[[6], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [2, 3, 4, 5]],
							"begin_line":	537,
							"begin_column":	17,
							"end_line":	541,
							"end_column":	21,
							"patch_codes":	["if (__is_neg(\"\", \"L537\", 27, &(opcode), sizeof (opcode), &(i), sizeof (i), &(j), sizeof (j), &(codestr), sizeof (codestr), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    continue;\n", "if (!(blocks[i] == blocks[i + 6 - 1]) || j != ((int)((codestr[i + 3 + 2] << 8) + codestr[i + 3 + 1])) || opcode == 104)\n    continue;\n", "if (codestr[i + 3] != 92 || !(blocks[i] == blocks[i + 6 - 1]) || j != ((int)((codestr[i + 3 + 2] << 8) + codestr[i + 3 + 1])))\n    continue;\n", "if (codestr[i + 3] != 92 || !(blocks[i] == blocks[i + 6 - 1]) || opcode == 104)\n    continue;\n", "if (codestr[i + 3] != 92 || j != ((int)((codestr[i + 3 + 2] << 8) + codestr[i + 3 + 1])) || opcode == 104)\n    continue;\n", "if ((codestr[i + 3] != 92 || !(blocks[i] == blocks[i + 6 - 1]) || j != ((int)((codestr[i + 3 + 2] << 8) + codestr[i + 3 + 1])) || opcode == 104) && !__is_neg(\"\", \"L537\", 27, &(opcode), sizeof (opcode), &(i), sizeof (i), &(j), sizeof (j), &(codestr), sizeof (codestr), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    continue;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.4981050764281454, -3.8902739484281463, -1.2904604264281474, -3.6209209564281464, -4.0535206964281461, -5.6971293264281453, -4.2263259164281459, -4.4210524634281461, -6.392188349428146, -3.3294554644281456, -4.7766237864281464, -3.632897045428146, -4.5243019964281457, -5.279837396428146, -4.1023359964281454, -4.1023359964281454, -3.9309461564281456, -4.5243019964281457, -5.279837396428146, -4.5243019964281457, -4.1023359964281454, -5.279837396428146, -4.1023359964281454, -4.1023359964281454, -4.1023359964281454, -4.1023359964281454, -4.1023359964281454]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-4.3692062743681452, -5.7613751463681462, -3.1615616243681459, -5.4920221543681453, -5.9246218943681459, -7.5682305243681451, -6.0974271143681449, -6.292153661368145, -8.2632895473681458, -5.2005566623681458, -6.6477249843681454, -5.5039982433681454, -6.3954031943681446, -7.1509385943681441, -5.9734371943681452, -5.9734371943681452, -5.8020473543681454, -6.3954031943681446, -7.1509385943681441, -6.3954031943681446, -5.9734371943681452, -7.1509385943681441, -5.9734371943681452, -5.9734371943681452, -5.9734371943681452, -5.9734371943681452, -5.9734371943681452]
								}]
						}]
				}, {
					"line":	546,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [1671, 1672, 1673, 1674, 1675], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], [], [], [], [1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670], [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594], [], [], [], [], [], []],
							"begin_line":	547,
							"begin_column":	19,
							"end_line":	547,
							"end_column":	19,
							"patch_codes":	["memset(&((((PyObject *)(code))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->ob_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(code))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_call)))", "memset(&((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_del)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_free)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_init)))", "memset(&((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_members)))", "memset(&((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_name)))", "memset(&((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_new)))", "memset(&((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_print)))", "memset(&((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_str)))", "memset(&((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(code))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->ob_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->ob_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset)))", "memset(&((PyBytesObject *)(code))->ob_base, 0, sizeof (*(&((PyBytesObject *)(code))->ob_base)))", "memset(&((PyBytesObject *)(code))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(code))->ob_shash)))", "memset(&((PyBytesObject *)(code))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(code))->ob_sval)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_base)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_shash)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_sval)))", "memset(&((PyListObject *)(consts))->allocated, 0, sizeof (*(&((PyListObject *)(consts))->allocated)))", "memset(&((PyListObject *)(consts))->ob_base, 0, sizeof (*(&((PyListObject *)(consts))->ob_base)))", "memset(&((PyListObject *)(consts))->ob_item, 0, sizeof (*(&((PyListObject *)(consts))->ob_item)))", "memset(&((PyObject *)(code))->_ob_next, 0, sizeof (*(&((PyObject *)(code))->_ob_next)))", "memset(&((PyObject *)(code))->_ob_prev, 0, sizeof (*(&((PyObject *)(code))->_ob_prev)))", "memset(&((PyObject *)(code))->ob_refcnt, 0, sizeof (*(&((PyObject *)(code))->ob_refcnt)))", "memset(&((PyObject *)(code))->ob_type, 0, sizeof (*(&((PyObject *)(code))->ob_type)))", "memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_next)))", "memset(&((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_prev)))", "memset(&((PyObject *)(lineno_obj))->ob_refcnt, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_refcnt)))", "memset(&((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_type)))", "memset(&((PyTupleObject *)(names))->ob_base, 0, sizeof (*(&((PyTupleObject *)(names))->ob_base)))", "memset(&((PyTupleObject *)(names))->ob_item, 0, sizeof (*(&((PyTupleObject *)(names))->ob_item)))", "memset(&((PyVarObject *)(code))->ob_base, 0, sizeof (*(&((PyVarObject *)(code))->ob_base)))", "memset(&((PyVarObject *)(code))->ob_size, 0, sizeof (*(&((PyVarObject *)(code))->ob_size)))", "memset(&((PyVarObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_base)))", "memset(&((PyVarObject *)(lineno_obj))->ob_size, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_size)))", "memset(((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_base)))", "memset(((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_call)))", "memset(((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_del)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_free)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_init)))", "memset(((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_members)))", "memset(((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_name)))", "memset(((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_new)))", "memset(((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_print)))", "memset(((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_str)))", "memset(((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(((PyListObject *)(consts))->ob_item, 0, sizeof (*(((PyListObject *)(consts))->ob_item)))", "memset(((PyObject *)(code))->_ob_next, 0, sizeof (*(((PyObject *)(code))->_ob_next)))", "memset(((PyObject *)(code))->_ob_prev, 0, sizeof (*(((PyObject *)(code))->_ob_prev)))", "memset(((PyObject *)(code))->ob_type, 0, sizeof (*(((PyObject *)(code))->ob_type)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "memset(((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_next)))", "memset(((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_prev)))", "memset(((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(((PyObject *)(lineno_obj))->ob_type)))", "PyMem_Free((addrmap))", "PyMem_Free((blocks))", "PyMem_Free((codestr))", "PyMem_Free((lineno))", "addrmap = (addrmap)", "addrmap[i] = (-1)", "addrmap[i] = (0)", "addrmap[i] = (1)", "addrmap[i] = (10)", "addrmap[i] = (100)", "addrmap[i] = (101)", "addrmap[i] = (102)", "addrmap[i] = (103)", "addrmap[i] = (104)", "addrmap[i] = (107)", "addrmap[i] = (11)", "addrmap[i] = (110)", "addrmap[i] = (111)", "addrmap[i] = (112)", "addrmap[i] = (113)", "addrmap[i] = (114)", "addrmap[i] = (115)", "addrmap[i] = (116)", "addrmap[i] = (119)", "addrmap[i] = (12)", "addrmap[i] = (120)", "addrmap[i] = (121)", "addrmap[i] = (122)", "addrmap[i] = (132)", "addrmap[i] = (134217728)", "addrmap[i] = (143)", "addrmap[i] = (144)", "addrmap[i] = (15)", "addrmap[i] = (19)", "addrmap[i] = (2)", "addrmap[i] = (20)", "addrmap[i] = (22)", "addrmap[i] = (23)", "addrmap[i] = (24)", "addrmap[i] = (25)", "addrmap[i] = (255)", "addrmap[i] = (256)", "addrmap[i] = (26)", "addrmap[i] = (27)", "addrmap[i] = (3)", "addrmap[i] = (32700)", "addrmap[i] = (33554432)", "addrmap[i] = (4)", "addrmap[i] = (403)", "addrmap[i] = (404)", "addrmap[i] = (405)", "addrmap[i] = (410)", "addrmap[i] = (411)", "addrmap[i] = (420)", "addrmap[i] = (438)", "addrmap[i] = (492)", "addrmap[i] = (499)", "addrmap[i] = (5)", "addrmap[i] = (521)", "addrmap[i] = (531)", "addrmap[i] = (533)", "addrmap[i] = (534)", "addrmap[i] = (574)", "addrmap[i] = (580)", "addrmap[i] = (581)", "addrmap[i] = (582)", "addrmap[i] = (592)", "addrmap[i] = (597)", "addrmap[i] = (598)", "addrmap[i] = (599)", "addrmap[i] = (6)", "addrmap[i] = (62)", "addrmap[i] = (63)", "addrmap[i] = (64)", "addrmap[i] = (65)", "addrmap[i] = (66)", "addrmap[i] = (7)", "addrmap[i] = (716)", "addrmap[i] = (753)", "addrmap[i] = (8)", "addrmap[i] = (83)", "addrmap[i] = (9)", "addrmap[i] = (90)", "addrmap[i] = (92)", "addrmap[i] = (93)", "addrmap[i] = (adj)", "addrmap[i] = (cum_orig_line)", "addrmap[i] = (h)", "addrmap[i] = (in_consts)", "addrmap[i] = (last_line)", "addrmap[i] = (new_line)", "addrmap[i] = (nops)", "addrmap[i] = (opcode)", "addrmap[i] = (tabsiz)", "addrmap[i] = (tgt)", "addrmap[i] = (tgttgt)", "adj = (-1)", "adj = (0)", "adj = (1)", "adj = (10)", "adj = (100)", "adj = (101)", "adj = (102)", "adj = (103)", "adj = (104)", "adj = (107)", "adj = (11)", "adj = (110)", "adj = (111)", "adj = (112)", "adj = (113)", "adj = (114)", "adj = (115)", "adj = (116)", "adj = (119)", "adj = (12)", "adj = (120)", "adj = (121)", "adj = (122)", "adj = (132)", "adj = (134217728)", "adj = (143)", "adj = (144)", "adj = (15)", "adj = (19)", "adj = (2)", "adj = (20)", "adj = (22)", "adj = (23)", "adj = (24)", "adj = (25)", "adj = (255)", "adj = (256)", "adj = (26)", "adj = (27)", "adj = (3)", "adj = (32700)", "adj = (33554432)", "adj = (4)", "adj = (403)", "adj = (404)", "adj = (405)", "adj = (410)", "adj = (411)", "adj = (420)", "adj = (438)", "adj = (492)", "adj = (499)", "adj = (5)", "adj = (521)", "adj = (531)", "adj = (533)", "adj = (534)", "adj = (574)", "adj = (580)", "adj = (581)", "adj = (582)", "adj = (592)", "adj = (597)", "adj = (598)", "adj = (599)", "adj = (6)", "adj = (62)", "adj = (63)", "adj = (64)", "adj = (65)", "adj = (66)", "adj = (7)", "adj = (716)", "adj = (753)", "adj = (8)", "adj = (83)", "adj = (9)", "adj = (90)", "adj = (92)", "adj = (93)", "adj = (adj)", "adj = (cum_orig_line)", "adj = (h)", "adj = (in_consts)", "adj = (last_line)", "adj = (new_line)", "adj = (nops)", "adj = (opcode)", "adj = (tabsiz)", "adj = (tgt)", "adj = (tgttgt)", "blocks = (blocks)", "blocks = markblocks((codestr), codelen)", "blocks = markblocks((lineno), codelen)", "code = (code)", "code = (consts)", "code = (lineno_obj)", "code = (names)", "codelen = (-1)", "codelen = (0)", "codelen = (1)", "codelen = (10)", "codelen = (100)", "codelen = (101)", "codelen = (102)", "codelen = (103)", "codelen = (104)", "codelen = (107)", "codelen = (11)", "codelen = (110)", "codelen = (111)", "codelen = (112)", "codelen = (113)", "codelen = (114)", "codelen = (115)", "codelen = (116)", "codelen = (119)", "codelen = (12)", "codelen = (120)", "codelen = (121)", "codelen = (122)", "codelen = (132)", "codelen = (134217728)", "codelen = (143)", "codelen = (144)", "codelen = (15)", "codelen = (19)", "codelen = (2)", "codelen = (20)", "codelen = (22)", "codelen = (23)", "codelen = (24)", "codelen = (25)", "codelen = (255)", "codelen = (256)", "codelen = (26)", "codelen = (27)", "codelen = (3)", "codelen = (32700)", "codelen = (33554432)", "codelen = (4)", "codelen = (403)", "codelen = (404)", "codelen = (405)", "codelen = (410)", "codelen = (411)", "codelen = (420)", "codelen = (438)", "codelen = (492)", "codelen = (499)", "codelen = (5)", "codelen = (521)", "codelen = (531)", "codelen = (533)", "codelen = (534)", "codelen = (574)", "codelen = (580)", "codelen = (581)", "codelen = (582)", "codelen = (592)", "codelen = (597)", "codelen = (598)", "codelen = (599)", "codelen = (6)", "codelen = (62)", "codelen = (63)", "codelen = (64)", "codelen = (65)", "codelen = (66)", "codelen = (7)", "codelen = (716)", "codelen = (753)", "codelen = (8)", "codelen = (83)", "codelen = (9)", "codelen = (90)", "codelen = (92)", "codelen = (93)", "codelen = (codelen)", "codelen = (const_stack_size)", "codelen = (const_stack_top)", "codelen = (i)", "codelen = (j)", "codestr = (codestr)", "codestr = (lineno)", "codestr[i] = (-1)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "cum_orig_line = (-1)", "cum_orig_line = (0)", "cum_orig_line = (1)", "cum_orig_line = (10)", "cum_orig_line = (100)", "cum_orig_line = (101)", "cum_orig_line = (102)", "cum_orig_line = (103)", "cum_orig_line = (104)", "cum_orig_line = (107)", "cum_orig_line = (11)", "cum_orig_line = (110)", "cum_orig_line = (111)", "cum_orig_line = (112)", "cum_orig_line = (113)", "cum_orig_line = (114)", "cum_orig_line = (115)", "cum_orig_line = (116)", "cum_orig_line = (119)", "cum_orig_line = (12)", "cum_orig_line = (120)", "cum_orig_line = (121)", "cum_orig_line = (122)", "cum_orig_line = (132)", "cum_orig_line = (134217728)", "cum_orig_line = (143)", "cum_orig_line = (144)", "cum_orig_line = (15)", "cum_orig_line = (19)", "cum_orig_line = (2)", "cum_orig_line = (20)", "cum_orig_line = (22)", "cum_orig_line = (23)", "cum_orig_line = (24)", "cum_orig_line = (25)", "cum_orig_line = (255)", "cum_orig_line = (256)", "cum_orig_line = (26)", "cum_orig_line = (27)", "cum_orig_line = (3)", "cum_orig_line = (32700)", "cum_orig_line = (33554432)", "cum_orig_line = (4)", "cum_orig_line = (403)", "cum_orig_line = (404)", "cum_orig_line = (405)", "cum_orig_line = (410)", "cum_orig_line = (411)", "cum_orig_line = (420)", "cum_orig_line = (438)", "cum_orig_line = (492)", "cum_orig_line = (499)", "cum_orig_line = (5)", "cum_orig_line = (521)", "cum_orig_line = (531)", "cum_orig_line = (533)", "cum_orig_line = (534)", "cum_orig_line = (574)", "cum_orig_line = (580)", "cum_orig_line = (581)", "cum_orig_line = (582)", "cum_orig_line = (592)", "cum_orig_line = (597)", "cum_orig_line = (598)", "cum_orig_line = (599)", "cum_orig_line = (6)", "cum_orig_line = (62)", "cum_orig_line = (63)", "cum_orig_line = (64)", "cum_orig_line = (65)", "cum_orig_line = (66)", "cum_orig_line = (7)", "cum_orig_line = (716)", "cum_orig_line = (753)", "cum_orig_line = (8)", "cum_orig_line = (83)", "cum_orig_line = (9)", "cum_orig_line = (90)", "cum_orig_line = (92)", "cum_orig_line = (93)", "cum_orig_line = (adj)", "cum_orig_line = (cum_orig_line)", "cum_orig_line = (h)", "cum_orig_line = (in_consts)", "cum_orig_line = (last_line)", "cum_orig_line = (new_line)", "cum_orig_line = (nops)", "cum_orig_line = (opcode)", "cum_orig_line = (tabsiz)", "cum_orig_line = (tgt)", "cum_orig_line = (tgttgt)", "h = ((const_stack_top >= j - 1) ? (load_const_stack)[const_stack_top - j + 1] : -1)", "h = (-1)", "h = (0)", "h = (1)", "h = (10)", "h = (100)", "h = (101)", "h = (102)", "h = (103)", "h = (104)", "h = (107)", "h = (11)", "h = (110)", "h = (111)", "h = (112)", "h = (113)", "h = (114)", "h = (115)", "h = (116)", "h = (119)", "h = (12)", "h = (120)", "h = (121)", "h = (122)", "h = (132)", "h = (134217728)", "h = (143)", "h = (144)", "h = (15)", "h = (19)", "h = (2)", "h = (20)", "h = (22)", "h = (23)", "h = (24)", "h = (25)", "h = (255)", "h = (256)", "h = (26)", "h = (27)", "h = (3)", "h = (32700)", "h = (33554432)", "h = (4)", "h = (403)", "h = (404)", "h = (405)", "h = (410)", "h = (411)", "h = (420)", "h = (438)", "h = (492)", "h = (499)", "h = (5)", "h = (521)", "h = (531)", "h = (533)", "h = (534)", "h = (574)", "h = (580)", "h = (581)", "h = (582)", "h = (592)", "h = (597)", "h = (598)", "h = (599)", "h = (6)", "h = (62)", "h = (63)", "h = (64)", "h = (65)", "h = (66)", "h = (7)", "h = (716)", "h = (753)", "h = (8)", "h = (83)", "h = (9)", "h = (90)", "h = (92)", "h = (93)", "h = (adj)", "h = (cum_orig_line)", "h = (h)", "h = (in_consts)", "h = (last_line)", "h = (new_line)", "h = (nops)", "h = (opcode)", "h = (tabsiz)", "h = (tgt)", "h = (tgttgt)", "h = load_global((codestr), i, name, consts)", "h = load_global((lineno), i, name, consts)", "h = load_global(codestr, i, (name), consts)", "h = load_global(codestr, i, name, (code))", "h = load_global(codestr, i, name, (consts))", "h = load_global(codestr, i, name, (lineno_obj))", "h = load_global(codestr, i, name, (names))", "in_consts = (-1)", "in_consts = (0)", "in_consts = (1)", "in_consts = (10)", "in_consts = (100)", "in_consts = (101)", "in_consts = (102)", "in_consts = (103)", "in_consts = (104)", "in_consts = (107)", "in_consts = (11)", "in_consts = (110)", "in_consts = (111)", "in_consts = (112)", "in_consts = (113)", "in_consts = (114)", "in_consts = (115)", "in_consts = (116)", "in_consts = (119)", "in_consts = (12)", "in_consts = (120)", "in_consts = (121)", "in_consts = (122)", "in_consts = (132)", "in_consts = (134217728)", "in_consts = (143)", "in_consts = (144)", "in_consts = (15)", "in_consts = (19)", "in_consts = (2)", "in_consts = (20)", "in_consts = (22)", "in_consts = (23)", "in_consts = (24)", "in_consts = (25)", "in_consts = (255)", "in_consts = (256)", "in_consts = (26)", "in_consts = (27)", "in_consts = (3)", "in_consts = (32700)", "in_consts = (33554432)", "in_consts = (4)", "in_consts = (403)", "in_consts = (404)", "in_consts = (405)", "in_consts = (410)", "in_consts = (411)", "in_consts = (420)", "in_consts = (438)", "in_consts = (492)", "in_consts = (499)", "in_consts = (5)", "in_consts = (521)", "in_consts = (531)", "in_consts = (533)", "in_consts = (534)", "in_consts = (574)", "in_consts = (580)", "in_consts = (581)", "in_consts = (582)", "in_consts = (592)", "in_consts = (597)", "in_consts = (598)", "in_consts = (599)", "in_consts = (6)", "in_consts = (62)", "in_consts = (63)", "in_consts = (64)", "in_consts = (65)", "in_consts = (66)", "in_consts = (7)", "in_consts = (716)", "in_consts = (753)", "in_consts = (8)", "in_consts = (83)", "in_consts = (9)", "in_consts = (90)", "in_consts = (92)", "in_consts = (93)", "in_consts = (adj)", "in_consts = (cum_orig_line)", "in_consts = (h)", "in_consts = (in_consts)", "in_consts = (last_line)", "in_consts = (new_line)", "in_consts = (nops)", "in_consts = (opcode)", "in_consts = (tabsiz)", "in_consts = (tgt)", "in_consts = (tgttgt)", "j = (-1)", "j = (0)", "j = (1)", "j = (10)", "j = (100)", "j = (101)", "j = (102)", "j = (103)", "j = (104)", "j = (107)", "j = (11)", "j = (110)", "j = (111)", "j = (112)", "j = (113)", "j = (114)", "j = (115)", "j = (116)", "j = (119)", "j = (12)", "j = (120)", "j = (121)", "j = (122)", "j = (132)", "j = (134217728)", "j = (143)", "j = (144)", "j = (15)", "j = (19)", "j = (2)", "j = (20)", "j = (22)", "j = (23)", "j = (24)", "j = (25)", "j = (255)", "j = (256)", "j = (26)", "j = (27)", "j = (3)", "j = (32700)", "j = (33554432)", "j = (4)", "j = (403)", "j = (404)", "j = (405)", "j = (410)", "j = (411)", "j = (420)", "j = (438)", "j = (492)", "j = (499)", "j = (5)", "j = (521)", "j = (531)", "j = (533)", "j = (534)", "j = (574)", "j = (580)", "j = (581)", "j = (582)", "j = (592)", "j = (597)", "j = (598)", "j = (599)", "j = (6)", "j = (62)", "j = (63)", "j = (64)", "j = (65)", "j = (66)", "j = (7)", "j = (716)", "j = (753)", "j = (8)", "j = (83)", "j = (9)", "j = (90)", "j = (92)", "j = (93)", "j = (codelen)", "j = (codestr)[tgt]", "j = (const_stack_size)", "j = (const_stack_top)", "j = (i)", "j = (j)", "j = (lineno)[tgt]", "last_line = (-1)", "last_line = (0)", "last_line = (1)", "last_line = (10)", "last_line = (100)", "last_line = (101)", "last_line = (102)", "last_line = (103)", "last_line = (104)", "last_line = (107)", "last_line = (11)", "last_line = (110)", "last_line = (111)", "last_line = (112)", "last_line = (113)", "last_line = (114)", "last_line = (115)", "last_line = (116)", "last_line = (119)", "last_line = (12)", "last_line = (120)", "last_line = (121)", "last_line = (122)", "last_line = (132)", "last_line = (134217728)", "last_line = (143)", "last_line = (144)", "last_line = (15)", "last_line = (19)", "last_line = (2)", "last_line = (20)", "last_line = (22)", "last_line = (23)", "last_line = (24)", "last_line = (25)", "last_line = (255)", "last_line = (256)", "last_line = (26)", "last_line = (27)", "last_line = (3)", "last_line = (32700)", "last_line = (33554432)", "last_line = (4)", "last_line = (403)", "last_line = (404)", "last_line = (405)", "last_line = (410)", "last_line = (411)", "last_line = (420)", "last_line = (438)", "last_line = (492)", "last_line = (499)", "last_line = (5)", "last_line = (521)", "last_line = (531)", "last_line = (533)", "last_line = (534)", "last_line = (574)", "last_line = (580)", "last_line = (581)", "last_line = (582)", "last_line = (592)", "last_line = (597)", "last_line = (598)", "last_line = (599)", "last_line = (6)", "last_line = (62)", "last_line = (63)", "last_line = (64)", "last_line = (65)", "last_line = (66)", "last_line = (7)", "last_line = (716)", "last_line = (753)", "last_line = (8)", "last_line = (83)", "last_line = (9)", "last_line = (90)", "last_line = (92)", "last_line = (93)", "last_line = (adj)", "last_line = (cum_orig_line)", "last_line = (h)", "last_line = (in_consts)", "last_line = (last_line)", "last_line = (new_line)", "last_line = (nops)", "last_line = (opcode)", "last_line = (tabsiz)", "last_line = (tgt)", "last_line = (tgttgt)", "lineno = (codestr)", "lineno = (lineno)", "lineno[i] = (-1)", "lineno[i] = (0)", "lineno[i] = (1)", "lineno[i] = (10)", "lineno[i] = (100)", "lineno[i] = (101)", "lineno[i] = (102)", "lineno[i] = (103)", "lineno[i] = (104)", "lineno[i] = (107)", "lineno[i] = (11)", "lineno[i] = (110)", "lineno[i] = (111)", "lineno[i] = (112)", "lineno[i] = (113)", "lineno[i] = (114)", "lineno[i] = (115)", "lineno[i] = (116)", "lineno[i] = (119)", "lineno[i] = (12)", "lineno[i] = (120)", "lineno[i] = (121)", "lineno[i] = (122)", "lineno[i] = (132)", "lineno[i] = (134217728)", "lineno[i] = (143)", "lineno[i] = (144)", "lineno[i] = (15)", "lineno[i] = (19)", "lineno[i] = (2)", "lineno[i] = (20)", "lineno[i] = (22)", "lineno[i] = (23)", "lineno[i] = (24)", "lineno[i] = (25)", "lineno[i] = (255)", "lineno[i] = (256)", "lineno[i] = (26)", "lineno[i] = (27)", "lineno[i] = (3)", "lineno[i] = (32700)", "lineno[i] = (33554432)", "lineno[i] = (4)", "lineno[i] = (403)", "lineno[i] = (404)", "lineno[i] = (405)", "lineno[i] = (410)", "lineno[i] = (411)", "lineno[i] = (420)", "lineno[i] = (438)", "lineno[i] = (492)", "lineno[i] = (499)", "lineno[i] = (5)", "lineno[i] = (521)", "lineno[i] = (531)", "lineno[i] = (533)", "lineno[i] = (534)", "lineno[i] = (574)", "lineno[i] = (580)", "lineno[i] = (581)", "lineno[i] = (582)", "lineno[i] = (592)", "lineno[i] = (597)", "lineno[i] = (598)", "lineno[i] = (599)", "lineno[i] = (6)", "lineno[i] = (62)", "lineno[i] = (63)", "lineno[i] = (64)", "lineno[i] = (65)", "lineno[i] = (66)", "lineno[i] = (7)", "lineno[i] = (716)", "lineno[i] = (753)", "lineno[i] = (8)", "lineno[i] = (83)", "lineno[i] = (9)", "lineno[i] = (90)", "lineno[i] = (92)", "lineno[i] = (93)", "memset(&(codestr)[h], 9, i - h)", "memset(&(lineno)[h], 9, i - h)", "memset((codestr) + i + 1, 9, 2)", "memset((codestr) + i + 1, 9, 3)", "memset((codestr) + i + 1, 9, 4)", "memset((codestr) + i + 1, 9, 5)", "memset((codestr) + i + 2, 9, 4)", "memset((codestr) + i, 9, 6)", "memset((lineno) + i + 1, 9, 2)", "memset((lineno) + i + 1, 9, 3)", "memset((lineno) + i + 1, 9, 4)", "memset((lineno) + i + 1, 9, 5)", "memset((lineno) + i + 2, 9, 4)", "memset((lineno) + i, 9, 6)", "name = (name)", "new_line = (-1)", "new_line = (0)", "new_line = (1)", "new_line = (10)", "new_line = (100)", "new_line = (101)", "new_line = (102)", "new_line = (103)", "new_line = (104)", "new_line = (107)", "new_line = (11)", "new_line = (110)", "new_line = (111)", "new_line = (112)", "new_line = (113)", "new_line = (114)", "new_line = (115)", "new_line = (116)", "new_line = (119)", "new_line = (12)", "new_line = (120)", "new_line = (121)", "new_line = (122)", "new_line = (132)", "new_line = (134217728)", "new_line = (143)", "new_line = (144)", "new_line = (15)", "new_line = (19)", "new_line = (2)", "new_line = (20)", "new_line = (22)", "new_line = (23)", "new_line = (24)", "new_line = (25)", "new_line = (255)", "new_line = (256)", "new_line = (26)", "new_line = (27)", "new_line = (3)", "new_line = (32700)", "new_line = (33554432)", "new_line = (4)", "new_line = (403)", "new_line = (404)", "new_line = (405)", "new_line = (410)", "new_line = (411)", "new_line = (420)", "new_line = (438)", "new_line = (492)", "new_line = (499)", "new_line = (5)", "new_line = (521)", "new_line = (531)", "new_line = (533)", "new_line = (534)", "new_line = (574)", "new_line = (580)", "new_line = (581)", "new_line = (582)", "new_line = (592)", "new_line = (597)", "new_line = (598)", "new_line = (599)", "new_line = (6)", "new_line = (62)", "new_line = (63)", "new_line = (64)", "new_line = (65)", "new_line = (66)", "new_line = (7)", "new_line = (716)", "new_line = (753)", "new_line = (8)", "new_line = (83)", "new_line = (9)", "new_line = (90)", "new_line = (92)", "new_line = (93)", "new_line = (addrmap)[cum_orig_line]", "new_line = (adj)", "new_line = (cum_orig_line)", "new_line = (h)", "new_line = (in_consts)", "new_line = (last_line)", "new_line = (new_line)", "new_line = (nops)", "new_line = (opcode)", "new_line = (tabsiz)", "new_line = (tgt)", "new_line = (tgttgt)", "opcode = (-1)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (101)", "opcode = (102)", "opcode = (103)", "opcode = (104)", "opcode = (107)", "opcode = (11)", "opcode = (110)", "opcode = (111)", "opcode = (112)", "opcode = (113)", "opcode = (114)", "opcode = (115)", "opcode = (116)", "opcode = (119)", "opcode = (12)", "opcode = (120)", "opcode = (121)", "opcode = (122)", "opcode = (132)", "opcode = (134217728)", "opcode = (143)", "opcode = (144)", "opcode = (15)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (23)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (256)", "opcode = (26)", "opcode = (27)", "opcode = (3)", "opcode = (32700)", "opcode = (33554432)", "opcode = (4)", "opcode = (403)", "opcode = (404)", "opcode = (405)", "opcode = (410)", "opcode = (411)", "opcode = (420)", "opcode = (438)", "opcode = (492)", "opcode = (499)", "opcode = (5)", "opcode = (521)", "opcode = (531)", "opcode = (533)", "opcode = (534)", "opcode = (574)", "opcode = (580)", "opcode = (581)", "opcode = (582)", "opcode = (592)", "opcode = (597)", "opcode = (598)", "opcode = (599)", "opcode = (6)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (7)", "opcode = (716)", "opcode = (753)", "opcode = (8)", "opcode = (83)", "opcode = (9)", "opcode = (90)", "opcode = (92)", "opcode = (93)", "opcode = (adj)", "opcode = (codestr)[i]", "opcode = (cum_orig_line)", "opcode = (h)", "opcode = (in_consts)", "opcode = (last_line)", "opcode = (lineno)[i]", "opcode = (new_line)", "opcode = (nops)", "opcode = (opcode)", "opcode = (tabsiz)", "opcode = (tgt)", "opcode = (tgttgt)", "tabsiz = (-1)", "tabsiz = (0)", "tabsiz = (1)", "tabsiz = (10)", "tabsiz = (100)", "tabsiz = (101)", "tabsiz = (102)", "tabsiz = (103)", "tabsiz = (104)", "tabsiz = (107)", "tabsiz = (11)", "tabsiz = (110)", "tabsiz = (111)", "tabsiz = (112)", "tabsiz = (113)", "tabsiz = (114)", "tabsiz = (115)", "tabsiz = (116)", "tabsiz = (119)", "tabsiz = (12)", "tabsiz = (120)", "tabsiz = (121)", "tabsiz = (122)", "tabsiz = (132)", "tabsiz = (134217728)", "tabsiz = (143)", "tabsiz = (144)", "tabsiz = (15)", "tabsiz = (19)", "tabsiz = (2)", "tabsiz = (20)", "tabsiz = (22)", "tabsiz = (23)", "tabsiz = (24)", "tabsiz = (25)", "tabsiz = (255)", "tabsiz = (256)", "tabsiz = (26)", "tabsiz = (27)", "tabsiz = (3)", "tabsiz = (32700)", "tabsiz = (33554432)", "tabsiz = (4)", "tabsiz = (403)", "tabsiz = (404)", "tabsiz = (405)", "tabsiz = (410)", "tabsiz = (411)", "tabsiz = (420)", "tabsiz = (438)", "tabsiz = (492)", "tabsiz = (499)", "tabsiz = (5)", "tabsiz = (521)", "tabsiz = (531)", "tabsiz = (533)", "tabsiz = (534)", "tabsiz = (574)", "tabsiz = (580)", "tabsiz = (581)", "tabsiz = (582)", "tabsiz = (592)", "tabsiz = (597)", "tabsiz = (598)", "tabsiz = (599)", "tabsiz = (6)", "tabsiz = (62)", "tabsiz = (63)", "tabsiz = (64)", "tabsiz = (65)", "tabsiz = (66)", "tabsiz = (7)", "tabsiz = (716)", "tabsiz = (753)", "tabsiz = (8)", "tabsiz = (83)", "tabsiz = (9)", "tabsiz = (90)", "tabsiz = (92)", "tabsiz = (93)", "tabsiz = (adj)", "tabsiz = (cum_orig_line)", "tabsiz = (h)", "tabsiz = (in_consts)", "tabsiz = (last_line)", "tabsiz = (new_line)", "tabsiz = (nops)", "tabsiz = (opcode)", "tabsiz = (tabsiz)", "tabsiz = (tgt)", "tabsiz = (tgttgt)", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((codestr)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((lineno)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (codestr)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (lineno)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (codestr)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (lineno)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (codestr)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (lineno)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (codestr)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (lineno)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (codestr)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (lineno)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (-1)", "tgttgt = (0)", "tgttgt = (1)", "tgttgt = (10)", "tgttgt = (100)", "tgttgt = (101)", "tgttgt = (102)", "tgttgt = (103)", "tgttgt = (104)", "tgttgt = (107)", "tgttgt = (11)", "tgttgt = (110)", "tgttgt = (111)", "tgttgt = (112)", "tgttgt = (113)", "tgttgt = (114)", "tgttgt = (115)", "tgttgt = (116)", "tgttgt = (119)", "tgttgt = (12)", "tgttgt = (120)", "tgttgt = (121)", "tgttgt = (122)", "tgttgt = (132)", "tgttgt = (134217728)", "tgttgt = (143)", "tgttgt = (144)", "tgttgt = (15)", "tgttgt = (19)", "tgttgt = (2)", "tgttgt = (20)", "tgttgt = (22)", "tgttgt = (23)", "tgttgt = (24)", "tgttgt = (25)", "tgttgt = (255)", "tgttgt = (256)", "tgttgt = (26)", "tgttgt = (27)", "tgttgt = (3)", "tgttgt = (32700)", "tgttgt = (33554432)", "tgttgt = (4)", "tgttgt = (403)", "tgttgt = (404)", "tgttgt = (405)", "tgttgt = (410)", "tgttgt = (411)", "tgttgt = (420)", "tgttgt = (438)", "tgttgt = (492)", "tgttgt = (499)", "tgttgt = (5)", "tgttgt = (521)", "tgttgt = (531)", "tgttgt = (533)", "tgttgt = (534)", "tgttgt = (574)", "tgttgt = (580)", "tgttgt = (581)", "tgttgt = (582)", "tgttgt = (592)", "tgttgt = (597)", "tgttgt = (598)", "tgttgt = (599)", "tgttgt = (6)", "tgttgt = (62)", "tgttgt = (63)", "tgttgt = (64)", "tgttgt = (65)", "tgttgt = (66)", "tgttgt = (7)", "tgttgt = (716)", "tgttgt = (753)", "tgttgt = (8)", "tgttgt = (83)", "tgttgt = (9)", "tgttgt = (90)", "tgttgt = (92)", "tgttgt = (93)", "tgttgt = (adj)", "tgttgt = (cum_orig_line)", "tgttgt = (h)", "tgttgt = (in_consts)", "tgttgt = (last_line)", "tgttgt = (new_line)", "tgttgt = (nops)", "tgttgt = (opcode)", "tgttgt = (tabsiz)", "tgttgt = (tgt)", "tgttgt = (tgttgt)", "((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0))\n        ;\n    else\n        __assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 1)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 1))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 2)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 2))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < j)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < j))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((h + nops == codelen) ? 1 : 0) , __extension__ ({\n    if (h + nops == codelen)\n        ;\n    else\n        __assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((new_line - last_line < 255) ? 1 : 0) , __extension__ ({\n    if (new_line - last_line < 255)\n        ;\n    else\n        __assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "PyMem_Free(addrmap)", "PyMem_Free(blocks)", "PyMem_Free(codestr)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "addrmap = (int *)PyMem_Malloc(codelen * sizeof(int))", "addrmap[i] = i - nops", "adj = (((opcode) >= 90) ? 3 : 1)", "blocks = markblocks(codestr, codelen)", "code = PyBytes_FromStringAndSize((char *)codestr, h)", "codelen = (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(code))->ob_size))", "codestr = (unsigned char *)PyMem_Malloc(codelen)", "codestr = (unsigned char *)memcpy(codestr, (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(code))->ob_sval)), codelen)", "codestr[i] = 114", "codestr[i] = 115", "codestr[i] = 2", "codestr[i] = 3", "codestr[i] = 83", "codestr[i] = j", "codestr[i] = opcode", "cum_orig_line = 0", "h = ((const_stack_top >= j - 1) ? load_const_stack[const_stack_top - j + 1] : -1)", "h = load_global(codestr, i, name, consts)", "in_consts = 0", "j = ((int)((codestr[i + 1 + 2] << 8) + codestr[i + 1 + 1]))", "j = ((int)((codestr[i + 2] << 8) + codestr[i + 1]))", "j = codestr[tgt]", "last_line = 0", "last_line = new_line", "lineno = (unsigned char *)(((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(lineno_obj))->ob_sval))", "lineno[i] = ((unsigned char)(new_line - last_line))", "memset(&codestr[h], 9, i - h)", "memset(codestr + i + 1, 9, 2)", "memset(codestr + i + 1, 9, 3)", "memset(codestr + i + 1, 9, 4)", "memset(codestr + i + 1, 9, 5)", "memset(codestr + i + 2, 9, 4)", "memset(codestr + i, 9, 6)", "name = _PyUnicode_AsString((((PyTupleObject *)(names))->ob_item[j]))", "new_line = addrmap[cum_orig_line]", "nops++", "opcode = 113", "opcode = codestr[i]", "tabsiz = (((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(lineno_obj))->ob_size))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "if (__is_neg(\"\", \"L547\", 27, &(const_stack_top), sizeof (const_stack_top), &(i), sizeof (i), &(j), sizeof (j), &(codestr), sizeof (codestr), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    break;\n", "if (__is_neg(\"\", \"L547\", 27, &(const_stack_top), sizeof (const_stack_top), &(i), sizeof (i), &(j), sizeof (j), &(codestr), sizeof (codestr), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitError;\n", "if (__is_neg(\"\", \"L547\", 27, &(const_stack_top), sizeof (const_stack_top), &(i), sizeof (i), &(j), sizeof (j), &(codestr), sizeof (codestr), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitUnchanged;\n", "if (__is_neg(\"\", \"L547\", 27, &(const_stack_top), sizeof (const_stack_top), &(i), sizeof (i), &(j), sizeof (j), &(codestr), sizeof (codestr), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto reoptimize_current;\n", "if (__is_neg(\"\", \"L547\", 27, &(const_stack_top), sizeof (const_stack_top), &(i), sizeof (i), &(j), sizeof (j), &(codestr), sizeof (codestr), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.52830761526413]
								}, {
									"case":	2,
									"scores":	[-7.52830761526413]
								}, {
									"case":	3,
									"scores":	[-7.52830761526413]
								}, {
									"case":	4,
									"scores":	[-7.52830761526413]
								}, {
									"case":	5,
									"scores":	[-7.52830761526413]
								}, {
									"case":	6,
									"scores":	[-7.52830761526413]
								}, {
									"case":	7,
									"scores":	[-7.52830761526413]
								}, {
									"case":	8,
									"scores":	[-7.52830761526413]
								}, {
									"case":	9,
									"scores":	[-7.52830761526413]
								}, {
									"case":	10,
									"scores":	[-7.52830761526413]
								}, {
									"case":	11,
									"scores":	[-7.52830761526413]
								}, {
									"case":	12,
									"scores":	[-7.52830761526413]
								}, {
									"case":	13,
									"scores":	[-7.52830761526413]
								}, {
									"case":	14,
									"scores":	[-7.52830761526413]
								}, {
									"case":	15,
									"scores":	[-7.52830761526413]
								}, {
									"case":	16,
									"scores":	[-7.52830761526413]
								}, {
									"case":	17,
									"scores":	[-7.52830761526413]
								}, {
									"case":	18,
									"scores":	[-7.52830761526413]
								}, {
									"case":	19,
									"scores":	[-7.52830761526413]
								}, {
									"case":	20,
									"scores":	[-7.52830761526413]
								}, {
									"case":	21,
									"scores":	[-7.52830761526413]
								}, {
									"case":	22,
									"scores":	[-7.52830761526413]
								}, {
									"case":	23,
									"scores":	[-7.52830761526413]
								}, {
									"case":	24,
									"scores":	[-7.52830761526413]
								}, {
									"case":	25,
									"scores":	[-7.52830761526413]
								}, {
									"case":	26,
									"scores":	[-7.52830761526413]
								}, {
									"case":	27,
									"scores":	[-7.52830761526413]
								}, {
									"case":	28,
									"scores":	[-7.52830761526413]
								}, {
									"case":	29,
									"scores":	[-7.52830761526413]
								}, {
									"case":	30,
									"scores":	[-7.52830761526413]
								}, {
									"case":	31,
									"scores":	[-7.52830761526413]
								}, {
									"case":	32,
									"scores":	[-7.52830761526413]
								}, {
									"case":	33,
									"scores":	[-7.52830761526413]
								}, {
									"case":	34,
									"scores":	[-7.52830761526413]
								}, {
									"case":	35,
									"scores":	[-7.52830761526413]
								}, {
									"case":	36,
									"scores":	[-7.52830761526413]
								}, {
									"case":	37,
									"scores":	[-7.52830761526413]
								}, {
									"case":	38,
									"scores":	[-7.52830761526413]
								}, {
									"case":	39,
									"scores":	[-7.52830761526413]
								}, {
									"case":	40,
									"scores":	[-7.52830761526413]
								}, {
									"case":	41,
									"scores":	[-7.52830761526413]
								}, {
									"case":	42,
									"scores":	[-7.52830761526413]
								}, {
									"case":	43,
									"scores":	[-7.52830761526413]
								}, {
									"case":	44,
									"scores":	[-7.52830761526413]
								}, {
									"case":	45,
									"scores":	[-7.52830761526413]
								}, {
									"case":	46,
									"scores":	[-7.52830761526413]
								}, {
									"case":	47,
									"scores":	[-7.52830761526413]
								}, {
									"case":	48,
									"scores":	[-7.52830761526413]
								}, {
									"case":	49,
									"scores":	[-7.52830761526413]
								}, {
									"case":	50,
									"scores":	[-7.52830761526413]
								}, {
									"case":	51,
									"scores":	[-7.52830761526413]
								}, {
									"case":	52,
									"scores":	[-7.52830761526413]
								}, {
									"case":	53,
									"scores":	[-7.52830761526413]
								}, {
									"case":	54,
									"scores":	[-7.52830761526413]
								}, {
									"case":	55,
									"scores":	[-7.52830761526413]
								}, {
									"case":	56,
									"scores":	[-7.52830761526413]
								}, {
									"case":	57,
									"scores":	[-7.52830761526413]
								}, {
									"case":	58,
									"scores":	[-7.52830761526413]
								}, {
									"case":	59,
									"scores":	[-7.52830761526413]
								}, {
									"case":	60,
									"scores":	[-7.52830761526413]
								}, {
									"case":	61,
									"scores":	[-7.52830761526413]
								}, {
									"case":	62,
									"scores":	[-7.52830761526413]
								}, {
									"case":	63,
									"scores":	[-7.52830761526413]
								}, {
									"case":	64,
									"scores":	[-7.52830761526413]
								}, {
									"case":	65,
									"scores":	[-7.52830761526413]
								}, {
									"case":	66,
									"scores":	[-7.52830761526413]
								}, {
									"case":	67,
									"scores":	[-7.52830761526413]
								}, {
									"case":	68,
									"scores":	[-7.52830761526413]
								}, {
									"case":	69,
									"scores":	[-7.52830761526413]
								}, {
									"case":	70,
									"scores":	[-7.52830761526413]
								}, {
									"case":	71,
									"scores":	[-7.52830761526413]
								}, {
									"case":	72,
									"scores":	[-7.52830761526413]
								}, {
									"case":	73,
									"scores":	[-7.52830761526413]
								}, {
									"case":	74,
									"scores":	[-7.52830761526413]
								}, {
									"case":	75,
									"scores":	[-7.52830761526413]
								}, {
									"case":	76,
									"scores":	[-7.52830761526413]
								}, {
									"case":	77,
									"scores":	[-7.52830761526413]
								}, {
									"case":	78,
									"scores":	[-7.52830761526413]
								}, {
									"case":	79,
									"scores":	[-7.52830761526413]
								}, {
									"case":	80,
									"scores":	[-7.52830761526413]
								}, {
									"case":	81,
									"scores":	[-7.52830761526413]
								}, {
									"case":	82,
									"scores":	[-7.52830761526413]
								}, {
									"case":	83,
									"scores":	[-7.52830761526413]
								}, {
									"case":	84,
									"scores":	[-7.52830761526413]
								}, {
									"case":	85,
									"scores":	[-7.52830761526413]
								}, {
									"case":	86,
									"scores":	[-7.52830761526413]
								}, {
									"case":	87,
									"scores":	[-7.52830761526413]
								}, {
									"case":	88,
									"scores":	[-7.52830761526413]
								}, {
									"case":	89,
									"scores":	[-7.52830761526413]
								}, {
									"case":	90,
									"scores":	[-7.52830761526413]
								}, {
									"case":	91,
									"scores":	[-7.52830761526413]
								}, {
									"case":	92,
									"scores":	[-7.52830761526413]
								}, {
									"case":	93,
									"scores":	[-7.52830761526413]
								}, {
									"case":	94,
									"scores":	[-7.52830761526413]
								}, {
									"case":	95,
									"scores":	[-7.52830761526413]
								}, {
									"case":	96,
									"scores":	[-7.52830761526413]
								}, {
									"case":	97,
									"scores":	[-7.52830761526413]
								}, {
									"case":	98,
									"scores":	[-7.52830761526413]
								}, {
									"case":	99,
									"scores":	[-7.52830761526413]
								}, {
									"case":	100,
									"scores":	[-7.52830761526413]
								}, {
									"case":	101,
									"scores":	[-7.52830761526413]
								}, {
									"case":	102,
									"scores":	[-7.52830761526413]
								}, {
									"case":	103,
									"scores":	[-7.52830761526413]
								}, {
									"case":	104,
									"scores":	[-7.52830761526413]
								}, {
									"case":	105,
									"scores":	[-7.52830761526413]
								}, {
									"case":	106,
									"scores":	[-7.52830761526413]
								}, {
									"case":	107,
									"scores":	[-7.52830761526413]
								}, {
									"case":	108,
									"scores":	[-7.52830761526413]
								}, {
									"case":	109,
									"scores":	[-7.52830761526413]
								}, {
									"case":	110,
									"scores":	[-7.52830761526413]
								}, {
									"case":	111,
									"scores":	[-7.52830761526413]
								}, {
									"case":	112,
									"scores":	[-7.52830761526413]
								}, {
									"case":	113,
									"scores":	[-7.52830761526413]
								}, {
									"case":	114,
									"scores":	[-7.52830761526413]
								}, {
									"case":	115,
									"scores":	[-7.52830761526413]
								}, {
									"case":	116,
									"scores":	[-7.52830761526413]
								}, {
									"case":	117,
									"scores":	[-7.52830761526413]
								}, {
									"case":	118,
									"scores":	[-7.52830761526413]
								}, {
									"case":	119,
									"scores":	[-7.52830761526413]
								}, {
									"case":	120,
									"scores":	[-7.52830761526413]
								}, {
									"case":	121,
									"scores":	[-7.52830761526413]
								}, {
									"case":	122,
									"scores":	[-7.52830761526413]
								}, {
									"case":	123,
									"scores":	[-7.52830761526413]
								}, {
									"case":	124,
									"scores":	[-7.52830761526413]
								}, {
									"case":	125,
									"scores":	[-7.52830761526413]
								}, {
									"case":	126,
									"scores":	[-7.52830761526413]
								}, {
									"case":	127,
									"scores":	[-7.52830761526413]
								}, {
									"case":	128,
									"scores":	[-7.52830761526413]
								}, {
									"case":	129,
									"scores":	[-7.52830761526413]
								}, {
									"case":	130,
									"scores":	[-7.52830761526413]
								}, {
									"case":	131,
									"scores":	[-7.52830761526413]
								}, {
									"case":	132,
									"scores":	[-7.52830761526413]
								}, {
									"case":	133,
									"scores":	[-7.52830761526413]
								}, {
									"case":	134,
									"scores":	[-7.52830761526413]
								}, {
									"case":	135,
									"scores":	[-7.52830761526413]
								}, {
									"case":	136,
									"scores":	[-7.52830761526413]
								}, {
									"case":	137,
									"scores":	[-7.52830761526413]
								}, {
									"case":	138,
									"scores":	[-7.52830761526413]
								}, {
									"case":	139,
									"scores":	[-7.52830761526413]
								}, {
									"case":	140,
									"scores":	[-7.52830761526413]
								}, {
									"case":	141,
									"scores":	[-7.52830761526413]
								}, {
									"case":	142,
									"scores":	[-7.52830761526413]
								}, {
									"case":	143,
									"scores":	[-7.52830761526413]
								}, {
									"case":	144,
									"scores":	[-7.52830761526413]
								}, {
									"case":	145,
									"scores":	[-7.52830761526413]
								}, {
									"case":	146,
									"scores":	[-7.52830761526413]
								}, {
									"case":	147,
									"scores":	[-7.52830761526413]
								}, {
									"case":	148,
									"scores":	[-7.52830761526413]
								}, {
									"case":	149,
									"scores":	[-7.52830761526413]
								}, {
									"case":	150,
									"scores":	[-7.52830761526413]
								}, {
									"case":	151,
									"scores":	[-7.52830761526413]
								}, {
									"case":	152,
									"scores":	[-7.52830761526413]
								}, {
									"case":	153,
									"scores":	[-7.52830761526413]
								}, {
									"case":	154,
									"scores":	[-7.52830761526413]
								}, {
									"case":	155,
									"scores":	[-7.52830761526413]
								}, {
									"case":	156,
									"scores":	[-7.52830761526413]
								}, {
									"case":	157,
									"scores":	[-7.52830761526413]
								}, {
									"case":	158,
									"scores":	[-7.52830761526413]
								}, {
									"case":	159,
									"scores":	[-7.52830761526413]
								}, {
									"case":	160,
									"scores":	[-7.52830761526413]
								}, {
									"case":	161,
									"scores":	[-7.52830761526413]
								}, {
									"case":	162,
									"scores":	[-7.52830761526413]
								}, {
									"case":	163,
									"scores":	[-7.52830761526413]
								}, {
									"case":	164,
									"scores":	[-7.52830761526413]
								}, {
									"case":	165,
									"scores":	[-7.52830761526413]
								}, {
									"case":	166,
									"scores":	[-7.52830761526413]
								}, {
									"case":	167,
									"scores":	[-7.52830761526413]
								}, {
									"case":	168,
									"scores":	[-7.52830761526413]
								}, {
									"case":	169,
									"scores":	[-7.52830761526413]
								}, {
									"case":	170,
									"scores":	[-7.52830761526413]
								}, {
									"case":	171,
									"scores":	[-7.52830761526413]
								}, {
									"case":	172,
									"scores":	[-7.52830761526413]
								}, {
									"case":	173,
									"scores":	[-7.52830761526413]
								}, {
									"case":	174,
									"scores":	[-7.52830761526413]
								}, {
									"case":	175,
									"scores":	[-7.52830761526413]
								}, {
									"case":	176,
									"scores":	[-7.52830761526413]
								}, {
									"case":	177,
									"scores":	[-7.52830761526413]
								}, {
									"case":	178,
									"scores":	[-7.52830761526413]
								}, {
									"case":	179,
									"scores":	[-7.52830761526413]
								}, {
									"case":	180,
									"scores":	[-7.52830761526413]
								}, {
									"case":	181,
									"scores":	[-7.52830761526413]
								}, {
									"case":	182,
									"scores":	[-7.52830761526413]
								}, {
									"case":	183,
									"scores":	[-7.52830761526413]
								}, {
									"case":	184,
									"scores":	[-7.52830761526413]
								}, {
									"case":	185,
									"scores":	[-7.52830761526413]
								}, {
									"case":	186,
									"scores":	[-7.52830761526413]
								}, {
									"case":	187,
									"scores":	[-7.52830761526413]
								}, {
									"case":	188,
									"scores":	[-7.52830761526413]
								}, {
									"case":	189,
									"scores":	[-7.52830761526413]
								}, {
									"case":	190,
									"scores":	[-7.52830761526413]
								}, {
									"case":	191,
									"scores":	[-7.52830761526413]
								}, {
									"case":	192,
									"scores":	[-7.52830761526413]
								}, {
									"case":	193,
									"scores":	[-7.52830761526413]
								}, {
									"case":	194,
									"scores":	[-7.52830761526413]
								}, {
									"case":	195,
									"scores":	[-7.52830761526413]
								}, {
									"case":	196,
									"scores":	[-7.52830761526413]
								}, {
									"case":	197,
									"scores":	[-7.52830761526413]
								}, {
									"case":	198,
									"scores":	[-7.52830761526413]
								}, {
									"case":	199,
									"scores":	[-7.52830761526413]
								}, {
									"case":	200,
									"scores":	[-7.52830761526413]
								}, {
									"case":	201,
									"scores":	[-7.52830761526413]
								}, {
									"case":	202,
									"scores":	[-7.52830761526413]
								}, {
									"case":	203,
									"scores":	[-7.52830761526413]
								}, {
									"case":	204,
									"scores":	[-7.52830761526413]
								}, {
									"case":	205,
									"scores":	[-7.52830761526413]
								}, {
									"case":	206,
									"scores":	[-7.52830761526413]
								}, {
									"case":	207,
									"scores":	[-7.52830761526413]
								}, {
									"case":	208,
									"scores":	[-7.52830761526413]
								}, {
									"case":	209,
									"scores":	[-7.52830761526413]
								}, {
									"case":	210,
									"scores":	[-7.52830761526413]
								}, {
									"case":	211,
									"scores":	[-7.52830761526413]
								}, {
									"case":	212,
									"scores":	[-7.52830761526413]
								}, {
									"case":	213,
									"scores":	[-7.52830761526413]
								}, {
									"case":	214,
									"scores":	[-7.52830761526413]
								}, {
									"case":	215,
									"scores":	[-7.52830761526413]
								}, {
									"case":	216,
									"scores":	[-7.52830761526413]
								}, {
									"case":	217,
									"scores":	[-7.52830761526413]
								}, {
									"case":	218,
									"scores":	[-7.52830761526413]
								}, {
									"case":	219,
									"scores":	[-7.52830761526413]
								}, {
									"case":	220,
									"scores":	[-7.52830761526413]
								}, {
									"case":	221,
									"scores":	[-7.52830761526413]
								}, {
									"case":	222,
									"scores":	[-7.52830761526413]
								}, {
									"case":	223,
									"scores":	[-7.52830761526413]
								}, {
									"case":	224,
									"scores":	[-7.52830761526413]
								}, {
									"case":	225,
									"scores":	[-7.52830761526413]
								}, {
									"case":	226,
									"scores":	[-7.52830761526413]
								}, {
									"case":	227,
									"scores":	[-7.52830761526413]
								}, {
									"case":	228,
									"scores":	[-7.52830761526413]
								}, {
									"case":	229,
									"scores":	[-7.52830761526413]
								}, {
									"case":	230,
									"scores":	[-7.52830761526413]
								}, {
									"case":	231,
									"scores":	[-7.52830761526413]
								}, {
									"case":	232,
									"scores":	[-7.52830761526413]
								}, {
									"case":	233,
									"scores":	[-7.52830761526413]
								}, {
									"case":	234,
									"scores":	[-7.52830761526413]
								}, {
									"case":	235,
									"scores":	[-7.52830761526413]
								}, {
									"case":	236,
									"scores":	[-7.52830761526413]
								}, {
									"case":	237,
									"scores":	[-7.52830761526413]
								}, {
									"case":	238,
									"scores":	[-7.52830761526413]
								}, {
									"case":	239,
									"scores":	[-7.52830761526413]
								}, {
									"case":	240,
									"scores":	[-7.52830761526413]
								}, {
									"case":	241,
									"scores":	[-7.52830761526413]
								}, {
									"case":	242,
									"scores":	[-7.52830761526413]
								}, {
									"case":	243,
									"scores":	[-7.52830761526413]
								}, {
									"case":	244,
									"scores":	[-7.52830761526413]
								}, {
									"case":	245,
									"scores":	[-7.52830761526413]
								}, {
									"case":	246,
									"scores":	[-7.52830761526413]
								}, {
									"case":	247,
									"scores":	[-7.52830761526413]
								}, {
									"case":	248,
									"scores":	[-7.52830761526413]
								}, {
									"case":	249,
									"scores":	[-7.52830761526413]
								}, {
									"case":	250,
									"scores":	[-7.52830761526413]
								}, {
									"case":	251,
									"scores":	[-7.52830761526413]
								}, {
									"case":	252,
									"scores":	[-7.52830761526413]
								}, {
									"case":	253,
									"scores":	[-7.52830761526413]
								}, {
									"case":	254,
									"scores":	[-7.52830761526413]
								}, {
									"case":	255,
									"scores":	[-7.52830761526413]
								}, {
									"case":	256,
									"scores":	[-7.52830761526413]
								}, {
									"case":	257,
									"scores":	[-7.52830761526413]
								}, {
									"case":	258,
									"scores":	[-7.52830761526413]
								}, {
									"case":	259,
									"scores":	[-7.52830761526413]
								}, {
									"case":	260,
									"scores":	[-7.52830761526413]
								}, {
									"case":	261,
									"scores":	[-7.52830761526413]
								}, {
									"case":	262,
									"scores":	[-7.52830761526413]
								}, {
									"case":	263,
									"scores":	[-7.52830761526413]
								}, {
									"case":	264,
									"scores":	[-7.52830761526413]
								}, {
									"case":	265,
									"scores":	[-7.52830761526413]
								}, {
									"case":	266,
									"scores":	[-7.52830761526413]
								}, {
									"case":	267,
									"scores":	[-7.52830761526413]
								}, {
									"case":	268,
									"scores":	[-7.52830761526413]
								}, {
									"case":	269,
									"scores":	[-7.52830761526413]
								}, {
									"case":	270,
									"scores":	[-7.52830761526413]
								}, {
									"case":	271,
									"scores":	[-7.52830761526413]
								}, {
									"case":	272,
									"scores":	[-7.52830761526413]
								}, {
									"case":	273,
									"scores":	[-7.52830761526413]
								}, {
									"case":	274,
									"scores":	[-7.52830761526413]
								}, {
									"case":	275,
									"scores":	[-7.52830761526413]
								}, {
									"case":	276,
									"scores":	[-7.52830761526413]
								}, {
									"case":	277,
									"scores":	[-7.52830761526413]
								}, {
									"case":	278,
									"scores":	[-7.52830761526413]
								}, {
									"case":	279,
									"scores":	[-7.52830761526413]
								}, {
									"case":	280,
									"scores":	[-7.52830761526413]
								}, {
									"case":	281,
									"scores":	[-7.52830761526413]
								}, {
									"case":	282,
									"scores":	[-7.52830761526413]
								}, {
									"case":	283,
									"scores":	[-7.52830761526413]
								}, {
									"case":	284,
									"scores":	[-7.52830761526413]
								}, {
									"case":	285,
									"scores":	[-7.52830761526413]
								}, {
									"case":	286,
									"scores":	[-7.52830761526413]
								}, {
									"case":	287,
									"scores":	[-7.52830761526413]
								}, {
									"case":	288,
									"scores":	[-7.52830761526413]
								}, {
									"case":	289,
									"scores":	[-7.52830761526413]
								}, {
									"case":	290,
									"scores":	[-7.52830761526413]
								}, {
									"case":	291,
									"scores":	[-7.52830761526413]
								}, {
									"case":	292,
									"scores":	[-7.52830761526413]
								}, {
									"case":	293,
									"scores":	[-7.52830761526413]
								}, {
									"case":	294,
									"scores":	[-7.52830761526413]
								}, {
									"case":	295,
									"scores":	[-7.52830761526413]
								}, {
									"case":	296,
									"scores":	[-7.52830761526413]
								}, {
									"case":	297,
									"scores":	[-7.52830761526413]
								}, {
									"case":	298,
									"scores":	[-7.52830761526413]
								}, {
									"case":	299,
									"scores":	[-7.52830761526413]
								}, {
									"case":	300,
									"scores":	[-7.52830761526413]
								}, {
									"case":	301,
									"scores":	[-7.52830761526413]
								}, {
									"case":	302,
									"scores":	[-7.52830761526413]
								}, {
									"case":	303,
									"scores":	[-7.52830761526413]
								}, {
									"case":	304,
									"scores":	[-7.52830761526413]
								}, {
									"case":	305,
									"scores":	[-7.52830761526413]
								}, {
									"case":	306,
									"scores":	[-7.52830761526413]
								}, {
									"case":	307,
									"scores":	[-7.52830761526413]
								}, {
									"case":	308,
									"scores":	[-7.52830761526413]
								}, {
									"case":	309,
									"scores":	[-7.52830761526413]
								}, {
									"case":	310,
									"scores":	[-7.52830761526413]
								}, {
									"case":	311,
									"scores":	[-7.52830761526413]
								}, {
									"case":	312,
									"scores":	[-7.52830761526413]
								}, {
									"case":	313,
									"scores":	[-7.52830761526413]
								}, {
									"case":	314,
									"scores":	[-7.52830761526413]
								}, {
									"case":	315,
									"scores":	[-7.52830761526413]
								}, {
									"case":	316,
									"scores":	[-7.52830761526413]
								}, {
									"case":	317,
									"scores":	[-7.52830761526413]
								}, {
									"case":	318,
									"scores":	[-7.52830761526413]
								}, {
									"case":	319,
									"scores":	[-7.52830761526413]
								}, {
									"case":	320,
									"scores":	[-7.52830761526413]
								}, {
									"case":	321,
									"scores":	[-7.52830761526413]
								}, {
									"case":	322,
									"scores":	[-7.52830761526413]
								}, {
									"case":	323,
									"scores":	[-7.52830761526413]
								}, {
									"case":	324,
									"scores":	[-7.52830761526413]
								}, {
									"case":	325,
									"scores":	[-7.52830761526413]
								}, {
									"case":	326,
									"scores":	[-7.52830761526413]
								}, {
									"case":	327,
									"scores":	[-7.52830761526413]
								}, {
									"case":	328,
									"scores":	[-7.52830761526413]
								}, {
									"case":	329,
									"scores":	[-7.52830761526413]
								}, {
									"case":	330,
									"scores":	[-7.52830761526413]
								}, {
									"case":	331,
									"scores":	[-7.52830761526413]
								}, {
									"case":	332,
									"scores":	[-7.52830761526413]
								}, {
									"case":	333,
									"scores":	[-7.52830761526413]
								}, {
									"case":	334,
									"scores":	[-7.52830761526413]
								}, {
									"case":	335,
									"scores":	[-7.52830761526413]
								}, {
									"case":	336,
									"scores":	[-7.52830761526413]
								}, {
									"case":	337,
									"scores":	[-7.52830761526413]
								}, {
									"case":	338,
									"scores":	[-7.52830761526413]
								}, {
									"case":	339,
									"scores":	[-7.52830761526413]
								}, {
									"case":	340,
									"scores":	[-7.52830761526413]
								}, {
									"case":	341,
									"scores":	[-7.52830761526413]
								}, {
									"case":	342,
									"scores":	[-7.52830761526413]
								}, {
									"case":	343,
									"scores":	[-7.52830761526413]
								}, {
									"case":	344,
									"scores":	[-7.52830761526413]
								}, {
									"case":	345,
									"scores":	[-7.52830761526413]
								}, {
									"case":	346,
									"scores":	[-7.52830761526413]
								}, {
									"case":	347,
									"scores":	[-7.52830761526413]
								}, {
									"case":	348,
									"scores":	[-7.52830761526413]
								}, {
									"case":	349,
									"scores":	[-7.52830761526413]
								}, {
									"case":	350,
									"scores":	[-7.52830761526413]
								}, {
									"case":	351,
									"scores":	[-7.52830761526413]
								}, {
									"case":	352,
									"scores":	[-7.52830761526413]
								}, {
									"case":	353,
									"scores":	[-7.52830761526413]
								}, {
									"case":	354,
									"scores":	[-7.52830761526413]
								}, {
									"case":	355,
									"scores":	[-7.52830761526413]
								}, {
									"case":	356,
									"scores":	[-7.52830761526413]
								}, {
									"case":	357,
									"scores":	[-7.52830761526413]
								}, {
									"case":	358,
									"scores":	[-7.52830761526413]
								}, {
									"case":	359,
									"scores":	[-7.52830761526413]
								}, {
									"case":	360,
									"scores":	[-7.52830761526413]
								}, {
									"case":	361,
									"scores":	[-7.52830761526413]
								}, {
									"case":	362,
									"scores":	[-7.52830761526413]
								}, {
									"case":	363,
									"scores":	[-7.52830761526413]
								}, {
									"case":	364,
									"scores":	[-7.52830761526413]
								}, {
									"case":	365,
									"scores":	[-7.52830761526413]
								}, {
									"case":	366,
									"scores":	[-7.52830761526413]
								}, {
									"case":	367,
									"scores":	[-7.52830761526413]
								}, {
									"case":	368,
									"scores":	[-7.52830761526413]
								}, {
									"case":	369,
									"scores":	[-7.52830761526413]
								}, {
									"case":	370,
									"scores":	[-7.52830761526413]
								}, {
									"case":	371,
									"scores":	[-7.52830761526413]
								}, {
									"case":	372,
									"scores":	[-7.52830761526413]
								}, {
									"case":	373,
									"scores":	[-7.52830761526413]
								}, {
									"case":	374,
									"scores":	[-7.52830761526413]
								}, {
									"case":	375,
									"scores":	[-7.52830761526413]
								}, {
									"case":	376,
									"scores":	[-7.52830761526413]
								}, {
									"case":	377,
									"scores":	[-7.52830761526413]
								}, {
									"case":	378,
									"scores":	[-7.52830761526413]
								}, {
									"case":	379,
									"scores":	[-7.52830761526413]
								}, {
									"case":	380,
									"scores":	[-7.52830761526413]
								}, {
									"case":	381,
									"scores":	[-7.52830761526413]
								}, {
									"case":	382,
									"scores":	[-7.52830761526413]
								}, {
									"case":	383,
									"scores":	[-7.52830761526413]
								}, {
									"case":	384,
									"scores":	[-7.52830761526413]
								}, {
									"case":	385,
									"scores":	[-7.52830761526413]
								}, {
									"case":	386,
									"scores":	[-7.52830761526413]
								}, {
									"case":	387,
									"scores":	[-7.52830761526413]
								}, {
									"case":	388,
									"scores":	[-7.52830761526413]
								}, {
									"case":	389,
									"scores":	[-7.52830761526413]
								}, {
									"case":	390,
									"scores":	[-7.52830761526413]
								}, {
									"case":	391,
									"scores":	[-7.52830761526413]
								}, {
									"case":	392,
									"scores":	[-7.52830761526413]
								}, {
									"case":	393,
									"scores":	[-7.52830761526413]
								}, {
									"case":	394,
									"scores":	[-7.52830761526413]
								}, {
									"case":	395,
									"scores":	[-7.52830761526413]
								}, {
									"case":	396,
									"scores":	[-7.52830761526413]
								}, {
									"case":	397,
									"scores":	[-7.52830761526413]
								}, {
									"case":	398,
									"scores":	[-7.52830761526413]
								}, {
									"case":	399,
									"scores":	[-7.52830761526413]
								}, {
									"case":	400,
									"scores":	[-7.52830761526413]
								}, {
									"case":	401,
									"scores":	[-7.52830761526413]
								}, {
									"case":	402,
									"scores":	[-7.52830761526413]
								}, {
									"case":	403,
									"scores":	[-7.52830761526413]
								}, {
									"case":	404,
									"scores":	[-7.52830761526413]
								}, {
									"case":	405,
									"scores":	[-7.52830761526413]
								}, {
									"case":	406,
									"scores":	[-7.52830761526413]
								}, {
									"case":	407,
									"scores":	[-7.52830761526413]
								}, {
									"case":	408,
									"scores":	[-7.52830761526413]
								}, {
									"case":	409,
									"scores":	[-7.52830761526413]
								}, {
									"case":	410,
									"scores":	[-7.52830761526413]
								}, {
									"case":	411,
									"scores":	[-7.52830761526413]
								}, {
									"case":	412,
									"scores":	[-7.52830761526413]
								}, {
									"case":	413,
									"scores":	[-7.52830761526413]
								}, {
									"case":	414,
									"scores":	[-7.52830761526413]
								}, {
									"case":	415,
									"scores":	[-7.52830761526413]
								}, {
									"case":	416,
									"scores":	[-7.52830761526413]
								}, {
									"case":	417,
									"scores":	[-7.52830761526413]
								}, {
									"case":	418,
									"scores":	[-7.52830761526413]
								}, {
									"case":	419,
									"scores":	[-7.52830761526413]
								}, {
									"case":	420,
									"scores":	[-7.52830761526413]
								}, {
									"case":	421,
									"scores":	[-7.52830761526413]
								}, {
									"case":	422,
									"scores":	[-7.52830761526413]
								}, {
									"case":	423,
									"scores":	[-7.52830761526413]
								}, {
									"case":	424,
									"scores":	[-7.52830761526413]
								}, {
									"case":	425,
									"scores":	[-7.52830761526413]
								}, {
									"case":	426,
									"scores":	[-7.52830761526413]
								}, {
									"case":	427,
									"scores":	[-7.52830761526413]
								}, {
									"case":	428,
									"scores":	[-7.52830761526413]
								}, {
									"case":	429,
									"scores":	[-7.52830761526413]
								}, {
									"case":	430,
									"scores":	[-7.52830761526413]
								}, {
									"case":	431,
									"scores":	[-7.52830761526413]
								}, {
									"case":	432,
									"scores":	[-7.52830761526413]
								}, {
									"case":	433,
									"scores":	[-7.52830761526413]
								}, {
									"case":	434,
									"scores":	[-7.52830761526413]
								}, {
									"case":	435,
									"scores":	[-7.52830761526413]
								}, {
									"case":	436,
									"scores":	[-7.52830761526413]
								}, {
									"case":	437,
									"scores":	[-7.52830761526413]
								}, {
									"case":	438,
									"scores":	[-7.52830761526413]
								}, {
									"case":	439,
									"scores":	[-7.52830761526413]
								}, {
									"case":	440,
									"scores":	[-7.52830761526413]
								}, {
									"case":	441,
									"scores":	[-7.52830761526413]
								}, {
									"case":	442,
									"scores":	[-7.52830761526413]
								}, {
									"case":	443,
									"scores":	[-7.52830761526413]
								}, {
									"case":	444,
									"scores":	[-7.52830761526413]
								}, {
									"case":	445,
									"scores":	[-7.52830761526413]
								}, {
									"case":	446,
									"scores":	[-7.52830761526413]
								}, {
									"case":	447,
									"scores":	[-7.52830761526413]
								}, {
									"case":	448,
									"scores":	[-7.52830761526413]
								}, {
									"case":	449,
									"scores":	[-7.52830761526413]
								}, {
									"case":	450,
									"scores":	[-7.52830761526413]
								}, {
									"case":	451,
									"scores":	[-7.52830761526413]
								}, {
									"case":	452,
									"scores":	[-7.52830761526413]
								}, {
									"case":	453,
									"scores":	[-7.52830761526413]
								}, {
									"case":	454,
									"scores":	[-7.52830761526413]
								}, {
									"case":	455,
									"scores":	[-7.52830761526413]
								}, {
									"case":	456,
									"scores":	[-7.52830761526413]
								}, {
									"case":	457,
									"scores":	[-7.52830761526413]
								}, {
									"case":	458,
									"scores":	[-7.52830761526413]
								}, {
									"case":	459,
									"scores":	[-7.52830761526413]
								}, {
									"case":	460,
									"scores":	[-7.52830761526413]
								}, {
									"case":	461,
									"scores":	[-7.52830761526413]
								}, {
									"case":	462,
									"scores":	[-7.52830761526413]
								}, {
									"case":	463,
									"scores":	[-7.52830761526413]
								}, {
									"case":	464,
									"scores":	[-7.52830761526413]
								}, {
									"case":	465,
									"scores":	[-7.52830761526413]
								}, {
									"case":	466,
									"scores":	[-7.52830761526413]
								}, {
									"case":	467,
									"scores":	[-7.52830761526413]
								}, {
									"case":	468,
									"scores":	[-7.52830761526413]
								}, {
									"case":	469,
									"scores":	[-7.52830761526413]
								}, {
									"case":	470,
									"scores":	[-7.52830761526413]
								}, {
									"case":	471,
									"scores":	[-7.52830761526413]
								}, {
									"case":	472,
									"scores":	[-7.52830761526413]
								}, {
									"case":	473,
									"scores":	[-7.52830761526413]
								}, {
									"case":	474,
									"scores":	[-7.52830761526413]
								}, {
									"case":	475,
									"scores":	[-7.52830761526413]
								}, {
									"case":	476,
									"scores":	[-7.52830761526413]
								}, {
									"case":	477,
									"scores":	[-7.52830761526413]
								}, {
									"case":	478,
									"scores":	[-7.52830761526413]
								}, {
									"case":	479,
									"scores":	[-7.52830761526413]
								}, {
									"case":	480,
									"scores":	[-7.52830761526413]
								}, {
									"case":	481,
									"scores":	[-7.52830761526413]
								}, {
									"case":	482,
									"scores":	[-7.52830761526413]
								}, {
									"case":	483,
									"scores":	[-7.52830761526413]
								}, {
									"case":	484,
									"scores":	[-7.52830761526413]
								}, {
									"case":	485,
									"scores":	[-7.52830761526413]
								}, {
									"case":	486,
									"scores":	[-7.52830761526413]
								}, {
									"case":	487,
									"scores":	[-7.52830761526413]
								}, {
									"case":	488,
									"scores":	[-7.52830761526413]
								}, {
									"case":	489,
									"scores":	[-7.52830761526413]
								}, {
									"case":	490,
									"scores":	[-7.52830761526413]
								}, {
									"case":	491,
									"scores":	[-7.52830761526413]
								}, {
									"case":	492,
									"scores":	[-7.52830761526413]
								}, {
									"case":	493,
									"scores":	[-7.52830761526413]
								}, {
									"case":	494,
									"scores":	[-7.52830761526413]
								}, {
									"case":	495,
									"scores":	[-7.52830761526413]
								}, {
									"case":	496,
									"scores":	[-7.52830761526413]
								}, {
									"case":	497,
									"scores":	[-7.52830761526413]
								}, {
									"case":	498,
									"scores":	[-7.52830761526413]
								}, {
									"case":	499,
									"scores":	[-7.52830761526413]
								}, {
									"case":	500,
									"scores":	[-7.52830761526413]
								}, {
									"case":	501,
									"scores":	[-7.52830761526413]
								}, {
									"case":	502,
									"scores":	[-7.52830761526413]
								}, {
									"case":	503,
									"scores":	[-7.52830761526413]
								}, {
									"case":	504,
									"scores":	[-7.52830761526413]
								}, {
									"case":	505,
									"scores":	[-7.52830761526413]
								}, {
									"case":	506,
									"scores":	[-7.52830761526413]
								}, {
									"case":	507,
									"scores":	[-7.52830761526413]
								}, {
									"case":	508,
									"scores":	[-7.52830761526413]
								}, {
									"case":	509,
									"scores":	[-7.52830761526413]
								}, {
									"case":	510,
									"scores":	[-7.52830761526413]
								}, {
									"case":	511,
									"scores":	[-7.52830761526413]
								}, {
									"case":	512,
									"scores":	[-7.52830761526413]
								}, {
									"case":	513,
									"scores":	[-7.52830761526413]
								}, {
									"case":	514,
									"scores":	[-7.52830761526413]
								}, {
									"case":	515,
									"scores":	[-7.52830761526413]
								}, {
									"case":	516,
									"scores":	[-7.52830761526413]
								}, {
									"case":	517,
									"scores":	[-7.52830761526413]
								}, {
									"case":	518,
									"scores":	[-7.52830761526413]
								}, {
									"case":	519,
									"scores":	[-7.52830761526413]
								}, {
									"case":	520,
									"scores":	[-7.52830761526413]
								}, {
									"case":	521,
									"scores":	[-7.52830761526413]
								}, {
									"case":	522,
									"scores":	[-7.52830761526413]
								}, {
									"case":	523,
									"scores":	[-7.52830761526413]
								}, {
									"case":	524,
									"scores":	[-7.52830761526413]
								}, {
									"case":	525,
									"scores":	[-7.52830761526413]
								}, {
									"case":	526,
									"scores":	[-7.52830761526413]
								}, {
									"case":	527,
									"scores":	[-7.52830761526413]
								}, {
									"case":	528,
									"scores":	[-7.52830761526413]
								}, {
									"case":	529,
									"scores":	[-7.52830761526413]
								}, {
									"case":	530,
									"scores":	[-7.52830761526413]
								}, {
									"case":	531,
									"scores":	[-7.52830761526413]
								}, {
									"case":	532,
									"scores":	[-7.52830761526413]
								}, {
									"case":	533,
									"scores":	[-7.52830761526413]
								}, {
									"case":	534,
									"scores":	[-7.52830761526413]
								}, {
									"case":	535,
									"scores":	[-7.52830761526413]
								}, {
									"case":	536,
									"scores":	[-7.52830761526413]
								}, {
									"case":	537,
									"scores":	[-7.52830761526413]
								}, {
									"case":	538,
									"scores":	[-7.52830761526413]
								}, {
									"case":	539,
									"scores":	[-7.52830761526413]
								}, {
									"case":	540,
									"scores":	[-7.52830761526413]
								}, {
									"case":	541,
									"scores":	[-7.52830761526413]
								}, {
									"case":	542,
									"scores":	[-7.52830761526413]
								}, {
									"case":	543,
									"scores":	[-7.52830761526413]
								}, {
									"case":	544,
									"scores":	[-7.52830761526413]
								}, {
									"case":	545,
									"scores":	[-7.52830761526413]
								}, {
									"case":	546,
									"scores":	[-7.52830761526413]
								}, {
									"case":	547,
									"scores":	[-7.52830761526413]
								}, {
									"case":	548,
									"scores":	[-7.52830761526413]
								}, {
									"case":	549,
									"scores":	[-7.52830761526413]
								}, {
									"case":	550,
									"scores":	[-7.52830761526413]
								}, {
									"case":	551,
									"scores":	[-7.52830761526413]
								}, {
									"case":	552,
									"scores":	[-7.52830761526413]
								}, {
									"case":	553,
									"scores":	[-7.52830761526413]
								}, {
									"case":	554,
									"scores":	[-7.52830761526413]
								}, {
									"case":	555,
									"scores":	[-7.52830761526413]
								}, {
									"case":	556,
									"scores":	[-7.52830761526413]
								}, {
									"case":	557,
									"scores":	[-7.52830761526413]
								}, {
									"case":	558,
									"scores":	[-7.52830761526413]
								}, {
									"case":	559,
									"scores":	[-7.52830761526413]
								}, {
									"case":	560,
									"scores":	[-7.52830761526413]
								}, {
									"case":	561,
									"scores":	[-7.52830761526413]
								}, {
									"case":	562,
									"scores":	[-7.52830761526413]
								}, {
									"case":	563,
									"scores":	[-7.52830761526413]
								}, {
									"case":	564,
									"scores":	[-7.52830761526413]
								}, {
									"case":	565,
									"scores":	[-7.52830761526413]
								}, {
									"case":	566,
									"scores":	[-7.52830761526413]
								}, {
									"case":	567,
									"scores":	[-7.52830761526413]
								}, {
									"case":	568,
									"scores":	[-7.52830761526413]
								}, {
									"case":	569,
									"scores":	[-7.52830761526413]
								}, {
									"case":	570,
									"scores":	[-7.52830761526413]
								}, {
									"case":	571,
									"scores":	[-7.52830761526413]
								}, {
									"case":	572,
									"scores":	[-7.52830761526413]
								}, {
									"case":	573,
									"scores":	[-7.52830761526413]
								}, {
									"case":	574,
									"scores":	[-7.52830761526413]
								}, {
									"case":	575,
									"scores":	[-7.52830761526413]
								}, {
									"case":	576,
									"scores":	[-7.52830761526413]
								}, {
									"case":	577,
									"scores":	[-7.52830761526413]
								}, {
									"case":	578,
									"scores":	[-7.52830761526413]
								}, {
									"case":	579,
									"scores":	[-7.52830761526413]
								}, {
									"case":	580,
									"scores":	[-7.52830761526413]
								}, {
									"case":	581,
									"scores":	[-7.52830761526413]
								}, {
									"case":	582,
									"scores":	[-7.52830761526413]
								}, {
									"case":	583,
									"scores":	[-7.52830761526413]
								}, {
									"case":	584,
									"scores":	[-7.52830761526413]
								}, {
									"case":	585,
									"scores":	[-7.52830761526413]
								}, {
									"case":	586,
									"scores":	[-7.52830761526413]
								}, {
									"case":	587,
									"scores":	[-7.52830761526413]
								}, {
									"case":	588,
									"scores":	[-7.52830761526413]
								}, {
									"case":	589,
									"scores":	[-7.52830761526413]
								}, {
									"case":	590,
									"scores":	[-7.52830761526413]
								}, {
									"case":	591,
									"scores":	[-7.52830761526413]
								}, {
									"case":	592,
									"scores":	[-7.52830761526413]
								}, {
									"case":	593,
									"scores":	[-7.52830761526413]
								}, {
									"case":	594,
									"scores":	[-7.52830761526413]
								}, {
									"case":	595,
									"scores":	[-7.52830761526413]
								}, {
									"case":	596,
									"scores":	[-7.52830761526413]
								}, {
									"case":	597,
									"scores":	[-7.52830761526413]
								}, {
									"case":	598,
									"scores":	[-7.52830761526413]
								}, {
									"case":	599,
									"scores":	[-7.52830761526413]
								}, {
									"case":	600,
									"scores":	[-7.52830761526413]
								}, {
									"case":	601,
									"scores":	[-7.52830761526413]
								}, {
									"case":	602,
									"scores":	[-7.52830761526413]
								}, {
									"case":	603,
									"scores":	[-7.52830761526413]
								}, {
									"case":	604,
									"scores":	[-7.52830761526413]
								}, {
									"case":	605,
									"scores":	[-7.52830761526413]
								}, {
									"case":	606,
									"scores":	[-7.52830761526413]
								}, {
									"case":	607,
									"scores":	[-7.52830761526413]
								}, {
									"case":	608,
									"scores":	[-7.52830761526413]
								}, {
									"case":	609,
									"scores":	[-7.52830761526413]
								}, {
									"case":	610,
									"scores":	[-7.52830761526413]
								}, {
									"case":	611,
									"scores":	[-7.52830761526413]
								}, {
									"case":	612,
									"scores":	[-7.52830761526413]
								}, {
									"case":	613,
									"scores":	[-7.52830761526413]
								}, {
									"case":	614,
									"scores":	[-7.52830761526413]
								}, {
									"case":	615,
									"scores":	[-7.52830761526413]
								}, {
									"case":	616,
									"scores":	[-7.52830761526413]
								}, {
									"case":	617,
									"scores":	[-7.52830761526413]
								}, {
									"case":	618,
									"scores":	[-7.52830761526413]
								}, {
									"case":	619,
									"scores":	[-7.52830761526413]
								}, {
									"case":	620,
									"scores":	[-7.52830761526413]
								}, {
									"case":	621,
									"scores":	[-7.52830761526413]
								}, {
									"case":	622,
									"scores":	[-7.52830761526413]
								}, {
									"case":	623,
									"scores":	[-7.52830761526413]
								}, {
									"case":	624,
									"scores":	[-7.52830761526413]
								}, {
									"case":	625,
									"scores":	[-7.52830761526413]
								}, {
									"case":	626,
									"scores":	[-7.52830761526413]
								}, {
									"case":	627,
									"scores":	[-7.52830761526413]
								}, {
									"case":	628,
									"scores":	[-7.52830761526413]
								}, {
									"case":	629,
									"scores":	[-7.52830761526413]
								}, {
									"case":	630,
									"scores":	[-7.52830761526413]
								}, {
									"case":	631,
									"scores":	[-7.52830761526413]
								}, {
									"case":	632,
									"scores":	[-7.52830761526413]
								}, {
									"case":	633,
									"scores":	[-7.52830761526413]
								}, {
									"case":	634,
									"scores":	[-7.52830761526413]
								}, {
									"case":	635,
									"scores":	[-7.52830761526413]
								}, {
									"case":	636,
									"scores":	[-7.52830761526413]
								}, {
									"case":	637,
									"scores":	[-7.52830761526413]
								}, {
									"case":	638,
									"scores":	[-7.52830761526413]
								}, {
									"case":	639,
									"scores":	[-7.52830761526413]
								}, {
									"case":	640,
									"scores":	[-7.52830761526413]
								}, {
									"case":	641,
									"scores":	[-7.52830761526413]
								}, {
									"case":	642,
									"scores":	[-7.52830761526413]
								}, {
									"case":	643,
									"scores":	[-7.52830761526413]
								}, {
									"case":	644,
									"scores":	[-7.52830761526413]
								}, {
									"case":	645,
									"scores":	[-7.52830761526413]
								}, {
									"case":	646,
									"scores":	[-7.52830761526413]
								}, {
									"case":	647,
									"scores":	[-7.52830761526413]
								}, {
									"case":	648,
									"scores":	[-7.52830761526413]
								}, {
									"case":	649,
									"scores":	[-7.52830761526413]
								}, {
									"case":	650,
									"scores":	[-7.52830761526413]
								}, {
									"case":	651,
									"scores":	[-7.52830761526413]
								}, {
									"case":	652,
									"scores":	[-7.52830761526413]
								}, {
									"case":	653,
									"scores":	[-7.52830761526413]
								}, {
									"case":	654,
									"scores":	[-7.52830761526413]
								}, {
									"case":	655,
									"scores":	[-7.52830761526413]
								}, {
									"case":	656,
									"scores":	[-7.52830761526413]
								}, {
									"case":	657,
									"scores":	[-7.52830761526413]
								}, {
									"case":	658,
									"scores":	[-7.52830761526413]
								}, {
									"case":	659,
									"scores":	[-7.52830761526413]
								}, {
									"case":	660,
									"scores":	[-7.52830761526413]
								}, {
									"case":	661,
									"scores":	[-7.52830761526413]
								}, {
									"case":	662,
									"scores":	[-7.52830761526413]
								}, {
									"case":	663,
									"scores":	[-7.52830761526413]
								}, {
									"case":	664,
									"scores":	[-7.52830761526413]
								}, {
									"case":	665,
									"scores":	[-7.52830761526413]
								}, {
									"case":	666,
									"scores":	[-7.52830761526413]
								}, {
									"case":	667,
									"scores":	[-7.52830761526413]
								}, {
									"case":	668,
									"scores":	[-7.52830761526413]
								}, {
									"case":	669,
									"scores":	[-7.52830761526413]
								}, {
									"case":	670,
									"scores":	[-7.52830761526413]
								}, {
									"case":	671,
									"scores":	[-7.52830761526413]
								}, {
									"case":	672,
									"scores":	[-7.52830761526413]
								}, {
									"case":	673,
									"scores":	[-7.52830761526413]
								}, {
									"case":	674,
									"scores":	[-7.52830761526413]
								}, {
									"case":	675,
									"scores":	[-7.52830761526413]
								}, {
									"case":	676,
									"scores":	[-7.52830761526413]
								}, {
									"case":	677,
									"scores":	[-7.52830761526413]
								}, {
									"case":	678,
									"scores":	[-7.52830761526413]
								}, {
									"case":	679,
									"scores":	[-7.52830761526413]
								}, {
									"case":	680,
									"scores":	[-7.52830761526413]
								}, {
									"case":	681,
									"scores":	[-7.52830761526413]
								}, {
									"case":	682,
									"scores":	[-7.52830761526413]
								}, {
									"case":	683,
									"scores":	[-7.52830761526413]
								}, {
									"case":	684,
									"scores":	[-7.52830761526413]
								}, {
									"case":	685,
									"scores":	[-7.52830761526413]
								}, {
									"case":	686,
									"scores":	[-7.52830761526413]
								}, {
									"case":	687,
									"scores":	[-7.52830761526413]
								}, {
									"case":	688,
									"scores":	[-7.52830761526413]
								}, {
									"case":	689,
									"scores":	[-7.52830761526413]
								}, {
									"case":	690,
									"scores":	[-7.52830761526413]
								}, {
									"case":	691,
									"scores":	[-7.52830761526413]
								}, {
									"case":	692,
									"scores":	[-7.52830761526413]
								}, {
									"case":	693,
									"scores":	[-7.52830761526413]
								}, {
									"case":	694,
									"scores":	[-7.52830761526413]
								}, {
									"case":	695,
									"scores":	[-7.52830761526413]
								}, {
									"case":	696,
									"scores":	[-7.52830761526413]
								}, {
									"case":	697,
									"scores":	[-7.52830761526413]
								}, {
									"case":	698,
									"scores":	[-7.52830761526413]
								}, {
									"case":	699,
									"scores":	[-7.52830761526413]
								}, {
									"case":	700,
									"scores":	[-7.52830761526413]
								}, {
									"case":	701,
									"scores":	[-7.52830761526413]
								}, {
									"case":	702,
									"scores":	[-7.52830761526413]
								}, {
									"case":	703,
									"scores":	[-7.52830761526413]
								}, {
									"case":	704,
									"scores":	[-7.52830761526413]
								}, {
									"case":	705,
									"scores":	[-7.52830761526413]
								}, {
									"case":	706,
									"scores":	[-7.52830761526413]
								}, {
									"case":	707,
									"scores":	[-7.52830761526413]
								}, {
									"case":	708,
									"scores":	[-7.52830761526413]
								}, {
									"case":	709,
									"scores":	[-7.52830761526413]
								}, {
									"case":	710,
									"scores":	[-7.52830761526413]
								}, {
									"case":	711,
									"scores":	[-7.52830761526413]
								}, {
									"case":	712,
									"scores":	[-7.52830761526413]
								}, {
									"case":	713,
									"scores":	[-7.52830761526413]
								}, {
									"case":	714,
									"scores":	[-7.52830761526413]
								}, {
									"case":	715,
									"scores":	[-7.52830761526413]
								}, {
									"case":	716,
									"scores":	[-7.52830761526413]
								}, {
									"case":	717,
									"scores":	[-7.52830761526413]
								}, {
									"case":	718,
									"scores":	[-7.52830761526413]
								}, {
									"case":	719,
									"scores":	[-7.52830761526413]
								}, {
									"case":	720,
									"scores":	[-7.52830761526413]
								}, {
									"case":	721,
									"scores":	[-7.52830761526413]
								}, {
									"case":	722,
									"scores":	[-7.52830761526413]
								}, {
									"case":	723,
									"scores":	[-7.52830761526413]
								}, {
									"case":	724,
									"scores":	[-7.52830761526413]
								}, {
									"case":	725,
									"scores":	[-7.52830761526413]
								}, {
									"case":	726,
									"scores":	[-7.52830761526413]
								}, {
									"case":	727,
									"scores":	[-7.52830761526413]
								}, {
									"case":	728,
									"scores":	[-7.52830761526413]
								}, {
									"case":	729,
									"scores":	[-7.52830761526413]
								}, {
									"case":	730,
									"scores":	[-7.52830761526413]
								}, {
									"case":	731,
									"scores":	[-7.52830761526413]
								}, {
									"case":	732,
									"scores":	[-7.52830761526413]
								}, {
									"case":	733,
									"scores":	[-7.52830761526413]
								}, {
									"case":	734,
									"scores":	[-7.52830761526413]
								}, {
									"case":	735,
									"scores":	[-7.52830761526413]
								}, {
									"case":	736,
									"scores":	[-7.52830761526413]
								}, {
									"case":	737,
									"scores":	[-7.52830761526413]
								}, {
									"case":	738,
									"scores":	[-7.52830761526413]
								}, {
									"case":	739,
									"scores":	[-7.52830761526413]
								}, {
									"case":	740,
									"scores":	[-7.52830761526413]
								}, {
									"case":	741,
									"scores":	[-7.52830761526413]
								}, {
									"case":	742,
									"scores":	[-7.52830761526413]
								}, {
									"case":	743,
									"scores":	[-7.52830761526413]
								}, {
									"case":	744,
									"scores":	[-7.52830761526413]
								}, {
									"case":	745,
									"scores":	[-7.52830761526413]
								}, {
									"case":	746,
									"scores":	[-7.52830761526413]
								}, {
									"case":	747,
									"scores":	[-7.52830761526413]
								}, {
									"case":	748,
									"scores":	[-7.52830761526413]
								}, {
									"case":	749,
									"scores":	[-7.52830761526413]
								}, {
									"case":	750,
									"scores":	[-7.52830761526413]
								}, {
									"case":	751,
									"scores":	[-7.52830761526413]
								}, {
									"case":	752,
									"scores":	[-7.52830761526413]
								}, {
									"case":	753,
									"scores":	[-7.52830761526413]
								}, {
									"case":	754,
									"scores":	[-7.52830761526413]
								}, {
									"case":	755,
									"scores":	[-7.52830761526413]
								}, {
									"case":	756,
									"scores":	[-7.52830761526413]
								}, {
									"case":	757,
									"scores":	[-7.52830761526413]
								}, {
									"case":	758,
									"scores":	[-7.52830761526413]
								}, {
									"case":	759,
									"scores":	[-7.52830761526413]
								}, {
									"case":	760,
									"scores":	[-7.52830761526413]
								}, {
									"case":	761,
									"scores":	[-7.52830761526413]
								}, {
									"case":	762,
									"scores":	[-7.52830761526413]
								}, {
									"case":	763,
									"scores":	[-7.52830761526413]
								}, {
									"case":	764,
									"scores":	[-7.52830761526413]
								}, {
									"case":	765,
									"scores":	[-7.52830761526413]
								}, {
									"case":	766,
									"scores":	[-7.52830761526413]
								}, {
									"case":	767,
									"scores":	[-7.52830761526413]
								}, {
									"case":	768,
									"scores":	[-7.52830761526413]
								}, {
									"case":	769,
									"scores":	[-7.52830761526413]
								}, {
									"case":	770,
									"scores":	[-7.52830761526413]
								}, {
									"case":	771,
									"scores":	[-7.52830761526413]
								}, {
									"case":	772,
									"scores":	[-7.52830761526413]
								}, {
									"case":	773,
									"scores":	[-7.52830761526413]
								}, {
									"case":	774,
									"scores":	[-7.52830761526413]
								}, {
									"case":	775,
									"scores":	[-7.52830761526413]
								}, {
									"case":	776,
									"scores":	[-7.52830761526413]
								}, {
									"case":	777,
									"scores":	[-7.52830761526413]
								}, {
									"case":	778,
									"scores":	[-7.52830761526413]
								}, {
									"case":	779,
									"scores":	[-7.52830761526413]
								}, {
									"case":	780,
									"scores":	[-7.52830761526413]
								}, {
									"case":	781,
									"scores":	[-7.52830761526413]
								}, {
									"case":	782,
									"scores":	[-7.52830761526413]
								}, {
									"case":	783,
									"scores":	[-7.52830761526413]
								}, {
									"case":	784,
									"scores":	[-7.52830761526413]
								}, {
									"case":	785,
									"scores":	[-7.52830761526413]
								}, {
									"case":	786,
									"scores":	[-7.52830761526413]
								}, {
									"case":	787,
									"scores":	[-7.52830761526413]
								}, {
									"case":	788,
									"scores":	[-7.52830761526413]
								}, {
									"case":	789,
									"scores":	[-7.52830761526413]
								}, {
									"case":	790,
									"scores":	[-7.52830761526413]
								}, {
									"case":	791,
									"scores":	[-7.52830761526413]
								}, {
									"case":	792,
									"scores":	[-7.52830761526413]
								}, {
									"case":	793,
									"scores":	[-7.52830761526413]
								}, {
									"case":	794,
									"scores":	[-7.52830761526413]
								}, {
									"case":	795,
									"scores":	[-7.52830761526413]
								}, {
									"case":	796,
									"scores":	[-7.52830761526413]
								}, {
									"case":	797,
									"scores":	[-7.52830761526413]
								}, {
									"case":	798,
									"scores":	[-7.52830761526413]
								}, {
									"case":	799,
									"scores":	[-7.52830761526413]
								}, {
									"case":	800,
									"scores":	[-7.52830761526413]
								}, {
									"case":	801,
									"scores":	[-7.52830761526413]
								}, {
									"case":	802,
									"scores":	[-7.52830761526413]
								}, {
									"case":	803,
									"scores":	[-7.52830761526413]
								}, {
									"case":	804,
									"scores":	[-7.52830761526413]
								}, {
									"case":	805,
									"scores":	[-7.52830761526413]
								}, {
									"case":	806,
									"scores":	[-7.52830761526413]
								}, {
									"case":	807,
									"scores":	[-7.52830761526413]
								}, {
									"case":	808,
									"scores":	[-7.52830761526413]
								}, {
									"case":	809,
									"scores":	[-7.52830761526413]
								}, {
									"case":	810,
									"scores":	[-7.52830761526413]
								}, {
									"case":	811,
									"scores":	[-7.52830761526413]
								}, {
									"case":	812,
									"scores":	[-7.52830761526413]
								}, {
									"case":	813,
									"scores":	[-7.52830761526413]
								}, {
									"case":	814,
									"scores":	[-7.52830761526413]
								}, {
									"case":	815,
									"scores":	[-7.52830761526413]
								}, {
									"case":	816,
									"scores":	[-7.52830761526413]
								}, {
									"case":	817,
									"scores":	[-7.52830761526413]
								}, {
									"case":	818,
									"scores":	[-7.52830761526413]
								}, {
									"case":	819,
									"scores":	[-7.52830761526413]
								}, {
									"case":	820,
									"scores":	[-7.52830761526413]
								}, {
									"case":	821,
									"scores":	[-7.52830761526413]
								}, {
									"case":	822,
									"scores":	[-7.52830761526413]
								}, {
									"case":	823,
									"scores":	[-7.52830761526413]
								}, {
									"case":	824,
									"scores":	[-7.52830761526413]
								}, {
									"case":	825,
									"scores":	[-7.52830761526413]
								}, {
									"case":	826,
									"scores":	[-7.52830761526413]
								}, {
									"case":	827,
									"scores":	[-7.52830761526413]
								}, {
									"case":	828,
									"scores":	[-7.52830761526413]
								}, {
									"case":	829,
									"scores":	[-7.52830761526413]
								}, {
									"case":	830,
									"scores":	[-7.52830761526413]
								}, {
									"case":	831,
									"scores":	[-7.52830761526413]
								}, {
									"case":	832,
									"scores":	[-7.52830761526413]
								}, {
									"case":	833,
									"scores":	[-7.52830761526413]
								}, {
									"case":	834,
									"scores":	[-7.52830761526413]
								}, {
									"case":	835,
									"scores":	[-7.52830761526413]
								}, {
									"case":	836,
									"scores":	[-7.52830761526413]
								}, {
									"case":	837,
									"scores":	[-7.52830761526413]
								}, {
									"case":	838,
									"scores":	[-7.52830761526413]
								}, {
									"case":	839,
									"scores":	[-7.52830761526413]
								}, {
									"case":	840,
									"scores":	[-7.52830761526413]
								}, {
									"case":	841,
									"scores":	[-7.52830761526413]
								}, {
									"case":	842,
									"scores":	[-7.52830761526413]
								}, {
									"case":	843,
									"scores":	[-7.52830761526413]
								}, {
									"case":	844,
									"scores":	[-7.52830761526413]
								}, {
									"case":	845,
									"scores":	[-7.52830761526413]
								}, {
									"case":	846,
									"scores":	[-7.52830761526413]
								}, {
									"case":	847,
									"scores":	[-7.52830761526413]
								}, {
									"case":	848,
									"scores":	[-7.52830761526413]
								}, {
									"case":	849,
									"scores":	[-7.52830761526413]
								}, {
									"case":	850,
									"scores":	[-7.52830761526413]
								}, {
									"case":	851,
									"scores":	[-7.52830761526413]
								}, {
									"case":	852,
									"scores":	[-7.52830761526413]
								}, {
									"case":	853,
									"scores":	[-7.52830761526413]
								}, {
									"case":	854,
									"scores":	[-7.52830761526413]
								}, {
									"case":	855,
									"scores":	[-7.52830761526413]
								}, {
									"case":	856,
									"scores":	[-7.52830761526413]
								}, {
									"case":	857,
									"scores":	[-7.52830761526413]
								}, {
									"case":	858,
									"scores":	[-7.52830761526413]
								}, {
									"case":	859,
									"scores":	[-7.52830761526413]
								}, {
									"case":	860,
									"scores":	[-7.52830761526413]
								}, {
									"case":	861,
									"scores":	[-7.52830761526413]
								}, {
									"case":	862,
									"scores":	[-7.52830761526413]
								}, {
									"case":	863,
									"scores":	[-7.52830761526413]
								}, {
									"case":	864,
									"scores":	[-7.52830761526413]
								}, {
									"case":	865,
									"scores":	[-7.52830761526413]
								}, {
									"case":	866,
									"scores":	[-7.52830761526413]
								}, {
									"case":	867,
									"scores":	[-7.52830761526413]
								}, {
									"case":	868,
									"scores":	[-7.52830761526413]
								}, {
									"case":	869,
									"scores":	[-7.52830761526413]
								}, {
									"case":	870,
									"scores":	[-7.52830761526413]
								}, {
									"case":	871,
									"scores":	[-7.52830761526413]
								}, {
									"case":	872,
									"scores":	[-7.52830761526413]
								}, {
									"case":	873,
									"scores":	[-7.52830761526413]
								}, {
									"case":	874,
									"scores":	[-7.52830761526413]
								}, {
									"case":	875,
									"scores":	[-7.52830761526413]
								}, {
									"case":	876,
									"scores":	[-7.52830761526413]
								}, {
									"case":	877,
									"scores":	[-7.52830761526413]
								}, {
									"case":	878,
									"scores":	[-7.52830761526413]
								}, {
									"case":	879,
									"scores":	[-7.52830761526413]
								}, {
									"case":	880,
									"scores":	[-7.52830761526413]
								}, {
									"case":	881,
									"scores":	[-7.52830761526413]
								}, {
									"case":	882,
									"scores":	[-7.52830761526413]
								}, {
									"case":	883,
									"scores":	[-7.52830761526413]
								}, {
									"case":	884,
									"scores":	[-7.52830761526413]
								}, {
									"case":	885,
									"scores":	[-7.52830761526413]
								}, {
									"case":	886,
									"scores":	[-7.52830761526413]
								}, {
									"case":	887,
									"scores":	[-7.52830761526413]
								}, {
									"case":	888,
									"scores":	[-7.52830761526413]
								}, {
									"case":	889,
									"scores":	[-7.52830761526413]
								}, {
									"case":	890,
									"scores":	[-7.52830761526413]
								}, {
									"case":	891,
									"scores":	[-7.52830761526413]
								}, {
									"case":	892,
									"scores":	[-7.52830761526413]
								}, {
									"case":	893,
									"scores":	[-7.52830761526413]
								}, {
									"case":	894,
									"scores":	[-7.52830761526413]
								}, {
									"case":	895,
									"scores":	[-7.52830761526413]
								}, {
									"case":	896,
									"scores":	[-7.52830761526413]
								}, {
									"case":	897,
									"scores":	[-7.52830761526413]
								}, {
									"case":	898,
									"scores":	[-7.52830761526413]
								}, {
									"case":	899,
									"scores":	[-7.52830761526413]
								}, {
									"case":	900,
									"scores":	[-7.52830761526413]
								}, {
									"case":	901,
									"scores":	[-7.52830761526413]
								}, {
									"case":	902,
									"scores":	[-7.52830761526413]
								}, {
									"case":	903,
									"scores":	[-7.52830761526413]
								}, {
									"case":	904,
									"scores":	[-7.52830761526413]
								}, {
									"case":	905,
									"scores":	[-7.52830761526413]
								}, {
									"case":	906,
									"scores":	[-7.52830761526413]
								}, {
									"case":	907,
									"scores":	[-7.52830761526413]
								}, {
									"case":	908,
									"scores":	[-7.52830761526413]
								}, {
									"case":	909,
									"scores":	[-7.52830761526413]
								}, {
									"case":	910,
									"scores":	[-7.52830761526413]
								}, {
									"case":	911,
									"scores":	[-7.52830761526413]
								}, {
									"case":	912,
									"scores":	[-7.52830761526413]
								}, {
									"case":	913,
									"scores":	[-7.52830761526413]
								}, {
									"case":	914,
									"scores":	[-7.52830761526413]
								}, {
									"case":	915,
									"scores":	[-7.52830761526413]
								}, {
									"case":	916,
									"scores":	[-7.52830761526413]
								}, {
									"case":	917,
									"scores":	[-7.52830761526413]
								}, {
									"case":	918,
									"scores":	[-7.52830761526413]
								}, {
									"case":	919,
									"scores":	[-7.52830761526413]
								}, {
									"case":	920,
									"scores":	[-7.52830761526413]
								}, {
									"case":	921,
									"scores":	[-7.52830761526413]
								}, {
									"case":	922,
									"scores":	[-7.52830761526413]
								}, {
									"case":	923,
									"scores":	[-7.52830761526413]
								}, {
									"case":	924,
									"scores":	[-7.52830761526413]
								}, {
									"case":	925,
									"scores":	[-7.52830761526413]
								}, {
									"case":	926,
									"scores":	[-7.52830761526413]
								}, {
									"case":	927,
									"scores":	[-7.52830761526413]
								}, {
									"case":	928,
									"scores":	[-7.52830761526413]
								}, {
									"case":	929,
									"scores":	[-7.52830761526413]
								}, {
									"case":	930,
									"scores":	[-7.52830761526413]
								}, {
									"case":	931,
									"scores":	[-7.52830761526413]
								}, {
									"case":	932,
									"scores":	[-7.52830761526413]
								}, {
									"case":	933,
									"scores":	[-7.52830761526413]
								}, {
									"case":	934,
									"scores":	[-7.52830761526413]
								}, {
									"case":	935,
									"scores":	[-7.52830761526413]
								}, {
									"case":	936,
									"scores":	[-7.52830761526413]
								}, {
									"case":	937,
									"scores":	[-7.52830761526413]
								}, {
									"case":	938,
									"scores":	[-7.52830761526413]
								}, {
									"case":	939,
									"scores":	[-7.52830761526413]
								}, {
									"case":	940,
									"scores":	[-7.52830761526413]
								}, {
									"case":	941,
									"scores":	[-7.52830761526413]
								}, {
									"case":	942,
									"scores":	[-7.52830761526413]
								}, {
									"case":	943,
									"scores":	[-7.52830761526413]
								}, {
									"case":	944,
									"scores":	[-7.52830761526413]
								}, {
									"case":	945,
									"scores":	[-7.52830761526413]
								}, {
									"case":	946,
									"scores":	[-7.52830761526413]
								}, {
									"case":	947,
									"scores":	[-7.52830761526413]
								}, {
									"case":	948,
									"scores":	[-7.52830761526413]
								}, {
									"case":	949,
									"scores":	[-7.52830761526413]
								}, {
									"case":	950,
									"scores":	[-7.52830761526413]
								}, {
									"case":	951,
									"scores":	[-7.52830761526413]
								}, {
									"case":	952,
									"scores":	[-7.52830761526413]
								}, {
									"case":	953,
									"scores":	[-7.52830761526413]
								}, {
									"case":	954,
									"scores":	[-7.52830761526413]
								}, {
									"case":	955,
									"scores":	[-7.52830761526413]
								}, {
									"case":	956,
									"scores":	[-7.52830761526413]
								}, {
									"case":	957,
									"scores":	[-7.52830761526413]
								}, {
									"case":	958,
									"scores":	[-7.52830761526413]
								}, {
									"case":	959,
									"scores":	[-7.52830761526413]
								}, {
									"case":	960,
									"scores":	[-7.52830761526413]
								}, {
									"case":	961,
									"scores":	[-7.52830761526413]
								}, {
									"case":	962,
									"scores":	[-7.52830761526413]
								}, {
									"case":	963,
									"scores":	[-7.52830761526413]
								}, {
									"case":	964,
									"scores":	[-7.52830761526413]
								}, {
									"case":	965,
									"scores":	[-7.52830761526413]
								}, {
									"case":	966,
									"scores":	[-7.52830761526413]
								}, {
									"case":	967,
									"scores":	[-7.52830761526413]
								}, {
									"case":	968,
									"scores":	[-7.52830761526413]
								}, {
									"case":	969,
									"scores":	[-7.52830761526413]
								}, {
									"case":	970,
									"scores":	[-7.52830761526413]
								}, {
									"case":	971,
									"scores":	[-7.52830761526413]
								}, {
									"case":	972,
									"scores":	[-7.52830761526413]
								}, {
									"case":	973,
									"scores":	[-7.52830761526413]
								}, {
									"case":	974,
									"scores":	[-7.52830761526413]
								}, {
									"case":	975,
									"scores":	[-7.52830761526413]
								}, {
									"case":	976,
									"scores":	[-7.52830761526413]
								}, {
									"case":	977,
									"scores":	[-7.52830761526413]
								}, {
									"case":	978,
									"scores":	[-7.52830761526413]
								}, {
									"case":	979,
									"scores":	[-7.52830761526413]
								}, {
									"case":	980,
									"scores":	[-7.52830761526413]
								}, {
									"case":	981,
									"scores":	[-7.52830761526413]
								}, {
									"case":	982,
									"scores":	[-7.52830761526413]
								}, {
									"case":	983,
									"scores":	[-7.52830761526413]
								}, {
									"case":	984,
									"scores":	[-7.52830761526413]
								}, {
									"case":	985,
									"scores":	[-7.52830761526413]
								}, {
									"case":	986,
									"scores":	[-7.52830761526413]
								}, {
									"case":	987,
									"scores":	[-7.52830761526413]
								}, {
									"case":	988,
									"scores":	[-7.52830761526413]
								}, {
									"case":	989,
									"scores":	[-7.52830761526413]
								}, {
									"case":	990,
									"scores":	[-7.52830761526413]
								}, {
									"case":	991,
									"scores":	[-7.52830761526413]
								}, {
									"case":	992,
									"scores":	[-7.52830761526413]
								}, {
									"case":	993,
									"scores":	[-7.52830761526413]
								}, {
									"case":	994,
									"scores":	[-7.52830761526413]
								}, {
									"case":	995,
									"scores":	[-7.52830761526413]
								}, {
									"case":	996,
									"scores":	[-7.52830761526413]
								}, {
									"case":	997,
									"scores":	[-7.52830761526413]
								}, {
									"case":	998,
									"scores":	[-7.52830761526413]
								}, {
									"case":	999,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1000,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1001,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1002,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1003,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1004,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1005,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1006,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1007,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1008,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1009,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1010,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1011,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1012,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1013,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1014,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1015,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1016,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1017,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1018,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1019,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1020,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1021,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1022,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1023,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1024,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1025,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1026,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1027,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1028,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1029,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1030,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1031,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1032,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1033,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1034,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1035,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1036,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1037,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1038,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1039,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1040,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1041,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1042,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1043,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1044,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1045,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1046,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1047,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1048,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1049,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1050,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1051,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1052,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1053,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1054,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1055,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1056,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1057,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1058,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1059,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1060,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1061,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1062,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1063,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1064,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1065,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1066,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1067,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1068,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1069,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1070,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1071,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1072,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1073,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1074,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1075,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1076,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1077,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1078,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1079,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1080,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1081,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1082,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1083,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1084,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1085,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1086,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1087,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1088,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1089,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1090,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1091,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1092,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1093,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1094,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1095,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1096,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1097,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1098,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1099,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1100,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1101,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1102,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1103,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1104,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1105,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1106,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1107,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1108,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1109,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1110,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1111,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1112,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1113,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1114,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1115,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1116,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1117,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1118,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1119,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1120,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1121,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1122,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1123,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1124,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1125,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1126,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1127,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1128,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1129,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1130,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1131,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1132,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1133,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1134,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1135,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1136,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1137,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1138,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1139,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1140,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1141,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1142,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1143,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1144,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1145,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1146,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1147,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1148,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1149,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1150,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1151,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1152,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1153,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1154,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1155,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1156,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1157,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1158,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1159,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1160,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1161,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1162,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1163,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1164,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1165,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1166,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1167,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1168,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1169,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1170,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1171,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1172,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1173,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1174,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1175,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1176,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1177,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1178,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1179,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1180,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1181,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1182,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1183,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1184,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1185,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1186,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1187,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1188,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1189,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1190,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1191,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1192,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1193,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1194,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1195,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1196,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1197,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1198,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1199,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1200,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1201,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1202,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1203,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1204,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1205,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1206,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1207,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1208,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1209,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1210,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1211,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1212,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1213,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1214,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1215,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1216,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1217,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1218,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1219,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1220,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1221,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1222,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1223,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1224,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1225,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1226,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1227,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1228,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1229,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1230,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1231,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1232,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1233,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1234,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1235,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1236,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1237,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1238,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1239,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1240,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1241,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1242,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1243,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1244,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1245,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1246,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1247,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1248,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1249,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1250,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1251,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1252,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1253,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1254,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1255,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1256,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1257,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1258,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1259,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1260,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1261,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1262,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1263,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1264,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1265,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1266,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1267,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1268,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1269,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1270,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1271,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1272,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1273,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1274,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1275,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1276,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1277,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1278,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1279,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1280,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1281,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1282,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1283,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1284,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1285,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1286,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1287,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1288,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1289,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1290,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1291,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1292,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1293,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1294,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1295,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1296,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1297,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1298,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1299,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1300,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1301,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1302,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1303,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1304,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1305,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1306,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1307,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1308,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1309,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1310,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1311,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1312,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1313,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1314,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1315,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1316,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1317,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1318,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1319,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1320,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1321,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1322,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1323,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1324,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1325,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1326,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1327,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1328,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1329,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1330,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1331,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1332,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1333,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1334,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1335,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1336,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1337,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1338,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1339,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1340,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1341,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1342,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1343,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1344,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1345,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1346,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1347,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1348,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1349,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1350,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1351,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1352,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1353,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1354,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1355,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1356,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1357,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1358,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1359,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1360,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1361,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1362,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1363,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1364,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1365,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1366,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1367,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1368,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1369,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1370,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1371,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1372,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1373,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1374,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1375,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1376,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1377,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1378,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1379,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1380,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1381,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1382,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1383,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1384,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1385,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1386,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1387,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1388,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1389,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1390,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1391,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1392,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1393,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1394,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1395,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1396,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1397,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1398,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1399,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1400,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1401,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1402,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1403,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1404,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1405,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1406,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1407,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1408,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1409,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1410,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1411,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1412,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1413,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1414,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1415,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1416,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1417,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1418,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1419,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1420,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1421,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1422,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1423,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1424,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1425,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1426,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1427,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1428,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1429,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1430,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1431,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1432,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1433,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1434,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1435,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1436,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1437,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1438,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1439,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1440,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1441,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1442,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1443,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1444,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1445,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1446,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1447,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1448,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1449,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1450,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1451,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1452,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1453,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1454,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1455,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1456,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1457,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1458,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1459,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1460,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1461,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1462,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1463,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1464,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1465,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1466,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1467,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1468,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1469,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1470,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1471,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1472,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1473,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1474,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1475,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1476,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1477,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1478,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1479,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1480,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1481,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1482,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1483,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1484,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1485,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1486,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1487,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1488,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1489,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1490,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1491,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1492,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1493,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1494,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1495,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1496,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1497,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1498,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1499,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1500,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1501,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1502,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1503,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1504,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1505,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1506,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1507,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1508,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1509,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1510,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1511,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1512,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1513,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1514,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1515,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1516,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1517,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1518,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1519,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1520,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1521,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1522,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1523,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1524,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1525,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1526,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1527,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1528,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1529,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1530,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1531,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1532,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1533,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1534,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1535,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1536,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1537,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1538,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1539,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1540,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1541,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1542,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1543,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1544,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1545,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1546,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1547,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1548,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1549,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1550,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1551,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1552,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1553,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1554,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1555,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1556,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1557,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1558,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1559,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1560,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1561,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1562,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1563,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1564,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1565,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1566,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1567,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1568,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1569,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1570,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1571,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1572,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1573,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1574,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1575,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1576,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1577,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1578,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1579,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1580,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1581,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1582,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1583,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1584,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1585,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1586,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1587,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1588,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1589,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1590,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1591,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1592,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1593,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1594,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1595,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1596,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1597,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1598,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1599,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1600,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1601,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1602,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1603,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1604,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1605,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1606,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1607,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1608,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1609,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1610,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1611,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1612,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1613,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1614,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1615,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1616,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1617,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1618,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1619,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1620,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1621,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1622,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1623,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1624,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1625,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1626,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1627,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1628,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1629,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1630,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1631,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1632,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1633,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1634,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1635,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1636,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1637,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1638,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1639,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1640,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1641,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1642,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1643,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1644,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1645,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1646,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1647,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1648,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1649,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1650,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1651,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1652,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1653,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1654,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1655,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1656,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1657,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1658,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1659,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1660,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1661,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1662,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1663,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1664,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1665,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1666,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1667,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1668,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1669,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1670,
									"scores":	[-7.52830761526413]
								}, {
									"case":	1671,
									"scores":	[-9.74513840945413, -9.95013223226413, -8.95559733526413, -10.31317824526413, -9.51614133526413, -9.21368304526413, -10.32841899826413, -9.21368304526413, -9.21368304526413, -8.95559733526413, -8.95559733526413, -8.95559733526413, -9.21368304526413, -9.76787499826413, -8.95559733526413, -8.95559733526413, -8.43682733526413, -9.21368304526413, -9.76787499826413, -9.21368304526413, -8.95559733526413, -9.76787499826413, -8.95559733526413, -8.95559733526413, -8.95559733526413, -8.95559733526413, -8.95559733526413]
								}, {
									"case":	1672,
									"scores":	[-9.74413840945413, -9.94913223226413, -8.95459733526413, -10.31217824526413, -9.51514133526413, -9.21268304526413, -10.327418998264129, -9.21268304526413, -9.21268304526413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -9.21268304526413, -9.76687499826413, -8.95459733526413, -8.95459733526413, -8.43582733526413, -9.21268304526413, -9.76687499826413, -9.21268304526413, -8.95459733526413, -9.76687499826413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -8.95459733526413]
								}, {
									"case":	1673,
									"scores":	[-9.74413840945413, -9.94913223226413, -8.95459733526413, -10.31217824526413, -9.51514133526413, -9.21268304526413, -10.327418998264129, -9.21268304526413, -9.21268304526413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -9.21268304526413, -9.76687499826413, -8.95459733526413, -8.95459733526413, -8.43582733526413, -9.21268304526413, -9.76687499826413, -9.21268304526413, -8.95459733526413, -9.76687499826413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -8.95459733526413]
								}, {
									"case":	1674,
									"scores":	[-9.74413840945413, -9.94913223226413, -8.95459733526413, -10.31217824526413, -9.51514133526413, -9.21268304526413, -10.327418998264129, -9.21268304526413, -9.21268304526413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -9.21268304526413, -9.76687499826413, -8.95459733526413, -8.95459733526413, -8.43582733526413, -9.21268304526413, -9.76687499826413, -9.21268304526413, -8.95459733526413, -9.76687499826413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -8.95459733526413, -8.95459733526413]
								}, {
									"case":	1675,
									"scores":	[-9.74785677945413, -9.95285060226413, -8.95831570526413, -10.31589661526413, -9.51885970526413, -9.21640141526413, -10.33113736826413, -9.21640141526413, -9.21640141526413, -8.95831570526413, -8.95831570526413, -8.95831570526413, -9.21640141526413, -9.77059336826413, -8.95831570526413, -8.95831570526413, -8.43954570526413, -9.21640141526413, -9.77059336826413, -9.21640141526413, -8.95831570526413, -9.77059336826413, -8.95831570526413, -8.95831570526413, -8.95831570526413, -8.95831570526413, -8.95831570526413]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	547,
							"begin_column":	21,
							"end_line":	547,
							"end_column":	39,
							"patch_codes":	["if (!__is_neg(\"\", \"L547\", 27, &(const_stack_top), sizeof (const_stack_top), &(i), sizeof (i), &(j), sizeof (j), &(codestr), sizeof (codestr), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    do {\n        const_stack_top = -1;\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.56741420726413, -8.55013722726413, -7.52232961526413, -8.80975092726413, -8.06787361526413, -7.94429561526413, -9.24537501526413, -7.94429561526413, -7.94429561526413, -7.52232961526413, -7.52232961526413, -7.52232961526413, -7.94429561526413, -8.69983101526413, -7.52232961526413, -7.52232961526413, -7.35093977526413, -7.94429561526413, -8.69983101526413, -7.94429561526413, -7.52232961526413, -8.69983101526413, -7.52232961526413, -7.52232961526413, -7.52232961526413, -7.52232961526413, -7.52232961526413]
								}]
						}]
				}, {
					"line":	548,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [1671, 1672, 1673, 1674, 1675], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], [], [], [], [1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670], [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594], [], [], [], [], [], []],
							"begin_line":	549,
							"begin_column":	19,
							"end_line":	549,
							"end_column":	19,
							"patch_codes":	["memset(&((((PyObject *)(code))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->ob_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(code))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_call)))", "memset(&((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_del)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_free)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_init)))", "memset(&((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_members)))", "memset(&((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_name)))", "memset(&((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_new)))", "memset(&((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_print)))", "memset(&((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_str)))", "memset(&((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(code))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->ob_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->ob_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset)))", "memset(&((PyBytesObject *)(code))->ob_base, 0, sizeof (*(&((PyBytesObject *)(code))->ob_base)))", "memset(&((PyBytesObject *)(code))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(code))->ob_shash)))", "memset(&((PyBytesObject *)(code))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(code))->ob_sval)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_base)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_shash)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_sval)))", "memset(&((PyListObject *)(consts))->allocated, 0, sizeof (*(&((PyListObject *)(consts))->allocated)))", "memset(&((PyListObject *)(consts))->ob_base, 0, sizeof (*(&((PyListObject *)(consts))->ob_base)))", "memset(&((PyListObject *)(consts))->ob_item, 0, sizeof (*(&((PyListObject *)(consts))->ob_item)))", "memset(&((PyObject *)(code))->_ob_next, 0, sizeof (*(&((PyObject *)(code))->_ob_next)))", "memset(&((PyObject *)(code))->_ob_prev, 0, sizeof (*(&((PyObject *)(code))->_ob_prev)))", "memset(&((PyObject *)(code))->ob_refcnt, 0, sizeof (*(&((PyObject *)(code))->ob_refcnt)))", "memset(&((PyObject *)(code))->ob_type, 0, sizeof (*(&((PyObject *)(code))->ob_type)))", "memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_next)))", "memset(&((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_prev)))", "memset(&((PyObject *)(lineno_obj))->ob_refcnt, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_refcnt)))", "memset(&((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_type)))", "memset(&((PyTupleObject *)(names))->ob_base, 0, sizeof (*(&((PyTupleObject *)(names))->ob_base)))", "memset(&((PyTupleObject *)(names))->ob_item, 0, sizeof (*(&((PyTupleObject *)(names))->ob_item)))", "memset(&((PyVarObject *)(code))->ob_base, 0, sizeof (*(&((PyVarObject *)(code))->ob_base)))", "memset(&((PyVarObject *)(code))->ob_size, 0, sizeof (*(&((PyVarObject *)(code))->ob_size)))", "memset(&((PyVarObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_base)))", "memset(&((PyVarObject *)(lineno_obj))->ob_size, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_size)))", "memset(((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_base)))", "memset(((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_call)))", "memset(((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_del)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_free)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_init)))", "memset(((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_members)))", "memset(((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_name)))", "memset(((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_new)))", "memset(((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_print)))", "memset(((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_str)))", "memset(((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(((PyListObject *)(consts))->ob_item, 0, sizeof (*(((PyListObject *)(consts))->ob_item)))", "memset(((PyObject *)(code))->_ob_next, 0, sizeof (*(((PyObject *)(code))->_ob_next)))", "memset(((PyObject *)(code))->_ob_prev, 0, sizeof (*(((PyObject *)(code))->_ob_prev)))", "memset(((PyObject *)(code))->ob_type, 0, sizeof (*(((PyObject *)(code))->ob_type)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "memset(((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_next)))", "memset(((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_prev)))", "memset(((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(((PyObject *)(lineno_obj))->ob_type)))", "PyMem_Free((addrmap))", "PyMem_Free((blocks))", "PyMem_Free((codestr))", "PyMem_Free((lineno))", "addrmap = (addrmap)", "addrmap[i] = (-1)", "addrmap[i] = (0)", "addrmap[i] = (1)", "addrmap[i] = (10)", "addrmap[i] = (100)", "addrmap[i] = (101)", "addrmap[i] = (102)", "addrmap[i] = (103)", "addrmap[i] = (104)", "addrmap[i] = (107)", "addrmap[i] = (11)", "addrmap[i] = (110)", "addrmap[i] = (111)", "addrmap[i] = (112)", "addrmap[i] = (113)", "addrmap[i] = (114)", "addrmap[i] = (115)", "addrmap[i] = (116)", "addrmap[i] = (119)", "addrmap[i] = (12)", "addrmap[i] = (120)", "addrmap[i] = (121)", "addrmap[i] = (122)", "addrmap[i] = (132)", "addrmap[i] = (134217728)", "addrmap[i] = (143)", "addrmap[i] = (144)", "addrmap[i] = (15)", "addrmap[i] = (19)", "addrmap[i] = (2)", "addrmap[i] = (20)", "addrmap[i] = (22)", "addrmap[i] = (23)", "addrmap[i] = (24)", "addrmap[i] = (25)", "addrmap[i] = (255)", "addrmap[i] = (256)", "addrmap[i] = (26)", "addrmap[i] = (27)", "addrmap[i] = (3)", "addrmap[i] = (32700)", "addrmap[i] = (33554432)", "addrmap[i] = (4)", "addrmap[i] = (403)", "addrmap[i] = (404)", "addrmap[i] = (405)", "addrmap[i] = (410)", "addrmap[i] = (411)", "addrmap[i] = (420)", "addrmap[i] = (438)", "addrmap[i] = (492)", "addrmap[i] = (499)", "addrmap[i] = (5)", "addrmap[i] = (521)", "addrmap[i] = (531)", "addrmap[i] = (533)", "addrmap[i] = (534)", "addrmap[i] = (574)", "addrmap[i] = (580)", "addrmap[i] = (581)", "addrmap[i] = (582)", "addrmap[i] = (592)", "addrmap[i] = (597)", "addrmap[i] = (598)", "addrmap[i] = (599)", "addrmap[i] = (6)", "addrmap[i] = (62)", "addrmap[i] = (63)", "addrmap[i] = (64)", "addrmap[i] = (65)", "addrmap[i] = (66)", "addrmap[i] = (7)", "addrmap[i] = (716)", "addrmap[i] = (753)", "addrmap[i] = (8)", "addrmap[i] = (83)", "addrmap[i] = (9)", "addrmap[i] = (90)", "addrmap[i] = (92)", "addrmap[i] = (93)", "addrmap[i] = (adj)", "addrmap[i] = (cum_orig_line)", "addrmap[i] = (h)", "addrmap[i] = (in_consts)", "addrmap[i] = (last_line)", "addrmap[i] = (new_line)", "addrmap[i] = (nops)", "addrmap[i] = (opcode)", "addrmap[i] = (tabsiz)", "addrmap[i] = (tgt)", "addrmap[i] = (tgttgt)", "adj = (-1)", "adj = (0)", "adj = (1)", "adj = (10)", "adj = (100)", "adj = (101)", "adj = (102)", "adj = (103)", "adj = (104)", "adj = (107)", "adj = (11)", "adj = (110)", "adj = (111)", "adj = (112)", "adj = (113)", "adj = (114)", "adj = (115)", "adj = (116)", "adj = (119)", "adj = (12)", "adj = (120)", "adj = (121)", "adj = (122)", "adj = (132)", "adj = (134217728)", "adj = (143)", "adj = (144)", "adj = (15)", "adj = (19)", "adj = (2)", "adj = (20)", "adj = (22)", "adj = (23)", "adj = (24)", "adj = (25)", "adj = (255)", "adj = (256)", "adj = (26)", "adj = (27)", "adj = (3)", "adj = (32700)", "adj = (33554432)", "adj = (4)", "adj = (403)", "adj = (404)", "adj = (405)", "adj = (410)", "adj = (411)", "adj = (420)", "adj = (438)", "adj = (492)", "adj = (499)", "adj = (5)", "adj = (521)", "adj = (531)", "adj = (533)", "adj = (534)", "adj = (574)", "adj = (580)", "adj = (581)", "adj = (582)", "adj = (592)", "adj = (597)", "adj = (598)", "adj = (599)", "adj = (6)", "adj = (62)", "adj = (63)", "adj = (64)", "adj = (65)", "adj = (66)", "adj = (7)", "adj = (716)", "adj = (753)", "adj = (8)", "adj = (83)", "adj = (9)", "adj = (90)", "adj = (92)", "adj = (93)", "adj = (adj)", "adj = (cum_orig_line)", "adj = (h)", "adj = (in_consts)", "adj = (last_line)", "adj = (new_line)", "adj = (nops)", "adj = (opcode)", "adj = (tabsiz)", "adj = (tgt)", "adj = (tgttgt)", "blocks = (blocks)", "blocks = markblocks((codestr), codelen)", "blocks = markblocks((lineno), codelen)", "code = (code)", "code = (consts)", "code = (lineno_obj)", "code = (names)", "codelen = (-1)", "codelen = (0)", "codelen = (1)", "codelen = (10)", "codelen = (100)", "codelen = (101)", "codelen = (102)", "codelen = (103)", "codelen = (104)", "codelen = (107)", "codelen = (11)", "codelen = (110)", "codelen = (111)", "codelen = (112)", "codelen = (113)", "codelen = (114)", "codelen = (115)", "codelen = (116)", "codelen = (119)", "codelen = (12)", "codelen = (120)", "codelen = (121)", "codelen = (122)", "codelen = (132)", "codelen = (134217728)", "codelen = (143)", "codelen = (144)", "codelen = (15)", "codelen = (19)", "codelen = (2)", "codelen = (20)", "codelen = (22)", "codelen = (23)", "codelen = (24)", "codelen = (25)", "codelen = (255)", "codelen = (256)", "codelen = (26)", "codelen = (27)", "codelen = (3)", "codelen = (32700)", "codelen = (33554432)", "codelen = (4)", "codelen = (403)", "codelen = (404)", "codelen = (405)", "codelen = (410)", "codelen = (411)", "codelen = (420)", "codelen = (438)", "codelen = (492)", "codelen = (499)", "codelen = (5)", "codelen = (521)", "codelen = (531)", "codelen = (533)", "codelen = (534)", "codelen = (574)", "codelen = (580)", "codelen = (581)", "codelen = (582)", "codelen = (592)", "codelen = (597)", "codelen = (598)", "codelen = (599)", "codelen = (6)", "codelen = (62)", "codelen = (63)", "codelen = (64)", "codelen = (65)", "codelen = (66)", "codelen = (7)", "codelen = (716)", "codelen = (753)", "codelen = (8)", "codelen = (83)", "codelen = (9)", "codelen = (90)", "codelen = (92)", "codelen = (93)", "codelen = (codelen)", "codelen = (const_stack_size)", "codelen = (const_stack_top)", "codelen = (i)", "codelen = (j)", "codestr = (codestr)", "codestr = (lineno)", "codestr[i] = (-1)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "cum_orig_line = (-1)", "cum_orig_line = (0)", "cum_orig_line = (1)", "cum_orig_line = (10)", "cum_orig_line = (100)", "cum_orig_line = (101)", "cum_orig_line = (102)", "cum_orig_line = (103)", "cum_orig_line = (104)", "cum_orig_line = (107)", "cum_orig_line = (11)", "cum_orig_line = (110)", "cum_orig_line = (111)", "cum_orig_line = (112)", "cum_orig_line = (113)", "cum_orig_line = (114)", "cum_orig_line = (115)", "cum_orig_line = (116)", "cum_orig_line = (119)", "cum_orig_line = (12)", "cum_orig_line = (120)", "cum_orig_line = (121)", "cum_orig_line = (122)", "cum_orig_line = (132)", "cum_orig_line = (134217728)", "cum_orig_line = (143)", "cum_orig_line = (144)", "cum_orig_line = (15)", "cum_orig_line = (19)", "cum_orig_line = (2)", "cum_orig_line = (20)", "cum_orig_line = (22)", "cum_orig_line = (23)", "cum_orig_line = (24)", "cum_orig_line = (25)", "cum_orig_line = (255)", "cum_orig_line = (256)", "cum_orig_line = (26)", "cum_orig_line = (27)", "cum_orig_line = (3)", "cum_orig_line = (32700)", "cum_orig_line = (33554432)", "cum_orig_line = (4)", "cum_orig_line = (403)", "cum_orig_line = (404)", "cum_orig_line = (405)", "cum_orig_line = (410)", "cum_orig_line = (411)", "cum_orig_line = (420)", "cum_orig_line = (438)", "cum_orig_line = (492)", "cum_orig_line = (499)", "cum_orig_line = (5)", "cum_orig_line = (521)", "cum_orig_line = (531)", "cum_orig_line = (533)", "cum_orig_line = (534)", "cum_orig_line = (574)", "cum_orig_line = (580)", "cum_orig_line = (581)", "cum_orig_line = (582)", "cum_orig_line = (592)", "cum_orig_line = (597)", "cum_orig_line = (598)", "cum_orig_line = (599)", "cum_orig_line = (6)", "cum_orig_line = (62)", "cum_orig_line = (63)", "cum_orig_line = (64)", "cum_orig_line = (65)", "cum_orig_line = (66)", "cum_orig_line = (7)", "cum_orig_line = (716)", "cum_orig_line = (753)", "cum_orig_line = (8)", "cum_orig_line = (83)", "cum_orig_line = (9)", "cum_orig_line = (90)", "cum_orig_line = (92)", "cum_orig_line = (93)", "cum_orig_line = (adj)", "cum_orig_line = (cum_orig_line)", "cum_orig_line = (h)", "cum_orig_line = (in_consts)", "cum_orig_line = (last_line)", "cum_orig_line = (new_line)", "cum_orig_line = (nops)", "cum_orig_line = (opcode)", "cum_orig_line = (tabsiz)", "cum_orig_line = (tgt)", "cum_orig_line = (tgttgt)", "h = ((const_stack_top >= j - 1) ? (load_const_stack)[const_stack_top - j + 1] : -1)", "h = (-1)", "h = (0)", "h = (1)", "h = (10)", "h = (100)", "h = (101)", "h = (102)", "h = (103)", "h = (104)", "h = (107)", "h = (11)", "h = (110)", "h = (111)", "h = (112)", "h = (113)", "h = (114)", "h = (115)", "h = (116)", "h = (119)", "h = (12)", "h = (120)", "h = (121)", "h = (122)", "h = (132)", "h = (134217728)", "h = (143)", "h = (144)", "h = (15)", "h = (19)", "h = (2)", "h = (20)", "h = (22)", "h = (23)", "h = (24)", "h = (25)", "h = (255)", "h = (256)", "h = (26)", "h = (27)", "h = (3)", "h = (32700)", "h = (33554432)", "h = (4)", "h = (403)", "h = (404)", "h = (405)", "h = (410)", "h = (411)", "h = (420)", "h = (438)", "h = (492)", "h = (499)", "h = (5)", "h = (521)", "h = (531)", "h = (533)", "h = (534)", "h = (574)", "h = (580)", "h = (581)", "h = (582)", "h = (592)", "h = (597)", "h = (598)", "h = (599)", "h = (6)", "h = (62)", "h = (63)", "h = (64)", "h = (65)", "h = (66)", "h = (7)", "h = (716)", "h = (753)", "h = (8)", "h = (83)", "h = (9)", "h = (90)", "h = (92)", "h = (93)", "h = (adj)", "h = (cum_orig_line)", "h = (h)", "h = (in_consts)", "h = (last_line)", "h = (new_line)", "h = (nops)", "h = (opcode)", "h = (tabsiz)", "h = (tgt)", "h = (tgttgt)", "h = load_global((codestr), i, name, consts)", "h = load_global((lineno), i, name, consts)", "h = load_global(codestr, i, (name), consts)", "h = load_global(codestr, i, name, (code))", "h = load_global(codestr, i, name, (consts))", "h = load_global(codestr, i, name, (lineno_obj))", "h = load_global(codestr, i, name, (names))", "in_consts = (-1)", "in_consts = (0)", "in_consts = (1)", "in_consts = (10)", "in_consts = (100)", "in_consts = (101)", "in_consts = (102)", "in_consts = (103)", "in_consts = (104)", "in_consts = (107)", "in_consts = (11)", "in_consts = (110)", "in_consts = (111)", "in_consts = (112)", "in_consts = (113)", "in_consts = (114)", "in_consts = (115)", "in_consts = (116)", "in_consts = (119)", "in_consts = (12)", "in_consts = (120)", "in_consts = (121)", "in_consts = (122)", "in_consts = (132)", "in_consts = (134217728)", "in_consts = (143)", "in_consts = (144)", "in_consts = (15)", "in_consts = (19)", "in_consts = (2)", "in_consts = (20)", "in_consts = (22)", "in_consts = (23)", "in_consts = (24)", "in_consts = (25)", "in_consts = (255)", "in_consts = (256)", "in_consts = (26)", "in_consts = (27)", "in_consts = (3)", "in_consts = (32700)", "in_consts = (33554432)", "in_consts = (4)", "in_consts = (403)", "in_consts = (404)", "in_consts = (405)", "in_consts = (410)", "in_consts = (411)", "in_consts = (420)", "in_consts = (438)", "in_consts = (492)", "in_consts = (499)", "in_consts = (5)", "in_consts = (521)", "in_consts = (531)", "in_consts = (533)", "in_consts = (534)", "in_consts = (574)", "in_consts = (580)", "in_consts = (581)", "in_consts = (582)", "in_consts = (592)", "in_consts = (597)", "in_consts = (598)", "in_consts = (599)", "in_consts = (6)", "in_consts = (62)", "in_consts = (63)", "in_consts = (64)", "in_consts = (65)", "in_consts = (66)", "in_consts = (7)", "in_consts = (716)", "in_consts = (753)", "in_consts = (8)", "in_consts = (83)", "in_consts = (9)", "in_consts = (90)", "in_consts = (92)", "in_consts = (93)", "in_consts = (adj)", "in_consts = (cum_orig_line)", "in_consts = (h)", "in_consts = (in_consts)", "in_consts = (last_line)", "in_consts = (new_line)", "in_consts = (nops)", "in_consts = (opcode)", "in_consts = (tabsiz)", "in_consts = (tgt)", "in_consts = (tgttgt)", "j = (-1)", "j = (0)", "j = (1)", "j = (10)", "j = (100)", "j = (101)", "j = (102)", "j = (103)", "j = (104)", "j = (107)", "j = (11)", "j = (110)", "j = (111)", "j = (112)", "j = (113)", "j = (114)", "j = (115)", "j = (116)", "j = (119)", "j = (12)", "j = (120)", "j = (121)", "j = (122)", "j = (132)", "j = (134217728)", "j = (143)", "j = (144)", "j = (15)", "j = (19)", "j = (2)", "j = (20)", "j = (22)", "j = (23)", "j = (24)", "j = (25)", "j = (255)", "j = (256)", "j = (26)", "j = (27)", "j = (3)", "j = (32700)", "j = (33554432)", "j = (4)", "j = (403)", "j = (404)", "j = (405)", "j = (410)", "j = (411)", "j = (420)", "j = (438)", "j = (492)", "j = (499)", "j = (5)", "j = (521)", "j = (531)", "j = (533)", "j = (534)", "j = (574)", "j = (580)", "j = (581)", "j = (582)", "j = (592)", "j = (597)", "j = (598)", "j = (599)", "j = (6)", "j = (62)", "j = (63)", "j = (64)", "j = (65)", "j = (66)", "j = (7)", "j = (716)", "j = (753)", "j = (8)", "j = (83)", "j = (9)", "j = (90)", "j = (92)", "j = (93)", "j = (codelen)", "j = (codestr)[tgt]", "j = (const_stack_size)", "j = (const_stack_top)", "j = (i)", "j = (j)", "j = (lineno)[tgt]", "last_line = (-1)", "last_line = (0)", "last_line = (1)", "last_line = (10)", "last_line = (100)", "last_line = (101)", "last_line = (102)", "last_line = (103)", "last_line = (104)", "last_line = (107)", "last_line = (11)", "last_line = (110)", "last_line = (111)", "last_line = (112)", "last_line = (113)", "last_line = (114)", "last_line = (115)", "last_line = (116)", "last_line = (119)", "last_line = (12)", "last_line = (120)", "last_line = (121)", "last_line = (122)", "last_line = (132)", "last_line = (134217728)", "last_line = (143)", "last_line = (144)", "last_line = (15)", "last_line = (19)", "last_line = (2)", "last_line = (20)", "last_line = (22)", "last_line = (23)", "last_line = (24)", "last_line = (25)", "last_line = (255)", "last_line = (256)", "last_line = (26)", "last_line = (27)", "last_line = (3)", "last_line = (32700)", "last_line = (33554432)", "last_line = (4)", "last_line = (403)", "last_line = (404)", "last_line = (405)", "last_line = (410)", "last_line = (411)", "last_line = (420)", "last_line = (438)", "last_line = (492)", "last_line = (499)", "last_line = (5)", "last_line = (521)", "last_line = (531)", "last_line = (533)", "last_line = (534)", "last_line = (574)", "last_line = (580)", "last_line = (581)", "last_line = (582)", "last_line = (592)", "last_line = (597)", "last_line = (598)", "last_line = (599)", "last_line = (6)", "last_line = (62)", "last_line = (63)", "last_line = (64)", "last_line = (65)", "last_line = (66)", "last_line = (7)", "last_line = (716)", "last_line = (753)", "last_line = (8)", "last_line = (83)", "last_line = (9)", "last_line = (90)", "last_line = (92)", "last_line = (93)", "last_line = (adj)", "last_line = (cum_orig_line)", "last_line = (h)", "last_line = (in_consts)", "last_line = (last_line)", "last_line = (new_line)", "last_line = (nops)", "last_line = (opcode)", "last_line = (tabsiz)", "last_line = (tgt)", "last_line = (tgttgt)", "lineno = (codestr)", "lineno = (lineno)", "lineno[i] = (-1)", "lineno[i] = (0)", "lineno[i] = (1)", "lineno[i] = (10)", "lineno[i] = (100)", "lineno[i] = (101)", "lineno[i] = (102)", "lineno[i] = (103)", "lineno[i] = (104)", "lineno[i] = (107)", "lineno[i] = (11)", "lineno[i] = (110)", "lineno[i] = (111)", "lineno[i] = (112)", "lineno[i] = (113)", "lineno[i] = (114)", "lineno[i] = (115)", "lineno[i] = (116)", "lineno[i] = (119)", "lineno[i] = (12)", "lineno[i] = (120)", "lineno[i] = (121)", "lineno[i] = (122)", "lineno[i] = (132)", "lineno[i] = (134217728)", "lineno[i] = (143)", "lineno[i] = (144)", "lineno[i] = (15)", "lineno[i] = (19)", "lineno[i] = (2)", "lineno[i] = (20)", "lineno[i] = (22)", "lineno[i] = (23)", "lineno[i] = (24)", "lineno[i] = (25)", "lineno[i] = (255)", "lineno[i] = (256)", "lineno[i] = (26)", "lineno[i] = (27)", "lineno[i] = (3)", "lineno[i] = (32700)", "lineno[i] = (33554432)", "lineno[i] = (4)", "lineno[i] = (403)", "lineno[i] = (404)", "lineno[i] = (405)", "lineno[i] = (410)", "lineno[i] = (411)", "lineno[i] = (420)", "lineno[i] = (438)", "lineno[i] = (492)", "lineno[i] = (499)", "lineno[i] = (5)", "lineno[i] = (521)", "lineno[i] = (531)", "lineno[i] = (533)", "lineno[i] = (534)", "lineno[i] = (574)", "lineno[i] = (580)", "lineno[i] = (581)", "lineno[i] = (582)", "lineno[i] = (592)", "lineno[i] = (597)", "lineno[i] = (598)", "lineno[i] = (599)", "lineno[i] = (6)", "lineno[i] = (62)", "lineno[i] = (63)", "lineno[i] = (64)", "lineno[i] = (65)", "lineno[i] = (66)", "lineno[i] = (7)", "lineno[i] = (716)", "lineno[i] = (753)", "lineno[i] = (8)", "lineno[i] = (83)", "lineno[i] = (9)", "lineno[i] = (90)", "lineno[i] = (92)", "lineno[i] = (93)", "memset(&(codestr)[h], 9, i - h)", "memset(&(lineno)[h], 9, i - h)", "memset((codestr) + i + 1, 9, 2)", "memset((codestr) + i + 1, 9, 3)", "memset((codestr) + i + 1, 9, 4)", "memset((codestr) + i + 1, 9, 5)", "memset((codestr) + i + 2, 9, 4)", "memset((codestr) + i, 9, 6)", "memset((lineno) + i + 1, 9, 2)", "memset((lineno) + i + 1, 9, 3)", "memset((lineno) + i + 1, 9, 4)", "memset((lineno) + i + 1, 9, 5)", "memset((lineno) + i + 2, 9, 4)", "memset((lineno) + i, 9, 6)", "name = (name)", "new_line = (-1)", "new_line = (0)", "new_line = (1)", "new_line = (10)", "new_line = (100)", "new_line = (101)", "new_line = (102)", "new_line = (103)", "new_line = (104)", "new_line = (107)", "new_line = (11)", "new_line = (110)", "new_line = (111)", "new_line = (112)", "new_line = (113)", "new_line = (114)", "new_line = (115)", "new_line = (116)", "new_line = (119)", "new_line = (12)", "new_line = (120)", "new_line = (121)", "new_line = (122)", "new_line = (132)", "new_line = (134217728)", "new_line = (143)", "new_line = (144)", "new_line = (15)", "new_line = (19)", "new_line = (2)", "new_line = (20)", "new_line = (22)", "new_line = (23)", "new_line = (24)", "new_line = (25)", "new_line = (255)", "new_line = (256)", "new_line = (26)", "new_line = (27)", "new_line = (3)", "new_line = (32700)", "new_line = (33554432)", "new_line = (4)", "new_line = (403)", "new_line = (404)", "new_line = (405)", "new_line = (410)", "new_line = (411)", "new_line = (420)", "new_line = (438)", "new_line = (492)", "new_line = (499)", "new_line = (5)", "new_line = (521)", "new_line = (531)", "new_line = (533)", "new_line = (534)", "new_line = (574)", "new_line = (580)", "new_line = (581)", "new_line = (582)", "new_line = (592)", "new_line = (597)", "new_line = (598)", "new_line = (599)", "new_line = (6)", "new_line = (62)", "new_line = (63)", "new_line = (64)", "new_line = (65)", "new_line = (66)", "new_line = (7)", "new_line = (716)", "new_line = (753)", "new_line = (8)", "new_line = (83)", "new_line = (9)", "new_line = (90)", "new_line = (92)", "new_line = (93)", "new_line = (addrmap)[cum_orig_line]", "new_line = (adj)", "new_line = (cum_orig_line)", "new_line = (h)", "new_line = (in_consts)", "new_line = (last_line)", "new_line = (new_line)", "new_line = (nops)", "new_line = (opcode)", "new_line = (tabsiz)", "new_line = (tgt)", "new_line = (tgttgt)", "opcode = (-1)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (101)", "opcode = (102)", "opcode = (103)", "opcode = (104)", "opcode = (107)", "opcode = (11)", "opcode = (110)", "opcode = (111)", "opcode = (112)", "opcode = (113)", "opcode = (114)", "opcode = (115)", "opcode = (116)", "opcode = (119)", "opcode = (12)", "opcode = (120)", "opcode = (121)", "opcode = (122)", "opcode = (132)", "opcode = (134217728)", "opcode = (143)", "opcode = (144)", "opcode = (15)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (23)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (256)", "opcode = (26)", "opcode = (27)", "opcode = (3)", "opcode = (32700)", "opcode = (33554432)", "opcode = (4)", "opcode = (403)", "opcode = (404)", "opcode = (405)", "opcode = (410)", "opcode = (411)", "opcode = (420)", "opcode = (438)", "opcode = (492)", "opcode = (499)", "opcode = (5)", "opcode = (521)", "opcode = (531)", "opcode = (533)", "opcode = (534)", "opcode = (574)", "opcode = (580)", "opcode = (581)", "opcode = (582)", "opcode = (592)", "opcode = (597)", "opcode = (598)", "opcode = (599)", "opcode = (6)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (7)", "opcode = (716)", "opcode = (753)", "opcode = (8)", "opcode = (83)", "opcode = (9)", "opcode = (90)", "opcode = (92)", "opcode = (93)", "opcode = (adj)", "opcode = (codestr)[i]", "opcode = (cum_orig_line)", "opcode = (h)", "opcode = (in_consts)", "opcode = (last_line)", "opcode = (lineno)[i]", "opcode = (new_line)", "opcode = (nops)", "opcode = (opcode)", "opcode = (tabsiz)", "opcode = (tgt)", "opcode = (tgttgt)", "tabsiz = (-1)", "tabsiz = (0)", "tabsiz = (1)", "tabsiz = (10)", "tabsiz = (100)", "tabsiz = (101)", "tabsiz = (102)", "tabsiz = (103)", "tabsiz = (104)", "tabsiz = (107)", "tabsiz = (11)", "tabsiz = (110)", "tabsiz = (111)", "tabsiz = (112)", "tabsiz = (113)", "tabsiz = (114)", "tabsiz = (115)", "tabsiz = (116)", "tabsiz = (119)", "tabsiz = (12)", "tabsiz = (120)", "tabsiz = (121)", "tabsiz = (122)", "tabsiz = (132)", "tabsiz = (134217728)", "tabsiz = (143)", "tabsiz = (144)", "tabsiz = (15)", "tabsiz = (19)", "tabsiz = (2)", "tabsiz = (20)", "tabsiz = (22)", "tabsiz = (23)", "tabsiz = (24)", "tabsiz = (25)", "tabsiz = (255)", "tabsiz = (256)", "tabsiz = (26)", "tabsiz = (27)", "tabsiz = (3)", "tabsiz = (32700)", "tabsiz = (33554432)", "tabsiz = (4)", "tabsiz = (403)", "tabsiz = (404)", "tabsiz = (405)", "tabsiz = (410)", "tabsiz = (411)", "tabsiz = (420)", "tabsiz = (438)", "tabsiz = (492)", "tabsiz = (499)", "tabsiz = (5)", "tabsiz = (521)", "tabsiz = (531)", "tabsiz = (533)", "tabsiz = (534)", "tabsiz = (574)", "tabsiz = (580)", "tabsiz = (581)", "tabsiz = (582)", "tabsiz = (592)", "tabsiz = (597)", "tabsiz = (598)", "tabsiz = (599)", "tabsiz = (6)", "tabsiz = (62)", "tabsiz = (63)", "tabsiz = (64)", "tabsiz = (65)", "tabsiz = (66)", "tabsiz = (7)", "tabsiz = (716)", "tabsiz = (753)", "tabsiz = (8)", "tabsiz = (83)", "tabsiz = (9)", "tabsiz = (90)", "tabsiz = (92)", "tabsiz = (93)", "tabsiz = (adj)", "tabsiz = (cum_orig_line)", "tabsiz = (h)", "tabsiz = (in_consts)", "tabsiz = (last_line)", "tabsiz = (new_line)", "tabsiz = (nops)", "tabsiz = (opcode)", "tabsiz = (tabsiz)", "tabsiz = (tgt)", "tabsiz = (tgttgt)", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((codestr)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((lineno)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (codestr)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (lineno)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (codestr)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (lineno)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (codestr)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (lineno)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (codestr)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (lineno)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (codestr)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (lineno)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (-1)", "tgttgt = (0)", "tgttgt = (1)", "tgttgt = (10)", "tgttgt = (100)", "tgttgt = (101)", "tgttgt = (102)", "tgttgt = (103)", "tgttgt = (104)", "tgttgt = (107)", "tgttgt = (11)", "tgttgt = (110)", "tgttgt = (111)", "tgttgt = (112)", "tgttgt = (113)", "tgttgt = (114)", "tgttgt = (115)", "tgttgt = (116)", "tgttgt = (119)", "tgttgt = (12)", "tgttgt = (120)", "tgttgt = (121)", "tgttgt = (122)", "tgttgt = (132)", "tgttgt = (134217728)", "tgttgt = (143)", "tgttgt = (144)", "tgttgt = (15)", "tgttgt = (19)", "tgttgt = (2)", "tgttgt = (20)", "tgttgt = (22)", "tgttgt = (23)", "tgttgt = (24)", "tgttgt = (25)", "tgttgt = (255)", "tgttgt = (256)", "tgttgt = (26)", "tgttgt = (27)", "tgttgt = (3)", "tgttgt = (32700)", "tgttgt = (33554432)", "tgttgt = (4)", "tgttgt = (403)", "tgttgt = (404)", "tgttgt = (405)", "tgttgt = (410)", "tgttgt = (411)", "tgttgt = (420)", "tgttgt = (438)", "tgttgt = (492)", "tgttgt = (499)", "tgttgt = (5)", "tgttgt = (521)", "tgttgt = (531)", "tgttgt = (533)", "tgttgt = (534)", "tgttgt = (574)", "tgttgt = (580)", "tgttgt = (581)", "tgttgt = (582)", "tgttgt = (592)", "tgttgt = (597)", "tgttgt = (598)", "tgttgt = (599)", "tgttgt = (6)", "tgttgt = (62)", "tgttgt = (63)", "tgttgt = (64)", "tgttgt = (65)", "tgttgt = (66)", "tgttgt = (7)", "tgttgt = (716)", "tgttgt = (753)", "tgttgt = (8)", "tgttgt = (83)", "tgttgt = (9)", "tgttgt = (90)", "tgttgt = (92)", "tgttgt = (93)", "tgttgt = (adj)", "tgttgt = (cum_orig_line)", "tgttgt = (h)", "tgttgt = (in_consts)", "tgttgt = (last_line)", "tgttgt = (new_line)", "tgttgt = (nops)", "tgttgt = (opcode)", "tgttgt = (tabsiz)", "tgttgt = (tgt)", "tgttgt = (tgttgt)", "((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0))\n        ;\n    else\n        __assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 1)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 1))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 2)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 2))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < j)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < j))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((h + nops == codelen) ? 1 : 0) , __extension__ ({\n    if (h + nops == codelen)\n        ;\n    else\n        __assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((new_line - last_line < 255) ? 1 : 0) , __extension__ ({\n    if (new_line - last_line < 255)\n        ;\n    else\n        __assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "PyMem_Free(addrmap)", "PyMem_Free(blocks)", "PyMem_Free(codestr)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "addrmap = (int *)PyMem_Malloc(codelen * sizeof(int))", "addrmap[i] = i - nops", "adj = (((opcode) >= 90) ? 3 : 1)", "blocks = markblocks(codestr, codelen)", "code = PyBytes_FromStringAndSize((char *)codestr, h)", "codelen = (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(code))->ob_size))", "codestr = (unsigned char *)PyMem_Malloc(codelen)", "codestr = (unsigned char *)memcpy(codestr, (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(code))->ob_sval)), codelen)", "codestr[i] = 114", "codestr[i] = 115", "codestr[i] = 2", "codestr[i] = 3", "codestr[i] = 83", "codestr[i] = j", "codestr[i] = opcode", "cum_orig_line = 0", "h = ((const_stack_top >= j - 1) ? load_const_stack[const_stack_top - j + 1] : -1)", "h = load_global(codestr, i, name, consts)", "in_consts = 0", "j = ((int)((codestr[i + 1 + 2] << 8) + codestr[i + 1 + 1]))", "j = ((int)((codestr[i + 2] << 8) + codestr[i + 1]))", "j = codestr[tgt]", "last_line = 0", "last_line = new_line", "lineno = (unsigned char *)(((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(lineno_obj))->ob_sval))", "lineno[i] = ((unsigned char)(new_line - last_line))", "memset(&codestr[h], 9, i - h)", "memset(codestr + i + 1, 9, 2)", "memset(codestr + i + 1, 9, 3)", "memset(codestr + i + 1, 9, 4)", "memset(codestr + i + 1, 9, 5)", "memset(codestr + i + 2, 9, 4)", "memset(codestr + i, 9, 6)", "name = _PyUnicode_AsString((((PyTupleObject *)(names))->ob_item[j]))", "new_line = addrmap[cum_orig_line]", "nops++", "opcode = 113", "opcode = codestr[i]", "tabsiz = (((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(lineno_obj))->ob_size))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "if (__is_neg(\"\", \"L549\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    break;\n", "if (__is_neg(\"\", \"L549\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitError;\n", "if (__is_neg(\"\", \"L549\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitUnchanged;\n", "if (__is_neg(\"\", \"L549\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto reoptimize_current;\n", "if (__is_neg(\"\", \"L549\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	2,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	3,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	4,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	5,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	6,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	7,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	8,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	9,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	10,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	11,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	12,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	13,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	14,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	15,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	16,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	17,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	18,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	19,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	20,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	21,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	22,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	23,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	24,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	25,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	26,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	27,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	28,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	29,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	30,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	31,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	32,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	33,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	34,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	35,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	36,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	37,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	38,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	39,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	40,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	41,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	42,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	43,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	44,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	45,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	46,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	47,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	48,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	49,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	50,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	51,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	52,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	53,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	54,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	55,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	56,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	57,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	58,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	59,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	60,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	61,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	62,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	63,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	64,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	65,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	66,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	67,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	68,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	69,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	70,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	71,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	72,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	73,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	74,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	75,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	76,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	77,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	78,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	79,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	80,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	81,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	82,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	83,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	84,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	85,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	86,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	87,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	88,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	89,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	90,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	91,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	92,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	93,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	94,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	95,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	96,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	97,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	98,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	99,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	100,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	101,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	102,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	103,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	104,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	105,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	106,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	107,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	108,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	109,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	110,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	111,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	112,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	113,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	114,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	115,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	116,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	117,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	118,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	119,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	120,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	121,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	122,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	123,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	124,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	125,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	126,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	127,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	128,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	129,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	130,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	131,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	132,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	133,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	134,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	135,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	136,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	137,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	138,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	139,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	140,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	141,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	142,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	143,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	144,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	145,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	146,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	147,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	148,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	149,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	150,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	151,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	152,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	153,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	154,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	155,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	156,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	157,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	158,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	159,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	160,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	161,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	162,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	163,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	164,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	165,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	166,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	167,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	168,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	169,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	170,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	171,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	172,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	173,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	174,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	175,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	176,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	177,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	178,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	179,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	180,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	181,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	182,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	183,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	184,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	185,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	186,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	187,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	188,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	189,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	190,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	191,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	192,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	193,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	194,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	195,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	196,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	197,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	198,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	199,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	200,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	201,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	202,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	203,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	204,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	205,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	206,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	207,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	208,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	209,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	210,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	211,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	212,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	213,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	214,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	215,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	216,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	217,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	218,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	219,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	220,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	221,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	222,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	223,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	224,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	225,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	226,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	227,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	228,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	229,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	230,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	231,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	232,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	233,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	234,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	235,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	236,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	237,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	238,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	239,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	240,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	241,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	242,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	243,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	244,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	245,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	246,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	247,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	248,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	249,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	250,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	251,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	252,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	253,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	254,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	255,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	256,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	257,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	258,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	259,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	260,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	261,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	262,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	263,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	264,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	265,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	266,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	267,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	268,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	269,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	270,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	271,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	272,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	273,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	274,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	275,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	276,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	277,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	278,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	279,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	280,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	281,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	282,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	283,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	284,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	285,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	286,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	287,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	288,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	289,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	290,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	291,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	292,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	293,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	294,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	295,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	296,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	297,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	298,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	299,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	300,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	301,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	302,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	303,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	304,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	305,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	306,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	307,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	308,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	309,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	310,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	311,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	312,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	313,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	314,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	315,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	316,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	317,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	318,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	319,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	320,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	321,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	322,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	323,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	324,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	325,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	326,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	327,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	328,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	329,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	330,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	331,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	332,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	333,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	334,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	335,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	336,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	337,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	338,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	339,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	340,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	341,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	342,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	343,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	344,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	345,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	346,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	347,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	348,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	349,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	350,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	351,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	352,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	353,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	354,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	355,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	356,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	357,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	358,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	359,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	360,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	361,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	362,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	363,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	364,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	365,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	366,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	367,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	368,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	369,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	370,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	371,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	372,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	373,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	374,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	375,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	376,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	377,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	378,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	379,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	380,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	381,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	382,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	383,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	384,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	385,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	386,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	387,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	388,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	389,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	390,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	391,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	392,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	393,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	394,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	395,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	396,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	397,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	398,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	399,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	400,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	401,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	402,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	403,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	404,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	405,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	406,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	407,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	408,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	409,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	410,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	411,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	412,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	413,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	414,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	415,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	416,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	417,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	418,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	419,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	420,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	421,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	422,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	423,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	424,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	425,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	426,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	427,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	428,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	429,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	430,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	431,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	432,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	433,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	434,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	435,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	436,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	437,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	438,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	439,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	440,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	441,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	442,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	443,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	444,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	445,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	446,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	447,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	448,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	449,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	450,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	451,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	452,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	453,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	454,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	455,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	456,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	457,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	458,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	459,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	460,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	461,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	462,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	463,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	464,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	465,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	466,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	467,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	468,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	469,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	470,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	471,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	472,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	473,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	474,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	475,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	476,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	477,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	478,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	479,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	480,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	481,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	482,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	483,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	484,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	485,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	486,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	487,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	488,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	489,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	490,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	491,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	492,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	493,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	494,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	495,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	496,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	497,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	498,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	499,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	500,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	501,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	502,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	503,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	504,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	505,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	506,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	507,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	508,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	509,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	510,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	511,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	512,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	513,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	514,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	515,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	516,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	517,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	518,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	519,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	520,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	521,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	522,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	523,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	524,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	525,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	526,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	527,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	528,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	529,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	530,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	531,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	532,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	533,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	534,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	535,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	536,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	537,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	538,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	539,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	540,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	541,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	542,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	543,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	544,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	545,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	546,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	547,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	548,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	549,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	550,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	551,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	552,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	553,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	554,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	555,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	556,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	557,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	558,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	559,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	560,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	561,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	562,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	563,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	564,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	565,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	566,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	567,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	568,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	569,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	570,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	571,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	572,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	573,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	574,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	575,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	576,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	577,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	578,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	579,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	580,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	581,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	582,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	583,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	584,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	585,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	586,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	587,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	588,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	589,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	590,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	591,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	592,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	593,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	594,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	595,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	596,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	597,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	598,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	599,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	600,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	601,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	602,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	603,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	604,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	605,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	606,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	607,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	608,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	609,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	610,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	611,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	612,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	613,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	614,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	615,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	616,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	617,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	618,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	619,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	620,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	621,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	622,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	623,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	624,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	625,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	626,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	627,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	628,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	629,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	630,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	631,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	632,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	633,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	634,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	635,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	636,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	637,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	638,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	639,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	640,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	641,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	642,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	643,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	644,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	645,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	646,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	647,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	648,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	649,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	650,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	651,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	652,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	653,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	654,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	655,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	656,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	657,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	658,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	659,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	660,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	661,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	662,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	663,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	664,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	665,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	666,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	667,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	668,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	669,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	670,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	671,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	672,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	673,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	674,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	675,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	676,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	677,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	678,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	679,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	680,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	681,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	682,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	683,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	684,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	685,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	686,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	687,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	688,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	689,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	690,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	691,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	692,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	693,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	694,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	695,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	696,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	697,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	698,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	699,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	700,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	701,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	702,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	703,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	704,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	705,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	706,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	707,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	708,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	709,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	710,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	711,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	712,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	713,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	714,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	715,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	716,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	717,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	718,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	719,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	720,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	721,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	722,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	723,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	724,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	725,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	726,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	727,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	728,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	729,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	730,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	731,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	732,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	733,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	734,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	735,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	736,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	737,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	738,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	739,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	740,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	741,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	742,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	743,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	744,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	745,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	746,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	747,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	748,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	749,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	750,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	751,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	752,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	753,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	754,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	755,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	756,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	757,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	758,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	759,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	760,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	761,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	762,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	763,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	764,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	765,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	766,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	767,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	768,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	769,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	770,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	771,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	772,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	773,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	774,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	775,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	776,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	777,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	778,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	779,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	780,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	781,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	782,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	783,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	784,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	785,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	786,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	787,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	788,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	789,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	790,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	791,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	792,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	793,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	794,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	795,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	796,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	797,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	798,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	799,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	800,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	801,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	802,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	803,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	804,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	805,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	806,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	807,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	808,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	809,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	810,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	811,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	812,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	813,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	814,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	815,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	816,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	817,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	818,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	819,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	820,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	821,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	822,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	823,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	824,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	825,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	826,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	827,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	828,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	829,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	830,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	831,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	832,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	833,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	834,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	835,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	836,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	837,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	838,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	839,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	840,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	841,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	842,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	843,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	844,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	845,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	846,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	847,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	848,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	849,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	850,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	851,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	852,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	853,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	854,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	855,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	856,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	857,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	858,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	859,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	860,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	861,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	862,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	863,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	864,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	865,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	866,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	867,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	868,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	869,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	870,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	871,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	872,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	873,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	874,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	875,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	876,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	877,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	878,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	879,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	880,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	881,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	882,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	883,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	884,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	885,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	886,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	887,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	888,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	889,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	890,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	891,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	892,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	893,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	894,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	895,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	896,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	897,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	898,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	899,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	900,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	901,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	902,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	903,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	904,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	905,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	906,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	907,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	908,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	909,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	910,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	911,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	912,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	913,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	914,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	915,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	916,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	917,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	918,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	919,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	920,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	921,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	922,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	923,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	924,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	925,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	926,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	927,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	928,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	929,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	930,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	931,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	932,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	933,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	934,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	935,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	936,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	937,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	938,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	939,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	940,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	941,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	942,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	943,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	944,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	945,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	946,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	947,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	948,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	949,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	950,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	951,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	952,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	953,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	954,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	955,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	956,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	957,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	958,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	959,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	960,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	961,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	962,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	963,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	964,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	965,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	966,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	967,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	968,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	969,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	970,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	971,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	972,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	973,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	974,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	975,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	976,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	977,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	978,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	979,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	980,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	981,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	982,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	983,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	984,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	985,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	986,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	987,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	988,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	989,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	990,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	991,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	992,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	993,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	994,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	995,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	996,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	997,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	998,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	999,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1000,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1001,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1002,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1003,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1004,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1005,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1006,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1007,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1008,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1009,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1010,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1011,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1012,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1013,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1014,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1015,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1016,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1017,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1018,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1019,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1020,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1021,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1022,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1023,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1024,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1025,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1026,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1027,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1028,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1029,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1030,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1031,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1032,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1033,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1034,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1035,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1036,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1037,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1038,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1039,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1040,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1041,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1042,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1043,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1044,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1045,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1046,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1047,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1048,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1049,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1050,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1051,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1052,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1053,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1054,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1055,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1056,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1057,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1058,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1059,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1060,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1061,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1062,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1063,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1064,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1065,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1066,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1067,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1068,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1069,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1070,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1071,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1072,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1073,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1074,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1075,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1076,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1077,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1078,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1079,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1080,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1081,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1082,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1083,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1084,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1085,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1086,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1087,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1088,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1089,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1090,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1091,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1092,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1093,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1094,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1095,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1096,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1097,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1098,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1099,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1100,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1101,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1102,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1103,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1104,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1105,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1106,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1107,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1108,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1109,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1110,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1111,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1112,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1113,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1114,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1115,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1116,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1117,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1118,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1119,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1120,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1121,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1122,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1123,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1124,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1125,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1126,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1127,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1128,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1129,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1130,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1131,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1132,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1133,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1134,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1135,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1136,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1137,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1138,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1139,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1140,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1141,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1142,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1143,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1144,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1145,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1146,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1147,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1148,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1149,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1150,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1151,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1152,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1153,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1154,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1155,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1156,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1157,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1158,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1159,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1160,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1161,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1162,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1163,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1164,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1165,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1166,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1167,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1168,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1169,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1170,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1171,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1172,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1173,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1174,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1175,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1176,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1177,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1178,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1179,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1180,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1181,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1182,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1183,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1184,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1185,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1186,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1187,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1188,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1189,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1190,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1191,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1192,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1193,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1194,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1195,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1196,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1197,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1198,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1199,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1200,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1201,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1202,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1203,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1204,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1205,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1206,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1207,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1208,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1209,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1210,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1211,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1212,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1213,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1214,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1215,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1216,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1217,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1218,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1219,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1220,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1221,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1222,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1223,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1224,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1225,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1226,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1227,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1228,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1229,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1230,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1231,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1232,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1233,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1234,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1235,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1236,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1237,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1238,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1239,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1240,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1241,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1242,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1243,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1244,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1245,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1246,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1247,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1248,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1249,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1250,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1251,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1252,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1253,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1254,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1255,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1256,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1257,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1258,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1259,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1260,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1261,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1262,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1263,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1264,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1265,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1266,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1267,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1268,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1269,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1270,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1271,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1272,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1273,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1274,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1275,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1276,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1277,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1278,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1279,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1280,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1281,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1282,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1283,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1284,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1285,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1286,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1287,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1288,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1289,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1290,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1291,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1292,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1293,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1294,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1295,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1296,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1297,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1298,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1299,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1300,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1301,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1302,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1303,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1304,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1305,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1306,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1307,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1308,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1309,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1310,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1311,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1312,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1313,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1314,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1315,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1316,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1317,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1318,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1319,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1320,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1321,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1322,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1323,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1324,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1325,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1326,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1327,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1328,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1329,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1330,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1331,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1332,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1333,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1334,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1335,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1336,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1337,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1338,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1339,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1340,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1341,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1342,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1343,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1344,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1345,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1346,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1347,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1348,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1349,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1350,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1351,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1352,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1353,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1354,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1355,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1356,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1357,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1358,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1359,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1360,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1361,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1362,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1363,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1364,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1365,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1366,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1367,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1368,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1369,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1370,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1371,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1372,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1373,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1374,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1375,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1376,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1377,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1378,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1379,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1380,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1381,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1382,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1383,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1384,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1385,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1386,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1387,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1388,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1389,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1390,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1391,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1392,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1393,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1394,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1395,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1396,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1397,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1398,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1399,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1400,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1401,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1402,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1403,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1404,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1405,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1406,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1407,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1408,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1409,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1410,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1411,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1412,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1413,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1414,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1415,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1416,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1417,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1418,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1419,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1420,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1421,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1422,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1423,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1424,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1425,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1426,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1427,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1428,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1429,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1430,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1431,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1432,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1433,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1434,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1435,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1436,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1437,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1438,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1439,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1440,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1441,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1442,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1443,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1444,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1445,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1446,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1447,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1448,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1449,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1450,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1451,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1452,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1453,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1454,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1455,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1456,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1457,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1458,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1459,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1460,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1461,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1462,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1463,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1464,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1465,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1466,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1467,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1468,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1469,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1470,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1471,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1472,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1473,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1474,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1475,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1476,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1477,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1478,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1479,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1480,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1481,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1482,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1483,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1484,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1485,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1486,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1487,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1488,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1489,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1490,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1491,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1492,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1493,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1494,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1495,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1496,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1497,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1498,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1499,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1500,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1501,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1502,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1503,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1504,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1505,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1506,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1507,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1508,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1509,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1510,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1511,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1512,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1513,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1514,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1515,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1516,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1517,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1518,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1519,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1520,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1521,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1522,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1523,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1524,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1525,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1526,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1527,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1528,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1529,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1530,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1531,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1532,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1533,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1534,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1535,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1536,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1537,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1538,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1539,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1540,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1541,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1542,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1543,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1544,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1545,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1546,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1547,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1548,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1549,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1550,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1551,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1552,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1553,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1554,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1555,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1556,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1557,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1558,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1559,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1560,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1561,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1562,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1563,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1564,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1565,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1566,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1567,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1568,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1569,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1570,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1571,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1572,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1573,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1574,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1575,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1576,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1577,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1578,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1579,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1580,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1581,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1582,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1583,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1584,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1585,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1586,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1587,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1588,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1589,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1590,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1591,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1592,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1593,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1594,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1595,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1596,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1597,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1598,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1599,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1600,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1601,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1602,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1603,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1604,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1605,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1606,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1607,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1608,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1609,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1610,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1611,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1612,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1613,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1614,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1615,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1616,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1617,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1618,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1619,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1620,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1621,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1622,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1623,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1624,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1625,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1626,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1627,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1628,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1629,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1630,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1631,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1632,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1633,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1634,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1635,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1636,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1637,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1638,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1639,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1640,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1641,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1642,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1643,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1644,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1645,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1646,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1647,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1648,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1649,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1650,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1651,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1652,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1653,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1654,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1655,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1656,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1657,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1658,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1659,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1660,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1661,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1662,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1663,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1664,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1665,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1666,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1667,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1668,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1669,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1670,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	1671,
									"scores":	[-8.86737900562909, -8.32232626862909, -8.6268689206290929, -9.2104970356290927, -9.18741292062909, -8.88495463062909, -9.9996905836290928, -8.88495463062909, -8.88495463062909, -8.6268689206290929, -8.6268689206290929, -8.6268689206290929, -8.88495463062909, -9.43914658362909, -8.6268689206290929, -8.6268689206290929, -8.108098920629093, -8.88495463062909, -9.43914658362909, -8.88495463062909, -8.6268689206290929, -9.43914658362909, -8.6268689206290929, -8.6268689206290929, -8.6268689206290929, -8.6268689206290929, -8.6268689206290929]
								}, {
									"case":	1672,
									"scores":	[-8.86637900562909, -8.32132626862909, -8.62586892062909, -9.20949703562909, -9.18641292062909, -8.88395463062909, -9.99869058362909, -8.88395463062909, -8.88395463062909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.88395463062909, -9.43814658362909, -8.62586892062909, -8.62586892062909, -8.10709892062909, -8.88395463062909, -9.43814658362909, -8.88395463062909, -8.62586892062909, -9.43814658362909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.62586892062909]
								}, {
									"case":	1673,
									"scores":	[-8.86637900562909, -8.32132626862909, -8.62586892062909, -9.20949703562909, -9.18641292062909, -8.88395463062909, -9.99869058362909, -8.88395463062909, -8.88395463062909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.88395463062909, -9.43814658362909, -8.62586892062909, -8.62586892062909, -8.10709892062909, -8.88395463062909, -9.43814658362909, -8.88395463062909, -8.62586892062909, -9.43814658362909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.62586892062909]
								}, {
									"case":	1674,
									"scores":	[-8.86637900562909, -8.32132626862909, -8.62586892062909, -9.20949703562909, -9.18641292062909, -8.88395463062909, -9.99869058362909, -8.88395463062909, -8.88395463062909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.88395463062909, -9.43814658362909, -8.62586892062909, -8.62586892062909, -8.10709892062909, -8.88395463062909, -9.43814658362909, -8.88395463062909, -8.62586892062909, -9.43814658362909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.62586892062909, -8.62586892062909]
								}, {
									"case":	1675,
									"scores":	[-8.87009737562909, -8.32504463862909, -8.62958729062909, -9.21321540562909, -9.19013129062909, -8.8876730006290927, -10.002408953629093, -8.8876730006290927, -8.8876730006290927, -8.62958729062909, -8.62958729062909, -8.62958729062909, -8.8876730006290927, -9.4418649536290928, -8.62958729062909, -8.62958729062909, -8.11081729062909, -8.8876730006290927, -9.4418649536290928, -8.8876730006290927, -8.62958729062909, -9.4418649536290928, -8.62958729062909, -8.62958729062909, -8.62958729062909, -8.62958729062909, -8.62958729062909]
								}]
						}, {
							"switch":	34,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	549,
							"begin_column":	21,
							"end_line":	549,
							"end_column":	34,
							"patch_codes":	["if (!__is_neg(\"\", \"L549\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    codestr[i] = 3;\n", "{\n}\n", "codestr[i] = (-1)", "codestr[i] = (0 * adj)", "codestr[i] = (0 * codelen)", "codestr[i] = (0 * const_stack_size)", "codestr[i] = (0 * const_stack_top)", "codestr[i] = (0 * cum_orig_line)", "codestr[i] = (0 * h)", "codestr[i] = (0 * i)", "codestr[i] = (0 * in_consts)", "codestr[i] = (0 * j)", "codestr[i] = (0 * last_line)", "codestr[i] = (0 * new_line)", "codestr[i] = (0 * nops)", "codestr[i] = (0 * opcode)", "codestr[i] = (0 * tabsiz)", "codestr[i] = (0 * tgt)", "codestr[i] = (0 * tgttgt)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "codestr[i] = (addrmap != 0)", "codestr[i] = (addrmap == 0)", "codestr[i] = (adj != 0)", "codestr[i] = (adj != const_stack_size)", "codestr[i] = (adj != const_stack_top)", "codestr[i] = (adj != cum_orig_line)", "codestr[i] = (adj != in_consts)", "codestr[i] = (adj != last_line)", "codestr[i] = (adj != new_line)", "codestr[i] = (adj != opcode)", "codestr[i] = (adj != tabsiz)", "codestr[i] = (adj != tgt)", "codestr[i] = (adj != tgttgt)", "codestr[i] = (adj * codelen)", "codestr[i] = (adj * const_stack_size)", "codestr[i] = (adj * const_stack_top)", "codestr[i] = (adj * cum_orig_line)", "codestr[i] = (adj * h)", "codestr[i] = (adj * i)", "codestr[i] = (adj * in_consts)", "codestr[i] = (adj * j)", "codestr[i] = (adj * last_line)", "codestr[i] = (adj * new_line)", "codestr[i] = (adj * nops)", "codestr[i] = (adj * opcode)", "codestr[i] = (adj * tabsiz)", "codestr[i] = (adj * tgt)", "codestr[i] = (adj * tgttgt)", "codestr[i] = (adj + 0)", "codestr[i] = (adj + const_stack_size)", "codestr[i] = (adj + const_stack_top)", "codestr[i] = (adj + cum_orig_line)", "codestr[i] = (adj + in_consts)", "codestr[i] = (adj + last_line)", "codestr[i] = (adj + new_line)", "codestr[i] = (adj + opcode)", "codestr[i] = (adj + tabsiz)", "codestr[i] = (adj + tgt)", "codestr[i] = (adj + tgttgt)", "codestr[i] = (adj - 0)", "codestr[i] = (adj - const_stack_size)", "codestr[i] = (adj - const_stack_top)", "codestr[i] = (adj - cum_orig_line)", "codestr[i] = (adj - in_consts)", "codestr[i] = (adj - last_line)", "codestr[i] = (adj - new_line)", "codestr[i] = (adj - opcode)", "codestr[i] = (adj - tabsiz)", "codestr[i] = (adj - tgt)", "codestr[i] = (adj - tgttgt)", "codestr[i] = (adj == 0)", "codestr[i] = (adj == const_stack_size)", "codestr[i] = (adj == const_stack_top)", "codestr[i] = (adj == cum_orig_line)", "codestr[i] = (adj == in_consts)", "codestr[i] = (adj == last_line)", "codestr[i] = (adj == new_line)", "codestr[i] = (adj == opcode)", "codestr[i] = (adj == tabsiz)", "codestr[i] = (adj == tgt)", "codestr[i] = (adj == tgttgt)", "codestr[i] = (blocks != 0)", "codestr[i] = (blocks == 0)", "codestr[i] = (code != 0)", "codestr[i] = (code != consts)", "codestr[i] = (code != lineno_obj)", "codestr[i] = (code != names)", "codestr[i] = (code == 0)", "codestr[i] = (code == consts)", "codestr[i] = (code == lineno_obj)", "codestr[i] = (code == names)", "codestr[i] = (codelen != 0)", "codestr[i] = (codelen != adj)", "codestr[i] = (codelen != const_stack_size)", "codestr[i] = (codelen != const_stack_top)", "codestr[i] = (codelen != cum_orig_line)", "codestr[i] = (codelen != h)", "codestr[i] = (codelen != in_consts)", "codestr[i] = (codelen != last_line)", "codestr[i] = (codelen != new_line)", "codestr[i] = (codelen != nops)", "codestr[i] = (codelen != opcode)", "codestr[i] = (codelen != tabsiz)", "codestr[i] = (codelen != tgt)", "codestr[i] = (codelen != tgttgt)", "codestr[i] = (codelen * adj)", "codestr[i] = (codelen * const_stack_size)", "codestr[i] = (codelen * const_stack_top)", "codestr[i] = (codelen * cum_orig_line)", "codestr[i] = (codelen * h)", "codestr[i] = (codelen * i)", "codestr[i] = (codelen * in_consts)", "codestr[i] = (codelen * j)", "codestr[i] = (codelen * last_line)", "codestr[i] = (codelen * new_line)", "codestr[i] = (codelen * nops)", "codestr[i] = (codelen * opcode)", "codestr[i] = (codelen * tabsiz)", "codestr[i] = (codelen * tgt)", "codestr[i] = (codelen * tgttgt)", "codestr[i] = (codelen + 0)", "codestr[i] = (codelen + adj)", "codestr[i] = (codelen + const_stack_size)", "codestr[i] = (codelen + const_stack_top)", "codestr[i] = (codelen + cum_orig_line)", "codestr[i] = (codelen + h)", "codestr[i] = (codelen + in_consts)", "codestr[i] = (codelen + last_line)", "codestr[i] = (codelen + new_line)", "codestr[i] = (codelen + nops)", "codestr[i] = (codelen + opcode)", "codestr[i] = (codelen + tabsiz)", "codestr[i] = (codelen + tgt)", "codestr[i] = (codelen + tgttgt)", "codestr[i] = (codelen - 0)", "codestr[i] = (codelen - adj)", "codestr[i] = (codelen - const_stack_size)", "codestr[i] = (codelen - const_stack_top)", "codestr[i] = (codelen - cum_orig_line)", "codestr[i] = (codelen - h)", "codestr[i] = (codelen - in_consts)", "codestr[i] = (codelen - last_line)", "codestr[i] = (codelen - new_line)", "codestr[i] = (codelen - nops)", "codestr[i] = (codelen - opcode)", "codestr[i] = (codelen - tabsiz)", "codestr[i] = (codelen - tgt)", "codestr[i] = (codelen - tgttgt)", "codestr[i] = (codelen == 0)", "codestr[i] = (codelen == adj)", "codestr[i] = (codelen == const_stack_size)", "codestr[i] = (codelen == const_stack_top)", "codestr[i] = (codelen == cum_orig_line)", "codestr[i] = (codelen == h)", "codestr[i] = (codelen == in_consts)", "codestr[i] = (codelen == last_line)", "codestr[i] = (codelen == new_line)", "codestr[i] = (codelen == nops)", "codestr[i] = (codelen == opcode)", "codestr[i] = (codelen == tabsiz)", "codestr[i] = (codelen == tgt)", "codestr[i] = (codelen == tgttgt)", "codestr[i] = (codestr != 0)", "codestr[i] = (codestr != lineno)", "codestr[i] = (codestr == 0)", "codestr[i] = (codestr == lineno)", "codestr[i] = (const_stack != 0)", "codestr[i] = (const_stack == 0)", "codestr[i] = (const_stack_size != 0)", "codestr[i] = (const_stack_size != in_consts)", "codestr[i] = (const_stack_size * adj)", "codestr[i] = (const_stack_size * codelen)", "codestr[i] = (const_stack_size * const_stack_top)", "codestr[i] = (const_stack_size * cum_orig_line)", "codestr[i] = (const_stack_size * h)", "codestr[i] = (const_stack_size * i)", "codestr[i] = (const_stack_size * in_consts)", "codestr[i] = (const_stack_size * j)", "codestr[i] = (const_stack_size * last_line)", "codestr[i] = (const_stack_size * new_line)", "codestr[i] = (const_stack_size * nops)", "codestr[i] = (const_stack_size * opcode)", "codestr[i] = (const_stack_size * tabsiz)", "codestr[i] = (const_stack_size * tgt)", "codestr[i] = (const_stack_size * tgttgt)", "codestr[i] = (const_stack_size + 0)", "codestr[i] = (const_stack_size + in_consts)", "codestr[i] = (const_stack_size - 0)", "codestr[i] = (const_stack_size - in_consts)", "codestr[i] = (const_stack_size == 0)", "codestr[i] = (const_stack_size == in_consts)", "codestr[i] = (const_stack_top != 0)", "codestr[i] = (const_stack_top != const_stack_size)", "codestr[i] = (const_stack_top != in_consts)", "codestr[i] = (const_stack_top * adj)", "codestr[i] = (const_stack_top * codelen)", "codestr[i] = (const_stack_top * const_stack_size)", "codestr[i] = (const_stack_top * cum_orig_line)", "codestr[i] = (const_stack_top * h)", "codestr[i] = (const_stack_top * i)", "codestr[i] = (const_stack_top * in_consts)", "codestr[i] = (const_stack_top * j)", "codestr[i] = (const_stack_top * last_line)", "codestr[i] = (const_stack_top * new_line)", "codestr[i] = (const_stack_top * nops)", "codestr[i] = (const_stack_top * opcode)", "codestr[i] = (const_stack_top * tabsiz)", "codestr[i] = (const_stack_top * tgt)", "codestr[i] = (const_stack_top * tgttgt)", "codestr[i] = (const_stack_top + 0)", "codestr[i] = (const_stack_top + const_stack_size)", "codestr[i] = (const_stack_top + in_consts)", "codestr[i] = (const_stack_top - 0)", "codestr[i] = (const_stack_top - const_stack_size)", "codestr[i] = (const_stack_top - in_consts)", "codestr[i] = (const_stack_top == 0)", "codestr[i] = (const_stack_top == const_stack_size)", "codestr[i] = (const_stack_top == in_consts)", "codestr[i] = (consts != 0)", "codestr[i] = (consts != lineno_obj)", "codestr[i] = (consts != names)", "codestr[i] = (consts == 0)", "codestr[i] = (consts == lineno_obj)", "codestr[i] = (consts == names)", "codestr[i] = (cum_orig_line != 0)", "codestr[i] = (cum_orig_line != const_stack_size)", "codestr[i] = (cum_orig_line != const_stack_top)", "codestr[i] = (cum_orig_line != in_consts)", "codestr[i] = (cum_orig_line != last_line)", "codestr[i] = (cum_orig_line != tabsiz)", "codestr[i] = (cum_orig_line * adj)", "codestr[i] = (cum_orig_line * codelen)", "codestr[i] = (cum_orig_line * const_stack_size)", "codestr[i] = (cum_orig_line * const_stack_top)", "codestr[i] = (cum_orig_line * h)", "codestr[i] = (cum_orig_line * i)", "codestr[i] = (cum_orig_line * in_consts)", "codestr[i] = (cum_orig_line * j)", "codestr[i] = (cum_orig_line * last_line)", "codestr[i] = (cum_orig_line * new_line)", "codestr[i] = (cum_orig_line * nops)", "codestr[i] = (cum_orig_line * opcode)", "codestr[i] = (cum_orig_line * tabsiz)", "codestr[i] = (cum_orig_line * tgt)", "codestr[i] = (cum_orig_line * tgttgt)", "codestr[i] = (cum_orig_line + 0)", "codestr[i] = (cum_orig_line + const_stack_size)", "codestr[i] = (cum_orig_line + const_stack_top)", "codestr[i] = (cum_orig_line + in_consts)", "codestr[i] = (cum_orig_line + last_line)", "codestr[i] = (cum_orig_line + tabsiz)", "codestr[i] = (cum_orig_line - 0)", "codestr[i] = (cum_orig_line - const_stack_size)", "codestr[i] = (cum_orig_line - const_stack_top)", "codestr[i] = (cum_orig_line - in_consts)", "codestr[i] = (cum_orig_line - last_line)", "codestr[i] = (cum_orig_line - tabsiz)", "codestr[i] = (cum_orig_line == 0)", "codestr[i] = (cum_orig_line == const_stack_size)", "codestr[i] = (cum_orig_line == const_stack_top)", "codestr[i] = (cum_orig_line == in_consts)", "codestr[i] = (cum_orig_line == last_line)", "codestr[i] = (cum_orig_line == tabsiz)", "codestr[i] = (h != 0)", "codestr[i] = (h != adj)", "codestr[i] = (h != const_stack_size)", "codestr[i] = (h != const_stack_top)", "codestr[i] = (h != cum_orig_line)", "codestr[i] = (h != in_consts)", "codestr[i] = (h != last_line)", "codestr[i] = (h != new_line)", "codestr[i] = (h != opcode)", "codestr[i] = (h != tabsiz)", "codestr[i] = (h != tgt)", "codestr[i] = (h != tgttgt)", "codestr[i] = (h * adj)", "codestr[i] = (h * codelen)", "codestr[i] = (h * const_stack_size)", "codestr[i] = (h * const_stack_top)", "codestr[i] = (h * cum_orig_line)", "codestr[i] = (h * i)", "codestr[i] = (h * in_consts)", "codestr[i] = (h * j)", "codestr[i] = (h * last_line)", "codestr[i] = (h * new_line)", "codestr[i] = (h * nops)", "codestr[i] = (h * opcode)", "codestr[i] = (h * tabsiz)", "codestr[i] = (h * tgt)", "codestr[i] = (h * tgttgt)", "codestr[i] = (h + 0)", "codestr[i] = (h + adj)", "codestr[i] = (h + const_stack_size)", "codestr[i] = (h + const_stack_top)", "codestr[i] = (h + cum_orig_line)", "codestr[i] = (h + in_consts)", "codestr[i] = (h + last_line)", "codestr[i] = (h + new_line)", "codestr[i] = (h + opcode)", "codestr[i] = (h + tabsiz)", "codestr[i] = (h + tgt)", "codestr[i] = (h + tgttgt)", "codestr[i] = (h - 0)", "codestr[i] = (h - adj)", "codestr[i] = (h - const_stack_size)", "codestr[i] = (h - const_stack_top)", "codestr[i] = (h - cum_orig_line)", "codestr[i] = (h - in_consts)", "codestr[i] = (h - last_line)", "codestr[i] = (h - new_line)", "codestr[i] = (h - opcode)", "codestr[i] = (h - tabsiz)", "codestr[i] = (h - tgt)", "codestr[i] = (h - tgttgt)", "codestr[i] = (h == 0)", "codestr[i] = (h == adj)", "codestr[i] = (h == const_stack_size)", "codestr[i] = (h == const_stack_top)", "codestr[i] = (h == cum_orig_line)", "codestr[i] = (h == in_consts)", "codestr[i] = (h == last_line)", "codestr[i] = (h == new_line)", "codestr[i] = (h == opcode)", "codestr[i] = (h == tabsiz)", "codestr[i] = (h == tgt)", "codestr[i] = (h == tgttgt)", "codestr[i] = (i != 0)", "codestr[i] = (i != adj)", "codestr[i] = (i != codelen)", "codestr[i] = (i != const_stack_size)", "codestr[i] = (i != const_stack_top)", "codestr[i] = (i != cum_orig_line)", "codestr[i] = (i != h)", "codestr[i] = (i != in_consts)", "codestr[i] = (i != j)", "codestr[i] = (i != last_line)", "codestr[i] = (i != new_line)", "codestr[i] = (i != nops)", "codestr[i] = (i != opcode)", "codestr[i] = (i != tabsiz)", "codestr[i] = (i != tgt)", "codestr[i] = (i != tgttgt)", "codestr[i] = (i * adj)", "codestr[i] = (i * codelen)", "codestr[i] = (i * const_stack_size)", "codestr[i] = (i * const_stack_top)", "codestr[i] = (i * cum_orig_line)", "codestr[i] = (i * h)", "codestr[i] = (i * in_consts)", "codestr[i] = (i * j)", "codestr[i] = (i * last_line)", "codestr[i] = (i * new_line)", "codestr[i] = (i * nops)", "codestr[i] = (i * opcode)", "codestr[i] = (i * tabsiz)", "codestr[i] = (i * tgt)", "codestr[i] = (i * tgttgt)", "codestr[i] = (i + 0)", "codestr[i] = (i + adj)", "codestr[i] = (i + codelen)", "codestr[i] = (i + const_stack_size)", "codestr[i] = (i + const_stack_top)", "codestr[i] = (i + cum_orig_line)", "codestr[i] = (i + h)", "codestr[i] = (i + in_consts)", "codestr[i] = (i + j)", "codestr[i] = (i + last_line)", "codestr[i] = (i + new_line)", "codestr[i] = (i + nops)", "codestr[i] = (i + opcode)", "codestr[i] = (i + tabsiz)", "codestr[i] = (i + tgt)", "codestr[i] = (i + tgttgt)", "codestr[i] = (i - 0)", "codestr[i] = (i - adj)", "codestr[i] = (i - codelen)", "codestr[i] = (i - const_stack_size)", "codestr[i] = (i - const_stack_top)", "codestr[i] = (i - cum_orig_line)", "codestr[i] = (i - h)", "codestr[i] = (i - in_consts)", "codestr[i] = (i - j)", "codestr[i] = (i - last_line)", "codestr[i] = (i - new_line)", "codestr[i] = (i - nops)", "codestr[i] = (i - opcode)", "codestr[i] = (i - tabsiz)", "codestr[i] = (i - tgt)", "codestr[i] = (i - tgttgt)", "codestr[i] = (i == 0)", "codestr[i] = (i == adj)", "codestr[i] = (i == codelen)", "codestr[i] = (i == const_stack_size)", "codestr[i] = (i == const_stack_top)", "codestr[i] = (i == cum_orig_line)", "codestr[i] = (i == h)", "codestr[i] = (i == in_consts)", "codestr[i] = (i == j)", "codestr[i] = (i == last_line)", "codestr[i] = (i == new_line)", "codestr[i] = (i == nops)", "codestr[i] = (i == opcode)", "codestr[i] = (i == tabsiz)", "codestr[i] = (i == tgt)", "codestr[i] = (i == tgttgt)", "codestr[i] = (in_consts != 0)", "codestr[i] = (in_consts * adj)", "codestr[i] = (in_consts * codelen)", "codestr[i] = (in_consts * const_stack_size)", "codestr[i] = (in_consts * const_stack_top)", "codestr[i] = (in_consts * cum_orig_line)", "codestr[i] = (in_consts * h)", "codestr[i] = (in_consts * i)", "codestr[i] = (in_consts * j)", "codestr[i] = (in_consts * last_line)", "codestr[i] = (in_consts * new_line)", "codestr[i] = (in_consts * nops)", "codestr[i] = (in_consts * opcode)", "codestr[i] = (in_consts * tabsiz)", "codestr[i] = (in_consts * tgt)", "codestr[i] = (in_consts * tgttgt)", "codestr[i] = (in_consts + 0)", "codestr[i] = (in_consts - 0)", "codestr[i] = (in_consts == 0)", "codestr[i] = (j != 0)", "codestr[i] = (j != adj)", "codestr[i] = (j != codelen)", "codestr[i] = (j != const_stack_size)", "codestr[i] = (j != const_stack_top)", "codestr[i] = (j != cum_orig_line)", "codestr[i] = (j != h)", "codestr[i] = (j != in_consts)", "codestr[i] = (j != last_line)", "codestr[i] = (j != new_line)", "codestr[i] = (j != nops)", "codestr[i] = (j != opcode)", "codestr[i] = (j != tabsiz)", "codestr[i] = (j != tgt)", "codestr[i] = (j != tgttgt)", "codestr[i] = (j * adj)", "codestr[i] = (j * codelen)", "codestr[i] = (j * const_stack_size)", "codestr[i] = (j * const_stack_top)", "codestr[i] = (j * cum_orig_line)", "codestr[i] = (j * h)", "codestr[i] = (j * i)", "codestr[i] = (j * in_consts)", "codestr[i] = (j * last_line)", "codestr[i] = (j * new_line)", "codestr[i] = (j * nops)", "codestr[i] = (j * opcode)", "codestr[i] = (j * tabsiz)", "codestr[i] = (j * tgt)", "codestr[i] = (j * tgttgt)", "codestr[i] = (j + 0)", "codestr[i] = (j + adj)", "codestr[i] = (j + codelen)", "codestr[i] = (j + const_stack_size)", "codestr[i] = (j + const_stack_top)", "codestr[i] = (j + cum_orig_line)", "codestr[i] = (j + h)", "codestr[i] = (j + in_consts)", "codestr[i] = (j + last_line)", "codestr[i] = (j + new_line)", "codestr[i] = (j + nops)", "codestr[i] = (j + opcode)", "codestr[i] = (j + tabsiz)", "codestr[i] = (j + tgt)", "codestr[i] = (j + tgttgt)", "codestr[i] = (j - 0)", "codestr[i] = (j - adj)", "codestr[i] = (j - codelen)", "codestr[i] = (j - const_stack_size)", "codestr[i] = (j - const_stack_top)", "codestr[i] = (j - cum_orig_line)", "codestr[i] = (j - h)", "codestr[i] = (j - in_consts)", "codestr[i] = (j - last_line)", "codestr[i] = (j - new_line)", "codestr[i] = (j - nops)", "codestr[i] = (j - opcode)", "codestr[i] = (j - tabsiz)", "codestr[i] = (j - tgt)", "codestr[i] = (j - tgttgt)", "codestr[i] = (j == 0)", "codestr[i] = (j == adj)", "codestr[i] = (j == codelen)", "codestr[i] = (j == const_stack_size)", "codestr[i] = (j == const_stack_top)", "codestr[i] = (j == cum_orig_line)", "codestr[i] = (j == h)", "codestr[i] = (j == in_consts)", "codestr[i] = (j == last_line)", "codestr[i] = (j == new_line)", "codestr[i] = (j == nops)", "codestr[i] = (j == opcode)", "codestr[i] = (j == tabsiz)", "codestr[i] = (j == tgt)", "codestr[i] = (j == tgttgt)", "codestr[i] = (last_line != 0)", "codestr[i] = (last_line != const_stack_size)", "codestr[i] = (last_line != const_stack_top)", "codestr[i] = (last_line != in_consts)", "codestr[i] = (last_line != tabsiz)", "codestr[i] = (last_line * adj)", "codestr[i] = (last_line * codelen)", "codestr[i] = (last_line * const_stack_size)", "codestr[i] = (last_line * const_stack_top)", "codestr[i] = (last_line * cum_orig_line)", "codestr[i] = (last_line * h)", "codestr[i] = (last_line * i)", "codestr[i] = (last_line * in_consts)", "codestr[i] = (last_line * j)", "codestr[i] = (last_line * new_line)", "codestr[i] = (last_line * nops)", "codestr[i] = (last_line * opcode)", "codestr[i] = (last_line * tabsiz)", "codestr[i] = (last_line * tgt)", "codestr[i] = (last_line * tgttgt)", "codestr[i] = (last_line + 0)", "codestr[i] = (last_line + const_stack_size)", "codestr[i] = (last_line + const_stack_top)", "codestr[i] = (last_line + in_consts)", "codestr[i] = (last_line + tabsiz)", "codestr[i] = (last_line - 0)", "codestr[i] = (last_line - const_stack_size)", "codestr[i] = (last_line - const_stack_top)", "codestr[i] = (last_line - in_consts)", "codestr[i] = (last_line - tabsiz)", "codestr[i] = (last_line == 0)", "codestr[i] = (last_line == const_stack_size)", "codestr[i] = (last_line == const_stack_top)", "codestr[i] = (last_line == in_consts)", "codestr[i] = (last_line == tabsiz)", "codestr[i] = (lineno != 0)", "codestr[i] = (lineno == 0)", "codestr[i] = (lineno_obj != 0)", "codestr[i] = (lineno_obj == 0)", "codestr[i] = (load_const_stack != 0)", "codestr[i] = (load_const_stack == 0)", "codestr[i] = (name != 0)", "codestr[i] = (name == 0)", "codestr[i] = (names != 0)", "codestr[i] = (names != lineno_obj)", "codestr[i] = (names == 0)", "codestr[i] = (names == lineno_obj)", "codestr[i] = (new_line != 0)", "codestr[i] = (new_line != const_stack_size)", "codestr[i] = (new_line != const_stack_top)", "codestr[i] = (new_line != cum_orig_line)", "codestr[i] = (new_line != in_consts)", "codestr[i] = (new_line != last_line)", "codestr[i] = (new_line != tabsiz)", "codestr[i] = (new_line * adj)", "codestr[i] = (new_line * codelen)", "codestr[i] = (new_line * const_stack_size)", "codestr[i] = (new_line * const_stack_top)", "codestr[i] = (new_line * cum_orig_line)", "codestr[i] = (new_line * h)", "codestr[i] = (new_line * i)", "codestr[i] = (new_line * in_consts)", "codestr[i] = (new_line * j)", "codestr[i] = (new_line * last_line)", "codestr[i] = (new_line * nops)", "codestr[i] = (new_line * opcode)", "codestr[i] = (new_line * tabsiz)", "codestr[i] = (new_line * tgt)", "codestr[i] = (new_line * tgttgt)", "codestr[i] = (new_line + 0)", "codestr[i] = (new_line + const_stack_size)", "codestr[i] = (new_line + const_stack_top)", "codestr[i] = (new_line + cum_orig_line)", "codestr[i] = (new_line + in_consts)", "codestr[i] = (new_line + last_line)", "codestr[i] = (new_line + tabsiz)", "codestr[i] = (new_line - 0)", "codestr[i] = (new_line - const_stack_size)", "codestr[i] = (new_line - const_stack_top)", "codestr[i] = (new_line - cum_orig_line)", "codestr[i] = (new_line - in_consts)", "codestr[i] = (new_line - last_line)", "codestr[i] = (new_line - tabsiz)", "codestr[i] = (new_line == 0)", "codestr[i] = (new_line == const_stack_size)", "codestr[i] = (new_line == const_stack_top)", "codestr[i] = (new_line == cum_orig_line)", "codestr[i] = (new_line == in_consts)", "codestr[i] = (new_line == last_line)", "codestr[i] = (new_line == tabsiz)", "codestr[i] = (nops != 0)", "codestr[i] = (nops != adj)", "codestr[i] = (nops != const_stack_size)", "codestr[i] = (nops != const_stack_top)", "codestr[i] = (nops != cum_orig_line)", "codestr[i] = (nops != h)", "codestr[i] = (nops != in_consts)", "codestr[i] = (nops != last_line)", "codestr[i] = (nops != new_line)", "codestr[i] = (nops != opcode)", "codestr[i] = (nops != tabsiz)", "codestr[i] = (nops != tgt)", "codestr[i] = (nops != tgttgt)", "codestr[i] = (nops * adj)", "codestr[i] = (nops * codelen)", "codestr[i] = (nops * const_stack_size)", "codestr[i] = (nops * const_stack_top)", "codestr[i] = (nops * cum_orig_line)", "codestr[i] = (nops * h)", "codestr[i] = (nops * i)", "codestr[i] = (nops * in_consts)", "codestr[i] = (nops * j)", "codestr[i] = (nops * last_line)", "codestr[i] = (nops * new_line)", "codestr[i] = (nops * opcode)", "codestr[i] = (nops * tabsiz)", "codestr[i] = (nops * tgt)", "codestr[i] = (nops * tgttgt)", "codestr[i] = (nops + 0)", "codestr[i] = (nops + adj)", "codestr[i] = (nops + const_stack_size)", "codestr[i] = (nops + const_stack_top)", "codestr[i] = (nops + cum_orig_line)", "codestr[i] = (nops + h)", "codestr[i] = (nops + in_consts)", "codestr[i] = (nops + last_line)", "codestr[i] = (nops + new_line)", "codestr[i] = (nops + opcode)", "codestr[i] = (nops + tabsiz)", "codestr[i] = (nops + tgt)", "codestr[i] = (nops + tgttgt)", "codestr[i] = (nops - 0)", "codestr[i] = (nops - adj)", "codestr[i] = (nops - const_stack_size)", "codestr[i] = (nops - const_stack_top)", "codestr[i] = (nops - cum_orig_line)", "codestr[i] = (nops - h)", "codestr[i] = (nops - in_consts)", "codestr[i] = (nops - last_line)", "codestr[i] = (nops - new_line)", "codestr[i] = (nops - opcode)", "codestr[i] = (nops - tabsiz)", "codestr[i] = (nops - tgt)", "codestr[i] = (nops - tgttgt)", "codestr[i] = (nops == 0)", "codestr[i] = (nops == adj)", "codestr[i] = (nops == const_stack_size)", "codestr[i] = (nops == const_stack_top)", "codestr[i] = (nops == cum_orig_line)", "codestr[i] = (nops == h)", "codestr[i] = (nops == in_consts)", "codestr[i] = (nops == last_line)", "codestr[i] = (nops == new_line)", "codestr[i] = (nops == opcode)", "codestr[i] = (nops == tabsiz)", "codestr[i] = (nops == tgt)", "codestr[i] = (nops == tgttgt)", "codestr[i] = (opcode != 0)", "codestr[i] = (opcode != const_stack_size)", "codestr[i] = (opcode != const_stack_top)", "codestr[i] = (opcode != cum_orig_line)", "codestr[i] = (opcode != in_consts)", "codestr[i] = (opcode != last_line)", "codestr[i] = (opcode != new_line)", "codestr[i] = (opcode != tabsiz)", "codestr[i] = (opcode * adj)", "codestr[i] = (opcode * codelen)", "codestr[i] = (opcode * const_stack_size)", "codestr[i] = (opcode * const_stack_top)", "codestr[i] = (opcode * cum_orig_line)", "codestr[i] = (opcode * h)", "codestr[i] = (opcode * i)", "codestr[i] = (opcode * in_consts)", "codestr[i] = (opcode * j)", "codestr[i] = (opcode * last_line)", "codestr[i] = (opcode * new_line)", "codestr[i] = (opcode * nops)", "codestr[i] = (opcode * tabsiz)", "codestr[i] = (opcode * tgt)", "codestr[i] = (opcode * tgttgt)", "codestr[i] = (opcode + 0)", "codestr[i] = (opcode + const_stack_size)", "codestr[i] = (opcode + const_stack_top)", "codestr[i] = (opcode + cum_orig_line)", "codestr[i] = (opcode + in_consts)", "codestr[i] = (opcode + last_line)", "codestr[i] = (opcode + new_line)", "codestr[i] = (opcode + tabsiz)", "codestr[i] = (opcode - 0)", "codestr[i] = (opcode - const_stack_size)", "codestr[i] = (opcode - const_stack_top)", "codestr[i] = (opcode - cum_orig_line)", "codestr[i] = (opcode - in_consts)", "codestr[i] = (opcode - last_line)", "codestr[i] = (opcode - new_line)", "codestr[i] = (opcode - tabsiz)", "codestr[i] = (opcode == 0)", "codestr[i] = (opcode == const_stack_size)", "codestr[i] = (opcode == const_stack_top)", "codestr[i] = (opcode == cum_orig_line)", "codestr[i] = (opcode == in_consts)", "codestr[i] = (opcode == last_line)", "codestr[i] = (opcode == new_line)", "codestr[i] = (opcode == tabsiz)", "codestr[i] = (tabsiz != 0)", "codestr[i] = (tabsiz != const_stack_size)", "codestr[i] = (tabsiz != const_stack_top)", "codestr[i] = (tabsiz != in_consts)", "codestr[i] = (tabsiz * adj)", "codestr[i] = (tabsiz * codelen)", "codestr[i] = (tabsiz * const_stack_size)", "codestr[i] = (tabsiz * const_stack_top)", "codestr[i] = (tabsiz * cum_orig_line)", "codestr[i] = (tabsiz * h)", "codestr[i] = (tabsiz * i)", "codestr[i] = (tabsiz * in_consts)", "codestr[i] = (tabsiz * j)", "codestr[i] = (tabsiz * last_line)", "codestr[i] = (tabsiz * new_line)", "codestr[i] = (tabsiz * nops)", "codestr[i] = (tabsiz * opcode)", "codestr[i] = (tabsiz * tgt)", "codestr[i] = (tabsiz * tgttgt)", "codestr[i] = (tabsiz + 0)", "codestr[i] = (tabsiz + const_stack_size)", "codestr[i] = (tabsiz + const_stack_top)", "codestr[i] = (tabsiz + in_consts)", "codestr[i] = (tabsiz - 0)", "codestr[i] = (tabsiz - const_stack_size)", "codestr[i] = (tabsiz - const_stack_top)", "codestr[i] = (tabsiz - in_consts)", "codestr[i] = (tabsiz == 0)", "codestr[i] = (tabsiz == const_stack_size)", "codestr[i] = (tabsiz == const_stack_top)", "codestr[i] = (tabsiz == in_consts)", "codestr[i] = (tgt != 0)", "codestr[i] = (tgt != const_stack_size)", "codestr[i] = (tgt != const_stack_top)", "codestr[i] = (tgt != cum_orig_line)", "codestr[i] = (tgt != in_consts)", "codestr[i] = (tgt != last_line)", "codestr[i] = (tgt != new_line)", "codestr[i] = (tgt != opcode)", "codestr[i] = (tgt != tabsiz)", "codestr[i] = (tgt != tgttgt)", "codestr[i] = (tgt * adj)", "codestr[i] = (tgt * codelen)", "codestr[i] = (tgt * const_stack_size)", "codestr[i] = (tgt * const_stack_top)", "codestr[i] = (tgt * cum_orig_line)", "codestr[i] = (tgt * h)", "codestr[i] = (tgt * i)", "codestr[i] = (tgt * in_consts)", "codestr[i] = (tgt * j)", "codestr[i] = (tgt * last_line)", "codestr[i] = (tgt * new_line)", "codestr[i] = (tgt * nops)", "codestr[i] = (tgt * opcode)", "codestr[i] = (tgt * tabsiz)", "codestr[i] = (tgt * tgttgt)", "codestr[i] = (tgt + 0)", "codestr[i] = (tgt + const_stack_size)", "codestr[i] = (tgt + const_stack_top)", "codestr[i] = (tgt + cum_orig_line)", "codestr[i] = (tgt + in_consts)", "codestr[i] = (tgt + last_line)", "codestr[i] = (tgt + new_line)", "codestr[i] = (tgt + opcode)", "codestr[i] = (tgt + tabsiz)", "codestr[i] = (tgt + tgttgt)", "codestr[i] = (tgt - 0)", "codestr[i] = (tgt - const_stack_size)", "codestr[i] = (tgt - const_stack_top)", "codestr[i] = (tgt - cum_orig_line)", "codestr[i] = (tgt - in_consts)", "codestr[i] = (tgt - last_line)", "codestr[i] = (tgt - new_line)", "codestr[i] = (tgt - opcode)", "codestr[i] = (tgt - tabsiz)", "codestr[i] = (tgt - tgttgt)", "codestr[i] = (tgt == 0)", "codestr[i] = (tgt == const_stack_size)", "codestr[i] = (tgt == const_stack_top)", "codestr[i] = (tgt == cum_orig_line)", "codestr[i] = (tgt == in_consts)", "codestr[i] = (tgt == last_line)", "codestr[i] = (tgt == new_line)", "codestr[i] = (tgt == opcode)", "codestr[i] = (tgt == tabsiz)", "codestr[i] = (tgt == tgttgt)", "codestr[i] = (tgttgt != 0)", "codestr[i] = (tgttgt != const_stack_size)", "codestr[i] = (tgttgt != const_stack_top)", "codestr[i] = (tgttgt != cum_orig_line)", "codestr[i] = (tgttgt != in_consts)", "codestr[i] = (tgttgt != last_line)", "codestr[i] = (tgttgt != new_line)", "codestr[i] = (tgttgt != opcode)", "codestr[i] = (tgttgt != tabsiz)", "codestr[i] = (tgttgt * adj)", "codestr[i] = (tgttgt * codelen)", "codestr[i] = (tgttgt * const_stack_size)", "codestr[i] = (tgttgt * const_stack_top)", "codestr[i] = (tgttgt * cum_orig_line)", "codestr[i] = (tgttgt * h)", "codestr[i] = (tgttgt * i)", "codestr[i] = (tgttgt * in_consts)", "codestr[i] = (tgttgt * j)", "codestr[i] = (tgttgt * last_line)", "codestr[i] = (tgttgt * new_line)", "codestr[i] = (tgttgt * nops)", "codestr[i] = (tgttgt * opcode)", "codestr[i] = (tgttgt * tabsiz)", "codestr[i] = (tgttgt * tgt)", "codestr[i] = (tgttgt + 0)", "codestr[i] = (tgttgt + const_stack_size)", "codestr[i] = (tgttgt + const_stack_top)", "codestr[i] = (tgttgt + cum_orig_line)", "codestr[i] = (tgttgt + in_consts)", "codestr[i] = (tgttgt + last_line)", "codestr[i] = (tgttgt + new_line)", "codestr[i] = (tgttgt + opcode)", "codestr[i] = (tgttgt + tabsiz)", "codestr[i] = (tgttgt - 0)", "codestr[i] = (tgttgt - const_stack_size)", "codestr[i] = (tgttgt - const_stack_top)", "codestr[i] = (tgttgt - cum_orig_line)", "codestr[i] = (tgttgt - in_consts)", "codestr[i] = (tgttgt - last_line)", "codestr[i] = (tgttgt - new_line)", "codestr[i] = (tgttgt - opcode)", "codestr[i] = (tgttgt - tabsiz)", "codestr[i] = (tgttgt == 0)", "codestr[i] = (tgttgt == const_stack_size)", "codestr[i] = (tgttgt == const_stack_top)", "codestr[i] = (tgttgt == cum_orig_line)", "codestr[i] = (tgttgt == in_consts)", "codestr[i] = (tgttgt == last_line)", "codestr[i] = (tgttgt == new_line)", "codestr[i] = (tgttgt == opcode)", "codestr[i] = (tgttgt == tabsiz)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.3107169906290927, -8.27881089062909, -7.483984700629092, -7.4784279496290917, -8.02952870062909, -7.9059507006290923, -9.20703010062909, -7.9059507006290923, -7.9059507006290923, -7.483984700629092, -7.483984700629092, -7.483984700629092, -7.9059507006290923, -8.66148610062909, -7.483984700629092, -7.483984700629092, -7.3125948606290923, -7.9059507006290923, -8.66148610062909, -7.9059507006290923, -7.483984700629092, -8.66148610062909, -7.483984700629092, -7.483984700629092, -7.483984700629092, -7.483984700629092, -7.483984700629092]
								}, {
									"case":	2,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	3,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	4,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	5,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	6,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	7,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	8,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	9,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	10,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	11,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	12,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	13,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	14,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	15,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	16,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	17,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	18,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	19,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	20,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	21,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	22,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	23,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	24,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	25,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	26,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	27,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	28,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	29,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	30,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	31,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	32,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	33,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	34,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	35,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	36,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	37,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	38,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	39,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	40,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	41,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	42,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	43,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	44,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	45,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	46,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	47,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	48,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	49,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	50,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	51,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	52,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	53,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	54,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	55,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	56,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	57,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	58,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	59,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	60,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	61,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	62,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	63,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	64,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	65,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	66,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	67,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	68,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	69,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	70,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	71,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	72,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	73,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	74,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	75,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	76,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	77,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	78,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	79,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	80,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	81,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	82,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	83,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	84,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	85,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	86,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	87,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	88,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	89,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	90,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	91,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	92,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	93,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	94,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	95,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	96,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	97,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	98,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	99,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	100,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	101,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	102,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	103,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	104,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	105,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	106,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	107,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	108,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	109,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	110,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	111,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	112,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	113,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	114,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	115,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	116,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	117,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	118,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	119,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	120,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	121,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	122,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	123,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	124,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	125,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	126,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	127,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	128,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	129,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	130,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	131,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	132,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	133,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	134,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	135,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	136,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	137,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	138,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	139,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	140,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	141,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	142,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	143,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	144,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	145,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	146,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	147,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	148,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	149,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	150,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	151,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	152,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	153,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	154,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	155,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	156,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	157,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	158,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	159,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	160,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	161,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	162,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	163,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	164,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	165,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	166,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	167,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	168,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	169,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	170,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	171,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	172,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	173,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	174,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	175,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	176,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	177,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	178,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	179,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	180,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	181,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	182,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	183,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	184,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	185,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	186,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	187,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	188,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	189,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	190,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	191,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	192,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	193,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	194,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	195,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	196,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	197,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	198,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	199,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	200,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	201,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	202,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	203,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	204,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	205,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	206,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	207,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	208,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	209,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	210,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	211,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	212,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	213,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	214,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	215,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	216,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	217,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	218,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	219,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	220,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	221,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	222,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	223,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	224,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	225,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	226,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	227,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	228,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	229,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	230,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	231,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	232,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	233,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	234,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	235,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	236,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	237,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	238,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	239,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	240,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	241,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	242,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	243,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	244,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	245,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	246,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	247,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	248,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	249,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	250,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	251,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	252,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	253,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	254,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	255,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	256,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	257,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	258,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	259,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	260,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	261,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	262,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	263,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	264,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	265,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	266,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	267,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	268,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	269,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	270,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	271,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	272,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	273,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	274,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	275,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	276,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	277,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	278,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	279,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	280,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	281,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	282,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	283,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	284,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	285,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	286,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	287,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	288,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	289,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	290,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	291,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	292,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	293,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	294,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	295,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	296,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	297,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	298,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	299,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	300,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	301,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	302,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	303,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	304,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	305,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	306,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	307,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	308,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	309,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	310,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	311,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	312,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	313,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	314,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	315,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	316,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	317,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	318,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	319,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	320,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	321,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	322,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	323,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	324,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	325,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	326,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	327,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	328,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	329,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	330,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	331,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	332,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	333,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	334,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	335,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	336,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	337,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	338,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	339,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	340,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	341,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	342,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	343,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	344,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	345,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	346,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	347,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	348,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	349,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	350,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	351,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	352,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	353,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	354,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	355,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	356,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	357,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	358,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	359,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	360,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	361,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	362,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	363,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	364,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	365,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	366,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	367,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	368,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	369,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	370,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	371,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	372,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	373,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	374,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	375,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	376,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	377,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	378,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	379,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	380,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	381,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	382,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	383,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	384,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	385,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	386,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	387,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	388,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	389,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	390,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	391,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	392,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	393,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	394,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	395,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	396,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	397,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	398,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	399,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	400,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	401,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	402,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	403,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	404,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	405,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	406,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	407,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	408,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	409,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	410,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	411,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	412,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	413,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	414,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	415,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	416,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	417,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	418,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	419,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	420,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	421,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	422,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	423,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	424,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	425,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	426,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	427,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	428,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	429,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	430,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	431,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	432,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	433,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	434,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	435,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	436,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	437,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	438,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	439,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	440,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	441,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	442,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	443,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	444,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	445,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	446,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	447,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	448,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	449,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	450,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	451,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	452,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	453,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	454,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	455,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	456,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	457,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	458,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	459,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	460,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	461,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	462,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	463,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	464,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	465,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	466,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	467,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	468,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	469,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	470,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	471,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	472,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	473,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	474,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	475,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	476,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	477,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	478,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	479,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	480,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	481,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	482,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	483,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	484,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	485,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	486,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	487,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	488,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	489,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	490,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	491,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	492,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	493,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	494,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	495,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	496,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	497,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	498,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	499,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	500,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	501,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	502,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	503,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	504,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	505,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	506,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	507,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	508,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	509,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	510,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	511,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	512,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	513,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	514,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	515,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	516,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	517,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	518,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	519,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	520,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	521,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	522,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	523,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	524,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	525,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	526,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	527,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	528,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	529,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	530,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	531,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	532,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	533,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	534,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	535,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	536,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	537,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	538,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	539,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	540,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	541,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	542,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	543,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	544,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	545,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	546,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	547,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	548,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	549,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	550,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	551,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	552,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	553,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	554,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	555,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	556,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	557,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	558,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	559,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	560,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	561,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	562,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	563,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	564,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	565,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	566,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	567,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	568,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	569,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	570,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	571,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	572,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	573,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	574,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	575,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	576,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	577,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	578,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	579,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	580,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	581,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	582,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	583,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	584,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	585,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	586,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	587,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	588,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	589,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	590,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	591,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	592,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	593,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	594,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	595,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	596,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	597,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	598,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	599,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	600,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	601,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	602,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	603,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	604,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	605,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	606,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	607,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	608,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	609,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	610,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	611,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	612,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	613,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	614,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	615,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	616,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	617,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	618,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	619,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	620,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	621,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	622,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	623,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	624,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	625,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	626,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	627,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	628,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	629,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	630,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	631,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	632,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	633,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	634,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	635,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	636,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	637,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	638,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	639,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	640,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	641,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	642,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	643,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	644,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	645,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	646,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	647,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	648,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	649,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	650,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	651,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	652,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	653,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	654,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	655,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	656,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	657,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	658,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	659,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	660,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	661,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	662,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	663,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	664,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	665,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	666,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	667,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	668,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	669,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	670,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	671,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	672,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	673,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	674,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	675,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	676,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	677,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	678,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	679,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	680,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	681,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	682,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	683,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	684,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	685,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	686,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	687,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	688,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	689,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	690,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	691,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	692,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	693,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	694,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	695,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	696,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	697,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	698,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	699,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	700,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	701,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	702,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	703,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	704,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	705,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	706,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	707,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	708,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	709,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	710,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	711,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	712,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	713,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	714,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	715,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	716,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	717,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	718,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	719,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	720,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	721,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	722,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	723,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	724,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	725,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	726,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	727,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	728,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	729,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	730,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	731,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	732,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	733,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	734,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	735,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	736,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	737,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	738,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	739,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	740,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	741,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	742,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	743,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	744,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	745,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	746,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	747,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	748,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	749,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	750,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	751,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	752,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	753,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	754,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	755,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	756,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	757,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	758,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	759,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	760,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	761,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	762,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	763,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	764,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	765,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	766,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	767,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	768,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	769,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	770,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	771,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	772,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	773,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	774,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	775,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	776,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	777,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	778,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	779,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	780,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	781,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	782,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	783,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	784,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	785,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	786,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	787,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	788,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	789,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	790,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	791,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	792,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	793,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	794,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	795,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	796,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	797,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	798,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	799,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	800,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	801,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	802,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	803,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	804,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	805,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	806,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	807,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	808,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	809,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	810,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	811,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	812,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	813,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	814,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	815,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	816,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	817,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	818,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	819,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	820,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	821,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	822,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	823,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	824,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	825,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	826,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	827,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	828,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	829,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	830,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	831,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	832,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	833,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	834,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	835,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	836,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	837,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	838,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	839,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	840,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	841,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	842,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	843,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	844,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	845,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	846,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	847,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	848,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	849,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	850,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	851,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	852,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	853,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	854,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	855,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	856,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	857,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	858,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	859,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	860,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	861,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	862,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	863,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	864,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	865,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	866,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	867,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	868,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	869,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	870,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	871,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	872,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	873,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	874,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	875,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	876,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	877,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	878,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	879,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	880,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	881,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	882,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	883,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	884,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	885,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	886,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	887,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	888,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	889,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	890,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	891,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	892,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	893,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	894,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	895,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	896,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	897,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	898,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	899,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	900,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	901,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	902,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	903,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	904,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	905,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	906,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	907,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	908,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	909,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	910,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	911,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	912,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	913,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	914,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	915,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	916,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	917,
									"scores":	[-7.4879022006290921]
								}, {
									"case":	918,
									"scores":	[-7.4879022006290921]
								}]
						}]
				}, {
					"line":	549,
					"switches":	[{
							"switch":	35,
							"types":	[[], [], [], [], [1671, 1672, 1673, 1674, 1675], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], [], [], [], [1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670], [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594], [], [], [], [], [], []],
							"begin_line":	550,
							"begin_column":	19,
							"end_line":	550,
							"end_column":	19,
							"patch_codes":	["memset(&((((PyObject *)(code))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->ob_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(code))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_call)))", "memset(&((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_del)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_free)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_init)))", "memset(&((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_members)))", "memset(&((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_name)))", "memset(&((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_new)))", "memset(&((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_print)))", "memset(&((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_str)))", "memset(&((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(code))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->ob_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->ob_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset)))", "memset(&((PyBytesObject *)(code))->ob_base, 0, sizeof (*(&((PyBytesObject *)(code))->ob_base)))", "memset(&((PyBytesObject *)(code))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(code))->ob_shash)))", "memset(&((PyBytesObject *)(code))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(code))->ob_sval)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_base)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_shash)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_sval)))", "memset(&((PyListObject *)(consts))->allocated, 0, sizeof (*(&((PyListObject *)(consts))->allocated)))", "memset(&((PyListObject *)(consts))->ob_base, 0, sizeof (*(&((PyListObject *)(consts))->ob_base)))", "memset(&((PyListObject *)(consts))->ob_item, 0, sizeof (*(&((PyListObject *)(consts))->ob_item)))", "memset(&((PyObject *)(code))->_ob_next, 0, sizeof (*(&((PyObject *)(code))->_ob_next)))", "memset(&((PyObject *)(code))->_ob_prev, 0, sizeof (*(&((PyObject *)(code))->_ob_prev)))", "memset(&((PyObject *)(code))->ob_refcnt, 0, sizeof (*(&((PyObject *)(code))->ob_refcnt)))", "memset(&((PyObject *)(code))->ob_type, 0, sizeof (*(&((PyObject *)(code))->ob_type)))", "memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_next)))", "memset(&((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_prev)))", "memset(&((PyObject *)(lineno_obj))->ob_refcnt, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_refcnt)))", "memset(&((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_type)))", "memset(&((PyTupleObject *)(names))->ob_base, 0, sizeof (*(&((PyTupleObject *)(names))->ob_base)))", "memset(&((PyTupleObject *)(names))->ob_item, 0, sizeof (*(&((PyTupleObject *)(names))->ob_item)))", "memset(&((PyVarObject *)(code))->ob_base, 0, sizeof (*(&((PyVarObject *)(code))->ob_base)))", "memset(&((PyVarObject *)(code))->ob_size, 0, sizeof (*(&((PyVarObject *)(code))->ob_size)))", "memset(&((PyVarObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_base)))", "memset(&((PyVarObject *)(lineno_obj))->ob_size, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_size)))", "memset(((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_base)))", "memset(((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_call)))", "memset(((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_del)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_free)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_init)))", "memset(((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_members)))", "memset(((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_name)))", "memset(((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_new)))", "memset(((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_print)))", "memset(((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_str)))", "memset(((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(((PyListObject *)(consts))->ob_item, 0, sizeof (*(((PyListObject *)(consts))->ob_item)))", "memset(((PyObject *)(code))->_ob_next, 0, sizeof (*(((PyObject *)(code))->_ob_next)))", "memset(((PyObject *)(code))->_ob_prev, 0, sizeof (*(((PyObject *)(code))->_ob_prev)))", "memset(((PyObject *)(code))->ob_type, 0, sizeof (*(((PyObject *)(code))->ob_type)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "memset(((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_next)))", "memset(((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_prev)))", "memset(((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(((PyObject *)(lineno_obj))->ob_type)))", "PyMem_Free((addrmap))", "PyMem_Free((blocks))", "PyMem_Free((codestr))", "PyMem_Free((lineno))", "addrmap = (addrmap)", "addrmap[i] = (-1)", "addrmap[i] = (0)", "addrmap[i] = (1)", "addrmap[i] = (10)", "addrmap[i] = (100)", "addrmap[i] = (101)", "addrmap[i] = (102)", "addrmap[i] = (103)", "addrmap[i] = (104)", "addrmap[i] = (107)", "addrmap[i] = (11)", "addrmap[i] = (110)", "addrmap[i] = (111)", "addrmap[i] = (112)", "addrmap[i] = (113)", "addrmap[i] = (114)", "addrmap[i] = (115)", "addrmap[i] = (116)", "addrmap[i] = (119)", "addrmap[i] = (12)", "addrmap[i] = (120)", "addrmap[i] = (121)", "addrmap[i] = (122)", "addrmap[i] = (132)", "addrmap[i] = (134217728)", "addrmap[i] = (143)", "addrmap[i] = (144)", "addrmap[i] = (15)", "addrmap[i] = (19)", "addrmap[i] = (2)", "addrmap[i] = (20)", "addrmap[i] = (22)", "addrmap[i] = (23)", "addrmap[i] = (24)", "addrmap[i] = (25)", "addrmap[i] = (255)", "addrmap[i] = (256)", "addrmap[i] = (26)", "addrmap[i] = (27)", "addrmap[i] = (3)", "addrmap[i] = (32700)", "addrmap[i] = (33554432)", "addrmap[i] = (4)", "addrmap[i] = (403)", "addrmap[i] = (404)", "addrmap[i] = (405)", "addrmap[i] = (410)", "addrmap[i] = (411)", "addrmap[i] = (420)", "addrmap[i] = (438)", "addrmap[i] = (492)", "addrmap[i] = (499)", "addrmap[i] = (5)", "addrmap[i] = (521)", "addrmap[i] = (531)", "addrmap[i] = (533)", "addrmap[i] = (534)", "addrmap[i] = (574)", "addrmap[i] = (580)", "addrmap[i] = (581)", "addrmap[i] = (582)", "addrmap[i] = (592)", "addrmap[i] = (597)", "addrmap[i] = (598)", "addrmap[i] = (599)", "addrmap[i] = (6)", "addrmap[i] = (62)", "addrmap[i] = (63)", "addrmap[i] = (64)", "addrmap[i] = (65)", "addrmap[i] = (66)", "addrmap[i] = (7)", "addrmap[i] = (716)", "addrmap[i] = (753)", "addrmap[i] = (8)", "addrmap[i] = (83)", "addrmap[i] = (9)", "addrmap[i] = (90)", "addrmap[i] = (92)", "addrmap[i] = (93)", "addrmap[i] = (adj)", "addrmap[i] = (cum_orig_line)", "addrmap[i] = (h)", "addrmap[i] = (in_consts)", "addrmap[i] = (last_line)", "addrmap[i] = (new_line)", "addrmap[i] = (nops)", "addrmap[i] = (opcode)", "addrmap[i] = (tabsiz)", "addrmap[i] = (tgt)", "addrmap[i] = (tgttgt)", "adj = (-1)", "adj = (0)", "adj = (1)", "adj = (10)", "adj = (100)", "adj = (101)", "adj = (102)", "adj = (103)", "adj = (104)", "adj = (107)", "adj = (11)", "adj = (110)", "adj = (111)", "adj = (112)", "adj = (113)", "adj = (114)", "adj = (115)", "adj = (116)", "adj = (119)", "adj = (12)", "adj = (120)", "adj = (121)", "adj = (122)", "adj = (132)", "adj = (134217728)", "adj = (143)", "adj = (144)", "adj = (15)", "adj = (19)", "adj = (2)", "adj = (20)", "adj = (22)", "adj = (23)", "adj = (24)", "adj = (25)", "adj = (255)", "adj = (256)", "adj = (26)", "adj = (27)", "adj = (3)", "adj = (32700)", "adj = (33554432)", "adj = (4)", "adj = (403)", "adj = (404)", "adj = (405)", "adj = (410)", "adj = (411)", "adj = (420)", "adj = (438)", "adj = (492)", "adj = (499)", "adj = (5)", "adj = (521)", "adj = (531)", "adj = (533)", "adj = (534)", "adj = (574)", "adj = (580)", "adj = (581)", "adj = (582)", "adj = (592)", "adj = (597)", "adj = (598)", "adj = (599)", "adj = (6)", "adj = (62)", "adj = (63)", "adj = (64)", "adj = (65)", "adj = (66)", "adj = (7)", "adj = (716)", "adj = (753)", "adj = (8)", "adj = (83)", "adj = (9)", "adj = (90)", "adj = (92)", "adj = (93)", "adj = (adj)", "adj = (cum_orig_line)", "adj = (h)", "adj = (in_consts)", "adj = (last_line)", "adj = (new_line)", "adj = (nops)", "adj = (opcode)", "adj = (tabsiz)", "adj = (tgt)", "adj = (tgttgt)", "blocks = (blocks)", "blocks = markblocks((codestr), codelen)", "blocks = markblocks((lineno), codelen)", "code = (code)", "code = (consts)", "code = (lineno_obj)", "code = (names)", "codelen = (-1)", "codelen = (0)", "codelen = (1)", "codelen = (10)", "codelen = (100)", "codelen = (101)", "codelen = (102)", "codelen = (103)", "codelen = (104)", "codelen = (107)", "codelen = (11)", "codelen = (110)", "codelen = (111)", "codelen = (112)", "codelen = (113)", "codelen = (114)", "codelen = (115)", "codelen = (116)", "codelen = (119)", "codelen = (12)", "codelen = (120)", "codelen = (121)", "codelen = (122)", "codelen = (132)", "codelen = (134217728)", "codelen = (143)", "codelen = (144)", "codelen = (15)", "codelen = (19)", "codelen = (2)", "codelen = (20)", "codelen = (22)", "codelen = (23)", "codelen = (24)", "codelen = (25)", "codelen = (255)", "codelen = (256)", "codelen = (26)", "codelen = (27)", "codelen = (3)", "codelen = (32700)", "codelen = (33554432)", "codelen = (4)", "codelen = (403)", "codelen = (404)", "codelen = (405)", "codelen = (410)", "codelen = (411)", "codelen = (420)", "codelen = (438)", "codelen = (492)", "codelen = (499)", "codelen = (5)", "codelen = (521)", "codelen = (531)", "codelen = (533)", "codelen = (534)", "codelen = (574)", "codelen = (580)", "codelen = (581)", "codelen = (582)", "codelen = (592)", "codelen = (597)", "codelen = (598)", "codelen = (599)", "codelen = (6)", "codelen = (62)", "codelen = (63)", "codelen = (64)", "codelen = (65)", "codelen = (66)", "codelen = (7)", "codelen = (716)", "codelen = (753)", "codelen = (8)", "codelen = (83)", "codelen = (9)", "codelen = (90)", "codelen = (92)", "codelen = (93)", "codelen = (codelen)", "codelen = (const_stack_size)", "codelen = (const_stack_top)", "codelen = (i)", "codelen = (j)", "codestr = (codestr)", "codestr = (lineno)", "codestr[i] = (-1)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "cum_orig_line = (-1)", "cum_orig_line = (0)", "cum_orig_line = (1)", "cum_orig_line = (10)", "cum_orig_line = (100)", "cum_orig_line = (101)", "cum_orig_line = (102)", "cum_orig_line = (103)", "cum_orig_line = (104)", "cum_orig_line = (107)", "cum_orig_line = (11)", "cum_orig_line = (110)", "cum_orig_line = (111)", "cum_orig_line = (112)", "cum_orig_line = (113)", "cum_orig_line = (114)", "cum_orig_line = (115)", "cum_orig_line = (116)", "cum_orig_line = (119)", "cum_orig_line = (12)", "cum_orig_line = (120)", "cum_orig_line = (121)", "cum_orig_line = (122)", "cum_orig_line = (132)", "cum_orig_line = (134217728)", "cum_orig_line = (143)", "cum_orig_line = (144)", "cum_orig_line = (15)", "cum_orig_line = (19)", "cum_orig_line = (2)", "cum_orig_line = (20)", "cum_orig_line = (22)", "cum_orig_line = (23)", "cum_orig_line = (24)", "cum_orig_line = (25)", "cum_orig_line = (255)", "cum_orig_line = (256)", "cum_orig_line = (26)", "cum_orig_line = (27)", "cum_orig_line = (3)", "cum_orig_line = (32700)", "cum_orig_line = (33554432)", "cum_orig_line = (4)", "cum_orig_line = (403)", "cum_orig_line = (404)", "cum_orig_line = (405)", "cum_orig_line = (410)", "cum_orig_line = (411)", "cum_orig_line = (420)", "cum_orig_line = (438)", "cum_orig_line = (492)", "cum_orig_line = (499)", "cum_orig_line = (5)", "cum_orig_line = (521)", "cum_orig_line = (531)", "cum_orig_line = (533)", "cum_orig_line = (534)", "cum_orig_line = (574)", "cum_orig_line = (580)", "cum_orig_line = (581)", "cum_orig_line = (582)", "cum_orig_line = (592)", "cum_orig_line = (597)", "cum_orig_line = (598)", "cum_orig_line = (599)", "cum_orig_line = (6)", "cum_orig_line = (62)", "cum_orig_line = (63)", "cum_orig_line = (64)", "cum_orig_line = (65)", "cum_orig_line = (66)", "cum_orig_line = (7)", "cum_orig_line = (716)", "cum_orig_line = (753)", "cum_orig_line = (8)", "cum_orig_line = (83)", "cum_orig_line = (9)", "cum_orig_line = (90)", "cum_orig_line = (92)", "cum_orig_line = (93)", "cum_orig_line = (adj)", "cum_orig_line = (cum_orig_line)", "cum_orig_line = (h)", "cum_orig_line = (in_consts)", "cum_orig_line = (last_line)", "cum_orig_line = (new_line)", "cum_orig_line = (nops)", "cum_orig_line = (opcode)", "cum_orig_line = (tabsiz)", "cum_orig_line = (tgt)", "cum_orig_line = (tgttgt)", "h = ((const_stack_top >= j - 1) ? (load_const_stack)[const_stack_top - j + 1] : -1)", "h = (-1)", "h = (0)", "h = (1)", "h = (10)", "h = (100)", "h = (101)", "h = (102)", "h = (103)", "h = (104)", "h = (107)", "h = (11)", "h = (110)", "h = (111)", "h = (112)", "h = (113)", "h = (114)", "h = (115)", "h = (116)", "h = (119)", "h = (12)", "h = (120)", "h = (121)", "h = (122)", "h = (132)", "h = (134217728)", "h = (143)", "h = (144)", "h = (15)", "h = (19)", "h = (2)", "h = (20)", "h = (22)", "h = (23)", "h = (24)", "h = (25)", "h = (255)", "h = (256)", "h = (26)", "h = (27)", "h = (3)", "h = (32700)", "h = (33554432)", "h = (4)", "h = (403)", "h = (404)", "h = (405)", "h = (410)", "h = (411)", "h = (420)", "h = (438)", "h = (492)", "h = (499)", "h = (5)", "h = (521)", "h = (531)", "h = (533)", "h = (534)", "h = (574)", "h = (580)", "h = (581)", "h = (582)", "h = (592)", "h = (597)", "h = (598)", "h = (599)", "h = (6)", "h = (62)", "h = (63)", "h = (64)", "h = (65)", "h = (66)", "h = (7)", "h = (716)", "h = (753)", "h = (8)", "h = (83)", "h = (9)", "h = (90)", "h = (92)", "h = (93)", "h = (adj)", "h = (cum_orig_line)", "h = (h)", "h = (in_consts)", "h = (last_line)", "h = (new_line)", "h = (nops)", "h = (opcode)", "h = (tabsiz)", "h = (tgt)", "h = (tgttgt)", "h = load_global((codestr), i, name, consts)", "h = load_global((lineno), i, name, consts)", "h = load_global(codestr, i, (name), consts)", "h = load_global(codestr, i, name, (code))", "h = load_global(codestr, i, name, (consts))", "h = load_global(codestr, i, name, (lineno_obj))", "h = load_global(codestr, i, name, (names))", "in_consts = (-1)", "in_consts = (0)", "in_consts = (1)", "in_consts = (10)", "in_consts = (100)", "in_consts = (101)", "in_consts = (102)", "in_consts = (103)", "in_consts = (104)", "in_consts = (107)", "in_consts = (11)", "in_consts = (110)", "in_consts = (111)", "in_consts = (112)", "in_consts = (113)", "in_consts = (114)", "in_consts = (115)", "in_consts = (116)", "in_consts = (119)", "in_consts = (12)", "in_consts = (120)", "in_consts = (121)", "in_consts = (122)", "in_consts = (132)", "in_consts = (134217728)", "in_consts = (143)", "in_consts = (144)", "in_consts = (15)", "in_consts = (19)", "in_consts = (2)", "in_consts = (20)", "in_consts = (22)", "in_consts = (23)", "in_consts = (24)", "in_consts = (25)", "in_consts = (255)", "in_consts = (256)", "in_consts = (26)", "in_consts = (27)", "in_consts = (3)", "in_consts = (32700)", "in_consts = (33554432)", "in_consts = (4)", "in_consts = (403)", "in_consts = (404)", "in_consts = (405)", "in_consts = (410)", "in_consts = (411)", "in_consts = (420)", "in_consts = (438)", "in_consts = (492)", "in_consts = (499)", "in_consts = (5)", "in_consts = (521)", "in_consts = (531)", "in_consts = (533)", "in_consts = (534)", "in_consts = (574)", "in_consts = (580)", "in_consts = (581)", "in_consts = (582)", "in_consts = (592)", "in_consts = (597)", "in_consts = (598)", "in_consts = (599)", "in_consts = (6)", "in_consts = (62)", "in_consts = (63)", "in_consts = (64)", "in_consts = (65)", "in_consts = (66)", "in_consts = (7)", "in_consts = (716)", "in_consts = (753)", "in_consts = (8)", "in_consts = (83)", "in_consts = (9)", "in_consts = (90)", "in_consts = (92)", "in_consts = (93)", "in_consts = (adj)", "in_consts = (cum_orig_line)", "in_consts = (h)", "in_consts = (in_consts)", "in_consts = (last_line)", "in_consts = (new_line)", "in_consts = (nops)", "in_consts = (opcode)", "in_consts = (tabsiz)", "in_consts = (tgt)", "in_consts = (tgttgt)", "j = (-1)", "j = (0)", "j = (1)", "j = (10)", "j = (100)", "j = (101)", "j = (102)", "j = (103)", "j = (104)", "j = (107)", "j = (11)", "j = (110)", "j = (111)", "j = (112)", "j = (113)", "j = (114)", "j = (115)", "j = (116)", "j = (119)", "j = (12)", "j = (120)", "j = (121)", "j = (122)", "j = (132)", "j = (134217728)", "j = (143)", "j = (144)", "j = (15)", "j = (19)", "j = (2)", "j = (20)", "j = (22)", "j = (23)", "j = (24)", "j = (25)", "j = (255)", "j = (256)", "j = (26)", "j = (27)", "j = (3)", "j = (32700)", "j = (33554432)", "j = (4)", "j = (403)", "j = (404)", "j = (405)", "j = (410)", "j = (411)", "j = (420)", "j = (438)", "j = (492)", "j = (499)", "j = (5)", "j = (521)", "j = (531)", "j = (533)", "j = (534)", "j = (574)", "j = (580)", "j = (581)", "j = (582)", "j = (592)", "j = (597)", "j = (598)", "j = (599)", "j = (6)", "j = (62)", "j = (63)", "j = (64)", "j = (65)", "j = (66)", "j = (7)", "j = (716)", "j = (753)", "j = (8)", "j = (83)", "j = (9)", "j = (90)", "j = (92)", "j = (93)", "j = (codelen)", "j = (codestr)[tgt]", "j = (const_stack_size)", "j = (const_stack_top)", "j = (i)", "j = (j)", "j = (lineno)[tgt]", "last_line = (-1)", "last_line = (0)", "last_line = (1)", "last_line = (10)", "last_line = (100)", "last_line = (101)", "last_line = (102)", "last_line = (103)", "last_line = (104)", "last_line = (107)", "last_line = (11)", "last_line = (110)", "last_line = (111)", "last_line = (112)", "last_line = (113)", "last_line = (114)", "last_line = (115)", "last_line = (116)", "last_line = (119)", "last_line = (12)", "last_line = (120)", "last_line = (121)", "last_line = (122)", "last_line = (132)", "last_line = (134217728)", "last_line = (143)", "last_line = (144)", "last_line = (15)", "last_line = (19)", "last_line = (2)", "last_line = (20)", "last_line = (22)", "last_line = (23)", "last_line = (24)", "last_line = (25)", "last_line = (255)", "last_line = (256)", "last_line = (26)", "last_line = (27)", "last_line = (3)", "last_line = (32700)", "last_line = (33554432)", "last_line = (4)", "last_line = (403)", "last_line = (404)", "last_line = (405)", "last_line = (410)", "last_line = (411)", "last_line = (420)", "last_line = (438)", "last_line = (492)", "last_line = (499)", "last_line = (5)", "last_line = (521)", "last_line = (531)", "last_line = (533)", "last_line = (534)", "last_line = (574)", "last_line = (580)", "last_line = (581)", "last_line = (582)", "last_line = (592)", "last_line = (597)", "last_line = (598)", "last_line = (599)", "last_line = (6)", "last_line = (62)", "last_line = (63)", "last_line = (64)", "last_line = (65)", "last_line = (66)", "last_line = (7)", "last_line = (716)", "last_line = (753)", "last_line = (8)", "last_line = (83)", "last_line = (9)", "last_line = (90)", "last_line = (92)", "last_line = (93)", "last_line = (adj)", "last_line = (cum_orig_line)", "last_line = (h)", "last_line = (in_consts)", "last_line = (last_line)", "last_line = (new_line)", "last_line = (nops)", "last_line = (opcode)", "last_line = (tabsiz)", "last_line = (tgt)", "last_line = (tgttgt)", "lineno = (codestr)", "lineno = (lineno)", "lineno[i] = (-1)", "lineno[i] = (0)", "lineno[i] = (1)", "lineno[i] = (10)", "lineno[i] = (100)", "lineno[i] = (101)", "lineno[i] = (102)", "lineno[i] = (103)", "lineno[i] = (104)", "lineno[i] = (107)", "lineno[i] = (11)", "lineno[i] = (110)", "lineno[i] = (111)", "lineno[i] = (112)", "lineno[i] = (113)", "lineno[i] = (114)", "lineno[i] = (115)", "lineno[i] = (116)", "lineno[i] = (119)", "lineno[i] = (12)", "lineno[i] = (120)", "lineno[i] = (121)", "lineno[i] = (122)", "lineno[i] = (132)", "lineno[i] = (134217728)", "lineno[i] = (143)", "lineno[i] = (144)", "lineno[i] = (15)", "lineno[i] = (19)", "lineno[i] = (2)", "lineno[i] = (20)", "lineno[i] = (22)", "lineno[i] = (23)", "lineno[i] = (24)", "lineno[i] = (25)", "lineno[i] = (255)", "lineno[i] = (256)", "lineno[i] = (26)", "lineno[i] = (27)", "lineno[i] = (3)", "lineno[i] = (32700)", "lineno[i] = (33554432)", "lineno[i] = (4)", "lineno[i] = (403)", "lineno[i] = (404)", "lineno[i] = (405)", "lineno[i] = (410)", "lineno[i] = (411)", "lineno[i] = (420)", "lineno[i] = (438)", "lineno[i] = (492)", "lineno[i] = (499)", "lineno[i] = (5)", "lineno[i] = (521)", "lineno[i] = (531)", "lineno[i] = (533)", "lineno[i] = (534)", "lineno[i] = (574)", "lineno[i] = (580)", "lineno[i] = (581)", "lineno[i] = (582)", "lineno[i] = (592)", "lineno[i] = (597)", "lineno[i] = (598)", "lineno[i] = (599)", "lineno[i] = (6)", "lineno[i] = (62)", "lineno[i] = (63)", "lineno[i] = (64)", "lineno[i] = (65)", "lineno[i] = (66)", "lineno[i] = (7)", "lineno[i] = (716)", "lineno[i] = (753)", "lineno[i] = (8)", "lineno[i] = (83)", "lineno[i] = (9)", "lineno[i] = (90)", "lineno[i] = (92)", "lineno[i] = (93)", "memset(&(codestr)[h], 9, i - h)", "memset(&(lineno)[h], 9, i - h)", "memset((codestr) + i + 1, 9, 2)", "memset((codestr) + i + 1, 9, 3)", "memset((codestr) + i + 1, 9, 4)", "memset((codestr) + i + 1, 9, 5)", "memset((codestr) + i + 2, 9, 4)", "memset((codestr) + i, 9, 6)", "memset((lineno) + i + 1, 9, 2)", "memset((lineno) + i + 1, 9, 3)", "memset((lineno) + i + 1, 9, 4)", "memset((lineno) + i + 1, 9, 5)", "memset((lineno) + i + 2, 9, 4)", "memset((lineno) + i, 9, 6)", "name = (name)", "new_line = (-1)", "new_line = (0)", "new_line = (1)", "new_line = (10)", "new_line = (100)", "new_line = (101)", "new_line = (102)", "new_line = (103)", "new_line = (104)", "new_line = (107)", "new_line = (11)", "new_line = (110)", "new_line = (111)", "new_line = (112)", "new_line = (113)", "new_line = (114)", "new_line = (115)", "new_line = (116)", "new_line = (119)", "new_line = (12)", "new_line = (120)", "new_line = (121)", "new_line = (122)", "new_line = (132)", "new_line = (134217728)", "new_line = (143)", "new_line = (144)", "new_line = (15)", "new_line = (19)", "new_line = (2)", "new_line = (20)", "new_line = (22)", "new_line = (23)", "new_line = (24)", "new_line = (25)", "new_line = (255)", "new_line = (256)", "new_line = (26)", "new_line = (27)", "new_line = (3)", "new_line = (32700)", "new_line = (33554432)", "new_line = (4)", "new_line = (403)", "new_line = (404)", "new_line = (405)", "new_line = (410)", "new_line = (411)", "new_line = (420)", "new_line = (438)", "new_line = (492)", "new_line = (499)", "new_line = (5)", "new_line = (521)", "new_line = (531)", "new_line = (533)", "new_line = (534)", "new_line = (574)", "new_line = (580)", "new_line = (581)", "new_line = (582)", "new_line = (592)", "new_line = (597)", "new_line = (598)", "new_line = (599)", "new_line = (6)", "new_line = (62)", "new_line = (63)", "new_line = (64)", "new_line = (65)", "new_line = (66)", "new_line = (7)", "new_line = (716)", "new_line = (753)", "new_line = (8)", "new_line = (83)", "new_line = (9)", "new_line = (90)", "new_line = (92)", "new_line = (93)", "new_line = (addrmap)[cum_orig_line]", "new_line = (adj)", "new_line = (cum_orig_line)", "new_line = (h)", "new_line = (in_consts)", "new_line = (last_line)", "new_line = (new_line)", "new_line = (nops)", "new_line = (opcode)", "new_line = (tabsiz)", "new_line = (tgt)", "new_line = (tgttgt)", "opcode = (-1)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (101)", "opcode = (102)", "opcode = (103)", "opcode = (104)", "opcode = (107)", "opcode = (11)", "opcode = (110)", "opcode = (111)", "opcode = (112)", "opcode = (113)", "opcode = (114)", "opcode = (115)", "opcode = (116)", "opcode = (119)", "opcode = (12)", "opcode = (120)", "opcode = (121)", "opcode = (122)", "opcode = (132)", "opcode = (134217728)", "opcode = (143)", "opcode = (144)", "opcode = (15)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (23)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (256)", "opcode = (26)", "opcode = (27)", "opcode = (3)", "opcode = (32700)", "opcode = (33554432)", "opcode = (4)", "opcode = (403)", "opcode = (404)", "opcode = (405)", "opcode = (410)", "opcode = (411)", "opcode = (420)", "opcode = (438)", "opcode = (492)", "opcode = (499)", "opcode = (5)", "opcode = (521)", "opcode = (531)", "opcode = (533)", "opcode = (534)", "opcode = (574)", "opcode = (580)", "opcode = (581)", "opcode = (582)", "opcode = (592)", "opcode = (597)", "opcode = (598)", "opcode = (599)", "opcode = (6)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (7)", "opcode = (716)", "opcode = (753)", "opcode = (8)", "opcode = (83)", "opcode = (9)", "opcode = (90)", "opcode = (92)", "opcode = (93)", "opcode = (adj)", "opcode = (codestr)[i]", "opcode = (cum_orig_line)", "opcode = (h)", "opcode = (in_consts)", "opcode = (last_line)", "opcode = (lineno)[i]", "opcode = (new_line)", "opcode = (nops)", "opcode = (opcode)", "opcode = (tabsiz)", "opcode = (tgt)", "opcode = (tgttgt)", "tabsiz = (-1)", "tabsiz = (0)", "tabsiz = (1)", "tabsiz = (10)", "tabsiz = (100)", "tabsiz = (101)", "tabsiz = (102)", "tabsiz = (103)", "tabsiz = (104)", "tabsiz = (107)", "tabsiz = (11)", "tabsiz = (110)", "tabsiz = (111)", "tabsiz = (112)", "tabsiz = (113)", "tabsiz = (114)", "tabsiz = (115)", "tabsiz = (116)", "tabsiz = (119)", "tabsiz = (12)", "tabsiz = (120)", "tabsiz = (121)", "tabsiz = (122)", "tabsiz = (132)", "tabsiz = (134217728)", "tabsiz = (143)", "tabsiz = (144)", "tabsiz = (15)", "tabsiz = (19)", "tabsiz = (2)", "tabsiz = (20)", "tabsiz = (22)", "tabsiz = (23)", "tabsiz = (24)", "tabsiz = (25)", "tabsiz = (255)", "tabsiz = (256)", "tabsiz = (26)", "tabsiz = (27)", "tabsiz = (3)", "tabsiz = (32700)", "tabsiz = (33554432)", "tabsiz = (4)", "tabsiz = (403)", "tabsiz = (404)", "tabsiz = (405)", "tabsiz = (410)", "tabsiz = (411)", "tabsiz = (420)", "tabsiz = (438)", "tabsiz = (492)", "tabsiz = (499)", "tabsiz = (5)", "tabsiz = (521)", "tabsiz = (531)", "tabsiz = (533)", "tabsiz = (534)", "tabsiz = (574)", "tabsiz = (580)", "tabsiz = (581)", "tabsiz = (582)", "tabsiz = (592)", "tabsiz = (597)", "tabsiz = (598)", "tabsiz = (599)", "tabsiz = (6)", "tabsiz = (62)", "tabsiz = (63)", "tabsiz = (64)", "tabsiz = (65)", "tabsiz = (66)", "tabsiz = (7)", "tabsiz = (716)", "tabsiz = (753)", "tabsiz = (8)", "tabsiz = (83)", "tabsiz = (9)", "tabsiz = (90)", "tabsiz = (92)", "tabsiz = (93)", "tabsiz = (adj)", "tabsiz = (cum_orig_line)", "tabsiz = (h)", "tabsiz = (in_consts)", "tabsiz = (last_line)", "tabsiz = (new_line)", "tabsiz = (nops)", "tabsiz = (opcode)", "tabsiz = (tabsiz)", "tabsiz = (tgt)", "tabsiz = (tgttgt)", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((codestr)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((lineno)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (codestr)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (lineno)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (codestr)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (lineno)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (codestr)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (lineno)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (codestr)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (lineno)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (codestr)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (lineno)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (-1)", "tgttgt = (0)", "tgttgt = (1)", "tgttgt = (10)", "tgttgt = (100)", "tgttgt = (101)", "tgttgt = (102)", "tgttgt = (103)", "tgttgt = (104)", "tgttgt = (107)", "tgttgt = (11)", "tgttgt = (110)", "tgttgt = (111)", "tgttgt = (112)", "tgttgt = (113)", "tgttgt = (114)", "tgttgt = (115)", "tgttgt = (116)", "tgttgt = (119)", "tgttgt = (12)", "tgttgt = (120)", "tgttgt = (121)", "tgttgt = (122)", "tgttgt = (132)", "tgttgt = (134217728)", "tgttgt = (143)", "tgttgt = (144)", "tgttgt = (15)", "tgttgt = (19)", "tgttgt = (2)", "tgttgt = (20)", "tgttgt = (22)", "tgttgt = (23)", "tgttgt = (24)", "tgttgt = (25)", "tgttgt = (255)", "tgttgt = (256)", "tgttgt = (26)", "tgttgt = (27)", "tgttgt = (3)", "tgttgt = (32700)", "tgttgt = (33554432)", "tgttgt = (4)", "tgttgt = (403)", "tgttgt = (404)", "tgttgt = (405)", "tgttgt = (410)", "tgttgt = (411)", "tgttgt = (420)", "tgttgt = (438)", "tgttgt = (492)", "tgttgt = (499)", "tgttgt = (5)", "tgttgt = (521)", "tgttgt = (531)", "tgttgt = (533)", "tgttgt = (534)", "tgttgt = (574)", "tgttgt = (580)", "tgttgt = (581)", "tgttgt = (582)", "tgttgt = (592)", "tgttgt = (597)", "tgttgt = (598)", "tgttgt = (599)", "tgttgt = (6)", "tgttgt = (62)", "tgttgt = (63)", "tgttgt = (64)", "tgttgt = (65)", "tgttgt = (66)", "tgttgt = (7)", "tgttgt = (716)", "tgttgt = (753)", "tgttgt = (8)", "tgttgt = (83)", "tgttgt = (9)", "tgttgt = (90)", "tgttgt = (92)", "tgttgt = (93)", "tgttgt = (adj)", "tgttgt = (cum_orig_line)", "tgttgt = (h)", "tgttgt = (in_consts)", "tgttgt = (last_line)", "tgttgt = (new_line)", "tgttgt = (nops)", "tgttgt = (opcode)", "tgttgt = (tabsiz)", "tgttgt = (tgt)", "tgttgt = (tgttgt)", "((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0))\n        ;\n    else\n        __assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 1)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 1))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 2)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 2))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < j)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < j))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((h + nops == codelen) ? 1 : 0) , __extension__ ({\n    if (h + nops == codelen)\n        ;\n    else\n        __assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((new_line - last_line < 255) ? 1 : 0) , __extension__ ({\n    if (new_line - last_line < 255)\n        ;\n    else\n        __assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "PyMem_Free(addrmap)", "PyMem_Free(blocks)", "PyMem_Free(codestr)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "addrmap = (int *)PyMem_Malloc(codelen * sizeof(int))", "addrmap[i] = i - nops", "adj = (((opcode) >= 90) ? 3 : 1)", "blocks = markblocks(codestr, codelen)", "code = PyBytes_FromStringAndSize((char *)codestr, h)", "codelen = (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(code))->ob_size))", "codestr = (unsigned char *)PyMem_Malloc(codelen)", "codestr = (unsigned char *)memcpy(codestr, (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(code))->ob_sval)), codelen)", "codestr[i] = 114", "codestr[i] = 115", "codestr[i] = 2", "codestr[i] = 3", "codestr[i] = 83", "codestr[i] = j", "codestr[i] = opcode", "cum_orig_line = 0", "h = ((const_stack_top >= j - 1) ? load_const_stack[const_stack_top - j + 1] : -1)", "h = load_global(codestr, i, name, consts)", "in_consts = 0", "j = ((int)((codestr[i + 1 + 2] << 8) + codestr[i + 1 + 1]))", "j = ((int)((codestr[i + 2] << 8) + codestr[i + 1]))", "j = codestr[tgt]", "last_line = 0", "last_line = new_line", "lineno = (unsigned char *)(((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(lineno_obj))->ob_sval))", "lineno[i] = ((unsigned char)(new_line - last_line))", "memset(&codestr[h], 9, i - h)", "memset(codestr + i + 1, 9, 2)", "memset(codestr + i + 1, 9, 3)", "memset(codestr + i + 1, 9, 4)", "memset(codestr + i + 1, 9, 5)", "memset(codestr + i + 2, 9, 4)", "memset(codestr + i, 9, 6)", "name = _PyUnicode_AsString((((PyTupleObject *)(names))->ob_item[j]))", "new_line = addrmap[cum_orig_line]", "nops++", "opcode = 113", "opcode = codestr[i]", "tabsiz = (((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(lineno_obj))->ob_size))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "if (__is_neg(\"\", \"L550\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    break;\n", "if (__is_neg(\"\", \"L550\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitError;\n", "if (__is_neg(\"\", \"L550\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitUnchanged;\n", "if (__is_neg(\"\", \"L550\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto reoptimize_current;\n", "if (__is_neg(\"\", \"L550\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	2,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	3,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	4,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	5,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	6,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	7,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	8,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	9,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	10,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	11,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	12,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	13,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	14,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	15,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	16,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	17,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	18,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	19,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	20,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	21,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	22,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	23,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	24,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	25,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	26,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	27,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	28,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	29,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	30,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	31,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	32,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	33,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	34,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	35,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	36,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	37,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	38,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	39,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	40,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	41,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	42,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	43,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	44,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	45,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	46,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	47,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	48,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	49,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	50,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	51,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	52,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	53,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	54,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	55,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	56,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	57,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	58,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	59,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	60,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	61,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	62,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	63,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	64,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	65,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	66,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	67,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	68,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	69,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	70,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	71,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	72,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	73,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	74,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	75,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	76,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	77,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	78,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	79,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	80,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	81,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	82,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	83,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	84,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	85,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	86,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	87,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	88,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	89,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	90,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	91,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	92,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	93,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	94,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	95,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	96,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	97,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	98,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	99,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	100,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	101,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	102,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	103,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	104,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	105,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	106,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	107,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	108,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	109,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	110,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	111,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	112,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	113,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	114,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	115,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	116,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	117,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	118,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	119,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	120,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	121,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	122,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	123,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	124,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	125,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	126,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	127,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	128,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	129,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	130,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	131,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	132,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	133,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	134,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	135,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	136,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	137,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	138,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	139,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	140,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	141,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	142,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	143,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	144,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	145,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	146,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	147,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	148,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	149,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	150,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	151,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	152,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	153,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	154,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	155,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	156,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	157,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	158,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	159,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	160,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	161,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	162,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	163,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	164,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	165,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	166,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	167,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	168,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	169,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	170,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	171,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	172,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	173,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	174,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	175,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	176,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	177,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	178,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	179,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	180,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	181,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	182,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	183,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	184,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	185,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	186,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	187,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	188,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	189,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	190,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	191,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	192,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	193,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	194,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	195,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	196,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	197,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	198,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	199,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	200,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	201,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	202,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	203,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	204,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	205,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	206,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	207,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	208,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	209,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	210,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	211,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	212,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	213,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	214,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	215,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	216,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	217,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	218,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	219,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	220,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	221,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	222,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	223,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	224,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	225,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	226,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	227,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	228,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	229,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	230,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	231,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	232,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	233,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	234,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	235,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	236,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	237,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	238,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	239,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	240,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	241,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	242,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	243,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	244,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	245,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	246,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	247,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	248,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	249,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	250,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	251,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	252,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	253,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	254,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	255,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	256,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	257,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	258,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	259,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	260,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	261,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	262,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	263,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	264,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	265,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	266,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	267,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	268,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	269,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	270,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	271,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	272,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	273,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	274,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	275,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	276,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	277,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	278,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	279,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	280,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	281,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	282,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	283,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	284,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	285,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	286,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	287,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	288,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	289,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	290,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	291,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	292,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	293,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	294,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	295,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	296,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	297,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	298,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	299,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	300,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	301,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	302,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	303,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	304,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	305,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	306,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	307,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	308,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	309,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	310,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	311,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	312,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	313,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	314,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	315,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	316,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	317,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	318,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	319,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	320,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	321,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	322,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	323,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	324,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	325,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	326,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	327,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	328,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	329,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	330,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	331,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	332,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	333,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	334,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	335,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	336,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	337,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	338,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	339,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	340,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	341,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	342,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	343,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	344,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	345,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	346,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	347,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	348,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	349,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	350,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	351,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	352,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	353,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	354,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	355,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	356,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	357,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	358,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	359,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	360,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	361,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	362,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	363,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	364,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	365,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	366,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	367,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	368,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	369,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	370,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	371,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	372,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	373,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	374,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	375,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	376,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	377,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	378,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	379,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	380,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	381,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	382,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	383,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	384,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	385,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	386,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	387,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	388,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	389,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	390,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	391,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	392,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	393,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	394,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	395,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	396,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	397,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	398,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	399,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	400,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	401,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	402,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	403,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	404,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	405,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	406,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	407,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	408,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	409,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	410,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	411,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	412,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	413,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	414,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	415,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	416,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	417,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	418,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	419,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	420,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	421,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	422,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	423,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	424,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	425,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	426,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	427,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	428,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	429,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	430,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	431,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	432,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	433,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	434,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	435,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	436,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	437,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	438,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	439,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	440,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	441,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	442,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	443,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	444,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	445,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	446,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	447,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	448,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	449,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	450,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	451,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	452,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	453,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	454,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	455,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	456,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	457,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	458,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	459,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	460,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	461,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	462,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	463,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	464,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	465,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	466,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	467,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	468,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	469,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	470,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	471,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	472,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	473,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	474,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	475,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	476,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	477,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	478,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	479,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	480,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	481,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	482,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	483,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	484,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	485,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	486,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	487,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	488,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	489,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	490,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	491,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	492,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	493,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	494,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	495,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	496,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	497,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	498,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	499,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	500,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	501,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	502,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	503,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	504,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	505,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	506,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	507,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	508,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	509,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	510,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	511,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	512,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	513,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	514,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	515,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	516,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	517,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	518,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	519,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	520,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	521,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	522,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	523,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	524,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	525,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	526,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	527,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	528,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	529,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	530,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	531,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	532,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	533,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	534,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	535,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	536,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	537,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	538,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	539,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	540,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	541,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	542,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	543,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	544,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	545,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	546,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	547,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	548,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	549,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	550,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	551,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	552,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	553,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	554,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	555,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	556,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	557,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	558,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	559,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	560,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	561,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	562,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	563,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	564,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	565,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	566,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	567,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	568,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	569,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	570,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	571,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	572,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	573,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	574,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	575,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	576,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	577,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	578,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	579,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	580,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	581,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	582,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	583,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	584,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	585,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	586,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	587,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	588,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	589,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	590,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	591,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	592,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	593,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	594,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	595,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	596,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	597,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	598,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	599,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	600,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	601,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	602,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	603,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	604,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	605,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	606,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	607,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	608,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	609,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	610,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	611,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	612,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	613,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	614,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	615,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	616,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	617,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	618,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	619,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	620,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	621,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	622,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	623,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	624,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	625,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	626,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	627,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	628,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	629,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	630,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	631,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	632,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	633,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	634,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	635,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	636,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	637,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	638,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	639,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	640,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	641,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	642,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	643,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	644,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	645,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	646,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	647,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	648,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	649,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	650,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	651,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	652,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	653,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	654,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	655,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	656,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	657,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	658,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	659,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	660,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	661,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	662,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	663,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	664,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	665,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	666,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	667,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	668,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	669,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	670,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	671,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	672,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	673,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	674,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	675,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	676,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	677,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	678,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	679,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	680,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	681,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	682,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	683,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	684,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	685,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	686,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	687,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	688,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	689,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	690,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	691,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	692,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	693,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	694,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	695,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	696,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	697,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	698,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	699,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	700,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	701,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	702,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	703,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	704,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	705,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	706,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	707,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	708,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	709,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	710,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	711,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	712,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	713,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	714,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	715,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	716,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	717,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	718,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	719,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	720,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	721,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	722,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	723,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	724,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	725,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	726,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	727,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	728,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	729,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	730,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	731,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	732,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	733,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	734,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	735,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	736,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	737,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	738,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	739,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	740,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	741,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	742,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	743,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	744,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	745,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	746,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	747,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	748,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	749,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	750,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	751,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	752,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	753,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	754,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	755,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	756,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	757,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	758,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	759,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	760,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	761,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	762,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	763,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	764,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	765,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	766,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	767,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	768,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	769,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	770,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	771,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	772,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	773,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	774,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	775,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	776,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	777,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	778,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	779,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	780,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	781,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	782,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	783,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	784,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	785,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	786,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	787,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	788,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	789,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	790,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	791,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	792,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	793,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	794,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	795,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	796,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	797,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	798,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	799,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	800,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	801,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	802,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	803,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	804,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	805,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	806,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	807,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	808,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	809,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	810,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	811,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	812,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	813,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	814,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	815,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	816,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	817,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	818,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	819,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	820,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	821,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	822,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	823,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	824,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	825,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	826,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	827,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	828,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	829,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	830,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	831,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	832,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	833,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	834,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	835,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	836,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	837,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	838,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	839,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	840,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	841,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	842,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	843,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	844,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	845,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	846,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	847,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	848,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	849,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	850,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	851,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	852,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	853,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	854,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	855,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	856,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	857,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	858,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	859,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	860,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	861,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	862,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	863,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	864,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	865,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	866,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	867,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	868,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	869,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	870,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	871,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	872,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	873,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	874,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	875,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	876,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	877,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	878,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	879,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	880,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	881,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	882,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	883,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	884,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	885,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	886,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	887,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	888,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	889,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	890,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	891,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	892,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	893,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	894,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	895,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	896,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	897,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	898,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	899,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	900,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	901,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	902,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	903,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	904,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	905,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	906,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	907,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	908,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	909,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	910,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	911,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	912,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	913,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	914,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	915,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	916,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	917,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	918,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	919,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	920,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	921,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	922,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	923,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	924,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	925,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	926,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	927,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	928,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	929,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	930,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	931,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	932,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	933,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	934,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	935,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	936,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	937,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	938,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	939,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	940,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	941,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	942,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	943,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	944,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	945,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	946,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	947,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	948,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	949,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	950,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	951,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	952,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	953,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	954,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	955,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	956,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	957,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	958,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	959,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	960,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	961,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	962,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	963,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	964,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	965,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	966,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	967,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	968,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	969,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	970,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	971,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	972,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	973,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	974,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	975,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	976,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	977,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	978,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	979,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	980,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	981,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	982,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	983,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	984,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	985,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	986,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	987,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	988,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	989,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	990,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	991,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	992,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	993,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	994,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	995,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	996,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	997,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	998,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	999,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1000,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1001,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1002,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1003,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1004,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1005,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1006,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1007,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1008,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1009,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1010,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1011,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1012,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1013,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1014,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1015,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1016,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1017,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1018,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1019,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1020,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1021,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1022,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1023,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1024,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1025,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1026,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1027,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1028,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1029,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1030,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1031,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1032,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1033,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1034,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1035,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1036,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1037,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1038,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1039,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1040,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1041,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1042,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1043,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1044,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1045,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1046,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1047,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1048,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1049,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1050,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1051,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1052,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1053,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1054,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1055,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1056,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1057,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1058,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1059,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1060,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1061,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1062,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1063,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1064,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1065,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1066,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1067,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1068,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1069,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1070,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1071,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1072,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1073,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1074,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1075,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1076,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1077,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1078,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1079,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1080,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1081,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1082,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1083,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1084,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1085,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1086,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1087,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1088,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1089,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1090,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1091,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1092,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1093,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1094,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1095,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1096,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1097,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1098,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1099,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1100,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1101,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1102,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1103,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1104,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1105,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1106,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1107,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1108,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1109,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1110,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1111,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1112,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1113,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1114,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1115,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1116,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1117,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1118,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1119,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1120,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1121,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1122,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1123,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1124,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1125,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1126,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1127,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1128,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1129,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1130,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1131,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1132,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1133,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1134,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1135,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1136,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1137,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1138,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1139,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1140,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1141,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1142,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1143,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1144,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1145,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1146,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1147,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1148,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1149,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1150,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1151,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1152,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1153,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1154,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1155,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1156,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1157,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1158,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1159,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1160,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1161,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1162,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1163,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1164,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1165,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1166,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1167,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1168,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1169,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1170,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1171,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1172,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1173,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1174,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1175,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1176,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1177,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1178,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1179,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1180,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1181,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1182,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1183,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1184,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1185,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1186,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1187,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1188,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1189,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1190,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1191,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1192,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1193,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1194,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1195,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1196,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1197,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1198,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1199,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1200,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1201,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1202,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1203,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1204,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1205,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1206,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1207,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1208,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1209,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1210,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1211,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1212,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1213,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1214,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1215,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1216,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1217,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1218,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1219,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1220,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1221,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1222,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1223,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1224,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1225,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1226,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1227,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1228,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1229,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1230,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1231,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1232,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1233,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1234,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1235,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1236,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1237,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1238,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1239,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1240,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1241,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1242,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1243,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1244,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1245,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1246,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1247,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1248,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1249,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1250,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1251,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1252,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1253,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1254,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1255,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1256,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1257,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1258,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1259,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1260,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1261,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1262,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1263,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1264,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1265,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1266,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1267,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1268,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1269,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1270,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1271,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1272,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1273,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1274,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1275,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1276,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1277,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1278,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1279,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1280,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1281,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1282,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1283,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1284,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1285,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1286,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1287,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1288,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1289,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1290,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1291,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1292,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1293,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1294,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1295,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1296,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1297,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1298,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1299,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1300,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1301,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1302,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1303,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1304,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1305,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1306,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1307,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1308,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1309,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1310,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1311,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1312,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1313,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1314,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1315,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1316,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1317,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1318,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1319,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1320,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1321,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1322,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1323,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1324,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1325,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1326,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1327,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1328,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1329,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1330,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1331,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1332,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1333,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1334,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1335,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1336,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1337,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1338,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1339,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1340,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1341,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1342,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1343,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1344,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1345,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1346,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1347,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1348,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1349,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1350,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1351,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1352,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1353,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1354,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1355,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1356,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1357,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1358,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1359,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1360,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1361,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1362,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1363,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1364,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1365,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1366,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1367,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1368,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1369,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1370,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1371,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1372,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1373,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1374,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1375,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1376,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1377,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1378,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1379,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1380,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1381,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1382,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1383,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1384,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1385,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1386,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1387,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1388,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1389,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1390,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1391,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1392,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1393,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1394,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1395,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1396,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1397,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1398,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1399,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1400,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1401,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1402,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1403,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1404,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1405,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1406,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1407,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1408,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1409,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1410,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1411,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1412,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1413,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1414,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1415,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1416,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1417,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1418,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1419,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1420,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1421,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1422,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1423,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1424,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1425,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1426,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1427,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1428,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1429,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1430,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1431,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1432,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1433,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1434,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1435,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1436,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1437,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1438,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1439,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1440,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1441,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1442,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1443,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1444,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1445,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1446,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1447,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1448,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1449,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1450,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1451,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1452,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1453,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1454,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1455,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1456,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1457,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1458,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1459,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1460,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1461,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1462,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1463,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1464,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1465,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1466,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1467,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1468,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1469,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1470,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1471,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1472,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1473,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1474,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1475,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1476,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1477,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1478,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1479,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1480,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1481,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1482,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1483,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1484,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1485,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1486,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1487,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1488,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1489,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1490,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1491,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1492,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1493,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1494,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1495,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1496,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1497,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1498,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1499,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1500,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1501,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1502,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1503,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1504,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1505,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1506,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1507,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1508,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1509,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1510,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1511,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1512,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1513,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1514,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1515,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1516,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1517,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1518,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1519,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1520,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1521,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1522,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1523,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1524,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1525,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1526,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1527,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1528,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1529,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1530,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1531,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1532,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1533,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1534,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1535,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1536,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1537,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1538,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1539,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1540,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1541,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1542,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1543,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1544,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1545,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1546,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1547,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1548,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1549,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1550,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1551,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1552,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1553,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1554,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1555,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1556,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1557,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1558,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1559,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1560,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1561,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1562,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1563,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1564,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1565,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1566,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1567,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1568,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1569,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1570,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1571,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1572,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1573,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1574,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1575,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1576,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1577,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1578,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1579,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1580,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1581,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1582,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1583,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1584,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1585,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1586,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1587,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1588,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1589,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1590,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1591,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1592,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1593,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1594,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1595,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1596,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1597,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1598,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1599,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1600,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1601,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1602,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1603,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1604,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1605,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1606,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1607,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1608,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1609,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1610,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1611,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1612,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1613,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1614,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1615,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1616,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1617,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1618,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1619,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1620,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1621,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1622,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1623,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1624,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1625,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1626,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1627,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1628,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1629,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1630,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1631,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1632,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1633,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1634,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1635,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1636,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1637,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1638,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1639,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1640,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1641,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1642,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1643,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1644,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1645,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1646,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1647,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1648,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1649,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1650,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1651,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1652,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1653,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1654,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1655,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1656,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1657,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1658,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1659,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1660,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1661,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1662,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1663,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1664,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1665,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1666,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1667,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1668,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1669,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1670,
									"scores":	[-7.4676994933115726]
								}, {
									"case":	1671,
									"scores":	[-8.9240660683115731, -8.76671576131157, -9.09908521331157, -9.6827133283115732, -9.65962921331157, -9.357170923311573, -10.471906876311573, -9.357170923311573, -9.357170923311573, -9.09908521331157, -9.09908521331157, -9.09908521331157, -9.357170923311573, -9.9113628763115731, -9.09908521331157, -9.09908521331157, -8.58031521331157, -9.357170923311573, -9.9113628763115731, -9.357170923311573, -9.09908521331157, -9.9113628763115731, -9.09908521331157, -9.09908521331157, -9.09908521331157, -9.09908521331157, -9.09908521331157]
								}, {
									"case":	1672,
									"scores":	[-8.92306606831157, -8.76571576131157, -9.09808521331157, -9.68171332831157, -9.65862921331157, -9.35617092331157, -10.470906876311572, -9.35617092331157, -9.35617092331157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.35617092331157, -9.91036287631157, -9.09808521331157, -9.09808521331157, -8.57931521331157, -9.35617092331157, -9.91036287631157, -9.35617092331157, -9.09808521331157, -9.91036287631157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.09808521331157]
								}, {
									"case":	1673,
									"scores":	[-8.92306606831157, -8.76571576131157, -9.09808521331157, -9.68171332831157, -9.65862921331157, -9.35617092331157, -10.470906876311572, -9.35617092331157, -9.35617092331157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.35617092331157, -9.91036287631157, -9.09808521331157, -9.09808521331157, -8.57931521331157, -9.35617092331157, -9.91036287631157, -9.35617092331157, -9.09808521331157, -9.91036287631157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.09808521331157]
								}, {
									"case":	1674,
									"scores":	[-8.92306606831157, -8.76571576131157, -9.09808521331157, -9.68171332831157, -9.65862921331157, -9.35617092331157, -10.470906876311572, -9.35617092331157, -9.35617092331157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.35617092331157, -9.91036287631157, -9.09808521331157, -9.09808521331157, -8.57931521331157, -9.35617092331157, -9.91036287631157, -9.35617092331157, -9.09808521331157, -9.91036287631157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.09808521331157, -9.09808521331157]
								}, {
									"case":	1675,
									"scores":	[-8.92678443831157, -8.76943413131157, -9.10180358331157, -9.6854316983115734, -9.66234758331157, -9.3598892933115732, -10.474625246311573, -9.3598892933115732, -9.3598892933115732, -9.10180358331157, -9.10180358331157, -9.10180358331157, -9.3598892933115732, -9.9140812463115733, -9.10180358331157, -9.10180358331157, -8.58303358331157, -9.3598892933115732, -9.9140812463115733, -9.3598892933115732, -9.10180358331157, -9.9140812463115733, -9.10180358331157, -9.10180358331157, -9.10180358331157, -9.10180358331157, -9.10180358331157]
								}]
						}, {
							"switch":	36,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	550,
							"begin_column":	21,
							"end_line":	550,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L550\", 27, &(i), sizeof (i), &(codestr), sizeof (codestr), &(j), sizeof (j), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    codestr[i + 1] = 2;\n", "{\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2762568363115729, -6.7534475363115725, -7.6668336933115722, -7.6612769423115727, -8.21237769331157, -8.0887996933115733, -9.38987909331157, -8.0887996933115733, -8.0887996933115733, -7.6668336933115722, -7.6668336933115722, -7.6668336933115722, -8.0887996933115733, -8.8443350933115727, -7.6668336933115722, -7.6668336933115722, -7.4954438533115724, -8.0887996933115733, -8.8443350933115727, -8.0887996933115733, -7.6668336933115722, -8.8443350933115727, -7.6668336933115722, -7.6668336933115722, -7.6668336933115722, -7.6668336933115722, -7.6668336933115722]
								}, {
									"case":	2,
									"scores":	[-7.4676994933115726]
								}]
						}]
				}, {
					"line":	547,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [1671, 1672, 1673, 1674, 1675], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], [], [], [], [1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670], [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594], [], [], [], [], [], []],
							"begin_line":	548,
							"begin_column":	22,
							"end_line":	548,
							"end_column":	22,
							"patch_codes":	["memset(&((((PyObject *)(code))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->ob_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(code))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_call)))", "memset(&((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_del)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_free)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_init)))", "memset(&((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_members)))", "memset(&((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_name)))", "memset(&((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_new)))", "memset(&((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_print)))", "memset(&((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_str)))", "memset(&((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(code))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->ob_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->ob_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset)))", "memset(&((PyBytesObject *)(code))->ob_base, 0, sizeof (*(&((PyBytesObject *)(code))->ob_base)))", "memset(&((PyBytesObject *)(code))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(code))->ob_shash)))", "memset(&((PyBytesObject *)(code))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(code))->ob_sval)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_base)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_shash)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_sval)))", "memset(&((PyListObject *)(consts))->allocated, 0, sizeof (*(&((PyListObject *)(consts))->allocated)))", "memset(&((PyListObject *)(consts))->ob_base, 0, sizeof (*(&((PyListObject *)(consts))->ob_base)))", "memset(&((PyListObject *)(consts))->ob_item, 0, sizeof (*(&((PyListObject *)(consts))->ob_item)))", "memset(&((PyObject *)(code))->_ob_next, 0, sizeof (*(&((PyObject *)(code))->_ob_next)))", "memset(&((PyObject *)(code))->_ob_prev, 0, sizeof (*(&((PyObject *)(code))->_ob_prev)))", "memset(&((PyObject *)(code))->ob_refcnt, 0, sizeof (*(&((PyObject *)(code))->ob_refcnt)))", "memset(&((PyObject *)(code))->ob_type, 0, sizeof (*(&((PyObject *)(code))->ob_type)))", "memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_next)))", "memset(&((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_prev)))", "memset(&((PyObject *)(lineno_obj))->ob_refcnt, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_refcnt)))", "memset(&((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_type)))", "memset(&((PyTupleObject *)(names))->ob_base, 0, sizeof (*(&((PyTupleObject *)(names))->ob_base)))", "memset(&((PyTupleObject *)(names))->ob_item, 0, sizeof (*(&((PyTupleObject *)(names))->ob_item)))", "memset(&((PyVarObject *)(code))->ob_base, 0, sizeof (*(&((PyVarObject *)(code))->ob_base)))", "memset(&((PyVarObject *)(code))->ob_size, 0, sizeof (*(&((PyVarObject *)(code))->ob_size)))", "memset(&((PyVarObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_base)))", "memset(&((PyVarObject *)(lineno_obj))->ob_size, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_size)))", "memset(((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_base)))", "memset(((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_call)))", "memset(((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_del)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_free)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_init)))", "memset(((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_members)))", "memset(((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_name)))", "memset(((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_new)))", "memset(((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_print)))", "memset(((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_str)))", "memset(((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(((PyListObject *)(consts))->ob_item, 0, sizeof (*(((PyListObject *)(consts))->ob_item)))", "memset(((PyObject *)(code))->_ob_next, 0, sizeof (*(((PyObject *)(code))->_ob_next)))", "memset(((PyObject *)(code))->_ob_prev, 0, sizeof (*(((PyObject *)(code))->_ob_prev)))", "memset(((PyObject *)(code))->ob_type, 0, sizeof (*(((PyObject *)(code))->ob_type)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "memset(((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_next)))", "memset(((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_prev)))", "memset(((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(((PyObject *)(lineno_obj))->ob_type)))", "PyMem_Free((addrmap))", "PyMem_Free((blocks))", "PyMem_Free((codestr))", "PyMem_Free((lineno))", "addrmap = (addrmap)", "addrmap[i] = (-1)", "addrmap[i] = (0)", "addrmap[i] = (1)", "addrmap[i] = (10)", "addrmap[i] = (100)", "addrmap[i] = (101)", "addrmap[i] = (102)", "addrmap[i] = (103)", "addrmap[i] = (104)", "addrmap[i] = (107)", "addrmap[i] = (11)", "addrmap[i] = (110)", "addrmap[i] = (111)", "addrmap[i] = (112)", "addrmap[i] = (113)", "addrmap[i] = (114)", "addrmap[i] = (115)", "addrmap[i] = (116)", "addrmap[i] = (119)", "addrmap[i] = (12)", "addrmap[i] = (120)", "addrmap[i] = (121)", "addrmap[i] = (122)", "addrmap[i] = (132)", "addrmap[i] = (134217728)", "addrmap[i] = (143)", "addrmap[i] = (144)", "addrmap[i] = (15)", "addrmap[i] = (19)", "addrmap[i] = (2)", "addrmap[i] = (20)", "addrmap[i] = (22)", "addrmap[i] = (23)", "addrmap[i] = (24)", "addrmap[i] = (25)", "addrmap[i] = (255)", "addrmap[i] = (256)", "addrmap[i] = (26)", "addrmap[i] = (27)", "addrmap[i] = (3)", "addrmap[i] = (32700)", "addrmap[i] = (33554432)", "addrmap[i] = (4)", "addrmap[i] = (403)", "addrmap[i] = (404)", "addrmap[i] = (405)", "addrmap[i] = (410)", "addrmap[i] = (411)", "addrmap[i] = (420)", "addrmap[i] = (438)", "addrmap[i] = (492)", "addrmap[i] = (499)", "addrmap[i] = (5)", "addrmap[i] = (521)", "addrmap[i] = (531)", "addrmap[i] = (533)", "addrmap[i] = (534)", "addrmap[i] = (574)", "addrmap[i] = (580)", "addrmap[i] = (581)", "addrmap[i] = (582)", "addrmap[i] = (592)", "addrmap[i] = (597)", "addrmap[i] = (598)", "addrmap[i] = (599)", "addrmap[i] = (6)", "addrmap[i] = (62)", "addrmap[i] = (63)", "addrmap[i] = (64)", "addrmap[i] = (65)", "addrmap[i] = (66)", "addrmap[i] = (7)", "addrmap[i] = (716)", "addrmap[i] = (753)", "addrmap[i] = (8)", "addrmap[i] = (83)", "addrmap[i] = (9)", "addrmap[i] = (90)", "addrmap[i] = (92)", "addrmap[i] = (93)", "addrmap[i] = (adj)", "addrmap[i] = (cum_orig_line)", "addrmap[i] = (h)", "addrmap[i] = (in_consts)", "addrmap[i] = (last_line)", "addrmap[i] = (new_line)", "addrmap[i] = (nops)", "addrmap[i] = (opcode)", "addrmap[i] = (tabsiz)", "addrmap[i] = (tgt)", "addrmap[i] = (tgttgt)", "adj = (-1)", "adj = (0)", "adj = (1)", "adj = (10)", "adj = (100)", "adj = (101)", "adj = (102)", "adj = (103)", "adj = (104)", "adj = (107)", "adj = (11)", "adj = (110)", "adj = (111)", "adj = (112)", "adj = (113)", "adj = (114)", "adj = (115)", "adj = (116)", "adj = (119)", "adj = (12)", "adj = (120)", "adj = (121)", "adj = (122)", "adj = (132)", "adj = (134217728)", "adj = (143)", "adj = (144)", "adj = (15)", "adj = (19)", "adj = (2)", "adj = (20)", "adj = (22)", "adj = (23)", "adj = (24)", "adj = (25)", "adj = (255)", "adj = (256)", "adj = (26)", "adj = (27)", "adj = (3)", "adj = (32700)", "adj = (33554432)", "adj = (4)", "adj = (403)", "adj = (404)", "adj = (405)", "adj = (410)", "adj = (411)", "adj = (420)", "adj = (438)", "adj = (492)", "adj = (499)", "adj = (5)", "adj = (521)", "adj = (531)", "adj = (533)", "adj = (534)", "adj = (574)", "adj = (580)", "adj = (581)", "adj = (582)", "adj = (592)", "adj = (597)", "adj = (598)", "adj = (599)", "adj = (6)", "adj = (62)", "adj = (63)", "adj = (64)", "adj = (65)", "adj = (66)", "adj = (7)", "adj = (716)", "adj = (753)", "adj = (8)", "adj = (83)", "adj = (9)", "adj = (90)", "adj = (92)", "adj = (93)", "adj = (adj)", "adj = (cum_orig_line)", "adj = (h)", "adj = (in_consts)", "adj = (last_line)", "adj = (new_line)", "adj = (nops)", "adj = (opcode)", "adj = (tabsiz)", "adj = (tgt)", "adj = (tgttgt)", "blocks = (blocks)", "blocks = markblocks((codestr), codelen)", "blocks = markblocks((lineno), codelen)", "code = (code)", "code = (consts)", "code = (lineno_obj)", "code = (names)", "codelen = (-1)", "codelen = (0)", "codelen = (1)", "codelen = (10)", "codelen = (100)", "codelen = (101)", "codelen = (102)", "codelen = (103)", "codelen = (104)", "codelen = (107)", "codelen = (11)", "codelen = (110)", "codelen = (111)", "codelen = (112)", "codelen = (113)", "codelen = (114)", "codelen = (115)", "codelen = (116)", "codelen = (119)", "codelen = (12)", "codelen = (120)", "codelen = (121)", "codelen = (122)", "codelen = (132)", "codelen = (134217728)", "codelen = (143)", "codelen = (144)", "codelen = (15)", "codelen = (19)", "codelen = (2)", "codelen = (20)", "codelen = (22)", "codelen = (23)", "codelen = (24)", "codelen = (25)", "codelen = (255)", "codelen = (256)", "codelen = (26)", "codelen = (27)", "codelen = (3)", "codelen = (32700)", "codelen = (33554432)", "codelen = (4)", "codelen = (403)", "codelen = (404)", "codelen = (405)", "codelen = (410)", "codelen = (411)", "codelen = (420)", "codelen = (438)", "codelen = (492)", "codelen = (499)", "codelen = (5)", "codelen = (521)", "codelen = (531)", "codelen = (533)", "codelen = (534)", "codelen = (574)", "codelen = (580)", "codelen = (581)", "codelen = (582)", "codelen = (592)", "codelen = (597)", "codelen = (598)", "codelen = (599)", "codelen = (6)", "codelen = (62)", "codelen = (63)", "codelen = (64)", "codelen = (65)", "codelen = (66)", "codelen = (7)", "codelen = (716)", "codelen = (753)", "codelen = (8)", "codelen = (83)", "codelen = (9)", "codelen = (90)", "codelen = (92)", "codelen = (93)", "codelen = (codelen)", "codelen = (const_stack_size)", "codelen = (const_stack_top)", "codelen = (i)", "codelen = (j)", "codestr = (codestr)", "codestr = (lineno)", "codestr[i] = (-1)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "cum_orig_line = (-1)", "cum_orig_line = (0)", "cum_orig_line = (1)", "cum_orig_line = (10)", "cum_orig_line = (100)", "cum_orig_line = (101)", "cum_orig_line = (102)", "cum_orig_line = (103)", "cum_orig_line = (104)", "cum_orig_line = (107)", "cum_orig_line = (11)", "cum_orig_line = (110)", "cum_orig_line = (111)", "cum_orig_line = (112)", "cum_orig_line = (113)", "cum_orig_line = (114)", "cum_orig_line = (115)", "cum_orig_line = (116)", "cum_orig_line = (119)", "cum_orig_line = (12)", "cum_orig_line = (120)", "cum_orig_line = (121)", "cum_orig_line = (122)", "cum_orig_line = (132)", "cum_orig_line = (134217728)", "cum_orig_line = (143)", "cum_orig_line = (144)", "cum_orig_line = (15)", "cum_orig_line = (19)", "cum_orig_line = (2)", "cum_orig_line = (20)", "cum_orig_line = (22)", "cum_orig_line = (23)", "cum_orig_line = (24)", "cum_orig_line = (25)", "cum_orig_line = (255)", "cum_orig_line = (256)", "cum_orig_line = (26)", "cum_orig_line = (27)", "cum_orig_line = (3)", "cum_orig_line = (32700)", "cum_orig_line = (33554432)", "cum_orig_line = (4)", "cum_orig_line = (403)", "cum_orig_line = (404)", "cum_orig_line = (405)", "cum_orig_line = (410)", "cum_orig_line = (411)", "cum_orig_line = (420)", "cum_orig_line = (438)", "cum_orig_line = (492)", "cum_orig_line = (499)", "cum_orig_line = (5)", "cum_orig_line = (521)", "cum_orig_line = (531)", "cum_orig_line = (533)", "cum_orig_line = (534)", "cum_orig_line = (574)", "cum_orig_line = (580)", "cum_orig_line = (581)", "cum_orig_line = (582)", "cum_orig_line = (592)", "cum_orig_line = (597)", "cum_orig_line = (598)", "cum_orig_line = (599)", "cum_orig_line = (6)", "cum_orig_line = (62)", "cum_orig_line = (63)", "cum_orig_line = (64)", "cum_orig_line = (65)", "cum_orig_line = (66)", "cum_orig_line = (7)", "cum_orig_line = (716)", "cum_orig_line = (753)", "cum_orig_line = (8)", "cum_orig_line = (83)", "cum_orig_line = (9)", "cum_orig_line = (90)", "cum_orig_line = (92)", "cum_orig_line = (93)", "cum_orig_line = (adj)", "cum_orig_line = (cum_orig_line)", "cum_orig_line = (h)", "cum_orig_line = (in_consts)", "cum_orig_line = (last_line)", "cum_orig_line = (new_line)", "cum_orig_line = (nops)", "cum_orig_line = (opcode)", "cum_orig_line = (tabsiz)", "cum_orig_line = (tgt)", "cum_orig_line = (tgttgt)", "h = ((const_stack_top >= j - 1) ? (load_const_stack)[const_stack_top - j + 1] : -1)", "h = (-1)", "h = (0)", "h = (1)", "h = (10)", "h = (100)", "h = (101)", "h = (102)", "h = (103)", "h = (104)", "h = (107)", "h = (11)", "h = (110)", "h = (111)", "h = (112)", "h = (113)", "h = (114)", "h = (115)", "h = (116)", "h = (119)", "h = (12)", "h = (120)", "h = (121)", "h = (122)", "h = (132)", "h = (134217728)", "h = (143)", "h = (144)", "h = (15)", "h = (19)", "h = (2)", "h = (20)", "h = (22)", "h = (23)", "h = (24)", "h = (25)", "h = (255)", "h = (256)", "h = (26)", "h = (27)", "h = (3)", "h = (32700)", "h = (33554432)", "h = (4)", "h = (403)", "h = (404)", "h = (405)", "h = (410)", "h = (411)", "h = (420)", "h = (438)", "h = (492)", "h = (499)", "h = (5)", "h = (521)", "h = (531)", "h = (533)", "h = (534)", "h = (574)", "h = (580)", "h = (581)", "h = (582)", "h = (592)", "h = (597)", "h = (598)", "h = (599)", "h = (6)", "h = (62)", "h = (63)", "h = (64)", "h = (65)", "h = (66)", "h = (7)", "h = (716)", "h = (753)", "h = (8)", "h = (83)", "h = (9)", "h = (90)", "h = (92)", "h = (93)", "h = (adj)", "h = (cum_orig_line)", "h = (h)", "h = (in_consts)", "h = (last_line)", "h = (new_line)", "h = (nops)", "h = (opcode)", "h = (tabsiz)", "h = (tgt)", "h = (tgttgt)", "h = load_global((codestr), i, name, consts)", "h = load_global((lineno), i, name, consts)", "h = load_global(codestr, i, (name), consts)", "h = load_global(codestr, i, name, (code))", "h = load_global(codestr, i, name, (consts))", "h = load_global(codestr, i, name, (lineno_obj))", "h = load_global(codestr, i, name, (names))", "in_consts = (-1)", "in_consts = (0)", "in_consts = (1)", "in_consts = (10)", "in_consts = (100)", "in_consts = (101)", "in_consts = (102)", "in_consts = (103)", "in_consts = (104)", "in_consts = (107)", "in_consts = (11)", "in_consts = (110)", "in_consts = (111)", "in_consts = (112)", "in_consts = (113)", "in_consts = (114)", "in_consts = (115)", "in_consts = (116)", "in_consts = (119)", "in_consts = (12)", "in_consts = (120)", "in_consts = (121)", "in_consts = (122)", "in_consts = (132)", "in_consts = (134217728)", "in_consts = (143)", "in_consts = (144)", "in_consts = (15)", "in_consts = (19)", "in_consts = (2)", "in_consts = (20)", "in_consts = (22)", "in_consts = (23)", "in_consts = (24)", "in_consts = (25)", "in_consts = (255)", "in_consts = (256)", "in_consts = (26)", "in_consts = (27)", "in_consts = (3)", "in_consts = (32700)", "in_consts = (33554432)", "in_consts = (4)", "in_consts = (403)", "in_consts = (404)", "in_consts = (405)", "in_consts = (410)", "in_consts = (411)", "in_consts = (420)", "in_consts = (438)", "in_consts = (492)", "in_consts = (499)", "in_consts = (5)", "in_consts = (521)", "in_consts = (531)", "in_consts = (533)", "in_consts = (534)", "in_consts = (574)", "in_consts = (580)", "in_consts = (581)", "in_consts = (582)", "in_consts = (592)", "in_consts = (597)", "in_consts = (598)", "in_consts = (599)", "in_consts = (6)", "in_consts = (62)", "in_consts = (63)", "in_consts = (64)", "in_consts = (65)", "in_consts = (66)", "in_consts = (7)", "in_consts = (716)", "in_consts = (753)", "in_consts = (8)", "in_consts = (83)", "in_consts = (9)", "in_consts = (90)", "in_consts = (92)", "in_consts = (93)", "in_consts = (adj)", "in_consts = (cum_orig_line)", "in_consts = (h)", "in_consts = (in_consts)", "in_consts = (last_line)", "in_consts = (new_line)", "in_consts = (nops)", "in_consts = (opcode)", "in_consts = (tabsiz)", "in_consts = (tgt)", "in_consts = (tgttgt)", "j = (-1)", "j = (0)", "j = (1)", "j = (10)", "j = (100)", "j = (101)", "j = (102)", "j = (103)", "j = (104)", "j = (107)", "j = (11)", "j = (110)", "j = (111)", "j = (112)", "j = (113)", "j = (114)", "j = (115)", "j = (116)", "j = (119)", "j = (12)", "j = (120)", "j = (121)", "j = (122)", "j = (132)", "j = (134217728)", "j = (143)", "j = (144)", "j = (15)", "j = (19)", "j = (2)", "j = (20)", "j = (22)", "j = (23)", "j = (24)", "j = (25)", "j = (255)", "j = (256)", "j = (26)", "j = (27)", "j = (3)", "j = (32700)", "j = (33554432)", "j = (4)", "j = (403)", "j = (404)", "j = (405)", "j = (410)", "j = (411)", "j = (420)", "j = (438)", "j = (492)", "j = (499)", "j = (5)", "j = (521)", "j = (531)", "j = (533)", "j = (534)", "j = (574)", "j = (580)", "j = (581)", "j = (582)", "j = (592)", "j = (597)", "j = (598)", "j = (599)", "j = (6)", "j = (62)", "j = (63)", "j = (64)", "j = (65)", "j = (66)", "j = (7)", "j = (716)", "j = (753)", "j = (8)", "j = (83)", "j = (9)", "j = (90)", "j = (92)", "j = (93)", "j = (codelen)", "j = (codestr)[tgt]", "j = (const_stack_size)", "j = (const_stack_top)", "j = (i)", "j = (j)", "j = (lineno)[tgt]", "last_line = (-1)", "last_line = (0)", "last_line = (1)", "last_line = (10)", "last_line = (100)", "last_line = (101)", "last_line = (102)", "last_line = (103)", "last_line = (104)", "last_line = (107)", "last_line = (11)", "last_line = (110)", "last_line = (111)", "last_line = (112)", "last_line = (113)", "last_line = (114)", "last_line = (115)", "last_line = (116)", "last_line = (119)", "last_line = (12)", "last_line = (120)", "last_line = (121)", "last_line = (122)", "last_line = (132)", "last_line = (134217728)", "last_line = (143)", "last_line = (144)", "last_line = (15)", "last_line = (19)", "last_line = (2)", "last_line = (20)", "last_line = (22)", "last_line = (23)", "last_line = (24)", "last_line = (25)", "last_line = (255)", "last_line = (256)", "last_line = (26)", "last_line = (27)", "last_line = (3)", "last_line = (32700)", "last_line = (33554432)", "last_line = (4)", "last_line = (403)", "last_line = (404)", "last_line = (405)", "last_line = (410)", "last_line = (411)", "last_line = (420)", "last_line = (438)", "last_line = (492)", "last_line = (499)", "last_line = (5)", "last_line = (521)", "last_line = (531)", "last_line = (533)", "last_line = (534)", "last_line = (574)", "last_line = (580)", "last_line = (581)", "last_line = (582)", "last_line = (592)", "last_line = (597)", "last_line = (598)", "last_line = (599)", "last_line = (6)", "last_line = (62)", "last_line = (63)", "last_line = (64)", "last_line = (65)", "last_line = (66)", "last_line = (7)", "last_line = (716)", "last_line = (753)", "last_line = (8)", "last_line = (83)", "last_line = (9)", "last_line = (90)", "last_line = (92)", "last_line = (93)", "last_line = (adj)", "last_line = (cum_orig_line)", "last_line = (h)", "last_line = (in_consts)", "last_line = (last_line)", "last_line = (new_line)", "last_line = (nops)", "last_line = (opcode)", "last_line = (tabsiz)", "last_line = (tgt)", "last_line = (tgttgt)", "lineno = (codestr)", "lineno = (lineno)", "lineno[i] = (-1)", "lineno[i] = (0)", "lineno[i] = (1)", "lineno[i] = (10)", "lineno[i] = (100)", "lineno[i] = (101)", "lineno[i] = (102)", "lineno[i] = (103)", "lineno[i] = (104)", "lineno[i] = (107)", "lineno[i] = (11)", "lineno[i] = (110)", "lineno[i] = (111)", "lineno[i] = (112)", "lineno[i] = (113)", "lineno[i] = (114)", "lineno[i] = (115)", "lineno[i] = (116)", "lineno[i] = (119)", "lineno[i] = (12)", "lineno[i] = (120)", "lineno[i] = (121)", "lineno[i] = (122)", "lineno[i] = (132)", "lineno[i] = (134217728)", "lineno[i] = (143)", "lineno[i] = (144)", "lineno[i] = (15)", "lineno[i] = (19)", "lineno[i] = (2)", "lineno[i] = (20)", "lineno[i] = (22)", "lineno[i] = (23)", "lineno[i] = (24)", "lineno[i] = (25)", "lineno[i] = (255)", "lineno[i] = (256)", "lineno[i] = (26)", "lineno[i] = (27)", "lineno[i] = (3)", "lineno[i] = (32700)", "lineno[i] = (33554432)", "lineno[i] = (4)", "lineno[i] = (403)", "lineno[i] = (404)", "lineno[i] = (405)", "lineno[i] = (410)", "lineno[i] = (411)", "lineno[i] = (420)", "lineno[i] = (438)", "lineno[i] = (492)", "lineno[i] = (499)", "lineno[i] = (5)", "lineno[i] = (521)", "lineno[i] = (531)", "lineno[i] = (533)", "lineno[i] = (534)", "lineno[i] = (574)", "lineno[i] = (580)", "lineno[i] = (581)", "lineno[i] = (582)", "lineno[i] = (592)", "lineno[i] = (597)", "lineno[i] = (598)", "lineno[i] = (599)", "lineno[i] = (6)", "lineno[i] = (62)", "lineno[i] = (63)", "lineno[i] = (64)", "lineno[i] = (65)", "lineno[i] = (66)", "lineno[i] = (7)", "lineno[i] = (716)", "lineno[i] = (753)", "lineno[i] = (8)", "lineno[i] = (83)", "lineno[i] = (9)", "lineno[i] = (90)", "lineno[i] = (92)", "lineno[i] = (93)", "memset(&(codestr)[h], 9, i - h)", "memset(&(lineno)[h], 9, i - h)", "memset((codestr) + i + 1, 9, 2)", "memset((codestr) + i + 1, 9, 3)", "memset((codestr) + i + 1, 9, 4)", "memset((codestr) + i + 1, 9, 5)", "memset((codestr) + i + 2, 9, 4)", "memset((codestr) + i, 9, 6)", "memset((lineno) + i + 1, 9, 2)", "memset((lineno) + i + 1, 9, 3)", "memset((lineno) + i + 1, 9, 4)", "memset((lineno) + i + 1, 9, 5)", "memset((lineno) + i + 2, 9, 4)", "memset((lineno) + i, 9, 6)", "name = (name)", "new_line = (-1)", "new_line = (0)", "new_line = (1)", "new_line = (10)", "new_line = (100)", "new_line = (101)", "new_line = (102)", "new_line = (103)", "new_line = (104)", "new_line = (107)", "new_line = (11)", "new_line = (110)", "new_line = (111)", "new_line = (112)", "new_line = (113)", "new_line = (114)", "new_line = (115)", "new_line = (116)", "new_line = (119)", "new_line = (12)", "new_line = (120)", "new_line = (121)", "new_line = (122)", "new_line = (132)", "new_line = (134217728)", "new_line = (143)", "new_line = (144)", "new_line = (15)", "new_line = (19)", "new_line = (2)", "new_line = (20)", "new_line = (22)", "new_line = (23)", "new_line = (24)", "new_line = (25)", "new_line = (255)", "new_line = (256)", "new_line = (26)", "new_line = (27)", "new_line = (3)", "new_line = (32700)", "new_line = (33554432)", "new_line = (4)", "new_line = (403)", "new_line = (404)", "new_line = (405)", "new_line = (410)", "new_line = (411)", "new_line = (420)", "new_line = (438)", "new_line = (492)", "new_line = (499)", "new_line = (5)", "new_line = (521)", "new_line = (531)", "new_line = (533)", "new_line = (534)", "new_line = (574)", "new_line = (580)", "new_line = (581)", "new_line = (582)", "new_line = (592)", "new_line = (597)", "new_line = (598)", "new_line = (599)", "new_line = (6)", "new_line = (62)", "new_line = (63)", "new_line = (64)", "new_line = (65)", "new_line = (66)", "new_line = (7)", "new_line = (716)", "new_line = (753)", "new_line = (8)", "new_line = (83)", "new_line = (9)", "new_line = (90)", "new_line = (92)", "new_line = (93)", "new_line = (addrmap)[cum_orig_line]", "new_line = (adj)", "new_line = (cum_orig_line)", "new_line = (h)", "new_line = (in_consts)", "new_line = (last_line)", "new_line = (new_line)", "new_line = (nops)", "new_line = (opcode)", "new_line = (tabsiz)", "new_line = (tgt)", "new_line = (tgttgt)", "opcode = (-1)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (101)", "opcode = (102)", "opcode = (103)", "opcode = (104)", "opcode = (107)", "opcode = (11)", "opcode = (110)", "opcode = (111)", "opcode = (112)", "opcode = (113)", "opcode = (114)", "opcode = (115)", "opcode = (116)", "opcode = (119)", "opcode = (12)", "opcode = (120)", "opcode = (121)", "opcode = (122)", "opcode = (132)", "opcode = (134217728)", "opcode = (143)", "opcode = (144)", "opcode = (15)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (23)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (256)", "opcode = (26)", "opcode = (27)", "opcode = (3)", "opcode = (32700)", "opcode = (33554432)", "opcode = (4)", "opcode = (403)", "opcode = (404)", "opcode = (405)", "opcode = (410)", "opcode = (411)", "opcode = (420)", "opcode = (438)", "opcode = (492)", "opcode = (499)", "opcode = (5)", "opcode = (521)", "opcode = (531)", "opcode = (533)", "opcode = (534)", "opcode = (574)", "opcode = (580)", "opcode = (581)", "opcode = (582)", "opcode = (592)", "opcode = (597)", "opcode = (598)", "opcode = (599)", "opcode = (6)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (7)", "opcode = (716)", "opcode = (753)", "opcode = (8)", "opcode = (83)", "opcode = (9)", "opcode = (90)", "opcode = (92)", "opcode = (93)", "opcode = (adj)", "opcode = (codestr)[i]", "opcode = (cum_orig_line)", "opcode = (h)", "opcode = (in_consts)", "opcode = (last_line)", "opcode = (lineno)[i]", "opcode = (new_line)", "opcode = (nops)", "opcode = (opcode)", "opcode = (tabsiz)", "opcode = (tgt)", "opcode = (tgttgt)", "tabsiz = (-1)", "tabsiz = (0)", "tabsiz = (1)", "tabsiz = (10)", "tabsiz = (100)", "tabsiz = (101)", "tabsiz = (102)", "tabsiz = (103)", "tabsiz = (104)", "tabsiz = (107)", "tabsiz = (11)", "tabsiz = (110)", "tabsiz = (111)", "tabsiz = (112)", "tabsiz = (113)", "tabsiz = (114)", "tabsiz = (115)", "tabsiz = (116)", "tabsiz = (119)", "tabsiz = (12)", "tabsiz = (120)", "tabsiz = (121)", "tabsiz = (122)", "tabsiz = (132)", "tabsiz = (134217728)", "tabsiz = (143)", "tabsiz = (144)", "tabsiz = (15)", "tabsiz = (19)", "tabsiz = (2)", "tabsiz = (20)", "tabsiz = (22)", "tabsiz = (23)", "tabsiz = (24)", "tabsiz = (25)", "tabsiz = (255)", "tabsiz = (256)", "tabsiz = (26)", "tabsiz = (27)", "tabsiz = (3)", "tabsiz = (32700)", "tabsiz = (33554432)", "tabsiz = (4)", "tabsiz = (403)", "tabsiz = (404)", "tabsiz = (405)", "tabsiz = (410)", "tabsiz = (411)", "tabsiz = (420)", "tabsiz = (438)", "tabsiz = (492)", "tabsiz = (499)", "tabsiz = (5)", "tabsiz = (521)", "tabsiz = (531)", "tabsiz = (533)", "tabsiz = (534)", "tabsiz = (574)", "tabsiz = (580)", "tabsiz = (581)", "tabsiz = (582)", "tabsiz = (592)", "tabsiz = (597)", "tabsiz = (598)", "tabsiz = (599)", "tabsiz = (6)", "tabsiz = (62)", "tabsiz = (63)", "tabsiz = (64)", "tabsiz = (65)", "tabsiz = (66)", "tabsiz = (7)", "tabsiz = (716)", "tabsiz = (753)", "tabsiz = (8)", "tabsiz = (83)", "tabsiz = (9)", "tabsiz = (90)", "tabsiz = (92)", "tabsiz = (93)", "tabsiz = (adj)", "tabsiz = (cum_orig_line)", "tabsiz = (h)", "tabsiz = (in_consts)", "tabsiz = (last_line)", "tabsiz = (new_line)", "tabsiz = (nops)", "tabsiz = (opcode)", "tabsiz = (tabsiz)", "tabsiz = (tgt)", "tabsiz = (tgttgt)", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((codestr)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((lineno)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (codestr)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (lineno)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (codestr)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (lineno)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (codestr)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (lineno)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (codestr)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (lineno)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (codestr)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (lineno)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (-1)", "tgttgt = (0)", "tgttgt = (1)", "tgttgt = (10)", "tgttgt = (100)", "tgttgt = (101)", "tgttgt = (102)", "tgttgt = (103)", "tgttgt = (104)", "tgttgt = (107)", "tgttgt = (11)", "tgttgt = (110)", "tgttgt = (111)", "tgttgt = (112)", "tgttgt = (113)", "tgttgt = (114)", "tgttgt = (115)", "tgttgt = (116)", "tgttgt = (119)", "tgttgt = (12)", "tgttgt = (120)", "tgttgt = (121)", "tgttgt = (122)", "tgttgt = (132)", "tgttgt = (134217728)", "tgttgt = (143)", "tgttgt = (144)", "tgttgt = (15)", "tgttgt = (19)", "tgttgt = (2)", "tgttgt = (20)", "tgttgt = (22)", "tgttgt = (23)", "tgttgt = (24)", "tgttgt = (25)", "tgttgt = (255)", "tgttgt = (256)", "tgttgt = (26)", "tgttgt = (27)", "tgttgt = (3)", "tgttgt = (32700)", "tgttgt = (33554432)", "tgttgt = (4)", "tgttgt = (403)", "tgttgt = (404)", "tgttgt = (405)", "tgttgt = (410)", "tgttgt = (411)", "tgttgt = (420)", "tgttgt = (438)", "tgttgt = (492)", "tgttgt = (499)", "tgttgt = (5)", "tgttgt = (521)", "tgttgt = (531)", "tgttgt = (533)", "tgttgt = (534)", "tgttgt = (574)", "tgttgt = (580)", "tgttgt = (581)", "tgttgt = (582)", "tgttgt = (592)", "tgttgt = (597)", "tgttgt = (598)", "tgttgt = (599)", "tgttgt = (6)", "tgttgt = (62)", "tgttgt = (63)", "tgttgt = (64)", "tgttgt = (65)", "tgttgt = (66)", "tgttgt = (7)", "tgttgt = (716)", "tgttgt = (753)", "tgttgt = (8)", "tgttgt = (83)", "tgttgt = (9)", "tgttgt = (90)", "tgttgt = (92)", "tgttgt = (93)", "tgttgt = (adj)", "tgttgt = (cum_orig_line)", "tgttgt = (h)", "tgttgt = (in_consts)", "tgttgt = (last_line)", "tgttgt = (new_line)", "tgttgt = (nops)", "tgttgt = (opcode)", "tgttgt = (tabsiz)", "tgttgt = (tgt)", "tgttgt = (tgttgt)", "((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0))\n        ;\n    else\n        __assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 1)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 1))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 2)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 2))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < j)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < j))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((h + nops == codelen) ? 1 : 0) , __extension__ ({\n    if (h + nops == codelen)\n        ;\n    else\n        __assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((new_line - last_line < 255) ? 1 : 0) , __extension__ ({\n    if (new_line - last_line < 255)\n        ;\n    else\n        __assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "PyMem_Free(addrmap)", "PyMem_Free(blocks)", "PyMem_Free(codestr)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "addrmap = (int *)PyMem_Malloc(codelen * sizeof(int))", "addrmap[i] = i - nops", "adj = (((opcode) >= 90) ? 3 : 1)", "blocks = markblocks(codestr, codelen)", "code = PyBytes_FromStringAndSize((char *)codestr, h)", "codelen = (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(code))->ob_size))", "codestr = (unsigned char *)PyMem_Malloc(codelen)", "codestr = (unsigned char *)memcpy(codestr, (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(code))->ob_sval)), codelen)", "codestr[i] = 114", "codestr[i] = 115", "codestr[i] = 2", "codestr[i] = 3", "codestr[i] = 83", "codestr[i] = j", "codestr[i] = opcode", "cum_orig_line = 0", "h = ((const_stack_top >= j - 1) ? load_const_stack[const_stack_top - j + 1] : -1)", "h = load_global(codestr, i, name, consts)", "in_consts = 0", "j = ((int)((codestr[i + 1 + 2] << 8) + codestr[i + 1 + 1]))", "j = ((int)((codestr[i + 2] << 8) + codestr[i + 1]))", "j = codestr[tgt]", "last_line = 0", "last_line = new_line", "lineno = (unsigned char *)(((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(lineno_obj))->ob_sval))", "lineno[i] = ((unsigned char)(new_line - last_line))", "memset(&codestr[h], 9, i - h)", "memset(codestr + i + 1, 9, 2)", "memset(codestr + i + 1, 9, 3)", "memset(codestr + i + 1, 9, 4)", "memset(codestr + i + 1, 9, 5)", "memset(codestr + i + 2, 9, 4)", "memset(codestr + i, 9, 6)", "name = _PyUnicode_AsString((((PyTupleObject *)(names))->ob_item[j]))", "new_line = addrmap[cum_orig_line]", "nops++", "opcode = 113", "opcode = codestr[i]", "tabsiz = (((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(lineno_obj))->ob_size))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "if (__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    break;\n", "if (__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitError;\n", "if (__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto exitUnchanged;\n", "if (__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    goto reoptimize_current;\n", "if (__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.50810490794661]
								}, {
									"case":	2,
									"scores":	[-7.50810490794661]
								}, {
									"case":	3,
									"scores":	[-7.50810490794661]
								}, {
									"case":	4,
									"scores":	[-7.50810490794661]
								}, {
									"case":	5,
									"scores":	[-7.50810490794661]
								}, {
									"case":	6,
									"scores":	[-7.50810490794661]
								}, {
									"case":	7,
									"scores":	[-7.50810490794661]
								}, {
									"case":	8,
									"scores":	[-7.50810490794661]
								}, {
									"case":	9,
									"scores":	[-7.50810490794661]
								}, {
									"case":	10,
									"scores":	[-7.50810490794661]
								}, {
									"case":	11,
									"scores":	[-7.50810490794661]
								}, {
									"case":	12,
									"scores":	[-7.50810490794661]
								}, {
									"case":	13,
									"scores":	[-7.50810490794661]
								}, {
									"case":	14,
									"scores":	[-7.50810490794661]
								}, {
									"case":	15,
									"scores":	[-7.50810490794661]
								}, {
									"case":	16,
									"scores":	[-7.50810490794661]
								}, {
									"case":	17,
									"scores":	[-7.50810490794661]
								}, {
									"case":	18,
									"scores":	[-7.50810490794661]
								}, {
									"case":	19,
									"scores":	[-7.50810490794661]
								}, {
									"case":	20,
									"scores":	[-7.50810490794661]
								}, {
									"case":	21,
									"scores":	[-7.50810490794661]
								}, {
									"case":	22,
									"scores":	[-7.50810490794661]
								}, {
									"case":	23,
									"scores":	[-7.50810490794661]
								}, {
									"case":	24,
									"scores":	[-7.50810490794661]
								}, {
									"case":	25,
									"scores":	[-7.50810490794661]
								}, {
									"case":	26,
									"scores":	[-7.50810490794661]
								}, {
									"case":	27,
									"scores":	[-7.50810490794661]
								}, {
									"case":	28,
									"scores":	[-7.50810490794661]
								}, {
									"case":	29,
									"scores":	[-7.50810490794661]
								}, {
									"case":	30,
									"scores":	[-7.50810490794661]
								}, {
									"case":	31,
									"scores":	[-7.50810490794661]
								}, {
									"case":	32,
									"scores":	[-7.50810490794661]
								}, {
									"case":	33,
									"scores":	[-7.50810490794661]
								}, {
									"case":	34,
									"scores":	[-7.50810490794661]
								}, {
									"case":	35,
									"scores":	[-7.50810490794661]
								}, {
									"case":	36,
									"scores":	[-7.50810490794661]
								}, {
									"case":	37,
									"scores":	[-7.50810490794661]
								}, {
									"case":	38,
									"scores":	[-7.50810490794661]
								}, {
									"case":	39,
									"scores":	[-7.50810490794661]
								}, {
									"case":	40,
									"scores":	[-7.50810490794661]
								}, {
									"case":	41,
									"scores":	[-7.50810490794661]
								}, {
									"case":	42,
									"scores":	[-7.50810490794661]
								}, {
									"case":	43,
									"scores":	[-7.50810490794661]
								}, {
									"case":	44,
									"scores":	[-7.50810490794661]
								}, {
									"case":	45,
									"scores":	[-7.50810490794661]
								}, {
									"case":	46,
									"scores":	[-7.50810490794661]
								}, {
									"case":	47,
									"scores":	[-7.50810490794661]
								}, {
									"case":	48,
									"scores":	[-7.50810490794661]
								}, {
									"case":	49,
									"scores":	[-7.50810490794661]
								}, {
									"case":	50,
									"scores":	[-7.50810490794661]
								}, {
									"case":	51,
									"scores":	[-7.50810490794661]
								}, {
									"case":	52,
									"scores":	[-7.50810490794661]
								}, {
									"case":	53,
									"scores":	[-7.50810490794661]
								}, {
									"case":	54,
									"scores":	[-7.50810490794661]
								}, {
									"case":	55,
									"scores":	[-7.50810490794661]
								}, {
									"case":	56,
									"scores":	[-7.50810490794661]
								}, {
									"case":	57,
									"scores":	[-7.50810490794661]
								}, {
									"case":	58,
									"scores":	[-7.50810490794661]
								}, {
									"case":	59,
									"scores":	[-7.50810490794661]
								}, {
									"case":	60,
									"scores":	[-7.50810490794661]
								}, {
									"case":	61,
									"scores":	[-7.50810490794661]
								}, {
									"case":	62,
									"scores":	[-7.50810490794661]
								}, {
									"case":	63,
									"scores":	[-7.50810490794661]
								}, {
									"case":	64,
									"scores":	[-7.50810490794661]
								}, {
									"case":	65,
									"scores":	[-7.50810490794661]
								}, {
									"case":	66,
									"scores":	[-7.50810490794661]
								}, {
									"case":	67,
									"scores":	[-7.50810490794661]
								}, {
									"case":	68,
									"scores":	[-7.50810490794661]
								}, {
									"case":	69,
									"scores":	[-7.50810490794661]
								}, {
									"case":	70,
									"scores":	[-7.50810490794661]
								}, {
									"case":	71,
									"scores":	[-7.50810490794661]
								}, {
									"case":	72,
									"scores":	[-7.50810490794661]
								}, {
									"case":	73,
									"scores":	[-7.50810490794661]
								}, {
									"case":	74,
									"scores":	[-7.50810490794661]
								}, {
									"case":	75,
									"scores":	[-7.50810490794661]
								}, {
									"case":	76,
									"scores":	[-7.50810490794661]
								}, {
									"case":	77,
									"scores":	[-7.50810490794661]
								}, {
									"case":	78,
									"scores":	[-7.50810490794661]
								}, {
									"case":	79,
									"scores":	[-7.50810490794661]
								}, {
									"case":	80,
									"scores":	[-7.50810490794661]
								}, {
									"case":	81,
									"scores":	[-7.50810490794661]
								}, {
									"case":	82,
									"scores":	[-7.50810490794661]
								}, {
									"case":	83,
									"scores":	[-7.50810490794661]
								}, {
									"case":	84,
									"scores":	[-7.50810490794661]
								}, {
									"case":	85,
									"scores":	[-7.50810490794661]
								}, {
									"case":	86,
									"scores":	[-7.50810490794661]
								}, {
									"case":	87,
									"scores":	[-7.50810490794661]
								}, {
									"case":	88,
									"scores":	[-7.50810490794661]
								}, {
									"case":	89,
									"scores":	[-7.50810490794661]
								}, {
									"case":	90,
									"scores":	[-7.50810490794661]
								}, {
									"case":	91,
									"scores":	[-7.50810490794661]
								}, {
									"case":	92,
									"scores":	[-7.50810490794661]
								}, {
									"case":	93,
									"scores":	[-7.50810490794661]
								}, {
									"case":	94,
									"scores":	[-7.50810490794661]
								}, {
									"case":	95,
									"scores":	[-7.50810490794661]
								}, {
									"case":	96,
									"scores":	[-7.50810490794661]
								}, {
									"case":	97,
									"scores":	[-7.50810490794661]
								}, {
									"case":	98,
									"scores":	[-7.50810490794661]
								}, {
									"case":	99,
									"scores":	[-7.50810490794661]
								}, {
									"case":	100,
									"scores":	[-7.50810490794661]
								}, {
									"case":	101,
									"scores":	[-7.50810490794661]
								}, {
									"case":	102,
									"scores":	[-7.50810490794661]
								}, {
									"case":	103,
									"scores":	[-7.50810490794661]
								}, {
									"case":	104,
									"scores":	[-7.50810490794661]
								}, {
									"case":	105,
									"scores":	[-7.50810490794661]
								}, {
									"case":	106,
									"scores":	[-7.50810490794661]
								}, {
									"case":	107,
									"scores":	[-7.50810490794661]
								}, {
									"case":	108,
									"scores":	[-7.50810490794661]
								}, {
									"case":	109,
									"scores":	[-7.50810490794661]
								}, {
									"case":	110,
									"scores":	[-7.50810490794661]
								}, {
									"case":	111,
									"scores":	[-7.50810490794661]
								}, {
									"case":	112,
									"scores":	[-7.50810490794661]
								}, {
									"case":	113,
									"scores":	[-7.50810490794661]
								}, {
									"case":	114,
									"scores":	[-7.50810490794661]
								}, {
									"case":	115,
									"scores":	[-7.50810490794661]
								}, {
									"case":	116,
									"scores":	[-7.50810490794661]
								}, {
									"case":	117,
									"scores":	[-7.50810490794661]
								}, {
									"case":	118,
									"scores":	[-7.50810490794661]
								}, {
									"case":	119,
									"scores":	[-7.50810490794661]
								}, {
									"case":	120,
									"scores":	[-7.50810490794661]
								}, {
									"case":	121,
									"scores":	[-7.50810490794661]
								}, {
									"case":	122,
									"scores":	[-7.50810490794661]
								}, {
									"case":	123,
									"scores":	[-7.50810490794661]
								}, {
									"case":	124,
									"scores":	[-7.50810490794661]
								}, {
									"case":	125,
									"scores":	[-7.50810490794661]
								}, {
									"case":	126,
									"scores":	[-7.50810490794661]
								}, {
									"case":	127,
									"scores":	[-7.50810490794661]
								}, {
									"case":	128,
									"scores":	[-7.50810490794661]
								}, {
									"case":	129,
									"scores":	[-7.50810490794661]
								}, {
									"case":	130,
									"scores":	[-7.50810490794661]
								}, {
									"case":	131,
									"scores":	[-7.50810490794661]
								}, {
									"case":	132,
									"scores":	[-7.50810490794661]
								}, {
									"case":	133,
									"scores":	[-7.50810490794661]
								}, {
									"case":	134,
									"scores":	[-7.50810490794661]
								}, {
									"case":	135,
									"scores":	[-7.50810490794661]
								}, {
									"case":	136,
									"scores":	[-7.50810490794661]
								}, {
									"case":	137,
									"scores":	[-7.50810490794661]
								}, {
									"case":	138,
									"scores":	[-7.50810490794661]
								}, {
									"case":	139,
									"scores":	[-7.50810490794661]
								}, {
									"case":	140,
									"scores":	[-7.50810490794661]
								}, {
									"case":	141,
									"scores":	[-7.50810490794661]
								}, {
									"case":	142,
									"scores":	[-7.50810490794661]
								}, {
									"case":	143,
									"scores":	[-7.50810490794661]
								}, {
									"case":	144,
									"scores":	[-7.50810490794661]
								}, {
									"case":	145,
									"scores":	[-7.50810490794661]
								}, {
									"case":	146,
									"scores":	[-7.50810490794661]
								}, {
									"case":	147,
									"scores":	[-7.50810490794661]
								}, {
									"case":	148,
									"scores":	[-7.50810490794661]
								}, {
									"case":	149,
									"scores":	[-7.50810490794661]
								}, {
									"case":	150,
									"scores":	[-7.50810490794661]
								}, {
									"case":	151,
									"scores":	[-7.50810490794661]
								}, {
									"case":	152,
									"scores":	[-7.50810490794661]
								}, {
									"case":	153,
									"scores":	[-7.50810490794661]
								}, {
									"case":	154,
									"scores":	[-7.50810490794661]
								}, {
									"case":	155,
									"scores":	[-7.50810490794661]
								}, {
									"case":	156,
									"scores":	[-7.50810490794661]
								}, {
									"case":	157,
									"scores":	[-7.50810490794661]
								}, {
									"case":	158,
									"scores":	[-7.50810490794661]
								}, {
									"case":	159,
									"scores":	[-7.50810490794661]
								}, {
									"case":	160,
									"scores":	[-7.50810490794661]
								}, {
									"case":	161,
									"scores":	[-7.50810490794661]
								}, {
									"case":	162,
									"scores":	[-7.50810490794661]
								}, {
									"case":	163,
									"scores":	[-7.50810490794661]
								}, {
									"case":	164,
									"scores":	[-7.50810490794661]
								}, {
									"case":	165,
									"scores":	[-7.50810490794661]
								}, {
									"case":	166,
									"scores":	[-7.50810490794661]
								}, {
									"case":	167,
									"scores":	[-7.50810490794661]
								}, {
									"case":	168,
									"scores":	[-7.50810490794661]
								}, {
									"case":	169,
									"scores":	[-7.50810490794661]
								}, {
									"case":	170,
									"scores":	[-7.50810490794661]
								}, {
									"case":	171,
									"scores":	[-7.50810490794661]
								}, {
									"case":	172,
									"scores":	[-7.50810490794661]
								}, {
									"case":	173,
									"scores":	[-7.50810490794661]
								}, {
									"case":	174,
									"scores":	[-7.50810490794661]
								}, {
									"case":	175,
									"scores":	[-7.50810490794661]
								}, {
									"case":	176,
									"scores":	[-7.50810490794661]
								}, {
									"case":	177,
									"scores":	[-7.50810490794661]
								}, {
									"case":	178,
									"scores":	[-7.50810490794661]
								}, {
									"case":	179,
									"scores":	[-7.50810490794661]
								}, {
									"case":	180,
									"scores":	[-7.50810490794661]
								}, {
									"case":	181,
									"scores":	[-7.50810490794661]
								}, {
									"case":	182,
									"scores":	[-7.50810490794661]
								}, {
									"case":	183,
									"scores":	[-7.50810490794661]
								}, {
									"case":	184,
									"scores":	[-7.50810490794661]
								}, {
									"case":	185,
									"scores":	[-7.50810490794661]
								}, {
									"case":	186,
									"scores":	[-7.50810490794661]
								}, {
									"case":	187,
									"scores":	[-7.50810490794661]
								}, {
									"case":	188,
									"scores":	[-7.50810490794661]
								}, {
									"case":	189,
									"scores":	[-7.50810490794661]
								}, {
									"case":	190,
									"scores":	[-7.50810490794661]
								}, {
									"case":	191,
									"scores":	[-7.50810490794661]
								}, {
									"case":	192,
									"scores":	[-7.50810490794661]
								}, {
									"case":	193,
									"scores":	[-7.50810490794661]
								}, {
									"case":	194,
									"scores":	[-7.50810490794661]
								}, {
									"case":	195,
									"scores":	[-7.50810490794661]
								}, {
									"case":	196,
									"scores":	[-7.50810490794661]
								}, {
									"case":	197,
									"scores":	[-7.50810490794661]
								}, {
									"case":	198,
									"scores":	[-7.50810490794661]
								}, {
									"case":	199,
									"scores":	[-7.50810490794661]
								}, {
									"case":	200,
									"scores":	[-7.50810490794661]
								}, {
									"case":	201,
									"scores":	[-7.50810490794661]
								}, {
									"case":	202,
									"scores":	[-7.50810490794661]
								}, {
									"case":	203,
									"scores":	[-7.50810490794661]
								}, {
									"case":	204,
									"scores":	[-7.50810490794661]
								}, {
									"case":	205,
									"scores":	[-7.50810490794661]
								}, {
									"case":	206,
									"scores":	[-7.50810490794661]
								}, {
									"case":	207,
									"scores":	[-7.50810490794661]
								}, {
									"case":	208,
									"scores":	[-7.50810490794661]
								}, {
									"case":	209,
									"scores":	[-7.50810490794661]
								}, {
									"case":	210,
									"scores":	[-7.50810490794661]
								}, {
									"case":	211,
									"scores":	[-7.50810490794661]
								}, {
									"case":	212,
									"scores":	[-7.50810490794661]
								}, {
									"case":	213,
									"scores":	[-7.50810490794661]
								}, {
									"case":	214,
									"scores":	[-7.50810490794661]
								}, {
									"case":	215,
									"scores":	[-7.50810490794661]
								}, {
									"case":	216,
									"scores":	[-7.50810490794661]
								}, {
									"case":	217,
									"scores":	[-7.50810490794661]
								}, {
									"case":	218,
									"scores":	[-7.50810490794661]
								}, {
									"case":	219,
									"scores":	[-7.50810490794661]
								}, {
									"case":	220,
									"scores":	[-7.50810490794661]
								}, {
									"case":	221,
									"scores":	[-7.50810490794661]
								}, {
									"case":	222,
									"scores":	[-7.50810490794661]
								}, {
									"case":	223,
									"scores":	[-7.50810490794661]
								}, {
									"case":	224,
									"scores":	[-7.50810490794661]
								}, {
									"case":	225,
									"scores":	[-7.50810490794661]
								}, {
									"case":	226,
									"scores":	[-7.50810490794661]
								}, {
									"case":	227,
									"scores":	[-7.50810490794661]
								}, {
									"case":	228,
									"scores":	[-7.50810490794661]
								}, {
									"case":	229,
									"scores":	[-7.50810490794661]
								}, {
									"case":	230,
									"scores":	[-7.50810490794661]
								}, {
									"case":	231,
									"scores":	[-7.50810490794661]
								}, {
									"case":	232,
									"scores":	[-7.50810490794661]
								}, {
									"case":	233,
									"scores":	[-7.50810490794661]
								}, {
									"case":	234,
									"scores":	[-7.50810490794661]
								}, {
									"case":	235,
									"scores":	[-7.50810490794661]
								}, {
									"case":	236,
									"scores":	[-7.50810490794661]
								}, {
									"case":	237,
									"scores":	[-7.50810490794661]
								}, {
									"case":	238,
									"scores":	[-7.50810490794661]
								}, {
									"case":	239,
									"scores":	[-7.50810490794661]
								}, {
									"case":	240,
									"scores":	[-7.50810490794661]
								}, {
									"case":	241,
									"scores":	[-7.50810490794661]
								}, {
									"case":	242,
									"scores":	[-7.50810490794661]
								}, {
									"case":	243,
									"scores":	[-7.50810490794661]
								}, {
									"case":	244,
									"scores":	[-7.50810490794661]
								}, {
									"case":	245,
									"scores":	[-7.50810490794661]
								}, {
									"case":	246,
									"scores":	[-7.50810490794661]
								}, {
									"case":	247,
									"scores":	[-7.50810490794661]
								}, {
									"case":	248,
									"scores":	[-7.50810490794661]
								}, {
									"case":	249,
									"scores":	[-7.50810490794661]
								}, {
									"case":	250,
									"scores":	[-7.50810490794661]
								}, {
									"case":	251,
									"scores":	[-7.50810490794661]
								}, {
									"case":	252,
									"scores":	[-7.50810490794661]
								}, {
									"case":	253,
									"scores":	[-7.50810490794661]
								}, {
									"case":	254,
									"scores":	[-7.50810490794661]
								}, {
									"case":	255,
									"scores":	[-7.50810490794661]
								}, {
									"case":	256,
									"scores":	[-7.50810490794661]
								}, {
									"case":	257,
									"scores":	[-7.50810490794661]
								}, {
									"case":	258,
									"scores":	[-7.50810490794661]
								}, {
									"case":	259,
									"scores":	[-7.50810490794661]
								}, {
									"case":	260,
									"scores":	[-7.50810490794661]
								}, {
									"case":	261,
									"scores":	[-7.50810490794661]
								}, {
									"case":	262,
									"scores":	[-7.50810490794661]
								}, {
									"case":	263,
									"scores":	[-7.50810490794661]
								}, {
									"case":	264,
									"scores":	[-7.50810490794661]
								}, {
									"case":	265,
									"scores":	[-7.50810490794661]
								}, {
									"case":	266,
									"scores":	[-7.50810490794661]
								}, {
									"case":	267,
									"scores":	[-7.50810490794661]
								}, {
									"case":	268,
									"scores":	[-7.50810490794661]
								}, {
									"case":	269,
									"scores":	[-7.50810490794661]
								}, {
									"case":	270,
									"scores":	[-7.50810490794661]
								}, {
									"case":	271,
									"scores":	[-7.50810490794661]
								}, {
									"case":	272,
									"scores":	[-7.50810490794661]
								}, {
									"case":	273,
									"scores":	[-7.50810490794661]
								}, {
									"case":	274,
									"scores":	[-7.50810490794661]
								}, {
									"case":	275,
									"scores":	[-7.50810490794661]
								}, {
									"case":	276,
									"scores":	[-7.50810490794661]
								}, {
									"case":	277,
									"scores":	[-7.50810490794661]
								}, {
									"case":	278,
									"scores":	[-7.50810490794661]
								}, {
									"case":	279,
									"scores":	[-7.50810490794661]
								}, {
									"case":	280,
									"scores":	[-7.50810490794661]
								}, {
									"case":	281,
									"scores":	[-7.50810490794661]
								}, {
									"case":	282,
									"scores":	[-7.50810490794661]
								}, {
									"case":	283,
									"scores":	[-7.50810490794661]
								}, {
									"case":	284,
									"scores":	[-7.50810490794661]
								}, {
									"case":	285,
									"scores":	[-7.50810490794661]
								}, {
									"case":	286,
									"scores":	[-7.50810490794661]
								}, {
									"case":	287,
									"scores":	[-7.50810490794661]
								}, {
									"case":	288,
									"scores":	[-7.50810490794661]
								}, {
									"case":	289,
									"scores":	[-7.50810490794661]
								}, {
									"case":	290,
									"scores":	[-7.50810490794661]
								}, {
									"case":	291,
									"scores":	[-7.50810490794661]
								}, {
									"case":	292,
									"scores":	[-7.50810490794661]
								}, {
									"case":	293,
									"scores":	[-7.50810490794661]
								}, {
									"case":	294,
									"scores":	[-7.50810490794661]
								}, {
									"case":	295,
									"scores":	[-7.50810490794661]
								}, {
									"case":	296,
									"scores":	[-7.50810490794661]
								}, {
									"case":	297,
									"scores":	[-7.50810490794661]
								}, {
									"case":	298,
									"scores":	[-7.50810490794661]
								}, {
									"case":	299,
									"scores":	[-7.50810490794661]
								}, {
									"case":	300,
									"scores":	[-7.50810490794661]
								}, {
									"case":	301,
									"scores":	[-7.50810490794661]
								}, {
									"case":	302,
									"scores":	[-7.50810490794661]
								}, {
									"case":	303,
									"scores":	[-7.50810490794661]
								}, {
									"case":	304,
									"scores":	[-7.50810490794661]
								}, {
									"case":	305,
									"scores":	[-7.50810490794661]
								}, {
									"case":	306,
									"scores":	[-7.50810490794661]
								}, {
									"case":	307,
									"scores":	[-7.50810490794661]
								}, {
									"case":	308,
									"scores":	[-7.50810490794661]
								}, {
									"case":	309,
									"scores":	[-7.50810490794661]
								}, {
									"case":	310,
									"scores":	[-7.50810490794661]
								}, {
									"case":	311,
									"scores":	[-7.50810490794661]
								}, {
									"case":	312,
									"scores":	[-7.50810490794661]
								}, {
									"case":	313,
									"scores":	[-7.50810490794661]
								}, {
									"case":	314,
									"scores":	[-7.50810490794661]
								}, {
									"case":	315,
									"scores":	[-7.50810490794661]
								}, {
									"case":	316,
									"scores":	[-7.50810490794661]
								}, {
									"case":	317,
									"scores":	[-7.50810490794661]
								}, {
									"case":	318,
									"scores":	[-7.50810490794661]
								}, {
									"case":	319,
									"scores":	[-7.50810490794661]
								}, {
									"case":	320,
									"scores":	[-7.50810490794661]
								}, {
									"case":	321,
									"scores":	[-7.50810490794661]
								}, {
									"case":	322,
									"scores":	[-7.50810490794661]
								}, {
									"case":	323,
									"scores":	[-7.50810490794661]
								}, {
									"case":	324,
									"scores":	[-7.50810490794661]
								}, {
									"case":	325,
									"scores":	[-7.50810490794661]
								}, {
									"case":	326,
									"scores":	[-7.50810490794661]
								}, {
									"case":	327,
									"scores":	[-7.50810490794661]
								}, {
									"case":	328,
									"scores":	[-7.50810490794661]
								}, {
									"case":	329,
									"scores":	[-7.50810490794661]
								}, {
									"case":	330,
									"scores":	[-7.50810490794661]
								}, {
									"case":	331,
									"scores":	[-7.50810490794661]
								}, {
									"case":	332,
									"scores":	[-7.50810490794661]
								}, {
									"case":	333,
									"scores":	[-7.50810490794661]
								}, {
									"case":	334,
									"scores":	[-7.50810490794661]
								}, {
									"case":	335,
									"scores":	[-7.50810490794661]
								}, {
									"case":	336,
									"scores":	[-7.50810490794661]
								}, {
									"case":	337,
									"scores":	[-7.50810490794661]
								}, {
									"case":	338,
									"scores":	[-7.50810490794661]
								}, {
									"case":	339,
									"scores":	[-7.50810490794661]
								}, {
									"case":	340,
									"scores":	[-7.50810490794661]
								}, {
									"case":	341,
									"scores":	[-7.50810490794661]
								}, {
									"case":	342,
									"scores":	[-7.50810490794661]
								}, {
									"case":	343,
									"scores":	[-7.50810490794661]
								}, {
									"case":	344,
									"scores":	[-7.50810490794661]
								}, {
									"case":	345,
									"scores":	[-7.50810490794661]
								}, {
									"case":	346,
									"scores":	[-7.50810490794661]
								}, {
									"case":	347,
									"scores":	[-7.50810490794661]
								}, {
									"case":	348,
									"scores":	[-7.50810490794661]
								}, {
									"case":	349,
									"scores":	[-7.50810490794661]
								}, {
									"case":	350,
									"scores":	[-7.50810490794661]
								}, {
									"case":	351,
									"scores":	[-7.50810490794661]
								}, {
									"case":	352,
									"scores":	[-7.50810490794661]
								}, {
									"case":	353,
									"scores":	[-7.50810490794661]
								}, {
									"case":	354,
									"scores":	[-7.50810490794661]
								}, {
									"case":	355,
									"scores":	[-7.50810490794661]
								}, {
									"case":	356,
									"scores":	[-7.50810490794661]
								}, {
									"case":	357,
									"scores":	[-7.50810490794661]
								}, {
									"case":	358,
									"scores":	[-7.50810490794661]
								}, {
									"case":	359,
									"scores":	[-7.50810490794661]
								}, {
									"case":	360,
									"scores":	[-7.50810490794661]
								}, {
									"case":	361,
									"scores":	[-7.50810490794661]
								}, {
									"case":	362,
									"scores":	[-7.50810490794661]
								}, {
									"case":	363,
									"scores":	[-7.50810490794661]
								}, {
									"case":	364,
									"scores":	[-7.50810490794661]
								}, {
									"case":	365,
									"scores":	[-7.50810490794661]
								}, {
									"case":	366,
									"scores":	[-7.50810490794661]
								}, {
									"case":	367,
									"scores":	[-7.50810490794661]
								}, {
									"case":	368,
									"scores":	[-7.50810490794661]
								}, {
									"case":	369,
									"scores":	[-7.50810490794661]
								}, {
									"case":	370,
									"scores":	[-7.50810490794661]
								}, {
									"case":	371,
									"scores":	[-7.50810490794661]
								}, {
									"case":	372,
									"scores":	[-7.50810490794661]
								}, {
									"case":	373,
									"scores":	[-7.50810490794661]
								}, {
									"case":	374,
									"scores":	[-7.50810490794661]
								}, {
									"case":	375,
									"scores":	[-7.50810490794661]
								}, {
									"case":	376,
									"scores":	[-7.50810490794661]
								}, {
									"case":	377,
									"scores":	[-7.50810490794661]
								}, {
									"case":	378,
									"scores":	[-7.50810490794661]
								}, {
									"case":	379,
									"scores":	[-7.50810490794661]
								}, {
									"case":	380,
									"scores":	[-7.50810490794661]
								}, {
									"case":	381,
									"scores":	[-7.50810490794661]
								}, {
									"case":	382,
									"scores":	[-7.50810490794661]
								}, {
									"case":	383,
									"scores":	[-7.50810490794661]
								}, {
									"case":	384,
									"scores":	[-7.50810490794661]
								}, {
									"case":	385,
									"scores":	[-7.50810490794661]
								}, {
									"case":	386,
									"scores":	[-7.50810490794661]
								}, {
									"case":	387,
									"scores":	[-7.50810490794661]
								}, {
									"case":	388,
									"scores":	[-7.50810490794661]
								}, {
									"case":	389,
									"scores":	[-7.50810490794661]
								}, {
									"case":	390,
									"scores":	[-7.50810490794661]
								}, {
									"case":	391,
									"scores":	[-7.50810490794661]
								}, {
									"case":	392,
									"scores":	[-7.50810490794661]
								}, {
									"case":	393,
									"scores":	[-7.50810490794661]
								}, {
									"case":	394,
									"scores":	[-7.50810490794661]
								}, {
									"case":	395,
									"scores":	[-7.50810490794661]
								}, {
									"case":	396,
									"scores":	[-7.50810490794661]
								}, {
									"case":	397,
									"scores":	[-7.50810490794661]
								}, {
									"case":	398,
									"scores":	[-7.50810490794661]
								}, {
									"case":	399,
									"scores":	[-7.50810490794661]
								}, {
									"case":	400,
									"scores":	[-7.50810490794661]
								}, {
									"case":	401,
									"scores":	[-7.50810490794661]
								}, {
									"case":	402,
									"scores":	[-7.50810490794661]
								}, {
									"case":	403,
									"scores":	[-7.50810490794661]
								}, {
									"case":	404,
									"scores":	[-7.50810490794661]
								}, {
									"case":	405,
									"scores":	[-7.50810490794661]
								}, {
									"case":	406,
									"scores":	[-7.50810490794661]
								}, {
									"case":	407,
									"scores":	[-7.50810490794661]
								}, {
									"case":	408,
									"scores":	[-7.50810490794661]
								}, {
									"case":	409,
									"scores":	[-7.50810490794661]
								}, {
									"case":	410,
									"scores":	[-7.50810490794661]
								}, {
									"case":	411,
									"scores":	[-7.50810490794661]
								}, {
									"case":	412,
									"scores":	[-7.50810490794661]
								}, {
									"case":	413,
									"scores":	[-7.50810490794661]
								}, {
									"case":	414,
									"scores":	[-7.50810490794661]
								}, {
									"case":	415,
									"scores":	[-7.50810490794661]
								}, {
									"case":	416,
									"scores":	[-7.50810490794661]
								}, {
									"case":	417,
									"scores":	[-7.50810490794661]
								}, {
									"case":	418,
									"scores":	[-7.50810490794661]
								}, {
									"case":	419,
									"scores":	[-7.50810490794661]
								}, {
									"case":	420,
									"scores":	[-7.50810490794661]
								}, {
									"case":	421,
									"scores":	[-7.50810490794661]
								}, {
									"case":	422,
									"scores":	[-7.50810490794661]
								}, {
									"case":	423,
									"scores":	[-7.50810490794661]
								}, {
									"case":	424,
									"scores":	[-7.50810490794661]
								}, {
									"case":	425,
									"scores":	[-7.50810490794661]
								}, {
									"case":	426,
									"scores":	[-7.50810490794661]
								}, {
									"case":	427,
									"scores":	[-7.50810490794661]
								}, {
									"case":	428,
									"scores":	[-7.50810490794661]
								}, {
									"case":	429,
									"scores":	[-7.50810490794661]
								}, {
									"case":	430,
									"scores":	[-7.50810490794661]
								}, {
									"case":	431,
									"scores":	[-7.50810490794661]
								}, {
									"case":	432,
									"scores":	[-7.50810490794661]
								}, {
									"case":	433,
									"scores":	[-7.50810490794661]
								}, {
									"case":	434,
									"scores":	[-7.50810490794661]
								}, {
									"case":	435,
									"scores":	[-7.50810490794661]
								}, {
									"case":	436,
									"scores":	[-7.50810490794661]
								}, {
									"case":	437,
									"scores":	[-7.50810490794661]
								}, {
									"case":	438,
									"scores":	[-7.50810490794661]
								}, {
									"case":	439,
									"scores":	[-7.50810490794661]
								}, {
									"case":	440,
									"scores":	[-7.50810490794661]
								}, {
									"case":	441,
									"scores":	[-7.50810490794661]
								}, {
									"case":	442,
									"scores":	[-7.50810490794661]
								}, {
									"case":	443,
									"scores":	[-7.50810490794661]
								}, {
									"case":	444,
									"scores":	[-7.50810490794661]
								}, {
									"case":	445,
									"scores":	[-7.50810490794661]
								}, {
									"case":	446,
									"scores":	[-7.50810490794661]
								}, {
									"case":	447,
									"scores":	[-7.50810490794661]
								}, {
									"case":	448,
									"scores":	[-7.50810490794661]
								}, {
									"case":	449,
									"scores":	[-7.50810490794661]
								}, {
									"case":	450,
									"scores":	[-7.50810490794661]
								}, {
									"case":	451,
									"scores":	[-7.50810490794661]
								}, {
									"case":	452,
									"scores":	[-7.50810490794661]
								}, {
									"case":	453,
									"scores":	[-7.50810490794661]
								}, {
									"case":	454,
									"scores":	[-7.50810490794661]
								}, {
									"case":	455,
									"scores":	[-7.50810490794661]
								}, {
									"case":	456,
									"scores":	[-7.50810490794661]
								}, {
									"case":	457,
									"scores":	[-7.50810490794661]
								}, {
									"case":	458,
									"scores":	[-7.50810490794661]
								}, {
									"case":	459,
									"scores":	[-7.50810490794661]
								}, {
									"case":	460,
									"scores":	[-7.50810490794661]
								}, {
									"case":	461,
									"scores":	[-7.50810490794661]
								}, {
									"case":	462,
									"scores":	[-7.50810490794661]
								}, {
									"case":	463,
									"scores":	[-7.50810490794661]
								}, {
									"case":	464,
									"scores":	[-7.50810490794661]
								}, {
									"case":	465,
									"scores":	[-7.50810490794661]
								}, {
									"case":	466,
									"scores":	[-7.50810490794661]
								}, {
									"case":	467,
									"scores":	[-7.50810490794661]
								}, {
									"case":	468,
									"scores":	[-7.50810490794661]
								}, {
									"case":	469,
									"scores":	[-7.50810490794661]
								}, {
									"case":	470,
									"scores":	[-7.50810490794661]
								}, {
									"case":	471,
									"scores":	[-7.50810490794661]
								}, {
									"case":	472,
									"scores":	[-7.50810490794661]
								}, {
									"case":	473,
									"scores":	[-7.50810490794661]
								}, {
									"case":	474,
									"scores":	[-7.50810490794661]
								}, {
									"case":	475,
									"scores":	[-7.50810490794661]
								}, {
									"case":	476,
									"scores":	[-7.50810490794661]
								}, {
									"case":	477,
									"scores":	[-7.50810490794661]
								}, {
									"case":	478,
									"scores":	[-7.50810490794661]
								}, {
									"case":	479,
									"scores":	[-7.50810490794661]
								}, {
									"case":	480,
									"scores":	[-7.50810490794661]
								}, {
									"case":	481,
									"scores":	[-7.50810490794661]
								}, {
									"case":	482,
									"scores":	[-7.50810490794661]
								}, {
									"case":	483,
									"scores":	[-7.50810490794661]
								}, {
									"case":	484,
									"scores":	[-7.50810490794661]
								}, {
									"case":	485,
									"scores":	[-7.50810490794661]
								}, {
									"case":	486,
									"scores":	[-7.50810490794661]
								}, {
									"case":	487,
									"scores":	[-7.50810490794661]
								}, {
									"case":	488,
									"scores":	[-7.50810490794661]
								}, {
									"case":	489,
									"scores":	[-7.50810490794661]
								}, {
									"case":	490,
									"scores":	[-7.50810490794661]
								}, {
									"case":	491,
									"scores":	[-7.50810490794661]
								}, {
									"case":	492,
									"scores":	[-7.50810490794661]
								}, {
									"case":	493,
									"scores":	[-7.50810490794661]
								}, {
									"case":	494,
									"scores":	[-7.50810490794661]
								}, {
									"case":	495,
									"scores":	[-7.50810490794661]
								}, {
									"case":	496,
									"scores":	[-7.50810490794661]
								}, {
									"case":	497,
									"scores":	[-7.50810490794661]
								}, {
									"case":	498,
									"scores":	[-7.50810490794661]
								}, {
									"case":	499,
									"scores":	[-7.50810490794661]
								}, {
									"case":	500,
									"scores":	[-7.50810490794661]
								}, {
									"case":	501,
									"scores":	[-7.50810490794661]
								}, {
									"case":	502,
									"scores":	[-7.50810490794661]
								}, {
									"case":	503,
									"scores":	[-7.50810490794661]
								}, {
									"case":	504,
									"scores":	[-7.50810490794661]
								}, {
									"case":	505,
									"scores":	[-7.50810490794661]
								}, {
									"case":	506,
									"scores":	[-7.50810490794661]
								}, {
									"case":	507,
									"scores":	[-7.50810490794661]
								}, {
									"case":	508,
									"scores":	[-7.50810490794661]
								}, {
									"case":	509,
									"scores":	[-7.50810490794661]
								}, {
									"case":	510,
									"scores":	[-7.50810490794661]
								}, {
									"case":	511,
									"scores":	[-7.50810490794661]
								}, {
									"case":	512,
									"scores":	[-7.50810490794661]
								}, {
									"case":	513,
									"scores":	[-7.50810490794661]
								}, {
									"case":	514,
									"scores":	[-7.50810490794661]
								}, {
									"case":	515,
									"scores":	[-7.50810490794661]
								}, {
									"case":	516,
									"scores":	[-7.50810490794661]
								}, {
									"case":	517,
									"scores":	[-7.50810490794661]
								}, {
									"case":	518,
									"scores":	[-7.50810490794661]
								}, {
									"case":	519,
									"scores":	[-7.50810490794661]
								}, {
									"case":	520,
									"scores":	[-7.50810490794661]
								}, {
									"case":	521,
									"scores":	[-7.50810490794661]
								}, {
									"case":	522,
									"scores":	[-7.50810490794661]
								}, {
									"case":	523,
									"scores":	[-7.50810490794661]
								}, {
									"case":	524,
									"scores":	[-7.50810490794661]
								}, {
									"case":	525,
									"scores":	[-7.50810490794661]
								}, {
									"case":	526,
									"scores":	[-7.50810490794661]
								}, {
									"case":	527,
									"scores":	[-7.50810490794661]
								}, {
									"case":	528,
									"scores":	[-7.50810490794661]
								}, {
									"case":	529,
									"scores":	[-7.50810490794661]
								}, {
									"case":	530,
									"scores":	[-7.50810490794661]
								}, {
									"case":	531,
									"scores":	[-7.50810490794661]
								}, {
									"case":	532,
									"scores":	[-7.50810490794661]
								}, {
									"case":	533,
									"scores":	[-7.50810490794661]
								}, {
									"case":	534,
									"scores":	[-7.50810490794661]
								}, {
									"case":	535,
									"scores":	[-7.50810490794661]
								}, {
									"case":	536,
									"scores":	[-7.50810490794661]
								}, {
									"case":	537,
									"scores":	[-7.50810490794661]
								}, {
									"case":	538,
									"scores":	[-7.50810490794661]
								}, {
									"case":	539,
									"scores":	[-7.50810490794661]
								}, {
									"case":	540,
									"scores":	[-7.50810490794661]
								}, {
									"case":	541,
									"scores":	[-7.50810490794661]
								}, {
									"case":	542,
									"scores":	[-7.50810490794661]
								}, {
									"case":	543,
									"scores":	[-7.50810490794661]
								}, {
									"case":	544,
									"scores":	[-7.50810490794661]
								}, {
									"case":	545,
									"scores":	[-7.50810490794661]
								}, {
									"case":	546,
									"scores":	[-7.50810490794661]
								}, {
									"case":	547,
									"scores":	[-7.50810490794661]
								}, {
									"case":	548,
									"scores":	[-7.50810490794661]
								}, {
									"case":	549,
									"scores":	[-7.50810490794661]
								}, {
									"case":	550,
									"scores":	[-7.50810490794661]
								}, {
									"case":	551,
									"scores":	[-7.50810490794661]
								}, {
									"case":	552,
									"scores":	[-7.50810490794661]
								}, {
									"case":	553,
									"scores":	[-7.50810490794661]
								}, {
									"case":	554,
									"scores":	[-7.50810490794661]
								}, {
									"case":	555,
									"scores":	[-7.50810490794661]
								}, {
									"case":	556,
									"scores":	[-7.50810490794661]
								}, {
									"case":	557,
									"scores":	[-7.50810490794661]
								}, {
									"case":	558,
									"scores":	[-7.50810490794661]
								}, {
									"case":	559,
									"scores":	[-7.50810490794661]
								}, {
									"case":	560,
									"scores":	[-7.50810490794661]
								}, {
									"case":	561,
									"scores":	[-7.50810490794661]
								}, {
									"case":	562,
									"scores":	[-7.50810490794661]
								}, {
									"case":	563,
									"scores":	[-7.50810490794661]
								}, {
									"case":	564,
									"scores":	[-7.50810490794661]
								}, {
									"case":	565,
									"scores":	[-7.50810490794661]
								}, {
									"case":	566,
									"scores":	[-7.50810490794661]
								}, {
									"case":	567,
									"scores":	[-7.50810490794661]
								}, {
									"case":	568,
									"scores":	[-7.50810490794661]
								}, {
									"case":	569,
									"scores":	[-7.50810490794661]
								}, {
									"case":	570,
									"scores":	[-7.50810490794661]
								}, {
									"case":	571,
									"scores":	[-7.50810490794661]
								}, {
									"case":	572,
									"scores":	[-7.50810490794661]
								}, {
									"case":	573,
									"scores":	[-7.50810490794661]
								}, {
									"case":	574,
									"scores":	[-7.50810490794661]
								}, {
									"case":	575,
									"scores":	[-7.50810490794661]
								}, {
									"case":	576,
									"scores":	[-7.50810490794661]
								}, {
									"case":	577,
									"scores":	[-7.50810490794661]
								}, {
									"case":	578,
									"scores":	[-7.50810490794661]
								}, {
									"case":	579,
									"scores":	[-7.50810490794661]
								}, {
									"case":	580,
									"scores":	[-7.50810490794661]
								}, {
									"case":	581,
									"scores":	[-7.50810490794661]
								}, {
									"case":	582,
									"scores":	[-7.50810490794661]
								}, {
									"case":	583,
									"scores":	[-7.50810490794661]
								}, {
									"case":	584,
									"scores":	[-7.50810490794661]
								}, {
									"case":	585,
									"scores":	[-7.50810490794661]
								}, {
									"case":	586,
									"scores":	[-7.50810490794661]
								}, {
									"case":	587,
									"scores":	[-7.50810490794661]
								}, {
									"case":	588,
									"scores":	[-7.50810490794661]
								}, {
									"case":	589,
									"scores":	[-7.50810490794661]
								}, {
									"case":	590,
									"scores":	[-7.50810490794661]
								}, {
									"case":	591,
									"scores":	[-7.50810490794661]
								}, {
									"case":	592,
									"scores":	[-7.50810490794661]
								}, {
									"case":	593,
									"scores":	[-7.50810490794661]
								}, {
									"case":	594,
									"scores":	[-7.50810490794661]
								}, {
									"case":	595,
									"scores":	[-7.50810490794661]
								}, {
									"case":	596,
									"scores":	[-7.50810490794661]
								}, {
									"case":	597,
									"scores":	[-7.50810490794661]
								}, {
									"case":	598,
									"scores":	[-7.50810490794661]
								}, {
									"case":	599,
									"scores":	[-7.50810490794661]
								}, {
									"case":	600,
									"scores":	[-7.50810490794661]
								}, {
									"case":	601,
									"scores":	[-7.50810490794661]
								}, {
									"case":	602,
									"scores":	[-7.50810490794661]
								}, {
									"case":	603,
									"scores":	[-7.50810490794661]
								}, {
									"case":	604,
									"scores":	[-7.50810490794661]
								}, {
									"case":	605,
									"scores":	[-7.50810490794661]
								}, {
									"case":	606,
									"scores":	[-7.50810490794661]
								}, {
									"case":	607,
									"scores":	[-7.50810490794661]
								}, {
									"case":	608,
									"scores":	[-7.50810490794661]
								}, {
									"case":	609,
									"scores":	[-7.50810490794661]
								}, {
									"case":	610,
									"scores":	[-7.50810490794661]
								}, {
									"case":	611,
									"scores":	[-7.50810490794661]
								}, {
									"case":	612,
									"scores":	[-7.50810490794661]
								}, {
									"case":	613,
									"scores":	[-7.50810490794661]
								}, {
									"case":	614,
									"scores":	[-7.50810490794661]
								}, {
									"case":	615,
									"scores":	[-7.50810490794661]
								}, {
									"case":	616,
									"scores":	[-7.50810490794661]
								}, {
									"case":	617,
									"scores":	[-7.50810490794661]
								}, {
									"case":	618,
									"scores":	[-7.50810490794661]
								}, {
									"case":	619,
									"scores":	[-7.50810490794661]
								}, {
									"case":	620,
									"scores":	[-7.50810490794661]
								}, {
									"case":	621,
									"scores":	[-7.50810490794661]
								}, {
									"case":	622,
									"scores":	[-7.50810490794661]
								}, {
									"case":	623,
									"scores":	[-7.50810490794661]
								}, {
									"case":	624,
									"scores":	[-7.50810490794661]
								}, {
									"case":	625,
									"scores":	[-7.50810490794661]
								}, {
									"case":	626,
									"scores":	[-7.50810490794661]
								}, {
									"case":	627,
									"scores":	[-7.50810490794661]
								}, {
									"case":	628,
									"scores":	[-7.50810490794661]
								}, {
									"case":	629,
									"scores":	[-7.50810490794661]
								}, {
									"case":	630,
									"scores":	[-7.50810490794661]
								}, {
									"case":	631,
									"scores":	[-7.50810490794661]
								}, {
									"case":	632,
									"scores":	[-7.50810490794661]
								}, {
									"case":	633,
									"scores":	[-7.50810490794661]
								}, {
									"case":	634,
									"scores":	[-7.50810490794661]
								}, {
									"case":	635,
									"scores":	[-7.50810490794661]
								}, {
									"case":	636,
									"scores":	[-7.50810490794661]
								}, {
									"case":	637,
									"scores":	[-7.50810490794661]
								}, {
									"case":	638,
									"scores":	[-7.50810490794661]
								}, {
									"case":	639,
									"scores":	[-7.50810490794661]
								}, {
									"case":	640,
									"scores":	[-7.50810490794661]
								}, {
									"case":	641,
									"scores":	[-7.50810490794661]
								}, {
									"case":	642,
									"scores":	[-7.50810490794661]
								}, {
									"case":	643,
									"scores":	[-7.50810490794661]
								}, {
									"case":	644,
									"scores":	[-7.50810490794661]
								}, {
									"case":	645,
									"scores":	[-7.50810490794661]
								}, {
									"case":	646,
									"scores":	[-7.50810490794661]
								}, {
									"case":	647,
									"scores":	[-7.50810490794661]
								}, {
									"case":	648,
									"scores":	[-7.50810490794661]
								}, {
									"case":	649,
									"scores":	[-7.50810490794661]
								}, {
									"case":	650,
									"scores":	[-7.50810490794661]
								}, {
									"case":	651,
									"scores":	[-7.50810490794661]
								}, {
									"case":	652,
									"scores":	[-7.50810490794661]
								}, {
									"case":	653,
									"scores":	[-7.50810490794661]
								}, {
									"case":	654,
									"scores":	[-7.50810490794661]
								}, {
									"case":	655,
									"scores":	[-7.50810490794661]
								}, {
									"case":	656,
									"scores":	[-7.50810490794661]
								}, {
									"case":	657,
									"scores":	[-7.50810490794661]
								}, {
									"case":	658,
									"scores":	[-7.50810490794661]
								}, {
									"case":	659,
									"scores":	[-7.50810490794661]
								}, {
									"case":	660,
									"scores":	[-7.50810490794661]
								}, {
									"case":	661,
									"scores":	[-7.50810490794661]
								}, {
									"case":	662,
									"scores":	[-7.50810490794661]
								}, {
									"case":	663,
									"scores":	[-7.50810490794661]
								}, {
									"case":	664,
									"scores":	[-7.50810490794661]
								}, {
									"case":	665,
									"scores":	[-7.50810490794661]
								}, {
									"case":	666,
									"scores":	[-7.50810490794661]
								}, {
									"case":	667,
									"scores":	[-7.50810490794661]
								}, {
									"case":	668,
									"scores":	[-7.50810490794661]
								}, {
									"case":	669,
									"scores":	[-7.50810490794661]
								}, {
									"case":	670,
									"scores":	[-7.50810490794661]
								}, {
									"case":	671,
									"scores":	[-7.50810490794661]
								}, {
									"case":	672,
									"scores":	[-7.50810490794661]
								}, {
									"case":	673,
									"scores":	[-7.50810490794661]
								}, {
									"case":	674,
									"scores":	[-7.50810490794661]
								}, {
									"case":	675,
									"scores":	[-7.50810490794661]
								}, {
									"case":	676,
									"scores":	[-7.50810490794661]
								}, {
									"case":	677,
									"scores":	[-7.50810490794661]
								}, {
									"case":	678,
									"scores":	[-7.50810490794661]
								}, {
									"case":	679,
									"scores":	[-7.50810490794661]
								}, {
									"case":	680,
									"scores":	[-7.50810490794661]
								}, {
									"case":	681,
									"scores":	[-7.50810490794661]
								}, {
									"case":	682,
									"scores":	[-7.50810490794661]
								}, {
									"case":	683,
									"scores":	[-7.50810490794661]
								}, {
									"case":	684,
									"scores":	[-7.50810490794661]
								}, {
									"case":	685,
									"scores":	[-7.50810490794661]
								}, {
									"case":	686,
									"scores":	[-7.50810490794661]
								}, {
									"case":	687,
									"scores":	[-7.50810490794661]
								}, {
									"case":	688,
									"scores":	[-7.50810490794661]
								}, {
									"case":	689,
									"scores":	[-7.50810490794661]
								}, {
									"case":	690,
									"scores":	[-7.50810490794661]
								}, {
									"case":	691,
									"scores":	[-7.50810490794661]
								}, {
									"case":	692,
									"scores":	[-7.50810490794661]
								}, {
									"case":	693,
									"scores":	[-7.50810490794661]
								}, {
									"case":	694,
									"scores":	[-7.50810490794661]
								}, {
									"case":	695,
									"scores":	[-7.50810490794661]
								}, {
									"case":	696,
									"scores":	[-7.50810490794661]
								}, {
									"case":	697,
									"scores":	[-7.50810490794661]
								}, {
									"case":	698,
									"scores":	[-7.50810490794661]
								}, {
									"case":	699,
									"scores":	[-7.50810490794661]
								}, {
									"case":	700,
									"scores":	[-7.50810490794661]
								}, {
									"case":	701,
									"scores":	[-7.50810490794661]
								}, {
									"case":	702,
									"scores":	[-7.50810490794661]
								}, {
									"case":	703,
									"scores":	[-7.50810490794661]
								}, {
									"case":	704,
									"scores":	[-7.50810490794661]
								}, {
									"case":	705,
									"scores":	[-7.50810490794661]
								}, {
									"case":	706,
									"scores":	[-7.50810490794661]
								}, {
									"case":	707,
									"scores":	[-7.50810490794661]
								}, {
									"case":	708,
									"scores":	[-7.50810490794661]
								}, {
									"case":	709,
									"scores":	[-7.50810490794661]
								}, {
									"case":	710,
									"scores":	[-7.50810490794661]
								}, {
									"case":	711,
									"scores":	[-7.50810490794661]
								}, {
									"case":	712,
									"scores":	[-7.50810490794661]
								}, {
									"case":	713,
									"scores":	[-7.50810490794661]
								}, {
									"case":	714,
									"scores":	[-7.50810490794661]
								}, {
									"case":	715,
									"scores":	[-7.50810490794661]
								}, {
									"case":	716,
									"scores":	[-7.50810490794661]
								}, {
									"case":	717,
									"scores":	[-7.50810490794661]
								}, {
									"case":	718,
									"scores":	[-7.50810490794661]
								}, {
									"case":	719,
									"scores":	[-7.50810490794661]
								}, {
									"case":	720,
									"scores":	[-7.50810490794661]
								}, {
									"case":	721,
									"scores":	[-7.50810490794661]
								}, {
									"case":	722,
									"scores":	[-7.50810490794661]
								}, {
									"case":	723,
									"scores":	[-7.50810490794661]
								}, {
									"case":	724,
									"scores":	[-7.50810490794661]
								}, {
									"case":	725,
									"scores":	[-7.50810490794661]
								}, {
									"case":	726,
									"scores":	[-7.50810490794661]
								}, {
									"case":	727,
									"scores":	[-7.50810490794661]
								}, {
									"case":	728,
									"scores":	[-7.50810490794661]
								}, {
									"case":	729,
									"scores":	[-7.50810490794661]
								}, {
									"case":	730,
									"scores":	[-7.50810490794661]
								}, {
									"case":	731,
									"scores":	[-7.50810490794661]
								}, {
									"case":	732,
									"scores":	[-7.50810490794661]
								}, {
									"case":	733,
									"scores":	[-7.50810490794661]
								}, {
									"case":	734,
									"scores":	[-7.50810490794661]
								}, {
									"case":	735,
									"scores":	[-7.50810490794661]
								}, {
									"case":	736,
									"scores":	[-7.50810490794661]
								}, {
									"case":	737,
									"scores":	[-7.50810490794661]
								}, {
									"case":	738,
									"scores":	[-7.50810490794661]
								}, {
									"case":	739,
									"scores":	[-7.50810490794661]
								}, {
									"case":	740,
									"scores":	[-7.50810490794661]
								}, {
									"case":	741,
									"scores":	[-7.50810490794661]
								}, {
									"case":	742,
									"scores":	[-7.50810490794661]
								}, {
									"case":	743,
									"scores":	[-7.50810490794661]
								}, {
									"case":	744,
									"scores":	[-7.50810490794661]
								}, {
									"case":	745,
									"scores":	[-7.50810490794661]
								}, {
									"case":	746,
									"scores":	[-7.50810490794661]
								}, {
									"case":	747,
									"scores":	[-7.50810490794661]
								}, {
									"case":	748,
									"scores":	[-7.50810490794661]
								}, {
									"case":	749,
									"scores":	[-7.50810490794661]
								}, {
									"case":	750,
									"scores":	[-7.50810490794661]
								}, {
									"case":	751,
									"scores":	[-7.50810490794661]
								}, {
									"case":	752,
									"scores":	[-7.50810490794661]
								}, {
									"case":	753,
									"scores":	[-7.50810490794661]
								}, {
									"case":	754,
									"scores":	[-7.50810490794661]
								}, {
									"case":	755,
									"scores":	[-7.50810490794661]
								}, {
									"case":	756,
									"scores":	[-7.50810490794661]
								}, {
									"case":	757,
									"scores":	[-7.50810490794661]
								}, {
									"case":	758,
									"scores":	[-7.50810490794661]
								}, {
									"case":	759,
									"scores":	[-7.50810490794661]
								}, {
									"case":	760,
									"scores":	[-7.50810490794661]
								}, {
									"case":	761,
									"scores":	[-7.50810490794661]
								}, {
									"case":	762,
									"scores":	[-7.50810490794661]
								}, {
									"case":	763,
									"scores":	[-7.50810490794661]
								}, {
									"case":	764,
									"scores":	[-7.50810490794661]
								}, {
									"case":	765,
									"scores":	[-7.50810490794661]
								}, {
									"case":	766,
									"scores":	[-7.50810490794661]
								}, {
									"case":	767,
									"scores":	[-7.50810490794661]
								}, {
									"case":	768,
									"scores":	[-7.50810490794661]
								}, {
									"case":	769,
									"scores":	[-7.50810490794661]
								}, {
									"case":	770,
									"scores":	[-7.50810490794661]
								}, {
									"case":	771,
									"scores":	[-7.50810490794661]
								}, {
									"case":	772,
									"scores":	[-7.50810490794661]
								}, {
									"case":	773,
									"scores":	[-7.50810490794661]
								}, {
									"case":	774,
									"scores":	[-7.50810490794661]
								}, {
									"case":	775,
									"scores":	[-7.50810490794661]
								}, {
									"case":	776,
									"scores":	[-7.50810490794661]
								}, {
									"case":	777,
									"scores":	[-7.50810490794661]
								}, {
									"case":	778,
									"scores":	[-7.50810490794661]
								}, {
									"case":	779,
									"scores":	[-7.50810490794661]
								}, {
									"case":	780,
									"scores":	[-7.50810490794661]
								}, {
									"case":	781,
									"scores":	[-7.50810490794661]
								}, {
									"case":	782,
									"scores":	[-7.50810490794661]
								}, {
									"case":	783,
									"scores":	[-7.50810490794661]
								}, {
									"case":	784,
									"scores":	[-7.50810490794661]
								}, {
									"case":	785,
									"scores":	[-7.50810490794661]
								}, {
									"case":	786,
									"scores":	[-7.50810490794661]
								}, {
									"case":	787,
									"scores":	[-7.50810490794661]
								}, {
									"case":	788,
									"scores":	[-7.50810490794661]
								}, {
									"case":	789,
									"scores":	[-7.50810490794661]
								}, {
									"case":	790,
									"scores":	[-7.50810490794661]
								}, {
									"case":	791,
									"scores":	[-7.50810490794661]
								}, {
									"case":	792,
									"scores":	[-7.50810490794661]
								}, {
									"case":	793,
									"scores":	[-7.50810490794661]
								}, {
									"case":	794,
									"scores":	[-7.50810490794661]
								}, {
									"case":	795,
									"scores":	[-7.50810490794661]
								}, {
									"case":	796,
									"scores":	[-7.50810490794661]
								}, {
									"case":	797,
									"scores":	[-7.50810490794661]
								}, {
									"case":	798,
									"scores":	[-7.50810490794661]
								}, {
									"case":	799,
									"scores":	[-7.50810490794661]
								}, {
									"case":	800,
									"scores":	[-7.50810490794661]
								}, {
									"case":	801,
									"scores":	[-7.50810490794661]
								}, {
									"case":	802,
									"scores":	[-7.50810490794661]
								}, {
									"case":	803,
									"scores":	[-7.50810490794661]
								}, {
									"case":	804,
									"scores":	[-7.50810490794661]
								}, {
									"case":	805,
									"scores":	[-7.50810490794661]
								}, {
									"case":	806,
									"scores":	[-7.50810490794661]
								}, {
									"case":	807,
									"scores":	[-7.50810490794661]
								}, {
									"case":	808,
									"scores":	[-7.50810490794661]
								}, {
									"case":	809,
									"scores":	[-7.50810490794661]
								}, {
									"case":	810,
									"scores":	[-7.50810490794661]
								}, {
									"case":	811,
									"scores":	[-7.50810490794661]
								}, {
									"case":	812,
									"scores":	[-7.50810490794661]
								}, {
									"case":	813,
									"scores":	[-7.50810490794661]
								}, {
									"case":	814,
									"scores":	[-7.50810490794661]
								}, {
									"case":	815,
									"scores":	[-7.50810490794661]
								}, {
									"case":	816,
									"scores":	[-7.50810490794661]
								}, {
									"case":	817,
									"scores":	[-7.50810490794661]
								}, {
									"case":	818,
									"scores":	[-7.50810490794661]
								}, {
									"case":	819,
									"scores":	[-7.50810490794661]
								}, {
									"case":	820,
									"scores":	[-7.50810490794661]
								}, {
									"case":	821,
									"scores":	[-7.50810490794661]
								}, {
									"case":	822,
									"scores":	[-7.50810490794661]
								}, {
									"case":	823,
									"scores":	[-7.50810490794661]
								}, {
									"case":	824,
									"scores":	[-7.50810490794661]
								}, {
									"case":	825,
									"scores":	[-7.50810490794661]
								}, {
									"case":	826,
									"scores":	[-7.50810490794661]
								}, {
									"case":	827,
									"scores":	[-7.50810490794661]
								}, {
									"case":	828,
									"scores":	[-7.50810490794661]
								}, {
									"case":	829,
									"scores":	[-7.50810490794661]
								}, {
									"case":	830,
									"scores":	[-7.50810490794661]
								}, {
									"case":	831,
									"scores":	[-7.50810490794661]
								}, {
									"case":	832,
									"scores":	[-7.50810490794661]
								}, {
									"case":	833,
									"scores":	[-7.50810490794661]
								}, {
									"case":	834,
									"scores":	[-7.50810490794661]
								}, {
									"case":	835,
									"scores":	[-7.50810490794661]
								}, {
									"case":	836,
									"scores":	[-7.50810490794661]
								}, {
									"case":	837,
									"scores":	[-7.50810490794661]
								}, {
									"case":	838,
									"scores":	[-7.50810490794661]
								}, {
									"case":	839,
									"scores":	[-7.50810490794661]
								}, {
									"case":	840,
									"scores":	[-7.50810490794661]
								}, {
									"case":	841,
									"scores":	[-7.50810490794661]
								}, {
									"case":	842,
									"scores":	[-7.50810490794661]
								}, {
									"case":	843,
									"scores":	[-7.50810490794661]
								}, {
									"case":	844,
									"scores":	[-7.50810490794661]
								}, {
									"case":	845,
									"scores":	[-7.50810490794661]
								}, {
									"case":	846,
									"scores":	[-7.50810490794661]
								}, {
									"case":	847,
									"scores":	[-7.50810490794661]
								}, {
									"case":	848,
									"scores":	[-7.50810490794661]
								}, {
									"case":	849,
									"scores":	[-7.50810490794661]
								}, {
									"case":	850,
									"scores":	[-7.50810490794661]
								}, {
									"case":	851,
									"scores":	[-7.50810490794661]
								}, {
									"case":	852,
									"scores":	[-7.50810490794661]
								}, {
									"case":	853,
									"scores":	[-7.50810490794661]
								}, {
									"case":	854,
									"scores":	[-7.50810490794661]
								}, {
									"case":	855,
									"scores":	[-7.50810490794661]
								}, {
									"case":	856,
									"scores":	[-7.50810490794661]
								}, {
									"case":	857,
									"scores":	[-7.50810490794661]
								}, {
									"case":	858,
									"scores":	[-7.50810490794661]
								}, {
									"case":	859,
									"scores":	[-7.50810490794661]
								}, {
									"case":	860,
									"scores":	[-7.50810490794661]
								}, {
									"case":	861,
									"scores":	[-7.50810490794661]
								}, {
									"case":	862,
									"scores":	[-7.50810490794661]
								}, {
									"case":	863,
									"scores":	[-7.50810490794661]
								}, {
									"case":	864,
									"scores":	[-7.50810490794661]
								}, {
									"case":	865,
									"scores":	[-7.50810490794661]
								}, {
									"case":	866,
									"scores":	[-7.50810490794661]
								}, {
									"case":	867,
									"scores":	[-7.50810490794661]
								}, {
									"case":	868,
									"scores":	[-7.50810490794661]
								}, {
									"case":	869,
									"scores":	[-7.50810490794661]
								}, {
									"case":	870,
									"scores":	[-7.50810490794661]
								}, {
									"case":	871,
									"scores":	[-7.50810490794661]
								}, {
									"case":	872,
									"scores":	[-7.50810490794661]
								}, {
									"case":	873,
									"scores":	[-7.50810490794661]
								}, {
									"case":	874,
									"scores":	[-7.50810490794661]
								}, {
									"case":	875,
									"scores":	[-7.50810490794661]
								}, {
									"case":	876,
									"scores":	[-7.50810490794661]
								}, {
									"case":	877,
									"scores":	[-7.50810490794661]
								}, {
									"case":	878,
									"scores":	[-7.50810490794661]
								}, {
									"case":	879,
									"scores":	[-7.50810490794661]
								}, {
									"case":	880,
									"scores":	[-7.50810490794661]
								}, {
									"case":	881,
									"scores":	[-7.50810490794661]
								}, {
									"case":	882,
									"scores":	[-7.50810490794661]
								}, {
									"case":	883,
									"scores":	[-7.50810490794661]
								}, {
									"case":	884,
									"scores":	[-7.50810490794661]
								}, {
									"case":	885,
									"scores":	[-7.50810490794661]
								}, {
									"case":	886,
									"scores":	[-7.50810490794661]
								}, {
									"case":	887,
									"scores":	[-7.50810490794661]
								}, {
									"case":	888,
									"scores":	[-7.50810490794661]
								}, {
									"case":	889,
									"scores":	[-7.50810490794661]
								}, {
									"case":	890,
									"scores":	[-7.50810490794661]
								}, {
									"case":	891,
									"scores":	[-7.50810490794661]
								}, {
									"case":	892,
									"scores":	[-7.50810490794661]
								}, {
									"case":	893,
									"scores":	[-7.50810490794661]
								}, {
									"case":	894,
									"scores":	[-7.50810490794661]
								}, {
									"case":	895,
									"scores":	[-7.50810490794661]
								}, {
									"case":	896,
									"scores":	[-7.50810490794661]
								}, {
									"case":	897,
									"scores":	[-7.50810490794661]
								}, {
									"case":	898,
									"scores":	[-7.50810490794661]
								}, {
									"case":	899,
									"scores":	[-7.50810490794661]
								}, {
									"case":	900,
									"scores":	[-7.50810490794661]
								}, {
									"case":	901,
									"scores":	[-7.50810490794661]
								}, {
									"case":	902,
									"scores":	[-7.50810490794661]
								}, {
									"case":	903,
									"scores":	[-7.50810490794661]
								}, {
									"case":	904,
									"scores":	[-7.50810490794661]
								}, {
									"case":	905,
									"scores":	[-7.50810490794661]
								}, {
									"case":	906,
									"scores":	[-7.50810490794661]
								}, {
									"case":	907,
									"scores":	[-7.50810490794661]
								}, {
									"case":	908,
									"scores":	[-7.50810490794661]
								}, {
									"case":	909,
									"scores":	[-7.50810490794661]
								}, {
									"case":	910,
									"scores":	[-7.50810490794661]
								}, {
									"case":	911,
									"scores":	[-7.50810490794661]
								}, {
									"case":	912,
									"scores":	[-7.50810490794661]
								}, {
									"case":	913,
									"scores":	[-7.50810490794661]
								}, {
									"case":	914,
									"scores":	[-7.50810490794661]
								}, {
									"case":	915,
									"scores":	[-7.50810490794661]
								}, {
									"case":	916,
									"scores":	[-7.50810490794661]
								}, {
									"case":	917,
									"scores":	[-7.50810490794661]
								}, {
									"case":	918,
									"scores":	[-7.50810490794661]
								}, {
									"case":	919,
									"scores":	[-7.50810490794661]
								}, {
									"case":	920,
									"scores":	[-7.50810490794661]
								}, {
									"case":	921,
									"scores":	[-7.50810490794661]
								}, {
									"case":	922,
									"scores":	[-7.50810490794661]
								}, {
									"case":	923,
									"scores":	[-7.50810490794661]
								}, {
									"case":	924,
									"scores":	[-7.50810490794661]
								}, {
									"case":	925,
									"scores":	[-7.50810490794661]
								}, {
									"case":	926,
									"scores":	[-7.50810490794661]
								}, {
									"case":	927,
									"scores":	[-7.50810490794661]
								}, {
									"case":	928,
									"scores":	[-7.50810490794661]
								}, {
									"case":	929,
									"scores":	[-7.50810490794661]
								}, {
									"case":	930,
									"scores":	[-7.50810490794661]
								}, {
									"case":	931,
									"scores":	[-7.50810490794661]
								}, {
									"case":	932,
									"scores":	[-7.50810490794661]
								}, {
									"case":	933,
									"scores":	[-7.50810490794661]
								}, {
									"case":	934,
									"scores":	[-7.50810490794661]
								}, {
									"case":	935,
									"scores":	[-7.50810490794661]
								}, {
									"case":	936,
									"scores":	[-7.50810490794661]
								}, {
									"case":	937,
									"scores":	[-7.50810490794661]
								}, {
									"case":	938,
									"scores":	[-7.50810490794661]
								}, {
									"case":	939,
									"scores":	[-7.50810490794661]
								}, {
									"case":	940,
									"scores":	[-7.50810490794661]
								}, {
									"case":	941,
									"scores":	[-7.50810490794661]
								}, {
									"case":	942,
									"scores":	[-7.50810490794661]
								}, {
									"case":	943,
									"scores":	[-7.50810490794661]
								}, {
									"case":	944,
									"scores":	[-7.50810490794661]
								}, {
									"case":	945,
									"scores":	[-7.50810490794661]
								}, {
									"case":	946,
									"scores":	[-7.50810490794661]
								}, {
									"case":	947,
									"scores":	[-7.50810490794661]
								}, {
									"case":	948,
									"scores":	[-7.50810490794661]
								}, {
									"case":	949,
									"scores":	[-7.50810490794661]
								}, {
									"case":	950,
									"scores":	[-7.50810490794661]
								}, {
									"case":	951,
									"scores":	[-7.50810490794661]
								}, {
									"case":	952,
									"scores":	[-7.50810490794661]
								}, {
									"case":	953,
									"scores":	[-7.50810490794661]
								}, {
									"case":	954,
									"scores":	[-7.50810490794661]
								}, {
									"case":	955,
									"scores":	[-7.50810490794661]
								}, {
									"case":	956,
									"scores":	[-7.50810490794661]
								}, {
									"case":	957,
									"scores":	[-7.50810490794661]
								}, {
									"case":	958,
									"scores":	[-7.50810490794661]
								}, {
									"case":	959,
									"scores":	[-7.50810490794661]
								}, {
									"case":	960,
									"scores":	[-7.50810490794661]
								}, {
									"case":	961,
									"scores":	[-7.50810490794661]
								}, {
									"case":	962,
									"scores":	[-7.50810490794661]
								}, {
									"case":	963,
									"scores":	[-7.50810490794661]
								}, {
									"case":	964,
									"scores":	[-7.50810490794661]
								}, {
									"case":	965,
									"scores":	[-7.50810490794661]
								}, {
									"case":	966,
									"scores":	[-7.50810490794661]
								}, {
									"case":	967,
									"scores":	[-7.50810490794661]
								}, {
									"case":	968,
									"scores":	[-7.50810490794661]
								}, {
									"case":	969,
									"scores":	[-7.50810490794661]
								}, {
									"case":	970,
									"scores":	[-7.50810490794661]
								}, {
									"case":	971,
									"scores":	[-7.50810490794661]
								}, {
									"case":	972,
									"scores":	[-7.50810490794661]
								}, {
									"case":	973,
									"scores":	[-7.50810490794661]
								}, {
									"case":	974,
									"scores":	[-7.50810490794661]
								}, {
									"case":	975,
									"scores":	[-7.50810490794661]
								}, {
									"case":	976,
									"scores":	[-7.50810490794661]
								}, {
									"case":	977,
									"scores":	[-7.50810490794661]
								}, {
									"case":	978,
									"scores":	[-7.50810490794661]
								}, {
									"case":	979,
									"scores":	[-7.50810490794661]
								}, {
									"case":	980,
									"scores":	[-7.50810490794661]
								}, {
									"case":	981,
									"scores":	[-7.50810490794661]
								}, {
									"case":	982,
									"scores":	[-7.50810490794661]
								}, {
									"case":	983,
									"scores":	[-7.50810490794661]
								}, {
									"case":	984,
									"scores":	[-7.50810490794661]
								}, {
									"case":	985,
									"scores":	[-7.50810490794661]
								}, {
									"case":	986,
									"scores":	[-7.50810490794661]
								}, {
									"case":	987,
									"scores":	[-7.50810490794661]
								}, {
									"case":	988,
									"scores":	[-7.50810490794661]
								}, {
									"case":	989,
									"scores":	[-7.50810490794661]
								}, {
									"case":	990,
									"scores":	[-7.50810490794661]
								}, {
									"case":	991,
									"scores":	[-7.50810490794661]
								}, {
									"case":	992,
									"scores":	[-7.50810490794661]
								}, {
									"case":	993,
									"scores":	[-7.50810490794661]
								}, {
									"case":	994,
									"scores":	[-7.50810490794661]
								}, {
									"case":	995,
									"scores":	[-7.50810490794661]
								}, {
									"case":	996,
									"scores":	[-7.50810490794661]
								}, {
									"case":	997,
									"scores":	[-7.50810490794661]
								}, {
									"case":	998,
									"scores":	[-7.50810490794661]
								}, {
									"case":	999,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1000,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1001,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1002,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1003,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1004,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1005,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1006,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1007,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1008,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1009,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1010,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1011,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1012,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1013,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1014,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1015,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1016,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1017,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1018,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1019,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1020,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1021,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1022,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1023,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1024,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1025,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1026,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1027,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1028,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1029,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1030,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1031,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1032,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1033,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1034,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1035,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1036,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1037,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1038,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1039,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1040,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1041,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1042,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1043,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1044,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1045,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1046,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1047,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1048,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1049,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1050,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1051,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1052,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1053,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1054,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1055,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1056,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1057,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1058,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1059,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1060,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1061,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1062,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1063,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1064,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1065,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1066,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1067,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1068,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1069,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1070,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1071,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1072,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1073,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1074,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1075,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1076,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1077,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1078,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1079,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1080,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1081,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1082,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1083,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1084,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1085,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1086,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1087,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1088,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1089,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1090,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1091,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1092,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1093,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1094,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1095,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1096,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1097,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1098,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1099,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1100,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1101,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1102,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1103,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1104,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1105,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1106,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1107,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1108,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1109,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1110,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1111,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1112,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1113,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1114,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1115,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1116,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1117,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1118,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1119,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1120,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1121,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1122,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1123,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1124,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1125,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1126,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1127,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1128,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1129,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1130,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1131,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1132,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1133,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1134,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1135,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1136,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1137,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1138,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1139,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1140,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1141,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1142,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1143,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1144,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1145,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1146,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1147,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1148,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1149,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1150,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1151,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1152,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1153,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1154,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1155,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1156,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1157,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1158,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1159,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1160,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1161,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1162,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1163,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1164,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1165,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1166,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1167,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1168,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1169,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1170,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1171,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1172,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1173,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1174,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1175,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1176,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1177,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1178,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1179,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1180,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1181,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1182,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1183,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1184,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1185,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1186,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1187,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1188,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1189,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1190,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1191,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1192,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1193,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1194,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1195,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1196,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1197,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1198,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1199,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1200,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1201,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1202,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1203,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1204,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1205,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1206,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1207,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1208,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1209,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1210,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1211,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1212,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1213,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1214,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1215,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1216,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1217,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1218,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1219,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1220,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1221,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1222,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1223,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1224,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1225,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1226,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1227,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1228,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1229,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1230,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1231,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1232,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1233,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1234,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1235,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1236,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1237,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1238,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1239,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1240,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1241,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1242,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1243,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1244,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1245,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1246,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1247,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1248,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1249,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1250,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1251,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1252,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1253,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1254,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1255,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1256,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1257,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1258,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1259,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1260,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1261,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1262,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1263,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1264,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1265,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1266,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1267,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1268,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1269,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1270,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1271,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1272,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1273,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1274,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1275,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1276,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1277,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1278,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1279,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1280,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1281,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1282,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1283,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1284,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1285,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1286,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1287,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1288,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1289,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1290,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1291,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1292,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1293,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1294,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1295,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1296,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1297,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1298,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1299,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1300,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1301,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1302,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1303,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1304,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1305,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1306,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1307,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1308,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1309,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1310,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1311,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1312,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1313,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1314,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1315,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1316,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1317,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1318,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1319,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1320,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1321,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1322,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1323,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1324,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1325,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1326,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1327,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1328,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1329,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1330,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1331,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1332,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1333,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1334,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1335,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1336,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1337,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1338,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1339,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1340,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1341,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1342,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1343,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1344,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1345,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1346,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1347,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1348,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1349,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1350,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1351,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1352,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1353,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1354,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1355,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1356,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1357,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1358,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1359,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1360,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1361,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1362,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1363,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1364,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1365,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1366,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1367,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1368,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1369,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1370,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1371,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1372,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1373,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1374,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1375,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1376,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1377,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1378,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1379,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1380,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1381,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1382,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1383,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1384,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1385,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1386,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1387,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1388,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1389,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1390,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1391,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1392,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1393,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1394,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1395,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1396,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1397,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1398,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1399,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1400,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1401,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1402,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1403,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1404,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1405,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1406,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1407,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1408,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1409,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1410,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1411,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1412,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1413,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1414,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1415,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1416,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1417,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1418,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1419,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1420,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1421,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1422,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1423,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1424,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1425,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1426,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1427,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1428,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1429,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1430,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1431,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1432,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1433,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1434,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1435,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1436,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1437,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1438,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1439,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1440,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1441,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1442,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1443,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1444,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1445,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1446,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1447,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1448,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1449,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1450,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1451,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1452,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1453,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1454,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1455,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1456,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1457,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1458,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1459,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1460,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1461,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1462,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1463,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1464,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1465,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1466,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1467,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1468,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1469,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1470,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1471,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1472,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1473,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1474,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1475,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1476,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1477,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1478,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1479,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1480,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1481,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1482,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1483,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1484,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1485,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1486,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1487,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1488,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1489,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1490,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1491,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1492,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1493,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1494,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1495,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1496,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1497,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1498,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1499,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1500,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1501,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1502,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1503,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1504,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1505,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1506,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1507,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1508,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1509,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1510,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1511,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1512,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1513,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1514,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1515,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1516,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1517,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1518,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1519,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1520,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1521,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1522,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1523,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1524,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1525,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1526,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1527,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1528,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1529,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1530,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1531,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1532,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1533,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1534,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1535,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1536,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1537,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1538,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1539,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1540,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1541,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1542,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1543,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1544,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1545,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1546,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1547,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1548,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1549,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1550,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1551,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1552,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1553,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1554,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1555,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1556,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1557,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1558,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1559,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1560,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1561,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1562,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1563,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1564,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1565,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1566,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1567,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1568,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1569,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1570,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1571,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1572,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1573,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1574,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1575,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1576,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1577,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1578,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1579,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1580,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1581,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1582,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1583,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1584,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1585,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1586,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1587,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1588,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1589,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1590,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1591,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1592,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1593,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1594,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1595,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1596,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1597,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1598,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1599,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1600,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1601,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1602,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1603,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1604,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1605,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1606,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1607,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1608,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1609,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1610,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1611,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1612,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1613,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1614,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1615,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1616,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1617,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1618,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1619,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1620,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1621,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1622,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1623,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1624,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1625,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1626,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1627,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1628,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1629,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1630,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1631,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1632,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1633,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1634,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1635,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1636,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1637,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1638,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1639,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1640,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1641,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1642,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1643,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1644,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1645,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1646,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1647,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1648,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1649,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1650,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1651,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1652,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1653,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1654,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1655,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1656,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1657,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1658,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1659,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1660,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1661,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1662,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1663,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1664,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1665,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1666,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1667,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1668,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1669,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1670,
									"scores":	[-7.50810490794661]
								}, {
									"case":	1671,
									"scores":	[-9.84495250794661, -9.08621781294661, -8.54116507594661, -10.649967082136611, -10.420970007946611, -10.11851171794661, -11.233247670946611, -10.11851171794661, -10.11851171794661, -9.86042600794661, -9.86042600794661, -9.86042600794661, -10.11851171794661, -10.672703670946611, -9.86042600794661, -9.86042600794661, -9.34165600794661, -10.11851171794661, -10.672703670946611, -10.11851171794661, -9.86042600794661, -10.672703670946611, -9.86042600794661, -9.86042600794661, -9.86042600794661, -9.86042600794661, -9.86042600794661]
								}, {
									"case":	1672,
									"scores":	[-9.84395250794661, -9.08521781294661, -8.54016507594661, -10.648967082136611, -10.41997000794661, -10.117511717946611, -11.232247670946611, -10.117511717946611, -10.117511717946611, -9.85942600794661, -9.85942600794661, -9.85942600794661, -10.117511717946611, -10.671703670946611, -9.85942600794661, -9.85942600794661, -9.34065600794661, -10.117511717946611, -10.671703670946611, -10.117511717946611, -9.85942600794661, -10.671703670946611, -9.85942600794661, -9.85942600794661, -9.85942600794661, -9.85942600794661, -9.85942600794661]
								}, {
									"case":	1673,
									"scores":	[-9.84395250794661, -9.08521781294661, -8.54016507594661, -10.648967082136611, -10.41997000794661, -10.117511717946611, -11.232247670946611, -10.117511717946611, -10.117511717946611, -9.85942600794661, -9.85942600794661, -9.85942600794661, -10.117511717946611, -10.671703670946611, -9.85942600794661, -9.85942600794661, -9.34065600794661, -10.117511717946611, -10.671703670946611, -10.117511717946611, -9.85942600794661, -10.671703670946611, -9.85942600794661, -9.85942600794661, -9.85942600794661, -9.85942600794661, -9.85942600794661]
								}, {
									"case":	1674,
									"scores":	[-9.84395250794661, -9.08521781294661, -8.54016507594661, -10.648967082136611, -10.41997000794661, -10.117511717946611, -11.232247670946611, -10.117511717946611, -10.117511717946611, -9.85942600794661, -9.85942600794661, -9.85942600794661, -10.117511717946611, -10.671703670946611, -9.85942600794661, -9.85942600794661, -9.34065600794661, -10.117511717946611, -10.671703670946611, -10.117511717946611, -9.85942600794661, -10.671703670946611, -9.85942600794661, -9.85942600794661, -9.85942600794661, -9.85942600794661, -9.85942600794661]
								}, {
									"case":	1675,
									"scores":	[-9.84767087794661, -9.08893618294661, -8.54388344594661, -10.652685452136611, -10.423688377946611, -10.121230087946611, -11.235966040946611, -10.121230087946611, -10.121230087946611, -9.86314437794661, -9.86314437794661, -9.86314437794661, -10.121230087946611, -10.675422040946611, -9.86314437794661, -9.86314437794661, -9.34437437794661, -10.121230087946611, -10.675422040946611, -10.121230087946611, -9.86314437794661, -10.675422040946611, -9.86314437794661, -9.86314437794661, -9.86314437794661, -9.86314437794661, -9.86314437794661]
								}]
						}, {
							"switch":	32,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	548,
							"begin_column":	24,
							"end_line":	553,
							"end_column":	17,
							"patch_codes":	["if (__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj))) {\n    codestr[i] = 3;\n    codestr[i + 1] = 2;\n    memset(codestr + i + 2, 9, 4);\n    do {\n        const_stack_top = -1;\n    } while (0);\n}\n", "if ((j == 3) || __is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj))) {\n    codestr[i] = 3;\n    codestr[i + 1] = 2;\n    memset(codestr + i + 2, 9, 4);\n    do {\n        const_stack_top = -1;\n    } while (0);\n}\n", "if ((j == 3) && !__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj))) {\n    codestr[i] = 3;\n    codestr[i + 1] = 2;\n    memset(codestr + i + 2, 9, 4);\n    do {\n        const_stack_top = -1;\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.6088427805681462, -3.2433083725681464, -3.2779653725681461, -6.0557873725681475, -5.5562467805681468, -5.4326687805681466, -6.7337481805681465, -5.4326687805681466, -5.4326687805681466, -5.0107027805681463, -5.0107027805681463, -5.0107027805681463, -5.4326687805681466, -6.188204180568146, -5.0107027805681463, -5.0107027805681463, -4.8393129405681465, -5.4326687805681466, -6.188204180568146, -5.4326687805681466, -5.0107027805681463, -6.188204180568146, -5.0107027805681463, -5.0107027805681463, -5.0107027805681463, -5.0107027805681463, -5.0107027805681463]
								}, {
									"case":	2,
									"scores":	[-1.7216455054281461, -2.3561110974281458, -2.390768097428146, -5.1685900974281456, -4.6690495054281458, -4.5454715054281465, -5.8465509054281464, -4.5454715054281465, -4.5454715054281465, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.5454715054281465, -5.3010069054281459, -4.1235055054281462, -4.1235055054281462, -3.952115665428146, -4.5454715054281465, -5.3010069054281459, -4.5454715054281465, -4.1235055054281462, -5.3010069054281459, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462]
								}, {
									"case":	3,
									"scores":	[-1.7216455054281461, -2.3561110974281458, -2.390768097428146, -5.1685900974281456, -4.6690495054281458, -4.5454715054281465, -5.8465509054281464, -4.5454715054281465, -4.5454715054281465, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.5454715054281465, -5.3010069054281459, -4.1235055054281462, -4.1235055054281462, -3.952115665428146, -4.5454715054281465, -5.3010069054281459, -4.5454715054281465, -4.1235055054281462, -5.3010069054281459, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462]
								}]
						}, {
							"switch":	37,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	548,
							"begin_column":	24,
							"end_line":	553,
							"end_column":	17,
							"patch_codes":	["if (!__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)))\n    if (j == 3) {\n        codestr[i] = 3;\n        codestr[i + 1] = 2;\n        memset(codestr + i + 2, 9, 4);\n        do {\n            const_stack_top = -1;\n        } while (0);\n    }\n", "if (!__is_neg(\"\", \"L548\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj)) && (j == 3)) {\n    codestr[i] = 3;\n    codestr[i + 1] = 2;\n    memset(codestr + i + 2, 9, 4);\n    do {\n        const_stack_top = -1;\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.57327290794661, -7.20773849994661, -7.24239549994661, -10.020217499946611, -9.52067690794661, -9.39709890794661, -10.698178307946609, -9.39709890794661, -9.39709890794661, -8.97513290794661, -8.97513290794661, -8.97513290794661, -9.39709890794661, -10.152634307946609, -8.97513290794661, -8.97513290794661, -8.80374306794661, -9.39709890794661, -10.152634307946609, -9.39709890794661, -8.97513290794661, -10.152634307946609, -8.97513290794661, -8.97513290794661, -8.97513290794661, -8.97513290794661, -8.97513290794661]
								}, {
									"case":	2,
									"scores":	[-6.49304660794661, -7.12751219994661, -7.16216919994661, -9.93999119994661, -9.44045060794661, -9.31687260794661, -10.617952007946609, -9.31687260794661, -9.31687260794661, -8.89490660794661, -8.89490660794661, -8.89490660794661, -9.31687260794661, -10.07240800794661, -8.89490660794661, -8.89490660794661, -8.72351676794661, -9.31687260794661, -10.07240800794661, -9.31687260794661, -8.89490660794661, -10.07240800794661, -8.89490660794661, -8.89490660794661, -8.89490660794661, -8.89490660794661, -8.89490660794661]
								}]
						}]
				}, {
					"line":	543,
					"switches":	[{
							"switch":	28,
							"types":	[[], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	544,
							"begin_column":	24,
							"end_line":	553,
							"end_column":	17,
							"patch_codes":	["if (__is_neg(\"\", \"L544\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj))) {\n    codestr[i] = 2;\n    memset(codestr + i + 1, 9, 5);\n    do {\n        const_stack_top = -1;\n    } while (0);\n} else if (j == 3) {\n    codestr[i] = 3;\n    codestr[i + 1] = 2;\n    memset(codestr + i + 2, 9, 4);\n    do {\n        const_stack_top = -1;\n    } while (0);\n}\n", "if ((j == 2) || __is_neg(\"\", \"L544\", 27, &(j), sizeof (j), &(i), sizeof (i), &(codestr), sizeof (codestr), &(const_stack_top), sizeof (const_stack_top), &(opcode), sizeof (opcode), &(blocks), sizeof (blocks), &(consts), sizeof (consts), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(h), sizeof (h), &(name), sizeof (name), &(names), sizeof (names), &(tgt), sizeof (tgt), &(tgttgt), sizeof (tgttgt), &(codelen), sizeof (codelen), &(addrmap), sizeof (addrmap), &(code), sizeof (code), &(lineno), sizeof (lineno), &(tabsiz), sizeof (tabsiz), &(lineno_obj), sizeof (lineno_obj), &(nops), sizeof (nops), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(new_line), sizeof (new_line), &(adj), sizeof (adj))) {\n    codestr[i] = 2;\n    memset(codestr + i + 1, 9, 5);\n    do {\n        const_stack_top = -1;\n    } while (0);\n} else if (j == 3) {\n    codestr[i] = 3;\n    codestr[i + 1] = 2;\n    memset(codestr + i + 2, 9, 4);\n    do {\n        const_stack_top = -1;\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.6883497805681458, -3.322815372568146, -3.3574723725681475, -6.135294372568147, -5.6357537805681472, -5.5121757805681471, -6.8132551805681469, -5.5121757805681471, -5.5121757805681471, -5.0902097805681468, -5.0902097805681468, -5.0902097805681468, -5.5121757805681471, -6.2677111805681465, -5.0902097805681468, -5.0902097805681468, -4.918819940568147, -5.5121757805681471, -6.2677111805681465, -5.5121757805681471, -5.0902097805681468, -6.2677111805681465, -5.0902097805681468, -5.0902097805681468, -5.0902097805681468, -5.0902097805681468, -5.0902097805681468]
								}, {
									"case":	2,
									"scores":	[-1.7216455054281461, -2.3561110974281458, -2.390768097428146, -5.1685900974281456, -4.6690495054281458, -4.5454715054281465, -5.8465509054281464, -4.5454715054281465, -4.5454715054281465, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.5454715054281465, -5.3010069054281459, -4.1235055054281462, -4.1235055054281462, -3.952115665428146, -4.5454715054281465, -5.3010069054281459, -4.5454715054281465, -4.1235055054281462, -5.3010069054281459, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462, -4.1235055054281462]
								}]
						}]
				}, {
					"line":	684,
					"switches":	[{
							"switch":	40,
							"types":	[[], [], [], [], [1671, 1672, 1673, 1674, 1675], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], [], [], [], [1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670], [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594], [], [], [], [], [], []],
							"begin_line":	685,
							"begin_column":	19,
							"end_line":	685,
							"end_column":	19,
							"patch_codes":	["memset(&((((PyObject *)(code))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->ob_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_base)))", "memset(&((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(code))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_call)))", "memset(&((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_del)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(code))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_free)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_init)))", "memset(&((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(code))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_members)))", "memset(&((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_name)))", "memset(&((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_new)))", "memset(&((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_print)))", "memset(&((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_str)))", "memset(&((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(code))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(code))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->ob_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(consts))->ob_type))->tp_weaklistoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->ob_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->ob_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_basicsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_dictoffset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_flags)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_itemsize)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_version_tag)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset, 0, sizeof (*(&((((PyObject *)(lineno_obj))->ob_type))->tp_weaklistoffset)))", "memset(&((PyBytesObject *)(code))->ob_base, 0, sizeof (*(&((PyBytesObject *)(code))->ob_base)))", "memset(&((PyBytesObject *)(code))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(code))->ob_shash)))", "memset(&((PyBytesObject *)(code))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(code))->ob_sval)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_base)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_shash, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_shash)))", "memset(&((PyBytesObject *)(lineno_obj))->ob_sval, 0, sizeof (*(&((PyBytesObject *)(lineno_obj))->ob_sval)))", "memset(&((PyListObject *)(consts))->allocated, 0, sizeof (*(&((PyListObject *)(consts))->allocated)))", "memset(&((PyListObject *)(consts))->ob_base, 0, sizeof (*(&((PyListObject *)(consts))->ob_base)))", "memset(&((PyListObject *)(consts))->ob_item, 0, sizeof (*(&((PyListObject *)(consts))->ob_item)))", "memset(&((PyObject *)(code))->_ob_next, 0, sizeof (*(&((PyObject *)(code))->_ob_next)))", "memset(&((PyObject *)(code))->_ob_prev, 0, sizeof (*(&((PyObject *)(code))->_ob_prev)))", "memset(&((PyObject *)(code))->ob_refcnt, 0, sizeof (*(&((PyObject *)(code))->ob_refcnt)))", "memset(&((PyObject *)(code))->ob_type, 0, sizeof (*(&((PyObject *)(code))->ob_type)))", "memset(&((PyObject *)(consts))->_ob_next, 0, sizeof (*(&((PyObject *)(consts))->_ob_next)))", "memset(&((PyObject *)(consts))->_ob_prev, 0, sizeof (*(&((PyObject *)(consts))->_ob_prev)))", "memset(&((PyObject *)(consts))->ob_refcnt, 0, sizeof (*(&((PyObject *)(consts))->ob_refcnt)))", "memset(&((PyObject *)(consts))->ob_type, 0, sizeof (*(&((PyObject *)(consts))->ob_type)))", "memset(&((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_next)))", "memset(&((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(&((PyObject *)(lineno_obj))->_ob_prev)))", "memset(&((PyObject *)(lineno_obj))->ob_refcnt, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_refcnt)))", "memset(&((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(&((PyObject *)(lineno_obj))->ob_type)))", "memset(&((PyTupleObject *)(names))->ob_base, 0, sizeof (*(&((PyTupleObject *)(names))->ob_base)))", "memset(&((PyTupleObject *)(names))->ob_item, 0, sizeof (*(&((PyTupleObject *)(names))->ob_item)))", "memset(&((PyVarObject *)(code))->ob_base, 0, sizeof (*(&((PyVarObject *)(code))->ob_base)))", "memset(&((PyVarObject *)(code))->ob_size, 0, sizeof (*(&((PyVarObject *)(code))->ob_size)))", "memset(&((PyVarObject *)(lineno_obj))->ob_base, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_base)))", "memset(&((PyVarObject *)(lineno_obj))->ob_size, 0, sizeof (*(&((PyVarObject *)(lineno_obj))->ob_size)))", "memset(((((PyObject *)(code))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(code))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(code))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_base)))", "memset(((((PyObject *)(code))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_bases)))", "memset(((((PyObject *)(code))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_cache)))", "memset(((((PyObject *)(code))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_call)))", "memset(((((PyObject *)(code))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_clear)))", "memset(((((PyObject *)(code))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(code))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_del)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(code))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(code))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_dict)))", "memset(((((PyObject *)(code))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_doc)))", "memset(((((PyObject *)(code))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_free)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_getset)))", "memset(((((PyObject *)(code))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_hash)))", "memset(((((PyObject *)(code))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_init)))", "memset(((((PyObject *)(code))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(code))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iter)))", "memset(((((PyObject *)(code))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(code))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_members)))", "memset(((((PyObject *)(code))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_methods)))", "memset(((((PyObject *)(code))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_mro)))", "memset(((((PyObject *)(code))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_name)))", "memset(((((PyObject *)(code))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_new)))", "memset(((((PyObject *)(code))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_print)))", "memset(((((PyObject *)(code))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_repr)))", "memset(((((PyObject *)(code))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(code))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(code))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(code))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_str)))", "memset(((((PyObject *)(code))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(code))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(code))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(code))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(consts))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(consts))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(consts))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_base)))", "memset(((((PyObject *)(consts))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_bases)))", "memset(((((PyObject *)(consts))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_cache)))", "memset(((((PyObject *)(consts))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_call)))", "memset(((((PyObject *)(consts))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_clear)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_del)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(consts))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(consts))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_dict)))", "memset(((((PyObject *)(consts))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_doc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_free)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_getset)))", "memset(((((PyObject *)(consts))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_hash)))", "memset(((((PyObject *)(consts))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_init)))", "memset(((((PyObject *)(consts))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iter)))", "memset(((((PyObject *)(consts))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(consts))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_members)))", "memset(((((PyObject *)(consts))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_methods)))", "memset(((((PyObject *)(consts))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_mro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_name)))", "memset(((((PyObject *)(consts))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_new)))", "memset(((((PyObject *)(consts))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_print)))", "memset(((((PyObject *)(consts))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_repr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(consts))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(consts))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(consts))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_str)))", "memset(((((PyObject *)(consts))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(consts))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(consts))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(consts))->ob_type))->tp_weaklist)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_alloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_buffer)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_mapping)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_number)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_as_sequence)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_base, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_base)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_bases, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_bases)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_cache, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_cache)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_call, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_call)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_clear, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_clear)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dealloc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_del, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_del)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_get)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_descr_set)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_dict, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_dict)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_doc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_doc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_free, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_free)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_getset, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_getset)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_hash, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_hash)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_init, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_init)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_is_gc)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iter, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iter)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_iternext)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_members, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_members)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_methods, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_methods)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_mro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_mro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_name, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_name)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_new, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_new)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_print, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_print)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_repr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_repr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_reserved)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_richcompare)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattr)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_setattro)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_str, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_str)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_subclasses)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_traverse)))", "memset(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist, 0, sizeof (*(((((PyObject *)(lineno_obj))->ob_type))->tp_weaklist)))", "memset(((PyListObject *)(consts))->ob_item, 0, sizeof (*(((PyListObject *)(consts))->ob_item)))", "memset(((PyObject *)(code))->_ob_next, 0, sizeof (*(((PyObject *)(code))->_ob_next)))", "memset(((PyObject *)(code))->_ob_prev, 0, sizeof (*(((PyObject *)(code))->_ob_prev)))", "memset(((PyObject *)(code))->ob_type, 0, sizeof (*(((PyObject *)(code))->ob_type)))", "memset(((PyObject *)(consts))->_ob_next, 0, sizeof (*(((PyObject *)(consts))->_ob_next)))", "memset(((PyObject *)(consts))->_ob_prev, 0, sizeof (*(((PyObject *)(consts))->_ob_prev)))", "memset(((PyObject *)(consts))->ob_type, 0, sizeof (*(((PyObject *)(consts))->ob_type)))", "memset(((PyObject *)(lineno_obj))->_ob_next, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_next)))", "memset(((PyObject *)(lineno_obj))->_ob_prev, 0, sizeof (*(((PyObject *)(lineno_obj))->_ob_prev)))", "memset(((PyObject *)(lineno_obj))->ob_type, 0, sizeof (*(((PyObject *)(lineno_obj))->ob_type)))", "PyMem_Free((addrmap))", "PyMem_Free((blocks))", "PyMem_Free((codestr))", "PyMem_Free((lineno))", "addrmap = (addrmap)", "addrmap[i] = (-1)", "addrmap[i] = (0)", "addrmap[i] = (1)", "addrmap[i] = (10)", "addrmap[i] = (100)", "addrmap[i] = (101)", "addrmap[i] = (102)", "addrmap[i] = (103)", "addrmap[i] = (104)", "addrmap[i] = (107)", "addrmap[i] = (11)", "addrmap[i] = (110)", "addrmap[i] = (111)", "addrmap[i] = (112)", "addrmap[i] = (113)", "addrmap[i] = (114)", "addrmap[i] = (115)", "addrmap[i] = (116)", "addrmap[i] = (119)", "addrmap[i] = (12)", "addrmap[i] = (120)", "addrmap[i] = (121)", "addrmap[i] = (122)", "addrmap[i] = (132)", "addrmap[i] = (134217728)", "addrmap[i] = (143)", "addrmap[i] = (144)", "addrmap[i] = (15)", "addrmap[i] = (19)", "addrmap[i] = (2)", "addrmap[i] = (20)", "addrmap[i] = (22)", "addrmap[i] = (23)", "addrmap[i] = (24)", "addrmap[i] = (25)", "addrmap[i] = (255)", "addrmap[i] = (256)", "addrmap[i] = (26)", "addrmap[i] = (27)", "addrmap[i] = (3)", "addrmap[i] = (32700)", "addrmap[i] = (33554432)", "addrmap[i] = (4)", "addrmap[i] = (403)", "addrmap[i] = (404)", "addrmap[i] = (405)", "addrmap[i] = (410)", "addrmap[i] = (411)", "addrmap[i] = (420)", "addrmap[i] = (438)", "addrmap[i] = (492)", "addrmap[i] = (499)", "addrmap[i] = (5)", "addrmap[i] = (521)", "addrmap[i] = (531)", "addrmap[i] = (533)", "addrmap[i] = (534)", "addrmap[i] = (574)", "addrmap[i] = (580)", "addrmap[i] = (581)", "addrmap[i] = (582)", "addrmap[i] = (592)", "addrmap[i] = (597)", "addrmap[i] = (598)", "addrmap[i] = (599)", "addrmap[i] = (6)", "addrmap[i] = (62)", "addrmap[i] = (63)", "addrmap[i] = (64)", "addrmap[i] = (65)", "addrmap[i] = (66)", "addrmap[i] = (7)", "addrmap[i] = (716)", "addrmap[i] = (753)", "addrmap[i] = (8)", "addrmap[i] = (83)", "addrmap[i] = (9)", "addrmap[i] = (90)", "addrmap[i] = (92)", "addrmap[i] = (93)", "addrmap[i] = (adj)", "addrmap[i] = (cum_orig_line)", "addrmap[i] = (h)", "addrmap[i] = (in_consts)", "addrmap[i] = (last_line)", "addrmap[i] = (new_line)", "addrmap[i] = (nops)", "addrmap[i] = (opcode)", "addrmap[i] = (tabsiz)", "addrmap[i] = (tgt)", "addrmap[i] = (tgttgt)", "adj = (-1)", "adj = (0)", "adj = (1)", "adj = (10)", "adj = (100)", "adj = (101)", "adj = (102)", "adj = (103)", "adj = (104)", "adj = (107)", "adj = (11)", "adj = (110)", "adj = (111)", "adj = (112)", "adj = (113)", "adj = (114)", "adj = (115)", "adj = (116)", "adj = (119)", "adj = (12)", "adj = (120)", "adj = (121)", "adj = (122)", "adj = (132)", "adj = (134217728)", "adj = (143)", "adj = (144)", "adj = (15)", "adj = (19)", "adj = (2)", "adj = (20)", "adj = (22)", "adj = (23)", "adj = (24)", "adj = (25)", "adj = (255)", "adj = (256)", "adj = (26)", "adj = (27)", "adj = (3)", "adj = (32700)", "adj = (33554432)", "adj = (4)", "adj = (403)", "adj = (404)", "adj = (405)", "adj = (410)", "adj = (411)", "adj = (420)", "adj = (438)", "adj = (492)", "adj = (499)", "adj = (5)", "adj = (521)", "adj = (531)", "adj = (533)", "adj = (534)", "adj = (574)", "adj = (580)", "adj = (581)", "adj = (582)", "adj = (592)", "adj = (597)", "adj = (598)", "adj = (599)", "adj = (6)", "adj = (62)", "adj = (63)", "adj = (64)", "adj = (65)", "adj = (66)", "adj = (7)", "adj = (716)", "adj = (753)", "adj = (8)", "adj = (83)", "adj = (9)", "adj = (90)", "adj = (92)", "adj = (93)", "adj = (adj)", "adj = (cum_orig_line)", "adj = (h)", "adj = (in_consts)", "adj = (last_line)", "adj = (new_line)", "adj = (nops)", "adj = (opcode)", "adj = (tabsiz)", "adj = (tgt)", "adj = (tgttgt)", "blocks = (blocks)", "blocks = markblocks((codestr), codelen)", "blocks = markblocks((lineno), codelen)", "code = (code)", "code = (consts)", "code = (lineno_obj)", "code = (names)", "codelen = (-1)", "codelen = (0)", "codelen = (1)", "codelen = (10)", "codelen = (100)", "codelen = (101)", "codelen = (102)", "codelen = (103)", "codelen = (104)", "codelen = (107)", "codelen = (11)", "codelen = (110)", "codelen = (111)", "codelen = (112)", "codelen = (113)", "codelen = (114)", "codelen = (115)", "codelen = (116)", "codelen = (119)", "codelen = (12)", "codelen = (120)", "codelen = (121)", "codelen = (122)", "codelen = (132)", "codelen = (134217728)", "codelen = (143)", "codelen = (144)", "codelen = (15)", "codelen = (19)", "codelen = (2)", "codelen = (20)", "codelen = (22)", "codelen = (23)", "codelen = (24)", "codelen = (25)", "codelen = (255)", "codelen = (256)", "codelen = (26)", "codelen = (27)", "codelen = (3)", "codelen = (32700)", "codelen = (33554432)", "codelen = (4)", "codelen = (403)", "codelen = (404)", "codelen = (405)", "codelen = (410)", "codelen = (411)", "codelen = (420)", "codelen = (438)", "codelen = (492)", "codelen = (499)", "codelen = (5)", "codelen = (521)", "codelen = (531)", "codelen = (533)", "codelen = (534)", "codelen = (574)", "codelen = (580)", "codelen = (581)", "codelen = (582)", "codelen = (592)", "codelen = (597)", "codelen = (598)", "codelen = (599)", "codelen = (6)", "codelen = (62)", "codelen = (63)", "codelen = (64)", "codelen = (65)", "codelen = (66)", "codelen = (7)", "codelen = (716)", "codelen = (753)", "codelen = (8)", "codelen = (83)", "codelen = (9)", "codelen = (90)", "codelen = (92)", "codelen = (93)", "codelen = (codelen)", "codelen = (const_stack_size)", "codelen = (const_stack_top)", "codelen = (i)", "codelen = (j)", "codestr = (codestr)", "codestr = (lineno)", "codestr[i] = (-1)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "cum_orig_line = (-1)", "cum_orig_line = (0)", "cum_orig_line = (1)", "cum_orig_line = (10)", "cum_orig_line = (100)", "cum_orig_line = (101)", "cum_orig_line = (102)", "cum_orig_line = (103)", "cum_orig_line = (104)", "cum_orig_line = (107)", "cum_orig_line = (11)", "cum_orig_line = (110)", "cum_orig_line = (111)", "cum_orig_line = (112)", "cum_orig_line = (113)", "cum_orig_line = (114)", "cum_orig_line = (115)", "cum_orig_line = (116)", "cum_orig_line = (119)", "cum_orig_line = (12)", "cum_orig_line = (120)", "cum_orig_line = (121)", "cum_orig_line = (122)", "cum_orig_line = (132)", "cum_orig_line = (134217728)", "cum_orig_line = (143)", "cum_orig_line = (144)", "cum_orig_line = (15)", "cum_orig_line = (19)", "cum_orig_line = (2)", "cum_orig_line = (20)", "cum_orig_line = (22)", "cum_orig_line = (23)", "cum_orig_line = (24)", "cum_orig_line = (25)", "cum_orig_line = (255)", "cum_orig_line = (256)", "cum_orig_line = (26)", "cum_orig_line = (27)", "cum_orig_line = (3)", "cum_orig_line = (32700)", "cum_orig_line = (33554432)", "cum_orig_line = (4)", "cum_orig_line = (403)", "cum_orig_line = (404)", "cum_orig_line = (405)", "cum_orig_line = (410)", "cum_orig_line = (411)", "cum_orig_line = (420)", "cum_orig_line = (438)", "cum_orig_line = (492)", "cum_orig_line = (499)", "cum_orig_line = (5)", "cum_orig_line = (521)", "cum_orig_line = (531)", "cum_orig_line = (533)", "cum_orig_line = (534)", "cum_orig_line = (574)", "cum_orig_line = (580)", "cum_orig_line = (581)", "cum_orig_line = (582)", "cum_orig_line = (592)", "cum_orig_line = (597)", "cum_orig_line = (598)", "cum_orig_line = (599)", "cum_orig_line = (6)", "cum_orig_line = (62)", "cum_orig_line = (63)", "cum_orig_line = (64)", "cum_orig_line = (65)", "cum_orig_line = (66)", "cum_orig_line = (7)", "cum_orig_line = (716)", "cum_orig_line = (753)", "cum_orig_line = (8)", "cum_orig_line = (83)", "cum_orig_line = (9)", "cum_orig_line = (90)", "cum_orig_line = (92)", "cum_orig_line = (93)", "cum_orig_line = (adj)", "cum_orig_line = (cum_orig_line)", "cum_orig_line = (h)", "cum_orig_line = (in_consts)", "cum_orig_line = (last_line)", "cum_orig_line = (new_line)", "cum_orig_line = (nops)", "cum_orig_line = (opcode)", "cum_orig_line = (tabsiz)", "cum_orig_line = (tgt)", "cum_orig_line = (tgttgt)", "h = ((const_stack_top >= j - 1) ? (load_const_stack)[const_stack_top - j + 1] : -1)", "h = (-1)", "h = (0)", "h = (1)", "h = (10)", "h = (100)", "h = (101)", "h = (102)", "h = (103)", "h = (104)", "h = (107)", "h = (11)", "h = (110)", "h = (111)", "h = (112)", "h = (113)", "h = (114)", "h = (115)", "h = (116)", "h = (119)", "h = (12)", "h = (120)", "h = (121)", "h = (122)", "h = (132)", "h = (134217728)", "h = (143)", "h = (144)", "h = (15)", "h = (19)", "h = (2)", "h = (20)", "h = (22)", "h = (23)", "h = (24)", "h = (25)", "h = (255)", "h = (256)", "h = (26)", "h = (27)", "h = (3)", "h = (32700)", "h = (33554432)", "h = (4)", "h = (403)", "h = (404)", "h = (405)", "h = (410)", "h = (411)", "h = (420)", "h = (438)", "h = (492)", "h = (499)", "h = (5)", "h = (521)", "h = (531)", "h = (533)", "h = (534)", "h = (574)", "h = (580)", "h = (581)", "h = (582)", "h = (592)", "h = (597)", "h = (598)", "h = (599)", "h = (6)", "h = (62)", "h = (63)", "h = (64)", "h = (65)", "h = (66)", "h = (7)", "h = (716)", "h = (753)", "h = (8)", "h = (83)", "h = (9)", "h = (90)", "h = (92)", "h = (93)", "h = (adj)", "h = (cum_orig_line)", "h = (h)", "h = (in_consts)", "h = (last_line)", "h = (new_line)", "h = (nops)", "h = (opcode)", "h = (tabsiz)", "h = (tgt)", "h = (tgttgt)", "h = load_global((codestr), i, name, consts)", "h = load_global((lineno), i, name, consts)", "h = load_global(codestr, i, (name), consts)", "h = load_global(codestr, i, name, (code))", "h = load_global(codestr, i, name, (consts))", "h = load_global(codestr, i, name, (lineno_obj))", "h = load_global(codestr, i, name, (names))", "in_consts = (-1)", "in_consts = (0)", "in_consts = (1)", "in_consts = (10)", "in_consts = (100)", "in_consts = (101)", "in_consts = (102)", "in_consts = (103)", "in_consts = (104)", "in_consts = (107)", "in_consts = (11)", "in_consts = (110)", "in_consts = (111)", "in_consts = (112)", "in_consts = (113)", "in_consts = (114)", "in_consts = (115)", "in_consts = (116)", "in_consts = (119)", "in_consts = (12)", "in_consts = (120)", "in_consts = (121)", "in_consts = (122)", "in_consts = (132)", "in_consts = (134217728)", "in_consts = (143)", "in_consts = (144)", "in_consts = (15)", "in_consts = (19)", "in_consts = (2)", "in_consts = (20)", "in_consts = (22)", "in_consts = (23)", "in_consts = (24)", "in_consts = (25)", "in_consts = (255)", "in_consts = (256)", "in_consts = (26)", "in_consts = (27)", "in_consts = (3)", "in_consts = (32700)", "in_consts = (33554432)", "in_consts = (4)", "in_consts = (403)", "in_consts = (404)", "in_consts = (405)", "in_consts = (410)", "in_consts = (411)", "in_consts = (420)", "in_consts = (438)", "in_consts = (492)", "in_consts = (499)", "in_consts = (5)", "in_consts = (521)", "in_consts = (531)", "in_consts = (533)", "in_consts = (534)", "in_consts = (574)", "in_consts = (580)", "in_consts = (581)", "in_consts = (582)", "in_consts = (592)", "in_consts = (597)", "in_consts = (598)", "in_consts = (599)", "in_consts = (6)", "in_consts = (62)", "in_consts = (63)", "in_consts = (64)", "in_consts = (65)", "in_consts = (66)", "in_consts = (7)", "in_consts = (716)", "in_consts = (753)", "in_consts = (8)", "in_consts = (83)", "in_consts = (9)", "in_consts = (90)", "in_consts = (92)", "in_consts = (93)", "in_consts = (adj)", "in_consts = (cum_orig_line)", "in_consts = (h)", "in_consts = (in_consts)", "in_consts = (last_line)", "in_consts = (new_line)", "in_consts = (nops)", "in_consts = (opcode)", "in_consts = (tabsiz)", "in_consts = (tgt)", "in_consts = (tgttgt)", "j = (-1)", "j = (0)", "j = (1)", "j = (10)", "j = (100)", "j = (101)", "j = (102)", "j = (103)", "j = (104)", "j = (107)", "j = (11)", "j = (110)", "j = (111)", "j = (112)", "j = (113)", "j = (114)", "j = (115)", "j = (116)", "j = (119)", "j = (12)", "j = (120)", "j = (121)", "j = (122)", "j = (132)", "j = (134217728)", "j = (143)", "j = (144)", "j = (15)", "j = (19)", "j = (2)", "j = (20)", "j = (22)", "j = (23)", "j = (24)", "j = (25)", "j = (255)", "j = (256)", "j = (26)", "j = (27)", "j = (3)", "j = (32700)", "j = (33554432)", "j = (4)", "j = (403)", "j = (404)", "j = (405)", "j = (410)", "j = (411)", "j = (420)", "j = (438)", "j = (492)", "j = (499)", "j = (5)", "j = (521)", "j = (531)", "j = (533)", "j = (534)", "j = (574)", "j = (580)", "j = (581)", "j = (582)", "j = (592)", "j = (597)", "j = (598)", "j = (599)", "j = (6)", "j = (62)", "j = (63)", "j = (64)", "j = (65)", "j = (66)", "j = (7)", "j = (716)", "j = (753)", "j = (8)", "j = (83)", "j = (9)", "j = (90)", "j = (92)", "j = (93)", "j = (codelen)", "j = (codestr)[tgt]", "j = (const_stack_size)", "j = (const_stack_top)", "j = (i)", "j = (j)", "j = (lineno)[tgt]", "last_line = (-1)", "last_line = (0)", "last_line = (1)", "last_line = (10)", "last_line = (100)", "last_line = (101)", "last_line = (102)", "last_line = (103)", "last_line = (104)", "last_line = (107)", "last_line = (11)", "last_line = (110)", "last_line = (111)", "last_line = (112)", "last_line = (113)", "last_line = (114)", "last_line = (115)", "last_line = (116)", "last_line = (119)", "last_line = (12)", "last_line = (120)", "last_line = (121)", "last_line = (122)", "last_line = (132)", "last_line = (134217728)", "last_line = (143)", "last_line = (144)", "last_line = (15)", "last_line = (19)", "last_line = (2)", "last_line = (20)", "last_line = (22)", "last_line = (23)", "last_line = (24)", "last_line = (25)", "last_line = (255)", "last_line = (256)", "last_line = (26)", "last_line = (27)", "last_line = (3)", "last_line = (32700)", "last_line = (33554432)", "last_line = (4)", "last_line = (403)", "last_line = (404)", "last_line = (405)", "last_line = (410)", "last_line = (411)", "last_line = (420)", "last_line = (438)", "last_line = (492)", "last_line = (499)", "last_line = (5)", "last_line = (521)", "last_line = (531)", "last_line = (533)", "last_line = (534)", "last_line = (574)", "last_line = (580)", "last_line = (581)", "last_line = (582)", "last_line = (592)", "last_line = (597)", "last_line = (598)", "last_line = (599)", "last_line = (6)", "last_line = (62)", "last_line = (63)", "last_line = (64)", "last_line = (65)", "last_line = (66)", "last_line = (7)", "last_line = (716)", "last_line = (753)", "last_line = (8)", "last_line = (83)", "last_line = (9)", "last_line = (90)", "last_line = (92)", "last_line = (93)", "last_line = (adj)", "last_line = (cum_orig_line)", "last_line = (h)", "last_line = (in_consts)", "last_line = (last_line)", "last_line = (new_line)", "last_line = (nops)", "last_line = (opcode)", "last_line = (tabsiz)", "last_line = (tgt)", "last_line = (tgttgt)", "lineno = (codestr)", "lineno = (lineno)", "lineno[i] = (-1)", "lineno[i] = (0)", "lineno[i] = (1)", "lineno[i] = (10)", "lineno[i] = (100)", "lineno[i] = (101)", "lineno[i] = (102)", "lineno[i] = (103)", "lineno[i] = (104)", "lineno[i] = (107)", "lineno[i] = (11)", "lineno[i] = (110)", "lineno[i] = (111)", "lineno[i] = (112)", "lineno[i] = (113)", "lineno[i] = (114)", "lineno[i] = (115)", "lineno[i] = (116)", "lineno[i] = (119)", "lineno[i] = (12)", "lineno[i] = (120)", "lineno[i] = (121)", "lineno[i] = (122)", "lineno[i] = (132)", "lineno[i] = (134217728)", "lineno[i] = (143)", "lineno[i] = (144)", "lineno[i] = (15)", "lineno[i] = (19)", "lineno[i] = (2)", "lineno[i] = (20)", "lineno[i] = (22)", "lineno[i] = (23)", "lineno[i] = (24)", "lineno[i] = (25)", "lineno[i] = (255)", "lineno[i] = (256)", "lineno[i] = (26)", "lineno[i] = (27)", "lineno[i] = (3)", "lineno[i] = (32700)", "lineno[i] = (33554432)", "lineno[i] = (4)", "lineno[i] = (403)", "lineno[i] = (404)", "lineno[i] = (405)", "lineno[i] = (410)", "lineno[i] = (411)", "lineno[i] = (420)", "lineno[i] = (438)", "lineno[i] = (492)", "lineno[i] = (499)", "lineno[i] = (5)", "lineno[i] = (521)", "lineno[i] = (531)", "lineno[i] = (533)", "lineno[i] = (534)", "lineno[i] = (574)", "lineno[i] = (580)", "lineno[i] = (581)", "lineno[i] = (582)", "lineno[i] = (592)", "lineno[i] = (597)", "lineno[i] = (598)", "lineno[i] = (599)", "lineno[i] = (6)", "lineno[i] = (62)", "lineno[i] = (63)", "lineno[i] = (64)", "lineno[i] = (65)", "lineno[i] = (66)", "lineno[i] = (7)", "lineno[i] = (716)", "lineno[i] = (753)", "lineno[i] = (8)", "lineno[i] = (83)", "lineno[i] = (9)", "lineno[i] = (90)", "lineno[i] = (92)", "lineno[i] = (93)", "memset(&(codestr)[h], 9, i - h)", "memset(&(lineno)[h], 9, i - h)", "memset((codestr) + i + 1, 9, 2)", "memset((codestr) + i + 1, 9, 3)", "memset((codestr) + i + 1, 9, 4)", "memset((codestr) + i + 1, 9, 5)", "memset((codestr) + i + 2, 9, 4)", "memset((codestr) + i, 9, 6)", "memset((lineno) + i + 1, 9, 2)", "memset((lineno) + i + 1, 9, 3)", "memset((lineno) + i + 1, 9, 4)", "memset((lineno) + i + 1, 9, 5)", "memset((lineno) + i + 2, 9, 4)", "memset((lineno) + i, 9, 6)", "name = (name)", "new_line = (-1)", "new_line = (0)", "new_line = (1)", "new_line = (10)", "new_line = (100)", "new_line = (101)", "new_line = (102)", "new_line = (103)", "new_line = (104)", "new_line = (107)", "new_line = (11)", "new_line = (110)", "new_line = (111)", "new_line = (112)", "new_line = (113)", "new_line = (114)", "new_line = (115)", "new_line = (116)", "new_line = (119)", "new_line = (12)", "new_line = (120)", "new_line = (121)", "new_line = (122)", "new_line = (132)", "new_line = (134217728)", "new_line = (143)", "new_line = (144)", "new_line = (15)", "new_line = (19)", "new_line = (2)", "new_line = (20)", "new_line = (22)", "new_line = (23)", "new_line = (24)", "new_line = (25)", "new_line = (255)", "new_line = (256)", "new_line = (26)", "new_line = (27)", "new_line = (3)", "new_line = (32700)", "new_line = (33554432)", "new_line = (4)", "new_line = (403)", "new_line = (404)", "new_line = (405)", "new_line = (410)", "new_line = (411)", "new_line = (420)", "new_line = (438)", "new_line = (492)", "new_line = (499)", "new_line = (5)", "new_line = (521)", "new_line = (531)", "new_line = (533)", "new_line = (534)", "new_line = (574)", "new_line = (580)", "new_line = (581)", "new_line = (582)", "new_line = (592)", "new_line = (597)", "new_line = (598)", "new_line = (599)", "new_line = (6)", "new_line = (62)", "new_line = (63)", "new_line = (64)", "new_line = (65)", "new_line = (66)", "new_line = (7)", "new_line = (716)", "new_line = (753)", "new_line = (8)", "new_line = (83)", "new_line = (9)", "new_line = (90)", "new_line = (92)", "new_line = (93)", "new_line = (addrmap)[cum_orig_line]", "new_line = (adj)", "new_line = (cum_orig_line)", "new_line = (h)", "new_line = (in_consts)", "new_line = (last_line)", "new_line = (new_line)", "new_line = (nops)", "new_line = (opcode)", "new_line = (tabsiz)", "new_line = (tgt)", "new_line = (tgttgt)", "opcode = (-1)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (101)", "opcode = (102)", "opcode = (103)", "opcode = (104)", "opcode = (107)", "opcode = (11)", "opcode = (110)", "opcode = (111)", "opcode = (112)", "opcode = (113)", "opcode = (114)", "opcode = (115)", "opcode = (116)", "opcode = (119)", "opcode = (12)", "opcode = (120)", "opcode = (121)", "opcode = (122)", "opcode = (132)", "opcode = (134217728)", "opcode = (143)", "opcode = (144)", "opcode = (15)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (23)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (256)", "opcode = (26)", "opcode = (27)", "opcode = (3)", "opcode = (32700)", "opcode = (33554432)", "opcode = (4)", "opcode = (403)", "opcode = (404)", "opcode = (405)", "opcode = (410)", "opcode = (411)", "opcode = (420)", "opcode = (438)", "opcode = (492)", "opcode = (499)", "opcode = (5)", "opcode = (521)", "opcode = (531)", "opcode = (533)", "opcode = (534)", "opcode = (574)", "opcode = (580)", "opcode = (581)", "opcode = (582)", "opcode = (592)", "opcode = (597)", "opcode = (598)", "opcode = (599)", "opcode = (6)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (7)", "opcode = (716)", "opcode = (753)", "opcode = (8)", "opcode = (83)", "opcode = (9)", "opcode = (90)", "opcode = (92)", "opcode = (93)", "opcode = (adj)", "opcode = (codestr)[i]", "opcode = (cum_orig_line)", "opcode = (h)", "opcode = (in_consts)", "opcode = (last_line)", "opcode = (lineno)[i]", "opcode = (new_line)", "opcode = (nops)", "opcode = (opcode)", "opcode = (tabsiz)", "opcode = (tgt)", "opcode = (tgttgt)", "tabsiz = (-1)", "tabsiz = (0)", "tabsiz = (1)", "tabsiz = (10)", "tabsiz = (100)", "tabsiz = (101)", "tabsiz = (102)", "tabsiz = (103)", "tabsiz = (104)", "tabsiz = (107)", "tabsiz = (11)", "tabsiz = (110)", "tabsiz = (111)", "tabsiz = (112)", "tabsiz = (113)", "tabsiz = (114)", "tabsiz = (115)", "tabsiz = (116)", "tabsiz = (119)", "tabsiz = (12)", "tabsiz = (120)", "tabsiz = (121)", "tabsiz = (122)", "tabsiz = (132)", "tabsiz = (134217728)", "tabsiz = (143)", "tabsiz = (144)", "tabsiz = (15)", "tabsiz = (19)", "tabsiz = (2)", "tabsiz = (20)", "tabsiz = (22)", "tabsiz = (23)", "tabsiz = (24)", "tabsiz = (25)", "tabsiz = (255)", "tabsiz = (256)", "tabsiz = (26)", "tabsiz = (27)", "tabsiz = (3)", "tabsiz = (32700)", "tabsiz = (33554432)", "tabsiz = (4)", "tabsiz = (403)", "tabsiz = (404)", "tabsiz = (405)", "tabsiz = (410)", "tabsiz = (411)", "tabsiz = (420)", "tabsiz = (438)", "tabsiz = (492)", "tabsiz = (499)", "tabsiz = (5)", "tabsiz = (521)", "tabsiz = (531)", "tabsiz = (533)", "tabsiz = (534)", "tabsiz = (574)", "tabsiz = (580)", "tabsiz = (581)", "tabsiz = (582)", "tabsiz = (592)", "tabsiz = (597)", "tabsiz = (598)", "tabsiz = (599)", "tabsiz = (6)", "tabsiz = (62)", "tabsiz = (63)", "tabsiz = (64)", "tabsiz = (65)", "tabsiz = (66)", "tabsiz = (7)", "tabsiz = (716)", "tabsiz = (753)", "tabsiz = (8)", "tabsiz = (83)", "tabsiz = (9)", "tabsiz = (90)", "tabsiz = (92)", "tabsiz = (93)", "tabsiz = (adj)", "tabsiz = (cum_orig_line)", "tabsiz = (h)", "tabsiz = (in_consts)", "tabsiz = (last_line)", "tabsiz = (new_line)", "tabsiz = (nops)", "tabsiz = (opcode)", "tabsiz = (tabsiz)", "tabsiz = (tgt)", "tabsiz = (tgttgt)", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((codestr)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((lineno)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (codestr)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (lineno)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (codestr)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (lineno)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (codestr)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (lineno)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (codestr)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (lineno)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (codestr)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (lineno)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (-1)", "tgttgt = (0)", "tgttgt = (1)", "tgttgt = (10)", "tgttgt = (100)", "tgttgt = (101)", "tgttgt = (102)", "tgttgt = (103)", "tgttgt = (104)", "tgttgt = (107)", "tgttgt = (11)", "tgttgt = (110)", "tgttgt = (111)", "tgttgt = (112)", "tgttgt = (113)", "tgttgt = (114)", "tgttgt = (115)", "tgttgt = (116)", "tgttgt = (119)", "tgttgt = (12)", "tgttgt = (120)", "tgttgt = (121)", "tgttgt = (122)", "tgttgt = (132)", "tgttgt = (134217728)", "tgttgt = (143)", "tgttgt = (144)", "tgttgt = (15)", "tgttgt = (19)", "tgttgt = (2)", "tgttgt = (20)", "tgttgt = (22)", "tgttgt = (23)", "tgttgt = (24)", "tgttgt = (25)", "tgttgt = (255)", "tgttgt = (256)", "tgttgt = (26)", "tgttgt = (27)", "tgttgt = (3)", "tgttgt = (32700)", "tgttgt = (33554432)", "tgttgt = (4)", "tgttgt = (403)", "tgttgt = (404)", "tgttgt = (405)", "tgttgt = (410)", "tgttgt = (411)", "tgttgt = (420)", "tgttgt = (438)", "tgttgt = (492)", "tgttgt = (499)", "tgttgt = (5)", "tgttgt = (521)", "tgttgt = (531)", "tgttgt = (533)", "tgttgt = (534)", "tgttgt = (574)", "tgttgt = (580)", "tgttgt = (581)", "tgttgt = (582)", "tgttgt = (592)", "tgttgt = (597)", "tgttgt = (598)", "tgttgt = (599)", "tgttgt = (6)", "tgttgt = (62)", "tgttgt = (63)", "tgttgt = (64)", "tgttgt = (65)", "tgttgt = (66)", "tgttgt = (7)", "tgttgt = (716)", "tgttgt = (753)", "tgttgt = (8)", "tgttgt = (83)", "tgttgt = (9)", "tgttgt = (90)", "tgttgt = (92)", "tgttgt = (93)", "tgttgt = (adj)", "tgttgt = (cum_orig_line)", "tgttgt = (h)", "tgttgt = (in_consts)", "tgttgt = (last_line)", "tgttgt = (new_line)", "tgttgt = (nops)", "tgttgt = (opcode)", "tgttgt = (tabsiz)", "tgttgt = (tgt)", "tgttgt = (tgttgt)", "((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0))\n        ;\n    else\n        __assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 1)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 1))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 2)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 2))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < j)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < j))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((h + nops == codelen) ? 1 : 0) , __extension__ ({\n    if (h + nops == codelen)\n        ;\n    else\n        __assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((new_line - last_line < 255) ? 1 : 0) , __extension__ ({\n    if (new_line - last_line < 255)\n        ;\n    else\n        __assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "PyMem_Free(addrmap)", "PyMem_Free(blocks)", "PyMem_Free(codestr)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "addrmap = (int *)PyMem_Malloc(codelen * sizeof(int))", "addrmap[i] = i - nops", "adj = (((opcode) >= 90) ? 3 : 1)", "blocks = markblocks(codestr, codelen)", "code = PyBytes_FromStringAndSize((char *)codestr, h)", "codelen = (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(code))->ob_size))", "codestr = (unsigned char *)PyMem_Malloc(codelen)", "codestr = (unsigned char *)memcpy(codestr, (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(code))->ob_sval)), codelen)", "codestr[i] = 114", "codestr[i] = 115", "codestr[i] = 2", "codestr[i] = 3", "codestr[i] = 83", "codestr[i] = j", "codestr[i] = opcode", "cum_orig_line = 0", "h = ((const_stack_top >= j - 1) ? load_const_stack[const_stack_top - j + 1] : -1)", "h = load_global(codestr, i, name, consts)", "in_consts = 0", "j = ((int)((codestr[i + 1 + 2] << 8) + codestr[i + 1 + 1]))", "j = ((int)((codestr[i + 2] << 8) + codestr[i + 1]))", "j = codestr[tgt]", "last_line = 0", "last_line = new_line", "lineno = (unsigned char *)(((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(lineno_obj))->ob_sval))", "lineno[i] = ((unsigned char)(new_line - last_line))", "memset(&codestr[h], 9, i - h)", "memset(codestr + i + 1, 9, 2)", "memset(codestr + i + 1, 9, 3)", "memset(codestr + i + 1, 9, 4)", "memset(codestr + i + 1, 9, 5)", "memset(codestr + i + 2, 9, 4)", "memset(codestr + i, 9, 6)", "name = _PyUnicode_AsString((((PyTupleObject *)(names))->ob_item[j]))", "new_line = addrmap[cum_orig_line]", "nops++", "opcode = 113", "opcode = codestr[i]", "tabsiz = (((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(lineno_obj))->ob_size))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "if (__is_neg(\"\", \"L685\", 28, &(i), sizeof (i), &(codestr), sizeof (codestr), &(tgttgt), sizeof (tgttgt), &(opcode), sizeof (opcode), &(codelen), sizeof (codelen), &(blocks), sizeof (blocks), &(tgt), sizeof (tgt), &(nops), sizeof (nops), &(addrmap), sizeof (addrmap), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(tabsiz), sizeof (tabsiz), &(lineno), sizeof (lineno), &(new_line), sizeof (new_line), &(h), sizeof (h), &(j), sizeof (j), &(adj), sizeof (adj), &(code), sizeof (code), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(consts), sizeof (consts), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(_Py_RefTotal), sizeof (_Py_RefTotal), &(name), sizeof (name), &(names), sizeof (names), &(lineno_obj), sizeof (lineno_obj)))\n    break;\n", "if (__is_neg(\"\", \"L685\", 28, &(i), sizeof (i), &(codestr), sizeof (codestr), &(tgttgt), sizeof (tgttgt), &(opcode), sizeof (opcode), &(codelen), sizeof (codelen), &(blocks), sizeof (blocks), &(tgt), sizeof (tgt), &(nops), sizeof (nops), &(addrmap), sizeof (addrmap), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(tabsiz), sizeof (tabsiz), &(lineno), sizeof (lineno), &(new_line), sizeof (new_line), &(h), sizeof (h), &(j), sizeof (j), &(adj), sizeof (adj), &(code), sizeof (code), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(consts), sizeof (consts), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(_Py_RefTotal), sizeof (_Py_RefTotal), &(name), sizeof (name), &(names), sizeof (names), &(lineno_obj), sizeof (lineno_obj)))\n    goto exitError;\n", "if (__is_neg(\"\", \"L685\", 28, &(i), sizeof (i), &(codestr), sizeof (codestr), &(tgttgt), sizeof (tgttgt), &(opcode), sizeof (opcode), &(codelen), sizeof (codelen), &(blocks), sizeof (blocks), &(tgt), sizeof (tgt), &(nops), sizeof (nops), &(addrmap), sizeof (addrmap), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(tabsiz), sizeof (tabsiz), &(lineno), sizeof (lineno), &(new_line), sizeof (new_line), &(h), sizeof (h), &(j), sizeof (j), &(adj), sizeof (adj), &(code), sizeof (code), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(consts), sizeof (consts), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(_Py_RefTotal), sizeof (_Py_RefTotal), &(name), sizeof (name), &(names), sizeof (names), &(lineno_obj), sizeof (lineno_obj)))\n    goto exitUnchanged;\n", "if (__is_neg(\"\", \"L685\", 28, &(i), sizeof (i), &(codestr), sizeof (codestr), &(tgttgt), sizeof (tgttgt), &(opcode), sizeof (opcode), &(codelen), sizeof (codelen), &(blocks), sizeof (blocks), &(tgt), sizeof (tgt), &(nops), sizeof (nops), &(addrmap), sizeof (addrmap), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(tabsiz), sizeof (tabsiz), &(lineno), sizeof (lineno), &(new_line), sizeof (new_line), &(h), sizeof (h), &(j), sizeof (j), &(adj), sizeof (adj), &(code), sizeof (code), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(consts), sizeof (consts), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(_Py_RefTotal), sizeof (_Py_RefTotal), &(name), sizeof (name), &(names), sizeof (names), &(lineno_obj), sizeof (lineno_obj)))\n    goto reoptimize_current;\n", "if (__is_neg(\"\", \"L685\", 28, &(i), sizeof (i), &(codestr), sizeof (codestr), &(tgttgt), sizeof (tgttgt), &(opcode), sizeof (opcode), &(codelen), sizeof (codelen), &(blocks), sizeof (blocks), &(tgt), sizeof (tgt), &(nops), sizeof (nops), &(addrmap), sizeof (addrmap), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(tabsiz), sizeof (tabsiz), &(lineno), sizeof (lineno), &(new_line), sizeof (new_line), &(h), sizeof (h), &(j), sizeof (j), &(adj), sizeof (adj), &(code), sizeof (code), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(consts), sizeof (consts), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(_Py_RefTotal), sizeof (_Py_RefTotal), &(name), sizeof (name), &(names), sizeof (names), &(lineno_obj), sizeof (lineno_obj)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.66965854205234]
								}, {
									"case":	2,
									"scores":	[-5.66965854205234]
								}, {
									"case":	3,
									"scores":	[-5.66965854205234]
								}, {
									"case":	4,
									"scores":	[-5.66965854205234]
								}, {
									"case":	5,
									"scores":	[-5.66965854205234]
								}, {
									"case":	6,
									"scores":	[-5.66965854205234]
								}, {
									"case":	7,
									"scores":	[-5.66965854205234]
								}, {
									"case":	8,
									"scores":	[-5.66965854205234]
								}, {
									"case":	9,
									"scores":	[-5.66965854205234]
								}, {
									"case":	10,
									"scores":	[-5.66965854205234]
								}, {
									"case":	11,
									"scores":	[-5.66965854205234]
								}, {
									"case":	12,
									"scores":	[-5.66965854205234]
								}, {
									"case":	13,
									"scores":	[-5.66965854205234]
								}, {
									"case":	14,
									"scores":	[-5.66965854205234]
								}, {
									"case":	15,
									"scores":	[-5.66965854205234]
								}, {
									"case":	16,
									"scores":	[-5.66965854205234]
								}, {
									"case":	17,
									"scores":	[-5.66965854205234]
								}, {
									"case":	18,
									"scores":	[-5.66965854205234]
								}, {
									"case":	19,
									"scores":	[-5.66965854205234]
								}, {
									"case":	20,
									"scores":	[-5.66965854205234]
								}, {
									"case":	21,
									"scores":	[-5.66965854205234]
								}, {
									"case":	22,
									"scores":	[-5.66965854205234]
								}, {
									"case":	23,
									"scores":	[-5.66965854205234]
								}, {
									"case":	24,
									"scores":	[-5.66965854205234]
								}, {
									"case":	25,
									"scores":	[-5.66965854205234]
								}, {
									"case":	26,
									"scores":	[-5.66965854205234]
								}, {
									"case":	27,
									"scores":	[-5.66965854205234]
								}, {
									"case":	28,
									"scores":	[-5.66965854205234]
								}, {
									"case":	29,
									"scores":	[-5.66965854205234]
								}, {
									"case":	30,
									"scores":	[-5.66965854205234]
								}, {
									"case":	31,
									"scores":	[-5.66965854205234]
								}, {
									"case":	32,
									"scores":	[-5.66965854205234]
								}, {
									"case":	33,
									"scores":	[-5.66965854205234]
								}, {
									"case":	34,
									"scores":	[-5.66965854205234]
								}, {
									"case":	35,
									"scores":	[-5.66965854205234]
								}, {
									"case":	36,
									"scores":	[-5.66965854205234]
								}, {
									"case":	37,
									"scores":	[-5.66965854205234]
								}, {
									"case":	38,
									"scores":	[-5.66965854205234]
								}, {
									"case":	39,
									"scores":	[-5.66965854205234]
								}, {
									"case":	40,
									"scores":	[-5.66965854205234]
								}, {
									"case":	41,
									"scores":	[-5.66965854205234]
								}, {
									"case":	42,
									"scores":	[-5.66965854205234]
								}, {
									"case":	43,
									"scores":	[-5.66965854205234]
								}, {
									"case":	44,
									"scores":	[-5.66965854205234]
								}, {
									"case":	45,
									"scores":	[-5.66965854205234]
								}, {
									"case":	46,
									"scores":	[-5.66965854205234]
								}, {
									"case":	47,
									"scores":	[-5.66965854205234]
								}, {
									"case":	48,
									"scores":	[-5.66965854205234]
								}, {
									"case":	49,
									"scores":	[-5.66965854205234]
								}, {
									"case":	50,
									"scores":	[-5.66965854205234]
								}, {
									"case":	51,
									"scores":	[-5.66965854205234]
								}, {
									"case":	52,
									"scores":	[-5.66965854205234]
								}, {
									"case":	53,
									"scores":	[-5.66965854205234]
								}, {
									"case":	54,
									"scores":	[-5.66965854205234]
								}, {
									"case":	55,
									"scores":	[-5.66965854205234]
								}, {
									"case":	56,
									"scores":	[-5.66965854205234]
								}, {
									"case":	57,
									"scores":	[-5.66965854205234]
								}, {
									"case":	58,
									"scores":	[-5.66965854205234]
								}, {
									"case":	59,
									"scores":	[-5.66965854205234]
								}, {
									"case":	60,
									"scores":	[-5.66965854205234]
								}, {
									"case":	61,
									"scores":	[-5.66965854205234]
								}, {
									"case":	62,
									"scores":	[-5.66965854205234]
								}, {
									"case":	63,
									"scores":	[-5.66965854205234]
								}, {
									"case":	64,
									"scores":	[-5.66965854205234]
								}, {
									"case":	65,
									"scores":	[-5.66965854205234]
								}, {
									"case":	66,
									"scores":	[-5.66965854205234]
								}, {
									"case":	67,
									"scores":	[-5.66965854205234]
								}, {
									"case":	68,
									"scores":	[-5.66965854205234]
								}, {
									"case":	69,
									"scores":	[-5.66965854205234]
								}, {
									"case":	70,
									"scores":	[-5.66965854205234]
								}, {
									"case":	71,
									"scores":	[-5.66965854205234]
								}, {
									"case":	72,
									"scores":	[-5.66965854205234]
								}, {
									"case":	73,
									"scores":	[-5.66965854205234]
								}, {
									"case":	74,
									"scores":	[-5.66965854205234]
								}, {
									"case":	75,
									"scores":	[-5.66965854205234]
								}, {
									"case":	76,
									"scores":	[-5.66965854205234]
								}, {
									"case":	77,
									"scores":	[-5.66965854205234]
								}, {
									"case":	78,
									"scores":	[-5.66965854205234]
								}, {
									"case":	79,
									"scores":	[-5.66965854205234]
								}, {
									"case":	80,
									"scores":	[-5.66965854205234]
								}, {
									"case":	81,
									"scores":	[-5.66965854205234]
								}, {
									"case":	82,
									"scores":	[-5.66965854205234]
								}, {
									"case":	83,
									"scores":	[-5.66965854205234]
								}, {
									"case":	84,
									"scores":	[-5.66965854205234]
								}, {
									"case":	85,
									"scores":	[-5.66965854205234]
								}, {
									"case":	86,
									"scores":	[-5.66965854205234]
								}, {
									"case":	87,
									"scores":	[-5.66965854205234]
								}, {
									"case":	88,
									"scores":	[-5.66965854205234]
								}, {
									"case":	89,
									"scores":	[-5.66965854205234]
								}, {
									"case":	90,
									"scores":	[-5.66965854205234]
								}, {
									"case":	91,
									"scores":	[-5.66965854205234]
								}, {
									"case":	92,
									"scores":	[-5.66965854205234]
								}, {
									"case":	93,
									"scores":	[-5.66965854205234]
								}, {
									"case":	94,
									"scores":	[-5.66965854205234]
								}, {
									"case":	95,
									"scores":	[-5.66965854205234]
								}, {
									"case":	96,
									"scores":	[-5.66965854205234]
								}, {
									"case":	97,
									"scores":	[-5.66965854205234]
								}, {
									"case":	98,
									"scores":	[-5.66965854205234]
								}, {
									"case":	99,
									"scores":	[-5.66965854205234]
								}, {
									"case":	100,
									"scores":	[-5.66965854205234]
								}, {
									"case":	101,
									"scores":	[-5.66965854205234]
								}, {
									"case":	102,
									"scores":	[-5.66965854205234]
								}, {
									"case":	103,
									"scores":	[-5.66965854205234]
								}, {
									"case":	104,
									"scores":	[-5.66965854205234]
								}, {
									"case":	105,
									"scores":	[-5.66965854205234]
								}, {
									"case":	106,
									"scores":	[-5.66965854205234]
								}, {
									"case":	107,
									"scores":	[-5.66965854205234]
								}, {
									"case":	108,
									"scores":	[-5.66965854205234]
								}, {
									"case":	109,
									"scores":	[-5.66965854205234]
								}, {
									"case":	110,
									"scores":	[-5.66965854205234]
								}, {
									"case":	111,
									"scores":	[-5.66965854205234]
								}, {
									"case":	112,
									"scores":	[-5.66965854205234]
								}, {
									"case":	113,
									"scores":	[-5.66965854205234]
								}, {
									"case":	114,
									"scores":	[-5.66965854205234]
								}, {
									"case":	115,
									"scores":	[-5.66965854205234]
								}, {
									"case":	116,
									"scores":	[-5.66965854205234]
								}, {
									"case":	117,
									"scores":	[-5.66965854205234]
								}, {
									"case":	118,
									"scores":	[-5.66965854205234]
								}, {
									"case":	119,
									"scores":	[-5.66965854205234]
								}, {
									"case":	120,
									"scores":	[-5.66965854205234]
								}, {
									"case":	121,
									"scores":	[-5.66965854205234]
								}, {
									"case":	122,
									"scores":	[-5.66965854205234]
								}, {
									"case":	123,
									"scores":	[-5.66965854205234]
								}, {
									"case":	124,
									"scores":	[-5.66965854205234]
								}, {
									"case":	125,
									"scores":	[-5.66965854205234]
								}, {
									"case":	126,
									"scores":	[-5.66965854205234]
								}, {
									"case":	127,
									"scores":	[-5.66965854205234]
								}, {
									"case":	128,
									"scores":	[-5.66965854205234]
								}, {
									"case":	129,
									"scores":	[-5.66965854205234]
								}, {
									"case":	130,
									"scores":	[-5.66965854205234]
								}, {
									"case":	131,
									"scores":	[-5.66965854205234]
								}, {
									"case":	132,
									"scores":	[-5.66965854205234]
								}, {
									"case":	133,
									"scores":	[-5.66965854205234]
								}, {
									"case":	134,
									"scores":	[-5.66965854205234]
								}, {
									"case":	135,
									"scores":	[-5.66965854205234]
								}, {
									"case":	136,
									"scores":	[-5.66965854205234]
								}, {
									"case":	137,
									"scores":	[-5.66965854205234]
								}, {
									"case":	138,
									"scores":	[-5.66965854205234]
								}, {
									"case":	139,
									"scores":	[-5.66965854205234]
								}, {
									"case":	140,
									"scores":	[-5.66965854205234]
								}, {
									"case":	141,
									"scores":	[-5.66965854205234]
								}, {
									"case":	142,
									"scores":	[-5.66965854205234]
								}, {
									"case":	143,
									"scores":	[-5.66965854205234]
								}, {
									"case":	144,
									"scores":	[-5.66965854205234]
								}, {
									"case":	145,
									"scores":	[-5.66965854205234]
								}, {
									"case":	146,
									"scores":	[-5.66965854205234]
								}, {
									"case":	147,
									"scores":	[-5.66965854205234]
								}, {
									"case":	148,
									"scores":	[-5.66965854205234]
								}, {
									"case":	149,
									"scores":	[-5.66965854205234]
								}, {
									"case":	150,
									"scores":	[-5.66965854205234]
								}, {
									"case":	151,
									"scores":	[-5.66965854205234]
								}, {
									"case":	152,
									"scores":	[-5.66965854205234]
								}, {
									"case":	153,
									"scores":	[-5.66965854205234]
								}, {
									"case":	154,
									"scores":	[-5.66965854205234]
								}, {
									"case":	155,
									"scores":	[-5.66965854205234]
								}, {
									"case":	156,
									"scores":	[-5.66965854205234]
								}, {
									"case":	157,
									"scores":	[-5.66965854205234]
								}, {
									"case":	158,
									"scores":	[-5.66965854205234]
								}, {
									"case":	159,
									"scores":	[-5.66965854205234]
								}, {
									"case":	160,
									"scores":	[-5.66965854205234]
								}, {
									"case":	161,
									"scores":	[-5.66965854205234]
								}, {
									"case":	162,
									"scores":	[-5.66965854205234]
								}, {
									"case":	163,
									"scores":	[-5.66965854205234]
								}, {
									"case":	164,
									"scores":	[-5.66965854205234]
								}, {
									"case":	165,
									"scores":	[-5.66965854205234]
								}, {
									"case":	166,
									"scores":	[-5.66965854205234]
								}, {
									"case":	167,
									"scores":	[-5.66965854205234]
								}, {
									"case":	168,
									"scores":	[-5.66965854205234]
								}, {
									"case":	169,
									"scores":	[-5.66965854205234]
								}, {
									"case":	170,
									"scores":	[-5.66965854205234]
								}, {
									"case":	171,
									"scores":	[-5.66965854205234]
								}, {
									"case":	172,
									"scores":	[-5.66965854205234]
								}, {
									"case":	173,
									"scores":	[-5.66965854205234]
								}, {
									"case":	174,
									"scores":	[-5.66965854205234]
								}, {
									"case":	175,
									"scores":	[-5.66965854205234]
								}, {
									"case":	176,
									"scores":	[-5.66965854205234]
								}, {
									"case":	177,
									"scores":	[-5.66965854205234]
								}, {
									"case":	178,
									"scores":	[-5.66965854205234]
								}, {
									"case":	179,
									"scores":	[-5.66965854205234]
								}, {
									"case":	180,
									"scores":	[-5.66965854205234]
								}, {
									"case":	181,
									"scores":	[-5.66965854205234]
								}, {
									"case":	182,
									"scores":	[-5.66965854205234]
								}, {
									"case":	183,
									"scores":	[-5.66965854205234]
								}, {
									"case":	184,
									"scores":	[-5.66965854205234]
								}, {
									"case":	185,
									"scores":	[-5.66965854205234]
								}, {
									"case":	186,
									"scores":	[-5.66965854205234]
								}, {
									"case":	187,
									"scores":	[-5.66965854205234]
								}, {
									"case":	188,
									"scores":	[-5.66965854205234]
								}, {
									"case":	189,
									"scores":	[-5.66965854205234]
								}, {
									"case":	190,
									"scores":	[-5.66965854205234]
								}, {
									"case":	191,
									"scores":	[-5.66965854205234]
								}, {
									"case":	192,
									"scores":	[-5.66965854205234]
								}, {
									"case":	193,
									"scores":	[-5.66965854205234]
								}, {
									"case":	194,
									"scores":	[-5.66965854205234]
								}, {
									"case":	195,
									"scores":	[-5.66965854205234]
								}, {
									"case":	196,
									"scores":	[-5.66965854205234]
								}, {
									"case":	197,
									"scores":	[-5.66965854205234]
								}, {
									"case":	198,
									"scores":	[-5.66965854205234]
								}, {
									"case":	199,
									"scores":	[-5.66965854205234]
								}, {
									"case":	200,
									"scores":	[-5.66965854205234]
								}, {
									"case":	201,
									"scores":	[-5.66965854205234]
								}, {
									"case":	202,
									"scores":	[-5.66965854205234]
								}, {
									"case":	203,
									"scores":	[-5.66965854205234]
								}, {
									"case":	204,
									"scores":	[-5.66965854205234]
								}, {
									"case":	205,
									"scores":	[-5.66965854205234]
								}, {
									"case":	206,
									"scores":	[-5.66965854205234]
								}, {
									"case":	207,
									"scores":	[-5.66965854205234]
								}, {
									"case":	208,
									"scores":	[-5.66965854205234]
								}, {
									"case":	209,
									"scores":	[-5.66965854205234]
								}, {
									"case":	210,
									"scores":	[-5.66965854205234]
								}, {
									"case":	211,
									"scores":	[-5.66965854205234]
								}, {
									"case":	212,
									"scores":	[-5.66965854205234]
								}, {
									"case":	213,
									"scores":	[-5.66965854205234]
								}, {
									"case":	214,
									"scores":	[-5.66965854205234]
								}, {
									"case":	215,
									"scores":	[-5.66965854205234]
								}, {
									"case":	216,
									"scores":	[-5.66965854205234]
								}, {
									"case":	217,
									"scores":	[-5.66965854205234]
								}, {
									"case":	218,
									"scores":	[-5.66965854205234]
								}, {
									"case":	219,
									"scores":	[-5.66965854205234]
								}, {
									"case":	220,
									"scores":	[-5.66965854205234]
								}, {
									"case":	221,
									"scores":	[-5.66965854205234]
								}, {
									"case":	222,
									"scores":	[-5.66965854205234]
								}, {
									"case":	223,
									"scores":	[-5.66965854205234]
								}, {
									"case":	224,
									"scores":	[-5.66965854205234]
								}, {
									"case":	225,
									"scores":	[-5.66965854205234]
								}, {
									"case":	226,
									"scores":	[-5.66965854205234]
								}, {
									"case":	227,
									"scores":	[-5.66965854205234]
								}, {
									"case":	228,
									"scores":	[-5.66965854205234]
								}, {
									"case":	229,
									"scores":	[-5.66965854205234]
								}, {
									"case":	230,
									"scores":	[-5.66965854205234]
								}, {
									"case":	231,
									"scores":	[-5.66965854205234]
								}, {
									"case":	232,
									"scores":	[-5.66965854205234]
								}, {
									"case":	233,
									"scores":	[-5.66965854205234]
								}, {
									"case":	234,
									"scores":	[-5.66965854205234]
								}, {
									"case":	235,
									"scores":	[-5.66965854205234]
								}, {
									"case":	236,
									"scores":	[-5.66965854205234]
								}, {
									"case":	237,
									"scores":	[-5.66965854205234]
								}, {
									"case":	238,
									"scores":	[-5.66965854205234]
								}, {
									"case":	239,
									"scores":	[-5.66965854205234]
								}, {
									"case":	240,
									"scores":	[-5.66965854205234]
								}, {
									"case":	241,
									"scores":	[-5.66965854205234]
								}, {
									"case":	242,
									"scores":	[-5.66965854205234]
								}, {
									"case":	243,
									"scores":	[-5.66965854205234]
								}, {
									"case":	244,
									"scores":	[-5.66965854205234]
								}, {
									"case":	245,
									"scores":	[-5.66965854205234]
								}, {
									"case":	246,
									"scores":	[-5.66965854205234]
								}, {
									"case":	247,
									"scores":	[-5.66965854205234]
								}, {
									"case":	248,
									"scores":	[-5.66965854205234]
								}, {
									"case":	249,
									"scores":	[-5.66965854205234]
								}, {
									"case":	250,
									"scores":	[-5.66965854205234]
								}, {
									"case":	251,
									"scores":	[-5.66965854205234]
								}, {
									"case":	252,
									"scores":	[-5.66965854205234]
								}, {
									"case":	253,
									"scores":	[-5.66965854205234]
								}, {
									"case":	254,
									"scores":	[-5.66965854205234]
								}, {
									"case":	255,
									"scores":	[-5.66965854205234]
								}, {
									"case":	256,
									"scores":	[-5.66965854205234]
								}, {
									"case":	257,
									"scores":	[-5.66965854205234]
								}, {
									"case":	258,
									"scores":	[-5.66965854205234]
								}, {
									"case":	259,
									"scores":	[-5.66965854205234]
								}, {
									"case":	260,
									"scores":	[-5.66965854205234]
								}, {
									"case":	261,
									"scores":	[-5.66965854205234]
								}, {
									"case":	262,
									"scores":	[-5.66965854205234]
								}, {
									"case":	263,
									"scores":	[-5.66965854205234]
								}, {
									"case":	264,
									"scores":	[-5.66965854205234]
								}, {
									"case":	265,
									"scores":	[-5.66965854205234]
								}, {
									"case":	266,
									"scores":	[-5.66965854205234]
								}, {
									"case":	267,
									"scores":	[-5.66965854205234]
								}, {
									"case":	268,
									"scores":	[-5.66965854205234]
								}, {
									"case":	269,
									"scores":	[-5.66965854205234]
								}, {
									"case":	270,
									"scores":	[-5.66965854205234]
								}, {
									"case":	271,
									"scores":	[-5.66965854205234]
								}, {
									"case":	272,
									"scores":	[-5.66965854205234]
								}, {
									"case":	273,
									"scores":	[-5.66965854205234]
								}, {
									"case":	274,
									"scores":	[-5.66965854205234]
								}, {
									"case":	275,
									"scores":	[-5.66965854205234]
								}, {
									"case":	276,
									"scores":	[-5.66965854205234]
								}, {
									"case":	277,
									"scores":	[-5.66965854205234]
								}, {
									"case":	278,
									"scores":	[-5.66965854205234]
								}, {
									"case":	279,
									"scores":	[-5.66965854205234]
								}, {
									"case":	280,
									"scores":	[-5.66965854205234]
								}, {
									"case":	281,
									"scores":	[-5.66965854205234]
								}, {
									"case":	282,
									"scores":	[-5.66965854205234]
								}, {
									"case":	283,
									"scores":	[-5.66965854205234]
								}, {
									"case":	284,
									"scores":	[-5.66965854205234]
								}, {
									"case":	285,
									"scores":	[-5.66965854205234]
								}, {
									"case":	286,
									"scores":	[-5.66965854205234]
								}, {
									"case":	287,
									"scores":	[-5.66965854205234]
								}, {
									"case":	288,
									"scores":	[-5.66965854205234]
								}, {
									"case":	289,
									"scores":	[-5.66965854205234]
								}, {
									"case":	290,
									"scores":	[-5.66965854205234]
								}, {
									"case":	291,
									"scores":	[-5.66965854205234]
								}, {
									"case":	292,
									"scores":	[-5.66965854205234]
								}, {
									"case":	293,
									"scores":	[-5.66965854205234]
								}, {
									"case":	294,
									"scores":	[-5.66965854205234]
								}, {
									"case":	295,
									"scores":	[-5.66965854205234]
								}, {
									"case":	296,
									"scores":	[-5.66965854205234]
								}, {
									"case":	297,
									"scores":	[-5.66965854205234]
								}, {
									"case":	298,
									"scores":	[-5.66965854205234]
								}, {
									"case":	299,
									"scores":	[-5.66965854205234]
								}, {
									"case":	300,
									"scores":	[-5.66965854205234]
								}, {
									"case":	301,
									"scores":	[-5.66965854205234]
								}, {
									"case":	302,
									"scores":	[-5.66965854205234]
								}, {
									"case":	303,
									"scores":	[-5.66965854205234]
								}, {
									"case":	304,
									"scores":	[-5.66965854205234]
								}, {
									"case":	305,
									"scores":	[-5.66965854205234]
								}, {
									"case":	306,
									"scores":	[-5.66965854205234]
								}, {
									"case":	307,
									"scores":	[-5.66965854205234]
								}, {
									"case":	308,
									"scores":	[-5.66965854205234]
								}, {
									"case":	309,
									"scores":	[-5.66965854205234]
								}, {
									"case":	310,
									"scores":	[-5.66965854205234]
								}, {
									"case":	311,
									"scores":	[-5.66965854205234]
								}, {
									"case":	312,
									"scores":	[-5.66965854205234]
								}, {
									"case":	313,
									"scores":	[-5.66965854205234]
								}, {
									"case":	314,
									"scores":	[-5.66965854205234]
								}, {
									"case":	315,
									"scores":	[-5.66965854205234]
								}, {
									"case":	316,
									"scores":	[-5.66965854205234]
								}, {
									"case":	317,
									"scores":	[-5.66965854205234]
								}, {
									"case":	318,
									"scores":	[-5.66965854205234]
								}, {
									"case":	319,
									"scores":	[-5.66965854205234]
								}, {
									"case":	320,
									"scores":	[-5.66965854205234]
								}, {
									"case":	321,
									"scores":	[-5.66965854205234]
								}, {
									"case":	322,
									"scores":	[-5.66965854205234]
								}, {
									"case":	323,
									"scores":	[-5.66965854205234]
								}, {
									"case":	324,
									"scores":	[-5.66965854205234]
								}, {
									"case":	325,
									"scores":	[-5.66965854205234]
								}, {
									"case":	326,
									"scores":	[-5.66965854205234]
								}, {
									"case":	327,
									"scores":	[-5.66965854205234]
								}, {
									"case":	328,
									"scores":	[-5.66965854205234]
								}, {
									"case":	329,
									"scores":	[-5.66965854205234]
								}, {
									"case":	330,
									"scores":	[-5.66965854205234]
								}, {
									"case":	331,
									"scores":	[-5.66965854205234]
								}, {
									"case":	332,
									"scores":	[-5.66965854205234]
								}, {
									"case":	333,
									"scores":	[-5.66965854205234]
								}, {
									"case":	334,
									"scores":	[-5.66965854205234]
								}, {
									"case":	335,
									"scores":	[-5.66965854205234]
								}, {
									"case":	336,
									"scores":	[-5.66965854205234]
								}, {
									"case":	337,
									"scores":	[-5.66965854205234]
								}, {
									"case":	338,
									"scores":	[-5.66965854205234]
								}, {
									"case":	339,
									"scores":	[-5.66965854205234]
								}, {
									"case":	340,
									"scores":	[-5.66965854205234]
								}, {
									"case":	341,
									"scores":	[-5.66965854205234]
								}, {
									"case":	342,
									"scores":	[-5.66965854205234]
								}, {
									"case":	343,
									"scores":	[-5.66965854205234]
								}, {
									"case":	344,
									"scores":	[-5.66965854205234]
								}, {
									"case":	345,
									"scores":	[-5.66965854205234]
								}, {
									"case":	346,
									"scores":	[-5.66965854205234]
								}, {
									"case":	347,
									"scores":	[-5.66965854205234]
								}, {
									"case":	348,
									"scores":	[-5.66965854205234]
								}, {
									"case":	349,
									"scores":	[-5.66965854205234]
								}, {
									"case":	350,
									"scores":	[-5.66965854205234]
								}, {
									"case":	351,
									"scores":	[-5.66965854205234]
								}, {
									"case":	352,
									"scores":	[-5.66965854205234]
								}, {
									"case":	353,
									"scores":	[-5.66965854205234]
								}, {
									"case":	354,
									"scores":	[-5.66965854205234]
								}, {
									"case":	355,
									"scores":	[-5.66965854205234]
								}, {
									"case":	356,
									"scores":	[-5.66965854205234]
								}, {
									"case":	357,
									"scores":	[-5.66965854205234]
								}, {
									"case":	358,
									"scores":	[-5.66965854205234]
								}, {
									"case":	359,
									"scores":	[-5.66965854205234]
								}, {
									"case":	360,
									"scores":	[-5.66965854205234]
								}, {
									"case":	361,
									"scores":	[-5.66965854205234]
								}, {
									"case":	362,
									"scores":	[-5.66965854205234]
								}, {
									"case":	363,
									"scores":	[-5.66965854205234]
								}, {
									"case":	364,
									"scores":	[-5.66965854205234]
								}, {
									"case":	365,
									"scores":	[-5.66965854205234]
								}, {
									"case":	366,
									"scores":	[-5.66965854205234]
								}, {
									"case":	367,
									"scores":	[-5.66965854205234]
								}, {
									"case":	368,
									"scores":	[-5.66965854205234]
								}, {
									"case":	369,
									"scores":	[-5.66965854205234]
								}, {
									"case":	370,
									"scores":	[-5.66965854205234]
								}, {
									"case":	371,
									"scores":	[-5.66965854205234]
								}, {
									"case":	372,
									"scores":	[-5.66965854205234]
								}, {
									"case":	373,
									"scores":	[-5.66965854205234]
								}, {
									"case":	374,
									"scores":	[-5.66965854205234]
								}, {
									"case":	375,
									"scores":	[-5.66965854205234]
								}, {
									"case":	376,
									"scores":	[-5.66965854205234]
								}, {
									"case":	377,
									"scores":	[-5.66965854205234]
								}, {
									"case":	378,
									"scores":	[-5.66965854205234]
								}, {
									"case":	379,
									"scores":	[-5.66965854205234]
								}, {
									"case":	380,
									"scores":	[-5.66965854205234]
								}, {
									"case":	381,
									"scores":	[-5.66965854205234]
								}, {
									"case":	382,
									"scores":	[-5.66965854205234]
								}, {
									"case":	383,
									"scores":	[-5.66965854205234]
								}, {
									"case":	384,
									"scores":	[-5.66965854205234]
								}, {
									"case":	385,
									"scores":	[-5.66965854205234]
								}, {
									"case":	386,
									"scores":	[-5.66965854205234]
								}, {
									"case":	387,
									"scores":	[-5.66965854205234]
								}, {
									"case":	388,
									"scores":	[-5.66965854205234]
								}, {
									"case":	389,
									"scores":	[-5.66965854205234]
								}, {
									"case":	390,
									"scores":	[-5.66965854205234]
								}, {
									"case":	391,
									"scores":	[-5.66965854205234]
								}, {
									"case":	392,
									"scores":	[-5.66965854205234]
								}, {
									"case":	393,
									"scores":	[-5.66965854205234]
								}, {
									"case":	394,
									"scores":	[-5.66965854205234]
								}, {
									"case":	395,
									"scores":	[-5.66965854205234]
								}, {
									"case":	396,
									"scores":	[-5.66965854205234]
								}, {
									"case":	397,
									"scores":	[-5.66965854205234]
								}, {
									"case":	398,
									"scores":	[-5.66965854205234]
								}, {
									"case":	399,
									"scores":	[-5.66965854205234]
								}, {
									"case":	400,
									"scores":	[-5.66965854205234]
								}, {
									"case":	401,
									"scores":	[-5.66965854205234]
								}, {
									"case":	402,
									"scores":	[-5.66965854205234]
								}, {
									"case":	403,
									"scores":	[-5.66965854205234]
								}, {
									"case":	404,
									"scores":	[-5.66965854205234]
								}, {
									"case":	405,
									"scores":	[-5.66965854205234]
								}, {
									"case":	406,
									"scores":	[-5.66965854205234]
								}, {
									"case":	407,
									"scores":	[-5.66965854205234]
								}, {
									"case":	408,
									"scores":	[-5.66965854205234]
								}, {
									"case":	409,
									"scores":	[-5.66965854205234]
								}, {
									"case":	410,
									"scores":	[-5.66965854205234]
								}, {
									"case":	411,
									"scores":	[-5.66965854205234]
								}, {
									"case":	412,
									"scores":	[-5.66965854205234]
								}, {
									"case":	413,
									"scores":	[-5.66965854205234]
								}, {
									"case":	414,
									"scores":	[-5.66965854205234]
								}, {
									"case":	415,
									"scores":	[-5.66965854205234]
								}, {
									"case":	416,
									"scores":	[-5.66965854205234]
								}, {
									"case":	417,
									"scores":	[-5.66965854205234]
								}, {
									"case":	418,
									"scores":	[-5.66965854205234]
								}, {
									"case":	419,
									"scores":	[-5.66965854205234]
								}, {
									"case":	420,
									"scores":	[-5.66965854205234]
								}, {
									"case":	421,
									"scores":	[-5.66965854205234]
								}, {
									"case":	422,
									"scores":	[-5.66965854205234]
								}, {
									"case":	423,
									"scores":	[-5.66965854205234]
								}, {
									"case":	424,
									"scores":	[-5.66965854205234]
								}, {
									"case":	425,
									"scores":	[-5.66965854205234]
								}, {
									"case":	426,
									"scores":	[-5.66965854205234]
								}, {
									"case":	427,
									"scores":	[-5.66965854205234]
								}, {
									"case":	428,
									"scores":	[-5.66965854205234]
								}, {
									"case":	429,
									"scores":	[-5.66965854205234]
								}, {
									"case":	430,
									"scores":	[-5.66965854205234]
								}, {
									"case":	431,
									"scores":	[-5.66965854205234]
								}, {
									"case":	432,
									"scores":	[-5.66965854205234]
								}, {
									"case":	433,
									"scores":	[-5.66965854205234]
								}, {
									"case":	434,
									"scores":	[-5.66965854205234]
								}, {
									"case":	435,
									"scores":	[-5.66965854205234]
								}, {
									"case":	436,
									"scores":	[-5.66965854205234]
								}, {
									"case":	437,
									"scores":	[-5.66965854205234]
								}, {
									"case":	438,
									"scores":	[-5.66965854205234]
								}, {
									"case":	439,
									"scores":	[-5.66965854205234]
								}, {
									"case":	440,
									"scores":	[-5.66965854205234]
								}, {
									"case":	441,
									"scores":	[-5.66965854205234]
								}, {
									"case":	442,
									"scores":	[-5.66965854205234]
								}, {
									"case":	443,
									"scores":	[-5.66965854205234]
								}, {
									"case":	444,
									"scores":	[-5.66965854205234]
								}, {
									"case":	445,
									"scores":	[-5.66965854205234]
								}, {
									"case":	446,
									"scores":	[-5.66965854205234]
								}, {
									"case":	447,
									"scores":	[-5.66965854205234]
								}, {
									"case":	448,
									"scores":	[-5.66965854205234]
								}, {
									"case":	449,
									"scores":	[-5.66965854205234]
								}, {
									"case":	450,
									"scores":	[-5.66965854205234]
								}, {
									"case":	451,
									"scores":	[-5.66965854205234]
								}, {
									"case":	452,
									"scores":	[-5.66965854205234]
								}, {
									"case":	453,
									"scores":	[-5.66965854205234]
								}, {
									"case":	454,
									"scores":	[-5.66965854205234]
								}, {
									"case":	455,
									"scores":	[-5.66965854205234]
								}, {
									"case":	456,
									"scores":	[-5.66965854205234]
								}, {
									"case":	457,
									"scores":	[-5.66965854205234]
								}, {
									"case":	458,
									"scores":	[-5.66965854205234]
								}, {
									"case":	459,
									"scores":	[-5.66965854205234]
								}, {
									"case":	460,
									"scores":	[-5.66965854205234]
								}, {
									"case":	461,
									"scores":	[-5.66965854205234]
								}, {
									"case":	462,
									"scores":	[-5.66965854205234]
								}, {
									"case":	463,
									"scores":	[-5.66965854205234]
								}, {
									"case":	464,
									"scores":	[-5.66965854205234]
								}, {
									"case":	465,
									"scores":	[-5.66965854205234]
								}, {
									"case":	466,
									"scores":	[-5.66965854205234]
								}, {
									"case":	467,
									"scores":	[-5.66965854205234]
								}, {
									"case":	468,
									"scores":	[-5.66965854205234]
								}, {
									"case":	469,
									"scores":	[-5.66965854205234]
								}, {
									"case":	470,
									"scores":	[-5.66965854205234]
								}, {
									"case":	471,
									"scores":	[-5.66965854205234]
								}, {
									"case":	472,
									"scores":	[-5.66965854205234]
								}, {
									"case":	473,
									"scores":	[-5.66965854205234]
								}, {
									"case":	474,
									"scores":	[-5.66965854205234]
								}, {
									"case":	475,
									"scores":	[-5.66965854205234]
								}, {
									"case":	476,
									"scores":	[-5.66965854205234]
								}, {
									"case":	477,
									"scores":	[-5.66965854205234]
								}, {
									"case":	478,
									"scores":	[-5.66965854205234]
								}, {
									"case":	479,
									"scores":	[-5.66965854205234]
								}, {
									"case":	480,
									"scores":	[-5.66965854205234]
								}, {
									"case":	481,
									"scores":	[-5.66965854205234]
								}, {
									"case":	482,
									"scores":	[-5.66965854205234]
								}, {
									"case":	483,
									"scores":	[-5.66965854205234]
								}, {
									"case":	484,
									"scores":	[-5.66965854205234]
								}, {
									"case":	485,
									"scores":	[-5.66965854205234]
								}, {
									"case":	486,
									"scores":	[-5.66965854205234]
								}, {
									"case":	487,
									"scores":	[-5.66965854205234]
								}, {
									"case":	488,
									"scores":	[-5.66965854205234]
								}, {
									"case":	489,
									"scores":	[-5.66965854205234]
								}, {
									"case":	490,
									"scores":	[-5.66965854205234]
								}, {
									"case":	491,
									"scores":	[-5.66965854205234]
								}, {
									"case":	492,
									"scores":	[-5.66965854205234]
								}, {
									"case":	493,
									"scores":	[-5.66965854205234]
								}, {
									"case":	494,
									"scores":	[-5.66965854205234]
								}, {
									"case":	495,
									"scores":	[-5.66965854205234]
								}, {
									"case":	496,
									"scores":	[-5.66965854205234]
								}, {
									"case":	497,
									"scores":	[-5.66965854205234]
								}, {
									"case":	498,
									"scores":	[-5.66965854205234]
								}, {
									"case":	499,
									"scores":	[-5.66965854205234]
								}, {
									"case":	500,
									"scores":	[-5.66965854205234]
								}, {
									"case":	501,
									"scores":	[-5.66965854205234]
								}, {
									"case":	502,
									"scores":	[-5.66965854205234]
								}, {
									"case":	503,
									"scores":	[-5.66965854205234]
								}, {
									"case":	504,
									"scores":	[-5.66965854205234]
								}, {
									"case":	505,
									"scores":	[-5.66965854205234]
								}, {
									"case":	506,
									"scores":	[-5.66965854205234]
								}, {
									"case":	507,
									"scores":	[-5.66965854205234]
								}, {
									"case":	508,
									"scores":	[-5.66965854205234]
								}, {
									"case":	509,
									"scores":	[-5.66965854205234]
								}, {
									"case":	510,
									"scores":	[-5.66965854205234]
								}, {
									"case":	511,
									"scores":	[-5.66965854205234]
								}, {
									"case":	512,
									"scores":	[-5.66965854205234]
								}, {
									"case":	513,
									"scores":	[-5.66965854205234]
								}, {
									"case":	514,
									"scores":	[-5.66965854205234]
								}, {
									"case":	515,
									"scores":	[-5.66965854205234]
								}, {
									"case":	516,
									"scores":	[-5.66965854205234]
								}, {
									"case":	517,
									"scores":	[-5.66965854205234]
								}, {
									"case":	518,
									"scores":	[-5.66965854205234]
								}, {
									"case":	519,
									"scores":	[-5.66965854205234]
								}, {
									"case":	520,
									"scores":	[-5.66965854205234]
								}, {
									"case":	521,
									"scores":	[-5.66965854205234]
								}, {
									"case":	522,
									"scores":	[-5.66965854205234]
								}, {
									"case":	523,
									"scores":	[-5.66965854205234]
								}, {
									"case":	524,
									"scores":	[-5.66965854205234]
								}, {
									"case":	525,
									"scores":	[-5.66965854205234]
								}, {
									"case":	526,
									"scores":	[-5.66965854205234]
								}, {
									"case":	527,
									"scores":	[-5.66965854205234]
								}, {
									"case":	528,
									"scores":	[-5.66965854205234]
								}, {
									"case":	529,
									"scores":	[-5.66965854205234]
								}, {
									"case":	530,
									"scores":	[-5.66965854205234]
								}, {
									"case":	531,
									"scores":	[-5.66965854205234]
								}, {
									"case":	532,
									"scores":	[-5.66965854205234]
								}, {
									"case":	533,
									"scores":	[-5.66965854205234]
								}, {
									"case":	534,
									"scores":	[-5.66965854205234]
								}, {
									"case":	535,
									"scores":	[-5.66965854205234]
								}, {
									"case":	536,
									"scores":	[-5.66965854205234]
								}, {
									"case":	537,
									"scores":	[-5.66965854205234]
								}, {
									"case":	538,
									"scores":	[-5.66965854205234]
								}, {
									"case":	539,
									"scores":	[-5.66965854205234]
								}, {
									"case":	540,
									"scores":	[-5.66965854205234]
								}, {
									"case":	541,
									"scores":	[-5.66965854205234]
								}, {
									"case":	542,
									"scores":	[-5.66965854205234]
								}, {
									"case":	543,
									"scores":	[-5.66965854205234]
								}, {
									"case":	544,
									"scores":	[-5.66965854205234]
								}, {
									"case":	545,
									"scores":	[-5.66965854205234]
								}, {
									"case":	546,
									"scores":	[-5.66965854205234]
								}, {
									"case":	547,
									"scores":	[-5.66965854205234]
								}, {
									"case":	548,
									"scores":	[-5.66965854205234]
								}, {
									"case":	549,
									"scores":	[-5.66965854205234]
								}, {
									"case":	550,
									"scores":	[-5.66965854205234]
								}, {
									"case":	551,
									"scores":	[-5.66965854205234]
								}, {
									"case":	552,
									"scores":	[-5.66965854205234]
								}, {
									"case":	553,
									"scores":	[-5.66965854205234]
								}, {
									"case":	554,
									"scores":	[-5.66965854205234]
								}, {
									"case":	555,
									"scores":	[-5.66965854205234]
								}, {
									"case":	556,
									"scores":	[-5.66965854205234]
								}, {
									"case":	557,
									"scores":	[-5.66965854205234]
								}, {
									"case":	558,
									"scores":	[-5.66965854205234]
								}, {
									"case":	559,
									"scores":	[-5.66965854205234]
								}, {
									"case":	560,
									"scores":	[-5.66965854205234]
								}, {
									"case":	561,
									"scores":	[-5.66965854205234]
								}, {
									"case":	562,
									"scores":	[-5.66965854205234]
								}, {
									"case":	563,
									"scores":	[-5.66965854205234]
								}, {
									"case":	564,
									"scores":	[-5.66965854205234]
								}, {
									"case":	565,
									"scores":	[-5.66965854205234]
								}, {
									"case":	566,
									"scores":	[-5.66965854205234]
								}, {
									"case":	567,
									"scores":	[-5.66965854205234]
								}, {
									"case":	568,
									"scores":	[-5.66965854205234]
								}, {
									"case":	569,
									"scores":	[-5.66965854205234]
								}, {
									"case":	570,
									"scores":	[-5.66965854205234]
								}, {
									"case":	571,
									"scores":	[-5.66965854205234]
								}, {
									"case":	572,
									"scores":	[-5.66965854205234]
								}, {
									"case":	573,
									"scores":	[-5.66965854205234]
								}, {
									"case":	574,
									"scores":	[-5.66965854205234]
								}, {
									"case":	575,
									"scores":	[-5.66965854205234]
								}, {
									"case":	576,
									"scores":	[-5.66965854205234]
								}, {
									"case":	577,
									"scores":	[-5.66965854205234]
								}, {
									"case":	578,
									"scores":	[-5.66965854205234]
								}, {
									"case":	579,
									"scores":	[-5.66965854205234]
								}, {
									"case":	580,
									"scores":	[-5.66965854205234]
								}, {
									"case":	581,
									"scores":	[-5.66965854205234]
								}, {
									"case":	582,
									"scores":	[-5.66965854205234]
								}, {
									"case":	583,
									"scores":	[-5.66965854205234]
								}, {
									"case":	584,
									"scores":	[-5.66965854205234]
								}, {
									"case":	585,
									"scores":	[-5.66965854205234]
								}, {
									"case":	586,
									"scores":	[-5.66965854205234]
								}, {
									"case":	587,
									"scores":	[-5.66965854205234]
								}, {
									"case":	588,
									"scores":	[-5.66965854205234]
								}, {
									"case":	589,
									"scores":	[-5.66965854205234]
								}, {
									"case":	590,
									"scores":	[-5.66965854205234]
								}, {
									"case":	591,
									"scores":	[-5.66965854205234]
								}, {
									"case":	592,
									"scores":	[-5.66965854205234]
								}, {
									"case":	593,
									"scores":	[-5.66965854205234]
								}, {
									"case":	594,
									"scores":	[-5.66965854205234]
								}, {
									"case":	595,
									"scores":	[-5.66965854205234]
								}, {
									"case":	596,
									"scores":	[-5.66965854205234]
								}, {
									"case":	597,
									"scores":	[-5.66965854205234]
								}, {
									"case":	598,
									"scores":	[-5.66965854205234]
								}, {
									"case":	599,
									"scores":	[-5.66965854205234]
								}, {
									"case":	600,
									"scores":	[-5.66965854205234]
								}, {
									"case":	601,
									"scores":	[-5.66965854205234]
								}, {
									"case":	602,
									"scores":	[-5.66965854205234]
								}, {
									"case":	603,
									"scores":	[-5.66965854205234]
								}, {
									"case":	604,
									"scores":	[-5.66965854205234]
								}, {
									"case":	605,
									"scores":	[-5.66965854205234]
								}, {
									"case":	606,
									"scores":	[-5.66965854205234]
								}, {
									"case":	607,
									"scores":	[-5.66965854205234]
								}, {
									"case":	608,
									"scores":	[-5.66965854205234]
								}, {
									"case":	609,
									"scores":	[-5.66965854205234]
								}, {
									"case":	610,
									"scores":	[-5.66965854205234]
								}, {
									"case":	611,
									"scores":	[-5.66965854205234]
								}, {
									"case":	612,
									"scores":	[-5.66965854205234]
								}, {
									"case":	613,
									"scores":	[-5.66965854205234]
								}, {
									"case":	614,
									"scores":	[-5.66965854205234]
								}, {
									"case":	615,
									"scores":	[-5.66965854205234]
								}, {
									"case":	616,
									"scores":	[-5.66965854205234]
								}, {
									"case":	617,
									"scores":	[-5.66965854205234]
								}, {
									"case":	618,
									"scores":	[-5.66965854205234]
								}, {
									"case":	619,
									"scores":	[-5.66965854205234]
								}, {
									"case":	620,
									"scores":	[-5.66965854205234]
								}, {
									"case":	621,
									"scores":	[-5.66965854205234]
								}, {
									"case":	622,
									"scores":	[-5.66965854205234]
								}, {
									"case":	623,
									"scores":	[-5.66965854205234]
								}, {
									"case":	624,
									"scores":	[-5.66965854205234]
								}, {
									"case":	625,
									"scores":	[-5.66965854205234]
								}, {
									"case":	626,
									"scores":	[-5.66965854205234]
								}, {
									"case":	627,
									"scores":	[-5.66965854205234]
								}, {
									"case":	628,
									"scores":	[-5.66965854205234]
								}, {
									"case":	629,
									"scores":	[-5.66965854205234]
								}, {
									"case":	630,
									"scores":	[-5.66965854205234]
								}, {
									"case":	631,
									"scores":	[-5.66965854205234]
								}, {
									"case":	632,
									"scores":	[-5.66965854205234]
								}, {
									"case":	633,
									"scores":	[-5.66965854205234]
								}, {
									"case":	634,
									"scores":	[-5.66965854205234]
								}, {
									"case":	635,
									"scores":	[-5.66965854205234]
								}, {
									"case":	636,
									"scores":	[-5.66965854205234]
								}, {
									"case":	637,
									"scores":	[-5.66965854205234]
								}, {
									"case":	638,
									"scores":	[-5.66965854205234]
								}, {
									"case":	639,
									"scores":	[-5.66965854205234]
								}, {
									"case":	640,
									"scores":	[-5.66965854205234]
								}, {
									"case":	641,
									"scores":	[-5.66965854205234]
								}, {
									"case":	642,
									"scores":	[-5.66965854205234]
								}, {
									"case":	643,
									"scores":	[-5.66965854205234]
								}, {
									"case":	644,
									"scores":	[-5.66965854205234]
								}, {
									"case":	645,
									"scores":	[-5.66965854205234]
								}, {
									"case":	646,
									"scores":	[-5.66965854205234]
								}, {
									"case":	647,
									"scores":	[-5.66965854205234]
								}, {
									"case":	648,
									"scores":	[-5.66965854205234]
								}, {
									"case":	649,
									"scores":	[-5.66965854205234]
								}, {
									"case":	650,
									"scores":	[-5.66965854205234]
								}, {
									"case":	651,
									"scores":	[-5.66965854205234]
								}, {
									"case":	652,
									"scores":	[-5.66965854205234]
								}, {
									"case":	653,
									"scores":	[-5.66965854205234]
								}, {
									"case":	654,
									"scores":	[-5.66965854205234]
								}, {
									"case":	655,
									"scores":	[-5.66965854205234]
								}, {
									"case":	656,
									"scores":	[-5.66965854205234]
								}, {
									"case":	657,
									"scores":	[-5.66965854205234]
								}, {
									"case":	658,
									"scores":	[-5.66965854205234]
								}, {
									"case":	659,
									"scores":	[-5.66965854205234]
								}, {
									"case":	660,
									"scores":	[-5.66965854205234]
								}, {
									"case":	661,
									"scores":	[-5.66965854205234]
								}, {
									"case":	662,
									"scores":	[-5.66965854205234]
								}, {
									"case":	663,
									"scores":	[-5.66965854205234]
								}, {
									"case":	664,
									"scores":	[-5.66965854205234]
								}, {
									"case":	665,
									"scores":	[-5.66965854205234]
								}, {
									"case":	666,
									"scores":	[-5.66965854205234]
								}, {
									"case":	667,
									"scores":	[-5.66965854205234]
								}, {
									"case":	668,
									"scores":	[-5.66965854205234]
								}, {
									"case":	669,
									"scores":	[-5.66965854205234]
								}, {
									"case":	670,
									"scores":	[-5.66965854205234]
								}, {
									"case":	671,
									"scores":	[-5.66965854205234]
								}, {
									"case":	672,
									"scores":	[-5.66965854205234]
								}, {
									"case":	673,
									"scores":	[-5.66965854205234]
								}, {
									"case":	674,
									"scores":	[-5.66965854205234]
								}, {
									"case":	675,
									"scores":	[-5.66965854205234]
								}, {
									"case":	676,
									"scores":	[-5.66965854205234]
								}, {
									"case":	677,
									"scores":	[-5.66965854205234]
								}, {
									"case":	678,
									"scores":	[-5.66965854205234]
								}, {
									"case":	679,
									"scores":	[-5.66965854205234]
								}, {
									"case":	680,
									"scores":	[-5.66965854205234]
								}, {
									"case":	681,
									"scores":	[-5.66965854205234]
								}, {
									"case":	682,
									"scores":	[-5.66965854205234]
								}, {
									"case":	683,
									"scores":	[-5.66965854205234]
								}, {
									"case":	684,
									"scores":	[-5.66965854205234]
								}, {
									"case":	685,
									"scores":	[-5.66965854205234]
								}, {
									"case":	686,
									"scores":	[-5.66965854205234]
								}, {
									"case":	687,
									"scores":	[-5.66965854205234]
								}, {
									"case":	688,
									"scores":	[-5.66965854205234]
								}, {
									"case":	689,
									"scores":	[-5.66965854205234]
								}, {
									"case":	690,
									"scores":	[-5.66965854205234]
								}, {
									"case":	691,
									"scores":	[-5.66965854205234]
								}, {
									"case":	692,
									"scores":	[-5.66965854205234]
								}, {
									"case":	693,
									"scores":	[-5.66965854205234]
								}, {
									"case":	694,
									"scores":	[-5.66965854205234]
								}, {
									"case":	695,
									"scores":	[-5.66965854205234]
								}, {
									"case":	696,
									"scores":	[-5.66965854205234]
								}, {
									"case":	697,
									"scores":	[-5.66965854205234]
								}, {
									"case":	698,
									"scores":	[-5.66965854205234]
								}, {
									"case":	699,
									"scores":	[-5.66965854205234]
								}, {
									"case":	700,
									"scores":	[-5.66965854205234]
								}, {
									"case":	701,
									"scores":	[-5.66965854205234]
								}, {
									"case":	702,
									"scores":	[-5.66965854205234]
								}, {
									"case":	703,
									"scores":	[-5.66965854205234]
								}, {
									"case":	704,
									"scores":	[-5.66965854205234]
								}, {
									"case":	705,
									"scores":	[-5.66965854205234]
								}, {
									"case":	706,
									"scores":	[-5.66965854205234]
								}, {
									"case":	707,
									"scores":	[-5.66965854205234]
								}, {
									"case":	708,
									"scores":	[-5.66965854205234]
								}, {
									"case":	709,
									"scores":	[-5.66965854205234]
								}, {
									"case":	710,
									"scores":	[-5.66965854205234]
								}, {
									"case":	711,
									"scores":	[-5.66965854205234]
								}, {
									"case":	712,
									"scores":	[-5.66965854205234]
								}, {
									"case":	713,
									"scores":	[-5.66965854205234]
								}, {
									"case":	714,
									"scores":	[-5.66965854205234]
								}, {
									"case":	715,
									"scores":	[-5.66965854205234]
								}, {
									"case":	716,
									"scores":	[-5.66965854205234]
								}, {
									"case":	717,
									"scores":	[-5.66965854205234]
								}, {
									"case":	718,
									"scores":	[-5.66965854205234]
								}, {
									"case":	719,
									"scores":	[-5.66965854205234]
								}, {
									"case":	720,
									"scores":	[-5.66965854205234]
								}, {
									"case":	721,
									"scores":	[-5.66965854205234]
								}, {
									"case":	722,
									"scores":	[-5.66965854205234]
								}, {
									"case":	723,
									"scores":	[-5.66965854205234]
								}, {
									"case":	724,
									"scores":	[-5.66965854205234]
								}, {
									"case":	725,
									"scores":	[-5.66965854205234]
								}, {
									"case":	726,
									"scores":	[-5.66965854205234]
								}, {
									"case":	727,
									"scores":	[-5.66965854205234]
								}, {
									"case":	728,
									"scores":	[-5.66965854205234]
								}, {
									"case":	729,
									"scores":	[-5.66965854205234]
								}, {
									"case":	730,
									"scores":	[-5.66965854205234]
								}, {
									"case":	731,
									"scores":	[-5.66965854205234]
								}, {
									"case":	732,
									"scores":	[-5.66965854205234]
								}, {
									"case":	733,
									"scores":	[-5.66965854205234]
								}, {
									"case":	734,
									"scores":	[-5.66965854205234]
								}, {
									"case":	735,
									"scores":	[-5.66965854205234]
								}, {
									"case":	736,
									"scores":	[-5.66965854205234]
								}, {
									"case":	737,
									"scores":	[-5.66965854205234]
								}, {
									"case":	738,
									"scores":	[-5.66965854205234]
								}, {
									"case":	739,
									"scores":	[-5.66965854205234]
								}, {
									"case":	740,
									"scores":	[-5.66965854205234]
								}, {
									"case":	741,
									"scores":	[-5.66965854205234]
								}, {
									"case":	742,
									"scores":	[-5.66965854205234]
								}, {
									"case":	743,
									"scores":	[-5.66965854205234]
								}, {
									"case":	744,
									"scores":	[-5.66965854205234]
								}, {
									"case":	745,
									"scores":	[-5.66965854205234]
								}, {
									"case":	746,
									"scores":	[-5.66965854205234]
								}, {
									"case":	747,
									"scores":	[-5.66965854205234]
								}, {
									"case":	748,
									"scores":	[-5.66965854205234]
								}, {
									"case":	749,
									"scores":	[-5.66965854205234]
								}, {
									"case":	750,
									"scores":	[-5.66965854205234]
								}, {
									"case":	751,
									"scores":	[-5.66965854205234]
								}, {
									"case":	752,
									"scores":	[-5.66965854205234]
								}, {
									"case":	753,
									"scores":	[-5.66965854205234]
								}, {
									"case":	754,
									"scores":	[-5.66965854205234]
								}, {
									"case":	755,
									"scores":	[-5.66965854205234]
								}, {
									"case":	756,
									"scores":	[-5.66965854205234]
								}, {
									"case":	757,
									"scores":	[-5.66965854205234]
								}, {
									"case":	758,
									"scores":	[-5.66965854205234]
								}, {
									"case":	759,
									"scores":	[-5.66965854205234]
								}, {
									"case":	760,
									"scores":	[-5.66965854205234]
								}, {
									"case":	761,
									"scores":	[-5.66965854205234]
								}, {
									"case":	762,
									"scores":	[-5.66965854205234]
								}, {
									"case":	763,
									"scores":	[-5.66965854205234]
								}, {
									"case":	764,
									"scores":	[-5.66965854205234]
								}, {
									"case":	765,
									"scores":	[-5.66965854205234]
								}, {
									"case":	766,
									"scores":	[-5.66965854205234]
								}, {
									"case":	767,
									"scores":	[-5.66965854205234]
								}, {
									"case":	768,
									"scores":	[-5.66965854205234]
								}, {
									"case":	769,
									"scores":	[-5.66965854205234]
								}, {
									"case":	770,
									"scores":	[-5.66965854205234]
								}, {
									"case":	771,
									"scores":	[-5.66965854205234]
								}, {
									"case":	772,
									"scores":	[-5.66965854205234]
								}, {
									"case":	773,
									"scores":	[-5.66965854205234]
								}, {
									"case":	774,
									"scores":	[-5.66965854205234]
								}, {
									"case":	775,
									"scores":	[-5.66965854205234]
								}, {
									"case":	776,
									"scores":	[-5.66965854205234]
								}, {
									"case":	777,
									"scores":	[-5.66965854205234]
								}, {
									"case":	778,
									"scores":	[-5.66965854205234]
								}, {
									"case":	779,
									"scores":	[-5.66965854205234]
								}, {
									"case":	780,
									"scores":	[-5.66965854205234]
								}, {
									"case":	781,
									"scores":	[-5.66965854205234]
								}, {
									"case":	782,
									"scores":	[-5.66965854205234]
								}, {
									"case":	783,
									"scores":	[-5.66965854205234]
								}, {
									"case":	784,
									"scores":	[-5.66965854205234]
								}, {
									"case":	785,
									"scores":	[-5.66965854205234]
								}, {
									"case":	786,
									"scores":	[-5.66965854205234]
								}, {
									"case":	787,
									"scores":	[-5.66965854205234]
								}, {
									"case":	788,
									"scores":	[-5.66965854205234]
								}, {
									"case":	789,
									"scores":	[-5.66965854205234]
								}, {
									"case":	790,
									"scores":	[-5.66965854205234]
								}, {
									"case":	791,
									"scores":	[-5.66965854205234]
								}, {
									"case":	792,
									"scores":	[-5.66965854205234]
								}, {
									"case":	793,
									"scores":	[-5.66965854205234]
								}, {
									"case":	794,
									"scores":	[-5.66965854205234]
								}, {
									"case":	795,
									"scores":	[-5.66965854205234]
								}, {
									"case":	796,
									"scores":	[-5.66965854205234]
								}, {
									"case":	797,
									"scores":	[-5.66965854205234]
								}, {
									"case":	798,
									"scores":	[-5.66965854205234]
								}, {
									"case":	799,
									"scores":	[-5.66965854205234]
								}, {
									"case":	800,
									"scores":	[-5.66965854205234]
								}, {
									"case":	801,
									"scores":	[-5.66965854205234]
								}, {
									"case":	802,
									"scores":	[-5.66965854205234]
								}, {
									"case":	803,
									"scores":	[-5.66965854205234]
								}, {
									"case":	804,
									"scores":	[-5.66965854205234]
								}, {
									"case":	805,
									"scores":	[-5.66965854205234]
								}, {
									"case":	806,
									"scores":	[-5.66965854205234]
								}, {
									"case":	807,
									"scores":	[-5.66965854205234]
								}, {
									"case":	808,
									"scores":	[-5.66965854205234]
								}, {
									"case":	809,
									"scores":	[-5.66965854205234]
								}, {
									"case":	810,
									"scores":	[-5.66965854205234]
								}, {
									"case":	811,
									"scores":	[-5.66965854205234]
								}, {
									"case":	812,
									"scores":	[-5.66965854205234]
								}, {
									"case":	813,
									"scores":	[-5.66965854205234]
								}, {
									"case":	814,
									"scores":	[-5.66965854205234]
								}, {
									"case":	815,
									"scores":	[-5.66965854205234]
								}, {
									"case":	816,
									"scores":	[-5.66965854205234]
								}, {
									"case":	817,
									"scores":	[-5.66965854205234]
								}, {
									"case":	818,
									"scores":	[-5.66965854205234]
								}, {
									"case":	819,
									"scores":	[-5.66965854205234]
								}, {
									"case":	820,
									"scores":	[-5.66965854205234]
								}, {
									"case":	821,
									"scores":	[-5.66965854205234]
								}, {
									"case":	822,
									"scores":	[-5.66965854205234]
								}, {
									"case":	823,
									"scores":	[-5.66965854205234]
								}, {
									"case":	824,
									"scores":	[-5.66965854205234]
								}, {
									"case":	825,
									"scores":	[-5.66965854205234]
								}, {
									"case":	826,
									"scores":	[-5.66965854205234]
								}, {
									"case":	827,
									"scores":	[-5.66965854205234]
								}, {
									"case":	828,
									"scores":	[-5.66965854205234]
								}, {
									"case":	829,
									"scores":	[-5.66965854205234]
								}, {
									"case":	830,
									"scores":	[-5.66965854205234]
								}, {
									"case":	831,
									"scores":	[-5.66965854205234]
								}, {
									"case":	832,
									"scores":	[-5.66965854205234]
								}, {
									"case":	833,
									"scores":	[-5.66965854205234]
								}, {
									"case":	834,
									"scores":	[-5.66965854205234]
								}, {
									"case":	835,
									"scores":	[-5.66965854205234]
								}, {
									"case":	836,
									"scores":	[-5.66965854205234]
								}, {
									"case":	837,
									"scores":	[-5.66965854205234]
								}, {
									"case":	838,
									"scores":	[-5.66965854205234]
								}, {
									"case":	839,
									"scores":	[-5.66965854205234]
								}, {
									"case":	840,
									"scores":	[-5.66965854205234]
								}, {
									"case":	841,
									"scores":	[-5.66965854205234]
								}, {
									"case":	842,
									"scores":	[-5.66965854205234]
								}, {
									"case":	843,
									"scores":	[-5.66965854205234]
								}, {
									"case":	844,
									"scores":	[-5.66965854205234]
								}, {
									"case":	845,
									"scores":	[-5.66965854205234]
								}, {
									"case":	846,
									"scores":	[-5.66965854205234]
								}, {
									"case":	847,
									"scores":	[-5.66965854205234]
								}, {
									"case":	848,
									"scores":	[-5.66965854205234]
								}, {
									"case":	849,
									"scores":	[-5.66965854205234]
								}, {
									"case":	850,
									"scores":	[-5.66965854205234]
								}, {
									"case":	851,
									"scores":	[-5.66965854205234]
								}, {
									"case":	852,
									"scores":	[-5.66965854205234]
								}, {
									"case":	853,
									"scores":	[-5.66965854205234]
								}, {
									"case":	854,
									"scores":	[-5.66965854205234]
								}, {
									"case":	855,
									"scores":	[-5.66965854205234]
								}, {
									"case":	856,
									"scores":	[-5.66965854205234]
								}, {
									"case":	857,
									"scores":	[-5.66965854205234]
								}, {
									"case":	858,
									"scores":	[-5.66965854205234]
								}, {
									"case":	859,
									"scores":	[-5.66965854205234]
								}, {
									"case":	860,
									"scores":	[-5.66965854205234]
								}, {
									"case":	861,
									"scores":	[-5.66965854205234]
								}, {
									"case":	862,
									"scores":	[-5.66965854205234]
								}, {
									"case":	863,
									"scores":	[-5.66965854205234]
								}, {
									"case":	864,
									"scores":	[-5.66965854205234]
								}, {
									"case":	865,
									"scores":	[-5.66965854205234]
								}, {
									"case":	866,
									"scores":	[-5.66965854205234]
								}, {
									"case":	867,
									"scores":	[-5.66965854205234]
								}, {
									"case":	868,
									"scores":	[-5.66965854205234]
								}, {
									"case":	869,
									"scores":	[-5.66965854205234]
								}, {
									"case":	870,
									"scores":	[-5.66965854205234]
								}, {
									"case":	871,
									"scores":	[-5.66965854205234]
								}, {
									"case":	872,
									"scores":	[-5.66965854205234]
								}, {
									"case":	873,
									"scores":	[-5.66965854205234]
								}, {
									"case":	874,
									"scores":	[-5.66965854205234]
								}, {
									"case":	875,
									"scores":	[-5.66965854205234]
								}, {
									"case":	876,
									"scores":	[-5.66965854205234]
								}, {
									"case":	877,
									"scores":	[-5.66965854205234]
								}, {
									"case":	878,
									"scores":	[-5.66965854205234]
								}, {
									"case":	879,
									"scores":	[-5.66965854205234]
								}, {
									"case":	880,
									"scores":	[-5.66965854205234]
								}, {
									"case":	881,
									"scores":	[-5.66965854205234]
								}, {
									"case":	882,
									"scores":	[-5.66965854205234]
								}, {
									"case":	883,
									"scores":	[-5.66965854205234]
								}, {
									"case":	884,
									"scores":	[-5.66965854205234]
								}, {
									"case":	885,
									"scores":	[-5.66965854205234]
								}, {
									"case":	886,
									"scores":	[-5.66965854205234]
								}, {
									"case":	887,
									"scores":	[-5.66965854205234]
								}, {
									"case":	888,
									"scores":	[-5.66965854205234]
								}, {
									"case":	889,
									"scores":	[-5.66965854205234]
								}, {
									"case":	890,
									"scores":	[-5.66965854205234]
								}, {
									"case":	891,
									"scores":	[-5.66965854205234]
								}, {
									"case":	892,
									"scores":	[-5.66965854205234]
								}, {
									"case":	893,
									"scores":	[-5.66965854205234]
								}, {
									"case":	894,
									"scores":	[-5.66965854205234]
								}, {
									"case":	895,
									"scores":	[-5.66965854205234]
								}, {
									"case":	896,
									"scores":	[-5.66965854205234]
								}, {
									"case":	897,
									"scores":	[-5.66965854205234]
								}, {
									"case":	898,
									"scores":	[-5.66965854205234]
								}, {
									"case":	899,
									"scores":	[-5.66965854205234]
								}, {
									"case":	900,
									"scores":	[-5.66965854205234]
								}, {
									"case":	901,
									"scores":	[-5.66965854205234]
								}, {
									"case":	902,
									"scores":	[-5.66965854205234]
								}, {
									"case":	903,
									"scores":	[-5.66965854205234]
								}, {
									"case":	904,
									"scores":	[-5.66965854205234]
								}, {
									"case":	905,
									"scores":	[-5.66965854205234]
								}, {
									"case":	906,
									"scores":	[-5.66965854205234]
								}, {
									"case":	907,
									"scores":	[-5.66965854205234]
								}, {
									"case":	908,
									"scores":	[-5.66965854205234]
								}, {
									"case":	909,
									"scores":	[-5.66965854205234]
								}, {
									"case":	910,
									"scores":	[-5.66965854205234]
								}, {
									"case":	911,
									"scores":	[-5.66965854205234]
								}, {
									"case":	912,
									"scores":	[-5.66965854205234]
								}, {
									"case":	913,
									"scores":	[-5.66965854205234]
								}, {
									"case":	914,
									"scores":	[-5.66965854205234]
								}, {
									"case":	915,
									"scores":	[-5.66965854205234]
								}, {
									"case":	916,
									"scores":	[-5.66965854205234]
								}, {
									"case":	917,
									"scores":	[-5.66965854205234]
								}, {
									"case":	918,
									"scores":	[-5.66965854205234]
								}, {
									"case":	919,
									"scores":	[-5.66965854205234]
								}, {
									"case":	920,
									"scores":	[-5.66965854205234]
								}, {
									"case":	921,
									"scores":	[-5.66965854205234]
								}, {
									"case":	922,
									"scores":	[-5.66965854205234]
								}, {
									"case":	923,
									"scores":	[-5.66965854205234]
								}, {
									"case":	924,
									"scores":	[-5.66965854205234]
								}, {
									"case":	925,
									"scores":	[-5.66965854205234]
								}, {
									"case":	926,
									"scores":	[-5.66965854205234]
								}, {
									"case":	927,
									"scores":	[-5.66965854205234]
								}, {
									"case":	928,
									"scores":	[-5.66965854205234]
								}, {
									"case":	929,
									"scores":	[-5.66965854205234]
								}, {
									"case":	930,
									"scores":	[-5.66965854205234]
								}, {
									"case":	931,
									"scores":	[-5.66965854205234]
								}, {
									"case":	932,
									"scores":	[-5.66965854205234]
								}, {
									"case":	933,
									"scores":	[-5.66965854205234]
								}, {
									"case":	934,
									"scores":	[-5.66965854205234]
								}, {
									"case":	935,
									"scores":	[-5.66965854205234]
								}, {
									"case":	936,
									"scores":	[-5.66965854205234]
								}, {
									"case":	937,
									"scores":	[-5.66965854205234]
								}, {
									"case":	938,
									"scores":	[-5.66965854205234]
								}, {
									"case":	939,
									"scores":	[-5.66965854205234]
								}, {
									"case":	940,
									"scores":	[-5.66965854205234]
								}, {
									"case":	941,
									"scores":	[-5.66965854205234]
								}, {
									"case":	942,
									"scores":	[-5.66965854205234]
								}, {
									"case":	943,
									"scores":	[-5.66965854205234]
								}, {
									"case":	944,
									"scores":	[-5.66965854205234]
								}, {
									"case":	945,
									"scores":	[-5.66965854205234]
								}, {
									"case":	946,
									"scores":	[-5.66965854205234]
								}, {
									"case":	947,
									"scores":	[-5.66965854205234]
								}, {
									"case":	948,
									"scores":	[-5.66965854205234]
								}, {
									"case":	949,
									"scores":	[-5.66965854205234]
								}, {
									"case":	950,
									"scores":	[-5.66965854205234]
								}, {
									"case":	951,
									"scores":	[-5.66965854205234]
								}, {
									"case":	952,
									"scores":	[-5.66965854205234]
								}, {
									"case":	953,
									"scores":	[-5.66965854205234]
								}, {
									"case":	954,
									"scores":	[-5.66965854205234]
								}, {
									"case":	955,
									"scores":	[-5.66965854205234]
								}, {
									"case":	956,
									"scores":	[-5.66965854205234]
								}, {
									"case":	957,
									"scores":	[-5.66965854205234]
								}, {
									"case":	958,
									"scores":	[-5.66965854205234]
								}, {
									"case":	959,
									"scores":	[-5.66965854205234]
								}, {
									"case":	960,
									"scores":	[-5.66965854205234]
								}, {
									"case":	961,
									"scores":	[-5.66965854205234]
								}, {
									"case":	962,
									"scores":	[-5.66965854205234]
								}, {
									"case":	963,
									"scores":	[-5.66965854205234]
								}, {
									"case":	964,
									"scores":	[-5.66965854205234]
								}, {
									"case":	965,
									"scores":	[-5.66965854205234]
								}, {
									"case":	966,
									"scores":	[-5.66965854205234]
								}, {
									"case":	967,
									"scores":	[-5.66965854205234]
								}, {
									"case":	968,
									"scores":	[-5.66965854205234]
								}, {
									"case":	969,
									"scores":	[-5.66965854205234]
								}, {
									"case":	970,
									"scores":	[-5.66965854205234]
								}, {
									"case":	971,
									"scores":	[-5.66965854205234]
								}, {
									"case":	972,
									"scores":	[-5.66965854205234]
								}, {
									"case":	973,
									"scores":	[-5.66965854205234]
								}, {
									"case":	974,
									"scores":	[-5.66965854205234]
								}, {
									"case":	975,
									"scores":	[-5.66965854205234]
								}, {
									"case":	976,
									"scores":	[-5.66965854205234]
								}, {
									"case":	977,
									"scores":	[-5.66965854205234]
								}, {
									"case":	978,
									"scores":	[-5.66965854205234]
								}, {
									"case":	979,
									"scores":	[-5.66965854205234]
								}, {
									"case":	980,
									"scores":	[-5.66965854205234]
								}, {
									"case":	981,
									"scores":	[-5.66965854205234]
								}, {
									"case":	982,
									"scores":	[-5.66965854205234]
								}, {
									"case":	983,
									"scores":	[-5.66965854205234]
								}, {
									"case":	984,
									"scores":	[-5.66965854205234]
								}, {
									"case":	985,
									"scores":	[-5.66965854205234]
								}, {
									"case":	986,
									"scores":	[-5.66965854205234]
								}, {
									"case":	987,
									"scores":	[-5.66965854205234]
								}, {
									"case":	988,
									"scores":	[-5.66965854205234]
								}, {
									"case":	989,
									"scores":	[-5.66965854205234]
								}, {
									"case":	990,
									"scores":	[-5.66965854205234]
								}, {
									"case":	991,
									"scores":	[-5.66965854205234]
								}, {
									"case":	992,
									"scores":	[-5.66965854205234]
								}, {
									"case":	993,
									"scores":	[-5.66965854205234]
								}, {
									"case":	994,
									"scores":	[-5.66965854205234]
								}, {
									"case":	995,
									"scores":	[-5.66965854205234]
								}, {
									"case":	996,
									"scores":	[-5.66965854205234]
								}, {
									"case":	997,
									"scores":	[-5.66965854205234]
								}, {
									"case":	998,
									"scores":	[-5.66965854205234]
								}, {
									"case":	999,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1000,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1001,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1002,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1003,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1004,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1005,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1006,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1007,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1008,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1009,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1010,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1011,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1012,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1013,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1014,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1015,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1016,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1017,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1018,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1019,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1020,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1021,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1022,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1023,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1024,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1025,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1026,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1027,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1028,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1029,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1030,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1031,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1032,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1033,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1034,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1035,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1036,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1037,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1038,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1039,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1040,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1041,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1042,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1043,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1044,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1045,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1046,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1047,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1048,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1049,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1050,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1051,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1052,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1053,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1054,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1055,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1056,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1057,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1058,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1059,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1060,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1061,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1062,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1063,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1064,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1065,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1066,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1067,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1068,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1069,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1070,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1071,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1072,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1073,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1074,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1075,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1076,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1077,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1078,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1079,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1080,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1081,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1082,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1083,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1084,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1085,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1086,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1087,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1088,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1089,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1090,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1091,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1092,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1093,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1094,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1095,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1096,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1097,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1098,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1099,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1100,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1101,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1102,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1103,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1104,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1105,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1106,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1107,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1108,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1109,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1110,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1111,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1112,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1113,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1114,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1115,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1116,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1117,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1118,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1119,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1120,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1121,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1122,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1123,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1124,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1125,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1126,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1127,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1128,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1129,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1130,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1131,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1132,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1133,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1134,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1135,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1136,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1137,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1138,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1139,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1140,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1141,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1142,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1143,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1144,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1145,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1146,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1147,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1148,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1149,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1150,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1151,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1152,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1153,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1154,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1155,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1156,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1157,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1158,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1159,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1160,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1161,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1162,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1163,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1164,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1165,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1166,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1167,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1168,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1169,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1170,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1171,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1172,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1173,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1174,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1175,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1176,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1177,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1178,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1179,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1180,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1181,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1182,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1183,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1184,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1185,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1186,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1187,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1188,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1189,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1190,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1191,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1192,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1193,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1194,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1195,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1196,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1197,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1198,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1199,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1200,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1201,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1202,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1203,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1204,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1205,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1206,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1207,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1208,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1209,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1210,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1211,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1212,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1213,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1214,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1215,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1216,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1217,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1218,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1219,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1220,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1221,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1222,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1223,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1224,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1225,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1226,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1227,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1228,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1229,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1230,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1231,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1232,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1233,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1234,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1235,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1236,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1237,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1238,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1239,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1240,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1241,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1242,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1243,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1244,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1245,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1246,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1247,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1248,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1249,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1250,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1251,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1252,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1253,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1254,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1255,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1256,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1257,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1258,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1259,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1260,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1261,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1262,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1263,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1264,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1265,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1266,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1267,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1268,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1269,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1270,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1271,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1272,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1273,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1274,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1275,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1276,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1277,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1278,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1279,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1280,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1281,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1282,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1283,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1284,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1285,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1286,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1287,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1288,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1289,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1290,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1291,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1292,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1293,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1294,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1295,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1296,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1297,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1298,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1299,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1300,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1301,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1302,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1303,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1304,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1305,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1306,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1307,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1308,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1309,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1310,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1311,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1312,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1313,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1314,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1315,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1316,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1317,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1318,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1319,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1320,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1321,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1322,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1323,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1324,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1325,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1326,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1327,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1328,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1329,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1330,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1331,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1332,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1333,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1334,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1335,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1336,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1337,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1338,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1339,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1340,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1341,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1342,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1343,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1344,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1345,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1346,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1347,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1348,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1349,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1350,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1351,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1352,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1353,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1354,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1355,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1356,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1357,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1358,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1359,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1360,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1361,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1362,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1363,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1364,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1365,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1366,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1367,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1368,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1369,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1370,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1371,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1372,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1373,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1374,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1375,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1376,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1377,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1378,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1379,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1380,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1381,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1382,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1383,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1384,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1385,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1386,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1387,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1388,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1389,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1390,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1391,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1392,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1393,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1394,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1395,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1396,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1397,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1398,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1399,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1400,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1401,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1402,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1403,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1404,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1405,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1406,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1407,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1408,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1409,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1410,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1411,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1412,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1413,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1414,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1415,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1416,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1417,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1418,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1419,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1420,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1421,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1422,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1423,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1424,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1425,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1426,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1427,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1428,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1429,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1430,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1431,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1432,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1433,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1434,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1435,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1436,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1437,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1438,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1439,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1440,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1441,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1442,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1443,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1444,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1445,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1446,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1447,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1448,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1449,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1450,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1451,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1452,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1453,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1454,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1455,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1456,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1457,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1458,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1459,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1460,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1461,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1462,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1463,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1464,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1465,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1466,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1467,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1468,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1469,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1470,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1471,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1472,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1473,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1474,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1475,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1476,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1477,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1478,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1479,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1480,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1481,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1482,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1483,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1484,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1485,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1486,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1487,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1488,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1489,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1490,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1491,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1492,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1493,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1494,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1495,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1496,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1497,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1498,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1499,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1500,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1501,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1502,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1503,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1504,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1505,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1506,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1507,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1508,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1509,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1510,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1511,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1512,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1513,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1514,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1515,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1516,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1517,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1518,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1519,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1520,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1521,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1522,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1523,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1524,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1525,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1526,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1527,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1528,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1529,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1530,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1531,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1532,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1533,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1534,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1535,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1536,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1537,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1538,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1539,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1540,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1541,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1542,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1543,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1544,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1545,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1546,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1547,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1548,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1549,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1550,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1551,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1552,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1553,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1554,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1555,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1556,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1557,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1558,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1559,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1560,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1561,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1562,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1563,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1564,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1565,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1566,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1567,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1568,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1569,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1570,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1571,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1572,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1573,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1574,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1575,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1576,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1577,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1578,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1579,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1580,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1581,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1582,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1583,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1584,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1585,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1586,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1587,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1588,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1589,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1590,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1591,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1592,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1593,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1594,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1595,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1596,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1597,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1598,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1599,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1600,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1601,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1602,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1603,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1604,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1605,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1606,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1607,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1608,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1609,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1610,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1611,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1612,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1613,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1614,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1615,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1616,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1617,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1618,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1619,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1620,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1621,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1622,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1623,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1624,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1625,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1626,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1627,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1628,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1629,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1630,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1631,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1632,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1633,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1634,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1635,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1636,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1637,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1638,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1639,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1640,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1641,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1642,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1643,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1644,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1645,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1646,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1647,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1648,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1649,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1650,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1651,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1652,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1653,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1654,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1655,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1656,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1657,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1658,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1659,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1660,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1661,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1662,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1663,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1664,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1665,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1666,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1667,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1668,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1669,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1670,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1671,
									"scores":	[-7.71144964205234, -7.96953535205234, -7.15090564205234, -7.71144964205234, -6.63213564205234, -7.40899135205234, -7.15090564205234, -7.15090564205234, -7.40899135205234, -7.15090564205234, -7.15090564205234, -7.15090564205234, -7.40899135205234, -7.15090564205234, -7.15090564205234, -7.15090564205234, -7.15090564205234, -7.96318330505234, -7.40899135205234, -7.40899135205234, -8.52372730505234, -7.15090564205234, -7.15090564205234, -7.15090564205234, -7.79330066205234, -7.40899135205234, -7.96318330505234, -7.96318330505234]
								}, {
									"case":	1672,
									"scores":	[-7.71044964205234, -7.9685353520523385, -7.14990564205234, -7.71044964205234, -6.63113564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.9621833050523385, -7.4079913520523384, -7.4079913520523384, -8.52272730505234, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.79230066205234, -7.4079913520523384, -7.9621833050523385, -7.9621833050523385]
								}, {
									"case":	1673,
									"scores":	[-7.71044964205234, -7.9685353520523385, -7.14990564205234, -7.71044964205234, -6.63113564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.9621833050523385, -7.4079913520523384, -7.4079913520523384, -8.52272730505234, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.79230066205234, -7.4079913520523384, -7.9621833050523385, -7.9621833050523385]
								}, {
									"case":	1674,
									"scores":	[-7.71044964205234, -7.9685353520523385, -7.14990564205234, -7.71044964205234, -6.63113564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.4079913520523384, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.9621833050523385, -7.4079913520523384, -7.4079913520523384, -8.52272730505234, -7.14990564205234, -7.14990564205234, -7.14990564205234, -7.79230066205234, -7.4079913520523384, -7.9621833050523385, -7.9621833050523385]
								}, {
									"case":	1675,
									"scores":	[-7.71416801205234, -7.97225372205234, -7.15362401205234, -7.71416801205234, -6.63485401205234, -7.41170972205234, -7.15362401205234, -7.15362401205234, -7.41170972205234, -7.15362401205234, -7.15362401205234, -7.15362401205234, -7.41170972205234, -7.15362401205234, -7.15362401205234, -7.15362401205234, -7.15362401205234, -7.96590167505234, -7.41170972205234, -7.41170972205234, -8.52644567505234, -7.15362401205234, -7.15362401205234, -7.15362401205234, -7.79601903205234, -7.41170972205234, -7.96590167505234, -7.96590167505234]
								}]
						}, {
							"switch":	41,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	685,
							"begin_column":	21,
							"end_line":	685,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L685\", 28, &(i), sizeof (i), &(codestr), sizeof (codestr), &(tgttgt), sizeof (tgttgt), &(opcode), sizeof (opcode), &(codelen), sizeof (codelen), &(blocks), sizeof (blocks), &(tgt), sizeof (tgt), &(nops), sizeof (nops), &(addrmap), sizeof (addrmap), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(tabsiz), sizeof (tabsiz), &(lineno), sizeof (lineno), &(new_line), sizeof (new_line), &(h), sizeof (h), &(j), sizeof (j), &(adj), sizeof (adj), &(code), sizeof (code), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(consts), sizeof (consts), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(_Py_RefTotal), sizeof (_Py_RefTotal), &(name), sizeof (name), &(names), sizeof (names), &(lineno_obj), sizeof (lineno_obj)))\n    goto exitUnchanged;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.75742838905234, -7.17939438905234, -6.21188438905234, -6.75742838905234, -6.0404945490523385, -6.63385038905234, -6.21188438905234, -6.21188438905234, -6.63385038905234, -6.21188438905234, -6.21188438905234, -6.21188438905234, -6.63385038905234, -6.21188438905234, -6.21188438905234, -6.21188438905234, -6.21188438905234, -7.38938578905234, -6.63385038905234, -6.63385038905234, -7.9349297890523385, -6.21188438905234, -6.21188438905234, -6.21188438905234, -6.74343360905234, -6.63385038905234, -7.38938578905234, -7.38938578905234]
								}]
						}]
				}, {
					"line":	683,
					"switches":	[{
							"switch":	38,
							"types":	[[], [], [], [], [], [], [], [], [], [1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296], [], [], [], [], [], []],
							"begin_line":	684,
							"begin_column":	15,
							"end_line":	684,
							"end_column":	15,
							"patch_codes":	["PyMem_Free((addrmap))", "PyMem_Free((blocks))", "PyMem_Free((codestr))", "PyMem_Free((lineno))", "addrmap = (addrmap)", "addrmap[i] = (-1)", "addrmap[i] = (0)", "addrmap[i] = (1)", "addrmap[i] = (10)", "addrmap[i] = (100)", "addrmap[i] = (101)", "addrmap[i] = (102)", "addrmap[i] = (103)", "addrmap[i] = (104)", "addrmap[i] = (107)", "addrmap[i] = (11)", "addrmap[i] = (110)", "addrmap[i] = (111)", "addrmap[i] = (112)", "addrmap[i] = (113)", "addrmap[i] = (114)", "addrmap[i] = (115)", "addrmap[i] = (116)", "addrmap[i] = (119)", "addrmap[i] = (12)", "addrmap[i] = (120)", "addrmap[i] = (121)", "addrmap[i] = (122)", "addrmap[i] = (132)", "addrmap[i] = (134217728)", "addrmap[i] = (143)", "addrmap[i] = (144)", "addrmap[i] = (15)", "addrmap[i] = (19)", "addrmap[i] = (2)", "addrmap[i] = (20)", "addrmap[i] = (22)", "addrmap[i] = (23)", "addrmap[i] = (24)", "addrmap[i] = (25)", "addrmap[i] = (255)", "addrmap[i] = (256)", "addrmap[i] = (26)", "addrmap[i] = (27)", "addrmap[i] = (3)", "addrmap[i] = (32700)", "addrmap[i] = (33554432)", "addrmap[i] = (4)", "addrmap[i] = (403)", "addrmap[i] = (404)", "addrmap[i] = (405)", "addrmap[i] = (410)", "addrmap[i] = (411)", "addrmap[i] = (420)", "addrmap[i] = (438)", "addrmap[i] = (492)", "addrmap[i] = (499)", "addrmap[i] = (5)", "addrmap[i] = (521)", "addrmap[i] = (531)", "addrmap[i] = (533)", "addrmap[i] = (534)", "addrmap[i] = (574)", "addrmap[i] = (580)", "addrmap[i] = (581)", "addrmap[i] = (582)", "addrmap[i] = (592)", "addrmap[i] = (597)", "addrmap[i] = (598)", "addrmap[i] = (599)", "addrmap[i] = (6)", "addrmap[i] = (62)", "addrmap[i] = (63)", "addrmap[i] = (64)", "addrmap[i] = (65)", "addrmap[i] = (66)", "addrmap[i] = (7)", "addrmap[i] = (716)", "addrmap[i] = (753)", "addrmap[i] = (8)", "addrmap[i] = (83)", "addrmap[i] = (9)", "addrmap[i] = (90)", "addrmap[i] = (92)", "addrmap[i] = (93)", "addrmap[i] = (adj)", "addrmap[i] = (cum_orig_line)", "addrmap[i] = (h)", "addrmap[i] = (in_consts)", "addrmap[i] = (last_line)", "addrmap[i] = (new_line)", "addrmap[i] = (nops)", "addrmap[i] = (opcode)", "addrmap[i] = (tabsiz)", "addrmap[i] = (tgt)", "addrmap[i] = (tgttgt)", "adj = (-1)", "adj = (0)", "adj = (1)", "adj = (10)", "adj = (100)", "adj = (101)", "adj = (102)", "adj = (103)", "adj = (104)", "adj = (107)", "adj = (11)", "adj = (110)", "adj = (111)", "adj = (112)", "adj = (113)", "adj = (114)", "adj = (115)", "adj = (116)", "adj = (119)", "adj = (12)", "adj = (120)", "adj = (121)", "adj = (122)", "adj = (132)", "adj = (134217728)", "adj = (143)", "adj = (144)", "adj = (15)", "adj = (19)", "adj = (2)", "adj = (20)", "adj = (22)", "adj = (23)", "adj = (24)", "adj = (25)", "adj = (255)", "adj = (256)", "adj = (26)", "adj = (27)", "adj = (3)", "adj = (32700)", "adj = (33554432)", "adj = (4)", "adj = (403)", "adj = (404)", "adj = (405)", "adj = (410)", "adj = (411)", "adj = (420)", "adj = (438)", "adj = (492)", "adj = (499)", "adj = (5)", "adj = (521)", "adj = (531)", "adj = (533)", "adj = (534)", "adj = (574)", "adj = (580)", "adj = (581)", "adj = (582)", "adj = (592)", "adj = (597)", "adj = (598)", "adj = (599)", "adj = (6)", "adj = (62)", "adj = (63)", "adj = (64)", "adj = (65)", "adj = (66)", "adj = (7)", "adj = (716)", "adj = (753)", "adj = (8)", "adj = (83)", "adj = (9)", "adj = (90)", "adj = (92)", "adj = (93)", "adj = (adj)", "adj = (cum_orig_line)", "adj = (h)", "adj = (in_consts)", "adj = (last_line)", "adj = (new_line)", "adj = (nops)", "adj = (opcode)", "adj = (tabsiz)", "adj = (tgt)", "adj = (tgttgt)", "blocks = (blocks)", "blocks = markblocks((codestr), codelen)", "blocks = markblocks((lineno), codelen)", "code = (code)", "code = (consts)", "code = (lineno_obj)", "code = (names)", "codelen = (-1)", "codelen = (0)", "codelen = (1)", "codelen = (10)", "codelen = (100)", "codelen = (101)", "codelen = (102)", "codelen = (103)", "codelen = (104)", "codelen = (107)", "codelen = (11)", "codelen = (110)", "codelen = (111)", "codelen = (112)", "codelen = (113)", "codelen = (114)", "codelen = (115)", "codelen = (116)", "codelen = (119)", "codelen = (12)", "codelen = (120)", "codelen = (121)", "codelen = (122)", "codelen = (132)", "codelen = (134217728)", "codelen = (143)", "codelen = (144)", "codelen = (15)", "codelen = (19)", "codelen = (2)", "codelen = (20)", "codelen = (22)", "codelen = (23)", "codelen = (24)", "codelen = (25)", "codelen = (255)", "codelen = (256)", "codelen = (26)", "codelen = (27)", "codelen = (3)", "codelen = (32700)", "codelen = (33554432)", "codelen = (4)", "codelen = (403)", "codelen = (404)", "codelen = (405)", "codelen = (410)", "codelen = (411)", "codelen = (420)", "codelen = (438)", "codelen = (492)", "codelen = (499)", "codelen = (5)", "codelen = (521)", "codelen = (531)", "codelen = (533)", "codelen = (534)", "codelen = (574)", "codelen = (580)", "codelen = (581)", "codelen = (582)", "codelen = (592)", "codelen = (597)", "codelen = (598)", "codelen = (599)", "codelen = (6)", "codelen = (62)", "codelen = (63)", "codelen = (64)", "codelen = (65)", "codelen = (66)", "codelen = (7)", "codelen = (716)", "codelen = (753)", "codelen = (8)", "codelen = (83)", "codelen = (9)", "codelen = (90)", "codelen = (92)", "codelen = (93)", "codelen = (codelen)", "codelen = (const_stack_size)", "codelen = (const_stack_top)", "codelen = (i)", "codelen = (j)", "codestr = (codestr)", "codestr = (lineno)", "codestr[i] = (-1)", "codestr[i] = (0)", "codestr[i] = (1)", "codestr[i] = (10)", "codestr[i] = (100)", "codestr[i] = (101)", "codestr[i] = (102)", "codestr[i] = (103)", "codestr[i] = (104)", "codestr[i] = (107)", "codestr[i] = (11)", "codestr[i] = (110)", "codestr[i] = (111)", "codestr[i] = (112)", "codestr[i] = (113)", "codestr[i] = (114)", "codestr[i] = (115)", "codestr[i] = (116)", "codestr[i] = (119)", "codestr[i] = (12)", "codestr[i] = (120)", "codestr[i] = (121)", "codestr[i] = (122)", "codestr[i] = (132)", "codestr[i] = (134217728)", "codestr[i] = (143)", "codestr[i] = (144)", "codestr[i] = (15)", "codestr[i] = (19)", "codestr[i] = (2)", "codestr[i] = (20)", "codestr[i] = (22)", "codestr[i] = (23)", "codestr[i] = (24)", "codestr[i] = (25)", "codestr[i] = (255)", "codestr[i] = (256)", "codestr[i] = (26)", "codestr[i] = (27)", "codestr[i] = (3)", "codestr[i] = (32700)", "codestr[i] = (33554432)", "codestr[i] = (4)", "codestr[i] = (403)", "codestr[i] = (404)", "codestr[i] = (405)", "codestr[i] = (410)", "codestr[i] = (411)", "codestr[i] = (420)", "codestr[i] = (438)", "codestr[i] = (492)", "codestr[i] = (499)", "codestr[i] = (5)", "codestr[i] = (521)", "codestr[i] = (531)", "codestr[i] = (533)", "codestr[i] = (534)", "codestr[i] = (574)", "codestr[i] = (580)", "codestr[i] = (581)", "codestr[i] = (582)", "codestr[i] = (592)", "codestr[i] = (597)", "codestr[i] = (598)", "codestr[i] = (599)", "codestr[i] = (6)", "codestr[i] = (62)", "codestr[i] = (63)", "codestr[i] = (64)", "codestr[i] = (65)", "codestr[i] = (66)", "codestr[i] = (7)", "codestr[i] = (716)", "codestr[i] = (753)", "codestr[i] = (8)", "codestr[i] = (83)", "codestr[i] = (9)", "codestr[i] = (90)", "codestr[i] = (92)", "codestr[i] = (93)", "cum_orig_line = (-1)", "cum_orig_line = (0)", "cum_orig_line = (1)", "cum_orig_line = (10)", "cum_orig_line = (100)", "cum_orig_line = (101)", "cum_orig_line = (102)", "cum_orig_line = (103)", "cum_orig_line = (104)", "cum_orig_line = (107)", "cum_orig_line = (11)", "cum_orig_line = (110)", "cum_orig_line = (111)", "cum_orig_line = (112)", "cum_orig_line = (113)", "cum_orig_line = (114)", "cum_orig_line = (115)", "cum_orig_line = (116)", "cum_orig_line = (119)", "cum_orig_line = (12)", "cum_orig_line = (120)", "cum_orig_line = (121)", "cum_orig_line = (122)", "cum_orig_line = (132)", "cum_orig_line = (134217728)", "cum_orig_line = (143)", "cum_orig_line = (144)", "cum_orig_line = (15)", "cum_orig_line = (19)", "cum_orig_line = (2)", "cum_orig_line = (20)", "cum_orig_line = (22)", "cum_orig_line = (23)", "cum_orig_line = (24)", "cum_orig_line = (25)", "cum_orig_line = (255)", "cum_orig_line = (256)", "cum_orig_line = (26)", "cum_orig_line = (27)", "cum_orig_line = (3)", "cum_orig_line = (32700)", "cum_orig_line = (33554432)", "cum_orig_line = (4)", "cum_orig_line = (403)", "cum_orig_line = (404)", "cum_orig_line = (405)", "cum_orig_line = (410)", "cum_orig_line = (411)", "cum_orig_line = (420)", "cum_orig_line = (438)", "cum_orig_line = (492)", "cum_orig_line = (499)", "cum_orig_line = (5)", "cum_orig_line = (521)", "cum_orig_line = (531)", "cum_orig_line = (533)", "cum_orig_line = (534)", "cum_orig_line = (574)", "cum_orig_line = (580)", "cum_orig_line = (581)", "cum_orig_line = (582)", "cum_orig_line = (592)", "cum_orig_line = (597)", "cum_orig_line = (598)", "cum_orig_line = (599)", "cum_orig_line = (6)", "cum_orig_line = (62)", "cum_orig_line = (63)", "cum_orig_line = (64)", "cum_orig_line = (65)", "cum_orig_line = (66)", "cum_orig_line = (7)", "cum_orig_line = (716)", "cum_orig_line = (753)", "cum_orig_line = (8)", "cum_orig_line = (83)", "cum_orig_line = (9)", "cum_orig_line = (90)", "cum_orig_line = (92)", "cum_orig_line = (93)", "cum_orig_line = (adj)", "cum_orig_line = (cum_orig_line)", "cum_orig_line = (h)", "cum_orig_line = (in_consts)", "cum_orig_line = (last_line)", "cum_orig_line = (new_line)", "cum_orig_line = (nops)", "cum_orig_line = (opcode)", "cum_orig_line = (tabsiz)", "cum_orig_line = (tgt)", "cum_orig_line = (tgttgt)", "h = ((const_stack_top >= j - 1) ? (load_const_stack)[const_stack_top - j + 1] : -1)", "h = (-1)", "h = (0)", "h = (1)", "h = (10)", "h = (100)", "h = (101)", "h = (102)", "h = (103)", "h = (104)", "h = (107)", "h = (11)", "h = (110)", "h = (111)", "h = (112)", "h = (113)", "h = (114)", "h = (115)", "h = (116)", "h = (119)", "h = (12)", "h = (120)", "h = (121)", "h = (122)", "h = (132)", "h = (134217728)", "h = (143)", "h = (144)", "h = (15)", "h = (19)", "h = (2)", "h = (20)", "h = (22)", "h = (23)", "h = (24)", "h = (25)", "h = (255)", "h = (256)", "h = (26)", "h = (27)", "h = (3)", "h = (32700)", "h = (33554432)", "h = (4)", "h = (403)", "h = (404)", "h = (405)", "h = (410)", "h = (411)", "h = (420)", "h = (438)", "h = (492)", "h = (499)", "h = (5)", "h = (521)", "h = (531)", "h = (533)", "h = (534)", "h = (574)", "h = (580)", "h = (581)", "h = (582)", "h = (592)", "h = (597)", "h = (598)", "h = (599)", "h = (6)", "h = (62)", "h = (63)", "h = (64)", "h = (65)", "h = (66)", "h = (7)", "h = (716)", "h = (753)", "h = (8)", "h = (83)", "h = (9)", "h = (90)", "h = (92)", "h = (93)", "h = (adj)", "h = (cum_orig_line)", "h = (h)", "h = (in_consts)", "h = (last_line)", "h = (new_line)", "h = (nops)", "h = (opcode)", "h = (tabsiz)", "h = (tgt)", "h = (tgttgt)", "h = load_global((codestr), i, name, consts)", "h = load_global((lineno), i, name, consts)", "h = load_global(codestr, i, (name), consts)", "h = load_global(codestr, i, name, (code))", "h = load_global(codestr, i, name, (consts))", "h = load_global(codestr, i, name, (lineno_obj))", "h = load_global(codestr, i, name, (names))", "in_consts = (-1)", "in_consts = (0)", "in_consts = (1)", "in_consts = (10)", "in_consts = (100)", "in_consts = (101)", "in_consts = (102)", "in_consts = (103)", "in_consts = (104)", "in_consts = (107)", "in_consts = (11)", "in_consts = (110)", "in_consts = (111)", "in_consts = (112)", "in_consts = (113)", "in_consts = (114)", "in_consts = (115)", "in_consts = (116)", "in_consts = (119)", "in_consts = (12)", "in_consts = (120)", "in_consts = (121)", "in_consts = (122)", "in_consts = (132)", "in_consts = (134217728)", "in_consts = (143)", "in_consts = (144)", "in_consts = (15)", "in_consts = (19)", "in_consts = (2)", "in_consts = (20)", "in_consts = (22)", "in_consts = (23)", "in_consts = (24)", "in_consts = (25)", "in_consts = (255)", "in_consts = (256)", "in_consts = (26)", "in_consts = (27)", "in_consts = (3)", "in_consts = (32700)", "in_consts = (33554432)", "in_consts = (4)", "in_consts = (403)", "in_consts = (404)", "in_consts = (405)", "in_consts = (410)", "in_consts = (411)", "in_consts = (420)", "in_consts = (438)", "in_consts = (492)", "in_consts = (499)", "in_consts = (5)", "in_consts = (521)", "in_consts = (531)", "in_consts = (533)", "in_consts = (534)", "in_consts = (574)", "in_consts = (580)", "in_consts = (581)", "in_consts = (582)", "in_consts = (592)", "in_consts = (597)", "in_consts = (598)", "in_consts = (599)", "in_consts = (6)", "in_consts = (62)", "in_consts = (63)", "in_consts = (64)", "in_consts = (65)", "in_consts = (66)", "in_consts = (7)", "in_consts = (716)", "in_consts = (753)", "in_consts = (8)", "in_consts = (83)", "in_consts = (9)", "in_consts = (90)", "in_consts = (92)", "in_consts = (93)", "in_consts = (adj)", "in_consts = (cum_orig_line)", "in_consts = (h)", "in_consts = (in_consts)", "in_consts = (last_line)", "in_consts = (new_line)", "in_consts = (nops)", "in_consts = (opcode)", "in_consts = (tabsiz)", "in_consts = (tgt)", "in_consts = (tgttgt)", "j = (-1)", "j = (0)", "j = (1)", "j = (10)", "j = (100)", "j = (101)", "j = (102)", "j = (103)", "j = (104)", "j = (107)", "j = (11)", "j = (110)", "j = (111)", "j = (112)", "j = (113)", "j = (114)", "j = (115)", "j = (116)", "j = (119)", "j = (12)", "j = (120)", "j = (121)", "j = (122)", "j = (132)", "j = (134217728)", "j = (143)", "j = (144)", "j = (15)", "j = (19)", "j = (2)", "j = (20)", "j = (22)", "j = (23)", "j = (24)", "j = (25)", "j = (255)", "j = (256)", "j = (26)", "j = (27)", "j = (3)", "j = (32700)", "j = (33554432)", "j = (4)", "j = (403)", "j = (404)", "j = (405)", "j = (410)", "j = (411)", "j = (420)", "j = (438)", "j = (492)", "j = (499)", "j = (5)", "j = (521)", "j = (531)", "j = (533)", "j = (534)", "j = (574)", "j = (580)", "j = (581)", "j = (582)", "j = (592)", "j = (597)", "j = (598)", "j = (599)", "j = (6)", "j = (62)", "j = (63)", "j = (64)", "j = (65)", "j = (66)", "j = (7)", "j = (716)", "j = (753)", "j = (8)", "j = (83)", "j = (9)", "j = (90)", "j = (92)", "j = (93)", "j = (codelen)", "j = (codestr)[tgt]", "j = (const_stack_size)", "j = (const_stack_top)", "j = (i)", "j = (j)", "j = (lineno)[tgt]", "last_line = (-1)", "last_line = (0)", "last_line = (1)", "last_line = (10)", "last_line = (100)", "last_line = (101)", "last_line = (102)", "last_line = (103)", "last_line = (104)", "last_line = (107)", "last_line = (11)", "last_line = (110)", "last_line = (111)", "last_line = (112)", "last_line = (113)", "last_line = (114)", "last_line = (115)", "last_line = (116)", "last_line = (119)", "last_line = (12)", "last_line = (120)", "last_line = (121)", "last_line = (122)", "last_line = (132)", "last_line = (134217728)", "last_line = (143)", "last_line = (144)", "last_line = (15)", "last_line = (19)", "last_line = (2)", "last_line = (20)", "last_line = (22)", "last_line = (23)", "last_line = (24)", "last_line = (25)", "last_line = (255)", "last_line = (256)", "last_line = (26)", "last_line = (27)", "last_line = (3)", "last_line = (32700)", "last_line = (33554432)", "last_line = (4)", "last_line = (403)", "last_line = (404)", "last_line = (405)", "last_line = (410)", "last_line = (411)", "last_line = (420)", "last_line = (438)", "last_line = (492)", "last_line = (499)", "last_line = (5)", "last_line = (521)", "last_line = (531)", "last_line = (533)", "last_line = (534)", "last_line = (574)", "last_line = (580)", "last_line = (581)", "last_line = (582)", "last_line = (592)", "last_line = (597)", "last_line = (598)", "last_line = (599)", "last_line = (6)", "last_line = (62)", "last_line = (63)", "last_line = (64)", "last_line = (65)", "last_line = (66)", "last_line = (7)", "last_line = (716)", "last_line = (753)", "last_line = (8)", "last_line = (83)", "last_line = (9)", "last_line = (90)", "last_line = (92)", "last_line = (93)", "last_line = (adj)", "last_line = (cum_orig_line)", "last_line = (h)", "last_line = (in_consts)", "last_line = (last_line)", "last_line = (new_line)", "last_line = (nops)", "last_line = (opcode)", "last_line = (tabsiz)", "last_line = (tgt)", "last_line = (tgttgt)", "lineno = (codestr)", "lineno = (lineno)", "lineno[i] = (-1)", "lineno[i] = (0)", "lineno[i] = (1)", "lineno[i] = (10)", "lineno[i] = (100)", "lineno[i] = (101)", "lineno[i] = (102)", "lineno[i] = (103)", "lineno[i] = (104)", "lineno[i] = (107)", "lineno[i] = (11)", "lineno[i] = (110)", "lineno[i] = (111)", "lineno[i] = (112)", "lineno[i] = (113)", "lineno[i] = (114)", "lineno[i] = (115)", "lineno[i] = (116)", "lineno[i] = (119)", "lineno[i] = (12)", "lineno[i] = (120)", "lineno[i] = (121)", "lineno[i] = (122)", "lineno[i] = (132)", "lineno[i] = (134217728)", "lineno[i] = (143)", "lineno[i] = (144)", "lineno[i] = (15)", "lineno[i] = (19)", "lineno[i] = (2)", "lineno[i] = (20)", "lineno[i] = (22)", "lineno[i] = (23)", "lineno[i] = (24)", "lineno[i] = (25)", "lineno[i] = (255)", "lineno[i] = (256)", "lineno[i] = (26)", "lineno[i] = (27)", "lineno[i] = (3)", "lineno[i] = (32700)", "lineno[i] = (33554432)", "lineno[i] = (4)", "lineno[i] = (403)", "lineno[i] = (404)", "lineno[i] = (405)", "lineno[i] = (410)", "lineno[i] = (411)", "lineno[i] = (420)", "lineno[i] = (438)", "lineno[i] = (492)", "lineno[i] = (499)", "lineno[i] = (5)", "lineno[i] = (521)", "lineno[i] = (531)", "lineno[i] = (533)", "lineno[i] = (534)", "lineno[i] = (574)", "lineno[i] = (580)", "lineno[i] = (581)", "lineno[i] = (582)", "lineno[i] = (592)", "lineno[i] = (597)", "lineno[i] = (598)", "lineno[i] = (599)", "lineno[i] = (6)", "lineno[i] = (62)", "lineno[i] = (63)", "lineno[i] = (64)", "lineno[i] = (65)", "lineno[i] = (66)", "lineno[i] = (7)", "lineno[i] = (716)", "lineno[i] = (753)", "lineno[i] = (8)", "lineno[i] = (83)", "lineno[i] = (9)", "lineno[i] = (90)", "lineno[i] = (92)", "lineno[i] = (93)", "memset(&(codestr)[h], 9, i - h)", "memset(&(lineno)[h], 9, i - h)", "memset((codestr) + i + 1, 9, 2)", "memset((codestr) + i + 1, 9, 3)", "memset((codestr) + i + 1, 9, 4)", "memset((codestr) + i + 1, 9, 5)", "memset((codestr) + i + 2, 9, 4)", "memset((codestr) + i, 9, 6)", "memset((lineno) + i + 1, 9, 2)", "memset((lineno) + i + 1, 9, 3)", "memset((lineno) + i + 1, 9, 4)", "memset((lineno) + i + 1, 9, 5)", "memset((lineno) + i + 2, 9, 4)", "memset((lineno) + i, 9, 6)", "name = (name)", "new_line = (-1)", "new_line = (0)", "new_line = (1)", "new_line = (10)", "new_line = (100)", "new_line = (101)", "new_line = (102)", "new_line = (103)", "new_line = (104)", "new_line = (107)", "new_line = (11)", "new_line = (110)", "new_line = (111)", "new_line = (112)", "new_line = (113)", "new_line = (114)", "new_line = (115)", "new_line = (116)", "new_line = (119)", "new_line = (12)", "new_line = (120)", "new_line = (121)", "new_line = (122)", "new_line = (132)", "new_line = (134217728)", "new_line = (143)", "new_line = (144)", "new_line = (15)", "new_line = (19)", "new_line = (2)", "new_line = (20)", "new_line = (22)", "new_line = (23)", "new_line = (24)", "new_line = (25)", "new_line = (255)", "new_line = (256)", "new_line = (26)", "new_line = (27)", "new_line = (3)", "new_line = (32700)", "new_line = (33554432)", "new_line = (4)", "new_line = (403)", "new_line = (404)", "new_line = (405)", "new_line = (410)", "new_line = (411)", "new_line = (420)", "new_line = (438)", "new_line = (492)", "new_line = (499)", "new_line = (5)", "new_line = (521)", "new_line = (531)", "new_line = (533)", "new_line = (534)", "new_line = (574)", "new_line = (580)", "new_line = (581)", "new_line = (582)", "new_line = (592)", "new_line = (597)", "new_line = (598)", "new_line = (599)", "new_line = (6)", "new_line = (62)", "new_line = (63)", "new_line = (64)", "new_line = (65)", "new_line = (66)", "new_line = (7)", "new_line = (716)", "new_line = (753)", "new_line = (8)", "new_line = (83)", "new_line = (9)", "new_line = (90)", "new_line = (92)", "new_line = (93)", "new_line = (addrmap)[cum_orig_line]", "new_line = (adj)", "new_line = (cum_orig_line)", "new_line = (h)", "new_line = (in_consts)", "new_line = (last_line)", "new_line = (new_line)", "new_line = (nops)", "new_line = (opcode)", "new_line = (tabsiz)", "new_line = (tgt)", "new_line = (tgttgt)", "opcode = (-1)", "opcode = (0)", "opcode = (1)", "opcode = (10)", "opcode = (100)", "opcode = (101)", "opcode = (102)", "opcode = (103)", "opcode = (104)", "opcode = (107)", "opcode = (11)", "opcode = (110)", "opcode = (111)", "opcode = (112)", "opcode = (113)", "opcode = (114)", "opcode = (115)", "opcode = (116)", "opcode = (119)", "opcode = (12)", "opcode = (120)", "opcode = (121)", "opcode = (122)", "opcode = (132)", "opcode = (134217728)", "opcode = (143)", "opcode = (144)", "opcode = (15)", "opcode = (19)", "opcode = (2)", "opcode = (20)", "opcode = (22)", "opcode = (23)", "opcode = (24)", "opcode = (25)", "opcode = (255)", "opcode = (256)", "opcode = (26)", "opcode = (27)", "opcode = (3)", "opcode = (32700)", "opcode = (33554432)", "opcode = (4)", "opcode = (403)", "opcode = (404)", "opcode = (405)", "opcode = (410)", "opcode = (411)", "opcode = (420)", "opcode = (438)", "opcode = (492)", "opcode = (499)", "opcode = (5)", "opcode = (521)", "opcode = (531)", "opcode = (533)", "opcode = (534)", "opcode = (574)", "opcode = (580)", "opcode = (581)", "opcode = (582)", "opcode = (592)", "opcode = (597)", "opcode = (598)", "opcode = (599)", "opcode = (6)", "opcode = (62)", "opcode = (63)", "opcode = (64)", "opcode = (65)", "opcode = (66)", "opcode = (7)", "opcode = (716)", "opcode = (753)", "opcode = (8)", "opcode = (83)", "opcode = (9)", "opcode = (90)", "opcode = (92)", "opcode = (93)", "opcode = (adj)", "opcode = (codestr)[i]", "opcode = (cum_orig_line)", "opcode = (h)", "opcode = (in_consts)", "opcode = (last_line)", "opcode = (lineno)[i]", "opcode = (new_line)", "opcode = (nops)", "opcode = (opcode)", "opcode = (tabsiz)", "opcode = (tgt)", "opcode = (tgttgt)", "tabsiz = (-1)", "tabsiz = (0)", "tabsiz = (1)", "tabsiz = (10)", "tabsiz = (100)", "tabsiz = (101)", "tabsiz = (102)", "tabsiz = (103)", "tabsiz = (104)", "tabsiz = (107)", "tabsiz = (11)", "tabsiz = (110)", "tabsiz = (111)", "tabsiz = (112)", "tabsiz = (113)", "tabsiz = (114)", "tabsiz = (115)", "tabsiz = (116)", "tabsiz = (119)", "tabsiz = (12)", "tabsiz = (120)", "tabsiz = (121)", "tabsiz = (122)", "tabsiz = (132)", "tabsiz = (134217728)", "tabsiz = (143)", "tabsiz = (144)", "tabsiz = (15)", "tabsiz = (19)", "tabsiz = (2)", "tabsiz = (20)", "tabsiz = (22)", "tabsiz = (23)", "tabsiz = (24)", "tabsiz = (25)", "tabsiz = (255)", "tabsiz = (256)", "tabsiz = (26)", "tabsiz = (27)", "tabsiz = (3)", "tabsiz = (32700)", "tabsiz = (33554432)", "tabsiz = (4)", "tabsiz = (403)", "tabsiz = (404)", "tabsiz = (405)", "tabsiz = (410)", "tabsiz = (411)", "tabsiz = (420)", "tabsiz = (438)", "tabsiz = (492)", "tabsiz = (499)", "tabsiz = (5)", "tabsiz = (521)", "tabsiz = (531)", "tabsiz = (533)", "tabsiz = (534)", "tabsiz = (574)", "tabsiz = (580)", "tabsiz = (581)", "tabsiz = (582)", "tabsiz = (592)", "tabsiz = (597)", "tabsiz = (598)", "tabsiz = (599)", "tabsiz = (6)", "tabsiz = (62)", "tabsiz = (63)", "tabsiz = (64)", "tabsiz = (65)", "tabsiz = (66)", "tabsiz = (7)", "tabsiz = (716)", "tabsiz = (753)", "tabsiz = (8)", "tabsiz = (83)", "tabsiz = (9)", "tabsiz = (90)", "tabsiz = (92)", "tabsiz = (93)", "tabsiz = (adj)", "tabsiz = (cum_orig_line)", "tabsiz = (h)", "tabsiz = (in_consts)", "tabsiz = (last_line)", "tabsiz = (new_line)", "tabsiz = (nops)", "tabsiz = (opcode)", "tabsiz = (tabsiz)", "tabsiz = (tgt)", "tabsiz = (tgttgt)", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((codestr)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + (((lineno)[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (codestr)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || (lineno)[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (codestr)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || (lineno)[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (codestr)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || (lineno)[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (codestr)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || (lineno)[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (codestr)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || (lineno)[tgt] == 112) ? 0 : tgt + 3))", "tgttgt = (-1)", "tgttgt = (0)", "tgttgt = (1)", "tgttgt = (10)", "tgttgt = (100)", "tgttgt = (101)", "tgttgt = (102)", "tgttgt = (103)", "tgttgt = (104)", "tgttgt = (107)", "tgttgt = (11)", "tgttgt = (110)", "tgttgt = (111)", "tgttgt = (112)", "tgttgt = (113)", "tgttgt = (114)", "tgttgt = (115)", "tgttgt = (116)", "tgttgt = (119)", "tgttgt = (12)", "tgttgt = (120)", "tgttgt = (121)", "tgttgt = (122)", "tgttgt = (132)", "tgttgt = (134217728)", "tgttgt = (143)", "tgttgt = (144)", "tgttgt = (15)", "tgttgt = (19)", "tgttgt = (2)", "tgttgt = (20)", "tgttgt = (22)", "tgttgt = (23)", "tgttgt = (24)", "tgttgt = (25)", "tgttgt = (255)", "tgttgt = (256)", "tgttgt = (26)", "tgttgt = (27)", "tgttgt = (3)", "tgttgt = (32700)", "tgttgt = (33554432)", "tgttgt = (4)", "tgttgt = (403)", "tgttgt = (404)", "tgttgt = (405)", "tgttgt = (410)", "tgttgt = (411)", "tgttgt = (420)", "tgttgt = (438)", "tgttgt = (492)", "tgttgt = (499)", "tgttgt = (5)", "tgttgt = (521)", "tgttgt = (531)", "tgttgt = (533)", "tgttgt = (534)", "tgttgt = (574)", "tgttgt = (580)", "tgttgt = (581)", "tgttgt = (582)", "tgttgt = (592)", "tgttgt = (597)", "tgttgt = (598)", "tgttgt = (599)", "tgttgt = (6)", "tgttgt = (62)", "tgttgt = (63)", "tgttgt = (64)", "tgttgt = (65)", "tgttgt = (66)", "tgttgt = (7)", "tgttgt = (716)", "tgttgt = (753)", "tgttgt = (8)", "tgttgt = (83)", "tgttgt = (9)", "tgttgt = (90)", "tgttgt = (92)", "tgttgt = (93)", "tgttgt = (adj)", "tgttgt = (cum_orig_line)", "tgttgt = (h)", "tgttgt = (in_consts)", "tgttgt = (last_line)", "tgttgt = (new_line)", "tgttgt = (nops)", "tgttgt = (opcode)", "tgttgt = (tabsiz)", "tgttgt = (tgt)", "tgttgt = (tgttgt)", "((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(consts))->ob_type))->tp_flags & ((1L << 25))) != 0))\n        ;\n    else\n        __assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 1)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 1))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < 2)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < 2))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof (((h >= 0 || (const_stack_top + 1) < j)) ? 1 : 0) , __extension__ ({\n    if ((h >= 0 || (const_stack_top + 1) < j))\n        ;\n    else\n        __assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((codestr[i] == 100) ? 1 : 0) , __extension__ ({\n    if (codestr[i] == 100)\n        ;\n    else\n        __assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((h + nops == codelen) ? 1 : 0) , __extension__ ({\n    if (h + nops == codelen)\n        ;\n    else\n        __assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__);\n}))", "((void)sizeof ((new_line - last_line < 255) ? 1 : 0) , __extension__ ({\n    if (new_line - last_line < 255)\n        ;\n    else\n        __assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__);\n}))", "PyErr_Clear()", "PyErr_NoMemory()", "PyMem_Free(addrmap)", "PyMem_Free(blocks)", "PyMem_Free(codestr)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 1)\", \"Python/peephole.c\", 592, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < 2)\", \"Python/peephole.c\", 574, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"(h >= 0 || CONST_STACK_LEN() < j)\", \"Python/peephole.c\", 521, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 410, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 403, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_Check(consts)\", \"Python/peephole.c\", 438, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 102, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 157, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_CheckExact(consts)\", \"Python/peephole.c\", 247, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"PyList_GET_ITEM(consts, j) == obj\", \"Python/peephole.c\", 356, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[0] == LOAD_CONST\", \"Python/peephole.c\", 248, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 531, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 580, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"codestr[i] == LOAD_CONST\", \"Python/peephole.c\", 597, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"h + nops == codelen\", \"Python/peephole.c\", 753, __extension__ __PRETTY_FUNCTION__)", "__assert_fail(\"new_line - last_line < 255\", \"Python/peephole.c\", 716, __extension__ __PRETTY_FUNCTION__)", "addrmap = (int *)PyMem_Malloc(codelen * sizeof(int))", "addrmap[i] = i - nops", "adj = (((opcode) >= 90) ? 3 : 1)", "blocks = markblocks(codestr, codelen)", "code = PyBytes_FromStringAndSize((char *)codestr, h)", "codelen = (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 411, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(code))->ob_size))", "codestr = (unsigned char *)PyMem_Malloc(codelen)", "codestr = (unsigned char *)memcpy(codestr, (((void)sizeof ((((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(code))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(code)\", \"Python/peephole.c\", 420, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(code))->ob_sval)), codelen)", "codestr[i] = 114", "codestr[i] = 115", "codestr[i] = 2", "codestr[i] = 3", "codestr[i] = 83", "codestr[i] = j", "codestr[i] = opcode", "cum_orig_line = 0", "h = ((const_stack_top >= j - 1) ? load_const_stack[const_stack_top - j + 1] : -1)", "h = load_global(codestr, i, name, consts)", "in_consts = 0", "j = ((int)((codestr[i + 1 + 2] << 8) + codestr[i + 1 + 1]))", "j = ((int)((codestr[i + 2] << 8) + codestr[i + 1]))", "j = codestr[tgt]", "last_line = 0", "last_line = new_line", "lineno = (unsigned char *)(((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 404, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyBytesObject *)(lineno_obj))->ob_sval))", "lineno[i] = ((unsigned char)(new_line - last_line))", "memset(&codestr[h], 9, i - h)", "memset(codestr + i + 1, 9, 2)", "memset(codestr + i + 1, 9, 3)", "memset(codestr + i + 1, 9, 4)", "memset(codestr + i + 1, 9, 5)", "memset(codestr + i + 2, 9, 4)", "memset(codestr + i, 9, 6)", "name = _PyUnicode_AsString((((PyTupleObject *)(names))->ob_item[j]))", "new_line = addrmap[cum_orig_line]", "nops++", "opcode = 113", "opcode = codestr[i]", "tabsiz = (((void)sizeof ((((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0)) ? 1 : 0) , __extension__ ({\n    if (((((((PyObject *)(lineno_obj))->ob_type))->tp_flags & ((1L << 27))) != 0))\n        ;\n    else\n        __assert_fail(\"PyBytes_Check(lineno_obj)\", \"Python/peephole.c\", 405, __extension__ __PRETTY_FUNCTION__);\n})) , (((PyVarObject *)(lineno_obj))->ob_size))", "tgttgt = (((int)((codestr[tgt + 2] << 8) + codestr[tgt + 1])) + ((codestr[tgt] == 113 || codestr[tgt] == 119 || codestr[tgt] == 114 || codestr[tgt] == 115 || codestr[tgt] == 111 || codestr[tgt] == 112) ? 0 : tgt + 3))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.66965854205234]
								}, {
									"case":	2,
									"scores":	[-5.66965854205234]
								}, {
									"case":	3,
									"scores":	[-5.66965854205234]
								}, {
									"case":	4,
									"scores":	[-5.66965854205234]
								}, {
									"case":	5,
									"scores":	[-5.66965854205234]
								}, {
									"case":	6,
									"scores":	[-5.66965854205234]
								}, {
									"case":	7,
									"scores":	[-5.66965854205234]
								}, {
									"case":	8,
									"scores":	[-5.66965854205234]
								}, {
									"case":	9,
									"scores":	[-5.66965854205234]
								}, {
									"case":	10,
									"scores":	[-5.66965854205234]
								}, {
									"case":	11,
									"scores":	[-5.66965854205234]
								}, {
									"case":	12,
									"scores":	[-5.66965854205234]
								}, {
									"case":	13,
									"scores":	[-5.66965854205234]
								}, {
									"case":	14,
									"scores":	[-5.66965854205234]
								}, {
									"case":	15,
									"scores":	[-5.66965854205234]
								}, {
									"case":	16,
									"scores":	[-5.66965854205234]
								}, {
									"case":	17,
									"scores":	[-5.66965854205234]
								}, {
									"case":	18,
									"scores":	[-5.66965854205234]
								}, {
									"case":	19,
									"scores":	[-5.66965854205234]
								}, {
									"case":	20,
									"scores":	[-5.66965854205234]
								}, {
									"case":	21,
									"scores":	[-5.66965854205234]
								}, {
									"case":	22,
									"scores":	[-5.66965854205234]
								}, {
									"case":	23,
									"scores":	[-5.66965854205234]
								}, {
									"case":	24,
									"scores":	[-5.66965854205234]
								}, {
									"case":	25,
									"scores":	[-5.66965854205234]
								}, {
									"case":	26,
									"scores":	[-5.66965854205234]
								}, {
									"case":	27,
									"scores":	[-5.66965854205234]
								}, {
									"case":	28,
									"scores":	[-5.66965854205234]
								}, {
									"case":	29,
									"scores":	[-5.66965854205234]
								}, {
									"case":	30,
									"scores":	[-5.66965854205234]
								}, {
									"case":	31,
									"scores":	[-5.66965854205234]
								}, {
									"case":	32,
									"scores":	[-5.66965854205234]
								}, {
									"case":	33,
									"scores":	[-5.66965854205234]
								}, {
									"case":	34,
									"scores":	[-5.66965854205234]
								}, {
									"case":	35,
									"scores":	[-5.66965854205234]
								}, {
									"case":	36,
									"scores":	[-5.66965854205234]
								}, {
									"case":	37,
									"scores":	[-5.66965854205234]
								}, {
									"case":	38,
									"scores":	[-5.66965854205234]
								}, {
									"case":	39,
									"scores":	[-5.66965854205234]
								}, {
									"case":	40,
									"scores":	[-5.66965854205234]
								}, {
									"case":	41,
									"scores":	[-5.66965854205234]
								}, {
									"case":	42,
									"scores":	[-5.66965854205234]
								}, {
									"case":	43,
									"scores":	[-5.66965854205234]
								}, {
									"case":	44,
									"scores":	[-5.66965854205234]
								}, {
									"case":	45,
									"scores":	[-5.66965854205234]
								}, {
									"case":	46,
									"scores":	[-5.66965854205234]
								}, {
									"case":	47,
									"scores":	[-5.66965854205234]
								}, {
									"case":	48,
									"scores":	[-5.66965854205234]
								}, {
									"case":	49,
									"scores":	[-5.66965854205234]
								}, {
									"case":	50,
									"scores":	[-5.66965854205234]
								}, {
									"case":	51,
									"scores":	[-5.66965854205234]
								}, {
									"case":	52,
									"scores":	[-5.66965854205234]
								}, {
									"case":	53,
									"scores":	[-5.66965854205234]
								}, {
									"case":	54,
									"scores":	[-5.66965854205234]
								}, {
									"case":	55,
									"scores":	[-5.66965854205234]
								}, {
									"case":	56,
									"scores":	[-5.66965854205234]
								}, {
									"case":	57,
									"scores":	[-5.66965854205234]
								}, {
									"case":	58,
									"scores":	[-5.66965854205234]
								}, {
									"case":	59,
									"scores":	[-5.66965854205234]
								}, {
									"case":	60,
									"scores":	[-5.66965854205234]
								}, {
									"case":	61,
									"scores":	[-5.66965854205234]
								}, {
									"case":	62,
									"scores":	[-5.66965854205234]
								}, {
									"case":	63,
									"scores":	[-5.66965854205234]
								}, {
									"case":	64,
									"scores":	[-5.66965854205234]
								}, {
									"case":	65,
									"scores":	[-5.66965854205234]
								}, {
									"case":	66,
									"scores":	[-5.66965854205234]
								}, {
									"case":	67,
									"scores":	[-5.66965854205234]
								}, {
									"case":	68,
									"scores":	[-5.66965854205234]
								}, {
									"case":	69,
									"scores":	[-5.66965854205234]
								}, {
									"case":	70,
									"scores":	[-5.66965854205234]
								}, {
									"case":	71,
									"scores":	[-5.66965854205234]
								}, {
									"case":	72,
									"scores":	[-5.66965854205234]
								}, {
									"case":	73,
									"scores":	[-5.66965854205234]
								}, {
									"case":	74,
									"scores":	[-5.66965854205234]
								}, {
									"case":	75,
									"scores":	[-5.66965854205234]
								}, {
									"case":	76,
									"scores":	[-5.66965854205234]
								}, {
									"case":	77,
									"scores":	[-5.66965854205234]
								}, {
									"case":	78,
									"scores":	[-5.66965854205234]
								}, {
									"case":	79,
									"scores":	[-5.66965854205234]
								}, {
									"case":	80,
									"scores":	[-5.66965854205234]
								}, {
									"case":	81,
									"scores":	[-5.66965854205234]
								}, {
									"case":	82,
									"scores":	[-5.66965854205234]
								}, {
									"case":	83,
									"scores":	[-5.66965854205234]
								}, {
									"case":	84,
									"scores":	[-5.66965854205234]
								}, {
									"case":	85,
									"scores":	[-5.66965854205234]
								}, {
									"case":	86,
									"scores":	[-5.66965854205234]
								}, {
									"case":	87,
									"scores":	[-5.66965854205234]
								}, {
									"case":	88,
									"scores":	[-5.66965854205234]
								}, {
									"case":	89,
									"scores":	[-5.66965854205234]
								}, {
									"case":	90,
									"scores":	[-5.66965854205234]
								}, {
									"case":	91,
									"scores":	[-5.66965854205234]
								}, {
									"case":	92,
									"scores":	[-5.66965854205234]
								}, {
									"case":	93,
									"scores":	[-5.66965854205234]
								}, {
									"case":	94,
									"scores":	[-5.66965854205234]
								}, {
									"case":	95,
									"scores":	[-5.66965854205234]
								}, {
									"case":	96,
									"scores":	[-5.66965854205234]
								}, {
									"case":	97,
									"scores":	[-5.66965854205234]
								}, {
									"case":	98,
									"scores":	[-5.66965854205234]
								}, {
									"case":	99,
									"scores":	[-5.66965854205234]
								}, {
									"case":	100,
									"scores":	[-5.66965854205234]
								}, {
									"case":	101,
									"scores":	[-5.66965854205234]
								}, {
									"case":	102,
									"scores":	[-5.66965854205234]
								}, {
									"case":	103,
									"scores":	[-5.66965854205234]
								}, {
									"case":	104,
									"scores":	[-5.66965854205234]
								}, {
									"case":	105,
									"scores":	[-5.66965854205234]
								}, {
									"case":	106,
									"scores":	[-5.66965854205234]
								}, {
									"case":	107,
									"scores":	[-5.66965854205234]
								}, {
									"case":	108,
									"scores":	[-5.66965854205234]
								}, {
									"case":	109,
									"scores":	[-5.66965854205234]
								}, {
									"case":	110,
									"scores":	[-5.66965854205234]
								}, {
									"case":	111,
									"scores":	[-5.66965854205234]
								}, {
									"case":	112,
									"scores":	[-5.66965854205234]
								}, {
									"case":	113,
									"scores":	[-5.66965854205234]
								}, {
									"case":	114,
									"scores":	[-5.66965854205234]
								}, {
									"case":	115,
									"scores":	[-5.66965854205234]
								}, {
									"case":	116,
									"scores":	[-5.66965854205234]
								}, {
									"case":	117,
									"scores":	[-5.66965854205234]
								}, {
									"case":	118,
									"scores":	[-5.66965854205234]
								}, {
									"case":	119,
									"scores":	[-5.66965854205234]
								}, {
									"case":	120,
									"scores":	[-5.66965854205234]
								}, {
									"case":	121,
									"scores":	[-5.66965854205234]
								}, {
									"case":	122,
									"scores":	[-5.66965854205234]
								}, {
									"case":	123,
									"scores":	[-5.66965854205234]
								}, {
									"case":	124,
									"scores":	[-5.66965854205234]
								}, {
									"case":	125,
									"scores":	[-5.66965854205234]
								}, {
									"case":	126,
									"scores":	[-5.66965854205234]
								}, {
									"case":	127,
									"scores":	[-5.66965854205234]
								}, {
									"case":	128,
									"scores":	[-5.66965854205234]
								}, {
									"case":	129,
									"scores":	[-5.66965854205234]
								}, {
									"case":	130,
									"scores":	[-5.66965854205234]
								}, {
									"case":	131,
									"scores":	[-5.66965854205234]
								}, {
									"case":	132,
									"scores":	[-5.66965854205234]
								}, {
									"case":	133,
									"scores":	[-5.66965854205234]
								}, {
									"case":	134,
									"scores":	[-5.66965854205234]
								}, {
									"case":	135,
									"scores":	[-5.66965854205234]
								}, {
									"case":	136,
									"scores":	[-5.66965854205234]
								}, {
									"case":	137,
									"scores":	[-5.66965854205234]
								}, {
									"case":	138,
									"scores":	[-5.66965854205234]
								}, {
									"case":	139,
									"scores":	[-5.66965854205234]
								}, {
									"case":	140,
									"scores":	[-5.66965854205234]
								}, {
									"case":	141,
									"scores":	[-5.66965854205234]
								}, {
									"case":	142,
									"scores":	[-5.66965854205234]
								}, {
									"case":	143,
									"scores":	[-5.66965854205234]
								}, {
									"case":	144,
									"scores":	[-5.66965854205234]
								}, {
									"case":	145,
									"scores":	[-5.66965854205234]
								}, {
									"case":	146,
									"scores":	[-5.66965854205234]
								}, {
									"case":	147,
									"scores":	[-5.66965854205234]
								}, {
									"case":	148,
									"scores":	[-5.66965854205234]
								}, {
									"case":	149,
									"scores":	[-5.66965854205234]
								}, {
									"case":	150,
									"scores":	[-5.66965854205234]
								}, {
									"case":	151,
									"scores":	[-5.66965854205234]
								}, {
									"case":	152,
									"scores":	[-5.66965854205234]
								}, {
									"case":	153,
									"scores":	[-5.66965854205234]
								}, {
									"case":	154,
									"scores":	[-5.66965854205234]
								}, {
									"case":	155,
									"scores":	[-5.66965854205234]
								}, {
									"case":	156,
									"scores":	[-5.66965854205234]
								}, {
									"case":	157,
									"scores":	[-5.66965854205234]
								}, {
									"case":	158,
									"scores":	[-5.66965854205234]
								}, {
									"case":	159,
									"scores":	[-5.66965854205234]
								}, {
									"case":	160,
									"scores":	[-5.66965854205234]
								}, {
									"case":	161,
									"scores":	[-5.66965854205234]
								}, {
									"case":	162,
									"scores":	[-5.66965854205234]
								}, {
									"case":	163,
									"scores":	[-5.66965854205234]
								}, {
									"case":	164,
									"scores":	[-5.66965854205234]
								}, {
									"case":	165,
									"scores":	[-5.66965854205234]
								}, {
									"case":	166,
									"scores":	[-5.66965854205234]
								}, {
									"case":	167,
									"scores":	[-5.66965854205234]
								}, {
									"case":	168,
									"scores":	[-5.66965854205234]
								}, {
									"case":	169,
									"scores":	[-5.66965854205234]
								}, {
									"case":	170,
									"scores":	[-5.66965854205234]
								}, {
									"case":	171,
									"scores":	[-5.66965854205234]
								}, {
									"case":	172,
									"scores":	[-5.66965854205234]
								}, {
									"case":	173,
									"scores":	[-5.66965854205234]
								}, {
									"case":	174,
									"scores":	[-5.66965854205234]
								}, {
									"case":	175,
									"scores":	[-5.66965854205234]
								}, {
									"case":	176,
									"scores":	[-5.66965854205234]
								}, {
									"case":	177,
									"scores":	[-5.66965854205234]
								}, {
									"case":	178,
									"scores":	[-5.66965854205234]
								}, {
									"case":	179,
									"scores":	[-5.66965854205234]
								}, {
									"case":	180,
									"scores":	[-5.66965854205234]
								}, {
									"case":	181,
									"scores":	[-5.66965854205234]
								}, {
									"case":	182,
									"scores":	[-5.66965854205234]
								}, {
									"case":	183,
									"scores":	[-5.66965854205234]
								}, {
									"case":	184,
									"scores":	[-5.66965854205234]
								}, {
									"case":	185,
									"scores":	[-5.66965854205234]
								}, {
									"case":	186,
									"scores":	[-5.66965854205234]
								}, {
									"case":	187,
									"scores":	[-5.66965854205234]
								}, {
									"case":	188,
									"scores":	[-5.66965854205234]
								}, {
									"case":	189,
									"scores":	[-5.66965854205234]
								}, {
									"case":	190,
									"scores":	[-5.66965854205234]
								}, {
									"case":	191,
									"scores":	[-5.66965854205234]
								}, {
									"case":	192,
									"scores":	[-5.66965854205234]
								}, {
									"case":	193,
									"scores":	[-5.66965854205234]
								}, {
									"case":	194,
									"scores":	[-5.66965854205234]
								}, {
									"case":	195,
									"scores":	[-5.66965854205234]
								}, {
									"case":	196,
									"scores":	[-5.66965854205234]
								}, {
									"case":	197,
									"scores":	[-5.66965854205234]
								}, {
									"case":	198,
									"scores":	[-5.66965854205234]
								}, {
									"case":	199,
									"scores":	[-5.66965854205234]
								}, {
									"case":	200,
									"scores":	[-5.66965854205234]
								}, {
									"case":	201,
									"scores":	[-5.66965854205234]
								}, {
									"case":	202,
									"scores":	[-5.66965854205234]
								}, {
									"case":	203,
									"scores":	[-5.66965854205234]
								}, {
									"case":	204,
									"scores":	[-5.66965854205234]
								}, {
									"case":	205,
									"scores":	[-5.66965854205234]
								}, {
									"case":	206,
									"scores":	[-5.66965854205234]
								}, {
									"case":	207,
									"scores":	[-5.66965854205234]
								}, {
									"case":	208,
									"scores":	[-5.66965854205234]
								}, {
									"case":	209,
									"scores":	[-5.66965854205234]
								}, {
									"case":	210,
									"scores":	[-5.66965854205234]
								}, {
									"case":	211,
									"scores":	[-5.66965854205234]
								}, {
									"case":	212,
									"scores":	[-5.66965854205234]
								}, {
									"case":	213,
									"scores":	[-5.66965854205234]
								}, {
									"case":	214,
									"scores":	[-5.66965854205234]
								}, {
									"case":	215,
									"scores":	[-5.66965854205234]
								}, {
									"case":	216,
									"scores":	[-5.66965854205234]
								}, {
									"case":	217,
									"scores":	[-5.66965854205234]
								}, {
									"case":	218,
									"scores":	[-5.66965854205234]
								}, {
									"case":	219,
									"scores":	[-5.66965854205234]
								}, {
									"case":	220,
									"scores":	[-5.66965854205234]
								}, {
									"case":	221,
									"scores":	[-5.66965854205234]
								}, {
									"case":	222,
									"scores":	[-5.66965854205234]
								}, {
									"case":	223,
									"scores":	[-5.66965854205234]
								}, {
									"case":	224,
									"scores":	[-5.66965854205234]
								}, {
									"case":	225,
									"scores":	[-5.66965854205234]
								}, {
									"case":	226,
									"scores":	[-5.66965854205234]
								}, {
									"case":	227,
									"scores":	[-5.66965854205234]
								}, {
									"case":	228,
									"scores":	[-5.66965854205234]
								}, {
									"case":	229,
									"scores":	[-5.66965854205234]
								}, {
									"case":	230,
									"scores":	[-5.66965854205234]
								}, {
									"case":	231,
									"scores":	[-5.66965854205234]
								}, {
									"case":	232,
									"scores":	[-5.66965854205234]
								}, {
									"case":	233,
									"scores":	[-5.66965854205234]
								}, {
									"case":	234,
									"scores":	[-5.66965854205234]
								}, {
									"case":	235,
									"scores":	[-5.66965854205234]
								}, {
									"case":	236,
									"scores":	[-5.66965854205234]
								}, {
									"case":	237,
									"scores":	[-5.66965854205234]
								}, {
									"case":	238,
									"scores":	[-5.66965854205234]
								}, {
									"case":	239,
									"scores":	[-5.66965854205234]
								}, {
									"case":	240,
									"scores":	[-5.66965854205234]
								}, {
									"case":	241,
									"scores":	[-5.66965854205234]
								}, {
									"case":	242,
									"scores":	[-5.66965854205234]
								}, {
									"case":	243,
									"scores":	[-5.66965854205234]
								}, {
									"case":	244,
									"scores":	[-5.66965854205234]
								}, {
									"case":	245,
									"scores":	[-5.66965854205234]
								}, {
									"case":	246,
									"scores":	[-5.66965854205234]
								}, {
									"case":	247,
									"scores":	[-5.66965854205234]
								}, {
									"case":	248,
									"scores":	[-5.66965854205234]
								}, {
									"case":	249,
									"scores":	[-5.66965854205234]
								}, {
									"case":	250,
									"scores":	[-5.66965854205234]
								}, {
									"case":	251,
									"scores":	[-5.66965854205234]
								}, {
									"case":	252,
									"scores":	[-5.66965854205234]
								}, {
									"case":	253,
									"scores":	[-5.66965854205234]
								}, {
									"case":	254,
									"scores":	[-5.66965854205234]
								}, {
									"case":	255,
									"scores":	[-5.66965854205234]
								}, {
									"case":	256,
									"scores":	[-5.66965854205234]
								}, {
									"case":	257,
									"scores":	[-5.66965854205234]
								}, {
									"case":	258,
									"scores":	[-5.66965854205234]
								}, {
									"case":	259,
									"scores":	[-5.66965854205234]
								}, {
									"case":	260,
									"scores":	[-5.66965854205234]
								}, {
									"case":	261,
									"scores":	[-5.66965854205234]
								}, {
									"case":	262,
									"scores":	[-5.66965854205234]
								}, {
									"case":	263,
									"scores":	[-5.66965854205234]
								}, {
									"case":	264,
									"scores":	[-5.66965854205234]
								}, {
									"case":	265,
									"scores":	[-5.66965854205234]
								}, {
									"case":	266,
									"scores":	[-5.66965854205234]
								}, {
									"case":	267,
									"scores":	[-5.66965854205234]
								}, {
									"case":	268,
									"scores":	[-5.66965854205234]
								}, {
									"case":	269,
									"scores":	[-5.66965854205234]
								}, {
									"case":	270,
									"scores":	[-5.66965854205234]
								}, {
									"case":	271,
									"scores":	[-5.66965854205234]
								}, {
									"case":	272,
									"scores":	[-5.66965854205234]
								}, {
									"case":	273,
									"scores":	[-5.66965854205234]
								}, {
									"case":	274,
									"scores":	[-5.66965854205234]
								}, {
									"case":	275,
									"scores":	[-5.66965854205234]
								}, {
									"case":	276,
									"scores":	[-5.66965854205234]
								}, {
									"case":	277,
									"scores":	[-5.66965854205234]
								}, {
									"case":	278,
									"scores":	[-5.66965854205234]
								}, {
									"case":	279,
									"scores":	[-5.66965854205234]
								}, {
									"case":	280,
									"scores":	[-5.66965854205234]
								}, {
									"case":	281,
									"scores":	[-5.66965854205234]
								}, {
									"case":	282,
									"scores":	[-5.66965854205234]
								}, {
									"case":	283,
									"scores":	[-5.66965854205234]
								}, {
									"case":	284,
									"scores":	[-5.66965854205234]
								}, {
									"case":	285,
									"scores":	[-5.66965854205234]
								}, {
									"case":	286,
									"scores":	[-5.66965854205234]
								}, {
									"case":	287,
									"scores":	[-5.66965854205234]
								}, {
									"case":	288,
									"scores":	[-5.66965854205234]
								}, {
									"case":	289,
									"scores":	[-5.66965854205234]
								}, {
									"case":	290,
									"scores":	[-5.66965854205234]
								}, {
									"case":	291,
									"scores":	[-5.66965854205234]
								}, {
									"case":	292,
									"scores":	[-5.66965854205234]
								}, {
									"case":	293,
									"scores":	[-5.66965854205234]
								}, {
									"case":	294,
									"scores":	[-5.66965854205234]
								}, {
									"case":	295,
									"scores":	[-5.66965854205234]
								}, {
									"case":	296,
									"scores":	[-5.66965854205234]
								}, {
									"case":	297,
									"scores":	[-5.66965854205234]
								}, {
									"case":	298,
									"scores":	[-5.66965854205234]
								}, {
									"case":	299,
									"scores":	[-5.66965854205234]
								}, {
									"case":	300,
									"scores":	[-5.66965854205234]
								}, {
									"case":	301,
									"scores":	[-5.66965854205234]
								}, {
									"case":	302,
									"scores":	[-5.66965854205234]
								}, {
									"case":	303,
									"scores":	[-5.66965854205234]
								}, {
									"case":	304,
									"scores":	[-5.66965854205234]
								}, {
									"case":	305,
									"scores":	[-5.66965854205234]
								}, {
									"case":	306,
									"scores":	[-5.66965854205234]
								}, {
									"case":	307,
									"scores":	[-5.66965854205234]
								}, {
									"case":	308,
									"scores":	[-5.66965854205234]
								}, {
									"case":	309,
									"scores":	[-5.66965854205234]
								}, {
									"case":	310,
									"scores":	[-5.66965854205234]
								}, {
									"case":	311,
									"scores":	[-5.66965854205234]
								}, {
									"case":	312,
									"scores":	[-5.66965854205234]
								}, {
									"case":	313,
									"scores":	[-5.66965854205234]
								}, {
									"case":	314,
									"scores":	[-5.66965854205234]
								}, {
									"case":	315,
									"scores":	[-5.66965854205234]
								}, {
									"case":	316,
									"scores":	[-5.66965854205234]
								}, {
									"case":	317,
									"scores":	[-5.66965854205234]
								}, {
									"case":	318,
									"scores":	[-5.66965854205234]
								}, {
									"case":	319,
									"scores":	[-5.66965854205234]
								}, {
									"case":	320,
									"scores":	[-5.66965854205234]
								}, {
									"case":	321,
									"scores":	[-5.66965854205234]
								}, {
									"case":	322,
									"scores":	[-5.66965854205234]
								}, {
									"case":	323,
									"scores":	[-5.66965854205234]
								}, {
									"case":	324,
									"scores":	[-5.66965854205234]
								}, {
									"case":	325,
									"scores":	[-5.66965854205234]
								}, {
									"case":	326,
									"scores":	[-5.66965854205234]
								}, {
									"case":	327,
									"scores":	[-5.66965854205234]
								}, {
									"case":	328,
									"scores":	[-5.66965854205234]
								}, {
									"case":	329,
									"scores":	[-5.66965854205234]
								}, {
									"case":	330,
									"scores":	[-5.66965854205234]
								}, {
									"case":	331,
									"scores":	[-5.66965854205234]
								}, {
									"case":	332,
									"scores":	[-5.66965854205234]
								}, {
									"case":	333,
									"scores":	[-5.66965854205234]
								}, {
									"case":	334,
									"scores":	[-5.66965854205234]
								}, {
									"case":	335,
									"scores":	[-5.66965854205234]
								}, {
									"case":	336,
									"scores":	[-5.66965854205234]
								}, {
									"case":	337,
									"scores":	[-5.66965854205234]
								}, {
									"case":	338,
									"scores":	[-5.66965854205234]
								}, {
									"case":	339,
									"scores":	[-5.66965854205234]
								}, {
									"case":	340,
									"scores":	[-5.66965854205234]
								}, {
									"case":	341,
									"scores":	[-5.66965854205234]
								}, {
									"case":	342,
									"scores":	[-5.66965854205234]
								}, {
									"case":	343,
									"scores":	[-5.66965854205234]
								}, {
									"case":	344,
									"scores":	[-5.66965854205234]
								}, {
									"case":	345,
									"scores":	[-5.66965854205234]
								}, {
									"case":	346,
									"scores":	[-5.66965854205234]
								}, {
									"case":	347,
									"scores":	[-5.66965854205234]
								}, {
									"case":	348,
									"scores":	[-5.66965854205234]
								}, {
									"case":	349,
									"scores":	[-5.66965854205234]
								}, {
									"case":	350,
									"scores":	[-5.66965854205234]
								}, {
									"case":	351,
									"scores":	[-5.66965854205234]
								}, {
									"case":	352,
									"scores":	[-5.66965854205234]
								}, {
									"case":	353,
									"scores":	[-5.66965854205234]
								}, {
									"case":	354,
									"scores":	[-5.66965854205234]
								}, {
									"case":	355,
									"scores":	[-5.66965854205234]
								}, {
									"case":	356,
									"scores":	[-5.66965854205234]
								}, {
									"case":	357,
									"scores":	[-5.66965854205234]
								}, {
									"case":	358,
									"scores":	[-5.66965854205234]
								}, {
									"case":	359,
									"scores":	[-5.66965854205234]
								}, {
									"case":	360,
									"scores":	[-5.66965854205234]
								}, {
									"case":	361,
									"scores":	[-5.66965854205234]
								}, {
									"case":	362,
									"scores":	[-5.66965854205234]
								}, {
									"case":	363,
									"scores":	[-5.66965854205234]
								}, {
									"case":	364,
									"scores":	[-5.66965854205234]
								}, {
									"case":	365,
									"scores":	[-5.66965854205234]
								}, {
									"case":	366,
									"scores":	[-5.66965854205234]
								}, {
									"case":	367,
									"scores":	[-5.66965854205234]
								}, {
									"case":	368,
									"scores":	[-5.66965854205234]
								}, {
									"case":	369,
									"scores":	[-5.66965854205234]
								}, {
									"case":	370,
									"scores":	[-5.66965854205234]
								}, {
									"case":	371,
									"scores":	[-5.66965854205234]
								}, {
									"case":	372,
									"scores":	[-5.66965854205234]
								}, {
									"case":	373,
									"scores":	[-5.66965854205234]
								}, {
									"case":	374,
									"scores":	[-5.66965854205234]
								}, {
									"case":	375,
									"scores":	[-5.66965854205234]
								}, {
									"case":	376,
									"scores":	[-5.66965854205234]
								}, {
									"case":	377,
									"scores":	[-5.66965854205234]
								}, {
									"case":	378,
									"scores":	[-5.66965854205234]
								}, {
									"case":	379,
									"scores":	[-5.66965854205234]
								}, {
									"case":	380,
									"scores":	[-5.66965854205234]
								}, {
									"case":	381,
									"scores":	[-5.66965854205234]
								}, {
									"case":	382,
									"scores":	[-5.66965854205234]
								}, {
									"case":	383,
									"scores":	[-5.66965854205234]
								}, {
									"case":	384,
									"scores":	[-5.66965854205234]
								}, {
									"case":	385,
									"scores":	[-5.66965854205234]
								}, {
									"case":	386,
									"scores":	[-5.66965854205234]
								}, {
									"case":	387,
									"scores":	[-5.66965854205234]
								}, {
									"case":	388,
									"scores":	[-5.66965854205234]
								}, {
									"case":	389,
									"scores":	[-5.66965854205234]
								}, {
									"case":	390,
									"scores":	[-5.66965854205234]
								}, {
									"case":	391,
									"scores":	[-5.66965854205234]
								}, {
									"case":	392,
									"scores":	[-5.66965854205234]
								}, {
									"case":	393,
									"scores":	[-5.66965854205234]
								}, {
									"case":	394,
									"scores":	[-5.66965854205234]
								}, {
									"case":	395,
									"scores":	[-5.66965854205234]
								}, {
									"case":	396,
									"scores":	[-5.66965854205234]
								}, {
									"case":	397,
									"scores":	[-5.66965854205234]
								}, {
									"case":	398,
									"scores":	[-5.66965854205234]
								}, {
									"case":	399,
									"scores":	[-5.66965854205234]
								}, {
									"case":	400,
									"scores":	[-5.66965854205234]
								}, {
									"case":	401,
									"scores":	[-5.66965854205234]
								}, {
									"case":	402,
									"scores":	[-5.66965854205234]
								}, {
									"case":	403,
									"scores":	[-5.66965854205234]
								}, {
									"case":	404,
									"scores":	[-5.66965854205234]
								}, {
									"case":	405,
									"scores":	[-5.66965854205234]
								}, {
									"case":	406,
									"scores":	[-5.66965854205234]
								}, {
									"case":	407,
									"scores":	[-5.66965854205234]
								}, {
									"case":	408,
									"scores":	[-5.66965854205234]
								}, {
									"case":	409,
									"scores":	[-5.66965854205234]
								}, {
									"case":	410,
									"scores":	[-5.66965854205234]
								}, {
									"case":	411,
									"scores":	[-5.66965854205234]
								}, {
									"case":	412,
									"scores":	[-5.66965854205234]
								}, {
									"case":	413,
									"scores":	[-5.66965854205234]
								}, {
									"case":	414,
									"scores":	[-5.66965854205234]
								}, {
									"case":	415,
									"scores":	[-5.66965854205234]
								}, {
									"case":	416,
									"scores":	[-5.66965854205234]
								}, {
									"case":	417,
									"scores":	[-5.66965854205234]
								}, {
									"case":	418,
									"scores":	[-5.66965854205234]
								}, {
									"case":	419,
									"scores":	[-5.66965854205234]
								}, {
									"case":	420,
									"scores":	[-5.66965854205234]
								}, {
									"case":	421,
									"scores":	[-5.66965854205234]
								}, {
									"case":	422,
									"scores":	[-5.66965854205234]
								}, {
									"case":	423,
									"scores":	[-5.66965854205234]
								}, {
									"case":	424,
									"scores":	[-5.66965854205234]
								}, {
									"case":	425,
									"scores":	[-5.66965854205234]
								}, {
									"case":	426,
									"scores":	[-5.66965854205234]
								}, {
									"case":	427,
									"scores":	[-5.66965854205234]
								}, {
									"case":	428,
									"scores":	[-5.66965854205234]
								}, {
									"case":	429,
									"scores":	[-5.66965854205234]
								}, {
									"case":	430,
									"scores":	[-5.66965854205234]
								}, {
									"case":	431,
									"scores":	[-5.66965854205234]
								}, {
									"case":	432,
									"scores":	[-5.66965854205234]
								}, {
									"case":	433,
									"scores":	[-5.66965854205234]
								}, {
									"case":	434,
									"scores":	[-5.66965854205234]
								}, {
									"case":	435,
									"scores":	[-5.66965854205234]
								}, {
									"case":	436,
									"scores":	[-5.66965854205234]
								}, {
									"case":	437,
									"scores":	[-5.66965854205234]
								}, {
									"case":	438,
									"scores":	[-5.66965854205234]
								}, {
									"case":	439,
									"scores":	[-5.66965854205234]
								}, {
									"case":	440,
									"scores":	[-5.66965854205234]
								}, {
									"case":	441,
									"scores":	[-5.66965854205234]
								}, {
									"case":	442,
									"scores":	[-5.66965854205234]
								}, {
									"case":	443,
									"scores":	[-5.66965854205234]
								}, {
									"case":	444,
									"scores":	[-5.66965854205234]
								}, {
									"case":	445,
									"scores":	[-5.66965854205234]
								}, {
									"case":	446,
									"scores":	[-5.66965854205234]
								}, {
									"case":	447,
									"scores":	[-5.66965854205234]
								}, {
									"case":	448,
									"scores":	[-5.66965854205234]
								}, {
									"case":	449,
									"scores":	[-5.66965854205234]
								}, {
									"case":	450,
									"scores":	[-5.66965854205234]
								}, {
									"case":	451,
									"scores":	[-5.66965854205234]
								}, {
									"case":	452,
									"scores":	[-5.66965854205234]
								}, {
									"case":	453,
									"scores":	[-5.66965854205234]
								}, {
									"case":	454,
									"scores":	[-5.66965854205234]
								}, {
									"case":	455,
									"scores":	[-5.66965854205234]
								}, {
									"case":	456,
									"scores":	[-5.66965854205234]
								}, {
									"case":	457,
									"scores":	[-5.66965854205234]
								}, {
									"case":	458,
									"scores":	[-5.66965854205234]
								}, {
									"case":	459,
									"scores":	[-5.66965854205234]
								}, {
									"case":	460,
									"scores":	[-5.66965854205234]
								}, {
									"case":	461,
									"scores":	[-5.66965854205234]
								}, {
									"case":	462,
									"scores":	[-5.66965854205234]
								}, {
									"case":	463,
									"scores":	[-5.66965854205234]
								}, {
									"case":	464,
									"scores":	[-5.66965854205234]
								}, {
									"case":	465,
									"scores":	[-5.66965854205234]
								}, {
									"case":	466,
									"scores":	[-5.66965854205234]
								}, {
									"case":	467,
									"scores":	[-5.66965854205234]
								}, {
									"case":	468,
									"scores":	[-5.66965854205234]
								}, {
									"case":	469,
									"scores":	[-5.66965854205234]
								}, {
									"case":	470,
									"scores":	[-5.66965854205234]
								}, {
									"case":	471,
									"scores":	[-5.66965854205234]
								}, {
									"case":	472,
									"scores":	[-5.66965854205234]
								}, {
									"case":	473,
									"scores":	[-5.66965854205234]
								}, {
									"case":	474,
									"scores":	[-5.66965854205234]
								}, {
									"case":	475,
									"scores":	[-5.66965854205234]
								}, {
									"case":	476,
									"scores":	[-5.66965854205234]
								}, {
									"case":	477,
									"scores":	[-5.66965854205234]
								}, {
									"case":	478,
									"scores":	[-5.66965854205234]
								}, {
									"case":	479,
									"scores":	[-5.66965854205234]
								}, {
									"case":	480,
									"scores":	[-5.66965854205234]
								}, {
									"case":	481,
									"scores":	[-5.66965854205234]
								}, {
									"case":	482,
									"scores":	[-5.66965854205234]
								}, {
									"case":	483,
									"scores":	[-5.66965854205234]
								}, {
									"case":	484,
									"scores":	[-5.66965854205234]
								}, {
									"case":	485,
									"scores":	[-5.66965854205234]
								}, {
									"case":	486,
									"scores":	[-5.66965854205234]
								}, {
									"case":	487,
									"scores":	[-5.66965854205234]
								}, {
									"case":	488,
									"scores":	[-5.66965854205234]
								}, {
									"case":	489,
									"scores":	[-5.66965854205234]
								}, {
									"case":	490,
									"scores":	[-5.66965854205234]
								}, {
									"case":	491,
									"scores":	[-5.66965854205234]
								}, {
									"case":	492,
									"scores":	[-5.66965854205234]
								}, {
									"case":	493,
									"scores":	[-5.66965854205234]
								}, {
									"case":	494,
									"scores":	[-5.66965854205234]
								}, {
									"case":	495,
									"scores":	[-5.66965854205234]
								}, {
									"case":	496,
									"scores":	[-5.66965854205234]
								}, {
									"case":	497,
									"scores":	[-5.66965854205234]
								}, {
									"case":	498,
									"scores":	[-5.66965854205234]
								}, {
									"case":	499,
									"scores":	[-5.66965854205234]
								}, {
									"case":	500,
									"scores":	[-5.66965854205234]
								}, {
									"case":	501,
									"scores":	[-5.66965854205234]
								}, {
									"case":	502,
									"scores":	[-5.66965854205234]
								}, {
									"case":	503,
									"scores":	[-5.66965854205234]
								}, {
									"case":	504,
									"scores":	[-5.66965854205234]
								}, {
									"case":	505,
									"scores":	[-5.66965854205234]
								}, {
									"case":	506,
									"scores":	[-5.66965854205234]
								}, {
									"case":	507,
									"scores":	[-5.66965854205234]
								}, {
									"case":	508,
									"scores":	[-5.66965854205234]
								}, {
									"case":	509,
									"scores":	[-5.66965854205234]
								}, {
									"case":	510,
									"scores":	[-5.66965854205234]
								}, {
									"case":	511,
									"scores":	[-5.66965854205234]
								}, {
									"case":	512,
									"scores":	[-5.66965854205234]
								}, {
									"case":	513,
									"scores":	[-5.66965854205234]
								}, {
									"case":	514,
									"scores":	[-5.66965854205234]
								}, {
									"case":	515,
									"scores":	[-5.66965854205234]
								}, {
									"case":	516,
									"scores":	[-5.66965854205234]
								}, {
									"case":	517,
									"scores":	[-5.66965854205234]
								}, {
									"case":	518,
									"scores":	[-5.66965854205234]
								}, {
									"case":	519,
									"scores":	[-5.66965854205234]
								}, {
									"case":	520,
									"scores":	[-5.66965854205234]
								}, {
									"case":	521,
									"scores":	[-5.66965854205234]
								}, {
									"case":	522,
									"scores":	[-5.66965854205234]
								}, {
									"case":	523,
									"scores":	[-5.66965854205234]
								}, {
									"case":	524,
									"scores":	[-5.66965854205234]
								}, {
									"case":	525,
									"scores":	[-5.66965854205234]
								}, {
									"case":	526,
									"scores":	[-5.66965854205234]
								}, {
									"case":	527,
									"scores":	[-5.66965854205234]
								}, {
									"case":	528,
									"scores":	[-5.66965854205234]
								}, {
									"case":	529,
									"scores":	[-5.66965854205234]
								}, {
									"case":	530,
									"scores":	[-5.66965854205234]
								}, {
									"case":	531,
									"scores":	[-5.66965854205234]
								}, {
									"case":	532,
									"scores":	[-5.66965854205234]
								}, {
									"case":	533,
									"scores":	[-5.66965854205234]
								}, {
									"case":	534,
									"scores":	[-5.66965854205234]
								}, {
									"case":	535,
									"scores":	[-5.66965854205234]
								}, {
									"case":	536,
									"scores":	[-5.66965854205234]
								}, {
									"case":	537,
									"scores":	[-5.66965854205234]
								}, {
									"case":	538,
									"scores":	[-5.66965854205234]
								}, {
									"case":	539,
									"scores":	[-5.66965854205234]
								}, {
									"case":	540,
									"scores":	[-5.66965854205234]
								}, {
									"case":	541,
									"scores":	[-5.66965854205234]
								}, {
									"case":	542,
									"scores":	[-5.66965854205234]
								}, {
									"case":	543,
									"scores":	[-5.66965854205234]
								}, {
									"case":	544,
									"scores":	[-5.66965854205234]
								}, {
									"case":	545,
									"scores":	[-5.66965854205234]
								}, {
									"case":	546,
									"scores":	[-5.66965854205234]
								}, {
									"case":	547,
									"scores":	[-5.66965854205234]
								}, {
									"case":	548,
									"scores":	[-5.66965854205234]
								}, {
									"case":	549,
									"scores":	[-5.66965854205234]
								}, {
									"case":	550,
									"scores":	[-5.66965854205234]
								}, {
									"case":	551,
									"scores":	[-5.66965854205234]
								}, {
									"case":	552,
									"scores":	[-5.66965854205234]
								}, {
									"case":	553,
									"scores":	[-5.66965854205234]
								}, {
									"case":	554,
									"scores":	[-5.66965854205234]
								}, {
									"case":	555,
									"scores":	[-5.66965854205234]
								}, {
									"case":	556,
									"scores":	[-5.66965854205234]
								}, {
									"case":	557,
									"scores":	[-5.66965854205234]
								}, {
									"case":	558,
									"scores":	[-5.66965854205234]
								}, {
									"case":	559,
									"scores":	[-5.66965854205234]
								}, {
									"case":	560,
									"scores":	[-5.66965854205234]
								}, {
									"case":	561,
									"scores":	[-5.66965854205234]
								}, {
									"case":	562,
									"scores":	[-5.66965854205234]
								}, {
									"case":	563,
									"scores":	[-5.66965854205234]
								}, {
									"case":	564,
									"scores":	[-5.66965854205234]
								}, {
									"case":	565,
									"scores":	[-5.66965854205234]
								}, {
									"case":	566,
									"scores":	[-5.66965854205234]
								}, {
									"case":	567,
									"scores":	[-5.66965854205234]
								}, {
									"case":	568,
									"scores":	[-5.66965854205234]
								}, {
									"case":	569,
									"scores":	[-5.66965854205234]
								}, {
									"case":	570,
									"scores":	[-5.66965854205234]
								}, {
									"case":	571,
									"scores":	[-5.66965854205234]
								}, {
									"case":	572,
									"scores":	[-5.66965854205234]
								}, {
									"case":	573,
									"scores":	[-5.66965854205234]
								}, {
									"case":	574,
									"scores":	[-5.66965854205234]
								}, {
									"case":	575,
									"scores":	[-5.66965854205234]
								}, {
									"case":	576,
									"scores":	[-5.66965854205234]
								}, {
									"case":	577,
									"scores":	[-5.66965854205234]
								}, {
									"case":	578,
									"scores":	[-5.66965854205234]
								}, {
									"case":	579,
									"scores":	[-5.66965854205234]
								}, {
									"case":	580,
									"scores":	[-5.66965854205234]
								}, {
									"case":	581,
									"scores":	[-5.66965854205234]
								}, {
									"case":	582,
									"scores":	[-5.66965854205234]
								}, {
									"case":	583,
									"scores":	[-5.66965854205234]
								}, {
									"case":	584,
									"scores":	[-5.66965854205234]
								}, {
									"case":	585,
									"scores":	[-5.66965854205234]
								}, {
									"case":	586,
									"scores":	[-5.66965854205234]
								}, {
									"case":	587,
									"scores":	[-5.66965854205234]
								}, {
									"case":	588,
									"scores":	[-5.66965854205234]
								}, {
									"case":	589,
									"scores":	[-5.66965854205234]
								}, {
									"case":	590,
									"scores":	[-5.66965854205234]
								}, {
									"case":	591,
									"scores":	[-5.66965854205234]
								}, {
									"case":	592,
									"scores":	[-5.66965854205234]
								}, {
									"case":	593,
									"scores":	[-5.66965854205234]
								}, {
									"case":	594,
									"scores":	[-5.66965854205234]
								}, {
									"case":	595,
									"scores":	[-5.66965854205234]
								}, {
									"case":	596,
									"scores":	[-5.66965854205234]
								}, {
									"case":	597,
									"scores":	[-5.66965854205234]
								}, {
									"case":	598,
									"scores":	[-5.66965854205234]
								}, {
									"case":	599,
									"scores":	[-5.66965854205234]
								}, {
									"case":	600,
									"scores":	[-5.66965854205234]
								}, {
									"case":	601,
									"scores":	[-5.66965854205234]
								}, {
									"case":	602,
									"scores":	[-5.66965854205234]
								}, {
									"case":	603,
									"scores":	[-5.66965854205234]
								}, {
									"case":	604,
									"scores":	[-5.66965854205234]
								}, {
									"case":	605,
									"scores":	[-5.66965854205234]
								}, {
									"case":	606,
									"scores":	[-5.66965854205234]
								}, {
									"case":	607,
									"scores":	[-5.66965854205234]
								}, {
									"case":	608,
									"scores":	[-5.66965854205234]
								}, {
									"case":	609,
									"scores":	[-5.66965854205234]
								}, {
									"case":	610,
									"scores":	[-5.66965854205234]
								}, {
									"case":	611,
									"scores":	[-5.66965854205234]
								}, {
									"case":	612,
									"scores":	[-5.66965854205234]
								}, {
									"case":	613,
									"scores":	[-5.66965854205234]
								}, {
									"case":	614,
									"scores":	[-5.66965854205234]
								}, {
									"case":	615,
									"scores":	[-5.66965854205234]
								}, {
									"case":	616,
									"scores":	[-5.66965854205234]
								}, {
									"case":	617,
									"scores":	[-5.66965854205234]
								}, {
									"case":	618,
									"scores":	[-5.66965854205234]
								}, {
									"case":	619,
									"scores":	[-5.66965854205234]
								}, {
									"case":	620,
									"scores":	[-5.66965854205234]
								}, {
									"case":	621,
									"scores":	[-5.66965854205234]
								}, {
									"case":	622,
									"scores":	[-5.66965854205234]
								}, {
									"case":	623,
									"scores":	[-5.66965854205234]
								}, {
									"case":	624,
									"scores":	[-5.66965854205234]
								}, {
									"case":	625,
									"scores":	[-5.66965854205234]
								}, {
									"case":	626,
									"scores":	[-5.66965854205234]
								}, {
									"case":	627,
									"scores":	[-5.66965854205234]
								}, {
									"case":	628,
									"scores":	[-5.66965854205234]
								}, {
									"case":	629,
									"scores":	[-5.66965854205234]
								}, {
									"case":	630,
									"scores":	[-5.66965854205234]
								}, {
									"case":	631,
									"scores":	[-5.66965854205234]
								}, {
									"case":	632,
									"scores":	[-5.66965854205234]
								}, {
									"case":	633,
									"scores":	[-5.66965854205234]
								}, {
									"case":	634,
									"scores":	[-5.66965854205234]
								}, {
									"case":	635,
									"scores":	[-5.66965854205234]
								}, {
									"case":	636,
									"scores":	[-5.66965854205234]
								}, {
									"case":	637,
									"scores":	[-5.66965854205234]
								}, {
									"case":	638,
									"scores":	[-5.66965854205234]
								}, {
									"case":	639,
									"scores":	[-5.66965854205234]
								}, {
									"case":	640,
									"scores":	[-5.66965854205234]
								}, {
									"case":	641,
									"scores":	[-5.66965854205234]
								}, {
									"case":	642,
									"scores":	[-5.66965854205234]
								}, {
									"case":	643,
									"scores":	[-5.66965854205234]
								}, {
									"case":	644,
									"scores":	[-5.66965854205234]
								}, {
									"case":	645,
									"scores":	[-5.66965854205234]
								}, {
									"case":	646,
									"scores":	[-5.66965854205234]
								}, {
									"case":	647,
									"scores":	[-5.66965854205234]
								}, {
									"case":	648,
									"scores":	[-5.66965854205234]
								}, {
									"case":	649,
									"scores":	[-5.66965854205234]
								}, {
									"case":	650,
									"scores":	[-5.66965854205234]
								}, {
									"case":	651,
									"scores":	[-5.66965854205234]
								}, {
									"case":	652,
									"scores":	[-5.66965854205234]
								}, {
									"case":	653,
									"scores":	[-5.66965854205234]
								}, {
									"case":	654,
									"scores":	[-5.66965854205234]
								}, {
									"case":	655,
									"scores":	[-5.66965854205234]
								}, {
									"case":	656,
									"scores":	[-5.66965854205234]
								}, {
									"case":	657,
									"scores":	[-5.66965854205234]
								}, {
									"case":	658,
									"scores":	[-5.66965854205234]
								}, {
									"case":	659,
									"scores":	[-5.66965854205234]
								}, {
									"case":	660,
									"scores":	[-5.66965854205234]
								}, {
									"case":	661,
									"scores":	[-5.66965854205234]
								}, {
									"case":	662,
									"scores":	[-5.66965854205234]
								}, {
									"case":	663,
									"scores":	[-5.66965854205234]
								}, {
									"case":	664,
									"scores":	[-5.66965854205234]
								}, {
									"case":	665,
									"scores":	[-5.66965854205234]
								}, {
									"case":	666,
									"scores":	[-5.66965854205234]
								}, {
									"case":	667,
									"scores":	[-5.66965854205234]
								}, {
									"case":	668,
									"scores":	[-5.66965854205234]
								}, {
									"case":	669,
									"scores":	[-5.66965854205234]
								}, {
									"case":	670,
									"scores":	[-5.66965854205234]
								}, {
									"case":	671,
									"scores":	[-5.66965854205234]
								}, {
									"case":	672,
									"scores":	[-5.66965854205234]
								}, {
									"case":	673,
									"scores":	[-5.66965854205234]
								}, {
									"case":	674,
									"scores":	[-5.66965854205234]
								}, {
									"case":	675,
									"scores":	[-5.66965854205234]
								}, {
									"case":	676,
									"scores":	[-5.66965854205234]
								}, {
									"case":	677,
									"scores":	[-5.66965854205234]
								}, {
									"case":	678,
									"scores":	[-5.66965854205234]
								}, {
									"case":	679,
									"scores":	[-5.66965854205234]
								}, {
									"case":	680,
									"scores":	[-5.66965854205234]
								}, {
									"case":	681,
									"scores":	[-5.66965854205234]
								}, {
									"case":	682,
									"scores":	[-5.66965854205234]
								}, {
									"case":	683,
									"scores":	[-5.66965854205234]
								}, {
									"case":	684,
									"scores":	[-5.66965854205234]
								}, {
									"case":	685,
									"scores":	[-5.66965854205234]
								}, {
									"case":	686,
									"scores":	[-5.66965854205234]
								}, {
									"case":	687,
									"scores":	[-5.66965854205234]
								}, {
									"case":	688,
									"scores":	[-5.66965854205234]
								}, {
									"case":	689,
									"scores":	[-5.66965854205234]
								}, {
									"case":	690,
									"scores":	[-5.66965854205234]
								}, {
									"case":	691,
									"scores":	[-5.66965854205234]
								}, {
									"case":	692,
									"scores":	[-5.66965854205234]
								}, {
									"case":	693,
									"scores":	[-5.66965854205234]
								}, {
									"case":	694,
									"scores":	[-5.66965854205234]
								}, {
									"case":	695,
									"scores":	[-5.66965854205234]
								}, {
									"case":	696,
									"scores":	[-5.66965854205234]
								}, {
									"case":	697,
									"scores":	[-5.66965854205234]
								}, {
									"case":	698,
									"scores":	[-5.66965854205234]
								}, {
									"case":	699,
									"scores":	[-5.66965854205234]
								}, {
									"case":	700,
									"scores":	[-5.66965854205234]
								}, {
									"case":	701,
									"scores":	[-5.66965854205234]
								}, {
									"case":	702,
									"scores":	[-5.66965854205234]
								}, {
									"case":	703,
									"scores":	[-5.66965854205234]
								}, {
									"case":	704,
									"scores":	[-5.66965854205234]
								}, {
									"case":	705,
									"scores":	[-5.66965854205234]
								}, {
									"case":	706,
									"scores":	[-5.66965854205234]
								}, {
									"case":	707,
									"scores":	[-5.66965854205234]
								}, {
									"case":	708,
									"scores":	[-5.66965854205234]
								}, {
									"case":	709,
									"scores":	[-5.66965854205234]
								}, {
									"case":	710,
									"scores":	[-5.66965854205234]
								}, {
									"case":	711,
									"scores":	[-5.66965854205234]
								}, {
									"case":	712,
									"scores":	[-5.66965854205234]
								}, {
									"case":	713,
									"scores":	[-5.66965854205234]
								}, {
									"case":	714,
									"scores":	[-5.66965854205234]
								}, {
									"case":	715,
									"scores":	[-5.66965854205234]
								}, {
									"case":	716,
									"scores":	[-5.66965854205234]
								}, {
									"case":	717,
									"scores":	[-5.66965854205234]
								}, {
									"case":	718,
									"scores":	[-5.66965854205234]
								}, {
									"case":	719,
									"scores":	[-5.66965854205234]
								}, {
									"case":	720,
									"scores":	[-5.66965854205234]
								}, {
									"case":	721,
									"scores":	[-5.66965854205234]
								}, {
									"case":	722,
									"scores":	[-5.66965854205234]
								}, {
									"case":	723,
									"scores":	[-5.66965854205234]
								}, {
									"case":	724,
									"scores":	[-5.66965854205234]
								}, {
									"case":	725,
									"scores":	[-5.66965854205234]
								}, {
									"case":	726,
									"scores":	[-5.66965854205234]
								}, {
									"case":	727,
									"scores":	[-5.66965854205234]
								}, {
									"case":	728,
									"scores":	[-5.66965854205234]
								}, {
									"case":	729,
									"scores":	[-5.66965854205234]
								}, {
									"case":	730,
									"scores":	[-5.66965854205234]
								}, {
									"case":	731,
									"scores":	[-5.66965854205234]
								}, {
									"case":	732,
									"scores":	[-5.66965854205234]
								}, {
									"case":	733,
									"scores":	[-5.66965854205234]
								}, {
									"case":	734,
									"scores":	[-5.66965854205234]
								}, {
									"case":	735,
									"scores":	[-5.66965854205234]
								}, {
									"case":	736,
									"scores":	[-5.66965854205234]
								}, {
									"case":	737,
									"scores":	[-5.66965854205234]
								}, {
									"case":	738,
									"scores":	[-5.66965854205234]
								}, {
									"case":	739,
									"scores":	[-5.66965854205234]
								}, {
									"case":	740,
									"scores":	[-5.66965854205234]
								}, {
									"case":	741,
									"scores":	[-5.66965854205234]
								}, {
									"case":	742,
									"scores":	[-5.66965854205234]
								}, {
									"case":	743,
									"scores":	[-5.66965854205234]
								}, {
									"case":	744,
									"scores":	[-5.66965854205234]
								}, {
									"case":	745,
									"scores":	[-5.66965854205234]
								}, {
									"case":	746,
									"scores":	[-5.66965854205234]
								}, {
									"case":	747,
									"scores":	[-5.66965854205234]
								}, {
									"case":	748,
									"scores":	[-5.66965854205234]
								}, {
									"case":	749,
									"scores":	[-5.66965854205234]
								}, {
									"case":	750,
									"scores":	[-5.66965854205234]
								}, {
									"case":	751,
									"scores":	[-5.66965854205234]
								}, {
									"case":	752,
									"scores":	[-5.66965854205234]
								}, {
									"case":	753,
									"scores":	[-5.66965854205234]
								}, {
									"case":	754,
									"scores":	[-5.66965854205234]
								}, {
									"case":	755,
									"scores":	[-5.66965854205234]
								}, {
									"case":	756,
									"scores":	[-5.66965854205234]
								}, {
									"case":	757,
									"scores":	[-5.66965854205234]
								}, {
									"case":	758,
									"scores":	[-5.66965854205234]
								}, {
									"case":	759,
									"scores":	[-5.66965854205234]
								}, {
									"case":	760,
									"scores":	[-5.66965854205234]
								}, {
									"case":	761,
									"scores":	[-5.66965854205234]
								}, {
									"case":	762,
									"scores":	[-5.66965854205234]
								}, {
									"case":	763,
									"scores":	[-5.66965854205234]
								}, {
									"case":	764,
									"scores":	[-5.66965854205234]
								}, {
									"case":	765,
									"scores":	[-5.66965854205234]
								}, {
									"case":	766,
									"scores":	[-5.66965854205234]
								}, {
									"case":	767,
									"scores":	[-5.66965854205234]
								}, {
									"case":	768,
									"scores":	[-5.66965854205234]
								}, {
									"case":	769,
									"scores":	[-5.66965854205234]
								}, {
									"case":	770,
									"scores":	[-5.66965854205234]
								}, {
									"case":	771,
									"scores":	[-5.66965854205234]
								}, {
									"case":	772,
									"scores":	[-5.66965854205234]
								}, {
									"case":	773,
									"scores":	[-5.66965854205234]
								}, {
									"case":	774,
									"scores":	[-5.66965854205234]
								}, {
									"case":	775,
									"scores":	[-5.66965854205234]
								}, {
									"case":	776,
									"scores":	[-5.66965854205234]
								}, {
									"case":	777,
									"scores":	[-5.66965854205234]
								}, {
									"case":	778,
									"scores":	[-5.66965854205234]
								}, {
									"case":	779,
									"scores":	[-5.66965854205234]
								}, {
									"case":	780,
									"scores":	[-5.66965854205234]
								}, {
									"case":	781,
									"scores":	[-5.66965854205234]
								}, {
									"case":	782,
									"scores":	[-5.66965854205234]
								}, {
									"case":	783,
									"scores":	[-5.66965854205234]
								}, {
									"case":	784,
									"scores":	[-5.66965854205234]
								}, {
									"case":	785,
									"scores":	[-5.66965854205234]
								}, {
									"case":	786,
									"scores":	[-5.66965854205234]
								}, {
									"case":	787,
									"scores":	[-5.66965854205234]
								}, {
									"case":	788,
									"scores":	[-5.66965854205234]
								}, {
									"case":	789,
									"scores":	[-5.66965854205234]
								}, {
									"case":	790,
									"scores":	[-5.66965854205234]
								}, {
									"case":	791,
									"scores":	[-5.66965854205234]
								}, {
									"case":	792,
									"scores":	[-5.66965854205234]
								}, {
									"case":	793,
									"scores":	[-5.66965854205234]
								}, {
									"case":	794,
									"scores":	[-5.66965854205234]
								}, {
									"case":	795,
									"scores":	[-5.66965854205234]
								}, {
									"case":	796,
									"scores":	[-5.66965854205234]
								}, {
									"case":	797,
									"scores":	[-5.66965854205234]
								}, {
									"case":	798,
									"scores":	[-5.66965854205234]
								}, {
									"case":	799,
									"scores":	[-5.66965854205234]
								}, {
									"case":	800,
									"scores":	[-5.66965854205234]
								}, {
									"case":	801,
									"scores":	[-5.66965854205234]
								}, {
									"case":	802,
									"scores":	[-5.66965854205234]
								}, {
									"case":	803,
									"scores":	[-5.66965854205234]
								}, {
									"case":	804,
									"scores":	[-5.66965854205234]
								}, {
									"case":	805,
									"scores":	[-5.66965854205234]
								}, {
									"case":	806,
									"scores":	[-5.66965854205234]
								}, {
									"case":	807,
									"scores":	[-5.66965854205234]
								}, {
									"case":	808,
									"scores":	[-5.66965854205234]
								}, {
									"case":	809,
									"scores":	[-5.66965854205234]
								}, {
									"case":	810,
									"scores":	[-5.66965854205234]
								}, {
									"case":	811,
									"scores":	[-5.66965854205234]
								}, {
									"case":	812,
									"scores":	[-5.66965854205234]
								}, {
									"case":	813,
									"scores":	[-5.66965854205234]
								}, {
									"case":	814,
									"scores":	[-5.66965854205234]
								}, {
									"case":	815,
									"scores":	[-5.66965854205234]
								}, {
									"case":	816,
									"scores":	[-5.66965854205234]
								}, {
									"case":	817,
									"scores":	[-5.66965854205234]
								}, {
									"case":	818,
									"scores":	[-5.66965854205234]
								}, {
									"case":	819,
									"scores":	[-5.66965854205234]
								}, {
									"case":	820,
									"scores":	[-5.66965854205234]
								}, {
									"case":	821,
									"scores":	[-5.66965854205234]
								}, {
									"case":	822,
									"scores":	[-5.66965854205234]
								}, {
									"case":	823,
									"scores":	[-5.66965854205234]
								}, {
									"case":	824,
									"scores":	[-5.66965854205234]
								}, {
									"case":	825,
									"scores":	[-5.66965854205234]
								}, {
									"case":	826,
									"scores":	[-5.66965854205234]
								}, {
									"case":	827,
									"scores":	[-5.66965854205234]
								}, {
									"case":	828,
									"scores":	[-5.66965854205234]
								}, {
									"case":	829,
									"scores":	[-5.66965854205234]
								}, {
									"case":	830,
									"scores":	[-5.66965854205234]
								}, {
									"case":	831,
									"scores":	[-5.66965854205234]
								}, {
									"case":	832,
									"scores":	[-5.66965854205234]
								}, {
									"case":	833,
									"scores":	[-5.66965854205234]
								}, {
									"case":	834,
									"scores":	[-5.66965854205234]
								}, {
									"case":	835,
									"scores":	[-5.66965854205234]
								}, {
									"case":	836,
									"scores":	[-5.66965854205234]
								}, {
									"case":	837,
									"scores":	[-5.66965854205234]
								}, {
									"case":	838,
									"scores":	[-5.66965854205234]
								}, {
									"case":	839,
									"scores":	[-5.66965854205234]
								}, {
									"case":	840,
									"scores":	[-5.66965854205234]
								}, {
									"case":	841,
									"scores":	[-5.66965854205234]
								}, {
									"case":	842,
									"scores":	[-5.66965854205234]
								}, {
									"case":	843,
									"scores":	[-5.66965854205234]
								}, {
									"case":	844,
									"scores":	[-5.66965854205234]
								}, {
									"case":	845,
									"scores":	[-5.66965854205234]
								}, {
									"case":	846,
									"scores":	[-5.66965854205234]
								}, {
									"case":	847,
									"scores":	[-5.66965854205234]
								}, {
									"case":	848,
									"scores":	[-5.66965854205234]
								}, {
									"case":	849,
									"scores":	[-5.66965854205234]
								}, {
									"case":	850,
									"scores":	[-5.66965854205234]
								}, {
									"case":	851,
									"scores":	[-5.66965854205234]
								}, {
									"case":	852,
									"scores":	[-5.66965854205234]
								}, {
									"case":	853,
									"scores":	[-5.66965854205234]
								}, {
									"case":	854,
									"scores":	[-5.66965854205234]
								}, {
									"case":	855,
									"scores":	[-5.66965854205234]
								}, {
									"case":	856,
									"scores":	[-5.66965854205234]
								}, {
									"case":	857,
									"scores":	[-5.66965854205234]
								}, {
									"case":	858,
									"scores":	[-5.66965854205234]
								}, {
									"case":	859,
									"scores":	[-5.66965854205234]
								}, {
									"case":	860,
									"scores":	[-5.66965854205234]
								}, {
									"case":	861,
									"scores":	[-5.66965854205234]
								}, {
									"case":	862,
									"scores":	[-5.66965854205234]
								}, {
									"case":	863,
									"scores":	[-5.66965854205234]
								}, {
									"case":	864,
									"scores":	[-5.66965854205234]
								}, {
									"case":	865,
									"scores":	[-5.66965854205234]
								}, {
									"case":	866,
									"scores":	[-5.66965854205234]
								}, {
									"case":	867,
									"scores":	[-5.66965854205234]
								}, {
									"case":	868,
									"scores":	[-5.66965854205234]
								}, {
									"case":	869,
									"scores":	[-5.66965854205234]
								}, {
									"case":	870,
									"scores":	[-5.66965854205234]
								}, {
									"case":	871,
									"scores":	[-5.66965854205234]
								}, {
									"case":	872,
									"scores":	[-5.66965854205234]
								}, {
									"case":	873,
									"scores":	[-5.66965854205234]
								}, {
									"case":	874,
									"scores":	[-5.66965854205234]
								}, {
									"case":	875,
									"scores":	[-5.66965854205234]
								}, {
									"case":	876,
									"scores":	[-5.66965854205234]
								}, {
									"case":	877,
									"scores":	[-5.66965854205234]
								}, {
									"case":	878,
									"scores":	[-5.66965854205234]
								}, {
									"case":	879,
									"scores":	[-5.66965854205234]
								}, {
									"case":	880,
									"scores":	[-5.66965854205234]
								}, {
									"case":	881,
									"scores":	[-5.66965854205234]
								}, {
									"case":	882,
									"scores":	[-5.66965854205234]
								}, {
									"case":	883,
									"scores":	[-5.66965854205234]
								}, {
									"case":	884,
									"scores":	[-5.66965854205234]
								}, {
									"case":	885,
									"scores":	[-5.66965854205234]
								}, {
									"case":	886,
									"scores":	[-5.66965854205234]
								}, {
									"case":	887,
									"scores":	[-5.66965854205234]
								}, {
									"case":	888,
									"scores":	[-5.66965854205234]
								}, {
									"case":	889,
									"scores":	[-5.66965854205234]
								}, {
									"case":	890,
									"scores":	[-5.66965854205234]
								}, {
									"case":	891,
									"scores":	[-5.66965854205234]
								}, {
									"case":	892,
									"scores":	[-5.66965854205234]
								}, {
									"case":	893,
									"scores":	[-5.66965854205234]
								}, {
									"case":	894,
									"scores":	[-5.66965854205234]
								}, {
									"case":	895,
									"scores":	[-5.66965854205234]
								}, {
									"case":	896,
									"scores":	[-5.66965854205234]
								}, {
									"case":	897,
									"scores":	[-5.66965854205234]
								}, {
									"case":	898,
									"scores":	[-5.66965854205234]
								}, {
									"case":	899,
									"scores":	[-5.66965854205234]
								}, {
									"case":	900,
									"scores":	[-5.66965854205234]
								}, {
									"case":	901,
									"scores":	[-5.66965854205234]
								}, {
									"case":	902,
									"scores":	[-5.66965854205234]
								}, {
									"case":	903,
									"scores":	[-5.66965854205234]
								}, {
									"case":	904,
									"scores":	[-5.66965854205234]
								}, {
									"case":	905,
									"scores":	[-5.66965854205234]
								}, {
									"case":	906,
									"scores":	[-5.66965854205234]
								}, {
									"case":	907,
									"scores":	[-5.66965854205234]
								}, {
									"case":	908,
									"scores":	[-5.66965854205234]
								}, {
									"case":	909,
									"scores":	[-5.66965854205234]
								}, {
									"case":	910,
									"scores":	[-5.66965854205234]
								}, {
									"case":	911,
									"scores":	[-5.66965854205234]
								}, {
									"case":	912,
									"scores":	[-5.66965854205234]
								}, {
									"case":	913,
									"scores":	[-5.66965854205234]
								}, {
									"case":	914,
									"scores":	[-5.66965854205234]
								}, {
									"case":	915,
									"scores":	[-5.66965854205234]
								}, {
									"case":	916,
									"scores":	[-5.66965854205234]
								}, {
									"case":	917,
									"scores":	[-5.66965854205234]
								}, {
									"case":	918,
									"scores":	[-5.66965854205234]
								}, {
									"case":	919,
									"scores":	[-5.66965854205234]
								}, {
									"case":	920,
									"scores":	[-5.66965854205234]
								}, {
									"case":	921,
									"scores":	[-5.66965854205234]
								}, {
									"case":	922,
									"scores":	[-5.66965854205234]
								}, {
									"case":	923,
									"scores":	[-5.66965854205234]
								}, {
									"case":	924,
									"scores":	[-5.66965854205234]
								}, {
									"case":	925,
									"scores":	[-5.66965854205234]
								}, {
									"case":	926,
									"scores":	[-5.66965854205234]
								}, {
									"case":	927,
									"scores":	[-5.66965854205234]
								}, {
									"case":	928,
									"scores":	[-5.66965854205234]
								}, {
									"case":	929,
									"scores":	[-5.66965854205234]
								}, {
									"case":	930,
									"scores":	[-5.66965854205234]
								}, {
									"case":	931,
									"scores":	[-5.66965854205234]
								}, {
									"case":	932,
									"scores":	[-5.66965854205234]
								}, {
									"case":	933,
									"scores":	[-5.66965854205234]
								}, {
									"case":	934,
									"scores":	[-5.66965854205234]
								}, {
									"case":	935,
									"scores":	[-5.66965854205234]
								}, {
									"case":	936,
									"scores":	[-5.66965854205234]
								}, {
									"case":	937,
									"scores":	[-5.66965854205234]
								}, {
									"case":	938,
									"scores":	[-5.66965854205234]
								}, {
									"case":	939,
									"scores":	[-5.66965854205234]
								}, {
									"case":	940,
									"scores":	[-5.66965854205234]
								}, {
									"case":	941,
									"scores":	[-5.66965854205234]
								}, {
									"case":	942,
									"scores":	[-5.66965854205234]
								}, {
									"case":	943,
									"scores":	[-5.66965854205234]
								}, {
									"case":	944,
									"scores":	[-5.66965854205234]
								}, {
									"case":	945,
									"scores":	[-5.66965854205234]
								}, {
									"case":	946,
									"scores":	[-5.66965854205234]
								}, {
									"case":	947,
									"scores":	[-5.66965854205234]
								}, {
									"case":	948,
									"scores":	[-5.66965854205234]
								}, {
									"case":	949,
									"scores":	[-5.66965854205234]
								}, {
									"case":	950,
									"scores":	[-5.66965854205234]
								}, {
									"case":	951,
									"scores":	[-5.66965854205234]
								}, {
									"case":	952,
									"scores":	[-5.66965854205234]
								}, {
									"case":	953,
									"scores":	[-5.66965854205234]
								}, {
									"case":	954,
									"scores":	[-5.66965854205234]
								}, {
									"case":	955,
									"scores":	[-5.66965854205234]
								}, {
									"case":	956,
									"scores":	[-5.66965854205234]
								}, {
									"case":	957,
									"scores":	[-5.66965854205234]
								}, {
									"case":	958,
									"scores":	[-5.66965854205234]
								}, {
									"case":	959,
									"scores":	[-5.66965854205234]
								}, {
									"case":	960,
									"scores":	[-5.66965854205234]
								}, {
									"case":	961,
									"scores":	[-5.66965854205234]
								}, {
									"case":	962,
									"scores":	[-5.66965854205234]
								}, {
									"case":	963,
									"scores":	[-5.66965854205234]
								}, {
									"case":	964,
									"scores":	[-5.66965854205234]
								}, {
									"case":	965,
									"scores":	[-5.66965854205234]
								}, {
									"case":	966,
									"scores":	[-5.66965854205234]
								}, {
									"case":	967,
									"scores":	[-5.66965854205234]
								}, {
									"case":	968,
									"scores":	[-5.66965854205234]
								}, {
									"case":	969,
									"scores":	[-5.66965854205234]
								}, {
									"case":	970,
									"scores":	[-5.66965854205234]
								}, {
									"case":	971,
									"scores":	[-5.66965854205234]
								}, {
									"case":	972,
									"scores":	[-5.66965854205234]
								}, {
									"case":	973,
									"scores":	[-5.66965854205234]
								}, {
									"case":	974,
									"scores":	[-5.66965854205234]
								}, {
									"case":	975,
									"scores":	[-5.66965854205234]
								}, {
									"case":	976,
									"scores":	[-5.66965854205234]
								}, {
									"case":	977,
									"scores":	[-5.66965854205234]
								}, {
									"case":	978,
									"scores":	[-5.66965854205234]
								}, {
									"case":	979,
									"scores":	[-5.66965854205234]
								}, {
									"case":	980,
									"scores":	[-5.66965854205234]
								}, {
									"case":	981,
									"scores":	[-5.66965854205234]
								}, {
									"case":	982,
									"scores":	[-5.66965854205234]
								}, {
									"case":	983,
									"scores":	[-5.66965854205234]
								}, {
									"case":	984,
									"scores":	[-5.66965854205234]
								}, {
									"case":	985,
									"scores":	[-5.66965854205234]
								}, {
									"case":	986,
									"scores":	[-5.66965854205234]
								}, {
									"case":	987,
									"scores":	[-5.66965854205234]
								}, {
									"case":	988,
									"scores":	[-5.66965854205234]
								}, {
									"case":	989,
									"scores":	[-5.66965854205234]
								}, {
									"case":	990,
									"scores":	[-5.66965854205234]
								}, {
									"case":	991,
									"scores":	[-5.66965854205234]
								}, {
									"case":	992,
									"scores":	[-5.66965854205234]
								}, {
									"case":	993,
									"scores":	[-5.66965854205234]
								}, {
									"case":	994,
									"scores":	[-5.66965854205234]
								}, {
									"case":	995,
									"scores":	[-5.66965854205234]
								}, {
									"case":	996,
									"scores":	[-5.66965854205234]
								}, {
									"case":	997,
									"scores":	[-5.66965854205234]
								}, {
									"case":	998,
									"scores":	[-5.66965854205234]
								}, {
									"case":	999,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1000,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1001,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1002,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1003,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1004,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1005,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1006,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1007,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1008,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1009,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1010,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1011,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1012,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1013,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1014,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1015,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1016,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1017,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1018,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1019,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1020,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1021,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1022,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1023,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1024,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1025,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1026,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1027,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1028,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1029,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1030,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1031,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1032,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1033,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1034,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1035,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1036,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1037,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1038,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1039,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1040,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1041,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1042,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1043,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1044,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1045,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1046,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1047,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1048,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1049,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1050,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1051,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1052,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1053,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1054,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1055,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1056,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1057,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1058,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1059,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1060,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1061,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1062,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1063,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1064,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1065,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1066,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1067,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1068,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1069,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1070,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1071,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1072,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1073,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1074,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1075,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1076,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1077,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1078,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1079,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1080,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1081,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1082,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1083,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1084,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1085,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1086,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1087,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1088,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1089,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1090,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1091,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1092,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1093,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1094,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1095,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1096,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1097,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1098,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1099,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1100,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1101,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1102,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1103,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1104,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1105,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1106,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1107,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1108,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1109,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1110,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1111,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1112,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1113,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1114,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1115,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1116,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1117,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1118,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1119,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1120,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1121,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1122,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1123,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1124,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1125,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1126,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1127,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1128,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1129,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1130,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1131,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1132,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1133,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1134,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1135,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1136,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1137,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1138,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1139,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1140,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1141,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1142,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1143,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1144,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1145,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1146,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1147,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1148,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1149,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1150,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1151,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1152,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1153,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1154,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1155,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1156,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1157,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1158,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1159,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1160,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1161,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1162,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1163,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1164,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1165,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1166,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1167,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1168,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1169,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1170,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1171,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1172,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1173,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1174,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1175,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1176,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1177,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1178,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1179,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1180,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1181,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1182,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1183,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1184,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1185,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1186,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1187,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1188,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1189,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1190,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1191,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1192,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1193,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1194,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1195,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1196,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1197,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1198,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1199,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1200,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1201,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1202,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1203,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1204,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1205,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1206,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1207,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1208,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1209,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1210,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1211,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1212,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1213,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1214,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1215,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1216,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1217,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1218,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1219,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1220,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1221,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1222,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1223,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1224,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1225,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1226,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1227,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1228,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1229,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1230,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1231,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1232,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1233,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1234,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1235,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1236,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1237,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1238,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1239,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1240,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1241,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1242,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1243,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1244,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1245,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1246,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1247,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1248,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1249,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1250,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1251,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1252,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1253,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1254,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1255,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1256,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1257,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1258,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1259,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1260,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1261,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1262,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1263,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1264,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1265,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1266,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1267,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1268,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1269,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1270,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1271,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1272,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1273,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1274,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1275,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1276,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1277,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1278,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1279,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1280,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1281,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1282,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1283,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1284,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1285,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1286,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1287,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1288,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1289,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1290,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1291,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1292,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1293,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1294,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1295,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1296,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1297,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1298,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1299,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1300,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1301,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1302,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1303,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1304,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1305,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1306,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1307,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1308,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1309,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1310,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1311,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1312,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1313,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1314,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1315,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1316,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1317,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1318,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1319,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1320,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1321,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1322,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1323,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1324,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1325,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1326,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1327,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1328,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1329,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1330,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1331,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1332,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1333,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1334,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1335,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1336,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1337,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1338,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1339,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1340,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1341,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1342,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1343,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1344,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1345,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1346,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1347,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1348,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1349,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1350,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1351,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1352,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1353,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1354,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1355,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1356,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1357,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1358,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1359,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1360,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1361,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1362,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1363,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1364,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1365,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1366,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1367,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1368,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1369,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1370,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1371,
									"scores":	[-5.66965854205234]
								}, {
									"case":	1372,
									"scores":	[-5.66965854205234]
								}]
						}, {
							"switch":	39,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	684,
							"begin_column":	17,
							"end_line":	685,
							"end_column":	26,
							"patch_codes":	["if (__is_neg(\"\", \"L684\", 28, &(i), sizeof (i), &(codestr), sizeof (codestr), &(tgttgt), sizeof (tgttgt), &(opcode), sizeof (opcode), &(codelen), sizeof (codelen), &(tgt), sizeof (tgt), &(blocks), sizeof (blocks), &(nops), sizeof (nops), &(addrmap), sizeof (addrmap), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(tabsiz), sizeof (tabsiz), &(lineno), sizeof (lineno), &(new_line), sizeof (new_line), &(h), sizeof (h), &(j), sizeof (j), &(adj), sizeof (adj), &(code), sizeof (code), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(consts), sizeof (consts), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(_Py_RefTotal), sizeof (_Py_RefTotal), &(name), sizeof (name), &(names), sizeof (names), &(lineno_obj), sizeof (lineno_obj)))\n    goto exitUnchanged;\n", "if ((codestr[i + 3] != 132) && !__is_neg(\"\", \"L684\", 28, &(i), sizeof (i), &(codestr), sizeof (codestr), &(tgttgt), sizeof (tgttgt), &(opcode), sizeof (opcode), &(codelen), sizeof (codelen), &(tgt), sizeof (tgt), &(blocks), sizeof (blocks), &(nops), sizeof (nops), &(addrmap), sizeof (addrmap), &(cum_orig_line), sizeof (cum_orig_line), &(last_line), sizeof (last_line), &(tabsiz), sizeof (tabsiz), &(lineno), sizeof (lineno), &(new_line), sizeof (new_line), &(h), sizeof (h), &(j), sizeof (j), &(adj), sizeof (adj), &(code), sizeof (code), &(const_stack), sizeof (const_stack), &(load_const_stack), sizeof (load_const_stack), &(consts), sizeof (consts), &(const_stack_top), sizeof (const_stack_top), &(const_stack_size), sizeof (const_stack_size), &(in_consts), sizeof (in_consts), &(_Py_RefTotal), sizeof (_Py_RefTotal), &(name), sizeof (name), &(names), sizeof (names), &(lineno_obj), sizeof (lineno_obj)))\n    goto exitUnchanged;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.5445011054281457, -3.880606105428146, -3.6955191054281458, -4.2410631054281458, -3.524129265428146, -3.6955191054281458, -4.1174851054281456, -3.6955191054281458, -4.1174851054281456, -3.6955191054281458, -3.6955191054281458, -3.6955191054281458, -4.1174851054281456, -3.6955191054281458, -3.6955191054281458, -3.6955191054281458, -3.6955191054281458, -4.8730205054281459, -4.1174851054281456, -4.1174851054281456, -5.4185645054281464, -3.6955191054281458, -3.6955191054281458, -3.6955191054281458, -4.2270683254281458, -4.1174851054281456, -4.8730205054281459, -4.8730205054281459]
								}, {
									"case":	2,
									"scores":	[-1.8698944254281469, -2.2059994254281463, -2.020912425428147, -2.5664564254281466, -1.8495225854281467, -2.020912425428147, -2.4428784254281468, -2.020912425428147, -2.4428784254281468, -2.020912425428147, -2.020912425428147, -2.020912425428147, -2.4428784254281468, -2.020912425428147, -2.020912425428147, -2.020912425428147, -2.020912425428147, -3.1984138254281467, -2.4428784254281468, -2.4428784254281468, -3.7439578254281467, -2.020912425428147, -2.020912425428147, -2.020912425428147, -2.5524616454281466, -2.4428784254281468, -3.1984138254281467, -3.1984138254281467]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	1,
			"case":	1,
			"size":	8
		}, {
			"switch":	1,
			"case":	2,
			"size":	8
		}, {
			"switch":	2,
			"case":	83,
			"size":	9
		}, {
			"switch":	2,
			"case":	84,
			"size":	9
		}, {
			"switch":	2,
			"case":	85,
			"size":	9
		}, {
			"switch":	2,
			"case":	86,
			"size":	9
		}, {
			"switch":	2,
			"case":	87,
			"size":	9
		}, {
			"switch":	2,
			"case":	88,
			"size":	9
		}, {
			"switch":	2,
			"case":	89,
			"size":	9
		}, {
			"switch":	2,
			"case":	90,
			"size":	9
		}, {
			"switch":	2,
			"case":	91,
			"size":	9
		}, {
			"switch":	2,
			"case":	92,
			"size":	9
		}, {
			"switch":	2,
			"case":	93,
			"size":	9
		}, {
			"switch":	3,
			"case":	1,
			"size":	9
		}, {
			"switch":	4,
			"case":	83,
			"size":	9
		}, {
			"switch":	4,
			"case":	84,
			"size":	9
		}, {
			"switch":	4,
			"case":	85,
			"size":	9
		}, {
			"switch":	4,
			"case":	86,
			"size":	9
		}, {
			"switch":	4,
			"case":	87,
			"size":	9
		}, {
			"switch":	4,
			"case":	88,
			"size":	9
		}, {
			"switch":	4,
			"case":	89,
			"size":	9
		}, {
			"switch":	4,
			"case":	90,
			"size":	9
		}, {
			"switch":	4,
			"case":	91,
			"size":	9
		}, {
			"switch":	4,
			"case":	92,
			"size":	9
		}, {
			"switch":	4,
			"case":	93,
			"size":	9
		}, {
			"switch":	5,
			"case":	1,
			"size":	9
		}, {
			"switch":	6,
			"case":	83,
			"size":	9
		}, {
			"switch":	6,
			"case":	84,
			"size":	9
		}, {
			"switch":	6,
			"case":	85,
			"size":	9
		}, {
			"switch":	6,
			"case":	86,
			"size":	9
		}, {
			"switch":	6,
			"case":	87,
			"size":	9
		}, {
			"switch":	6,
			"case":	88,
			"size":	9
		}, {
			"switch":	6,
			"case":	89,
			"size":	9
		}, {
			"switch":	6,
			"case":	90,
			"size":	9
		}, {
			"switch":	6,
			"case":	91,
			"size":	9
		}, {
			"switch":	6,
			"case":	92,
			"size":	9
		}, {
			"switch":	6,
			"case":	93,
			"size":	9
		}, {
			"switch":	7,
			"case":	1,
			"size":	9
		}, {
			"switch":	7,
			"case":	2,
			"size":	9
		}, {
			"switch":	7,
			"case":	3,
			"size":	9
		}, {
			"switch":	8,
			"case":	1,
			"size":	9
		}, {
			"switch":	9,
			"case":	134,
			"size":	11
		}, {
			"switch":	9,
			"case":	135,
			"size":	11
		}, {
			"switch":	9,
			"case":	136,
			"size":	11
		}, {
			"switch":	9,
			"case":	137,
			"size":	11
		}, {
			"switch":	9,
			"case":	138,
			"size":	11
		}, {
			"switch":	9,
			"case":	139,
			"size":	11
		}, {
			"switch":	9,
			"case":	140,
			"size":	11
		}, {
			"switch":	9,
			"case":	141,
			"size":	11
		}, {
			"switch":	9,
			"case":	142,
			"size":	11
		}, {
			"switch":	9,
			"case":	143,
			"size":	11
		}, {
			"switch":	9,
			"case":	144,
			"size":	11
		}, {
			"switch":	9,
			"case":	145,
			"size":	11
		}, {
			"switch":	9,
			"case":	146,
			"size":	11
		}, {
			"switch":	9,
			"case":	147,
			"size":	11
		}, {
			"switch":	9,
			"case":	148,
			"size":	11
		}, {
			"switch":	9,
			"case":	149,
			"size":	11
		}, {
			"switch":	9,
			"case":	150,
			"size":	11
		}, {
			"switch":	9,
			"case":	151,
			"size":	11
		}, {
			"switch":	9,
			"case":	152,
			"size":	11
		}, {
			"switch":	9,
			"case":	153,
			"size":	11
		}, {
			"switch":	9,
			"case":	154,
			"size":	11
		}, {
			"switch":	9,
			"case":	155,
			"size":	11
		}, {
			"switch":	9,
			"case":	156,
			"size":	11
		}, {
			"switch":	9,
			"case":	157,
			"size":	11
		}, {
			"switch":	9,
			"case":	158,
			"size":	11
		}, {
			"switch":	10,
			"case":	134,
			"size":	11
		}, {
			"switch":	10,
			"case":	135,
			"size":	11
		}, {
			"switch":	10,
			"case":	136,
			"size":	11
		}, {
			"switch":	10,
			"case":	137,
			"size":	11
		}, {
			"switch":	10,
			"case":	138,
			"size":	11
		}, {
			"switch":	10,
			"case":	139,
			"size":	11
		}, {
			"switch":	10,
			"case":	140,
			"size":	11
		}, {
			"switch":	10,
			"case":	141,
			"size":	11
		}, {
			"switch":	10,
			"case":	142,
			"size":	11
		}, {
			"switch":	10,
			"case":	143,
			"size":	11
		}, {
			"switch":	10,
			"case":	144,
			"size":	11
		}, {
			"switch":	10,
			"case":	145,
			"size":	11
		}, {
			"switch":	10,
			"case":	146,
			"size":	11
		}, {
			"switch":	10,
			"case":	147,
			"size":	11
		}, {
			"switch":	10,
			"case":	148,
			"size":	11
		}, {
			"switch":	10,
			"case":	149,
			"size":	11
		}, {
			"switch":	10,
			"case":	150,
			"size":	11
		}, {
			"switch":	10,
			"case":	151,
			"size":	11
		}, {
			"switch":	10,
			"case":	152,
			"size":	11
		}, {
			"switch":	10,
			"case":	153,
			"size":	11
		}, {
			"switch":	10,
			"case":	154,
			"size":	11
		}, {
			"switch":	10,
			"case":	155,
			"size":	11
		}, {
			"switch":	10,
			"case":	156,
			"size":	11
		}, {
			"switch":	10,
			"case":	157,
			"size":	11
		}, {
			"switch":	10,
			"case":	158,
			"size":	11
		}, {
			"switch":	11,
			"case":	134,
			"size":	11
		}, {
			"switch":	11,
			"case":	135,
			"size":	11
		}, {
			"switch":	11,
			"case":	136,
			"size":	11
		}, {
			"switch":	11,
			"case":	137,
			"size":	11
		}, {
			"switch":	11,
			"case":	138,
			"size":	11
		}, {
			"switch":	11,
			"case":	139,
			"size":	11
		}, {
			"switch":	11,
			"case":	140,
			"size":	11
		}, {
			"switch":	11,
			"case":	141,
			"size":	11
		}, {
			"switch":	11,
			"case":	142,
			"size":	11
		}, {
			"switch":	11,
			"case":	143,
			"size":	11
		}, {
			"switch":	11,
			"case":	144,
			"size":	11
		}, {
			"switch":	11,
			"case":	145,
			"size":	11
		}, {
			"switch":	11,
			"case":	146,
			"size":	11
		}, {
			"switch":	11,
			"case":	147,
			"size":	11
		}, {
			"switch":	11,
			"case":	148,
			"size":	11
		}, {
			"switch":	11,
			"case":	149,
			"size":	11
		}, {
			"switch":	11,
			"case":	150,
			"size":	11
		}, {
			"switch":	11,
			"case":	151,
			"size":	11
		}, {
			"switch":	11,
			"case":	152,
			"size":	11
		}, {
			"switch":	11,
			"case":	153,
			"size":	11
		}, {
			"switch":	11,
			"case":	154,
			"size":	11
		}, {
			"switch":	11,
			"case":	155,
			"size":	11
		}, {
			"switch":	11,
			"case":	156,
			"size":	11
		}, {
			"switch":	11,
			"case":	157,
			"size":	11
		}, {
			"switch":	11,
			"case":	158,
			"size":	11
		}, {
			"switch":	12,
			"case":	134,
			"size":	11
		}, {
			"switch":	12,
			"case":	135,
			"size":	11
		}, {
			"switch":	12,
			"case":	136,
			"size":	11
		}, {
			"switch":	12,
			"case":	137,
			"size":	11
		}, {
			"switch":	12,
			"case":	138,
			"size":	11
		}, {
			"switch":	12,
			"case":	139,
			"size":	11
		}, {
			"switch":	12,
			"case":	140,
			"size":	11
		}, {
			"switch":	12,
			"case":	141,
			"size":	11
		}, {
			"switch":	12,
			"case":	142,
			"size":	11
		}, {
			"switch":	12,
			"case":	143,
			"size":	11
		}, {
			"switch":	12,
			"case":	144,
			"size":	11
		}, {
			"switch":	12,
			"case":	145,
			"size":	11
		}, {
			"switch":	12,
			"case":	146,
			"size":	11
		}, {
			"switch":	12,
			"case":	147,
			"size":	11
		}, {
			"switch":	12,
			"case":	148,
			"size":	11
		}, {
			"switch":	12,
			"case":	149,
			"size":	11
		}, {
			"switch":	12,
			"case":	150,
			"size":	11
		}, {
			"switch":	12,
			"case":	151,
			"size":	11
		}, {
			"switch":	12,
			"case":	152,
			"size":	11
		}, {
			"switch":	12,
			"case":	153,
			"size":	11
		}, {
			"switch":	12,
			"case":	154,
			"size":	11
		}, {
			"switch":	12,
			"case":	155,
			"size":	11
		}, {
			"switch":	12,
			"case":	156,
			"size":	11
		}, {
			"switch":	12,
			"case":	157,
			"size":	11
		}, {
			"switch":	12,
			"case":	158,
			"size":	11
		}, {
			"switch":	13,
			"case":	134,
			"size":	11
		}, {
			"switch":	13,
			"case":	135,
			"size":	11
		}, {
			"switch":	13,
			"case":	136,
			"size":	11
		}, {
			"switch":	13,
			"case":	137,
			"size":	11
		}, {
			"switch":	13,
			"case":	138,
			"size":	11
		}, {
			"switch":	13,
			"case":	139,
			"size":	11
		}, {
			"switch":	13,
			"case":	140,
			"size":	11
		}, {
			"switch":	13,
			"case":	141,
			"size":	11
		}, {
			"switch":	13,
			"case":	142,
			"size":	11
		}, {
			"switch":	13,
			"case":	143,
			"size":	11
		}, {
			"switch":	13,
			"case":	144,
			"size":	11
		}, {
			"switch":	13,
			"case":	145,
			"size":	11
		}, {
			"switch":	13,
			"case":	146,
			"size":	11
		}, {
			"switch":	13,
			"case":	147,
			"size":	11
		}, {
			"switch":	13,
			"case":	148,
			"size":	11
		}, {
			"switch":	13,
			"case":	149,
			"size":	11
		}, {
			"switch":	13,
			"case":	150,
			"size":	11
		}, {
			"switch":	13,
			"case":	151,
			"size":	11
		}, {
			"switch":	13,
			"case":	152,
			"size":	11
		}, {
			"switch":	13,
			"case":	153,
			"size":	11
		}, {
			"switch":	13,
			"case":	154,
			"size":	11
		}, {
			"switch":	13,
			"case":	155,
			"size":	11
		}, {
			"switch":	13,
			"case":	156,
			"size":	11
		}, {
			"switch":	13,
			"case":	157,
			"size":	11
		}, {
			"switch":	13,
			"case":	158,
			"size":	11
		}, {
			"switch":	14,
			"case":	102,
			"size":	8
		}, {
			"switch":	14,
			"case":	103,
			"size":	8
		}, {
			"switch":	14,
			"case":	104,
			"size":	8
		}, {
			"switch":	14,
			"case":	105,
			"size":	8
		}, {
			"switch":	14,
			"case":	106,
			"size":	8
		}, {
			"switch":	14,
			"case":	107,
			"size":	8
		}, {
			"switch":	14,
			"case":	108,
			"size":	8
		}, {
			"switch":	14,
			"case":	109,
			"size":	8
		}, {
			"switch":	14,
			"case":	110,
			"size":	8
		}, {
			"switch":	14,
			"case":	111,
			"size":	8
		}, {
			"switch":	14,
			"case":	112,
			"size":	8
		}, {
			"switch":	14,
			"case":	113,
			"size":	8
		}, {
			"switch":	14,
			"case":	114,
			"size":	8
		}, {
			"switch":	14,
			"case":	115,
			"size":	8
		}, {
			"switch":	14,
			"case":	116,
			"size":	8
		}, {
			"switch":	16,
			"case":	1,
			"size":	12
		}, {
			"switch":	16,
			"case":	2,
			"size":	12
		}, {
			"switch":	17,
			"case":	102,
			"size":	12
		}, {
			"switch":	17,
			"case":	103,
			"size":	12
		}, {
			"switch":	17,
			"case":	104,
			"size":	12
		}, {
			"switch":	17,
			"case":	105,
			"size":	12
		}, {
			"switch":	17,
			"case":	106,
			"size":	12
		}, {
			"switch":	17,
			"case":	107,
			"size":	12
		}, {
			"switch":	17,
			"case":	108,
			"size":	12
		}, {
			"switch":	17,
			"case":	109,
			"size":	12
		}, {
			"switch":	17,
			"case":	110,
			"size":	12
		}, {
			"switch":	17,
			"case":	111,
			"size":	12
		}, {
			"switch":	17,
			"case":	112,
			"size":	12
		}, {
			"switch":	17,
			"case":	113,
			"size":	12
		}, {
			"switch":	17,
			"case":	114,
			"size":	12
		}, {
			"switch":	17,
			"case":	115,
			"size":	12
		}, {
			"switch":	17,
			"case":	116,
			"size":	12
		}, {
			"switch":	18,
			"case":	1,
			"size":	12
		}, {
			"switch":	18,
			"case":	2,
			"size":	12
		}, {
			"switch":	18,
			"case":	23,
			"size":	12
		}, {
			"switch":	19,
			"case":	102,
			"size":	12
		}, {
			"switch":	19,
			"case":	103,
			"size":	12
		}, {
			"switch":	19,
			"case":	104,
			"size":	12
		}, {
			"switch":	19,
			"case":	105,
			"size":	12
		}, {
			"switch":	19,
			"case":	106,
			"size":	12
		}, {
			"switch":	19,
			"case":	107,
			"size":	12
		}, {
			"switch":	19,
			"case":	108,
			"size":	12
		}, {
			"switch":	19,
			"case":	109,
			"size":	12
		}, {
			"switch":	19,
			"case":	110,
			"size":	12
		}, {
			"switch":	19,
			"case":	111,
			"size":	12
		}, {
			"switch":	19,
			"case":	112,
			"size":	12
		}, {
			"switch":	19,
			"case":	113,
			"size":	12
		}, {
			"switch":	19,
			"case":	114,
			"size":	12
		}, {
			"switch":	19,
			"case":	115,
			"size":	12
		}, {
			"switch":	19,
			"case":	116,
			"size":	12
		}, {
			"switch":	20,
			"case":	1,
			"size":	12
		}, {
			"switch":	21,
			"case":	1,
			"size":	12
		}, {
			"switch":	21,
			"case":	2,
			"size":	12
		}, {
			"switch":	22,
			"case":	102,
			"size":	8
		}, {
			"switch":	22,
			"case":	103,
			"size":	8
		}, {
			"switch":	22,
			"case":	104,
			"size":	8
		}, {
			"switch":	22,
			"case":	105,
			"size":	8
		}, {
			"switch":	22,
			"case":	106,
			"size":	8
		}, {
			"switch":	22,
			"case":	107,
			"size":	8
		}, {
			"switch":	22,
			"case":	108,
			"size":	8
		}, {
			"switch":	22,
			"case":	109,
			"size":	8
		}, {
			"switch":	22,
			"case":	110,
			"size":	8
		}, {
			"switch":	22,
			"case":	111,
			"size":	8
		}, {
			"switch":	22,
			"case":	112,
			"size":	8
		}, {
			"switch":	22,
			"case":	113,
			"size":	8
		}, {
			"switch":	22,
			"case":	114,
			"size":	8
		}, {
			"switch":	22,
			"case":	115,
			"size":	8
		}, {
			"switch":	22,
			"case":	116,
			"size":	8
		}, {
			"switch":	23,
			"case":	1,
			"size":	8
		}, {
			"switch":	25,
			"case":	1,
			"size":	27
		}, {
			"switch":	25,
			"case":	6,
			"size":	27
		}, {
			"switch":	26,
			"case":	1671,
			"size":	27
		}, {
			"switch":	26,
			"case":	1672,
			"size":	27
		}, {
			"switch":	26,
			"case":	1673,
			"size":	27
		}, {
			"switch":	26,
			"case":	1674,
			"size":	27
		}, {
			"switch":	26,
			"case":	1675,
			"size":	27
		}, {
			"switch":	27,
			"case":	1,
			"size":	27
		}, {
			"switch":	28,
			"case":	1,
			"size":	27
		}, {
			"switch":	28,
			"case":	2,
			"size":	27
		}, {
			"switch":	29,
			"case":	1671,
			"size":	27
		}, {
			"switch":	29,
			"case":	1672,
			"size":	27
		}, {
			"switch":	29,
			"case":	1673,
			"size":	27
		}, {
			"switch":	29,
			"case":	1674,
			"size":	27
		}, {
			"switch":	29,
			"case":	1675,
			"size":	27
		}, {
			"switch":	30,
			"case":	1,
			"size":	27
		}, {
			"switch":	31,
			"case":	1671,
			"size":	27
		}, {
			"switch":	31,
			"case":	1672,
			"size":	27
		}, {
			"switch":	31,
			"case":	1673,
			"size":	27
		}, {
			"switch":	31,
			"case":	1674,
			"size":	27
		}, {
			"switch":	31,
			"case":	1675,
			"size":	27
		}, {
			"switch":	32,
			"case":	1,
			"size":	27
		}, {
			"switch":	32,
			"case":	2,
			"size":	27
		}, {
			"switch":	32,
			"case":	3,
			"size":	27
		}, {
			"switch":	33,
			"case":	1671,
			"size":	27
		}, {
			"switch":	33,
			"case":	1672,
			"size":	27
		}, {
			"switch":	33,
			"case":	1673,
			"size":	27
		}, {
			"switch":	33,
			"case":	1674,
			"size":	27
		}, {
			"switch":	33,
			"case":	1675,
			"size":	27
		}, {
			"switch":	34,
			"case":	1,
			"size":	27
		}, {
			"switch":	35,
			"case":	1671,
			"size":	27
		}, {
			"switch":	35,
			"case":	1672,
			"size":	27
		}, {
			"switch":	35,
			"case":	1673,
			"size":	27
		}, {
			"switch":	35,
			"case":	1674,
			"size":	27
		}, {
			"switch":	35,
			"case":	1675,
			"size":	27
		}, {
			"switch":	36,
			"case":	1,
			"size":	27
		}, {
			"switch":	37,
			"case":	1,
			"size":	27
		}, {
			"switch":	37,
			"case":	2,
			"size":	27
		}, {
			"switch":	39,
			"case":	1,
			"size":	28
		}, {
			"switch":	39,
			"case":	2,
			"size":	28
		}, {
			"switch":	40,
			"case":	1671,
			"size":	28
		}, {
			"switch":	40,
			"case":	1672,
			"size":	28
		}, {
			"switch":	40,
			"case":	1673,
			"size":	28
		}, {
			"switch":	40,
			"case":	1674,
			"size":	28
		}, {
			"switch":	40,
			"case":	1675,
			"size":	28
		}, {
			"switch":	41,
			"case":	1,
			"size":	28
		}],
	"func_locations":	[{
			"file":	"Python/peephole.c",
			"functions":	[{
					"function":	"PyCode_Optimize",
					"begin":	379,
					"end":	775
				}, {
					"function":	"_Py_ANNOTATE_MEMORY_ORDER",
					"begin":	58,
					"end":	79
				}, {
					"function":	"_Py_atomic_signal_fence",
					"begin":	43,
					"end":	48
				}, {
					"function":	"_Py_atomic_thread_fence",
					"begin":	50,
					"end":	55
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"fold_binops_on_constants",
					"begin":	149,
					"end":	237
				}, {
					"function":	"fold_unaryops_on_constants",
					"begin":	239,
					"end":	288
				}, {
					"function":	"load_global",
					"begin":	333,
					"end":	360
				}, {
					"function":	"markblocks",
					"begin":	290,
					"end":	329
				}, {
					"function":	"tuple_of_constants",
					"begin":	94,
					"end":	137
				}]
		}]
}
