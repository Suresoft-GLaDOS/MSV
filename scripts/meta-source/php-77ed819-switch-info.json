{
	"switch_num":	119,
	"case_num":	[69, 5, 113, 1, 124, 15, 123, 141, 3, 139, 1, 1, 1, 123, 27, 122, 1, 71, 1, 313, 2, 412, 53, 413, 65, 413, 16, 413, 3, 412, 14, 412, 356, 412, 92, 2, 162, 3, 1, 163, 5, 2, 164, 140, 14, 270, 4, 268, 160, 267, 1, 2, 1, 112, 3, 164, 3, 2, 2, 112, 69, 112, 7, 2, 112, 1, 98, 1, 175, 5, 2, 175, 286, 3, 2, 289, 3, 297, 19, 2, 2, 285, 1, 174, 34, 103, 41, 78, 7, 112, 4, 112, 1, 1, 112, 1, 74, 2, 108, 1, 114, 2, 269, 6, 2, 206, 40, 2, 206, 3, 2, 207, 46, 208, 75, 207, 165, 207, 244],
	"switch_cluster":	[[3, 5, 10, 11, 12, 14, 16, 18, 22, 24, 26, 30, 32, 34, 35, 38, 41, 48, 50, 51, 52, 57, 58, 60, 63, 65, 67, 70, 74, 79, 80, 82, 84, 86, 92, 93, 95, 99, 104, 107, 110, 112, 114, 116, 118], [1, 8, 20, 28, 37, 40, 44, 46, 54, 56, 62, 69, 73, 76, 78, 88, 90, 97, 101, 103, 106, 109], [0, 2, 4, 6, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 36, 39, 42, 43, 45, 47, 49, 53, 55, 59, 61, 64, 66, 68, 71, 72, 75, 77, 81, 83, 85, 87, 89, 91, 94, 96, 98, 100, 102, 105, 108, 111, 113, 115, 117], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999611,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999611,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999611,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999611,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999611,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999611,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999611,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	594,
			"primary_score":	999611,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999611,
			"second_score":	739
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	596,
			"primary_score":	999611,
			"second_score":	738
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	597,
			"primary_score":	999611,
			"second_score":	737
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	599,
			"primary_score":	999611,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	601,
			"primary_score":	999611,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	692,
			"primary_score":	999611,
			"second_score":	121991
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999611,
			"second_score":	121990
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	699,
			"primary_score":	999611,
			"second_score":	121989
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	812,
			"primary_score":	999611,
			"second_score":	121988
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999611,
			"second_score":	121987
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	819,
			"primary_score":	999611,
			"second_score":	121986
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999611,
			"second_score":	121985
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1897,
			"primary_score":	999611,
			"second_score":	122207
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1898,
			"primary_score":	999611,
			"second_score":	122206
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1901,
			"primary_score":	999611,
			"second_score":	122205
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1902,
			"primary_score":	999611,
			"second_score":	122204
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1903,
			"primary_score":	999611,
			"second_score":	122203
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1904,
			"primary_score":	999611,
			"second_score":	122202
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999611,
			"second_score":	119963
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999611,
			"second_score":	119962
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999611,
			"second_score":	119961
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999611,
			"second_score":	119967
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999611,
			"second_score":	119966
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999611,
			"second_score":	119965
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999611,
			"second_score":	119964
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999611,
			"second_score":	119960
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999611,
			"second_score":	119959
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999611,
			"second_score":	119958
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999611,
			"second_score":	119957
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999611,
			"second_score":	121617
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999611,
			"second_score":	121566
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999611,
			"second_score":	121565
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999611,
			"second_score":	103778
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999611,
			"second_score":	103770
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999611,
			"second_score":	47448
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999611,
			"second_score":	47429
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999611,
			"second_score":	14813
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999611,
			"second_score":	14750
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999611,
			"second_score":	14749
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999611,
			"second_score":	14741
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999611,
			"second_score":	14740
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999611,
			"second_score":	14739
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999611,
			"second_score":	14738
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999611,
			"second_score":	6281
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999611,
			"second_score":	6280
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999611,
			"second_score":	6224
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999611,
			"second_score":	6124
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999611,
			"second_score":	121896
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999611,
			"second_score":	121890
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999611,
			"second_score":	121289
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999611,
			"second_score":	120461
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999611,
			"second_score":	120460
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999611,
			"second_score":	120459
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999611,
			"second_score":	120453
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999611,
			"second_score":	120443
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999611,
			"second_score":	120441
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999611,
			"second_score":	113997
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999611,
			"second_score":	113991
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999611,
			"second_score":	113758
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999611,
			"second_score":	113756
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999611,
			"second_score":	113729
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999611,
			"second_score":	113728
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999611,
			"second_score":	113724
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999611,
			"second_score":	113718
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999611,
			"second_score":	113715
		}, {
			"file":	"Zend/zend.c",
			"line":	971,
			"primary_score":	999886,
			"second_score":	126189
		}, {
			"file":	"Zend/zend.c",
			"line":	972,
			"primary_score":	999886,
			"second_score":	126188
		}, {
			"file":	"Zend/zend.c",
			"line":	973,
			"primary_score":	999886,
			"second_score":	126187
		}, {
			"file":	"Zend/zend.c",
			"line":	974,
			"primary_score":	999886,
			"second_score":	126186
		}, {
			"file":	"Zend/zend.c",
			"line":	975,
			"primary_score":	999886,
			"second_score":	126185
		}, {
			"file":	"Zend/zend.c",
			"line":	976,
			"primary_score":	999886,
			"second_score":	126184
		}, {
			"file":	"Zend/zend.c",
			"line":	977,
			"primary_score":	999886,
			"second_score":	126183
		}, {
			"file":	"Zend/zend.c",
			"line":	978,
			"primary_score":	999886,
			"second_score":	126182
		}, {
			"file":	"Zend/zend.c",
			"line":	979,
			"primary_score":	999886,
			"second_score":	126181
		}, {
			"file":	"Zend/zend.c",
			"line":	980,
			"primary_score":	999886,
			"second_score":	126180
		}, {
			"file":	"Zend/zend.c",
			"line":	981,
			"primary_score":	999886,
			"second_score":	126179
		}, {
			"file":	"Zend/zend.c",
			"line":	984,
			"primary_score":	999886,
			"second_score":	126178
		}, {
			"file":	"Zend/zend.c",
			"line":	1006,
			"primary_score":	999886,
			"second_score":	126176
		}, {
			"file":	"Zend/zend.c",
			"line":	1007,
			"primary_score":	999886,
			"second_score":	126174
		}, {
			"file":	"Zend/zend.c",
			"line":	1008,
			"primary_score":	999886,
			"second_score":	126171
		}, {
			"file":	"Zend/zend.c",
			"line":	1013,
			"primary_score":	999886,
			"second_score":	126167
		}, {
			"file":	"Zend/zend.c",
			"line":	1019,
			"primary_score":	999886,
			"second_score":	126166
		}, {
			"file":	"Zend/zend.c",
			"line":	1023,
			"primary_score":	999886,
			"second_score":	126165
		}, {
			"file":	"Zend/zend.c",
			"line":	1035,
			"primary_score":	999886,
			"second_score":	126164
		}, {
			"file":	"Zend/zend.c",
			"line":	1038,
			"primary_score":	999889,
			"second_score":	126163
		}, {
			"file":	"Zend/zend.c",
			"line":	1151,
			"primary_score":	999897,
			"second_score":	123765
		}, {
			"file":	"Zend/zend.c",
			"line":	1153,
			"primary_score":	999897,
			"second_score":	123764
		}, {
			"file":	"Zend/zend.c",
			"line":	1200,
			"primary_score":	999611,
			"second_score":	121944
		}, {
			"file":	"Zend/zend.c",
			"line":	1201,
			"primary_score":	999611,
			"second_score":	121943
		}, {
			"file":	"Zend/zend.c",
			"line":	1202,
			"primary_score":	999611,
			"second_score":	121942
		}, {
			"file":	"Zend/zend.c",
			"line":	1210,
			"primary_score":	999611,
			"second_score":	133588
		}, {
			"file":	"Zend/zend.c",
			"line":	1211,
			"primary_score":	999611,
			"second_score":	133587
		}, {
			"file":	"Zend/zend.c",
			"line":	1212,
			"primary_score":	999611,
			"second_score":	133586
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999611,
			"second_score":	122211
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999611,
			"second_score":	122209
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999611,
			"second_score":	122208
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999611,
			"second_score":	121963
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999611,
			"second_score":	121941
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999611,
			"second_score":	121940
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999611,
			"second_score":	121939
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999611,
			"second_score":	121938
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999611,
			"second_score":	113847
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999611,
			"second_score":	15289
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999611,
			"second_score":	123700
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999611,
			"second_score":	125316
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999611,
			"second_score":	15291
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999611,
			"second_score":	123413
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999611,
			"second_score":	17648
		}, {
			"file":	"Zend/zend_API.c",
			"line":	241,
			"primary_score":	999638,
			"second_score":	127547
		}, {
			"file":	"Zend/zend_API.c",
			"line":	242,
			"primary_score":	999638,
			"second_score":	127546
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999611,
			"second_score":	129208
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999611,
			"second_score":	129207
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999611,
			"second_score":	129206
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999611,
			"second_score":	129205
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999611,
			"second_score":	129204
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999611,
			"second_score":	129203
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999611,
			"second_score":	129202
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999611,
			"second_score":	129201
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999611,
			"second_score":	121350
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999611,
			"second_score":	121349
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999611,
			"second_score":	121348
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999611,
			"second_score":	122269
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999611,
			"second_score":	121346
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999611,
			"second_score":	121344
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999611,
			"second_score":	121343
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999611,
			"second_score":	121342
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999611,
			"second_score":	121341
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999611,
			"second_score":	129200
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999611,
			"second_score":	129199
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999611,
			"second_score":	129198
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999611,
			"second_score":	129197
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999611,
			"second_score":	129196
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999611,
			"second_score":	129195
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999611,
			"second_score":	129211
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999611,
			"second_score":	129210
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999611,
			"second_score":	129209
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999611,
			"second_score":	129194
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999611,
			"second_score":	129193
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999611,
			"second_score":	123530
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999611,
			"second_score":	123529
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999611,
			"second_score":	123528
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999611,
			"second_score":	123527
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999611,
			"second_score":	123526
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999611,
			"second_score":	123525
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999611,
			"second_score":	123524
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999611,
			"second_score":	123523
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999611,
			"second_score":	123522
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999611,
			"second_score":	123521
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999611,
			"second_score":	123520
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999611,
			"second_score":	123519
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999611,
			"second_score":	123518
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999611,
			"second_score":	123517
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999611,
			"second_score":	129225
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999611,
			"second_score":	129231
		}, {
			"file":	"Zend/zend_API.c",
			"line":	742,
			"primary_score":	999785,
			"second_score":	123516
		}, {
			"file":	"Zend/zend_API.c",
			"line":	744,
			"primary_score":	999785,
			"second_score":	123515
		}, {
			"file":	"Zend/zend_API.c",
			"line":	745,
			"primary_score":	999785,
			"second_score":	123514
		}, {
			"file":	"Zend/zend_API.c",
			"line":	748,
			"primary_score":	999785,
			"second_score":	123513
		}, {
			"file":	"Zend/zend_API.c",
			"line":	749,
			"primary_score":	999785,
			"second_score":	123512
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999611,
			"second_score":	123511
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999611,
			"second_score":	123510
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999611,
			"second_score":	123509
		}, {
			"file":	"Zend/zend_API.c",
			"line":	770,
			"primary_score":	999785,
			"second_score":	123508
		}, {
			"file":	"Zend/zend_API.c",
			"line":	771,
			"primary_score":	999785,
			"second_score":	123507
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999611,
			"second_score":	123506
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999611,
			"second_score":	123505
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999611,
			"second_score":	123503
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999611,
			"second_score":	123502
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999611,
			"second_score":	123501
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999611,
			"second_score":	123500
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999611,
			"second_score":	123110
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999611,
			"second_score":	123499
		}, {
			"file":	"Zend/zend_API.c",
			"line":	805,
			"primary_score":	999785,
			"second_score":	123498
		}, {
			"file":	"Zend/zend_API.c",
			"line":	808,
			"primary_score":	999785,
			"second_score":	123497
		}, {
			"file":	"Zend/zend_API.c",
			"line":	809,
			"primary_score":	999785,
			"second_score":	123496
		}, {
			"file":	"Zend/zend_API.c",
			"line":	810,
			"primary_score":	999785,
			"second_score":	123495
		}, {
			"file":	"Zend/zend_API.c",
			"line":	812,
			"primary_score":	999785,
			"second_score":	123494
		}, {
			"file":	"Zend/zend_API.c",
			"line":	813,
			"primary_score":	999785,
			"second_score":	123493
		}, {
			"file":	"Zend/zend_API.c",
			"line":	814,
			"primary_score":	999785,
			"second_score":	123492
		}, {
			"file":	"Zend/zend_API.c",
			"line":	816,
			"primary_score":	999785,
			"second_score":	123490
		}, {
			"file":	"Zend/zend_API.c",
			"line":	819,
			"primary_score":	999785,
			"second_score":	123489
		}, {
			"file":	"Zend/zend_API.c",
			"line":	820,
			"primary_score":	999785,
			"second_score":	123461
		}, {
			"file":	"Zend/zend_API.c",
			"line":	821,
			"primary_score":	999785,
			"second_score":	123459
		}, {
			"file":	"Zend/zend_API.c",
			"line":	825,
			"primary_score":	999785,
			"second_score":	123458
		}, {
			"file":	"Zend/zend_API.c",
			"line":	826,
			"primary_score":	999785,
			"second_score":	123457
		}, {
			"file":	"Zend/zend_API.c",
			"line":	827,
			"primary_score":	999785,
			"second_score":	123456
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999611,
			"second_score":	129214
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999611,
			"second_score":	129212
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999611,
			"second_score":	129192
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999611,
			"second_score":	123455
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999611,
			"second_score":	123538
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999611,
			"second_score":	123537
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999611,
			"second_score":	123536
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999611,
			"second_score":	123532
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999611,
			"second_score":	123531
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999611,
			"second_score":	123454
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999611,
			"second_score":	123453
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1018,
			"primary_score":	999617,
			"second_score":	130054
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1019,
			"primary_score":	999617,
			"second_score":	130053
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1020,
			"primary_score":	999617,
			"second_score":	130052
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1021,
			"primary_score":	999617,
			"second_score":	130051
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1023,
			"primary_score":	999617,
			"second_score":	130050
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1024,
			"primary_score":	999617,
			"second_score":	130049
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1026,
			"primary_score":	999617,
			"second_score":	130014
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1027,
			"primary_score":	999858,
			"second_score":	130540
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1028,
			"primary_score":	999858,
			"second_score":	130539
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1032,
			"primary_score":	999617,
			"second_score":	130013
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1068,
			"primary_score":	999617,
			"second_score":	130012
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1072,
			"primary_score":	999617,
			"second_score":	130011
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1073,
			"primary_score":	999617,
			"second_score":	130010
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1080,
			"primary_score":	999619,
			"second_score":	127796
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1082,
			"primary_score":	999619,
			"second_score":	127795
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1083,
			"primary_score":	999858,
			"second_score":	130413
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1084,
			"primary_score":	999858,
			"second_score":	130391
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1085,
			"primary_score":	999858,
			"second_score":	130390
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1086,
			"primary_score":	999858,
			"second_score":	130389
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1087,
			"primary_score":	999858,
			"second_score":	130388
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1090,
			"primary_score":	999858,
			"second_score":	130386
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1101,
			"primary_score":	999618,
			"second_score":	130057
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1103,
			"primary_score":	999618,
			"second_score":	130056
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1108,
			"primary_score":	999618,
			"second_score":	130055
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1110,
			"primary_score":	999618,
			"second_score":	130009
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1111,
			"primary_score":	999618,
			"second_score":	130008
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1112,
			"primary_score":	999915,
			"second_score":	130523
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1113,
			"primary_score":	999915,
			"second_score":	130417
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1117,
			"primary_score":	999915,
			"second_score":	130416
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1120,
			"primary_score":	999631,
			"second_score":	130007
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1122,
			"primary_score":	999618,
			"second_score":	129508
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1128,
			"primary_score":	999619,
			"second_score":	130058
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999611,
			"second_score":	123834
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999611,
			"second_score":	123833
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999611,
			"second_score":	123723
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999611,
			"second_score":	123608
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999611,
			"second_score":	103769
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999611,
			"second_score":	103768
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999611,
			"second_score":	103767
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999611,
			"second_score":	50393
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999611,
			"second_score":	50392
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999611,
			"second_score":	50391
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999611,
			"second_score":	50390
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999611,
			"second_score":	50389
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999611,
			"second_score":	50388
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999611,
			"second_score":	47509
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999611,
			"second_score":	47508
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999611,
			"second_score":	47460
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999611,
			"second_score":	47459
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2229,
			"primary_score":	999611,
			"second_score":	50400
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2231,
			"primary_score":	999611,
			"second_score":	50399
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2237,
			"primary_score":	999611,
			"second_score":	50398
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2241,
			"primary_score":	999611,
			"second_score":	53640
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999611,
			"second_score":	50397
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2249,
			"primary_score":	999611,
			"second_score":	52957
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2250,
			"primary_score":	999611,
			"second_score":	54025
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2255,
			"primary_score":	999611,
			"second_score":	50396
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2256,
			"primary_score":	999611,
			"second_score":	50395
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2257,
			"primary_score":	999611,
			"second_score":	50394
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2262,
			"primary_score":	999611,
			"second_score":	47458
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2301,
			"primary_score":	999611,
			"second_score":	121252
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2303,
			"primary_score":	999611,
			"second_score":	121251
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2304,
			"primary_score":	999611,
			"second_score":	121245
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999611,
			"second_score":	121244
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2309,
			"primary_score":	999611,
			"second_score":	121243
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2310,
			"primary_score":	999611,
			"second_score":	120661
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2312,
			"primary_score":	999611,
			"second_score":	120660
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2313,
			"primary_score":	999611,
			"second_score":	120654
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2316,
			"primary_score":	999611,
			"second_score":	120653
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2322,
			"primary_score":	999611,
			"second_score":	116874
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2324,
			"primary_score":	999611,
			"second_score":	116873
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2348,
			"primary_score":	999611,
			"second_score":	113706
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2352,
			"primary_score":	999611,
			"second_score":	113705
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2354,
			"primary_score":	999611,
			"second_score":	113704
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3338,
			"primary_score":	999965,
			"second_score":	161860
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3799,
			"primary_score":	999783,
			"second_score":	129267
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3800,
			"primary_score":	999783,
			"second_score":	129266
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3801,
			"primary_score":	999783,
			"second_score":	129265
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3802,
			"primary_score":	999783,
			"second_score":	129264
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3810,
			"primary_score":	999783,
			"second_score":	129269
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3811,
			"primary_score":	999783,
			"second_score":	129268
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3812,
			"primary_score":	999783,
			"second_score":	129263
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3817,
			"primary_score":	999783,
			"second_score":	129262
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3818,
			"primary_score":	999783,
			"second_score":	129261
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3824,
			"primary_score":	999783,
			"second_score":	128800
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3825,
			"primary_score":	999783,
			"second_score":	128799
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3826,
			"primary_score":	999783,
			"second_score":	128798
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3831,
			"primary_score":	999785,
			"second_score":	128797
		}, {
			"file":	"Zend/zend_API.c",
			"line":	3834,
			"primary_score":	999783,
			"second_score":	128796
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999611,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	297,
			"primary_score":	999611,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	673,
			"primary_score":	999611,
			"second_score":	113228
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	675,
			"primary_score":	999611,
			"second_score":	113227
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	676,
			"primary_score":	999611,
			"second_score":	113226
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	699,
			"primary_score":	999611,
			"second_score":	113286
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	701,
			"primary_score":	999611,
			"second_score":	113285
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	702,
			"primary_score":	999611,
			"second_score":	113284
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	725,
			"primary_score":	999611,
			"second_score":	113235
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999611,
			"second_score":	113234
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999611,
			"second_score":	113233
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999611,
			"second_score":	113232
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999611,
			"second_score":	113231
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999611,
			"second_score":	113230
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999611,
			"second_score":	113229
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999611,
			"second_score":	113225
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999611,
			"second_score":	113224
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999611,
			"second_score":	113223
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	738,
			"primary_score":	999611,
			"second_score":	113222
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999611,
			"second_score":	113221
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	740,
			"primary_score":	999611,
			"second_score":	113220
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999611,
			"second_score":	113219
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	743,
			"primary_score":	999611,
			"second_score":	117037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999611,
			"second_score":	117036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999611,
			"second_score":	117035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999611,
			"second_score":	117034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999611,
			"second_score":	117033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999611,
			"second_score":	117032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	751,
			"primary_score":	999611,
			"second_score":	117031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	752,
			"primary_score":	999611,
			"second_score":	117030
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	753,
			"primary_score":	999611,
			"second_score":	117029
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	754,
			"primary_score":	999611,
			"second_score":	117028
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	757,
			"primary_score":	999950,
			"second_score":	114999
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	759,
			"primary_score":	999950,
			"second_score":	114998
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	760,
			"primary_score":	999950,
			"second_score":	114997
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	761,
			"primary_score":	999950,
			"second_score":	114996
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	762,
			"primary_score":	999950,
			"second_score":	114995
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	763,
			"primary_score":	999950,
			"second_score":	114994
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	768,
			"primary_score":	999611,
			"second_score":	127571
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	770,
			"primary_score":	999611,
			"second_score":	127570
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999611,
			"second_score":	127569
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	773,
			"primary_score":	999611,
			"second_score":	127568
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999611,
			"second_score":	127567
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	776,
			"primary_score":	999611,
			"second_score":	127566
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	778,
			"primary_score":	999611,
			"second_score":	127565
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	779,
			"primary_score":	999611,
			"second_score":	127564
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	780,
			"primary_score":	999611,
			"second_score":	127563
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	786,
			"primary_score":	999611,
			"second_score":	113272
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999611,
			"second_score":	113271
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	789,
			"primary_score":	999611,
			"second_score":	113270
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999611,
			"second_score":	113269
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	792,
			"primary_score":	999611,
			"second_score":	113268
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	795,
			"primary_score":	999611,
			"second_score":	113267
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	800,
			"primary_score":	999611,
			"second_score":	113266
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999611,
			"second_score":	113265
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999611,
			"second_score":	113264
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999611,
			"second_score":	113263
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	805,
			"primary_score":	999611,
			"second_score":	113259
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	806,
			"primary_score":	999611,
			"second_score":	113257
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	807,
			"primary_score":	999611,
			"second_score":	113256
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	808,
			"primary_score":	999611,
			"second_score":	113255
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	811,
			"primary_score":	999917,
			"second_score":	125291
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	815,
			"primary_score":	999917,
			"second_score":	125290
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	817,
			"primary_score":	999917,
			"second_score":	125289
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	818,
			"primary_score":	999917,
			"second_score":	125288
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	819,
			"primary_score":	999917,
			"second_score":	125287
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	820,
			"primary_score":	999917,
			"second_score":	125286
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	821,
			"primary_score":	999917,
			"second_score":	125285
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	825,
			"primary_score":	999917,
			"second_score":	125284
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	833,
			"primary_score":	999611,
			"second_score":	127360
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999611,
			"second_score":	127359
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999611,
			"second_score":	127358
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999611,
			"second_score":	127357
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999611,
			"second_score":	127356
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	843,
			"primary_score":	999611,
			"second_score":	127355
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	845,
			"primary_score":	999611,
			"second_score":	127354
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	846,
			"primary_score":	999611,
			"second_score":	127353
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999611,
			"second_score":	113610
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	891,
			"primary_score":	999611,
			"second_score":	113609
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999611,
			"second_score":	113608
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	894,
			"primary_score":	999611,
			"second_score":	113607
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	896,
			"primary_score":	999611,
			"second_score":	113606
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	897,
			"primary_score":	999611,
			"second_score":	113605
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999611,
			"second_score":	113604
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999611,
			"second_score":	113603
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	906,
			"primary_score":	999611,
			"second_score":	113350
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999611,
			"second_score":	113349
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999611,
			"second_score":	113348
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	909,
			"primary_score":	999611,
			"second_score":	113347
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	911,
			"primary_score":	999611,
			"second_score":	113346
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	912,
			"primary_score":	999611,
			"second_score":	113345
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1599,
			"primary_score":	999611,
			"second_score":	3212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1600,
			"primary_score":	999611,
			"second_score":	3211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1601,
			"primary_score":	999611,
			"second_score":	3210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1602,
			"primary_score":	999611,
			"second_score":	3209
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999611,
			"second_score":	3208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1608,
			"primary_score":	999611,
			"second_score":	3207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1614,
			"primary_score":	999611,
			"second_score":	3206
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999611,
			"second_score":	3205
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999611,
			"second_score":	3204
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999611,
			"second_score":	3203
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1672,
			"primary_score":	999611,
			"second_score":	3202
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1673,
			"primary_score":	999611,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999611,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1675,
			"primary_score":	999611,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999611,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1678,
			"primary_score":	999611,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1679,
			"primary_score":	999611,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1680,
			"primary_score":	999611,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1681,
			"primary_score":	999611,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1684,
			"primary_score":	999611,
			"second_score":	113616
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1686,
			"primary_score":	999611,
			"second_score":	113615
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1687,
			"primary_score":	999611,
			"second_score":	113614
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1692,
			"primary_score":	999611,
			"second_score":	113613
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1705,
			"primary_score":	999611,
			"second_score":	113612
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999611,
			"second_score":	113611
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1710,
			"primary_score":	999611,
			"second_score":	113344
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999611,
			"second_score":	113343
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999611,
			"second_score":	113342
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999611,
			"second_score":	113341
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1718,
			"primary_score":	999611,
			"second_score":	113340
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999611,
			"second_score":	113339
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1721,
			"primary_score":	999611,
			"second_score":	113338
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999611,
			"second_score":	113337
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1724,
			"primary_score":	999611,
			"second_score":	113336
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1725,
			"primary_score":	999611,
			"second_score":	113335
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1726,
			"primary_score":	999611,
			"second_score":	113331
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1727,
			"primary_score":	999611,
			"second_score":	113325
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1729,
			"primary_score":	999611,
			"second_score":	113307
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1730,
			"primary_score":	999611,
			"second_score":	113306
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1732,
			"primary_score":	999611,
			"second_score":	113211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1802,
			"primary_score":	999611,
			"second_score":	113296
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1803,
			"primary_score":	999611,
			"second_score":	113295
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1804,
			"primary_score":	999611,
			"second_score":	113291
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1805,
			"primary_score":	999611,
			"second_score":	113290
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1807,
			"primary_score":	999611,
			"second_score":	113289
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1811,
			"primary_score":	999611,
			"second_score":	113288
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1864,
			"primary_score":	999611,
			"second_score":	113287
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999611,
			"second_score":	113283
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999611,
			"second_score":	113282
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999611,
			"second_score":	113305
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1876,
			"primary_score":	999611,
			"second_score":	113304
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999611,
			"second_score":	113303
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1878,
			"primary_score":	999611,
			"second_score":	113302
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1879,
			"primary_score":	999611,
			"second_score":	113301
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1880,
			"primary_score":	999611,
			"second_score":	113300
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999611,
			"second_score":	113299
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1883,
			"primary_score":	999611,
			"second_score":	113298
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1884,
			"primary_score":	999611,
			"second_score":	122920
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1885,
			"primary_score":	999611,
			"second_score":	122919
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999611,
			"second_score":	122918
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999611,
			"second_score":	122917
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1897,
			"primary_score":	999611,
			"second_score":	122916
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1898,
			"primary_score":	999611,
			"second_score":	122915
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999611,
			"second_score":	122914
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999611,
			"second_score":	122913
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1901,
			"primary_score":	999611,
			"second_score":	122912
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999611,
			"second_score":	122911
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1909,
			"primary_score":	999611,
			"second_score":	123621
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1910,
			"primary_score":	999611,
			"second_score":	123620
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1912,
			"primary_score":	999611,
			"second_score":	127376
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1913,
			"primary_score":	999611,
			"second_score":	127372
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999611,
			"second_score":	127371
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1925,
			"primary_score":	999611,
			"second_score":	113297
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1927,
			"primary_score":	999611,
			"second_score":	113281
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1944,
			"primary_score":	999611,
			"second_score":	113280
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2005,
			"primary_score":	999611,
			"second_score":	113279
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2007,
			"primary_score":	999611,
			"second_score":	113278
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999611,
			"second_score":	113277
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999611,
			"second_score":	113276
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999611,
			"second_score":	113275
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2011,
			"primary_score":	999611,
			"second_score":	113273
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2013,
			"primary_score":	999611,
			"second_score":	113254
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999611,
			"second_score":	113253
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2018,
			"primary_score":	999611,
			"second_score":	113252
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2019,
			"primary_score":	999611,
			"second_score":	127349
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999611,
			"second_score":	127348
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2022,
			"primary_score":	999611,
			"second_score":	113251
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2025,
			"primary_score":	999611,
			"second_score":	113250
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2026,
			"primary_score":	999611,
			"second_score":	113244
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999611,
			"second_score":	113243
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999611,
			"second_score":	113237
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999611,
			"second_score":	113236
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2037,
			"primary_score":	999611,
			"second_score":	113218
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2039,
			"primary_score":	999611,
			"second_score":	113217
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2040,
			"primary_score":	999611,
			"second_score":	113216
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2041,
			"primary_score":	999611,
			"second_score":	113215
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999611,
			"second_score":	113214
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999611,
			"second_score":	113212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999611,
			"second_score":	113670
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2053,
			"primary_score":	999611,
			"second_score":	113669
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2054,
			"primary_score":	999611,
			"second_score":	113668
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2056,
			"primary_score":	999611,
			"second_score":	113667
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999611,
			"second_score":	113666
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999611,
			"second_score":	113665
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2062,
			"primary_score":	999611,
			"second_score":	113664
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2069,
			"primary_score":	999611,
			"second_score":	113663
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2070,
			"primary_score":	999611,
			"second_score":	113662
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2071,
			"primary_score":	999611,
			"second_score":	113661
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2073,
			"primary_score":	999611,
			"second_score":	113660
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2074,
			"primary_score":	999611,
			"second_score":	113659
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2075,
			"primary_score":	999611,
			"second_score":	113658
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999611,
			"second_score":	113657
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2082,
			"primary_score":	999611,
			"second_score":	113656
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2086,
			"primary_score":	999611,
			"second_score":	114061
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2088,
			"primary_score":	999611,
			"second_score":	114059
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2090,
			"primary_score":	999611,
			"second_score":	114058
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2091,
			"primary_score":	999611,
			"second_score":	114057
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2095,
			"primary_score":	999611,
			"second_score":	114056
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2096,
			"primary_score":	999611,
			"second_score":	114055
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999611,
			"second_score":	114054
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2098,
			"primary_score":	999611,
			"second_score":	114035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2100,
			"primary_score":	999611,
			"second_score":	114034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2104,
			"primary_score":	999611,
			"second_score":	114033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2105,
			"primary_score":	999611,
			"second_score":	114027
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2107,
			"primary_score":	999611,
			"second_score":	114009
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999611,
			"second_score":	124947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999611,
			"second_score":	124946
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999611,
			"second_score":	124945
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2115,
			"primary_score":	999611,
			"second_score":	124944
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999611,
			"second_score":	124943
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2118,
			"primary_score":	999611,
			"second_score":	124942
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2119,
			"primary_score":	999611,
			"second_score":	124941
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999611,
			"second_score":	126050
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2122,
			"primary_score":	999611,
			"second_score":	126049
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999611,
			"second_score":	126048
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999611,
			"second_score":	126047
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999611,
			"second_score":	126046
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999611,
			"second_score":	126045
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2139,
			"primary_score":	999611,
			"second_score":	126037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2140,
			"primary_score":	999611,
			"second_score":	126036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2159,
			"primary_score":	999611,
			"second_score":	130912
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2202,
			"primary_score":	999611,
			"second_score":	130911
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2204,
			"primary_score":	999611,
			"second_score":	130910
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2205,
			"primary_score":	999611,
			"second_score":	125345
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2206,
			"primary_score":	999611,
			"second_score":	125344
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2207,
			"primary_score":	999611,
			"second_score":	125342
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2208,
			"primary_score":	999611,
			"second_score":	122492
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2209,
			"primary_score":	999611,
			"second_score":	122491
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2211,
			"primary_score":	999611,
			"second_score":	122490
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2212,
			"primary_score":	999611,
			"second_score":	122488
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2214,
			"primary_score":	999611,
			"second_score":	122469
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2218,
			"primary_score":	999611,
			"second_score":	122468
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2221,
			"primary_score":	999611,
			"second_score":	122467
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2222,
			"primary_score":	999611,
			"second_score":	122461
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2223,
			"primary_score":	999611,
			"second_score":	122460
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2226,
			"primary_score":	999611,
			"second_score":	122454
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2230,
			"primary_score":	999611,
			"second_score":	122453
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2233,
			"primary_score":	999611,
			"second_score":	122435
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2234,
			"primary_score":	999611,
			"second_score":	122434
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2235,
			"primary_score":	999611,
			"second_score":	122433
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2236,
			"primary_score":	999611,
			"second_score":	122432
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2238,
			"primary_score":	999611,
			"second_score":	122431
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2239,
			"primary_score":	999611,
			"second_score":	122429
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2240,
			"primary_score":	999962,
			"second_score":	125341
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999611,
			"second_score":	123482
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999611,
			"second_score":	123481
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2413,
			"primary_score":	999611,
			"second_score":	123480
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2418,
			"primary_score":	999611,
			"second_score":	113673
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2420,
			"primary_score":	999611,
			"second_score":	113672
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999611,
			"second_score":	113671
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2429,
			"primary_score":	999611,
			"second_score":	124950
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2431,
			"primary_score":	999611,
			"second_score":	124949
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2434,
			"primary_score":	999611,
			"second_score":	124948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2469,
			"primary_score":	999611,
			"second_score":	133033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2470,
			"primary_score":	999611,
			"second_score":	133032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999611,
			"second_score":	133031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2478,
			"primary_score":	999611,
			"second_score":	133030
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2482,
			"primary_score":	999611,
			"second_score":	133029
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999611,
			"second_score":	133034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2527,
			"primary_score":	999611,
			"second_score":	121817
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2538,
			"primary_score":	999611,
			"second_score":	133036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2540,
			"primary_score":	999611,
			"second_score":	133035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2541,
			"primary_score":	999611,
			"second_score":	132948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2544,
			"primary_score":	999611,
			"second_score":	132947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2545,
			"primary_score":	999611,
			"second_score":	132946
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2564,
			"primary_score":	999611,
			"second_score":	123980
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2566,
			"primary_score":	999611,
			"second_score":	123979
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2567,
			"primary_score":	999611,
			"second_score":	123957
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2570,
			"primary_score":	999611,
			"second_score":	123956
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2571,
			"primary_score":	999611,
			"second_score":	123955
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2572,
			"primary_score":	999611,
			"second_score":	123954
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2625,
			"primary_score":	999611,
			"second_score":	3213
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	346,
			"primary_score":	999611,
			"second_score":	124404
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1335,
			"primary_score":	999611,
			"second_score":	121404
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1336,
			"primary_score":	999611,
			"second_score":	121403
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1337,
			"primary_score":	999611,
			"second_score":	121402
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1338,
			"primary_score":	999611,
			"second_score":	121401
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1339,
			"primary_score":	999611,
			"second_score":	121400
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1341,
			"primary_score":	999611,
			"second_score":	121399
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1345,
			"primary_score":	999611,
			"second_score":	121332
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1348,
			"primary_score":	999611,
			"second_score":	121156
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1349,
			"primary_score":	999611,
			"second_score":	121155
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1354,
			"primary_score":	999611,
			"second_score":	121154
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1356,
			"primary_score":	999611,
			"second_score":	121114
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1362,
			"primary_score":	999611,
			"second_score":	121095
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1367,
			"primary_score":	999611,
			"second_score":	121094
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1891,
			"primary_score":	999611,
			"second_score":	123836
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1892,
			"primary_score":	999611,
			"second_score":	123835
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1893,
			"primary_score":	999611,
			"second_score":	123460
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1921,
			"primary_score":	999611,
			"second_score":	133258
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1923,
			"primary_score":	999611,
			"second_score":	133257
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1927,
			"primary_score":	999611,
			"second_score":	133219
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1929,
			"primary_score":	999611,
			"second_score":	133117
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1932,
			"primary_score":	999611,
			"second_score":	133116
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	121,
			"primary_score":	999944,
			"second_score":	115132
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	122,
			"primary_score":	999944,
			"second_score":	115130
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	131,
			"primary_score":	999611,
			"second_score":	18912
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	137,
			"primary_score":	999852,
			"second_score":	143245
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	138,
			"primary_score":	999852,
			"second_score":	143244
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	139,
			"primary_score":	999852,
			"second_score":	143243
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	141,
			"primary_score":	999852,
			"second_score":	143242
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	142,
			"primary_score":	999852,
			"second_score":	143241
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	143,
			"primary_score":	999852,
			"second_score":	143240
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	149,
			"primary_score":	999852,
			"second_score":	143239
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	152,
			"primary_score":	999852,
			"second_score":	143238
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	153,
			"primary_score":	999852,
			"second_score":	143210
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	154,
			"primary_score":	999852,
			"second_score":	143209
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	156,
			"primary_score":	999852,
			"second_score":	143208
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	157,
			"primary_score":	999852,
			"second_score":	143207
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999611,
			"second_score":	113990
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999611,
			"second_score":	113965
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999611,
			"second_score":	113940
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999611,
			"second_score":	113915
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999611,
			"second_score":	113890
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999611,
			"second_score":	113865
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999611,
			"second_score":	113861
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999611,
			"second_score":	113857
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999611,
			"second_score":	113787
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	238,
			"primary_score":	999611,
			"second_score":	113783
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	276,
			"primary_score":	999852,
			"second_score":	131792
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	283,
			"primary_score":	999611,
			"second_score":	125153
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999621,
			"second_score":	133788
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	297,
			"primary_score":	999621,
			"second_score":	133787
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999621,
			"second_score":	133779
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	300,
			"primary_score":	999627,
			"second_score":	133776
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999636,
			"second_score":	133775
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	305,
			"primary_score":	999636,
			"second_score":	133754
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	307,
			"primary_score":	999731,
			"second_score":	133777
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999621,
			"second_score":	139037
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999621,
			"second_score":	139036
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999621,
			"second_score":	139035
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999621,
			"second_score":	141853
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	313,
			"primary_score":	999621,
			"second_score":	141852
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999621,
			"second_score":	139034
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999621,
			"second_score":	138964
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999621,
			"second_score":	138963
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	318,
			"primary_score":	999621,
			"second_score":	138962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	324,
			"primary_score":	999857,
			"second_score":	131566
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	325,
			"primary_score":	999857,
			"second_score":	131559
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	326,
			"primary_score":	999857,
			"second_score":	131558
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	328,
			"primary_score":	999867,
			"second_score":	131568
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	359,
			"primary_score":	999697,
			"second_score":	145787
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	360,
			"primary_score":	999697,
			"second_score":	145786
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	361,
			"primary_score":	999697,
			"second_score":	145785
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	362,
			"primary_score":	999697,
			"second_score":	145784
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	364,
			"primary_score":	999697,
			"second_score":	145783
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	370,
			"primary_score":	999697,
			"second_score":	145782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	373,
			"primary_score":	999697,
			"second_score":	145697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	374,
			"primary_score":	999697,
			"second_score":	145598
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	375,
			"primary_score":	999697,
			"second_score":	145591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	376,
			"primary_score":	999697,
			"second_score":	145501
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	378,
			"primary_score":	999697,
			"second_score":	145498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	417,
			"primary_score":	999614,
			"second_score":	147691
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	418,
			"primary_score":	999614,
			"second_score":	147690
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	419,
			"primary_score":	999614,
			"second_score":	147689
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	420,
			"primary_score":	999614,
			"second_score":	147688
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	421,
			"primary_score":	999614,
			"second_score":	147687
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	423,
			"primary_score":	999614,
			"second_score":	147686
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	429,
			"primary_score":	999614,
			"second_score":	147685
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	432,
			"primary_score":	999614,
			"second_score":	147620
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	436,
			"primary_score":	999614,
			"second_score":	147619
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	437,
			"primary_score":	999614,
			"second_score":	147618
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	439,
			"primary_score":	999614,
			"second_score":	147498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	440,
			"primary_score":	999614,
			"second_score":	147491
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	441,
			"primary_score":	999614,
			"second_score":	147426
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	443,
			"primary_score":	999614,
			"second_score":	147423
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	445,
			"primary_score":	999614,
			"second_score":	147421
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999622,
			"second_score":	133815
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999622,
			"second_score":	133814
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	634,
			"primary_score":	999622,
			"second_score":	133813
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999622,
			"second_score":	133812
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	637,
			"primary_score":	999622,
			"second_score":	133811
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	640,
			"primary_score":	999622,
			"second_score":	133810
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999623,
			"second_score":	133790
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999623,
			"second_score":	133789
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999623,
			"second_score":	133753
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999623,
			"second_score":	133752
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	649,
			"primary_score":	999623,
			"second_score":	133751
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	685,
			"primary_score":	999622,
			"second_score":	133816
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	780,
			"primary_score":	999928,
			"second_score":	133372
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	781,
			"primary_score":	999928,
			"second_score":	133371
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	783,
			"primary_score":	999928,
			"second_score":	133370
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	785,
			"primary_score":	999928,
			"second_score":	133366
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	795,
			"primary_score":	999928,
			"second_score":	133363
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	796,
			"primary_score":	999928,
			"second_score":	133359
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	797,
			"primary_score":	999928,
			"second_score":	133358
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	798,
			"primary_score":	999928,
			"second_score":	133357
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	799,
			"primary_score":	999928,
			"second_score":	133355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	800,
			"primary_score":	999928,
			"second_score":	133351
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	801,
			"primary_score":	999928,
			"second_score":	133292
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	802,
			"primary_score":	999979,
			"second_score":	133291
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	803,
			"primary_score":	999979,
			"second_score":	133290
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	805,
			"primary_score":	999979,
			"second_score":	133289
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	806,
			"primary_score":	999979,
			"second_score":	133285
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	810,
			"primary_score":	999980,
			"second_score":	133284
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	814,
			"primary_score":	999928,
			"second_score":	133281
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	816,
			"primary_score":	999928,
			"second_score":	133276
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	884,
			"primary_score":	999676,
			"second_score":	133064
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	890,
			"primary_score":	999676,
			"second_score":	133063
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999631,
			"second_score":	138628
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	898,
			"primary_score":	999631,
			"second_score":	138627
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	900,
			"primary_score":	999631,
			"second_score":	138626
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	927,
			"primary_score":	999631,
			"second_score":	138625
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999631,
			"second_score":	138587
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	930,
			"primary_score":	999631,
			"second_score":	138585
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999631,
			"second_score":	138575
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	933,
			"primary_score":	999633,
			"second_score":	138574
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999631,
			"second_score":	138573
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999631,
			"second_score":	138572
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999631,
			"second_score":	138568
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999631,
			"second_score":	138564
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999631,
			"second_score":	138563
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	994,
			"primary_score":	999631,
			"second_score":	138561
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1040,
			"primary_score":	999871,
			"second_score":	138547
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1041,
			"primary_score":	999871,
			"second_score":	138546
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1043,
			"primary_score":	999871,
			"second_score":	138545
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1044,
			"primary_score":	999871,
			"second_score":	138544
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1045,
			"primary_score":	999871,
			"second_score":	138543
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1046,
			"primary_score":	999871,
			"second_score":	138511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1047,
			"primary_score":	999871,
			"second_score":	138509
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1053,
			"primary_score":	999871,
			"second_score":	137953
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1059,
			"primary_score":	999871,
			"second_score":	137952
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1060,
			"primary_score":	999871,
			"second_score":	137951
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1061,
			"primary_score":	999871,
			"second_score":	137949
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1251,
			"primary_score":	999631,
			"second_score":	136361
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1253,
			"primary_score":	999631,
			"second_score":	136360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1256,
			"primary_score":	999631,
			"second_score":	136359
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1286,
			"primary_score":	999676,
			"second_score":	133066
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1287,
			"primary_score":	999676,
			"second_score":	133065
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1310,
			"primary_score":	999676,
			"second_score":	133062
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1311,
			"primary_score":	999676,
			"second_score":	133061
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1312,
			"primary_score":	999676,
			"second_score":	133060
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1320,
			"primary_score":	999676,
			"second_score":	133059
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1321,
			"primary_score":	999676,
			"second_score":	133049
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1322,
			"primary_score":	999676,
			"second_score":	133048
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1327,
			"primary_score":	999676,
			"second_score":	133047
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1332,
			"primary_score":	999696,
			"second_score":	133046
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1333,
			"primary_score":	999696,
			"second_score":	133045
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1353,
			"primary_score":	999981,
			"second_score":	136416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1354,
			"primary_score":	999981,
			"second_score":	136415
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1356,
			"primary_score":	999676,
			"second_score":	133044
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1358,
			"primary_score":	999676,
			"second_score":	133043
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1421,
			"primary_score":	999613,
			"second_score":	132521
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999613,
			"second_score":	132520
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1428,
			"primary_score":	999613,
			"second_score":	132519
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1430,
			"primary_score":	999613,
			"second_score":	132518
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1433,
			"primary_score":	999613,
			"second_score":	132517
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1435,
			"primary_score":	999613,
			"second_score":	132516
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1446,
			"primary_score":	999613,
			"second_score":	132515
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1501,
			"primary_score":	999872,
			"second_score":	143544
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1502,
			"primary_score":	999872,
			"second_score":	143543
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1503,
			"primary_score":	999872,
			"second_score":	143542
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1504,
			"primary_score":	999872,
			"second_score":	143541
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1505,
			"primary_score":	999872,
			"second_score":	143540
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1506,
			"primary_score":	999872,
			"second_score":	143539
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1507,
			"primary_score":	999872,
			"second_score":	143538
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1508,
			"primary_score":	999872,
			"second_score":	143537
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1510,
			"primary_score":	999872,
			"second_score":	143536
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1519,
			"primary_score":	999970,
			"second_score":	143535
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1521,
			"primary_score":	999872,
			"second_score":	143534
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1525,
			"primary_score":	999872,
			"second_score":	143533
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1527,
			"primary_score":	999872,
			"second_score":	143532
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1528,
			"primary_score":	999872,
			"second_score":	143531
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1529,
			"primary_score":	999872,
			"second_score":	143530
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1530,
			"primary_score":	999872,
			"second_score":	143368
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1532,
			"primary_score":	999872,
			"second_score":	143367
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1533,
			"primary_score":	999872,
			"second_score":	143366
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1536,
			"primary_score":	999872,
			"second_score":	143365
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1538,
			"primary_score":	999872,
			"second_score":	143364
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1539,
			"primary_score":	999872,
			"second_score":	143363
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1541,
			"primary_score":	999872,
			"second_score":	143362
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1543,
			"primary_score":	999872,
			"second_score":	143360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1654,
			"primary_score":	999970,
			"second_score":	143359
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1655,
			"primary_score":	999970,
			"second_score":	143349
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1657,
			"primary_score":	999970,
			"second_score":	143348
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1668,
			"primary_score":	999970,
			"second_score":	143347
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1671,
			"primary_score":	999970,
			"second_score":	143248
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1672,
			"primary_score":	999970,
			"second_score":	143247
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1673,
			"primary_score":	999970,
			"second_score":	143246
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1674,
			"primary_score":	999970,
			"second_score":	143205
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1675,
			"primary_score":	999970,
			"second_score":	143000
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1676,
			"primary_score":	999970,
			"second_score":	142867
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1677,
			"primary_score":	999970,
			"second_score":	142866
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1678,
			"primary_score":	999970,
			"second_score":	142795
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1679,
			"primary_score":	999970,
			"second_score":	142792
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1680,
			"primary_score":	999970,
			"second_score":	142791
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1681,
			"primary_score":	999970,
			"second_score":	142739
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1682,
			"primary_score":	999970,
			"second_score":	142601
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1685,
			"primary_score":	999872,
			"second_score":	142594
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1694,
			"primary_score":	999872,
			"second_score":	142593
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1696,
			"primary_score":	999872,
			"second_score":	142592
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1698,
			"primary_score":	999872,
			"second_score":	142591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1699,
			"primary_score":	999872,
			"second_score":	142590
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1700,
			"primary_score":	999872,
			"second_score":	142589
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1702,
			"primary_score":	999872,
			"second_score":	142588
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1704,
			"primary_score":	999872,
			"second_score":	142368
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1706,
			"primary_score":	999872,
			"second_score":	142367
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1708,
			"primary_score":	999872,
			"second_score":	142366
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1709,
			"primary_score":	999872,
			"second_score":	142365
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1711,
			"primary_score":	999872,
			"second_score":	142364
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1715,
			"primary_score":	999872,
			"second_score":	142144
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1763,
			"primary_score":	999872,
			"second_score":	132295
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1764,
			"primary_score":	999872,
			"second_score":	132294
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1766,
			"primary_score":	999872,
			"second_score":	132293
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1767,
			"primary_score":	999872,
			"second_score":	132289
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1769,
			"primary_score":	999872,
			"second_score":	132231
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1770,
			"primary_score":	999872,
			"second_score":	131907
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1772,
			"primary_score":	999872,
			"second_score":	131874
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1777,
			"primary_score":	999970,
			"second_score":	131873
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1778,
			"primary_score":	999970,
			"second_score":	131872
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1779,
			"primary_score":	999970,
			"second_score":	131795
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1780,
			"primary_score":	999970,
			"second_score":	131794
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1785,
			"primary_score":	999872,
			"second_score":	131793
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1786,
			"primary_score":	999872,
			"second_score":	131791
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1790,
			"primary_score":	999872,
			"second_score":	131790
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1791,
			"primary_score":	999872,
			"second_score":	131768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1797,
			"primary_score":	999922,
			"second_score":	141313
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1798,
			"primary_score":	999922,
			"second_score":	141312
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1799,
			"primary_score":	999922,
			"second_score":	141311
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1801,
			"primary_score":	999922,
			"second_score":	141310
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1810,
			"primary_score":	999922,
			"second_score":	141309
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1813,
			"primary_score":	999922,
			"second_score":	141289
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1814,
			"primary_score":	999922,
			"second_score":	141288
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1815,
			"primary_score":	999922,
			"second_score":	141230
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1816,
			"primary_score":	999922,
			"second_score":	141229
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1817,
			"primary_score":	999922,
			"second_score":	141228
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1827,
			"primary_score":	999922,
			"second_score":	141227
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1828,
			"primary_score":	999922,
			"second_score":	141217
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1829,
			"primary_score":	999922,
			"second_score":	141216
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1830,
			"primary_score":	999922,
			"second_score":	141215
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1831,
			"primary_score":	999922,
			"second_score":	141211
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1832,
			"primary_score":	999922,
			"second_score":	141207
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1835,
			"primary_score":	999927,
			"second_score":	141206
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1836,
			"primary_score":	999927,
			"second_score":	141205
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1838,
			"primary_score":	999922,
			"second_score":	141204
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1839,
			"primary_score":	999922,
			"second_score":	141170
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1840,
			"primary_score":	999922,
			"second_score":	141169
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1841,
			"primary_score":	999922,
			"second_score":	141103
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1842,
			"primary_score":	999922,
			"second_score":	141102
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1843,
			"primary_score":	999922,
			"second_score":	141101
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1844,
			"primary_score":	999922,
			"second_score":	141100
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1845,
			"primary_score":	999922,
			"second_score":	141099
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1846,
			"primary_score":	999922,
			"second_score":	141098
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1848,
			"primary_score":	999922,
			"second_score":	141097
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1937,
			"primary_score":	999993,
			"second_score":	145806
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1938,
			"primary_score":	999993,
			"second_score":	145465
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1939,
			"primary_score":	999993,
			"second_score":	145446
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2016,
			"primary_score":	999989,
			"second_score":	145805
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2017,
			"primary_score":	999989,
			"second_score":	145804
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2019,
			"primary_score":	999989,
			"second_score":	145803
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2020,
			"primary_score":	999989,
			"second_score":	145793
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2029,
			"primary_score":	999989,
			"second_score":	145792
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2030,
			"primary_score":	999989,
			"second_score":	145791
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2031,
			"primary_score":	999989,
			"second_score":	145790
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2032,
			"primary_score":	999993,
			"second_score":	145789
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2033,
			"primary_score":	999993,
			"second_score":	145788
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2034,
			"primary_score":	999993,
			"second_score":	145497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2040,
			"primary_score":	999989,
			"second_score":	145495
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2041,
			"primary_score":	999989,
			"second_score":	145469
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999614,
			"second_score":	147701
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2099,
			"primary_score":	999614,
			"second_score":	147700
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2100,
			"primary_score":	999614,
			"second_score":	147699
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2101,
			"primary_score":	999614,
			"second_score":	147698
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2102,
			"primary_score":	999614,
			"second_score":	147697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2104,
			"primary_score":	999614,
			"second_score":	147696
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2105,
			"primary_score":	999614,
			"second_score":	147695
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2147,
			"primary_score":	999614,
			"second_score":	147694
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999617,
			"second_score":	147728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2173,
			"primary_score":	999617,
			"second_score":	147727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2175,
			"primary_score":	999617,
			"second_score":	147726
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2184,
			"primary_score":	999617,
			"second_score":	147725
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2185,
			"primary_score":	999617,
			"second_score":	147723
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2187,
			"primary_score":	999617,
			"second_score":	147713
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2188,
			"primary_score":	999617,
			"second_score":	147712
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2189,
			"primary_score":	999617,
			"second_score":	147711
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2190,
			"primary_score":	999617,
			"second_score":	147710
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2191,
			"primary_score":	999617,
			"second_score":	147709
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2192,
			"primary_score":	999617,
			"second_score":	147708
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2194,
			"primary_score":	999617,
			"second_score":	147707
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2195,
			"primary_score":	999617,
			"second_score":	147702
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2205,
			"primary_score":	999617,
			"second_score":	147693
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2206,
			"primary_score":	999617,
			"second_score":	147692
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2208,
			"primary_score":	999617,
			"second_score":	147420
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2213,
			"primary_score":	999617,
			"second_score":	147419
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2214,
			"primary_score":	999617,
			"second_score":	147417
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2215,
			"primary_score":	999617,
			"second_score":	147416
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2216,
			"primary_score":	999617,
			"second_score":	147411
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2320,
			"primary_score":	999872,
			"second_score":	131902
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2322,
			"primary_score":	999872,
			"second_score":	131901
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2323,
			"primary_score":	999872,
			"second_score":	131897
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2324,
			"primary_score":	999872,
			"second_score":	131896
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2430,
			"primary_score":	999615,
			"second_score":	144350
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2431,
			"primary_score":	999615,
			"second_score":	144349
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2488,
			"primary_score":	999667,
			"second_score":	144503
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2519,
			"primary_score":	999845,
			"second_score":	133078
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2521,
			"primary_score":	999843,
			"second_score":	144495
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2523,
			"primary_score":	999766,
			"second_score":	132994
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2542,
			"primary_score":	999673,
			"second_score":	144444
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2554,
			"primary_score":	999872,
			"second_score":	132279
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2556,
			"primary_score":	999872,
			"second_score":	132278
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2557,
			"primary_score":	999872,
			"second_score":	132277
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2572,
			"primary_score":	999808,
			"second_score":	132270
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2575,
			"primary_score":	999808,
			"second_score":	132269
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2576,
			"primary_score":	999872,
			"second_score":	132268
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2579,
			"primary_score":	999880,
			"second_score":	137941
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2581,
			"primary_score":	999880,
			"second_score":	137931
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2582,
			"primary_score":	999880,
			"second_score":	137930
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2583,
			"primary_score":	999880,
			"second_score":	137927
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2584,
			"primary_score":	999880,
			"second_score":	137926
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2586,
			"primary_score":	999880,
			"second_score":	137925
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2595,
			"primary_score":	999880,
			"second_score":	137924
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2639,
			"primary_score":	999611,
			"second_score":	132250
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2640,
			"primary_score":	999611,
			"second_score":	132249
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3145,
			"primary_score":	999894,
			"second_score":	158201
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3242,
			"primary_score":	999903,
			"second_score":	157991
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	3243,
			"primary_score":	999903,
			"second_score":	157945
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4005,
			"primary_score":	999973,
			"second_score":	131693
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4006,
			"primary_score":	999973,
			"second_score":	131692
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4008,
			"primary_score":	999973,
			"second_score":	131691
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4009,
			"primary_score":	999973,
			"second_score":	131690
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4010,
			"primary_score":	999973,
			"second_score":	131689
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4016,
			"primary_score":	999973,
			"second_score":	131688
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4017,
			"primary_score":	999973,
			"second_score":	131677
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4033,
			"primary_score":	999973,
			"second_score":	131621
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4034,
			"primary_score":	999973,
			"second_score":	131620
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4035,
			"primary_score":	999973,
			"second_score":	131619
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4138,
			"primary_score":	999939,
			"second_score":	161144
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4139,
			"primary_score":	999939,
			"second_score":	161143
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4141,
			"primary_score":	999939,
			"second_score":	161142
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4142,
			"primary_score":	999958,
			"second_score":	161141
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4143,
			"primary_score":	999958,
			"second_score":	161140
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4148,
			"primary_score":	999939,
			"second_score":	161139
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4152,
			"primary_score":	999939,
			"second_score":	161128
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4154,
			"primary_score":	999939,
			"second_score":	161127
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4155,
			"primary_score":	999939,
			"second_score":	161126
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4167,
			"primary_score":	999939,
			"second_score":	161080
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4168,
			"primary_score":	999958,
			"second_score":	161079
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4170,
			"primary_score":	999939,
			"second_score":	161076
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4177,
			"primary_score":	999899,
			"second_score":	158237
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4178,
			"primary_score":	999899,
			"second_score":	158236
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4179,
			"primary_score":	999899,
			"second_score":	158235
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4181,
			"primary_score":	999899,
			"second_score":	158234
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4182,
			"primary_score":	999904,
			"second_score":	158233
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4183,
			"primary_score":	999904,
			"second_score":	158232
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4189,
			"primary_score":	999899,
			"second_score":	158231
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4191,
			"primary_score":	999899,
			"second_score":	158220
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4202,
			"primary_score":	999899,
			"second_score":	158219
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4205,
			"primary_score":	999899,
			"second_score":	158218
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4207,
			"primary_score":	999899,
			"second_score":	158217
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4211,
			"primary_score":	999899,
			"second_score":	158216
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4213,
			"primary_score":	999899,
			"second_score":	150810
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4216,
			"primary_score":	999899,
			"second_score":	150809
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4219,
			"primary_score":	999899,
			"second_score":	150760
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4225,
			"primary_score":	999853,
			"second_score":	131697
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4226,
			"primary_score":	999853,
			"second_score":	131696
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4228,
			"primary_score":	999853,
			"second_score":	131695
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4232,
			"primary_score":	999853,
			"second_score":	131694
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4237,
			"primary_score":	999973,
			"second_score":	131618
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4238,
			"primary_score":	999973,
			"second_score":	131617
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4243,
			"primary_score":	999958,
			"second_score":	161075
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4244,
			"primary_score":	999958,
			"second_score":	161074
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4247,
			"primary_score":	999903,
			"second_score":	158377
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4248,
			"primary_score":	999903,
			"second_score":	158376
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4249,
			"primary_score":	999903,
			"second_score":	158375
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4251,
			"primary_score":	999903,
			"second_score":	158374
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4252,
			"primary_score":	999903,
			"second_score":	158373
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4268,
			"primary_score":	999904,
			"second_score":	158238
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4272,
			"primary_score":	999904,
			"second_score":	150759
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4273,
			"primary_score":	999904,
			"second_score":	150749
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4275,
			"primary_score":	999904,
			"second_score":	150742
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4276,
			"primary_score":	999904,
			"second_score":	150741
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4290,
			"primary_score":	999867,
			"second_score":	131616
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4291,
			"primary_score":	999867,
			"second_score":	131577
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4292,
			"primary_score":	999867,
			"second_score":	131567
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4293,
			"primary_score":	999867,
			"second_score":	131557
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4570,
			"primary_score":	999861,
			"second_score":	159723
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4571,
			"primary_score":	999861,
			"second_score":	159722
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4572,
			"primary_score":	999861,
			"second_score":	159721
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4573,
			"primary_score":	999861,
			"second_score":	159720
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4574,
			"primary_score":	999861,
			"second_score":	159719
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4575,
			"primary_score":	999861,
			"second_score":	159718
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4577,
			"primary_score":	999861,
			"second_score":	159717
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4582,
			"primary_score":	999861,
			"second_score":	159716
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4584,
			"primary_score":	999861,
			"second_score":	159596
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4590,
			"primary_score":	999861,
			"second_score":	159591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4595,
			"primary_score":	999861,
			"second_score":	159590
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4607,
			"primary_score":	999861,
			"second_score":	159589
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4617,
			"primary_score":	999861,
			"second_score":	159588
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4618,
			"primary_score":	999861,
			"second_score":	159490
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4619,
			"primary_score":	999861,
			"second_score":	159489
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4620,
			"primary_score":	999861,
			"second_score":	159413
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4622,
			"primary_score":	999861,
			"second_score":	159412
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4623,
			"primary_score":	999861,
			"second_score":	159308
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4624,
			"primary_score":	999861,
			"second_score":	159306
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4625,
			"primary_score":	999861,
			"second_score":	159305
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4627,
			"primary_score":	999861,
			"second_score":	159304
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4628,
			"primary_score":	999899,
			"second_score":	159303
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4641,
			"primary_score":	999899,
			"second_score":	159302
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4644,
			"primary_score":	999861,
			"second_score":	159301
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4645,
			"primary_score":	999861,
			"second_score":	159291
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4646,
			"primary_score":	999861,
			"second_score":	159290
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4647,
			"primary_score":	999861,
			"second_score":	159167
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4648,
			"primary_score":	999861,
			"second_score":	158962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4650,
			"primary_score":	999861,
			"second_score":	158826
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4652,
			"primary_score":	999861,
			"second_score":	158825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4653,
			"primary_score":	999899,
			"second_score":	158824
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4654,
			"primary_score":	999899,
			"second_score":	158823
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4656,
			"primary_score":	999939,
			"second_score":	163166
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4659,
			"primary_score":	999861,
			"second_score":	158822
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4660,
			"primary_score":	999861,
			"second_score":	158722
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4662,
			"primary_score":	999861,
			"second_score":	158719
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4663,
			"primary_score":	999861,
			"second_score":	158673
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4665,
			"primary_score":	999861,
			"second_score":	158672
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4666,
			"primary_score":	999861,
			"second_score":	158670
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4667,
			"primary_score":	999861,
			"second_score":	158669
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4669,
			"primary_score":	999861,
			"second_score":	158664
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4690,
			"primary_score":	999861,
			"second_score":	158444
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4692,
			"primary_score":	999861,
			"second_score":	158443
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4698,
			"primary_score":	999861,
			"second_score":	158442
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4704,
			"primary_score":	999861,
			"second_score":	158441
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4711,
			"primary_score":	999861,
			"second_score":	158440
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4716,
			"primary_score":	999861,
			"second_score":	158438
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4729,
			"primary_score":	999861,
			"second_score":	158437
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4731,
			"primary_score":	999861,
			"second_score":	158436
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4732,
			"primary_score":	999861,
			"second_score":	158433
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4740,
			"primary_score":	999861,
			"second_score":	158432
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4746,
			"primary_score":	999861,
			"second_score":	158431
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4861,
			"primary_score":	999952,
			"second_score":	162102
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4862,
			"primary_score":	999952,
			"second_score":	162101
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4863,
			"primary_score":	999952,
			"second_score":	162100
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4864,
			"primary_score":	999952,
			"second_score":	162099
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4866,
			"primary_score":	999952,
			"second_score":	162098
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4870,
			"primary_score":	999952,
			"second_score":	162097
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4874,
			"primary_score":	999952,
			"second_score":	162096
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4879,
			"primary_score":	999952,
			"second_score":	162095
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4882,
			"primary_score":	999952,
			"second_score":	162076
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4884,
			"primary_score":	999952,
			"second_score":	162052
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4885,
			"primary_score":	999958,
			"second_score":	162051
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4891,
			"primary_score":	999952,
			"second_score":	162050
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4898,
			"primary_score":	999952,
			"second_score":	162049
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4899,
			"primary_score":	999952,
			"second_score":	161476
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4935,
			"primary_score":	999695,
			"second_score":	134568
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4936,
			"primary_score":	999695,
			"second_score":	134567
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4938,
			"primary_score":	999695,
			"second_score":	134566
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4940,
			"primary_score":	999695,
			"second_score":	134562
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4941,
			"primary_score":	999702,
			"second_score":	134561
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4982,
			"primary_score":	999701,
			"second_score":	134560
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4992,
			"primary_score":	999701,
			"second_score":	134557
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4993,
			"primary_score":	999701,
			"second_score":	134553
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4994,
			"primary_score":	999701,
			"second_score":	134552
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4995,
			"primary_score":	999701,
			"second_score":	134551
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4996,
			"primary_score":	999701,
			"second_score":	134549
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4997,
			"primary_score":	999701,
			"second_score":	134545
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4998,
			"primary_score":	999701,
			"second_score":	134486
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4999,
			"primary_score":	999701,
			"second_score":	134485
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5000,
			"primary_score":	999701,
			"second_score":	134482
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5002,
			"primary_score":	999701,
			"second_score":	134479
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5004,
			"primary_score":	999701,
			"second_score":	134474
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5023,
			"primary_score":	999695,
			"second_score":	134359
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5029,
			"primary_score":	999695,
			"second_score":	134252
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5030,
			"primary_score":	999695,
			"second_score":	134251
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5032,
			"primary_score":	999695,
			"second_score":	134250
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5033,
			"primary_score":	999695,
			"second_score":	134246
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5035,
			"primary_score":	999695,
			"second_score":	134245
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5041,
			"primary_score":	999618,
			"second_score":	147383
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5042,
			"primary_score":	999618,
			"second_score":	147382
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5044,
			"primary_score":	999618,
			"second_score":	147381
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5045,
			"primary_score":	999618,
			"second_score":	147379
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5046,
			"primary_score":	999618,
			"second_score":	147369
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5047,
			"primary_score":	999618,
			"second_score":	147368
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5048,
			"primary_score":	999618,
			"second_score":	147367
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5049,
			"primary_score":	999618,
			"second_score":	147365
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5050,
			"primary_score":	999618,
			"second_score":	147361
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5052,
			"primary_score":	999618,
			"second_score":	147360
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5058,
			"primary_score":	999618,
			"second_score":	146665
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5060,
			"primary_score":	999618,
			"second_score":	146664
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5061,
			"primary_score":	999618,
			"second_score":	146616
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5063,
			"primary_score":	999618,
			"second_score":	146608
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5064,
			"primary_score":	999618,
			"second_score":	146606
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5666,
			"primary_score":	999965,
			"second_score":	136363
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5668,
			"primary_score":	999965,
			"second_score":	136362
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5670,
			"primary_score":	999965,
			"second_score":	136358
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5678,
			"primary_score":	999981,
			"second_score":	136357
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5680,
			"primary_score":	999981,
			"second_score":	136355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5687,
			"primary_score":	999988,
			"second_score":	136354
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5688,
			"primary_score":	999988,
			"second_score":	136353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5766,
			"primary_score":	999880,
			"second_score":	140026
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5767,
			"primary_score":	999880,
			"second_score":	140025
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5768,
			"primary_score":	999880,
			"second_score":	140024
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5769,
			"primary_score":	999880,
			"second_score":	140023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5771,
			"primary_score":	999880,
			"second_score":	140022
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5772,
			"primary_score":	999896,
			"second_score":	140021
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5775,
			"primary_score":	999896,
			"second_score":	140018
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5778,
			"primary_score":	999896,
			"second_score":	140017
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5779,
			"primary_score":	999896,
			"second_score":	140015
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5780,
			"primary_score":	999896,
			"second_score":	139977
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5794,
			"primary_score":	999880,
			"second_score":	139976
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5796,
			"primary_score":	999880,
			"second_score":	139974
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5799,
			"primary_score":	999880,
			"second_score":	139964
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5800,
			"primary_score":	999880,
			"second_score":	139963
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5801,
			"primary_score":	999880,
			"second_score":	139962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5802,
			"primary_score":	999880,
			"second_score":	139960
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5803,
			"primary_score":	999880,
			"second_score":	139956
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5804,
			"primary_score":	999880,
			"second_score":	139955
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5806,
			"primary_score":	999880,
			"second_score":	139954
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5807,
			"primary_score":	999880,
			"second_score":	139951
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5810,
			"primary_score":	999880,
			"second_score":	139950
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5812,
			"primary_score":	999880,
			"second_score":	139949
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5815,
			"primary_score":	999880,
			"second_score":	139841
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5817,
			"primary_score":	999880,
			"second_score":	139839
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5818,
			"primary_score":	999880,
			"second_score":	139829
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5819,
			"primary_score":	999880,
			"second_score":	139828
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5820,
			"primary_score":	999880,
			"second_score":	139827
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5821,
			"primary_score":	999880,
			"second_score":	139825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5822,
			"primary_score":	999880,
			"second_score":	139822
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5823,
			"primary_score":	999880,
			"second_score":	139821
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5825,
			"primary_score":	999880,
			"second_score":	139820
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5826,
			"primary_score":	999880,
			"second_score":	139810
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5827,
			"primary_score":	999880,
			"second_score":	139809
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5828,
			"primary_score":	999880,
			"second_score":	139808
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5829,
			"primary_score":	999880,
			"second_score":	139807
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5835,
			"primary_score":	999880,
			"second_score":	138749
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5836,
			"primary_score":	999880,
			"second_score":	138748
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5837,
			"primary_score":	999880,
			"second_score":	138747
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5839,
			"primary_score":	999880,
			"second_score":	138746
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5840,
			"primary_score":	999880,
			"second_score":	138745
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5841,
			"primary_score":	999943,
			"second_score":	138744
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5844,
			"primary_score":	999943,
			"second_score":	138743
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5845,
			"primary_score":	999943,
			"second_score":	138742
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5846,
			"primary_score":	999943,
			"second_score":	138741
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5849,
			"primary_score":	999943,
			"second_score":	138740
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5852,
			"primary_score":	999880,
			"second_score":	138739
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5856,
			"primary_score":	999880,
			"second_score":	138738
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5865,
			"primary_score":	999885,
			"second_score":	138737
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5866,
			"primary_score":	999885,
			"second_score":	138736
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5867,
			"primary_score":	999885,
			"second_score":	138735
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5870,
			"primary_score":	999885,
			"second_score":	138734
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5871,
			"primary_score":	999885,
			"second_score":	138733
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5883,
			"primary_score":	999885,
			"second_score":	138732
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5884,
			"primary_score":	999885,
			"second_score":	138728
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5887,
			"primary_score":	999880,
			"second_score":	138727
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5889,
			"primary_score":	999880,
			"second_score":	138722
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5894,
			"primary_score":	999885,
			"second_score":	138721
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5895,
			"primary_score":	999885,
			"second_score":	138648
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5898,
			"primary_score":	999880,
			"second_score":	138640
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5899,
			"primary_score":	999943,
			"second_score":	138639
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5901,
			"primary_score":	999943,
			"second_score":	138638
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5902,
			"primary_score":	999943,
			"second_score":	138637
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5903,
			"primary_score":	999943,
			"second_score":	138636
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5904,
			"primary_score":	999943,
			"second_score":	138634
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5906,
			"primary_score":	999943,
			"second_score":	138629
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5907,
			"primary_score":	999943,
			"second_score":	138556
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5910,
			"primary_score":	999880,
			"second_score":	138548
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5911,
			"primary_score":	999880,
			"second_score":	138508
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5917,
			"primary_score":	999880,
			"second_score":	137973
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5918,
			"primary_score":	999880,
			"second_score":	137972
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5920,
			"primary_score":	999880,
			"second_score":	137962
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5921,
			"primary_score":	999880,
			"second_score":	137961
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5922,
			"primary_score":	999880,
			"second_score":	137960
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5923,
			"primary_score":	999880,
			"second_score":	137959
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5925,
			"primary_score":	999880,
			"second_score":	137958
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5926,
			"primary_score":	999880,
			"second_score":	137956
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5928,
			"primary_score":	999880,
			"second_score":	137954
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5930,
			"primary_score":	999880,
			"second_score":	137948
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5931,
			"primary_score":	999880,
			"second_score":	137944
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5932,
			"primary_score":	999880,
			"second_score":	137923
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5934,
			"primary_score":	999880,
			"second_score":	137901
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6095,
			"primary_score":	999611,
			"second_score":	130182
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6096,
			"primary_score":	999611,
			"second_score":	130180
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6098,
			"primary_score":	999611,
			"second_score":	130179
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6100,
			"primary_score":	999611,
			"second_score":	130169
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999611,
			"second_score":	130168
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999611,
			"second_score":	130164
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999611,
			"second_score":	130163
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6104,
			"primary_score":	999611,
			"second_score":	130162
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6106,
			"primary_score":	999611,
			"second_score":	130157
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6112,
			"primary_score":	999611,
			"second_score":	127355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6114,
			"primary_score":	999611,
			"second_score":	127345
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6116,
			"primary_score":	999611,
			"second_score":	127343
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999611,
			"second_score":	127342
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999611,
			"second_score":	127341
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999611,
			"second_score":	127339
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6120,
			"primary_score":	999611,
			"second_score":	127335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6122,
			"primary_score":	999611,
			"second_score":	127334
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6123,
			"primary_score":	999611,
			"second_score":	127329
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6125,
			"primary_score":	999611,
			"second_score":	127327
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999611,
			"second_score":	127317
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999611,
			"second_score":	127316
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6128,
			"primary_score":	999611,
			"second_score":	127315
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6134,
			"primary_score":	999611,
			"second_score":	126925
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6136,
			"primary_score":	999611,
			"second_score":	126915
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999611,
			"second_score":	126914
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999611,
			"second_score":	126910
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6139,
			"primary_score":	999611,
			"second_score":	126812
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6141,
			"primary_score":	999611,
			"second_score":	126811
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6143,
			"primary_score":	999611,
			"second_score":	126809
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6145,
			"primary_score":	999611,
			"second_score":	126804
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6220,
			"primary_score":	999621,
			"second_score":	133791
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6327,
			"primary_score":	999861,
			"second_score":	159341
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6328,
			"primary_score":	999861,
			"second_score":	159340
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6329,
			"primary_score":	999861,
			"second_score":	159339
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6336,
			"primary_score":	999861,
			"second_score":	159335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6337,
			"primary_score":	999861,
			"second_score":	159334
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6338,
			"primary_score":	999861,
			"second_score":	159333
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6339,
			"primary_score":	999861,
			"second_score":	159332
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6340,
			"primary_score":	999861,
			"second_score":	159331
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6341,
			"primary_score":	999861,
			"second_score":	159330
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6342,
			"primary_score":	999861,
			"second_score":	159329
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6343,
			"primary_score":	999861,
			"second_score":	159328
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6344,
			"primary_score":	999861,
			"second_score":	159327
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6345,
			"primary_score":	999861,
			"second_score":	159326
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6346,
			"primary_score":	999861,
			"second_score":	159325
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6347,
			"primary_score":	999861,
			"second_score":	159324
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6348,
			"primary_score":	999861,
			"second_score":	159323
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6349,
			"primary_score":	999861,
			"second_score":	159322
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6350,
			"primary_score":	999861,
			"second_score":	159321
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6351,
			"primary_score":	999861,
			"second_score":	159320
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6352,
			"primary_score":	999861,
			"second_score":	159319
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6353,
			"primary_score":	999861,
			"second_score":	159318
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6354,
			"primary_score":	999861,
			"second_score":	159317
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6355,
			"primary_score":	999861,
			"second_score":	159316
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6356,
			"primary_score":	999861,
			"second_score":	159315
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6357,
			"primary_score":	999861,
			"second_score":	159314
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6358,
			"primary_score":	999861,
			"second_score":	159313
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6359,
			"primary_score":	999861,
			"second_score":	159312
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6360,
			"primary_score":	999861,
			"second_score":	159311
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6361,
			"primary_score":	999861,
			"second_score":	159310
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6362,
			"primary_score":	999861,
			"second_score":	159309
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6372,
			"primary_score":	999614,
			"second_score":	147706
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6375,
			"primary_score":	999614,
			"second_score":	147705
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6378,
			"primary_score":	999614,
			"second_score":	147704
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6382,
			"primary_score":	999614,
			"second_score":	147703
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999611,
			"second_score":	6291
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999611,
			"second_score":	114405
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999611,
			"second_score":	6290
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999611,
			"second_score":	114188
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	171,
			"primary_score":	999611,
			"second_score":	114919
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	174,
			"primary_score":	999611,
			"second_score":	114918
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999611,
			"second_score":	122210
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999611,
			"second_score":	123736
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999611,
			"second_score":	128672
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999611,
			"second_score":	128670
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999611,
			"second_score":	128668
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	77,
			"primary_score":	999856,
			"second_score":	123734
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	78,
			"primary_score":	999856,
			"second_score":	123733
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	81,
			"primary_score":	999856,
			"second_score":	123731
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999611,
			"second_score":	127057
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999611,
			"second_score":	123738
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999611,
			"second_score":	123737
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999611,
			"second_score":	123729
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999637,
			"second_score":	127052
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999637,
			"second_score":	127051
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	276,
			"primary_score":	999928,
			"second_score":	127050
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	277,
			"primary_score":	999928,
			"second_score":	127048
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	278,
			"primary_score":	999928,
			"second_score":	127047
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999651,
			"second_score":	128660
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	280,
			"primary_score":	999651,
			"second_score":	128649
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	281,
			"primary_score":	999651,
			"second_score":	128647
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999637,
			"second_score":	127046
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999644,
			"second_score":	126352
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999644,
			"second_score":	126351
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999644,
			"second_score":	126350
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	399,
			"primary_score":	999971,
			"second_score":	126251
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	401,
			"primary_score":	999971,
			"second_score":	126250
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	404,
			"primary_score":	999972,
			"second_score":	126249
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	409,
			"primary_score":	999982,
			"second_score":	126563
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	411,
			"primary_score":	999982,
			"second_score":	126562
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	414,
			"primary_score":	999982,
			"second_score":	126561
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999637,
			"second_score":	127055
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999637,
			"second_score":	127054
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999637,
			"second_score":	127053
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999611,
			"second_score":	123553
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999611,
			"second_score":	123552
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999611,
			"second_score":	123551
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999611,
			"second_score":	123550
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999611,
			"second_score":	123549
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999611,
			"second_score":	123548
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999611,
			"second_score":	123547
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999611,
			"second_score":	123546
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	799,
			"primary_score":	999886,
			"second_score":	127041
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	800,
			"primary_score":	999886,
			"second_score":	127040
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	802,
			"primary_score":	999886,
			"second_score":	127039
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	808,
			"primary_score":	999886,
			"second_score":	127038
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	811,
			"primary_score":	999886,
			"second_score":	127035
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	812,
			"primary_score":	999886,
			"second_score":	127033
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	813,
			"primary_score":	999886,
			"second_score":	127031
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	814,
			"primary_score":	999886,
			"second_score":	126971
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	815,
			"primary_score":	999886,
			"second_score":	126963
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	816,
			"primary_score":	999886,
			"second_score":	126962
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	868,
			"primary_score":	999647,
			"second_score":	127090
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	869,
			"primary_score":	999647,
			"second_score":	127089
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	871,
			"primary_score":	999647,
			"second_score":	127088
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	877,
			"primary_score":	999647,
			"second_score":	127087
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	878,
			"primary_score":	999647,
			"second_score":	127085
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	896,
			"primary_score":	999649,
			"second_score":	127083
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	897,
			"primary_score":	999649,
			"second_score":	127081
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	898,
			"primary_score":	999649,
			"second_score":	127079
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	905,
			"primary_score":	999649,
			"second_score":	127077
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	906,
			"primary_score":	999649,
			"second_score":	127076
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	907,
			"primary_score":	999649,
			"second_score":	127074
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	908,
			"primary_score":	999649,
			"second_score":	127072
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1228,
			"primary_score":	999974,
			"second_score":	126247
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1229,
			"primary_score":	999974,
			"second_score":	126246
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1231,
			"primary_score":	999974,
			"second_score":	126245
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1293,
			"primary_score":	999987,
			"second_score":	126244
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1295,
			"primary_score":	999987,
			"second_score":	126243
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1300,
			"primary_score":	999987,
			"second_score":	126242
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1302,
			"primary_score":	999987,
			"second_score":	123760
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1303,
			"primary_score":	999987,
			"second_score":	123759
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1304,
			"primary_score":	999987,
			"second_score":	123755
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1309,
			"primary_score":	999987,
			"second_score":	123753
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	1313,
			"primary_score":	999987,
			"second_score":	123752
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999611,
			"second_score":	122266
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999611,
			"second_score":	122709
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999611,
			"second_score":	122708
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999611,
			"second_score":	122707
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999611,
			"second_score":	122705
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999611,
			"second_score":	122702
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999611,
			"second_score":	123402
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999611,
			"second_score":	123401
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999611,
			"second_score":	123399
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999611,
			"second_score":	123397
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999611,
			"second_score":	121017
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999611,
			"second_score":	121016
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999611,
			"second_score":	121015
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999611,
			"second_score":	121014
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999611,
			"second_score":	116871
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999611,
			"second_score":	116870
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999611,
			"second_score":	116869
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999611,
			"second_score":	116868
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999611,
			"second_score":	116823
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999611,
			"second_score":	123491
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	228,
			"primary_score":	999828,
			"second_score":	128016
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999611,
			"second_score":	133579
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999611,
			"second_score":	133578
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999611,
			"second_score":	133577
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999611,
			"second_score":	133576
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999611,
			"second_score":	133574
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999611,
			"second_score":	133573
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999611,
			"second_score":	133572
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999611,
			"second_score":	122246
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999611,
			"second_score":	122245
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999611,
			"second_score":	122219
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999611,
			"second_score":	122218
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999611,
			"second_score":	122217
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999611,
			"second_score":	123644
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999611,
			"second_score":	123643
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999611,
			"second_score":	123642
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999611,
			"second_score":	122296
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999611,
			"second_score":	122295
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999611,
			"second_score":	122294
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999611,
			"second_score":	122269
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999611,
			"second_score":	122268
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999611,
			"second_score":	122267
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999611,
			"second_score":	122247
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	346,
			"primary_score":	999933,
			"second_score":	128176
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	347,
			"primary_score":	999933,
			"second_score":	128175
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	349,
			"primary_score":	999933,
			"second_score":	128174
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	352,
			"primary_score":	999934,
			"second_score":	128173
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999611,
			"second_score":	123654
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999611,
			"second_score":	123653
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999611,
			"second_score":	123648
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999611,
			"second_score":	123647
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999611,
			"second_score":	123646
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999611,
			"second_score":	116517
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999611,
			"second_score":	114984
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999611,
			"second_score":	121309
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	204,
			"primary_score":	999669,
			"second_score":	121644
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999611,
			"second_score":	121308
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999611,
			"second_score":	121889
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999611,
			"second_score":	121883
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999611,
			"second_score":	121882
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999611,
			"second_score":	121363
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999611,
			"second_score":	121360
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999611,
			"second_score":	121298
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999611,
			"second_score":	121291
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999611,
			"second_score":	120440
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999611,
			"second_score":	120434
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999611,
			"second_score":	120431
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999611,
			"second_score":	116985
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999611,
			"second_score":	116983
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999611,
			"second_score":	116977
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999611,
			"second_score":	116976
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999611,
			"second_score":	116975
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999611,
			"second_score":	116974
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999611,
			"second_score":	116970
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999611,
			"second_score":	116965
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999611,
			"second_score":	116956
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999611,
			"second_score":	116947
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999611,
			"second_score":	116945
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999611,
			"second_score":	116939
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999611,
			"second_score":	116938
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999611,
			"second_score":	116912
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999611,
			"second_score":	116875
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999611,
			"second_score":	116872
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999611,
			"second_score":	116822
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999611,
			"second_score":	116815
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999611,
			"second_score":	116814
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999611,
			"second_score":	116509
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999611,
			"second_score":	114976
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	307,
			"primary_score":	999993,
			"second_score":	114975
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	308,
			"primary_score":	999993,
			"second_score":	114948
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	309,
			"primary_score":	999993,
			"second_score":	114929
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999611,
			"second_score":	114928
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999611,
			"second_score":	114926
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999611,
			"second_score":	114920
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999611,
			"second_score":	114180
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999611,
			"second_score":	114178
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999611,
			"second_score":	114172
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999611,
			"second_score":	114103
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999611,
			"second_score":	114082
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999611,
			"second_score":	114078
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999611,
			"second_score":	114076
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999611,
			"second_score":	114074
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999611,
			"second_score":	114006
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999611,
			"second_score":	114005
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999611,
			"second_score":	114003
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999611,
			"second_score":	113998
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999611,
			"second_score":	125149
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999611,
			"second_score":	125148
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999611,
			"second_score":	125146
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999611,
			"second_score":	125145
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999611,
			"second_score":	125144
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	421,
			"primary_score":	999611,
			"second_score":	125151
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999611,
			"second_score":	115215
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999611,
			"second_score":	115213
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999611,
			"second_score":	115211
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999611,
			"second_score":	115210
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999611,
			"second_score":	117094
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999611,
			"second_score":	115207
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999611,
			"second_score":	115181
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999611,
			"second_score":	115881
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999611,
			"second_score":	115880
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999611,
			"second_score":	115878
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999611,
			"second_score":	115876
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999611,
			"second_score":	15292
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999611,
			"second_score":	15290
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999611,
			"second_score":	15288
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999611,
			"second_score":	15286
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999611,
			"second_score":	17651
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999611,
			"second_score":	17649
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	494,
			"primary_score":	999711,
			"second_score":	130027
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	495,
			"primary_score":	999711,
			"second_score":	130026
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	496,
			"primary_score":	999711,
			"second_score":	130025
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	497,
			"primary_score":	999711,
			"second_score":	130024
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	499,
			"primary_score":	999711,
			"second_score":	130023
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	501,
			"primary_score":	999711,
			"second_score":	130022
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	582,
			"primary_score":	999711,
			"second_score":	130021
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	683,
			"primary_score":	999711,
			"second_score":	130020
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	701,
			"primary_score":	999711,
			"second_score":	130028
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	753,
			"primary_score":	999827,
			"second_score":	128050
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	754,
			"primary_score":	999827,
			"second_score":	128049
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	755,
			"primary_score":	999827,
			"second_score":	128048
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	756,
			"primary_score":	999827,
			"second_score":	128047
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	757,
			"primary_score":	999827,
			"second_score":	128046
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	758,
			"primary_score":	999827,
			"second_score":	128045
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	759,
			"primary_score":	999827,
			"second_score":	128044
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	760,
			"primary_score":	999827,
			"second_score":	128043
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	761,
			"primary_score":	999827,
			"second_score":	128042
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	762,
			"primary_score":	999827,
			"second_score":	128041
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	763,
			"primary_score":	999827,
			"second_score":	128040
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	765,
			"primary_score":	999827,
			"second_score":	128039
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	767,
			"primary_score":	999827,
			"second_score":	128038
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	771,
			"primary_score":	999827,
			"second_score":	128037
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	775,
			"primary_score":	999827,
			"second_score":	128036
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	784,
			"primary_score":	999827,
			"second_score":	128035
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	785,
			"primary_score":	999827,
			"second_score":	128034
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	786,
			"primary_score":	999827,
			"second_score":	128033
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	787,
			"primary_score":	999827,
			"second_score":	128032
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	788,
			"primary_score":	999827,
			"second_score":	128031
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	797,
			"primary_score":	999827,
			"second_score":	128030
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	826,
			"primary_score":	999828,
			"second_score":	128029
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	827,
			"primary_score":	999828,
			"second_score":	128028
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	828,
			"primary_score":	999828,
			"second_score":	128027
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	829,
			"primary_score":	999828,
			"second_score":	128026
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	830,
			"primary_score":	999828,
			"second_score":	128025
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	831,
			"primary_score":	999828,
			"second_score":	128024
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	836,
			"primary_score":	999828,
			"second_score":	128023
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	848,
			"primary_score":	999828,
			"second_score":	128022
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	850,
			"primary_score":	999828,
			"second_score":	128020
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	901,
			"primary_score":	999828,
			"second_score":	128019
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	902,
			"primary_score":	999828,
			"second_score":	128017
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	904,
			"primary_score":	999828,
			"second_score":	128015
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	905,
			"primary_score":	999828,
			"second_score":	128014
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	907,
			"primary_score":	999828,
			"second_score":	128013
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	909,
			"primary_score":	999828,
			"second_score":	128012
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	910,
			"primary_score":	999828,
			"second_score":	128011
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	911,
			"primary_score":	999844,
			"second_score":	128010
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	916,
			"primary_score":	999828,
			"second_score":	128009
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	917,
			"primary_score":	999846,
			"second_score":	128008
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	920,
			"primary_score":	999846,
			"second_score":	128007
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	922,
			"primary_score":	999846,
			"second_score":	128006
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	923,
			"primary_score":	999850,
			"second_score":	128004
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	938,
			"primary_score":	999828,
			"second_score":	128002
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	939,
			"primary_score":	999828,
			"second_score":	128001
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	941,
			"primary_score":	999828,
			"second_score":	128000
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	971,
			"primary_score":	999861,
			"second_score":	127999
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	972,
			"primary_score":	999861,
			"second_score":	127998
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	973,
			"primary_score":	999861,
			"second_score":	127997
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	974,
			"primary_score":	999861,
			"second_score":	127970
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	975,
			"primary_score":	999878,
			"second_score":	127969
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	977,
			"primary_score":	999861,
			"second_score":	127968
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	984,
			"primary_score":	999862,
			"second_score":	127590
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	989,
			"primary_score":	999862,
			"second_score":	127589
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1013,
			"primary_score":	999829,
			"second_score":	127588
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1015,
			"primary_score":	999829,
			"second_score":	127581
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1016,
			"primary_score":	999846,
			"second_score":	127580
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1018,
			"primary_score":	999829,
			"second_score":	127558
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1019,
			"primary_score":	999829,
			"second_score":	127557
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1020,
			"primary_score":	999829,
			"second_score":	127556
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1021,
			"primary_score":	999829,
			"second_score":	127555
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1023,
			"primary_score":	999829,
			"second_score":	127554
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1026,
			"primary_score":	999829,
			"second_score":	127553
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1032,
			"primary_score":	999613,
			"second_score":	130184
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1033,
			"primary_score":	999613,
			"second_score":	130183
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1034,
			"primary_score":	999613,
			"second_score":	130182
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1035,
			"primary_score":	999613,
			"second_score":	130181
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1036,
			"primary_score":	999613,
			"second_score":	130180
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1037,
			"primary_score":	999613,
			"second_score":	130179
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1038,
			"primary_score":	999613,
			"second_score":	130178
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1039,
			"primary_score":	999613,
			"second_score":	130177
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1040,
			"primary_score":	999613,
			"second_score":	130176
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1041,
			"primary_score":	999613,
			"second_score":	130175
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1042,
			"primary_score":	999613,
			"second_score":	130174
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1043,
			"primary_score":	999613,
			"second_score":	130173
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1045,
			"primary_score":	999613,
			"second_score":	130172
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1046,
			"primary_score":	999615,
			"second_score":	130171
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1047,
			"primary_score":	999615,
			"second_score":	130170
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1048,
			"primary_score":	999615,
			"second_score":	130169
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1050,
			"primary_score":	999818,
			"second_score":	158358
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1054,
			"primary_score":	999819,
			"second_score":	158357
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1055,
			"primary_score":	999819,
			"second_score":	158356
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1056,
			"primary_score":	999819,
			"second_score":	158272
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1058,
			"primary_score":	999819,
			"second_score":	158271
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1063,
			"primary_score":	999819,
			"second_score":	158270
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1066,
			"primary_score":	999613,
			"second_score":	130168
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1067,
			"primary_score":	999616,
			"second_score":	130157
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1068,
			"primary_score":	999822,
			"second_score":	158241
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1070,
			"primary_score":	999616,
			"second_score":	130156
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1149,
			"primary_score":	999883,
			"second_score":	158372
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999611,
			"second_score":	122091
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999611,
			"second_score":	122090
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999611,
			"second_score":	122089
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999611,
			"second_score":	122088
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999611,
			"second_score":	122087
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999611,
			"second_score":	122086
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999611,
			"second_score":	122085
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999611,
			"second_score":	122084
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999611,
			"second_score":	122083
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999611,
			"second_score":	122082
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999611,
			"second_score":	122081
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999611,
			"second_score":	122080
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999611,
			"second_score":	119593
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999611,
			"second_score":	119592
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999611,
			"second_score":	119591
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999611,
			"second_score":	119590
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999611,
			"second_score":	119589
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999611,
			"second_score":	119588
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999611,
			"second_score":	119587
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999611,
			"second_score":	119586
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999611,
			"second_score":	119585
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999611,
			"second_score":	119584
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999611,
			"second_score":	119583
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999611,
			"second_score":	119582
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999611,
			"second_score":	119214
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999611,
			"second_score":	119213
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999611,
			"second_score":	119212
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999611,
			"second_score":	119211
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999611,
			"second_score":	119180
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999611,
			"second_score":	119179
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999611,
			"second_score":	119178
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999611,
			"second_score":	119177
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999611,
			"second_score":	119088
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999611,
			"second_score":	119069
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999611,
			"second_score":	119068
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999611,
			"second_score":	119067
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999611,
			"second_score":	119066
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999611,
			"second_score":	122093
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999611,
			"second_score":	122092
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999611,
			"second_score":	119065
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999611,
			"second_score":	119064
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999611,
			"second_score":	122094
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999611,
			"second_score":	103797
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1583,
			"primary_score":	999615,
			"second_score":	130187
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1584,
			"primary_score":	999615,
			"second_score":	130186
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1586,
			"primary_score":	999615,
			"second_score":	130185
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1600,
			"primary_score":	999617,
			"second_score":	130155
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1732,
			"primary_score":	999993,
			"second_score":	124770
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1733,
			"primary_score":	999993,
			"second_score":	124769
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1735,
			"primary_score":	999993,
			"second_score":	124768
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1738,
			"primary_score":	999993,
			"second_score":	124767
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1739,
			"primary_score":	999993,
			"second_score":	124766
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1742,
			"primary_score":	999993,
			"second_score":	124765
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1747,
			"primary_score":	999993,
			"second_score":	124764
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1748,
			"primary_score":	999993,
			"second_score":	124763
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1752,
			"primary_score":	999993,
			"second_score":	124762
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1753,
			"primary_score":	999993,
			"second_score":	124740
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1756,
			"primary_score":	999993,
			"second_score":	124722
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1758,
			"primary_score":	999993,
			"second_score":	124721
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1764,
			"primary_score":	999993,
			"second_score":	124720
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1765,
			"primary_score":	999994,
			"second_score":	124162
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1766,
			"primary_score":	999994,
			"second_score":	124161
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999611,
			"second_score":	14748
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999611,
			"second_score":	14745
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999611,
			"second_score":	114002
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999611,
			"second_score":	114001
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999611,
			"second_score":	113999
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999611,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999611,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999611,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999611,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999611,
			"second_score":	117887
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999611,
			"second_score":	117886
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	143,
			"primary_score":	999620,
			"second_score":	121762
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	144,
			"primary_score":	999620,
			"second_score":	121754
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999611,
			"second_score":	117885
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999611,
			"second_score":	117884
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999611,
			"second_score":	120487
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999611,
			"second_score":	120486
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999611,
			"second_score":	120485
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999611,
			"second_score":	120484
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999611,
			"second_score":	120552
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999611,
			"second_score":	120483
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999611,
			"second_score":	120482
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999611,
			"second_score":	120481
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999611,
			"second_score":	120480
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999611,
			"second_score":	120479
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999611,
			"second_score":	120478
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999611,
			"second_score":	120477
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999611,
			"second_score":	120476
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999611,
			"second_score":	120475
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999611,
			"second_score":	120474
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999611,
			"second_score":	120473
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999611,
			"second_score":	120472
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999611,
			"second_score":	120471
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	195,
			"primary_score":	999620,
			"second_score":	121759
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	197,
			"primary_score":	999620,
			"second_score":	121758
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	202,
			"primary_score":	999620,
			"second_score":	121757
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	204,
			"primary_score":	999620,
			"second_score":	121756
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	205,
			"primary_score":	999620,
			"second_score":	121755
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	206,
			"primary_score":	999620,
			"second_score":	127482
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	207,
			"primary_score":	999620,
			"second_score":	127481
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	208,
			"primary_score":	999620,
			"second_score":	127480
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	210,
			"primary_score":	999620,
			"second_score":	127479
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	212,
			"primary_score":	999620,
			"second_score":	127478
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	213,
			"primary_score":	999620,
			"second_score":	127477
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	214,
			"primary_score":	999620,
			"second_score":	127476
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	232,
			"primary_score":	999620,
			"second_score":	127475
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	233,
			"primary_score":	999620,
			"second_score":	127474
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	234,
			"primary_score":	999620,
			"second_score":	127473
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	235,
			"primary_score":	999620,
			"second_score":	127472
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	237,
			"primary_score":	999620,
			"second_score":	127471
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	239,
			"primary_score":	999620,
			"second_score":	127470
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	240,
			"primary_score":	999620,
			"second_score":	127469
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	242,
			"primary_score":	999620,
			"second_score":	127468
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	243,
			"primary_score":	999620,
			"second_score":	127467
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	244,
			"primary_score":	999620,
			"second_score":	127466
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999611,
			"second_score":	117093
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999611,
			"second_score":	117092
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999611,
			"second_score":	117091
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999611,
			"second_score":	117090
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999611,
			"second_score":	117084
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999611,
			"second_score":	113727
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999611,
			"second_score":	113726
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999611,
			"second_score":	113725
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999611,
			"second_score":	115875
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999611,
			"second_score":	117888
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999611,
			"second_score":	117089
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999611,
			"second_score":	117088
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999611,
			"second_score":	117087
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999611,
			"second_score":	117086
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999611,
			"second_score":	117085
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	103,
			"primary_score":	999852,
			"second_score":	142999
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999611,
			"second_score":	127204
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999611,
			"second_score":	127203
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999611,
			"second_score":	127085
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999611,
			"second_score":	127066
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999611,
			"second_score":	47507
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999611,
			"second_score":	47506
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	479,
			"primary_score":	999611,
			"second_score":	47505
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	481,
			"primary_score":	999611,
			"second_score":	47504
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999611,
			"second_score":	47503
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	484,
			"primary_score":	999611,
			"second_score":	47487
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999611,
			"second_score":	47486
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	487,
			"primary_score":	999611,
			"second_score":	47485
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	488,
			"primary_score":	999611,
			"second_score":	47484
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999611,
			"second_score":	47483
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	493,
			"primary_score":	999611,
			"second_score":	47481
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999611,
			"second_score":	47480
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999611,
			"second_score":	47531
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	498,
			"primary_score":	999611,
			"second_score":	47479
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999611,
			"second_score":	51858
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	501,
			"primary_score":	999611,
			"second_score":	47478
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999611,
			"second_score":	50445
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	505,
			"primary_score":	999611,
			"second_score":	47477
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999611,
			"second_score":	47476
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999611,
			"second_score":	47475
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	510,
			"primary_score":	999611,
			"second_score":	62277
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	512,
			"primary_score":	999611,
			"second_score":	47474
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	513,
			"primary_score":	999611,
			"second_score":	47473
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	515,
			"primary_score":	999611,
			"second_score":	47472
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	516,
			"primary_score":	999611,
			"second_score":	47471
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999611,
			"second_score":	47467
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	519,
			"primary_score":	999611,
			"second_score":	47466
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	521,
			"primary_score":	999611,
			"second_score":	47465
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999611,
			"second_score":	47464
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	523,
			"primary_score":	999611,
			"second_score":	47462
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999611,
			"second_score":	47461
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999611,
			"second_score":	47536
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999611,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999611,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999611,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999611,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999611,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999611,
			"second_score":	3122
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999611,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999611,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999611,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999611,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999611,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999611,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999611,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999611,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999611,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	562,
			"primary_score":	999946,
			"second_score":	122635
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	564,
			"primary_score":	999946,
			"second_score":	122634
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	566,
			"primary_score":	999946,
			"second_score":	122633
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	568,
			"primary_score":	999946,
			"second_score":	122632
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	569,
			"primary_score":	999946,
			"second_score":	122631
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	570,
			"primary_score":	999981,
			"second_score":	122392
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	571,
			"primary_score":	999981,
			"second_score":	122391
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	572,
			"primary_score":	999981,
			"second_score":	122390
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	573,
			"primary_score":	999982,
			"second_score":	122389
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	575,
			"primary_score":	999981,
			"second_score":	122335
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	578,
			"primary_score":	999981,
			"second_score":	122334
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	580,
			"primary_score":	999946,
			"second_score":	122315
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	581,
			"primary_score":	999981,
			"second_score":	122314
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	583,
			"primary_score":	999946,
			"second_score":	122313
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	584,
			"primary_score":	999946,
			"second_score":	122312
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	585,
			"primary_score":	999946,
			"second_score":	122311
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	586,
			"primary_score":	999946,
			"second_score":	122310
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	587,
			"primary_score":	999946,
			"second_score":	122309
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	589,
			"primary_score":	999946,
			"second_score":	122308
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999611,
			"second_score":	3611
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999611,
			"second_score":	3610
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999611,
			"second_score":	3608
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999611,
			"second_score":	3924
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999611,
			"second_score":	3607
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999611,
			"second_score":	3606
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999611,
			"second_score":	3605
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999611,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999611,
			"second_score":	53052
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999611,
			"second_score":	3603
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999611,
			"second_score":	52994
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999611,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999611,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999611,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999611,
			"second_score":	50408
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999611,
			"second_score":	3599
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999611,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999611,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999611,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999611,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999611,
			"second_score":	50401
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999611,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999611,
			"second_score":	3592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999611,
			"second_score":	3591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999611,
			"second_score":	3590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999611,
			"second_score":	3589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999611,
			"second_score":	103766
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999611,
			"second_score":	103765
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999611,
			"second_score":	103764
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999611,
			"second_score":	103763
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999611,
			"second_score":	50420
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999611,
			"second_score":	47452
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999611,
			"second_score":	47451
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999611,
			"second_score":	47450
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999611,
			"second_score":	47449
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999611,
			"second_score":	121196
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999611,
			"second_score":	121195
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999611,
			"second_score":	121194
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999611,
			"second_score":	121192
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999611,
			"second_score":	121191
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999611,
			"second_score":	121190
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999611,
			"second_score":	6024
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999611,
			"second_score":	6023
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999611,
			"second_score":	6022
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999611,
			"second_score":	6020
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999611,
			"second_score":	6019
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999611,
			"second_score":	3575
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999611,
			"second_score":	3572
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999611,
			"second_score":	3612
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999611,
			"second_score":	3571
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999611,
			"second_score":	3570
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999611,
			"second_score":	3569
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999611,
			"second_score":	114917
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999611,
			"second_score":	114916
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999611,
			"second_score":	121356
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999611,
			"second_score":	114913
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999611,
			"second_score":	114912
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999611,
			"second_score":	114189
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999611,
			"second_score":	114187
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999611,
			"second_score":	114186
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999611,
			"second_score":	114185
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999611,
			"second_score":	114426
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999611,
			"second_score":	114184
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999611,
			"second_score":	114183
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999611,
			"second_score":	121302
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999611,
			"second_score":	97873
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999611,
			"second_score":	97872
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999611,
			"second_score":	97871
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999611,
			"second_score":	97870
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999611,
			"second_score":	97869
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999611,
			"second_score":	97855
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999611,
			"second_score":	97854
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999611,
			"second_score":	97853
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999611,
			"second_score":	97850
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999611,
			"second_score":	97849
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999611,
			"second_score":	97848
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999611,
			"second_score":	97851
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	948,
			"primary_score":	999611,
			"second_score":	64835
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	949,
			"primary_score":	999611,
			"second_score":	64834
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	950,
			"primary_score":	999611,
			"second_score":	64833
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	952,
			"primary_score":	999611,
			"second_score":	64832
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	954,
			"primary_score":	999611,
			"second_score":	64831
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	955,
			"primary_score":	999611,
			"second_score":	64822
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	957,
			"primary_score":	999611,
			"second_score":	64821
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	958,
			"primary_score":	999611,
			"second_score":	64820
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	959,
			"primary_score":	999611,
			"second_score":	64819
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	961,
			"primary_score":	999611,
			"second_score":	64818
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999611,
			"second_score":	114361
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999611,
			"second_score":	114360
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999611,
			"second_score":	114359
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999611,
			"second_score":	114358
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999611,
			"second_score":	114357
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999611,
			"second_score":	114356
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999611,
			"second_score":	114355
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999611,
			"second_score":	114354
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999611,
			"second_score":	114353
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999611,
			"second_score":	121300
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999611,
			"second_score":	121299
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1132,
			"primary_score":	999886,
			"second_score":	126372
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1134,
			"primary_score":	999886,
			"second_score":	126371
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1136,
			"primary_score":	999886,
			"second_score":	126370
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1138,
			"primary_score":	999886,
			"second_score":	126369
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1139,
			"primary_score":	999889,
			"second_score":	127176
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1140,
			"primary_score":	999944,
			"second_score":	127175
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1141,
			"primary_score":	999975,
			"second_score":	127174
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1143,
			"primary_score":	999960,
			"second_score":	127303
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1145,
			"primary_score":	999944,
			"second_score":	127146
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1146,
			"primary_score":	999944,
			"second_score":	127145
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1148,
			"primary_score":	999944,
			"second_score":	127144
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1154,
			"primary_score":	999970,
			"second_score":	126368
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1160,
			"primary_score":	999876,
			"second_score":	126857
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1162,
			"primary_score":	999876,
			"second_score":	126856
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1164,
			"primary_score":	999876,
			"second_score":	126855
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1166,
			"primary_score":	999876,
			"second_score":	126854
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1167,
			"primary_score":	999878,
			"second_score":	127265
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1168,
			"primary_score":	999958,
			"second_score":	127264
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1173,
			"primary_score":	999918,
			"second_score":	126853
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999611,
			"second_score":	47502
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999611,
			"second_score":	47501
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999611,
			"second_score":	47500
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999611,
			"second_score":	47499
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999611,
			"second_score":	47498
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999611,
			"second_score":	47497
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999611,
			"second_score":	47496
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999611,
			"second_score":	47495
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999611,
			"second_score":	47494
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999611,
			"second_score":	47493
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999611,
			"second_score":	47492
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999611,
			"second_score":	48951
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999611,
			"second_score":	47706
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999611,
			"second_score":	47705
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999611,
			"second_score":	47704
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999611,
			"second_score":	47491
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999611,
			"second_score":	47490
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999611,
			"second_score":	47488
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	357,
			"primary_score":	999987,
			"second_score":	126484
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	358,
			"primary_score":	999987,
			"second_score":	126478
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	364,
			"primary_score":	999973,
			"second_score":	126216
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	365,
			"primary_score":	999973,
			"second_score":	126210
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999611,
			"second_score":	3574
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999611,
			"second_score":	3614
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999611,
			"second_score":	3573
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999611,
			"second_score":	3243
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999611,
			"second_score":	3216
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999611,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999611,
			"second_score":	113717
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999611,
			"second_score":	113716
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999611,
			"second_score":	6025
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999611,
			"second_score":	97876
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999611,
			"second_score":	97875
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999611,
			"second_score":	97874
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999611,
			"second_score":	97847
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999611,
			"second_score":	97846
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999611,
			"second_score":	97845
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	36,
			"primary_score":	999851,
			"second_score":	128113
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	37,
			"primary_score":	999851,
			"second_score":	128112
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	38,
			"primary_score":	999851,
			"second_score":	128111
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	39,
			"primary_score":	999851,
			"second_score":	128110
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	40,
			"primary_score":	999851,
			"second_score":	128109
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	42,
			"primary_score":	999851,
			"second_score":	128108
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	44,
			"primary_score":	999851,
			"second_score":	128107
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	45,
			"primary_score":	999851,
			"second_score":	128106
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	47,
			"primary_score":	999851,
			"second_score":	128105
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	49,
			"primary_score":	999851,
			"second_score":	128104
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	50,
			"primary_score":	999851,
			"second_score":	128103
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	51,
			"primary_score":	999851,
			"second_score":	128102
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	52,
			"primary_score":	999851,
			"second_score":	128101
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	53,
			"primary_score":	999851,
			"second_score":	128100
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	54,
			"primary_score":	999851,
			"second_score":	128099
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	55,
			"primary_score":	999851,
			"second_score":	128098
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	57,
			"primary_score":	999851,
			"second_score":	128097
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	64,
			"primary_score":	999858,
			"second_score":	128096
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	66,
			"primary_score":	999858,
			"second_score":	128095
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	67,
			"primary_score":	999858,
			"second_score":	128094
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	70,
			"primary_score":	999858,
			"second_score":	128093
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	71,
			"primary_score":	999861,
			"second_score":	128092
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	75,
			"primary_score":	999858,
			"second_score":	128091
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	76,
			"primary_score":	999893,
			"second_score":	128090
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	80,
			"primary_score":	999893,
			"second_score":	128062
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	81,
			"primary_score":	999926,
			"second_score":	128061
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	86,
			"primary_score":	999858,
			"second_score":	128060
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	87,
			"primary_score":	999858,
			"second_score":	128059
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	88,
			"primary_score":	999863,
			"second_score":	128058
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	96,
			"primary_score":	999858,
			"second_score":	128052
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	97,
			"primary_score":	999858,
			"second_score":	128051
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	99,
			"primary_score":	999851,
			"second_score":	127552
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	108,
			"primary_score":	999851,
			"second_score":	127551
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	114,
			"primary_score":	999863,
			"second_score":	127550
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	123,
			"primary_score":	999990,
			"second_score":	128115
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	125,
			"primary_score":	999990,
			"second_score":	128114
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	133,
			"primary_score":	999874,
			"second_score":	126804
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	135,
			"primary_score":	999874,
			"second_score":	126803
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	298,
			"primary_score":	999990,
			"second_score":	128116
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	299,
			"primary_score":	999990,
			"second_score":	127549
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	301,
			"primary_score":	999990,
			"second_score":	127548
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	303,
			"primary_score":	999990,
			"second_score":	127542
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	313,
			"primary_score":	999991,
			"second_score":	127541
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	314,
			"primary_score":	999991,
			"second_score":	127505
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	315,
			"primary_score":	999991,
			"second_score":	127464
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	62,
			"primary_score":	999912,
			"second_score":	126808
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	63,
			"primary_score":	999912,
			"second_score":	126807
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	68,
			"primary_score":	999911,
			"second_score":	127461
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	70,
			"primary_score":	999911,
			"second_score":	127460
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	71,
			"primary_score":	999911,
			"second_score":	127373
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	72,
			"primary_score":	999911,
			"second_score":	127372
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	73,
			"primary_score":	999911,
			"second_score":	127355
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	75,
			"primary_score":	999911,
			"second_score":	127354
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	81,
			"primary_score":	999894,
			"second_score":	126938
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	84,
			"primary_score":	999919,
			"second_score":	126937
		}, {
			"file":	"Zend/zend_iterators.c",
			"line":	85,
			"primary_score":	999919,
			"second_score":	126934
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3497,
			"primary_score":	999973,
			"second_score":	131700
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3498,
			"primary_score":	999973,
			"second_score":	131550
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3502,
			"primary_score":	999862,
			"second_score":	158384
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3503,
			"primary_score":	999862,
			"second_score":	150683
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3577,
			"primary_score":	999768,
			"second_score":	135891
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3578,
			"primary_score":	999768,
			"second_score":	135887
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3582,
			"primary_score":	999768,
			"second_score":	132447
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3583,
			"primary_score":	999768,
			"second_score":	132445
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3732,
			"primary_score":	999615,
			"second_score":	132522
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3733,
			"primary_score":	999615,
			"second_score":	132514
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3737,
			"primary_score":	999896,
			"second_score":	140027
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3738,
			"primary_score":	999896,
			"second_score":	139806
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3742,
			"primary_score":	999896,
			"second_score":	138750
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3743,
			"primary_score":	999896,
			"second_score":	138506
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3747,
			"primary_score":	999896,
			"second_score":	137974
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3748,
			"primary_score":	999896,
			"second_score":	137899
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3852,
			"primary_score":	999965,
			"second_score":	136448
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3853,
			"primary_score":	999965,
			"second_score":	136352
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3857,
			"primary_score":	999973,
			"second_score":	131724
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3858,
			"primary_score":	999973,
			"second_score":	131722
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3862,
			"primary_score":	999861,
			"second_score":	158408
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3863,
			"primary_score":	999861,
			"second_score":	158406
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3867,
			"primary_score":	999872,
			"second_score":	143589
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3868,
			"primary_score":	999872,
			"second_score":	143588
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3877,
			"primary_score":	999973,
			"second_score":	143545
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3878,
			"primary_score":	999973,
			"second_score":	142143
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3882,
			"primary_score":	999973,
			"second_score":	132296
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3883,
			"primary_score":	999973,
			"second_score":	131746
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3887,
			"primary_score":	999861,
			"second_score":	159724
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3888,
			"primary_score":	999861,
			"second_score":	158663
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3892,
			"primary_score":	999861,
			"second_score":	158445
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3893,
			"primary_score":	999861,
			"second_score":	158430
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3907,
			"primary_score":	999861,
			"second_score":	160828
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3908,
			"primary_score":	999861,
			"second_score":	160826
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3927,
			"primary_score":	999939,
			"second_score":	164155
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3928,
			"primary_score":	999939,
			"second_score":	164154
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3932,
			"primary_score":	999899,
			"second_score":	160049
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3933,
			"primary_score":	999899,
			"second_score":	159746
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3957,
			"primary_score":	999943,
			"second_score":	138794
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3958,
			"primary_score":	999943,
			"second_score":	138793
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3962,
			"primary_score":	999889,
			"second_score":	138821
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3963,
			"primary_score":	999889,
			"second_score":	138816
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4047,
			"primary_score":	999928,
			"second_score":	141895
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4048,
			"primary_score":	999928,
			"second_score":	141572
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4067,
			"primary_score":	999957,
			"second_score":	141316
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4068,
			"primary_score":	999957,
			"second_score":	141096
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4087,
			"primary_score":	999927,
			"second_score":	141399
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4088,
			"primary_score":	999927,
			"second_score":	141398
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4167,
			"primary_score":	999611,
			"second_score":	129215
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4168,
			"primary_score":	999611,
			"second_score":	129101
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4227,
			"primary_score":	999952,
			"second_score":	162502
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4228,
			"primary_score":	999952,
			"second_score":	162501
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4322,
			"primary_score":	999953,
			"second_score":	162525
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4323,
			"primary_score":	999953,
			"second_score":	162524
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4342,
			"primary_score":	999916,
			"second_score":	162698
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4343,
			"primary_score":	999916,
			"second_score":	162697
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4352,
			"primary_score":	999927,
			"second_score":	162721
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4353,
			"primary_score":	999927,
			"second_score":	162720
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4397,
			"primary_score":	999959,
			"second_score":	162103
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4398,
			"primary_score":	999959,
			"second_score":	161457
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999611,
			"second_score":	126651
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999611,
			"second_score":	126634
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4457,
			"primary_score":	999635,
			"second_score":	146513
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4458,
			"primary_score":	999635,
			"second_score":	146436
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4477,
			"primary_score":	999618,
			"second_score":	147388
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4478,
			"primary_score":	999618,
			"second_score":	147334
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4482,
			"primary_score":	999618,
			"second_score":	146666
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4483,
			"primary_score":	999618,
			"second_score":	146597
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999611,
			"second_score":	126736
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999611,
			"second_score":	126735
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999611,
			"second_score":	130183
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999611,
			"second_score":	130155
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999611,
			"second_score":	127356
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999611,
			"second_score":	127314
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999611,
			"second_score":	126926
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999611,
			"second_score":	126802
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4867,
			"primary_score":	999872,
			"second_score":	143796
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4868,
			"primary_score":	999872,
			"second_score":	143795
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4977,
			"primary_score":	999615,
			"second_score":	147758
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4978,
			"primary_score":	999615,
			"second_score":	147757
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4992,
			"primary_score":	999843,
			"second_score":	160072
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4993,
			"primary_score":	999843,
			"second_score":	160071
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5007,
			"primary_score":	999618,
			"second_score":	147729
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5008,
			"primary_score":	999618,
			"second_score":	147410
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5072,
			"primary_score":	999928,
			"second_score":	149079
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5073,
			"primary_score":	999928,
			"second_score":	149078
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5077,
			"primary_score":	999636,
			"second_score":	146689
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5078,
			"primary_score":	999636,
			"second_score":	146688
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5142,
			"primary_score":	999958,
			"second_score":	162126
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5143,
			"primary_score":	999958,
			"second_score":	162125
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5262,
			"primary_score":	999611,
			"second_score":	133479
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5263,
			"primary_score":	999611,
			"second_score":	133478
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5284,
			"primary_score":	999695,
			"second_score":	135011
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5285,
			"primary_score":	999695,
			"second_score":	134790
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5289,
			"primary_score":	999695,
			"second_score":	134360
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5290,
			"primary_score":	999695,
			"second_score":	134333
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5294,
			"primary_score":	999695,
			"second_score":	134253
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5295,
			"primary_score":	999695,
			"second_score":	134222
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5309,
			"primary_score":	999695,
			"second_score":	134282
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5310,
			"primary_score":	999695,
			"second_score":	134281
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5354,
			"primary_score":	999950,
			"second_score":	134305
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5355,
			"primary_score":	999950,
			"second_score":	134304
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999625,
			"second_score":	133161
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999625,
			"second_score":	133160
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999625,
			"second_score":	133185
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999625,
			"second_score":	133183
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5429,
			"primary_score":	999934,
			"second_score":	133373
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5430,
			"primary_score":	999934,
			"second_score":	133246
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999625,
			"second_score":	133852
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999625,
			"second_score":	133750
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999625,
			"second_score":	133875
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999625,
			"second_score":	133874
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5459,
			"primary_score":	999940,
			"second_score":	133417
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5460,
			"primary_score":	999940,
			"second_score":	133416
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5464,
			"primary_score":	999695,
			"second_score":	134383
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5465,
			"primary_score":	999695,
			"second_score":	134382
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5489,
			"primary_score":	999695,
			"second_score":	134600
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5490,
			"primary_score":	999695,
			"second_score":	134444
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5494,
			"primary_score":	999695,
			"second_score":	134623
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5495,
			"primary_score":	999695,
			"second_score":	134622
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	154,
			"primary_score":	999638,
			"second_score":	135124
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	155,
			"primary_score":	999638,
			"second_score":	135098
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	162,
			"primary_score":	999638,
			"second_score":	132357
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	163,
			"primary_score":	999638,
			"second_score":	132356
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	164,
			"primary_score":	999638,
			"second_score":	132352
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999638,
			"second_score":	132351
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	173,
			"primary_score":	999611,
			"second_score":	121713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	188,
			"primary_score":	999611,
			"second_score":	120452
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	192,
			"primary_score":	999611,
			"second_score":	120451
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	193,
			"primary_score":	999611,
			"second_score":	120447
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	262,
			"primary_score":	999611,
			"second_score":	133590
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	263,
			"primary_score":	999611,
			"second_score":	133589
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	645,
			"primary_score":	999611,
			"second_score":	121821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	646,
			"primary_score":	999611,
			"second_score":	121820
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	649,
			"primary_score":	999611,
			"second_score":	121819
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	654,
			"primary_score":	999611,
			"second_score":	121818
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	657,
			"primary_score":	999611,
			"second_score":	121723
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	659,
			"primary_score":	999611,
			"second_score":	121722
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	660,
			"primary_score":	999611,
			"second_score":	121721
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	662,
			"primary_score":	999611,
			"second_score":	121720
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	663,
			"primary_score":	999611,
			"second_score":	121719
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	665,
			"primary_score":	999611,
			"second_score":	121718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	682,
			"primary_score":	999611,
			"second_score":	121717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	684,
			"primary_score":	999611,
			"second_score":	121712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999611,
			"second_score":	121276
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999611,
			"second_score":	121275
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999611,
			"second_score":	121274
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	715,
			"primary_score":	999611,
			"second_score":	122079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999611,
			"second_score":	122078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999611,
			"second_score":	121974
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	718,
			"primary_score":	999611,
			"second_score":	121973
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999611,
			"second_score":	121972
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	720,
			"primary_score":	999611,
			"second_score":	121971
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	721,
			"primary_score":	999611,
			"second_score":	121970
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	723,
			"primary_score":	999611,
			"second_score":	121969
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	728,
			"primary_score":	999611,
			"second_score":	121968
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	730,
			"primary_score":	999611,
			"second_score":	121967
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999611,
			"second_score":	121966
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999611,
			"second_score":	121850
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999611,
			"second_score":	121848
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	735,
			"primary_score":	999611,
			"second_score":	121847
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999611,
			"second_score":	121822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	740,
			"primary_score":	999611,
			"second_score":	121273
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	742,
			"primary_score":	999611,
			"second_score":	121272
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	743,
			"primary_score":	999611,
			"second_score":	121271
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	744,
			"primary_score":	999611,
			"second_score":	121027
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	745,
			"primary_score":	999611,
			"second_score":	121026
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	746,
			"primary_score":	999611,
			"second_score":	121025
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	747,
			"primary_score":	999611,
			"second_score":	121018
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	748,
			"primary_score":	999611,
			"second_score":	121017
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	750,
			"primary_score":	999611,
			"second_score":	119875
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	755,
			"primary_score":	999611,
			"second_score":	119874
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	760,
			"primary_score":	999611,
			"second_score":	119873
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	761,
			"primary_score":	999611,
			"second_score":	119825
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	762,
			"primary_score":	999611,
			"second_score":	119824
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	763,
			"primary_score":	999611,
			"second_score":	119653
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	764,
			"primary_score":	999611,
			"second_score":	119648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	767,
			"primary_score":	999611,
			"second_score":	119647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	768,
			"primary_score":	999611,
			"second_score":	119621
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	769,
			"primary_score":	999611,
			"second_score":	119595
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	770,
			"primary_score":	999611,
			"second_score":	119594
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	877,
			"primary_score":	999611,
			"second_score":	129737
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	878,
			"primary_score":	999611,
			"second_score":	129736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	883,
			"primary_score":	999611,
			"second_score":	129735
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	886,
			"primary_score":	999611,
			"second_score":	129734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	887,
			"primary_score":	999611,
			"second_score":	129733
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	962,
			"primary_score":	999611,
			"second_score":	132608
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	994,
			"primary_score":	999695,
			"second_score":	134760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1468,
			"primary_score":	999622,
			"second_score":	164807
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1469,
			"primary_score":	999622,
			"second_score":	164806
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1485,
			"primary_score":	999618,
			"second_score":	164795
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2435,
			"primary_score":	999861,
			"second_score":	140733
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2436,
			"primary_score":	999861,
			"second_score":	140732
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2445,
			"primary_score":	999796,
			"second_score":	149671
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2446,
			"primary_score":	999796,
			"second_score":	149670
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2447,
			"primary_score":	999974,
			"second_score":	149669
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2448,
			"primary_score":	999974,
			"second_score":	149668
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2449,
			"primary_score":	999981,
			"second_score":	149667
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2456,
			"primary_score":	999796,
			"second_score":	160914
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2460,
			"primary_score":	999849,
			"second_score":	160912
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2473,
			"primary_score":	999852,
			"second_score":	143720
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2474,
			"primary_score":	999852,
			"second_score":	143719
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2479,
			"primary_score":	999852,
			"second_score":	143718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2480,
			"primary_score":	999963,
			"second_score":	143716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2519,
			"primary_score":	999773,
			"second_score":	140154
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2520,
			"primary_score":	999773,
			"second_score":	140153
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2531,
			"primary_score":	999775,
			"second_score":	140152
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2536,
			"primary_score":	999775,
			"second_score":	140151
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2537,
			"primary_score":	999802,
			"second_score":	160411
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2538,
			"primary_score":	999880,
			"second_score":	140148
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2544,
			"primary_score":	999611,
			"second_score":	130315
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2545,
			"primary_score":	999611,
			"second_score":	130314
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2555,
			"primary_score":	999611,
			"second_score":	130313
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2559,
			"primary_score":	999611,
			"second_score":	130312
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2627,
			"primary_score":	999611,
			"second_score":	129002
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2630,
			"primary_score":	999927,
			"second_score":	162777
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2636,
			"primary_score":	999688,
			"second_score":	135134
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2637,
			"primary_score":	999688,
			"second_score":	135133
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2640,
			"primary_score":	999692,
			"second_score":	135132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2641,
			"primary_score":	999695,
			"second_score":	135130
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2664,
			"primary_score":	999611,
			"second_score":	131472
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2670,
			"primary_score":	999611,
			"second_score":	127578
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2671,
			"primary_score":	999611,
			"second_score":	127577
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2672,
			"primary_score":	999611,
			"second_score":	127576
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2685,
			"primary_score":	999618,
			"second_score":	148092
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2686,
			"primary_score":	999618,
			"second_score":	148091
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2696,
			"primary_score":	999618,
			"second_score":	148090
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2700,
			"primary_score":	999618,
			"second_score":	148089
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2707,
			"primary_score":	999758,
			"second_score":	135994
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2708,
			"primary_score":	999758,
			"second_score":	135993
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2709,
			"primary_score":	999759,
			"second_score":	135991
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2738,
			"primary_score":	999611,
			"second_score":	132138
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2739,
			"primary_score":	999611,
			"second_score":	132137
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2744,
			"primary_score":	999611,
			"second_score":	132136
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2745,
			"primary_score":	999611,
			"second_score":	132135
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2746,
			"primary_score":	999611,
			"second_score":	132134
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2766,
			"primary_score":	999929,
			"second_score":	137658
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2767,
			"primary_score":	999929,
			"second_score":	137657
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2772,
			"primary_score":	999933,
			"second_score":	137656
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2773,
			"primary_score":	999933,
			"second_score":	137655
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2774,
			"primary_score":	999933,
			"second_score":	137654
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2787,
			"primary_score":	999632,
			"second_score":	139436
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2788,
			"primary_score":	999636,
			"second_score":	148263
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2789,
			"primary_score":	999893,
			"second_score":	139434
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2790,
			"primary_score":	999920,
			"second_score":	139432
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2910,
			"primary_score":	999620,
			"second_score":	133968
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999620,
			"second_score":	133967
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2917,
			"primary_score":	999620,
			"second_score":	133966
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2918,
			"primary_score":	999620,
			"second_score":	133965
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2930,
			"primary_score":	999611,
			"second_score":	130588
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2933,
			"primary_score":	999752,
			"second_score":	138431
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2934,
			"primary_score":	999752,
			"second_score":	138430
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2935,
			"primary_score":	999752,
			"second_score":	138429
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2937,
			"primary_score":	999752,
			"second_score":	138428
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2938,
			"primary_score":	999752,
			"second_score":	138427
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2939,
			"primary_score":	999752,
			"second_score":	138317
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2944,
			"primary_score":	999752,
			"second_score":	132369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2945,
			"primary_score":	999752,
			"second_score":	132368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2946,
			"primary_score":	999752,
			"second_score":	132367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2948,
			"primary_score":	999752,
			"second_score":	132366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2949,
			"primary_score":	999752,
			"second_score":	132365
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2950,
			"primary_score":	999752,
			"second_score":	132361
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2951,
			"primary_score":	999752,
			"second_score":	132358
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2953,
			"primary_score":	999752,
			"second_score":	132329
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3080,
			"primary_score":	999611,
			"second_score":	133633
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3094,
			"primary_score":	999611,
			"second_score":	133632
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3095,
			"primary_score":	999611,
			"second_score":	133604
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3096,
			"primary_score":	999611,
			"second_score":	133603
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3099,
			"primary_score":	999611,
			"second_score":	133602
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3100,
			"primary_score":	999611,
			"second_score":	133601
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3101,
			"primary_score":	999611,
			"second_score":	133600
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3102,
			"primary_score":	999611,
			"second_score":	133587
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3117,
			"primary_score":	999611,
			"second_score":	133586
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3120,
			"primary_score":	999611,
			"second_score":	133585
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3123,
			"primary_score":	999611,
			"second_score":	133584
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3125,
			"primary_score":	999611,
			"second_score":	133583
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3127,
			"primary_score":	999611,
			"second_score":	133582
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3134,
			"primary_score":	999611,
			"second_score":	133581
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3165,
			"primary_score":	999611,
			"second_score":	129781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3168,
			"primary_score":	999611,
			"second_score":	129780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3198,
			"primary_score":	999611,
			"second_score":	131451
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3199,
			"primary_score":	999611,
			"second_score":	131450
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3200,
			"primary_score":	999611,
			"second_score":	131449
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3202,
			"primary_score":	999611,
			"second_score":	131448
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3203,
			"primary_score":	999611,
			"second_score":	131447
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3204,
			"primary_score":	999611,
			"second_score":	131446
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3274,
			"primary_score":	999611,
			"second_score":	132122
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3275,
			"primary_score":	999611,
			"second_score":	132121
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3276,
			"primary_score":	999611,
			"second_score":	132120
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3277,
			"primary_score":	999611,
			"second_score":	132119
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3280,
			"primary_score":	999611,
			"second_score":	132118
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3378,
			"primary_score":	999620,
			"second_score":	133953
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3379,
			"primary_score":	999620,
			"second_score":	133952
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999620,
			"second_score":	133949
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3381,
			"primary_score":	999620,
			"second_score":	133948
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999620,
			"second_score":	133947
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999620,
			"second_score":	133946
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999620,
			"second_score":	135447
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3386,
			"primary_score":	999926,
			"second_score":	139697
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3387,
			"primary_score":	999898,
			"second_score":	133944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3390,
			"primary_score":	999677,
			"second_score":	133956
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3393,
			"primary_score":	999677,
			"second_score":	133955
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3397,
			"primary_score":	999620,
			"second_score":	133943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3399,
			"primary_score":	999620,
			"second_score":	133942
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3401,
			"primary_score":	999620,
			"second_score":	133941
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3402,
			"primary_score":	999620,
			"second_score":	133940
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3403,
			"primary_score":	999620,
			"second_score":	133909
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3404,
			"primary_score":	999620,
			"second_score":	133908
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4209,
			"primary_score":	999920,
			"second_score":	139431
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4210,
			"primary_score":	999920,
			"second_score":	139430
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4211,
			"primary_score":	999920,
			"second_score":	139429
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4213,
			"primary_score":	999920,
			"second_score":	139428
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4214,
			"primary_score":	999920,
			"second_score":	139427
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4706,
			"primary_score":	999933,
			"second_score":	137653
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4707,
			"primary_score":	999933,
			"second_score":	137652
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4708,
			"primary_score":	999958,
			"second_score":	137650
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4730,
			"primary_score":	999958,
			"second_score":	137649
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4731,
			"primary_score":	999958,
			"second_score":	137648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4732,
			"primary_score":	999958,
			"second_score":	137647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4733,
			"primary_score":	999958,
			"second_score":	137646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4735,
			"primary_score":	999958,
			"second_score":	137645
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4736,
			"primary_score":	999958,
			"second_score":	137644
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4737,
			"primary_score":	999958,
			"second_score":	137643
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4738,
			"primary_score":	999965,
			"second_score":	137642
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4740,
			"primary_score":	999965,
			"second_score":	137641
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4741,
			"primary_score":	999965,
			"second_score":	137640
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4744,
			"primary_score":	999965,
			"second_score":	137639
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4745,
			"primary_score":	999965,
			"second_score":	137638
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4747,
			"primary_score":	999965,
			"second_score":	137637
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4748,
			"primary_score":	999965,
			"second_score":	137636
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4758,
			"primary_score":	999611,
			"second_score":	132133
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4791,
			"primary_score":	999611,
			"second_score":	132132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4792,
			"primary_score":	999611,
			"second_score":	132131
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4797,
			"primary_score":	999611,
			"second_score":	132130
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4801,
			"primary_score":	999611,
			"second_score":	132129
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4802,
			"primary_score":	999611,
			"second_score":	132128
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4803,
			"primary_score":	999611,
			"second_score":	132127
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4889,
			"primary_score":	999611,
			"second_score":	132126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4890,
			"primary_score":	999611,
			"second_score":	132125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4891,
			"primary_score":	999611,
			"second_score":	132124
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4892,
			"primary_score":	999611,
			"second_score":	132123
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5292,
			"primary_score":	999759,
			"second_score":	135990
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5293,
			"primary_score":	999759,
			"second_score":	135989
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5294,
			"primary_score":	999759,
			"second_score":	135988
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5295,
			"primary_score":	999774,
			"second_score":	135987
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5297,
			"primary_score":	999774,
			"second_score":	135986
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5298,
			"primary_score":	999774,
			"second_score":	135985
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5299,
			"primary_score":	999774,
			"second_score":	135984
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5316,
			"primary_score":	999618,
			"second_score":	148087
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5317,
			"primary_score":	999618,
			"second_score":	148086
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5318,
			"primary_score":	999618,
			"second_score":	148085
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5429,
			"primary_score":	999618,
			"second_score":	148083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5430,
			"primary_score":	999618,
			"second_score":	148082
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5433,
			"primary_score":	999618,
			"second_score":	148081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5434,
			"primary_score":	999618,
			"second_score":	148080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5436,
			"primary_score":	999618,
			"second_score":	148079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5437,
			"primary_score":	999618,
			"second_score":	148078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5495,
			"primary_score":	999657,
			"second_score":	136050
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5496,
			"primary_score":	999657,
			"second_score":	136049
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5497,
			"primary_score":	999657,
			"second_score":	136046
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5498,
			"primary_score":	999657,
			"second_score":	136045
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5501,
			"primary_score":	999990,
			"second_score":	131482
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5506,
			"primary_score":	999883,
			"second_score":	136051
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5531,
			"primary_score":	999695,
			"second_score":	135129
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5532,
			"primary_score":	999695,
			"second_score":	135128
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5533,
			"primary_score":	999695,
			"second_score":	135127
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5535,
			"primary_score":	999695,
			"second_score":	135126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5536,
			"primary_score":	999695,
			"second_score":	135125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5537,
			"primary_score":	999695,
			"second_score":	135097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5558,
			"primary_score":	999927,
			"second_score":	162775
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5559,
			"primary_score":	999927,
			"second_score":	162774
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5560,
			"primary_score":	999927,
			"second_score":	162773
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5561,
			"primary_score":	999927,
			"second_score":	162772
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5563,
			"primary_score":	999927,
			"second_score":	162771
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5564,
			"primary_score":	999927,
			"second_score":	162770
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5565,
			"primary_score":	999927,
			"second_score":	162769
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5566,
			"primary_score":	999927,
			"second_score":	162768
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5568,
			"primary_score":	999927,
			"second_score":	162767
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5569,
			"primary_score":	999927,
			"second_score":	162766
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5570,
			"primary_score":	999927,
			"second_score":	162765
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5571,
			"primary_score":	999927,
			"second_score":	162764
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5573,
			"primary_score":	999927,
			"second_score":	162763
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5574,
			"primary_score":	999927,
			"second_score":	162762
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5575,
			"primary_score":	999927,
			"second_score":	162761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5576,
			"primary_score":	999927,
			"second_score":	162760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5578,
			"primary_score":	999927,
			"second_score":	162759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5579,
			"primary_score":	999927,
			"second_score":	162758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5582,
			"primary_score":	999927,
			"second_score":	162757
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5583,
			"primary_score":	999927,
			"second_score":	162756
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5585,
			"primary_score":	999927,
			"second_score":	162755
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5586,
			"primary_score":	999927,
			"second_score":	162754
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6064,
			"primary_score":	999611,
			"second_score":	130310
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6065,
			"primary_score":	999611,
			"second_score":	130309
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6070,
			"primary_score":	999611,
			"second_score":	130308
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6074,
			"primary_score":	999611,
			"second_score":	130307
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6119,
			"primary_score":	999611,
			"second_score":	130305
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6120,
			"primary_score":	999611,
			"second_score":	130304
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6121,
			"primary_score":	999611,
			"second_score":	130303
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6267,
			"primary_score":	999802,
			"second_score":	160410
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6268,
			"primary_score":	999802,
			"second_score":	160409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6269,
			"primary_score":	999802,
			"second_score":	160408
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6273,
			"primary_score":	999880,
			"second_score":	140147
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6274,
			"primary_score":	999880,
			"second_score":	140146
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6277,
			"primary_score":	999880,
			"second_score":	140145
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6278,
			"primary_score":	999880,
			"second_score":	140144
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6280,
			"primary_score":	999880,
			"second_score":	140143
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6281,
			"primary_score":	999880,
			"second_score":	140142
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6286,
			"primary_score":	999802,
			"second_score":	160406
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6287,
			"primary_score":	999802,
			"second_score":	160405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6288,
			"primary_score":	999802,
			"second_score":	160404
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6289,
			"primary_score":	999802,
			"second_score":	160403
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6291,
			"primary_score":	999802,
			"second_score":	160402
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6292,
			"primary_score":	999802,
			"second_score":	160401
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6293,
			"primary_score":	999802,
			"second_score":	160400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6294,
			"primary_score":	999802,
			"second_score":	160399
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6296,
			"primary_score":	999802,
			"second_score":	160398
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6297,
			"primary_score":	999802,
			"second_score":	160397
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6298,
			"primary_score":	999878,
			"second_score":	160396
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7206,
			"primary_score":	999849,
			"second_score":	160911
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7207,
			"primary_score":	999849,
			"second_score":	160910
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7212,
			"primary_score":	999849,
			"second_score":	160909
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7213,
			"primary_score":	999859,
			"second_score":	160908
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7214,
			"primary_score":	999859,
			"second_score":	160907
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7291,
			"primary_score":	999859,
			"second_score":	160906
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7292,
			"primary_score":	999859,
			"second_score":	160905
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7293,
			"primary_score":	999859,
			"second_score":	160904
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7320,
			"primary_score":	999859,
			"second_score":	160902
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7321,
			"primary_score":	999859,
			"second_score":	160901
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7322,
			"primary_score":	999859,
			"second_score":	160900
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7323,
			"primary_score":	999859,
			"second_score":	160899
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7325,
			"primary_score":	999859,
			"second_score":	160898
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7326,
			"primary_score":	999859,
			"second_score":	160897
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7329,
			"primary_score":	999861,
			"second_score":	160896
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7330,
			"primary_score":	999861,
			"second_score":	160895
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7332,
			"primary_score":	999861,
			"second_score":	160894
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7333,
			"primary_score":	999861,
			"second_score":	160893
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7392,
			"primary_score":	999861,
			"second_score":	140731
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7393,
			"primary_score":	999861,
			"second_score":	140730
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7394,
			"primary_score":	999878,
			"second_score":	140728
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7430,
			"primary_score":	999611,
			"second_score":	132033
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7432,
			"primary_score":	999872,
			"second_score":	143864
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7433,
			"primary_score":	999872,
			"second_score":	143863
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7435,
			"primary_score":	999872,
			"second_score":	143862
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7436,
			"primary_score":	999872,
			"second_score":	143861
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7441,
			"primary_score":	999878,
			"second_score":	140727
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7442,
			"primary_score":	999878,
			"second_score":	140726
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7451,
			"primary_score":	999880,
			"second_score":	140725
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7454,
			"primary_score":	999880,
			"second_score":	140724
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7469,
			"primary_score":	999880,
			"second_score":	140722
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7470,
			"primary_score":	999880,
			"second_score":	140721
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7471,
			"primary_score":	999880,
			"second_score":	140720
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7472,
			"primary_score":	999880,
			"second_score":	140719
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7474,
			"primary_score":	999880,
			"second_score":	140718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7475,
			"primary_score":	999880,
			"second_score":	140717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7476,
			"primary_score":	999880,
			"second_score":	140716
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7477,
			"primary_score":	999880,
			"second_score":	140715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7479,
			"primary_score":	999880,
			"second_score":	140714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7480,
			"primary_score":	999880,
			"second_score":	140713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7481,
			"primary_score":	999880,
			"second_score":	140712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7482,
			"primary_score":	999880,
			"second_score":	140711
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7484,
			"primary_score":	999880,
			"second_score":	140710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7485,
			"primary_score":	999880,
			"second_score":	140709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7488,
			"primary_score":	999880,
			"second_score":	140708
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7489,
			"primary_score":	999880,
			"second_score":	140707
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7491,
			"primary_score":	999880,
			"second_score":	140706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7492,
			"primary_score":	999880,
			"second_score":	140705
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7707,
			"primary_score":	999867,
			"second_score":	160528
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7708,
			"primary_score":	999867,
			"second_score":	160527
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7713,
			"primary_score":	999868,
			"second_score":	160526
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7716,
			"primary_score":	999895,
			"second_score":	160524
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7728,
			"primary_score":	999894,
			"second_score":	160523
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7729,
			"primary_score":	999894,
			"second_score":	160522
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7730,
			"primary_score":	999894,
			"second_score":	160521
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7731,
			"primary_score":	999895,
			"second_score":	160520
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7733,
			"primary_score":	999895,
			"second_score":	160519
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7734,
			"primary_score":	999895,
			"second_score":	160518
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7735,
			"primary_score":	999895,
			"second_score":	160517
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7736,
			"primary_score":	999895,
			"second_score":	160516
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7738,
			"primary_score":	999895,
			"second_score":	160515
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7739,
			"primary_score":	999895,
			"second_score":	160514
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7740,
			"primary_score":	999895,
			"second_score":	160513
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7741,
			"primary_score":	999899,
			"second_score":	160512
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7743,
			"primary_score":	999899,
			"second_score":	160511
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7744,
			"primary_score":	999899,
			"second_score":	160510
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7745,
			"primary_score":	999899,
			"second_score":	160509
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7746,
			"primary_score":	999899,
			"second_score":	160508
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7748,
			"primary_score":	999899,
			"second_score":	160507
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7749,
			"primary_score":	999899,
			"second_score":	160506
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7752,
			"primary_score":	999899,
			"second_score":	160505
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7753,
			"primary_score":	999899,
			"second_score":	160504
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7755,
			"primary_score":	999899,
			"second_score":	160503
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7756,
			"primary_score":	999899,
			"second_score":	160502
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8105,
			"primary_score":	999695,
			"second_score":	134759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8139,
			"primary_score":	999695,
			"second_score":	134758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8140,
			"primary_score":	999695,
			"second_score":	134757
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8141,
			"primary_score":	999695,
			"second_score":	134754
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8142,
			"primary_score":	999695,
			"second_score":	134753
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8153,
			"primary_score":	999695,
			"second_score":	134752
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8159,
			"primary_score":	999696,
			"second_score":	134751
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8160,
			"primary_score":	999696,
			"second_score":	134750
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8198,
			"primary_score":	999695,
			"second_score":	134748
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8199,
			"primary_score":	999695,
			"second_score":	134747
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8200,
			"primary_score":	999695,
			"second_score":	134746
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8203,
			"primary_score":	999695,
			"second_score":	134719
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8205,
			"primary_score":	999695,
			"second_score":	134718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8206,
			"primary_score":	999695,
			"second_score":	134717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8207,
			"primary_score":	999695,
			"second_score":	134688
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8208,
			"primary_score":	999695,
			"second_score":	134657
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8209,
			"primary_score":	999695,
			"second_score":	134656
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8218,
			"primary_score":	999698,
			"second_score":	134727
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8219,
			"primary_score":	999698,
			"second_score":	134726
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8220,
			"primary_score":	999698,
			"second_score":	134723
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8221,
			"primary_score":	999698,
			"second_score":	134722
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8223,
			"primary_score":	999695,
			"second_score":	134721
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8224,
			"primary_score":	999698,
			"second_score":	134728
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8226,
			"primary_score":	999695,
			"second_score":	134720
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999611,
			"second_score":	114399
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999611,
			"second_score":	114398
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999611,
			"second_score":	114388
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999611,
			"second_score":	114387
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999611,
			"second_score":	114365
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999611,
			"second_score":	114364
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999611,
			"second_score":	114363
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999611,
			"second_score":	114362
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999611,
			"second_score":	114352
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999611,
			"second_score":	114351
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999611,
			"second_score":	114243
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999611,
			"second_score":	103777
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999611,
			"second_score":	6223
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999611,
			"second_score":	133612
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999611,
			"second_score":	133591
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999611,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999611,
			"second_score":	3143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	112,
			"primary_score":	999662,
			"second_score":	133039
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	113,
			"primary_score":	999662,
			"second_score":	133038
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	116,
			"primary_score":	999662,
			"second_score":	133037
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	117,
			"primary_score":	999662,
			"second_score":	133018
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999611,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999611,
			"second_score":	121918
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999611,
			"second_score":	121914
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999611,
			"second_score":	14747
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999611,
			"second_score":	14746
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999611,
			"second_score":	119549
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999611,
			"second_score":	119548
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	57,
			"primary_score":	999908,
			"second_score":	129103
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	58,
			"primary_score":	999908,
			"second_score":	129102
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	59,
			"primary_score":	999908,
			"second_score":	129101
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	60,
			"primary_score":	999908,
			"second_score":	129100
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	62,
			"primary_score":	999908,
			"second_score":	129099
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	63,
			"primary_score":	999908,
			"second_score":	129077
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	64,
			"primary_score":	999908,
			"second_score":	129059
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	65,
			"primary_score":	999958,
			"second_score":	129058
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	68,
			"primary_score":	999958,
			"second_score":	129048
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	72,
			"primary_score":	999958,
			"second_score":	129047
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	75,
			"primary_score":	999958,
			"second_score":	128842
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	96,
			"primary_score":	999953,
			"second_score":	126223
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	97,
			"primary_score":	999953,
			"second_score":	126222
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	98,
			"primary_score":	999953,
			"second_score":	126221
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	99,
			"primary_score":	999955,
			"second_score":	129104
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	101,
			"primary_score":	999953,
			"second_score":	126220
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	206,
			"primary_score":	999883,
			"second_score":	126313
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	239,
			"primary_score":	999870,
			"second_score":	126334
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	240,
			"primary_score":	999870,
			"second_score":	126333
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	241,
			"primary_score":	999870,
			"second_score":	126332
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	242,
			"primary_score":	999870,
			"second_score":	126331
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	244,
			"primary_score":	999870,
			"second_score":	126330
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	248,
			"primary_score":	999870,
			"second_score":	126329
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	258,
			"primary_score":	999870,
			"second_score":	126328
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	259,
			"primary_score":	999870,
			"second_score":	126327
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	260,
			"primary_score":	999870,
			"second_score":	126326
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	261,
			"primary_score":	999883,
			"second_score":	126315
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	265,
			"primary_score":	999883,
			"second_score":	126314
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	266,
			"primary_score":	999883,
			"second_score":	126312
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	273,
			"primary_score":	999883,
			"second_score":	126311
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	276,
			"primary_score":	999883,
			"second_score":	126310
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	277,
			"primary_score":	999967,
			"second_score":	126309
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	279,
			"primary_score":	999883,
			"second_score":	126306
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	380,
			"primary_score":	999901,
			"second_score":	126344
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	381,
			"primary_score":	999901,
			"second_score":	126343
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	382,
			"primary_score":	999901,
			"second_score":	126342
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	383,
			"primary_score":	999901,
			"second_score":	126341
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	384,
			"primary_score":	999901,
			"second_score":	126340
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	385,
			"primary_score":	999901,
			"second_score":	126339
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	387,
			"primary_score":	999901,
			"second_score":	126338
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	388,
			"primary_score":	999901,
			"second_score":	126337
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	390,
			"primary_score":	999901,
			"second_score":	126336
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	405,
			"primary_score":	999901,
			"second_score":	126335
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	407,
			"primary_score":	999901,
			"second_score":	126305
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	470,
			"primary_score":	999901,
			"second_score":	126304
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	475,
			"primary_score":	999901,
			"second_score":	126303
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1255,
			"primary_score":	999620,
			"second_score":	129503
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1256,
			"primary_score":	999620,
			"second_score":	129502
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1258,
			"primary_score":	999620,
			"second_score":	129501
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1259,
			"primary_score":	999717,
			"second_score":	129500
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1286,
			"primary_score":	999620,
			"second_score":	129499
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1435,
			"primary_score":	999638,
			"second_score":	127545
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1436,
			"primary_score":	999638,
			"second_score":	127544
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1438,
			"primary_score":	999638,
			"second_score":	127543
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	31,
			"primary_score":	999637,
			"second_score":	127801
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	32,
			"primary_score":	999637,
			"second_score":	127800
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	33,
			"primary_score":	999637,
			"second_score":	127799
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	34,
			"primary_score":	999637,
			"second_score":	127798
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	39,
			"primary_score":	999618,
			"second_score":	121559
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	43,
			"primary_score":	999618,
			"second_score":	121558
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	44,
			"primary_score":	999908,
			"second_score":	121557
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	45,
			"primary_score":	999908,
			"second_score":	121530
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	46,
			"primary_score":	999908,
			"second_score":	121511
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	47,
			"primary_score":	999958,
			"second_score":	121510
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	49,
			"primary_score":	999673,
			"second_score":	121778
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	63,
			"primary_score":	999639,
			"second_score":	121584
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	65,
			"primary_score":	999639,
			"second_score":	121583
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	137,
			"primary_score":	999841,
			"second_score":	121560
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	138,
			"primary_score":	999841,
			"second_score":	121491
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	143,
			"primary_score":	999843,
			"second_score":	130522
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	145,
			"primary_score":	999843,
			"second_score":	130521
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	146,
			"primary_score":	999843,
			"second_score":	130440
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	147,
			"primary_score":	999843,
			"second_score":	130439
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	148,
			"primary_score":	999843,
			"second_score":	130438
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	149,
			"primary_score":	999843,
			"second_score":	130437
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	150,
			"primary_score":	999843,
			"second_score":	130436
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	151,
			"primary_score":	999843,
			"second_score":	130419
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	152,
			"primary_score":	999843,
			"second_score":	130418
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999611,
			"second_score":	114073
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999611,
			"second_score":	114007
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999611,
			"second_score":	121297
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999611,
			"second_score":	121296
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	50,
			"primary_score":	999618,
			"second_score":	121292
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999611,
			"second_score":	116821
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999611,
			"second_score":	116820
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	85,
			"primary_score":	999618,
			"second_score":	116816
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	104,
			"primary_score":	999618,
			"second_score":	127371
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	105,
			"primary_score":	999618,
			"second_score":	127370
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	107,
			"primary_score":	999618,
			"second_score":	127369
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	111,
			"primary_score":	999618,
			"second_score":	127368
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	115,
			"primary_score":	999618,
			"second_score":	127367
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	117,
			"primary_score":	999618,
			"second_score":	127366
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	118,
			"primary_score":	999618,
			"second_score":	127365
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	119,
			"primary_score":	999618,
			"second_score":	127364
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	121,
			"primary_score":	999618,
			"second_score":	127363
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	122,
			"primary_score":	999618,
			"second_score":	127362
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	123,
			"primary_score":	999618,
			"second_score":	127361
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	124,
			"primary_score":	999618,
			"second_score":	127360
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	125,
			"primary_score":	999618,
			"second_score":	127359
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	126,
			"primary_score":	999618,
			"second_score":	127358
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	127,
			"primary_score":	999618,
			"second_score":	127357
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	132,
			"primary_score":	999618,
			"second_score":	127356
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	144,
			"primary_score":	999919,
			"second_score":	126510
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	146,
			"primary_score":	999919,
			"second_score":	126509
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	167,
			"primary_score":	999621,
			"second_score":	121607
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	169,
			"primary_score":	999621,
			"second_score":	121606
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	171,
			"primary_score":	999621,
			"second_score":	121605
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	172,
			"primary_score":	999621,
			"second_score":	121603
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	173,
			"primary_score":	999621,
			"second_score":	121464
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	175,
			"primary_score":	999919,
			"second_score":	122550
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	183,
			"primary_score":	999620,
			"second_score":	121602
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	184,
			"primary_score":	999620,
			"second_score":	121601
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	186,
			"primary_score":	999620,
			"second_score":	121600
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	190,
			"primary_score":	999620,
			"second_score":	121599
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	196,
			"primary_score":	999620,
			"second_score":	121598
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	197,
			"primary_score":	999622,
			"second_score":	121597
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	198,
			"primary_score":	999623,
			"second_score":	121596
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	199,
			"primary_score":	999646,
			"second_score":	121595
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	201,
			"primary_score":	999646,
			"second_score":	121594
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	202,
			"primary_score":	999646,
			"second_score":	121593
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	203,
			"primary_score":	999646,
			"second_score":	121592
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	205,
			"primary_score":	999646,
			"second_score":	121591
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	206,
			"primary_score":	999646,
			"second_score":	121585
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	209,
			"primary_score":	999646,
			"second_score":	121582
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	214,
			"primary_score":	999623,
			"second_score":	121580
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	216,
			"primary_score":	999623,
			"second_score":	121579
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	217,
			"primary_score":	999631,
			"second_score":	121576
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	218,
			"primary_score":	999623,
			"second_score":	121568
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	219,
			"primary_score":	999625,
			"second_score":	121567
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	220,
			"primary_score":	999625,
			"second_score":	121561
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	223,
			"primary_score":	999625,
			"second_score":	121472
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	225,
			"primary_score":	999623,
			"second_score":	121468
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	230,
			"primary_score":	999620,
			"second_score":	121466
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	239,
			"primary_score":	999620,
			"second_score":	121465
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	270,
			"primary_score":	999658,
			"second_score":	126232
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	272,
			"primary_score":	999658,
			"second_score":	126231
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	110,
			"primary_score":	999611,
			"second_score":	14836
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	113,
			"primary_score":	999872,
			"second_score":	116525
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	122,
			"primary_score":	999611,
			"second_score":	14838
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	124,
			"primary_score":	999611,
			"second_score":	14837
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	129,
			"primary_score":	999969,
			"second_score":	116928
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999611,
			"second_score":	116921
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	137,
			"primary_score":	999970,
			"second_score":	116929
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	138,
			"primary_score":	999970,
			"second_score":	116927
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999611,
			"second_score":	116920
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	157,
			"primary_score":	999861,
			"second_score":	116892
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	160,
			"primary_score":	999861,
			"second_score":	116891
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999611,
			"second_score":	116884
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	198,
			"primary_score":	999861,
			"second_score":	116893
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	199,
			"primary_score":	999861,
			"second_score":	116890
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999611,
			"second_score":	116883
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	217,
			"primary_score":	999861,
			"second_score":	115049
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	221,
			"primary_score":	999861,
			"second_score":	115048
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	245,
			"primary_score":	999861,
			"second_score":	115047
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999611,
			"second_score":	15271
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999611,
			"second_score":	15270
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	269,
			"primary_score":	999861,
			"second_score":	150717
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999611,
			"second_score":	15269
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	274,
			"primary_score":	999945,
			"second_score":	115219
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	276,
			"primary_score":	999945,
			"second_score":	115218
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	277,
			"primary_score":	999945,
			"second_score":	115217
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	278,
			"primary_score":	999945,
			"second_score":	115216
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	281,
			"primary_score":	999945,
			"second_score":	115162
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	283,
			"primary_score":	999861,
			"second_score":	115143
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	293,
			"primary_score":	999861,
			"second_score":	115142
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	294,
			"primary_score":	999861,
			"second_score":	115069
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	297,
			"primary_score":	999861,
			"second_score":	115068
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	298,
			"primary_score":	999861,
			"second_score":	115060
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	299,
			"primary_score":	999861,
			"second_score":	115052
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	300,
			"primary_score":	999889,
			"second_score":	115327
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	302,
			"primary_score":	999861,
			"second_score":	115051
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	306,
			"primary_score":	999861,
			"second_score":	115050
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	308,
			"primary_score":	999861,
			"second_score":	115046
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	309,
			"primary_score":	999861,
			"second_score":	114991
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999611,
			"second_score":	19051
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999611,
			"second_score":	19050
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999611,
			"second_score":	18987
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999611,
			"second_score":	18986
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999611,
			"second_score":	18978
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999611,
			"second_score":	15268
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999611,
			"second_score":	15267
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999611,
			"second_score":	15259
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999611,
			"second_score":	15258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999611,
			"second_score":	14829
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999611,
			"second_score":	14821
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999611,
			"second_score":	16325
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999611,
			"second_score":	14820
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999611,
			"second_score":	14819
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999611,
			"second_score":	119899
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999611,
			"second_score":	119898
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999611,
			"second_score":	119897
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999611,
			"second_score":	119896
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999611,
			"second_score":	119895
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999611,
			"second_score":	119894
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999611,
			"second_score":	119875
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	364,
			"primary_score":	999967,
			"second_score":	131586
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999611,
			"second_score":	119874
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999611,
			"second_score":	119855
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	370,
			"primary_score":	999642,
			"second_score":	116734
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	371,
			"primary_score":	999642,
			"second_score":	116733
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	372,
			"primary_score":	999642,
			"second_score":	116723
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	373,
			"primary_score":	999642,
			"second_score":	116722
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	375,
			"primary_score":	999642,
			"second_score":	116720
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999611,
			"second_score":	119854
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999611,
			"second_score":	119853
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999611,
			"second_score":	119852
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999611,
			"second_score":	119675
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999611,
			"second_score":	119672
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999611,
			"second_score":	119671
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999611,
			"second_score":	119606
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999611,
			"second_score":	119555
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	389,
			"primary_score":	999872,
			"second_score":	116597
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999611,
			"second_score":	119554
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999611,
			"second_score":	119553
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	395,
			"primary_score":	999878,
			"second_score":	116576
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999611,
			"second_score":	119552
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999611,
			"second_score":	119551
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999611,
			"second_score":	119550
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999611,
			"second_score":	119547
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	404,
			"primary_score":	999922,
			"second_score":	116551
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	405,
			"primary_score":	999922,
			"second_score":	116547
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	406,
			"primary_score":	999922,
			"second_score":	116545
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	410,
			"primary_score":	999922,
			"second_score":	116544
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	451,
			"primary_score":	999871,
			"second_score":	138542
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	452,
			"primary_score":	999871,
			"second_score":	138541
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	453,
			"primary_score":	999871,
			"second_score":	138512
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999621,
			"second_score":	131319
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999621,
			"second_score":	131263
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	520,
			"primary_score":	999614,
			"second_score":	131034
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999611,
			"second_score":	131984
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999611,
			"second_score":	125781
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999611,
			"second_score":	120310
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999611,
			"second_score":	120309
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999611,
			"second_score":	120308
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999611,
			"second_score":	120307
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999611,
			"second_score":	120279
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999611,
			"second_score":	120278
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999611,
			"second_score":	120277
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999611,
			"second_score":	114075
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999611,
			"second_score":	114101
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999611,
			"second_score":	116954
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999611,
			"second_score":	116953
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999611,
			"second_score":	116955
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999611,
			"second_score":	116952
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999611,
			"second_score":	116951
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999611,
			"second_score":	116950
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999611,
			"second_score":	116949
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999611,
			"second_score":	116948
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999611,
			"second_score":	133455
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999611,
			"second_score":	123682
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999611,
			"second_score":	123681
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999611,
			"second_score":	123680
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999611,
			"second_score":	123679
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999611,
			"second_score":	123652
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999611,
			"second_score":	123651
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999611,
			"second_score":	123650
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999611,
			"second_score":	123649
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999611,
			"second_score":	116969
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999611,
			"second_score":	116968
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999611,
			"second_score":	116967
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999611,
			"second_score":	116966
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	86,
			"primary_score":	999752,
			"second_score":	131903
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999611,
			"second_score":	113782
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999611,
			"second_score":	113781
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999611,
			"second_score":	113759
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	126,
			"primary_score":	999872,
			"second_score":	132271
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	127,
			"primary_score":	999872,
			"second_score":	132267
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999611,
			"second_score":	133633
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999611,
			"second_score":	133614
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	313,
			"primary_score":	999611,
			"second_score":	133613
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999611,
			"second_score":	6123
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999611,
			"second_score":	6122
		}, {
			"file":	"Zend/zend_string.c",
			"line":	90,
			"primary_score":	999699,
			"second_score":	161852
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999611,
			"second_score":	113207
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999611,
			"second_score":	113206
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999611,
			"second_score":	113205
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999611,
			"second_score":	113204
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999611,
			"second_score":	103809
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999611,
			"second_score":	103808
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999611,
			"second_score":	110377
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999611,
			"second_score":	110376
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999611,
			"second_score":	110375
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999611,
			"second_score":	110374
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999611,
			"second_score":	104935
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999611,
			"second_score":	110373
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999611,
			"second_score":	110372
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999611,
			"second_score":	103807
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999611,
			"second_score":	103806
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999611,
			"second_score":	103805
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999611,
			"second_score":	6279
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999611,
			"second_score":	6225
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999611,
			"second_score":	6278
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999611,
			"second_score":	6277
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999611,
			"second_score":	6276
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999611,
			"second_score":	6275
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999611,
			"second_score":	6229
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999611,
			"second_score":	6228
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999611,
			"second_score":	6227
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999611,
			"second_score":	6226
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999611,
			"second_score":	114402
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999611,
			"second_score":	115633
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999611,
			"second_score":	115612
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999611,
			"second_score":	117078
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999611,
			"second_score":	117077
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999611,
			"second_score":	117076
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999611,
			"second_score":	117068
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999611,
			"second_score":	117049
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	51,
			"primary_score":	999621,
			"second_score":	121609
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	53,
			"primary_score":	999621,
			"second_score":	121608
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	55,
			"primary_score":	999621,
			"second_score":	121460
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999611,
			"second_score":	114401
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999611,
			"second_score":	114400
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999611,
			"second_score":	114199
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999611,
			"second_score":	15287
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999611,
			"second_score":	19028
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999611,
			"second_score":	19025
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999611,
			"second_score":	133471
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	143,
			"primary_score":	999919,
			"second_score":	126512
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	144,
			"primary_score":	999919,
			"second_score":	126511
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	146,
			"primary_score":	999919,
			"second_score":	126508
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999611,
			"second_score":	119968
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999611,
			"second_score":	114404
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999611,
			"second_score":	116664
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999611,
			"second_score":	114403
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999611,
			"second_score":	133473
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999611,
			"second_score":	119232
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999611,
			"second_score":	133472
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999611,
			"second_score":	133585
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999611,
			"second_score":	133584
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999611,
			"second_score":	133583
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999611,
			"second_score":	133582
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999611,
			"second_score":	133581
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999611,
			"second_score":	133580
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999611,
			"second_score":	133571
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999611,
			"second_score":	133570
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999611,
			"second_score":	133569
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999611,
			"second_score":	133568
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999611,
			"second_score":	133567
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999611,
			"second_score":	133566
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999611,
			"second_score":	133565
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999611,
			"second_score":	133564
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999611,
			"second_score":	133563
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999611,
			"second_score":	133562
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999611,
			"second_score":	133561
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999611,
			"second_score":	133560
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999611,
			"second_score":	133559
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999611,
			"second_score":	133558
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999611,
			"second_score":	133557
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999611,
			"second_score":	133556
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999611,
			"second_score":	133523
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999611,
			"second_score":	133522
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999611,
			"second_score":	133521
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999611,
			"second_score":	133520
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999611,
			"second_score":	133519
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999611,
			"second_score":	133518
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999611,
			"second_score":	133517
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999611,
			"second_score":	122235
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999611,
			"second_score":	122234
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999611,
			"second_score":	122213
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999611,
			"second_score":	122212
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	417,
			"primary_score":	999947,
			"second_score":	128344
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	420,
			"primary_score":	999949,
			"second_score":	122240
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999611,
			"second_score":	126955
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999611,
			"second_score":	126954
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999611,
			"second_score":	126953
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999611,
			"second_score":	122226
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999611,
			"second_score":	122225
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999611,
			"second_score":	122224
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999611,
			"second_score":	122223
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999611,
			"second_score":	122222
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999611,
			"second_score":	122221
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999611,
			"second_score":	122220
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999611,
			"second_score":	122216
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	479,
			"primary_score":	999949,
			"second_score":	122647
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999611,
			"second_score":	122215
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	482,
			"primary_score":	999949,
			"second_score":	122645
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	484,
			"primary_score":	999949,
			"second_score":	122644
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	485,
			"primary_score":	999949,
			"second_score":	122643
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	486,
			"primary_score":	999949,
			"second_score":	122642
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	515,
			"primary_score":	999949,
			"second_score":	122641
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	516,
			"primary_score":	999949,
			"second_score":	122640
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	517,
			"primary_score":	999949,
			"second_score":	122639
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	518,
			"primary_score":	999949,
			"second_score":	122638
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	519,
			"primary_score":	999994,
			"second_score":	122637
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	525,
			"primary_score":	999994,
			"second_score":	122636
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	526,
			"primary_score":	999994,
			"second_score":	122307
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	529,
			"primary_score":	999949,
			"second_score":	122306
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	531,
			"primary_score":	999949,
			"second_score":	122305
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	532,
			"primary_score":	999949,
			"second_score":	122304
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	534,
			"primary_score":	999949,
			"second_score":	122303
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	545,
			"primary_score":	999949,
			"second_score":	122302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	546,
			"primary_score":	999949,
			"second_score":	122301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	547,
			"primary_score":	999949,
			"second_score":	122300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	549,
			"primary_score":	999949,
			"second_score":	122299
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	550,
			"primary_score":	999949,
			"second_score":	122298
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	552,
			"primary_score":	999949,
			"second_score":	122297
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	554,
			"primary_score":	999949,
			"second_score":	122244
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	562,
			"primary_score":	999951,
			"second_score":	122243
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	563,
			"primary_score":	999951,
			"second_score":	122242
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999611,
			"second_score":	122214
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999611,
			"second_score":	123662
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999611,
			"second_score":	123661
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999611,
			"second_score":	123660
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999611,
			"second_score":	123659
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999611,
			"second_score":	123658
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999611,
			"second_score":	123657
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999611,
			"second_score":	123656
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	604,
			"primary_score":	999630,
			"second_score":	128377
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	605,
			"primary_score":	999630,
			"second_score":	128376
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	606,
			"primary_score":	999630,
			"second_score":	128375
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	607,
			"primary_score":	999630,
			"second_score":	128374
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	608,
			"primary_score":	999630,
			"second_score":	128373
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	609,
			"primary_score":	999630,
			"second_score":	128372
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	610,
			"primary_score":	999630,
			"second_score":	128371
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999611,
			"second_score":	123655
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999611,
			"second_score":	123645
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999611,
			"second_score":	123641
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999611,
			"second_score":	123640
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999611,
			"second_score":	123639
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999611,
			"second_score":	123638
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999611,
			"second_score":	123574
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999611,
			"second_score":	123571
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999611,
			"second_score":	123570
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999611,
			"second_score":	123569
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999611,
			"second_score":	123568
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999611,
			"second_score":	123567
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999611,
			"second_score":	123566
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999611,
			"second_score":	123565
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999611,
			"second_score":	123554
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999611,
			"second_score":	123545
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999611,
			"second_score":	123544
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999611,
			"second_score":	123543
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999611,
			"second_score":	122753
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	644,
			"primary_score":	999626,
			"second_score":	122752
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	646,
			"primary_score":	999947,
			"second_score":	128354
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	647,
			"primary_score":	999947,
			"second_score":	128353
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	648,
			"primary_score":	999947,
			"second_score":	128352
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	649,
			"primary_score":	999947,
			"second_score":	128351
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	650,
			"primary_score":	999947,
			"second_score":	128350
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	651,
			"primary_score":	999947,
			"second_score":	128349
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	660,
			"primary_score":	999947,
			"second_score":	128348
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	661,
			"primary_score":	999947,
			"second_score":	128347
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	662,
			"primary_score":	999947,
			"second_score":	128346
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999611,
			"second_score":	122723
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999611,
			"second_score":	122722
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999611,
			"second_score":	122721
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	713,
			"primary_score":	999634,
			"second_score":	128762
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	714,
			"primary_score":	999637,
			"second_score":	128761
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	722,
			"primary_score":	999637,
			"second_score":	128760
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	724,
			"primary_score":	999634,
			"second_score":	128721
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	725,
			"primary_score":	999634,
			"second_score":	128720
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	726,
			"primary_score":	999634,
			"second_score":	128719
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999611,
			"second_score":	122720
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999611,
			"second_score":	122719
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999611,
			"second_score":	122718
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999611,
			"second_score":	122670
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999611,
			"second_score":	122669
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	747,
			"primary_score":	999630,
			"second_score":	128386
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	748,
			"primary_score":	999630,
			"second_score":	128385
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	753,
			"primary_score":	999938,
			"second_score":	128179
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	754,
			"primary_score":	999938,
			"second_score":	128178
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	755,
			"primary_score":	999938,
			"second_score":	128177
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	757,
			"primary_score":	999938,
			"second_score":	128172
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	758,
			"primary_score":	999938,
			"second_score":	128171
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	779,
			"primary_score":	999938,
			"second_score":	128170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	781,
			"primary_score":	999938,
			"second_score":	128169
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	782,
			"primary_score":	999938,
			"second_score":	128160
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	783,
			"primary_score":	999938,
			"second_score":	128149
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	784,
			"primary_score":	999938,
			"second_score":	128147
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	785,
			"primary_score":	999938,
			"second_score":	128146
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	788,
			"primary_score":	999938,
			"second_score":	128144
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	789,
			"primary_score":	999938,
			"second_score":	128143
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	794,
			"primary_score":	999620,
			"second_score":	130147
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	795,
			"primary_score":	999620,
			"second_score":	130146
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	796,
			"primary_score":	999620,
			"second_score":	130145
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	798,
			"primary_score":	999620,
			"second_score":	130144
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	799,
			"primary_score":	999620,
			"second_score":	130143
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	808,
			"primary_score":	999620,
			"second_score":	130142
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	809,
			"primary_score":	999620,
			"second_score":	130059
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	810,
			"primary_score":	999620,
			"second_score":	129507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	812,
			"primary_score":	999620,
			"second_score":	129504
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	814,
			"primary_score":	999620,
			"second_score":	129498
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	815,
			"primary_score":	999853,
			"second_score":	130375
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	816,
			"primary_score":	999854,
			"second_score":	130374
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	820,
			"primary_score":	999853,
			"second_score":	130370
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	822,
			"primary_score":	999717,
			"second_score":	129497
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	823,
			"primary_score":	999718,
			"second_score":	129496
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	824,
			"primary_score":	999718,
			"second_score":	129494
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	827,
			"primary_score":	999717,
			"second_score":	129490
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	830,
			"primary_score":	999717,
			"second_score":	129452
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	831,
			"primary_score":	999717,
			"second_score":	129451
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	832,
			"primary_score":	999717,
			"second_score":	129450
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	834,
			"primary_score":	999717,
			"second_score":	129449
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	835,
			"primary_score":	999717,
			"second_score":	129448
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	984,
			"primary_score":	999868,
			"second_score":	122237
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1151,
			"primary_score":	999618,
			"second_score":	130195
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1153,
			"primary_score":	999618,
			"second_score":	130194
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1154,
			"primary_score":	999618,
			"second_score":	130193
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1155,
			"primary_score":	999618,
			"second_score":	130192
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1161,
			"primary_score":	999618,
			"second_score":	130191
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1163,
			"primary_score":	999618,
			"second_score":	130190
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1164,
			"primary_score":	999618,
			"second_score":	130189
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1167,
			"primary_score":	999618,
			"second_score":	130188
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1168,
			"primary_score":	999620,
			"second_score":	130154
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1178,
			"primary_score":	999620,
			"second_score":	130152
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1179,
			"primary_score":	999620,
			"second_score":	130151
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1185,
			"primary_score":	999993,
			"second_score":	128465
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1186,
			"primary_score":	999993,
			"second_score":	128464
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1187,
			"primary_score":	999993,
			"second_score":	128463
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1189,
			"primary_score":	999993,
			"second_score":	128457
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1190,
			"primary_score":	999993,
			"second_score":	128456
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1191,
			"primary_score":	999993,
			"second_score":	128455
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1193,
			"primary_score":	999993,
			"second_score":	128454
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1197,
			"primary_score":	999993,
			"second_score":	128443
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1199,
			"primary_score":	999993,
			"second_score":	128441
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1201,
			"primary_score":	999993,
			"second_score":	128440
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999611,
			"second_score":	121634
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999611,
			"second_score":	121633
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999611,
			"second_score":	121632
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999611,
			"second_score":	121631
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999611,
			"second_score":	121630
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999611,
			"second_score":	121629
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999611,
			"second_score":	121628
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999611,
			"second_score":	121564
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999611,
			"second_score":	121563
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999611,
			"second_score":	123686
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999611,
			"second_score":	123685
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999611,
			"second_score":	123684
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999611,
			"second_score":	123678
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999611,
			"second_score":	123677
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999611,
			"second_score":	123666
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999611,
			"second_score":	123664
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999611,
			"second_score":	123663
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999611,
			"second_score":	122233
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999611,
			"second_score":	122232
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999611,
			"second_score":	122231
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999611,
			"second_score":	122230
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999611,
			"second_score":	122229
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999611,
			"second_score":	122228
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999611,
			"second_score":	119269
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999611,
			"second_score":	119268
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999611,
			"second_score":	119267
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999611,
			"second_score":	119266
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999611,
			"second_score":	119242
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999611,
			"second_score":	119234
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999611,
			"second_score":	119231
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999611,
			"second_score":	122227
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999611,
			"second_score":	133514
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999611,
			"second_score":	133513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999611,
			"second_score":	133512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999611,
			"second_score":	133511
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999611,
			"second_score":	133510
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999611,
			"second_score":	133509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999611,
			"second_score":	133508
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999611,
			"second_score":	133507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999611,
			"second_score":	133483
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999611,
			"second_score":	133475
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999611,
			"second_score":	133474
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999611,
			"second_score":	133468
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999611,
			"second_score":	133464
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999611,
			"second_score":	133463
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999611,
			"second_score":	119977
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6006,
			"primary_score":	999611,
			"second_score":	119976
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999611,
			"second_score":	119975
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6008,
			"primary_score":	999611,
			"second_score":	119974
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6010,
			"primary_score":	999611,
			"second_score":	119973
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6011,
			"primary_score":	999611,
			"second_score":	119972
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6013,
			"primary_score":	999611,
			"second_score":	119970
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6020,
			"primary_score":	999611,
			"second_score":	119969
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6023,
			"primary_score":	999611,
			"second_score":	119956
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6024,
			"primary_score":	999611,
			"second_score":	119930
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6025,
			"primary_score":	999611,
			"second_score":	119929
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10190,
			"primary_score":	999611,
			"second_score":	121774
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10191,
			"primary_score":	999611,
			"second_score":	121773
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10192,
			"primary_score":	999611,
			"second_score":	121772
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999611,
			"second_score":	121771
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10195,
			"primary_score":	999611,
			"second_score":	121770
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999611,
			"second_score":	121769
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999611,
			"second_score":	121758
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10205,
			"primary_score":	999611,
			"second_score":	121757
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10208,
			"primary_score":	999611,
			"second_score":	121693
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10209,
			"primary_score":	999611,
			"second_score":	121639
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10210,
			"primary_score":	999611,
			"second_score":	121638
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999611,
			"second_score":	121035
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999611,
			"second_score":	121034
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10225,
			"primary_score":	999611,
			"second_score":	121033
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10226,
			"primary_score":	999611,
			"second_score":	121032
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999611,
			"second_score":	121031
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10229,
			"primary_score":	999611,
			"second_score":	121030
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10231,
			"primary_score":	999611,
			"second_score":	121019
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10234,
			"primary_score":	999611,
			"second_score":	121018
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10235,
			"primary_score":	999611,
			"second_score":	121013
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999611,
			"second_score":	120982
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10240,
			"primary_score":	999611,
			"second_score":	120981
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10248,
			"primary_score":	999611,
			"second_score":	120980
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10531,
			"primary_score":	999611,
			"second_score":	123742
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10532,
			"primary_score":	999611,
			"second_score":	123741
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10533,
			"primary_score":	999611,
			"second_score":	123740
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10534,
			"primary_score":	999611,
			"second_score":	123739
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10536,
			"primary_score":	999611,
			"second_score":	123728
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10537,
			"primary_score":	999987,
			"second_score":	123727
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10538,
			"primary_score":	999987,
			"second_score":	123703
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10539,
			"primary_score":	999987,
			"second_score":	123701
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10540,
			"primary_score":	999611,
			"second_score":	126271
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999611,
			"second_score":	123699
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10550,
			"primary_score":	999611,
			"second_score":	123697
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999611,
			"second_score":	123693
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999611,
			"second_score":	123691
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999611,
			"second_score":	123690
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10559,
			"primary_score":	999611,
			"second_score":	123436
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10560,
			"primary_score":	999611,
			"second_score":	123435
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10561,
			"primary_score":	999611,
			"second_score":	123434
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10563,
			"primary_score":	999611,
			"second_score":	123433
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10564,
			"primary_score":	999611,
			"second_score":	123432
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10565,
			"primary_score":	999611,
			"second_score":	123431
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10566,
			"primary_score":	999611,
			"second_score":	123430
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10646,
			"primary_score":	999958,
			"second_score":	123746
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10648,
			"primary_score":	999958,
			"second_score":	123745
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10652,
			"primary_score":	999958,
			"second_score":	123744
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10653,
			"primary_score":	999958,
			"second_score":	123743
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10673,
			"primary_score":	999890,
			"second_score":	126846
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10675,
			"primary_score":	999890,
			"second_score":	126845
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10676,
			"primary_score":	999890,
			"second_score":	126844
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10677,
			"primary_score":	999890,
			"second_score":	126574
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10678,
			"primary_score":	999890,
			"second_score":	126573
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11085,
			"primary_score":	999894,
			"second_score":	126950
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11087,
			"primary_score":	999894,
			"second_score":	126949
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11088,
			"primary_score":	999894,
			"second_score":	126948
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11089,
			"primary_score":	999894,
			"second_score":	126947
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11090,
			"primary_score":	999894,
			"second_score":	126946
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11091,
			"primary_score":	999894,
			"second_score":	126945
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11092,
			"primary_score":	999894,
			"second_score":	126944
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11093,
			"primary_score":	999894,
			"second_score":	126943
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11094,
			"primary_score":	999894,
			"second_score":	126942
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11095,
			"primary_score":	999894,
			"second_score":	126941
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11097,
			"primary_score":	999894,
			"second_score":	126940
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11099,
			"primary_score":	999894,
			"second_score":	126939
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11151,
			"primary_score":	999921,
			"second_score":	126933
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11152,
			"primary_score":	999921,
			"second_score":	126880
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11158,
			"primary_score":	999919,
			"second_score":	126879
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11160,
			"primary_score":	999924,
			"second_score":	126852
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11164,
			"primary_score":	999924,
			"second_score":	126851
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11166,
			"primary_score":	999919,
			"second_score":	127237
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11167,
			"primary_score":	999919,
			"second_score":	127211
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11171,
			"primary_score":	999919,
			"second_score":	127210
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11175,
			"primary_score":	999919,
			"second_score":	127209
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11176,
			"primary_score":	999957,
			"second_score":	127208
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11177,
			"primary_score":	999957,
			"second_score":	127207
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11178,
			"primary_score":	999957,
			"second_score":	127143
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11187,
			"primary_score":	999919,
			"second_score":	127142
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11190,
			"primary_score":	999894,
			"second_score":	127141
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11196,
			"primary_score":	999895,
			"second_score":	127140
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11197,
			"primary_score":	999895,
			"second_score":	127138
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11200,
			"primary_score":	999894,
			"second_score":	127134
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11201,
			"primary_score":	999948,
			"second_score":	127133
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11203,
			"primary_score":	999948,
			"second_score":	127132
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11206,
			"primary_score":	999977,
			"second_score":	127131
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11207,
			"primary_score":	999977,
			"second_score":	127130
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11208,
			"primary_score":	999977,
			"second_score":	127129
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11220,
			"primary_score":	999894,
			"second_score":	127128
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11221,
			"primary_score":	999894,
			"second_score":	127127
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11222,
			"primary_score":	999894,
			"second_score":	127126
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999611,
			"second_score":	120094
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999611,
			"second_score":	120093
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11275,
			"primary_score":	999611,
			"second_score":	120092
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11277,
			"primary_score":	999611,
			"second_score":	120091
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11278,
			"primary_score":	999611,
			"second_score":	120090
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11280,
			"primary_score":	999611,
			"second_score":	120079
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11281,
			"primary_score":	999611,
			"second_score":	120076
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11282,
			"primary_score":	999611,
			"second_score":	120075
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11284,
			"primary_score":	999611,
			"second_score":	120041
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11285,
			"primary_score":	999611,
			"second_score":	119987
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11286,
			"primary_score":	999611,
			"second_score":	119986
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26220,
			"primary_score":	999774,
			"second_score":	128407
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26221,
			"primary_score":	999774,
			"second_score":	128406
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26223,
			"primary_score":	999774,
			"second_score":	128405
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26225,
			"primary_score":	999774,
			"second_score":	128401
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26229,
			"primary_score":	999774,
			"second_score":	128400
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26238,
			"primary_score":	999774,
			"second_score":	128398
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26239,
			"primary_score":	999774,
			"second_score":	128396
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26240,
			"primary_score":	999774,
			"second_score":	128392
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26242,
			"primary_score":	999774,
			"second_score":	128391
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26243,
			"primary_score":	999774,
			"second_score":	128390
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26334,
			"primary_score":	999774,
			"second_score":	128411
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26336,
			"primary_score":	999774,
			"second_score":	128410
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26340,
			"primary_score":	999774,
			"second_score":	128409
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26341,
			"primary_score":	999774,
			"second_score":	128408
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26619,
			"primary_score":	999899,
			"second_score":	128139
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26621,
			"primary_score":	999899,
			"second_score":	128138
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26622,
			"primary_score":	999899,
			"second_score":	128137
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26623,
			"primary_score":	999899,
			"second_score":	128136
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26624,
			"primary_score":	999899,
			"second_score":	128135
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26625,
			"primary_score":	999899,
			"second_score":	128134
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26627,
			"primary_score":	999899,
			"second_score":	128133
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26629,
			"primary_score":	999899,
			"second_score":	128132
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26658,
			"primary_score":	999904,
			"second_score":	128131
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26659,
			"primary_score":	999904,
			"second_score":	128127
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26671,
			"primary_score":	999904,
			"second_score":	128126
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26672,
			"primary_score":	999929,
			"second_score":	128125
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26673,
			"primary_score":	999929,
			"second_score":	128119
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26691,
			"primary_score":	999899,
			"second_score":	128118
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26692,
			"primary_score":	999924,
			"second_score":	128117
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26694,
			"primary_score":	999927,
			"second_score":	127463
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26695,
			"primary_score":	999928,
			"second_score":	127462
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26706,
			"primary_score":	999903,
			"second_score":	127353
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26708,
			"primary_score":	999903,
			"second_score":	127352
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26709,
			"primary_score":	999928,
			"second_score":	127351
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26710,
			"primary_score":	999928,
			"second_score":	127350
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26711,
			"primary_score":	999928,
			"second_score":	127349
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26712,
			"primary_score":	999928,
			"second_score":	127297
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26718,
			"primary_score":	999931,
			"second_score":	127296
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26719,
			"primary_score":	999931,
			"second_score":	127263
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26724,
			"primary_score":	999931,
			"second_score":	127262
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26751,
			"primary_score":	999906,
			"second_score":	127261
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26754,
			"primary_score":	999908,
			"second_score":	127260
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26755,
			"primary_score":	999908,
			"second_score":	127259
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27742,
			"primary_score":	999981,
			"second_score":	126256
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27744,
			"primary_score":	999981,
			"second_score":	126255
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27746,
			"primary_score":	999981,
			"second_score":	126254
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27748,
			"primary_score":	999981,
			"second_score":	126253
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27753,
			"primary_score":	999981,
			"second_score":	126252
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27754,
			"primary_score":	999981,
			"second_score":	126248
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27757,
			"primary_score":	999981,
			"second_score":	123751
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27758,
			"primary_score":	999981,
			"second_score":	123750
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27903,
			"primary_score":	999982,
			"second_score":	126357
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27905,
			"primary_score":	999982,
			"second_score":	126356
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27907,
			"primary_score":	999982,
			"second_score":	126355
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27909,
			"primary_score":	999982,
			"second_score":	126354
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27910,
			"primary_score":	999982,
			"second_score":	126353
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27911,
			"primary_score":	999982,
			"second_score":	126349
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27913,
			"primary_score":	999982,
			"second_score":	126348
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27920,
			"primary_score":	999982,
			"second_score":	126347
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27922,
			"primary_score":	999982,
			"second_score":	126346
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27927,
			"primary_score":	999982,
			"second_score":	126345
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27929,
			"primary_score":	999982,
			"second_score":	126302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27930,
			"primary_score":	999982,
			"second_score":	126300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27932,
			"primary_score":	999982,
			"second_score":	126296
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27939,
			"primary_score":	999982,
			"second_score":	126295
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27940,
			"primary_score":	999982,
			"second_score":	126294
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27945,
			"primary_score":	999983,
			"second_score":	126358
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28562,
			"primary_score":	999990,
			"second_score":	126569
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28564,
			"primary_score":	999990,
			"second_score":	126568
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28565,
			"primary_score":	999990,
			"second_score":	126567
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28566,
			"primary_score":	999990,
			"second_score":	126566
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28568,
			"primary_score":	999990,
			"second_score":	126565
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28569,
			"primary_score":	999990,
			"second_score":	126564
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28570,
			"primary_score":	999990,
			"second_score":	126560
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28572,
			"primary_score":	999990,
			"second_score":	126559
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28573,
			"primary_score":	999990,
			"second_score":	126558
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28574,
			"primary_score":	1000000,
			"second_score":	126552
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28576,
			"primary_score":	999990,
			"second_score":	126506
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28628,
			"primary_score":	999990,
			"second_score":	126505
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28631,
			"primary_score":	999990,
			"second_score":	126504
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28632,
			"primary_score":	999990,
			"second_score":	126365
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28637,
			"primary_score":	999990,
			"second_score":	126364
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28649,
			"primary_score":	999990,
			"second_score":	126363
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	28650,
			"primary_score":	999990,
			"second_score":	126362
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30179,
			"primary_score":	999886,
			"second_score":	127063
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30180,
			"primary_score":	999886,
			"second_score":	127062
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30181,
			"primary_score":	999886,
			"second_score":	127061
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30182,
			"primary_score":	999886,
			"second_score":	127060
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30184,
			"primary_score":	999886,
			"second_score":	127059
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30185,
			"primary_score":	999886,
			"second_score":	127058
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30186,
			"primary_score":	999886,
			"second_score":	127056
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30188,
			"primary_score":	999886,
			"second_score":	127045
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30202,
			"primary_score":	999886,
			"second_score":	127044
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30211,
			"primary_score":	999886,
			"second_score":	127043
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30212,
			"primary_score":	999886,
			"second_score":	127042
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30218,
			"primary_score":	999886,
			"second_score":	126961
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30226,
			"primary_score":	999886,
			"second_score":	126960
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	30227,
			"primary_score":	999886,
			"second_score":	126959
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32112,
			"primary_score":	999649,
			"second_score":	127122
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999649,
			"second_score":	127121
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32114,
			"primary_score":	999649,
			"second_score":	127120
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32115,
			"primary_score":	999649,
			"second_score":	127119
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32117,
			"primary_score":	999649,
			"second_score":	127118
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32118,
			"primary_score":	999649,
			"second_score":	127117
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32119,
			"primary_score":	999649,
			"second_score":	127106
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32121,
			"primary_score":	999649,
			"second_score":	127095
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32135,
			"primary_score":	999649,
			"second_score":	127094
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32144,
			"primary_score":	999649,
			"second_score":	127093
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32146,
			"primary_score":	999649,
			"second_score":	127092
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32149,
			"primary_score":	999649,
			"second_score":	127091
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32151,
			"primary_score":	999649,
			"second_score":	127071
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32158,
			"primary_score":	999653,
			"second_score":	128493
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32160,
			"primary_score":	999649,
			"second_score":	127068
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32161,
			"primary_score":	999649,
			"second_score":	127067
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999611,
			"second_score":	120659
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999611,
			"second_score":	120658
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999611,
			"second_score":	120657
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999611,
			"second_score":	120656
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999611,
			"second_score":	120655
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999611,
			"second_score":	53639
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999611,
			"second_score":	52960
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999611,
			"second_score":	52959
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999611,
			"second_score":	58703
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999611,
			"second_score":	58688
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999611,
			"second_score":	58673
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999611,
			"second_score":	58658
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999611,
			"second_score":	58439
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999611,
			"second_score":	58334
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999611,
			"second_score":	58277
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999611,
			"second_score":	58262
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999611,
			"second_score":	58247
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999611,
			"second_score":	58130
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999611,
			"second_score":	57995
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999611,
			"second_score":	57878
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999611,
			"second_score":	57755
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999611,
			"second_score":	57734
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999611,
			"second_score":	57689
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999611,
			"second_score":	57650
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999611,
			"second_score":	57509
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999611,
			"second_score":	57392
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999611,
			"second_score":	57251
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999611,
			"second_score":	57134
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999611,
			"second_score":	57119
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999611,
			"second_score":	56966
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999611,
			"second_score":	54024
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999611,
			"second_score":	60111
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999611,
			"second_score":	59470
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999611,
			"second_score":	121152
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999611,
			"second_score":	121151
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999611,
			"second_score":	121150
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999611,
			"second_score":	121149
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999611,
			"second_score":	120681
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999611,
			"second_score":	120680
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999611,
			"second_score":	120679
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999611,
			"second_score":	60990
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999611,
			"second_score":	60711
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999611,
			"second_score":	62317
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999611,
			"second_score":	62266
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999611,
			"second_score":	61583
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999611,
			"second_score":	62316
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999611,
			"second_score":	62267
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999611,
			"second_score":	54468
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999611,
			"second_score":	54467
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999611,
			"second_score":	54466
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999611,
			"second_score":	54465
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999611,
			"second_score":	54446
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999611,
			"second_score":	54470
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999611,
			"second_score":	54469
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999611,
			"second_score":	54445
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999611,
			"second_score":	120675
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999611,
			"second_score":	120674
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999611,
			"second_score":	120673
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999611,
			"second_score":	120672
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999611,
			"second_score":	120671
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999611,
			"second_score":	120670
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999611,
			"second_score":	120669
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999611,
			"second_score":	120665
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999611,
			"second_score":	120664
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999611,
			"second_score":	120663
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999611,
			"second_score":	54990
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999611,
			"second_score":	55618
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999611,
			"second_score":	54994
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999611,
			"second_score":	64836
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999611,
			"second_score":	64817
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999611,
			"second_score":	64737
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999611,
			"second_score":	64728
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999611,
			"second_score":	63388
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999611,
			"second_score":	64727
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999611,
			"second_score":	64837
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999611,
			"second_score":	64779
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999611,
			"second_score":	99166
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999611,
			"second_score":	99165
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999611,
			"second_score":	99140
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999611,
			"second_score":	99103
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999611,
			"second_score":	99076
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999611,
			"second_score":	99050
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999611,
			"second_score":	99023
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999611,
			"second_score":	98992
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999611,
			"second_score":	98963
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999611,
			"second_score":	98934
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999611,
			"second_score":	98906
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999611,
			"second_score":	98877
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999611,
			"second_score":	98848
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999611,
			"second_score":	98819
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999611,
			"second_score":	98790
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999611,
			"second_score":	98761
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999611,
			"second_score":	98733
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999611,
			"second_score":	98702
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999611,
			"second_score":	98671
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999611,
			"second_score":	98638
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999611,
			"second_score":	98613
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999611,
			"second_score":	98589
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999611,
			"second_score":	98559
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999611,
			"second_score":	98551
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999611,
			"second_score":	99204
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999611,
			"second_score":	99167
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999611,
			"second_score":	98558
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999611,
			"second_score":	98557
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999611,
			"second_score":	98556
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999611,
			"second_score":	98555
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999611,
			"second_score":	121240
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999611,
			"second_score":	121239
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999611,
			"second_score":	121238
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999611,
			"second_score":	121237
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999611,
			"second_score":	121236
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999611,
			"second_score":	121173
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999611,
			"second_score":	121172
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999611,
			"second_score":	121171
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999611,
			"second_score":	121175
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999611,
			"second_score":	121177
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999611,
			"second_score":	121176
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999611,
			"second_score":	121174
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999611,
			"second_score":	121170
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999611,
			"second_score":	121164
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999611,
			"second_score":	121163
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999611,
			"second_score":	67296
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999611,
			"second_score":	65864
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999611,
			"second_score":	65863
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999611,
			"second_score":	65862
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2600,
			"primary_score":	999611,
			"second_score":	98263
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2601,
			"primary_score":	999611,
			"second_score":	98262
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1018,
			"primary_score":	999611,
			"second_score":	121159
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1023,
			"primary_score":	999611,
			"second_score":	121158
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1028,
			"primary_score":	999611,
			"second_score":	121157
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1031,
			"primary_score":	999611,
			"second_score":	121156
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	79,
			"primary_score":	999849,
			"second_score":	126227
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	84,
			"primary_score":	999849,
			"second_score":	126226
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	85,
			"primary_score":	999975,
			"second_score":	126873
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	86,
			"primary_score":	999975,
			"second_score":	126870
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	87,
			"primary_score":	999849,
			"second_score":	126225
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	93,
			"primary_score":	999849,
			"second_score":	126224
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	101,
			"primary_score":	999849,
			"second_score":	126381
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	102,
			"primary_score":	999849,
			"second_score":	126380
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	103,
			"primary_score":	999870,
			"second_score":	127317
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	115,
			"primary_score":	999975,
			"second_score":	126401
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	120,
			"primary_score":	999975,
			"second_score":	126400
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	121,
			"primary_score":	999975,
			"second_score":	126399
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	122,
			"primary_score":	999979,
			"second_score":	126906
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	123,
			"primary_score":	999980,
			"second_score":	126905
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	128,
			"primary_score":	999987,
			"second_score":	126398
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	129,
			"primary_score":	999987,
			"second_score":	126366
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	135,
			"primary_score":	999985,
			"second_score":	126411
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	136,
			"primary_score":	999985,
			"second_score":	126402
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	143,
			"primary_score":	999849,
			"second_score":	121782
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	145,
			"primary_score":	999849,
			"second_score":	121781
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	147,
			"primary_score":	999849,
			"second_score":	121777
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	148,
			"primary_score":	999849,
			"second_score":	121753
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	150,
			"primary_score":	999849,
			"second_score":	121722
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	155,
			"primary_score":	999849,
			"second_score":	121721
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	164,
			"primary_score":	999849,
			"second_score":	127917
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	165,
			"primary_score":	999849,
			"second_score":	127916
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	166,
			"primary_score":	999849,
			"second_score":	127915
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	167,
			"primary_score":	999849,
			"second_score":	127914
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	168,
			"primary_score":	999849,
			"second_score":	127913
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	170,
			"primary_score":	999849,
			"second_score":	127912
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	171,
			"primary_score":	999849,
			"second_score":	127831
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	172,
			"primary_score":	999849,
			"second_score":	127830
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	173,
			"primary_score":	999849,
			"second_score":	127829
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	175,
			"primary_score":	999849,
			"second_score":	127802
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	176,
			"primary_score":	999849,
			"second_score":	127797
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	178,
			"primary_score":	999849,
			"second_score":	127794
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	179,
			"primary_score":	999849,
			"second_score":	127793
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	180,
			"primary_score":	999849,
			"second_score":	127792
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	181,
			"primary_score":	999849,
			"second_score":	127791
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	182,
			"primary_score":	999974,
			"second_score":	127790
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	184,
			"primary_score":	999974,
			"second_score":	127787
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	185,
			"primary_score":	999974,
			"second_score":	127786
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	186,
			"primary_score":	999974,
			"second_score":	127785
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	187,
			"primary_score":	999974,
			"second_score":	127784
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	198,
			"primary_score":	999980,
			"second_score":	127783
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	199,
			"primary_score":	999980,
			"second_score":	127782
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	200,
			"primary_score":	999980,
			"second_score":	127780
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	203,
			"primary_score":	999849,
			"second_score":	129900
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	204,
			"primary_score":	999849,
			"second_score":	129813
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	205,
			"primary_score":	999849,
			"second_score":	129711
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	208,
			"primary_score":	999849,
			"second_score":	127779
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	209,
			"primary_score":	999849,
			"second_score":	127762
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	210,
			"primary_score":	999849,
			"second_score":	127761
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	211,
			"primary_score":	999887,
			"second_score":	127760
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	212,
			"primary_score":	999887,
			"second_score":	127759
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	213,
			"primary_score":	999887,
			"second_score":	127758
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	214,
			"primary_score":	999917,
			"second_score":	129687
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	215,
			"primary_score":	999936,
			"second_score":	129686
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	216,
			"primary_score":	999936,
			"second_score":	129685
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	218,
			"primary_score":	999958,
			"second_score":	129690
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	219,
			"primary_score":	999958,
			"second_score":	129689
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	221,
			"primary_score":	999849,
			"second_score":	127757
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	224,
			"primary_score":	999849,
			"second_score":	127756
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	225,
			"primary_score":	999958,
			"second_score":	129682
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	226,
			"primary_score":	999958,
			"second_score":	129654
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	227,
			"primary_score":	999964,
			"second_score":	129653
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	229,
			"primary_score":	999958,
			"second_score":	129652
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	230,
			"primary_score":	999958,
			"second_score":	129624
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	231,
			"primary_score":	999965,
			"second_score":	129623
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	233,
			"primary_score":	999958,
			"second_score":	129622
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	234,
			"primary_score":	999958,
			"second_score":	129589
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	235,
			"primary_score":	999963,
			"second_score":	129588
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	237,
			"primary_score":	999958,
			"second_score":	129587
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	238,
			"primary_score":	999958,
			"second_score":	129559
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	239,
			"primary_score":	999963,
			"second_score":	129558
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	241,
			"primary_score":	999958,
			"second_score":	129557
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	242,
			"primary_score":	999958,
			"second_score":	129533
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	243,
			"primary_score":	999965,
			"second_score":	129532
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	248,
			"primary_score":	999849,
			"second_score":	127755
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	249,
			"primary_score":	999887,
			"second_score":	127754
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	250,
			"primary_score":	999887,
			"second_score":	127753
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	251,
			"primary_score":	999887,
			"second_score":	127728
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	252,
			"primary_score":	999887,
			"second_score":	127706
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	253,
			"primary_score":	999887,
			"second_score":	127686
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	254,
			"primary_score":	999887,
			"second_score":	127662
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	256,
			"primary_score":	999887,
			"second_score":	127641
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	265,
			"primary_score":	999849,
			"second_score":	127640
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	266,
			"primary_score":	999849,
			"second_score":	127595
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	273,
			"primary_score":	999849,
			"second_score":	130006
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	274,
			"primary_score":	999849,
			"second_score":	130005
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	299,
			"primary_score":	999982,
			"second_score":	126233
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	300,
			"primary_score":	999982,
			"second_score":	126230
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	301,
			"primary_score":	999982,
			"second_score":	126229
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	302,
			"primary_score":	999982,
			"second_score":	126228
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	309,
			"primary_score":	999982,
			"second_score":	126219
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	313,
			"primary_score":	999983,
			"second_score":	126218
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	318,
			"primary_score":	999983,
			"second_score":	126217
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	321,
			"primary_score":	999987,
			"second_score":	126191
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	328,
			"primary_score":	999988,
			"second_score":	126190
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	329,
			"primary_score":	999988,
			"second_score":	123763
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	366,
			"primary_score":	999982,
			"second_score":	126240
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	368,
			"primary_score":	999982,
			"second_score":	126239
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	369,
			"primary_score":	999982,
			"second_score":	126238
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	370,
			"primary_score":	999982,
			"second_score":	126235
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	384,
			"primary_score":	999982,
			"second_score":	126234
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	389,
			"primary_score":	999982,
			"second_score":	123762
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	407,
			"primary_score":	999982,
			"second_score":	123761
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	412,
			"primary_score":	999982,
			"second_score":	126241
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	491,
			"primary_score":	999985,
			"second_score":	126502
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	492,
			"primary_score":	999985,
			"second_score":	126499
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	493,
			"primary_score":	999985,
			"second_score":	126498
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	495,
			"primary_score":	999985,
			"second_score":	126497
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	502,
			"primary_score":	999985,
			"second_score":	126496
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	505,
			"primary_score":	999987,
			"second_score":	126487
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	509,
			"primary_score":	999987,
			"second_score":	126486
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	514,
			"primary_score":	999987,
			"second_score":	126485
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	518,
			"primary_score":	999987,
			"second_score":	126413
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	541,
			"primary_score":	999985,
			"second_score":	126412
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	546,
			"primary_score":	999986,
			"second_score":	126503
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	825,
			"primary_score":	999849,
			"second_score":	126378
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	826,
			"primary_score":	999849,
			"second_score":	126377
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	827,
			"primary_score":	999849,
			"second_score":	126376
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	829,
			"primary_score":	999849,
			"second_score":	126375
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	830,
			"primary_score":	999962,
			"second_score":	126374
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	831,
			"primary_score":	999962,
			"second_score":	126373
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	832,
			"primary_score":	999981,
			"second_score":	127299
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	833,
			"primary_score":	999981,
			"second_score":	127298
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	836,
			"primary_score":	999973,
			"second_score":	126367
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	845,
			"primary_score":	999849,
			"second_score":	129510
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	850,
			"primary_score":	999927,
			"second_score":	126903
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	851,
			"primary_score":	999927,
			"second_score":	126897
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	852,
			"primary_score":	999927,
			"second_score":	126894
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	853,
			"primary_score":	999981,
			"second_score":	126893
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	885,
			"primary_score":	999908,
			"second_score":	126806
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	887,
			"primary_score":	999908,
			"second_score":	126805
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	888,
			"primary_score":	999908,
			"second_score":	126802
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	890,
			"primary_score":	999908,
			"second_score":	126630
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	896,
			"primary_score":	999921,
			"second_score":	126878
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	897,
			"primary_score":	999921,
			"second_score":	126877
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	898,
			"primary_score":	999921,
			"second_score":	126876
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	900,
			"primary_score":	999921,
			"second_score":	126861
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	903,
			"primary_score":	999932,
			"second_score":	126860
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	908,
			"primary_score":	999932,
			"second_score":	126859
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	912,
			"primary_score":	999932,
			"second_score":	126858
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	920,
			"primary_score":	999932,
			"second_score":	127236
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	921,
			"primary_score":	999932,
			"second_score":	127235
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	922,
			"primary_score":	999932,
			"second_score":	127234
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	924,
			"primary_score":	999932,
			"second_score":	127219
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	927,
			"primary_score":	999944,
			"second_score":	127218
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	936,
			"primary_score":	999944,
			"second_score":	127206
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	937,
			"primary_score":	999944,
			"second_score":	127205
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	938,
			"primary_score":	999944,
			"second_score":	127204
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	940,
			"primary_score":	999944,
			"second_score":	127189
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	943,
			"primary_score":	999954,
			"second_score":	127188
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	948,
			"primary_score":	999954,
			"second_score":	127187
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	953,
			"primary_score":	999954,
			"second_score":	127181
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	960,
			"primary_score":	999929,
			"second_score":	126932
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	961,
			"primary_score":	999929,
			"second_score":	126931
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	962,
			"primary_score":	999929,
			"second_score":	126930
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	964,
			"primary_score":	999929,
			"second_score":	126915
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	967,
			"primary_score":	999940,
			"second_score":	126914
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	968,
			"primary_score":	999940,
			"second_score":	126911
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	973,
			"primary_score":	999940,
			"second_score":	126910
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	976,
			"primary_score":	999940,
			"second_score":	126904
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	985,
			"primary_score":	999849,
			"second_score":	126386
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	986,
			"primary_score":	999849,
			"second_score":	126382
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	987,
			"primary_score":	999849,
			"second_score":	126379
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	993,
			"primary_score":	999849,
			"second_score":	126397
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	995,
			"primary_score":	999849,
			"second_score":	126388
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1000,
			"primary_score":	999849,
			"second_score":	126387
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1006,
			"primary_score":	999925,
			"second_score":	127348
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1007,
			"primary_score":	999925,
			"second_score":	127347
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1009,
			"primary_score":	999925,
			"second_score":	127346
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1012,
			"primary_score":	999937,
			"second_score":	127345
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1013,
			"primary_score":	999937,
			"second_score":	127342
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1021,
			"primary_score":	999865,
			"second_score":	129185
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1025,
			"primary_score":	999865,
			"second_score":	129184
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1034,
			"primary_score":	999866,
			"second_score":	129183
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1038,
			"primary_score":	999866,
			"second_score":	129182
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1039,
			"primary_score":	999866,
			"second_score":	129120
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1041,
			"primary_score":	999865,
			"second_score":	129119
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1045,
			"primary_score":	999866,
			"second_score":	129118
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1047,
			"primary_score":	999865,
			"second_score":	129117
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1048,
			"primary_score":	999865,
			"second_score":	129116
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1049,
			"primary_score":	999865,
			"second_score":	129114
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1050,
			"primary_score":	999971,
			"second_score":	129113
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1051,
			"primary_score":	999971,
			"second_score":	129112
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1057,
			"primary_score":	999865,
			"second_score":	128840
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1073,
			"primary_score":	999903,
			"second_score":	127540
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1074,
			"primary_score":	999903,
			"second_score":	127539
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1076,
			"primary_score":	999903,
			"second_score":	127536
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1080,
			"primary_score":	999903,
			"second_score":	127535
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1082,
			"primary_score":	999903,
			"second_score":	127513
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1083,
			"primary_score":	999903,
			"second_score":	127511
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1084,
			"primary_score":	999903,
			"second_score":	127510
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1085,
			"primary_score":	999903,
			"second_score":	127509
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1086,
			"primary_score":	999903,
			"second_score":	127508
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1087,
			"primary_score":	999903,
			"second_score":	127507
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1089,
			"primary_score":	999903,
			"second_score":	127506
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1098,
			"primary_score":	999850,
			"second_score":	129277
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1099,
			"primary_score":	999850,
			"second_score":	129276
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1100,
			"primary_score":	999850,
			"second_score":	129275
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1101,
			"primary_score":	999850,
			"second_score":	129274
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1102,
			"primary_score":	999850,
			"second_score":	129273
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1103,
			"primary_score":	999850,
			"second_score":	129272
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1105,
			"primary_score":	999850,
			"second_score":	129271
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1109,
			"primary_score":	999864,
			"second_score":	129270
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1111,
			"primary_score":	999864,
			"second_score":	129260
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1113,
			"primary_score":	999864,
			"second_score":	129257
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1118,
			"primary_score":	999866,
			"second_score":	129188
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1122,
			"primary_score":	999866,
			"second_score":	129187
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1124,
			"primary_score":	999866,
			"second_score":	129186
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1126,
			"primary_score":	999866,
			"second_score":	128801
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1216,
			"primary_score":	999980,
			"second_score":	127967
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1217,
			"primary_score":	999980,
			"second_score":	127966
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1218,
			"primary_score":	999980,
			"second_score":	127963
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1219,
			"primary_score":	999980,
			"second_score":	127962
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1221,
			"primary_score":	999980,
			"second_score":	127953
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1225,
			"primary_score":	999980,
			"second_score":	127920
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1230,
			"primary_score":	999980,
			"second_score":	127919
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1231,
			"primary_score":	999980,
			"second_score":	127918
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1232,
			"primary_score":	999980,
			"second_score":	127594
		}, {
			"file":	"ext/spl/spl_array.c",
			"line":	1233,
			"primary_score":	999980,
			"second_score":	127592
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999611,
			"second_score":	56262
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999611,
			"second_score":	55653
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999611,
			"second_score":	97841
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999611,
			"second_score":	97839
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999611,
			"second_score":	97838
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999611,
			"second_score":	121211
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999611,
			"second_score":	121210
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3470,
			"primary_score":	999611,
			"second_score":	98035
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3471,
			"primary_score":	999611,
			"second_score":	98034
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3472,
			"primary_score":	999611,
			"second_score":	97995
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3645,
			"primary_score":	999611,
			"second_score":	98039
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3653,
			"primary_score":	999611,
			"second_score":	98036
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3659,
			"primary_score":	999611,
			"second_score":	97994
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3661,
			"primary_score":	999611,
			"second_score":	97953
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3662,
			"primary_score":	999611,
			"second_score":	97915
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3665,
			"primary_score":	999611,
			"second_score":	97878
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3666,
			"primary_score":	999611,
			"second_score":	97842
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3667,
			"primary_score":	999611,
			"second_score":	97840
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3668,
			"primary_score":	999611,
			"second_score":	97837
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3669,
			"primary_score":	999611,
			"second_score":	96760
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3670,
			"primary_score":	999611,
			"second_score":	96757
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3675,
			"primary_score":	999611,
			"second_score":	96435
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3678,
			"primary_score":	999611,
			"second_score":	96432
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999611,
			"second_score":	121232
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999611,
			"second_score":	121231
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3730,
			"primary_score":	999611,
			"second_score":	121230
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3732,
			"primary_score":	999611,
			"second_score":	121229
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999611,
			"second_score":	121221
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3741,
			"primary_score":	999611,
			"second_score":	121220
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3746,
			"primary_score":	999611,
			"second_score":	121219
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3747,
			"primary_score":	999611,
			"second_score":	121217
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3752,
			"primary_score":	999611,
			"second_score":	121216
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3758,
			"primary_score":	999611,
			"second_score":	121212
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3759,
			"primary_score":	999611,
			"second_score":	121209
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3760,
			"primary_score":	999611,
			"second_score":	121198
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3765,
			"primary_score":	999611,
			"second_score":	121187
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3771,
			"primary_score":	999611,
			"second_score":	121186
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3773,
			"primary_score":	999611,
			"second_score":	121183
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3774,
			"primary_score":	999611,
			"second_score":	121182
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3775,
			"primary_score":	999611,
			"second_score":	121181
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4526,
			"primary_score":	999611,
			"second_score":	122630
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4527,
			"primary_score":	999611,
			"second_score":	122629
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4528,
			"primary_score":	999611,
			"second_score":	122628
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4530,
			"primary_score":	999611,
			"second_score":	122627
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4534,
			"primary_score":	999611,
			"second_score":	122560
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4536,
			"primary_score":	999611,
			"second_score":	122529
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4545,
			"primary_score":	999611,
			"second_score":	122528
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5006,
			"primary_score":	999611,
			"second_score":	121906
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5018,
			"primary_score":	999611,
			"second_score":	120650
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5024,
			"primary_score":	999611,
			"second_score":	120649
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999611,
			"second_score":	97877
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999611,
			"second_score":	97844
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999611,
			"second_score":	97843
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999611,
			"second_score":	96434
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999611,
			"second_score":	96433
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999611,
			"second_score":	96759
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999611,
			"second_score":	96758
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999611,
			"second_score":	122324
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999611,
			"second_score":	122323
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999611,
			"second_score":	122322
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999611,
			"second_score":	122321
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999611,
			"second_score":	122211
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999611,
			"second_score":	121966
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999611,
			"second_score":	121962
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999611,
			"second_score":	121215
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999611,
			"second_score":	121214
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999611,
			"second_score":	121213
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999611,
			"second_score":	96756
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999611,
			"second_score":	96755
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999611,
			"second_score":	96476
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999611,
			"second_score":	96436
		}, {
			"file":	"ext/standard/head.c",
			"line":	68,
			"primary_score":	999611,
			"second_score":	125256
		}, {
			"file":	"ext/standard/head.c",
			"line":	71,
			"primary_score":	999611,
			"second_score":	125155
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999611,
			"second_score":	123852
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999611,
			"second_score":	123851
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999611,
			"second_score":	123850
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999611,
			"second_score":	123849
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999611,
			"second_score":	123848
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999611,
			"second_score":	123847
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999611,
			"second_score":	123846
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999611,
			"second_score":	123845
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999611,
			"second_score":	123844
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999611,
			"second_score":	123843
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999611,
			"second_score":	123136
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999611,
			"second_score":	123135
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999611,
			"second_score":	124801
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999611,
			"second_score":	124800
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999611,
			"second_score":	124799
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999611,
			"second_score":	124761
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999611,
			"second_score":	124760
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999611,
			"second_score":	123895
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999611,
			"second_score":	123894
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999611,
			"second_score":	123893
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999611,
			"second_score":	123855
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999611,
			"second_score":	120776
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999611,
			"second_score":	120743
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999611,
			"second_score":	120742
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999611,
			"second_score":	123074
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999611,
			"second_score":	123073
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999611,
			"second_score":	123072
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999611,
			"second_score":	123071
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999611,
			"second_score":	123070
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999611,
			"second_score":	123069
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999611,
			"second_score":	123068
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999611,
			"second_score":	123065
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999611,
			"second_score":	123064
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999611,
			"second_score":	123060
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999611,
			"second_score":	122051
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999611,
			"second_score":	123048
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999611,
			"second_score":	122042
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999611,
			"second_score":	122041
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999611,
			"second_score":	122072
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999611,
			"second_score":	122040
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999611,
			"second_score":	122029
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999611,
			"second_score":	122026
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999611,
			"second_score":	122025
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999611,
			"second_score":	123175
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999611,
			"second_score":	123174
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999611,
			"second_score":	123082
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999611,
			"second_score":	123081
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999611,
			"second_score":	123080
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999611,
			"second_score":	123079
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999611,
			"second_score":	123078
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999611,
			"second_score":	123076
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999611,
			"second_score":	123075
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999611,
			"second_score":	122016
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999611,
			"second_score":	120322
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999611,
			"second_score":	120321
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999611,
			"second_score":	120320
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999611,
			"second_score":	120319
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999611,
			"second_score":	120274
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999611,
			"second_score":	120273
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999611,
			"second_score":	120272
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999611,
			"second_score":	120238
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999611,
			"second_score":	120467
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999611,
			"second_score":	120466
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999611,
			"second_score":	120465
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999611,
			"second_score":	120464
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999611,
			"second_score":	120463
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999611,
			"second_score":	120462
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999611,
			"second_score":	120461
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999611,
			"second_score":	120460
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999611,
			"second_score":	120338
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999611,
			"second_score":	120335
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999611,
			"second_score":	120332
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999611,
			"second_score":	120329
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999611,
			"second_score":	120328
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999611,
			"second_score":	120326
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999611,
			"second_score":	120324
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999611,
			"second_score":	120323
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999611,
			"second_score":	120237
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999611,
			"second_score":	120468
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999611,
			"second_score":	98038
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999611,
			"second_score":	98037
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999611,
			"second_score":	97836
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999611,
			"second_score":	96761
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999611,
			"second_score":	121208
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999611,
			"second_score":	121207
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999611,
			"second_score":	121203
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999611,
			"second_score":	121199
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999611,
			"second_score":	121185
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999611,
			"second_score":	121184
		}, {
			"file":	"ext/standard/var.c",
			"line":	89,
			"primary_score":	999787,
			"second_score":	123007
		}, {
			"file":	"ext/standard/var.c",
			"line":	90,
			"primary_score":	999787,
			"second_score":	123006
		}, {
			"file":	"ext/standard/var.c",
			"line":	91,
			"primary_score":	999787,
			"second_score":	123005
		}, {
			"file":	"ext/standard/var.c",
			"line":	92,
			"primary_score":	999787,
			"second_score":	123004
		}, {
			"file":	"ext/standard/var.c",
			"line":	93,
			"primary_score":	999787,
			"second_score":	123003
		}, {
			"file":	"ext/standard/var.c",
			"line":	95,
			"primary_score":	999787,
			"second_score":	123002
		}, {
			"file":	"ext/standard/var.c",
			"line":	99,
			"primary_score":	999787,
			"second_score":	123001
		}, {
			"file":	"ext/standard/var.c",
			"line":	105,
			"primary_score":	999930,
			"second_score":	122773
		}, {
			"file":	"ext/standard/var.c",
			"line":	114,
			"primary_score":	999910,
			"second_score":	123109
		}, {
			"file":	"ext/standard/var.c",
			"line":	115,
			"primary_score":	999910,
			"second_score":	123060
		}, {
			"file":	"ext/standard/var.c",
			"line":	116,
			"primary_score":	999910,
			"second_score":	123009
		}, {
			"file":	"ext/standard/var.c",
			"line":	174,
			"primary_score":	999787,
			"second_score":	123542
		}, {
			"file":	"ext/standard/var.c",
			"line":	175,
			"primary_score":	999787,
			"second_score":	123541
		}, {
			"file":	"ext/standard/var.c",
			"line":	176,
			"primary_score":	999787,
			"second_score":	123540
		}, {
			"file":	"ext/standard/var.c",
			"line":	178,
			"primary_score":	999787,
			"second_score":	123539
		}, {
			"file":	"ext/standard/var.c",
			"line":	182,
			"primary_score":	999787,
			"second_score":	123452
		}, {
			"file":	"ext/standard/var.c",
			"line":	183,
			"primary_score":	999787,
			"second_score":	123008
		}, {
			"file":	"ext/standard/var.c",
			"line":	185,
			"primary_score":	999787,
			"second_score":	122772
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999611,
			"second_score":	101049
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999611,
			"second_score":	100956
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999611,
			"second_score":	103739
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999611,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999611,
			"second_score":	3135
		}, {
			"file":	"main/SAPI.c",
			"line":	107,
			"primary_score":	999611,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	109,
			"primary_score":	999611,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	119,
			"primary_score":	999611,
			"second_score":	125185
		}, {
			"file":	"main/SAPI.c",
			"line":	286,
			"primary_score":	999611,
			"second_score":	125248
		}, {
			"file":	"main/SAPI.c",
			"line":	287,
			"primary_score":	999611,
			"second_score":	125247
		}, {
			"file":	"main/SAPI.c",
			"line":	289,
			"primary_score":	999611,
			"second_score":	125246
		}, {
			"file":	"main/SAPI.c",
			"line":	290,
			"primary_score":	999611,
			"second_score":	125245
		}, {
			"file":	"main/SAPI.c",
			"line":	291,
			"primary_score":	999611,
			"second_score":	125244
		}, {
			"file":	"main/SAPI.c",
			"line":	296,
			"primary_score":	999611,
			"second_score":	125243
		}, {
			"file":	"main/SAPI.c",
			"line":	297,
			"primary_score":	999611,
			"second_score":	125242
		}, {
			"file":	"main/SAPI.c",
			"line":	298,
			"primary_score":	999611,
			"second_score":	125241
		}, {
			"file":	"main/SAPI.c",
			"line":	304,
			"primary_score":	999611,
			"second_score":	125240
		}, {
			"file":	"main/SAPI.c",
			"line":	316,
			"primary_score":	999611,
			"second_score":	125239
		}, {
			"file":	"main/SAPI.c",
			"line":	317,
			"primary_score":	999611,
			"second_score":	125238
		}, {
			"file":	"main/SAPI.c",
			"line":	318,
			"primary_score":	999611,
			"second_score":	125216
		}, {
			"file":	"main/SAPI.c",
			"line":	320,
			"primary_score":	999611,
			"second_score":	125215
		}, {
			"file":	"main/SAPI.c",
			"line":	482,
			"primary_score":	999611,
			"second_score":	113653
		}, {
			"file":	"main/SAPI.c",
			"line":	490,
			"primary_score":	999611,
			"second_score":	113694
		}, {
			"file":	"main/SAPI.c",
			"line":	491,
			"primary_score":	999611,
			"second_score":	113690
		}, {
			"file":	"main/SAPI.c",
			"line":	494,
			"primary_score":	999611,
			"second_score":	113689
		}, {
			"file":	"main/SAPI.c",
			"line":	496,
			"primary_score":	999611,
			"second_score":	113688
		}, {
			"file":	"main/SAPI.c",
			"line":	507,
			"primary_score":	999611,
			"second_score":	113687
		}, {
			"file":	"main/SAPI.c",
			"line":	510,
			"primary_score":	999611,
			"second_score":	113686
		}, {
			"file":	"main/SAPI.c",
			"line":	513,
			"primary_score":	999611,
			"second_score":	113685
		}, {
			"file":	"main/SAPI.c",
			"line":	516,
			"primary_score":	999611,
			"second_score":	113684
		}, {
			"file":	"main/SAPI.c",
			"line":	519,
			"primary_score":	999611,
			"second_score":	113683
		}, {
			"file":	"main/SAPI.c",
			"line":	522,
			"primary_score":	999611,
			"second_score":	113682
		}, {
			"file":	"main/SAPI.c",
			"line":	525,
			"primary_score":	999611,
			"second_score":	113681
		}, {
			"file":	"main/SAPI.c",
			"line":	526,
			"primary_score":	999611,
			"second_score":	113680
		}, {
			"file":	"main/SAPI.c",
			"line":	528,
			"primary_score":	999611,
			"second_score":	113676
		}, {
			"file":	"main/SAPI.c",
			"line":	531,
			"primary_score":	999611,
			"second_score":	113675
		}, {
			"file":	"main/SAPI.c",
			"line":	532,
			"primary_score":	999611,
			"second_score":	113674
		}, {
			"file":	"main/SAPI.c",
			"line":	533,
			"primary_score":	999611,
			"second_score":	113655
		}, {
			"file":	"main/SAPI.c",
			"line":	535,
			"primary_score":	999611,
			"second_score":	113654
		}, {
			"file":	"main/SAPI.c",
			"line":	536,
			"primary_score":	999611,
			"second_score":	113652
		}, {
			"file":	"main/SAPI.c",
			"line":	537,
			"primary_score":	999611,
			"second_score":	113651
		}, {
			"file":	"main/SAPI.c",
			"line":	538,
			"primary_score":	999611,
			"second_score":	113650
		}, {
			"file":	"main/SAPI.c",
			"line":	539,
			"primary_score":	999611,
			"second_score":	113649
		}, {
			"file":	"main/SAPI.c",
			"line":	608,
			"primary_score":	999611,
			"second_score":	125188
		}, {
			"file":	"main/SAPI.c",
			"line":	623,
			"primary_score":	999611,
			"second_score":	125186
		}, {
			"file":	"main/SAPI.c",
			"line":	812,
			"primary_score":	999611,
			"second_score":	121260
		}, {
			"file":	"main/SAPI.c",
			"line":	813,
			"primary_score":	999611,
			"second_score":	121259
		}, {
			"file":	"main/SAPI.c",
			"line":	815,
			"primary_score":	999611,
			"second_score":	121258
		}, {
			"file":	"main/SAPI.c",
			"line":	816,
			"primary_score":	999611,
			"second_score":	121257
		}, {
			"file":	"main/SAPI.c",
			"line":	822,
			"primary_score":	999611,
			"second_score":	125252
		}, {
			"file":	"main/SAPI.c",
			"line":	823,
			"primary_score":	999611,
			"second_score":	125251
		}, {
			"file":	"main/SAPI.c",
			"line":	824,
			"primary_score":	999611,
			"second_score":	125250
		}, {
			"file":	"main/SAPI.c",
			"line":	826,
			"primary_score":	999611,
			"second_score":	125249
		}, {
			"file":	"main/SAPI.c",
			"line":	827,
			"primary_score":	999611,
			"second_score":	125214
		}, {
			"file":	"main/SAPI.c",
			"line":	828,
			"primary_score":	999611,
			"second_score":	125213
		}, {
			"file":	"main/SAPI.c",
			"line":	829,
			"primary_score":	999611,
			"second_score":	125191
		}, {
			"file":	"main/SAPI.c",
			"line":	830,
			"primary_score":	999611,
			"second_score":	125190
		}, {
			"file":	"main/SAPI.c",
			"line":	831,
			"primary_score":	999611,
			"second_score":	125189
		}, {
			"file":	"main/SAPI.c",
			"line":	832,
			"primary_score":	999611,
			"second_score":	125166
		}, {
			"file":	"main/SAPI.c",
			"line":	835,
			"primary_score":	999611,
			"second_score":	125165
		}, {
			"file":	"main/SAPI.c",
			"line":	840,
			"primary_score":	999611,
			"second_score":	125164
		}, {
			"file":	"main/SAPI.c",
			"line":	842,
			"primary_score":	999611,
			"second_score":	125163
		}, {
			"file":	"main/SAPI.c",
			"line":	843,
			"primary_score":	999611,
			"second_score":	125162
		}, {
			"file":	"main/SAPI.c",
			"line":	848,
			"primary_score":	999611,
			"second_score":	125160
		}, {
			"file":	"main/SAPI.c",
			"line":	851,
			"primary_score":	999611,
			"second_score":	125159
		}, {
			"file":	"main/SAPI.c",
			"line":	882,
			"primary_score":	999611,
			"second_score":	125158
		}, {
			"file":	"main/SAPI.c",
			"line":	884,
			"primary_score":	999611,
			"second_score":	125156
		}, {
			"file":	"main/SAPI.c",
			"line":	953,
			"primary_score":	999611,
			"second_score":	103783
		}, {
			"file":	"main/SAPI.c",
			"line":	954,
			"primary_score":	999611,
			"second_score":	103782
		}, {
			"file":	"main/SAPI.c",
			"line":	955,
			"primary_score":	999611,
			"second_score":	103780
		}, {
			"file":	"main/main.c",
			"line":	591,
			"primary_score":	999724,
			"second_score":	122999
		}, {
			"file":	"main/main.c",
			"line":	592,
			"primary_score":	999724,
			"second_score":	122998
		}, {
			"file":	"main/main.c",
			"line":	593,
			"primary_score":	999724,
			"second_score":	122997
		}, {
			"file":	"main/main.c",
			"line":	594,
			"primary_score":	999724,
			"second_score":	122996
		}, {
			"file":	"main/main.c",
			"line":	595,
			"primary_score":	999724,
			"second_score":	122995
		}, {
			"file":	"main/main.c",
			"line":	597,
			"primary_score":	999724,
			"second_score":	122994
		}, {
			"file":	"main/main.c",
			"line":	598,
			"primary_score":	999724,
			"second_score":	122993
		}, {
			"file":	"main/main.c",
			"line":	599,
			"primary_score":	999724,
			"second_score":	122843
		}, {
			"file":	"main/main.c",
			"line":	600,
			"primary_score":	999724,
			"second_score":	122794
		}, {
			"file":	"main/main.c",
			"line":	601,
			"primary_score":	999724,
			"second_score":	122775
		}, {
			"file":	"main/main.c",
			"line":	603,
			"primary_score":	999724,
			"second_score":	122774
		}, {
			"file":	"main/main.c",
			"line":	857,
			"primary_score":	999876,
			"second_score":	126162
		}, {
			"file":	"main/main.c",
			"line":	858,
			"primary_score":	999876,
			"second_score":	126161
		}, {
			"file":	"main/main.c",
			"line":	859,
			"primary_score":	999876,
			"second_score":	126160
		}, {
			"file":	"main/main.c",
			"line":	861,
			"primary_score":	999876,
			"second_score":	126159
		}, {
			"file":	"main/main.c",
			"line":	864,
			"primary_score":	999876,
			"second_score":	125807
		}, {
			"file":	"main/main.c",
			"line":	876,
			"primary_score":	999876,
			"second_score":	125806
		}, {
			"file":	"main/main.c",
			"line":	880,
			"primary_score":	999876,
			"second_score":	125805
		}, {
			"file":	"main/main.c",
			"line":	881,
			"primary_score":	999876,
			"second_score":	125804
		}, {
			"file":	"main/main.c",
			"line":	885,
			"primary_score":	999876,
			"second_score":	125803
		}, {
			"file":	"main/main.c",
			"line":	889,
			"primary_score":	999876,
			"second_score":	125802
		}, {
			"file":	"main/main.c",
			"line":	892,
			"primary_score":	999876,
			"second_score":	125801
		}, {
			"file":	"main/main.c",
			"line":	893,
			"primary_score":	999876,
			"second_score":	125800
		}, {
			"file":	"main/main.c",
			"line":	894,
			"primary_score":	999876,
			"second_score":	125799
		}, {
			"file":	"main/main.c",
			"line":	895,
			"primary_score":	999876,
			"second_score":	125798
		}, {
			"file":	"main/main.c",
			"line":	899,
			"primary_score":	999876,
			"second_score":	125797
		}, {
			"file":	"main/main.c",
			"line":	930,
			"primary_score":	999887,
			"second_score":	125796
		}, {
			"file":	"main/main.c",
			"line":	932,
			"primary_score":	999887,
			"second_score":	125795
		}, {
			"file":	"main/main.c",
			"line":	934,
			"primary_score":	999887,
			"second_score":	125794
		}, {
			"file":	"main/main.c",
			"line":	956,
			"primary_score":	999981,
			"second_score":	125793
		}, {
			"file":	"main/main.c",
			"line":	969,
			"primary_score":	999887,
			"second_score":	125792
		}, {
			"file":	"main/main.c",
			"line":	981,
			"primary_score":	999887,
			"second_score":	125791
		}, {
			"file":	"main/main.c",
			"line":	982,
			"primary_score":	999887,
			"second_score":	125790
		}, {
			"file":	"main/main.c",
			"line":	985,
			"primary_score":	999887,
			"second_score":	125789
		}, {
			"file":	"main/main.c",
			"line":	986,
			"primary_score":	999887,
			"second_score":	125744
		}, {
			"file":	"main/main.c",
			"line":	988,
			"primary_score":	999887,
			"second_score":	125702
		}, {
			"file":	"main/main.c",
			"line":	999,
			"primary_score":	999887,
			"second_score":	125701
		}, {
			"file":	"main/main.c",
			"line":	1009,
			"primary_score":	999887,
			"second_score":	125689
		}, {
			"file":	"main/main.c",
			"line":	1035,
			"primary_score":	999887,
			"second_score":	124775
		}, {
			"file":	"main/main.c",
			"line":	1073,
			"primary_score":	999914,
			"second_score":	124774
		}, {
			"file":	"main/main.c",
			"line":	1078,
			"primary_score":	999914,
			"second_score":	124773
		}, {
			"file":	"main/main.c",
			"line":	1079,
			"primary_score":	999914,
			"second_score":	124772
		}, {
			"file":	"main/main.c",
			"line":	1080,
			"primary_score":	999997,
			"second_score":	124771
		}, {
			"file":	"main/main.c",
			"line":	1082,
			"primary_score":	999914,
			"second_score":	124015
		}, {
			"file":	"main/main.c",
			"line":	1083,
			"primary_score":	999914,
			"second_score":	124014
		}, {
			"file":	"main/main.c",
			"line":	1084,
			"primary_score":	999914,
			"second_score":	124013
		}, {
			"file":	"main/main.c",
			"line":	1085,
			"primary_score":	999914,
			"second_score":	123986
		}, {
			"file":	"main/main.c",
			"line":	1086,
			"primary_score":	999914,
			"second_score":	123952
		}, {
			"file":	"main/main.c",
			"line":	1090,
			"primary_score":	999914,
			"second_score":	123784
		}, {
			"file":	"main/main.c",
			"line":	1601,
			"primary_score":	999611,
			"second_score":	121925
		}, {
			"file":	"main/main.c",
			"line":	1602,
			"primary_score":	999611,
			"second_score":	121924
		}, {
			"file":	"main/main.c",
			"line":	1604,
			"primary_score":	999611,
			"second_score":	121923
		}, {
			"file":	"main/main.c",
			"line":	1609,
			"primary_score":	999611,
			"second_score":	121922
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999611,
			"second_score":	121921
		}, {
			"file":	"main/main.c",
			"line":	1612,
			"primary_score":	999611,
			"second_score":	121920
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999611,
			"second_score":	121913
		}, {
			"file":	"main/main.c",
			"line":	1616,
			"primary_score":	999611,
			"second_score":	121907
		}, {
			"file":	"main/main.c",
			"line":	1617,
			"primary_score":	999611,
			"second_score":	121905
		}, {
			"file":	"main/main.c",
			"line":	1620,
			"primary_score":	999611,
			"second_score":	121903
		}, {
			"file":	"main/main.c",
			"line":	1621,
			"primary_score":	999611,
			"second_score":	121897
		}, {
			"file":	"main/main.c",
			"line":	1622,
			"primary_score":	999611,
			"second_score":	121287
		}, {
			"file":	"main/main.c",
			"line":	1625,
			"primary_score":	999611,
			"second_score":	121285
		}, {
			"file":	"main/main.c",
			"line":	1626,
			"primary_score":	999611,
			"second_score":	121279
		}, {
			"file":	"main/main.c",
			"line":	1628,
			"primary_score":	999611,
			"second_score":	121278
		}, {
			"file":	"main/main.c",
			"line":	1634,
			"primary_score":	999611,
			"second_score":	121277
		}, {
			"file":	"main/main.c",
			"line":	1637,
			"primary_score":	999611,
			"second_score":	121276
		}, {
			"file":	"main/main.c",
			"line":	1639,
			"primary_score":	999611,
			"second_score":	121274
		}, {
			"file":	"main/main.c",
			"line":	1640,
			"primary_score":	999611,
			"second_score":	121269
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999611,
			"second_score":	121267
		}, {
			"file":	"main/main.c",
			"line":	1644,
			"primary_score":	999611,
			"second_score":	121261
		}, {
			"file":	"main/main.c",
			"line":	1645,
			"primary_score":	999611,
			"second_score":	121256
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999611,
			"second_score":	121254
		}, {
			"file":	"main/main.c",
			"line":	1649,
			"primary_score":	999611,
			"second_score":	121253
		}, {
			"file":	"main/main.c",
			"line":	1650,
			"primary_score":	999611,
			"second_score":	120651
		}, {
			"file":	"main/main.c",
			"line":	1654,
			"primary_score":	999611,
			"second_score":	120648
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999611,
			"second_score":	120642
		}, {
			"file":	"main/main.c",
			"line":	1657,
			"primary_score":	999611,
			"second_score":	120641
		}, {
			"file":	"main/main.c",
			"line":	1658,
			"primary_score":	999611,
			"second_score":	120505
		}, {
			"file":	"main/main.c",
			"line":	1659,
			"primary_score":	999611,
			"second_score":	120504
		}, {
			"file":	"main/main.c",
			"line":	1662,
			"primary_score":	999611,
			"second_score":	120470
		}, {
			"file":	"main/main.c",
			"line":	1665,
			"primary_score":	999611,
			"second_score":	120468
		}, {
			"file":	"main/main.c",
			"line":	1666,
			"primary_score":	999876,
			"second_score":	120467
		}, {
			"file":	"main/main.c",
			"line":	1667,
			"primary_score":	999876,
			"second_score":	120466
		}, {
			"file":	"main/main.c",
			"line":	1669,
			"primary_score":	999611,
			"second_score":	120465
		}, {
			"file":	"main/main.c",
			"line":	1670,
			"primary_score":	999876,
			"second_score":	120464
		}, {
			"file":	"main/main.c",
			"line":	1671,
			"primary_score":	999876,
			"second_score":	120463
		}, {
			"file":	"main/main.c",
			"line":	1675,
			"primary_score":	999611,
			"second_score":	120462
		}, {
			"file":	"main/main.c",
			"line":	1678,
			"primary_score":	999611,
			"second_score":	113713
		}, {
			"file":	"main/main.c",
			"line":	1679,
			"primary_score":	999611,
			"second_score":	113707
		}, {
			"file":	"main/main.c",
			"line":	1680,
			"primary_score":	999611,
			"second_score":	113703
		}, {
			"file":	"main/main.c",
			"line":	1683,
			"primary_score":	999611,
			"second_score":	113701
		}, {
			"file":	"main/main.c",
			"line":	1684,
			"primary_score":	999611,
			"second_score":	113695
		}, {
			"file":	"main/main.c",
			"line":	1685,
			"primary_score":	999611,
			"second_score":	113648
		}, {
			"file":	"main/main.c",
			"line":	1688,
			"primary_score":	999611,
			"second_score":	113646
		}, {
			"file":	"main/main.c",
			"line":	1689,
			"primary_score":	999611,
			"second_score":	113640
		}, {
			"file":	"main/main.c",
			"line":	1690,
			"primary_score":	999611,
			"second_score":	113637
		}, {
			"file":	"main/main.c",
			"line":	1693,
			"primary_score":	999611,
			"second_score":	113635
		}, {
			"file":	"main/main.c",
			"line":	1694,
			"primary_score":	999611,
			"second_score":	113629
		}, {
			"file":	"main/main.c",
			"line":	1695,
			"primary_score":	999611,
			"second_score":	113210
		}, {
			"file":	"main/main.c",
			"line":	1696,
			"primary_score":	999611,
			"second_score":	113208
		}, {
			"file":	"main/main.c",
			"line":	1699,
			"primary_score":	999611,
			"second_score":	103804
		}, {
			"file":	"main/main.c",
			"line":	1700,
			"primary_score":	999611,
			"second_score":	103798
		}, {
			"file":	"main/main.c",
			"line":	1701,
			"primary_score":	999611,
			"second_score":	103796
		}, {
			"file":	"main/main.c",
			"line":	1734,
			"primary_score":	999611,
			"second_score":	121616
		}, {
			"file":	"main/main.c",
			"line":	1735,
			"primary_score":	999611,
			"second_score":	121615
		}, {
			"file":	"main/main.c",
			"line":	1755,
			"primary_score":	999611,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1758,
			"primary_score":	999611,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1761,
			"primary_score":	999611,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	1764,
			"primary_score":	999611,
			"second_score":	3147
		}, {
			"file":	"main/main.c",
			"line":	1768,
			"primary_score":	999611,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999611,
			"second_score":	103787
		}, {
			"file":	"main/main.c",
			"line":	2202,
			"primary_score":	999611,
			"second_score":	103786
		}, {
			"file":	"main/main.c",
			"line":	2204,
			"primary_score":	999611,
			"second_score":	103785
		}, {
			"file":	"main/main.c",
			"line":	2217,
			"primary_score":	999611,
			"second_score":	103784
		}, {
			"file":	"main/main.c",
			"line":	2219,
			"primary_score":	999611,
			"second_score":	103779
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999611,
			"second_score":	6121
		}, {
			"file":	"main/main.c",
			"line":	2224,
			"primary_score":	999611,
			"second_score":	6055
		}, {
			"file":	"main/main.c",
			"line":	2225,
			"primary_score":	999611,
			"second_score":	6026
		}, {
			"file":	"main/main.c",
			"line":	2228,
			"primary_score":	999611,
			"second_score":	3567
		}, {
			"file":	"main/main.c",
			"line":	2231,
			"primary_score":	999611,
			"second_score":	3244
		}, {
			"file":	"main/main.c",
			"line":	2232,
			"primary_score":	999611,
			"second_score":	3214
		}, {
			"file":	"main/main.c",
			"line":	2237,
			"primary_score":	999611,
			"second_score":	3191
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999611,
			"second_score":	3154
		}, {
			"file":	"main/main.c",
			"line":	2240,
			"primary_score":	999611,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	2243,
			"primary_score":	999611,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	2244,
			"primary_score":	999611,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	2348,
			"primary_score":	999611,
			"second_score":	121937
		}, {
			"file":	"main/main.c",
			"line":	2356,
			"primary_score":	999611,
			"second_score":	121935
		}, {
			"file":	"main/main.c",
			"line":	2359,
			"primary_score":	999611,
			"second_score":	121934
		}, {
			"file":	"main/main.c",
			"line":	2361,
			"primary_score":	999611,
			"second_score":	121932
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999611,
			"second_score":	3190
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999611,
			"second_score":	3176
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999611,
			"second_score":	3162
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999611,
			"second_score":	121273
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999611,
			"second_score":	121272
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999611,
			"second_score":	121271
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999611,
			"second_score":	121270
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999611,
			"second_score":	122842
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999611,
			"second_score":	122841
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999611,
			"second_score":	122795
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999611,
			"second_score":	121275
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999611,
			"second_score":	122836
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999611,
			"second_score":	122835
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999611,
			"second_score":	122833
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999611,
			"second_score":	122832
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999611,
			"second_score":	122831
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999611,
			"second_score":	122830
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999611,
			"second_score":	122829
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999611,
			"second_score":	122797
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999611,
			"second_score":	122796
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999611,
			"second_score":	122840
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999611,
			"second_score":	122839
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999611,
			"second_score":	122838
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999611,
			"second_score":	122837
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999611,
			"second_score":	122834
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999611,
			"second_score":	122828
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999611,
			"second_score":	122827
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999611,
			"second_score":	122826
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999611,
			"second_score":	122825
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999611,
			"second_score":	122824
		}, {
			"file":	"main/output.c",
			"line":	1011,
			"primary_score":	999611,
			"second_score":	125154
		}, {
			"file":	"main/output.c",
			"line":	1014,
			"primary_score":	999611,
			"second_score":	125152
		}, {
			"file":	"main/output.c",
			"line":	1015,
			"primary_score":	999611,
			"second_score":	125150
		}, {
			"file":	"main/output.c",
			"line":	1016,
			"primary_score":	999611,
			"second_score":	125147
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999611,
			"second_score":	122823
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999611,
			"second_score":	122805
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999611,
			"second_score":	122804
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999611,
			"second_score":	122799
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999611,
			"second_score":	122798
		}, {
			"file":	"main/php_ini.c",
			"line":	194,
			"primary_score":	999611,
			"second_score":	3256
		}, {
			"file":	"main/php_ini.c",
			"line":	197,
			"primary_score":	999611,
			"second_score":	3255
		}, {
			"file":	"main/php_ini.c",
			"line":	198,
			"primary_score":	999611,
			"second_score":	3254
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999611,
			"second_score":	3566
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999611,
			"second_score":	3247
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999611,
			"second_score":	3246
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999611,
			"second_score":	3245
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999611,
			"second_score":	6054
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999611,
			"second_score":	6027
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999611,
			"second_score":	3153
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999611,
			"second_score":	121919
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999611,
			"second_score":	3145
		}, {
			"file":	"main/snprintf.c",
			"line":	317,
			"primary_score":	999701,
			"second_score":	123256
		}, {
			"file":	"main/snprintf.c",
			"line":	318,
			"primary_score":	999701,
			"second_score":	123255
		}, {
			"file":	"main/snprintf.c",
			"line":	320,
			"primary_score":	999701,
			"second_score":	123254
		}, {
			"file":	"main/snprintf.c",
			"line":	324,
			"primary_score":	999701,
			"second_score":	123253
		}, {
			"file":	"main/snprintf.c",
			"line":	335,
			"primary_score":	999701,
			"second_score":	123252
		}, {
			"file":	"main/snprintf.c",
			"line":	339,
			"primary_score":	999701,
			"second_score":	123251
		}, {
			"file":	"main/snprintf.c",
			"line":	346,
			"primary_score":	999701,
			"second_score":	123250
		}, {
			"file":	"main/snprintf.c",
			"line":	347,
			"primary_score":	999701,
			"second_score":	123246
		}, {
			"file":	"main/snprintf.c",
			"line":	349,
			"primary_score":	999701,
			"second_score":	123245
		}, {
			"file":	"main/snprintf.c",
			"line":	350,
			"primary_score":	999701,
			"second_score":	123244
		}, {
			"file":	"main/snprintf.c",
			"line":	354,
			"primary_score":	999701,
			"second_score":	123243
		}, {
			"file":	"main/snprintf.c",
			"line":	355,
			"primary_score":	999701,
			"second_score":	123242
		}, {
			"file":	"main/spprintf.c",
			"line":	441,
			"primary_score":	999701,
			"second_score":	123259
		}, {
			"file":	"main/spprintf.c",
			"line":	444,
			"primary_score":	999779,
			"second_score":	123258
		}, {
			"file":	"main/spprintf.c",
			"line":	474,
			"primary_score":	999701,
			"second_score":	123257
		}, {
			"file":	"main/spprintf.c",
			"line":	476,
			"primary_score":	999701,
			"second_score":	123241
		}, {
			"file":	"main/spprintf.c",
			"line":	478,
			"primary_score":	999701,
			"second_score":	123239
		}, {
			"file":	"main/spprintf.c",
			"line":	479,
			"primary_score":	999701,
			"second_score":	123238
		}, {
			"file":	"main/spprintf.c",
			"line":	481,
			"primary_score":	999701,
			"second_score":	123237
		}, {
			"file":	"main/spprintf.c",
			"line":	483,
			"primary_score":	999701,
			"second_score":	123236
		}, {
			"file":	"main/spprintf.c",
			"line":	486,
			"primary_score":	999701,
			"second_score":	123235
		}, {
			"file":	"main/spprintf.c",
			"line":	775,
			"primary_score":	999901,
			"second_score":	125367
		}, {
			"file":	"main/streams/filter.c",
			"line":	37,
			"primary_score":	999611,
			"second_score":	6095
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999611,
			"second_score":	62315
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999611,
			"second_score":	114324
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999611,
			"second_score":	114323
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999611,
			"second_score":	114322
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999611,
			"second_score":	114321
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999611,
			"second_score":	114320
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999611,
			"second_score":	114319
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999611,
			"second_score":	114318
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999611,
			"second_score":	114317
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999611,
			"second_score":	114316
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999611,
			"second_score":	114315
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999611,
			"second_score":	114314
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999611,
			"second_score":	114295
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999611,
			"second_score":	114334
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999611,
			"second_score":	114333
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999611,
			"second_score":	114332
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999611,
			"second_score":	114331
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999611,
			"second_score":	121197
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999611,
			"second_score":	121188
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999611,
			"second_score":	114348
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999611,
			"second_score":	114347
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999611,
			"second_score":	114346
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999611,
			"second_score":	114345
		}, {
			"file":	"main/streams/streams.c",
			"line":	338,
			"primary_score":	999611,
			"second_score":	114344
		}, {
			"file":	"main/streams/streams.c",
			"line":	351,
			"primary_score":	999611,
			"second_score":	114343
		}, {
			"file":	"main/streams/streams.c",
			"line":	360,
			"primary_score":	999611,
			"second_score":	114342
		}, {
			"file":	"main/streams/streams.c",
			"line":	364,
			"primary_score":	999611,
			"second_score":	114341
		}, {
			"file":	"main/streams/streams.c",
			"line":	382,
			"primary_score":	999611,
			"second_score":	114340
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999611,
			"second_score":	114339
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999611,
			"second_score":	114329
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999611,
			"second_score":	114328
		}, {
			"file":	"main/streams/streams.c",
			"line":	419,
			"primary_score":	999611,
			"second_score":	114327
		}, {
			"file":	"main/streams/streams.c",
			"line":	420,
			"primary_score":	999611,
			"second_score":	114326
		}, {
			"file":	"main/streams/streams.c",
			"line":	432,
			"primary_score":	999611,
			"second_score":	114325
		}, {
			"file":	"main/streams/streams.c",
			"line":	433,
			"primary_score":	999611,
			"second_score":	114294
		}, {
			"file":	"main/streams/streams.c",
			"line":	436,
			"primary_score":	999611,
			"second_score":	114293
		}, {
			"file":	"main/streams/streams.c",
			"line":	443,
			"primary_score":	999611,
			"second_score":	114292
		}, {
			"file":	"main/streams/streams.c",
			"line":	444,
			"primary_score":	999611,
			"second_score":	114291
		}, {
			"file":	"main/streams/streams.c",
			"line":	447,
			"primary_score":	999611,
			"second_score":	114290
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999611,
			"second_score":	114289
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999611,
			"second_score":	114288
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999611,
			"second_score":	114287
		}, {
			"file":	"main/streams/streams.c",
			"line":	466,
			"primary_score":	999611,
			"second_score":	114286
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999611,
			"second_score":	114285
		}, {
			"file":	"main/streams/streams.c",
			"line":	499,
			"primary_score":	999611,
			"second_score":	114284
		}, {
			"file":	"main/streams/streams.c",
			"line":	500,
			"primary_score":	999611,
			"second_score":	114265
		}, {
			"file":	"main/streams/streams.c",
			"line":	503,
			"primary_score":	999611,
			"second_score":	114264
		}, {
			"file":	"main/streams/streams.c",
			"line":	507,
			"primary_score":	999611,
			"second_score":	114245
		}, {
			"file":	"main/streams/streams.c",
			"line":	511,
			"primary_score":	999611,
			"second_score":	114244
		}, {
			"file":	"main/streams/streams.c",
			"line":	1123,
			"primary_score":	999611,
			"second_score":	114338
		}, {
			"file":	"main/streams/streams.c",
			"line":	1125,
			"primary_score":	999611,
			"second_score":	114337
		}, {
			"file":	"main/streams/streams.c",
			"line":	1129,
			"primary_score":	999611,
			"second_score":	114336
		}, {
			"file":	"main/streams/streams.c",
			"line":	1130,
			"primary_score":	999611,
			"second_score":	114335
		}, {
			"file":	"main/streams/streams.c",
			"line":	1133,
			"primary_score":	999611,
			"second_score":	114330
		}, {
			"file":	"main/streams/streams.c",
			"line":	1507,
			"primary_score":	999611,
			"second_score":	114350
		}, {
			"file":	"main/streams/streams.c",
			"line":	1509,
			"primary_score":	999611,
			"second_score":	114349
		}, {
			"file":	"main/streams/streams.c",
			"line":	1520,
			"primary_score":	999611,
			"second_score":	113639
		}, {
			"file":	"main/streams/streams.c",
			"line":	1526,
			"primary_score":	999611,
			"second_score":	113638
		}, {
			"file":	"main/streams/streams.c",
			"line":	1562,
			"primary_score":	999611,
			"second_score":	6120
		}, {
			"file":	"main/streams/streams.c",
			"line":	1563,
			"primary_score":	999611,
			"second_score":	6096
		}, {
			"file":	"main/streams/streams.c",
			"line":	1564,
			"primary_score":	999611,
			"second_score":	6086
		}, {
			"file":	"main/streams/streams.c",
			"line":	1565,
			"primary_score":	999611,
			"second_score":	6056
		}, {
			"file":	"main/streams/streams.c",
			"line":	1601,
			"primary_score":	999611,
			"second_score":	97914
		}, {
			"file":	"main/streams/transports.c",
			"line":	29,
			"primary_score":	999611,
			"second_score":	6085
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	255,
			"primary_score":	999611,
			"second_score":	122815
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	260,
			"primary_score":	999611,
			"second_score":	122814
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	269,
			"primary_score":	999611,
			"second_score":	122813
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	270,
			"primary_score":	999611,
			"second_score":	122812
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	273,
			"primary_score":	999611,
			"second_score":	122811
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	277,
			"primary_score":	999611,
			"second_score":	122810
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	287,
			"primary_score":	999611,
			"second_score":	122822
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999611,
			"second_score":	122821
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	289,
			"primary_score":	999611,
			"second_score":	122820
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	291,
			"primary_score":	999611,
			"second_score":	122819
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	295,
			"primary_score":	999611,
			"second_score":	122818
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	303,
			"primary_score":	999611,
			"second_score":	122817
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	305,
			"primary_score":	999611,
			"second_score":	122816
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	306,
			"primary_score":	999611,
			"second_score":	122809
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	312,
			"primary_score":	999611,
			"second_score":	122808
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999611,
			"second_score":	122807
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	316,
			"primary_score":	999611,
			"second_score":	122806
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	325,
			"primary_score":	999611,
			"second_score":	103781
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	378,
			"primary_score":	999611,
			"second_score":	113679
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	379,
			"primary_score":	999611,
			"second_score":	113678
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	383,
			"primary_score":	999611,
			"second_score":	113677
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	395,
			"primary_score":	999611,
			"second_score":	125187
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	403,
			"primary_score":	999611,
			"second_score":	125161
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1137,
			"primary_score":	999611,
			"second_score":	121931
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1140,
			"primary_score":	999611,
			"second_score":	121930
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1177,
			"primary_score":	999611,
			"second_score":	122095
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1180,
			"primary_score":	999611,
			"second_score":	119063
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1319,
			"primary_score":	999611,
			"second_score":	121929
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1321,
			"primary_score":	999611,
			"second_score":	121927
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1323,
			"primary_score":	999611,
			"second_score":	121926
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1325,
			"primary_score":	999611,
			"second_score":	103794
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1326,
			"primary_score":	999611,
			"second_score":	103793
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1328,
			"primary_score":	999611,
			"second_score":	103792
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1332,
			"primary_score":	999611,
			"second_score":	103791
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1333,
			"primary_score":	999611,
			"second_score":	103790
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1336,
			"primary_score":	999611,
			"second_score":	103789
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1337,
			"primary_score":	999611,
			"second_score":	103788
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1339,
			"primary_score":	999611,
			"second_score":	3136
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1344,
			"primary_score":	999611,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"ext/spl/spl_array.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"ext/spl/spl_array.c",
			"lines":	[{
					"line":	85,
					"switches":	[]
				}, {
					"line":	86,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [113], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [], [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], [], [], [], [], [], []],
							"begin_line":	87,
							"begin_column":	1,
							"end_line":	87,
							"end_column":	1,
							"patch_codes":	["memset(&(*intern->array).is_ref__gc, 0, sizeof (*(&(*intern->array).is_ref__gc)))", "memset(&(*intern->array).refcount__gc, 0, sizeof (*(&(*intern->array).refcount__gc)))", "memset(&(*intern->array).type, 0, sizeof (*(&(*intern->array).type)))", "memset(&(*intern->array).value, 0, sizeof (*(&(*intern->array).value)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "_array_init(((intern)->array), 0)", "_array_init(((other)->array), 0)", "_efree(((intern)->debug_info))", "_efree(((other)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((other)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(other)->array))", "_zval_ptr_dtor((&(other)->retval))", "convert_to_long((intern)->retval)", "convert_to_long((other)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "memset((other), 0, sizeof(spl_array_object))", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(other)->std)", "spl_array_rewind((intern))", "spl_array_rewind((other))", "spl_array_update_pos((intern))", "spl_array_update_pos((other))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((other))", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((other)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((other)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(other)->std)", "zval_addref_p((intern)->array)", "zval_addref_p((other)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "rebuild_object_properties(&intern->std)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L87\", 16, &(check_std_props), sizeof (check_std_props), &(other), sizeof (other), &(intern), sizeof (intern), &(intern->array), sizeof (intern->array), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.59905110309266]
								}, {
									"case":	2,
									"scores":	[-8.59905110309266]
								}, {
									"case":	3,
									"scores":	[-8.59905110309266]
								}, {
									"case":	4,
									"scores":	[-8.59905110309266]
								}, {
									"case":	5,
									"scores":	[-8.59905110309266]
								}, {
									"case":	6,
									"scores":	[-8.59905110309266]
								}, {
									"case":	7,
									"scores":	[-8.59905110309266]
								}, {
									"case":	8,
									"scores":	[-8.59905110309266]
								}, {
									"case":	9,
									"scores":	[-8.59905110309266]
								}, {
									"case":	10,
									"scores":	[-8.59905110309266]
								}, {
									"case":	11,
									"scores":	[-8.59905110309266]
								}, {
									"case":	12,
									"scores":	[-8.59905110309266]
								}, {
									"case":	13,
									"scores":	[-8.59905110309266]
								}, {
									"case":	14,
									"scores":	[-8.59905110309266]
								}, {
									"case":	15,
									"scores":	[-8.59905110309266]
								}, {
									"case":	16,
									"scores":	[-8.59905110309266]
								}, {
									"case":	17,
									"scores":	[-8.59905110309266]
								}, {
									"case":	18,
									"scores":	[-8.59905110309266]
								}, {
									"case":	19,
									"scores":	[-8.59905110309266]
								}, {
									"case":	20,
									"scores":	[-8.59905110309266]
								}, {
									"case":	21,
									"scores":	[-8.59905110309266]
								}, {
									"case":	22,
									"scores":	[-8.59905110309266]
								}, {
									"case":	23,
									"scores":	[-8.59905110309266]
								}, {
									"case":	24,
									"scores":	[-8.59905110309266]
								}, {
									"case":	25,
									"scores":	[-8.59905110309266]
								}, {
									"case":	26,
									"scores":	[-8.59905110309266]
								}, {
									"case":	27,
									"scores":	[-8.59905110309266]
								}, {
									"case":	28,
									"scores":	[-8.59905110309266]
								}, {
									"case":	29,
									"scores":	[-8.59905110309266]
								}, {
									"case":	30,
									"scores":	[-8.59905110309266]
								}, {
									"case":	31,
									"scores":	[-8.59905110309266]
								}, {
									"case":	32,
									"scores":	[-8.59905110309266]
								}, {
									"case":	33,
									"scores":	[-8.59905110309266]
								}, {
									"case":	34,
									"scores":	[-8.59905110309266]
								}, {
									"case":	35,
									"scores":	[-8.59905110309266]
								}, {
									"case":	36,
									"scores":	[-8.59905110309266]
								}, {
									"case":	37,
									"scores":	[-8.59905110309266]
								}, {
									"case":	38,
									"scores":	[-8.59905110309266]
								}, {
									"case":	39,
									"scores":	[-8.59905110309266]
								}, {
									"case":	40,
									"scores":	[-8.59905110309266]
								}, {
									"case":	41,
									"scores":	[-8.59905110309266]
								}, {
									"case":	42,
									"scores":	[-8.59905110309266]
								}, {
									"case":	43,
									"scores":	[-8.59905110309266]
								}, {
									"case":	44,
									"scores":	[-8.59905110309266]
								}, {
									"case":	45,
									"scores":	[-8.59905110309266]
								}, {
									"case":	46,
									"scores":	[-8.59905110309266]
								}, {
									"case":	47,
									"scores":	[-8.59905110309266]
								}, {
									"case":	48,
									"scores":	[-8.59905110309266]
								}, {
									"case":	49,
									"scores":	[-8.59905110309266]
								}, {
									"case":	50,
									"scores":	[-8.59905110309266]
								}, {
									"case":	51,
									"scores":	[-8.59905110309266]
								}, {
									"case":	52,
									"scores":	[-8.59905110309266]
								}, {
									"case":	53,
									"scores":	[-8.59905110309266]
								}, {
									"case":	54,
									"scores":	[-8.59905110309266]
								}, {
									"case":	55,
									"scores":	[-8.59905110309266]
								}, {
									"case":	56,
									"scores":	[-8.59905110309266]
								}, {
									"case":	57,
									"scores":	[-8.59905110309266]
								}, {
									"case":	58,
									"scores":	[-8.59905110309266]
								}, {
									"case":	59,
									"scores":	[-8.59905110309266]
								}, {
									"case":	60,
									"scores":	[-8.59905110309266]
								}, {
									"case":	61,
									"scores":	[-8.59905110309266]
								}, {
									"case":	62,
									"scores":	[-8.59905110309266]
								}, {
									"case":	63,
									"scores":	[-8.59905110309266]
								}, {
									"case":	64,
									"scores":	[-8.59905110309266]
								}, {
									"case":	65,
									"scores":	[-8.59905110309266]
								}, {
									"case":	66,
									"scores":	[-8.59905110309266]
								}, {
									"case":	67,
									"scores":	[-8.59905110309266]
								}, {
									"case":	68,
									"scores":	[-8.59905110309266]
								}, {
									"case":	69,
									"scores":	[-8.59905110309266]
								}, {
									"case":	70,
									"scores":	[-8.59905110309266]
								}, {
									"case":	71,
									"scores":	[-8.59905110309266]
								}, {
									"case":	72,
									"scores":	[-8.59905110309266]
								}, {
									"case":	73,
									"scores":	[-8.59905110309266]
								}, {
									"case":	74,
									"scores":	[-8.59905110309266]
								}, {
									"case":	75,
									"scores":	[-8.59905110309266]
								}, {
									"case":	76,
									"scores":	[-8.59905110309266]
								}, {
									"case":	77,
									"scores":	[-8.59905110309266]
								}, {
									"case":	78,
									"scores":	[-8.59905110309266]
								}, {
									"case":	79,
									"scores":	[-8.59905110309266]
								}, {
									"case":	80,
									"scores":	[-8.59905110309266]
								}, {
									"case":	81,
									"scores":	[-8.59905110309266]
								}, {
									"case":	82,
									"scores":	[-8.59905110309266]
								}, {
									"case":	83,
									"scores":	[-8.59905110309266]
								}, {
									"case":	84,
									"scores":	[-8.59905110309266]
								}, {
									"case":	85,
									"scores":	[-8.59905110309266]
								}, {
									"case":	86,
									"scores":	[-8.59905110309266]
								}, {
									"case":	87,
									"scores":	[-8.59905110309266]
								}, {
									"case":	88,
									"scores":	[-8.59905110309266]
								}, {
									"case":	89,
									"scores":	[-8.59905110309266]
								}, {
									"case":	90,
									"scores":	[-8.59905110309266]
								}, {
									"case":	91,
									"scores":	[-8.59905110309266]
								}, {
									"case":	92,
									"scores":	[-8.59905110309266]
								}, {
									"case":	93,
									"scores":	[-8.59905110309266]
								}, {
									"case":	94,
									"scores":	[-8.59905110309266]
								}, {
									"case":	95,
									"scores":	[-8.59905110309266]
								}, {
									"case":	96,
									"scores":	[-8.59905110309266]
								}, {
									"case":	97,
									"scores":	[-8.59905110309266]
								}, {
									"case":	98,
									"scores":	[-8.59905110309266]
								}, {
									"case":	99,
									"scores":	[-8.59905110309266]
								}, {
									"case":	100,
									"scores":	[-8.59905110309266]
								}, {
									"case":	101,
									"scores":	[-8.59905110309266]
								}, {
									"case":	102,
									"scores":	[-8.59905110309266]
								}, {
									"case":	103,
									"scores":	[-8.59905110309266]
								}, {
									"case":	104,
									"scores":	[-8.59905110309266]
								}, {
									"case":	105,
									"scores":	[-8.59905110309266]
								}, {
									"case":	106,
									"scores":	[-8.59905110309266]
								}, {
									"case":	107,
									"scores":	[-8.59905110309266]
								}, {
									"case":	108,
									"scores":	[-8.59905110309266]
								}, {
									"case":	109,
									"scores":	[-8.59905110309266]
								}, {
									"case":	110,
									"scores":	[-8.59905110309266]
								}, {
									"case":	111,
									"scores":	[-8.59905110309266]
								}, {
									"case":	112,
									"scores":	[-8.59905110309266]
								}, {
									"case":	113,
									"scores":	[-9.5465939430926632, -9.7555324568926629, -11.002829552892663, -11.249059466892662, -10.982906473092662, -11.228945386892661, -11.228945386892661, -10.982906473092662, -10.982906473092662, -11.193795590092662, -11.193795590092662, -11.193795590092662, -11.193795590092662, -11.193795590092662, -11.228945386892661, -11.228945386892661]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	87,
							"begin_column":	3,
							"end_line":	87,
							"end_column":	67,
							"patch_codes":	["if (!__is_neg(\"\", \"L87\", 16, &(check_std_props), sizeof (check_std_props), &(other), sizeof (other), &(intern), sizeof (intern), &(intern->array), sizeof (intern->array), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return spl_array_get_hash_table(other, check_std_props);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.97448406909266, -9.4380213690926631, -10.771074563592663, -10.764490129092662, -9.917619183092663, -10.675507283092662, -10.675507283092662, -9.917619183092663, -9.917619183092663, -10.386879183092663, -10.386879183092663, -10.386879183092663, -10.386879183092663, -10.386879183092663, -10.675507283092662, -10.675507283092662]
								}]
						}]
				}, {
					"line":	84,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [], [], [], [], [], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], []],
							"begin_line":	85,
							"begin_column":	7,
							"end_line":	85,
							"end_column":	7,
							"patch_codes":	["_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "rebuild_object_properties(&intern->std)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.61925381041018]
								}, {
									"case":	2,
									"scores":	[-8.61925381041018]
								}, {
									"case":	3,
									"scores":	[-8.61925381041018]
								}, {
									"case":	4,
									"scores":	[-8.61925381041018]
								}, {
									"case":	5,
									"scores":	[-8.61925381041018]
								}, {
									"case":	6,
									"scores":	[-8.61925381041018]
								}, {
									"case":	7,
									"scores":	[-8.61925381041018]
								}, {
									"case":	8,
									"scores":	[-8.61925381041018]
								}, {
									"case":	9,
									"scores":	[-8.61925381041018]
								}, {
									"case":	10,
									"scores":	[-8.61925381041018]
								}, {
									"case":	11,
									"scores":	[-8.61925381041018]
								}, {
									"case":	12,
									"scores":	[-8.61925381041018]
								}, {
									"case":	13,
									"scores":	[-8.61925381041018]
								}, {
									"case":	14,
									"scores":	[-8.61925381041018]
								}, {
									"case":	15,
									"scores":	[-8.61925381041018]
								}, {
									"case":	16,
									"scores":	[-8.61925381041018]
								}, {
									"case":	17,
									"scores":	[-8.61925381041018]
								}, {
									"case":	18,
									"scores":	[-8.61925381041018]
								}, {
									"case":	19,
									"scores":	[-8.61925381041018]
								}, {
									"case":	20,
									"scores":	[-8.61925381041018]
								}, {
									"case":	21,
									"scores":	[-8.61925381041018]
								}, {
									"case":	22,
									"scores":	[-8.61925381041018]
								}, {
									"case":	23,
									"scores":	[-8.61925381041018]
								}, {
									"case":	24,
									"scores":	[-8.61925381041018]
								}, {
									"case":	25,
									"scores":	[-8.61925381041018]
								}, {
									"case":	26,
									"scores":	[-8.61925381041018]
								}, {
									"case":	27,
									"scores":	[-8.61925381041018]
								}, {
									"case":	28,
									"scores":	[-8.61925381041018]
								}, {
									"case":	29,
									"scores":	[-8.61925381041018]
								}, {
									"case":	30,
									"scores":	[-8.61925381041018]
								}, {
									"case":	31,
									"scores":	[-8.61925381041018]
								}, {
									"case":	32,
									"scores":	[-8.61925381041018]
								}, {
									"case":	33,
									"scores":	[-8.61925381041018]
								}, {
									"case":	34,
									"scores":	[-8.61925381041018]
								}, {
									"case":	35,
									"scores":	[-8.61925381041018]
								}, {
									"case":	36,
									"scores":	[-8.61925381041018]
								}, {
									"case":	37,
									"scores":	[-8.61925381041018]
								}, {
									"case":	38,
									"scores":	[-8.61925381041018]
								}, {
									"case":	39,
									"scores":	[-8.61925381041018]
								}, {
									"case":	40,
									"scores":	[-8.61925381041018]
								}, {
									"case":	41,
									"scores":	[-8.61925381041018]
								}, {
									"case":	42,
									"scores":	[-8.61925381041018]
								}, {
									"case":	43,
									"scores":	[-8.61925381041018]
								}, {
									"case":	44,
									"scores":	[-8.61925381041018]
								}, {
									"case":	45,
									"scores":	[-8.61925381041018]
								}, {
									"case":	46,
									"scores":	[-8.61925381041018]
								}, {
									"case":	47,
									"scores":	[-8.61925381041018]
								}, {
									"case":	48,
									"scores":	[-8.61925381041018]
								}, {
									"case":	49,
									"scores":	[-8.61925381041018]
								}, {
									"case":	50,
									"scores":	[-8.61925381041018]
								}, {
									"case":	51,
									"scores":	[-8.61925381041018]
								}, {
									"case":	52,
									"scores":	[-8.61925381041018]
								}, {
									"case":	53,
									"scores":	[-8.61925381041018]
								}, {
									"case":	54,
									"scores":	[-8.61925381041018]
								}, {
									"case":	55,
									"scores":	[-8.61925381041018]
								}, {
									"case":	56,
									"scores":	[-8.61925381041018]
								}, {
									"case":	57,
									"scores":	[-8.61925381041018]
								}, {
									"case":	58,
									"scores":	[-8.61925381041018]
								}, {
									"case":	59,
									"scores":	[-8.61925381041018]
								}, {
									"case":	60,
									"scores":	[-8.61925381041018]
								}, {
									"case":	61,
									"scores":	[-8.61925381041018]
								}, {
									"case":	62,
									"scores":	[-8.61925381041018]
								}, {
									"case":	63,
									"scores":	[-8.61925381041018]
								}, {
									"case":	64,
									"scores":	[-8.61925381041018]
								}, {
									"case":	65,
									"scores":	[-8.61925381041018]
								}, {
									"case":	66,
									"scores":	[-8.61925381041018]
								}, {
									"case":	67,
									"scores":	[-8.61925381041018]
								}, {
									"case":	68,
									"scores":	[-8.61925381041018]
								}, {
									"case":	69,
									"scores":	[-8.61925381041018]
								}]
						}, {
							"switch":	1,
							"types":	[[5], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [2, 3, 4]],
							"begin_line":	85,
							"begin_column":	9,
							"end_line":	95,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L85\", 18, &(intern), sizeof (intern), &(check_std_props), sizeof (check_std_props), &((*intern->array).type), sizeof ((*intern->array).type), &(intern->array), sizeof (intern->array), &(intern->ar_flags), sizeof (intern->ar_flags), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    spl_array_object *other = (spl_array_object *)zend_object_store_get_object(intern->array);\n    return spl_array_get_hash_table(other, check_std_props);\n} else if ((intern->ar_flags & ((check_std_props ? 1 : 0) | 33554432)) != 0) {\n    if (!intern->std.properties) {\n        rebuild_object_properties(&intern->std);\n    }\n    return intern->std.properties;\n} else {\n    return ((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0))));\n}\n", "if ((check_std_props == 0 || (intern->ar_flags & 1) == 0) && (*intern->array).type == 5) {\n    spl_array_object *other = (spl_array_object *)zend_object_store_get_object(intern->array);\n    return spl_array_get_hash_table(other, check_std_props);\n} else if ((intern->ar_flags & ((check_std_props ? 1 : 0) | 33554432)) != 0) {\n    if (!intern->std.properties) {\n        rebuild_object_properties(&intern->std);\n    }\n    return intern->std.properties;\n} else {\n    return ((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0))));\n}\n", "if ((intern->ar_flags & 67108864) && (*intern->array).type == 5) {\n    spl_array_object *other = (spl_array_object *)zend_object_store_get_object(intern->array);\n    return spl_array_get_hash_table(other, check_std_props);\n} else if ((intern->ar_flags & ((check_std_props ? 1 : 0) | 33554432)) != 0) {\n    if (!intern->std.properties) {\n        rebuild_object_properties(&intern->std);\n    }\n    return intern->std.properties;\n} else {\n    return ((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0))));\n}\n", "if ((intern->ar_flags & 67108864) && (check_std_props == 0 || (intern->ar_flags & 1) == 0)) {\n    spl_array_object *other = (spl_array_object *)zend_object_store_get_object(intern->array);\n    return spl_array_get_hash_table(other, check_std_props);\n} else if ((intern->ar_flags & ((check_std_props ? 1 : 0) | 33554432)) != 0) {\n    if (!intern->std.properties) {\n        rebuild_object_properties(&intern->std);\n    }\n    return intern->std.properties;\n} else {\n    return ((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0))));\n}\n", "if (((intern->ar_flags & 67108864) && (check_std_props == 0 || (intern->ar_flags & 1) == 0) && (*intern->array).type == 5) && !__is_neg(\"\", \"L85\", 18, &(intern), sizeof (intern), &(check_std_props), sizeof (check_std_props), &((*intern->array).type), sizeof ((*intern->array).type), &(intern->array), sizeof (intern->array), &(intern->ar_flags), sizeof (intern->ar_flags), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    spl_array_object *other = (spl_array_object *)zend_object_store_get_object(intern->array);\n    return spl_array_get_hash_table(other, check_std_props);\n} else if ((intern->ar_flags & ((check_std_props ? 1 : 0) | 33554432)) != 0) {\n    if (!intern->std.properties) {\n        rebuild_object_properties(&intern->std);\n    }\n    return intern->std.properties;\n} else {\n    return ((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0))));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.5486011676281453, -0.46202476762814415, -1.4059540776281447, -2.3760108776281443, -3.529149881628145, -3.529149881628145, -3.529149881628145, -4.2870379816281448, -4.2870379816281448, -3.529149881628145, -3.529149881628145, -3.9984098816281453, -3.9984098816281453, -3.9984098816281453, -3.9984098816281453, -3.9984098816281453, -4.2870379816281448, -4.2870379816281448]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-6.0750763104281464, -2.9884999104281444, -3.9324292204281446, -4.902486020428146, -6.0556250244281458, -6.0556250244281458, -6.0556250244281458, -6.8135131244281446, -6.8135131244281446, -6.0556250244281458, -6.0556250244281458, -6.5248850244281451, -6.5248850244281451, -6.5248850244281451, -6.5248850244281451, -6.5248850244281451, -6.8135131244281446, -6.8135131244281446]
								}]
						}]
				}, {
					"line":	115,
					"switches":	[]
				}, {
					"line":	120,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [122, 123, 124], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], [], [], [], [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [], [], []],
							"begin_line":	121,
							"begin_column":	0,
							"end_line":	121,
							"end_column":	0,
							"patch_codes":	["memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(ht, 0, sizeof (*(ht)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "p = (ht)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (p)->pNext", "p = (p)", "p = ht->arBuckets[(intern)->pos_h & ht->nTableMask]", "p = ht->arBuckets[intern->pos_h & (ht)->nTableMask]", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "p = ht->arBuckets[intern->pos_h & ht->nTableMask]", "p = p->pNext", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L121\", 28, &(intern), sizeof (intern), &(ht), sizeof (ht), &(p), sizeof (p), &(intern->pos_h), sizeof (intern->pos_h), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->arBuckets), sizeof (ht->arBuckets), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return -1;\n", "if (__is_neg(\"\", \"L121\", 28, &(intern), sizeof (intern), &(ht), sizeof (ht), &(p), sizeof (p), &(intern->pos_h), sizeof (intern->pos_h), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->arBuckets), sizeof (ht->arBuckets), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return 0;\n", "if (__is_neg(\"\", \"L121\", 28, &(intern), sizeof (intern), &(ht), sizeof (ht), &(p), sizeof (p), &(intern->pos_h), sizeof (intern->pos_h), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->arBuckets), sizeof (ht->arBuckets), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	2,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	3,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	4,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	5,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	6,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	7,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	8,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	9,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	10,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	11,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	12,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	13,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	14,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	15,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	16,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	17,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	18,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	19,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	20,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	21,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	22,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	23,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	24,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	25,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	26,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	27,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	28,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	29,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	30,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	31,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	32,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	33,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	34,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	35,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	36,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	37,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	38,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	39,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	40,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	41,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	42,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	43,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-13.917764877557623, -13.514497050557623, -14.783833038957624, -12.774339119857624, -12.774339119857624, -13.507432036857622, -15.620984033657624, -14.736846033657624, -14.736846033657624, -14.490807119857624, -14.490807119857624, -14.701696236857623, -14.701696236857623, -14.701696236857623, -14.701696236857623, -14.701696236857623, -14.736846033657624, -14.736846033657624, -14.490807119857624, -14.490807119857624, -14.490807119857624, -14.736846033657624, -14.736846033657624, -14.736846033657624, -14.490807119857624, -14.490807119857624, -14.490807119857624, -14.490807119857624]
								}, {
									"case":	123,
									"scores":	[-11.093295877557622, -10.690028050557624, -11.959364038957624, -9.9498701198576232, -9.9498701198576232, -10.682963036857624, -12.796515033657624, -11.912377033657624, -11.912377033657624, -11.666338119857624, -11.666338119857624, -11.877227236857625, -11.877227236857625, -11.877227236857625, -11.877227236857625, -11.877227236857625, -11.912377033657624, -11.912377033657624, -11.666338119857624, -11.666338119857624, -11.666338119857624, -11.912377033657624, -11.912377033657624, -11.912377033657624, -11.666338119857624, -11.666338119857624, -11.666338119857624, -11.666338119857624]
								}, {
									"case":	124,
									"scores":	[-13.917764877557623, -13.514497050557623, -14.783833038957624, -12.774339119857624, -12.774339119857624, -13.507432036857622, -15.620984033657624, -14.736846033657624, -14.736846033657624, -14.490807119857624, -14.490807119857624, -14.701696236857623, -14.701696236857623, -14.701696236857623, -14.701696236857623, -14.701696236857623, -14.736846033657624, -14.736846033657624, -14.490807119857624, -14.490807119857624, -14.490807119857624, -14.736846033657624, -14.736846033657624, -14.736846033657624, -14.490807119857624, -14.490807119857624, -14.490807119857624, -14.490807119857624]
								}]
						}, {
							"switch":	5,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	121,
							"begin_column":	2,
							"end_line":	121,
							"end_column":	50,
							"patch_codes":	["if (!__is_neg(\"\", \"L121\", 28, &(intern), sizeof (intern), &(ht), sizeof (ht), &(p), sizeof (p), &(intern->pos_h), sizeof (intern->pos_h), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->arBuckets), sizeof (ht->arBuckets), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    p = ht->arBuckets[intern->pos_h & ht->nTableMask];\n", "{\n}\n", "p = (&ht)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (&intern)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (&p)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (ht)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (p)", "p = ht->arBuckets[(&ht)->pos_h & ht->nTableMask]", "p = ht->arBuckets[(&intern)->pos_h & ht->nTableMask]", "p = ht->arBuckets[(&p)->pos_h & ht->nTableMask]", "p = ht->arBuckets[(intern)->pos_h & ht->nTableMask]", "p = ht->arBuckets[intern->pos_h & (&ht)->nTableMask]", "p = ht->arBuckets[intern->pos_h & (&intern)->nTableMask]", "p = ht->arBuckets[intern->pos_h & (&p)->nTableMask]", "p = ht->arBuckets[intern->pos_h & (ht)->nTableMask]"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.207575215357624, -9.3237802684576234, -9.4689142407576234, -8.6890201784576231, -8.6890201784576231, -7.9598941784576231, -8.7840402684576233, -9.9418172684576227, -9.9418172684576227, -9.1839291684576239, -9.1839291684576239, -9.6531891684576241, -9.6531891684576241, -9.6531891684576241, -9.6531891684576241, -9.6531891684576241, -9.9418172684576227, -9.9418172684576227, -9.1839291684576239, -9.1839291684576239, -9.1839291684576239, -9.9418172684576227, -9.9418172684576227, -9.9418172684576227, -9.1839291684576239, -9.1839291684576239, -9.1839291684576239, -9.1839291684576239]
								}, {
									"case":	2,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	3,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	4,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	5,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	6,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	7,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	8,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	9,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	10,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	11,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	12,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	13,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	14,
									"scores":	[-8.5586456884576236]
								}, {
									"case":	15,
									"scores":	[-8.5586456884576236]
								}]
						}]
				}, {
					"line":	123,
					"switches":	[{
							"switch":	9,
							"types":	[[], [], [], [], [136, 137, 138, 139], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], [], [], [], [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [], [], [], [], [], []],
							"begin_line":	124,
							"begin_column":	2,
							"end_line":	124,
							"end_column":	2,
							"patch_codes":	["memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&p->arKey, 0, sizeof (*(&p->arKey)))", "memset(&p->h, 0, sizeof (*(&p->h)))", "memset(&p->nKeyLength, 0, sizeof (*(&p->nKeyLength)))", "memset(&p->pData, 0, sizeof (*(&p->pData)))", "memset(&p->pDataPtr, 0, sizeof (*(&p->pDataPtr)))", "memset(&p->pLast, 0, sizeof (*(&p->pLast)))", "memset(&p->pListLast, 0, sizeof (*(&p->pListLast)))", "memset(&p->pListNext, 0, sizeof (*(&p->pListNext)))", "memset(&p->pNext, 0, sizeof (*(&p->pNext)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(p->arKey, 0, sizeof (*(p->arKey)))", "memset(p->pData, 0, sizeof (*(p->pData)))", "memset(p->pDataPtr, 0, sizeof (*(p->pDataPtr)))", "memset(p->pLast, 0, sizeof (*(p->pLast)))", "memset(p->pListLast, 0, sizeof (*(p->pListLast)))", "memset(p->pListNext, 0, sizeof (*(p->pListNext)))", "memset(p->pNext, 0, sizeof (*(p->pNext)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "p = (ht)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (p)->pNext", "p = (p)", "p = ht->arBuckets[(intern)->pos_h & ht->nTableMask]", "p = ht->arBuckets[intern->pos_h & (ht)->nTableMask]", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "p = ht->arBuckets[intern->pos_h & ht->nTableMask]", "p = p->pNext", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L124\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(p->pNext), sizeof (p->pNext), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    break;\n", "if (__is_neg(\"\", \"L124\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(p->pNext), sizeof (p->pNext), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    return -1;\n", "if (__is_neg(\"\", \"L124\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(p->pNext), sizeof (p->pNext), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    return 0;\n", "if (__is_neg(\"\", \"L124\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(p->pNext), sizeof (p->pNext), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	2,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	3,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	4,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	5,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	6,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	7,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	8,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	9,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	10,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	11,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	12,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	13,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	14,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	15,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	16,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	17,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	18,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	19,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	20,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	21,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	22,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	23,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	24,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	25,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	26,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	27,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	28,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	29,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	30,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	31,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	32,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	33,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	34,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	35,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	36,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	37,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	38,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	39,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	40,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	41,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	42,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	43,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	44,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	45,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	46,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	47,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	48,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	49,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	50,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	51,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	52,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	53,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	54,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	55,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	56,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	57,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	58,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	59,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	60,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	61,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	62,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	63,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	64,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	65,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	66,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	67,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	68,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	69,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	70,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	71,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	72,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	73,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	74,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	75,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	76,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	77,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	78,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	79,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	80,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	81,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	82,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	83,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	84,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	85,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	86,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	87,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	88,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	89,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	90,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	91,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	92,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	93,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	94,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	95,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	96,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	97,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	98,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	99,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	100,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	101,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	102,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	103,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	104,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	105,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	106,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	107,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	108,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	109,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	110,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	111,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	112,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	113,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	114,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	115,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	116,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	117,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	118,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	119,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	120,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	121,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	122,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	123,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	124,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	125,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	126,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	127,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	128,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	129,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	130,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	131,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	132,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	133,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	134,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	135,
									"scores":	[-7.9727671762495582]
								}, {
									"case":	136,
									"scores":	[-9.76487486004956, -9.47018928604956, -10.284335460049558, -10.284335460049558, -9.50728968604956, -10.038296546249558, -10.284335460049558, -10.284335460049558, -10.038296546249558, -10.038296546249558, -10.249185663249559, -10.249185663249559, -10.249185663249559, -10.249185663249559, -10.249185663249559, -10.284335460049558, -10.284335460049558, -10.038296546249558, -10.038296546249558, -10.249185663249559, -10.249185663249559, -10.284335460049558, -10.284335460049558, -10.284335460049558, -10.249185663249559]
								}, {
									"case":	137,
									"scores":	[-12.733564860049558, -12.438879286049559, -13.253025460049559, -13.253025460049559, -12.475979686049559, -13.006986546249557, -13.253025460049559, -13.253025460049559, -13.006986546249557, -13.006986546249557, -13.217875663249558, -13.217875663249558, -13.217875663249558, -13.217875663249558, -13.217875663249558, -13.253025460049559, -13.253025460049559, -13.006986546249557, -13.006986546249557, -13.217875663249558, -13.217875663249558, -13.253025460049559, -13.253025460049559, -13.253025460049559, -13.217875663249558]
								}, {
									"case":	138,
									"scores":	[-9.90909586004956, -9.61441028604956, -10.428556460049558, -10.428556460049558, -9.65151068604956, -10.182517546249558, -10.428556460049558, -10.428556460049558, -10.182517546249558, -10.182517546249558, -10.393406663249557, -10.393406663249557, -10.393406663249557, -10.393406663249557, -10.393406663249557, -10.428556460049558, -10.428556460049558, -10.182517546249558, -10.182517546249558, -10.393406663249557, -10.393406663249557, -10.428556460049558, -10.428556460049558, -10.428556460049558, -10.393406663249557]
								}, {
									"case":	139,
									"scores":	[-12.733564860049558, -12.438879286049559, -13.253025460049559, -13.253025460049559, -12.475979686049559, -13.006986546249557, -13.253025460049559, -13.253025460049559, -13.006986546249557, -13.006986546249557, -13.217875663249558, -13.217875663249558, -13.217875663249558, -13.217875663249558, -13.217875663249558, -13.253025460049559, -13.253025460049559, -13.006986546249557, -13.006986546249557, -13.217875663249558, -13.217875663249558, -13.253025460049559, -13.253025460049559, -13.253025460049559, -13.217875663249558]
								}]
						}, {
							"switch":	10,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	124,
							"begin_column":	4,
							"end_line":	124,
							"end_column":	11,
							"patch_codes":	["if (!__is_neg(\"\", \"L124\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(p->pNext), sizeof (p->pNext), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.93422304624956, -9.32607454624956, -9.85091935624956, -9.85091935624956, -9.62042534624956, -9.09303125624956, -9.85091935624956, -9.85091935624956, -9.09303125624956, -9.09303125624956, -9.56229125624956, -9.56229125624956, -9.56229125624956, -9.56229125624956, -9.56229125624956, -9.85091935624956, -9.85091935624956, -9.09303125624956, -9.09303125624956, -9.56229125624956, -9.56229125624956, -9.85091935624956, -9.85091935624956, -9.85091935624956, -9.56229125624956]
								}]
						}]
				}, {
					"line":	122,
					"switches":	[{
							"switch":	7,
							"types":	[[], [], [], [], [138, 139, 140, 141], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	123,
							"begin_column":	1,
							"end_line":	123,
							"end_column":	1,
							"patch_codes":	["memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&p->arKey, 0, sizeof (*(&p->arKey)))", "memset(&p->h, 0, sizeof (*(&p->h)))", "memset(&p->nKeyLength, 0, sizeof (*(&p->nKeyLength)))", "memset(&p->pData, 0, sizeof (*(&p->pData)))", "memset(&p->pDataPtr, 0, sizeof (*(&p->pDataPtr)))", "memset(&p->pLast, 0, sizeof (*(&p->pLast)))", "memset(&p->pListLast, 0, sizeof (*(&p->pListLast)))", "memset(&p->pListNext, 0, sizeof (*(&p->pListNext)))", "memset(&p->pNext, 0, sizeof (*(&p->pNext)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(p, 0, sizeof (*(p)))", "memset(p->arKey, 0, sizeof (*(p->arKey)))", "memset(p->pData, 0, sizeof (*(p->pData)))", "memset(p->pDataPtr, 0, sizeof (*(p->pDataPtr)))", "memset(p->pLast, 0, sizeof (*(p->pLast)))", "memset(p->pListLast, 0, sizeof (*(p->pListLast)))", "memset(p->pListNext, 0, sizeof (*(p->pListNext)))", "memset(p->pNext, 0, sizeof (*(p->pNext)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "p = (ht)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (p)->pNext", "p = (p)", "p = ht->arBuckets[(intern)->pos_h & ht->nTableMask]", "p = ht->arBuckets[intern->pos_h & (ht)->nTableMask]", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "p = ht->arBuckets[intern->pos_h & ht->nTableMask]", "p = p->pNext", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L123\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(p->pNext), sizeof (p->pNext), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    break;\n", "if (__is_neg(\"\", \"L123\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(p->pNext), sizeof (p->pNext), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    return -1;\n", "if (__is_neg(\"\", \"L123\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(p->pNext), sizeof (p->pNext), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    return 0;\n", "if (__is_neg(\"\", \"L123\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(p->pNext), sizeof (p->pNext), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.31621320064739]
								}, {
									"case":	2,
									"scores":	[-8.31621320064739]
								}, {
									"case":	3,
									"scores":	[-8.31621320064739]
								}, {
									"case":	4,
									"scores":	[-8.31621320064739]
								}, {
									"case":	5,
									"scores":	[-8.31621320064739]
								}, {
									"case":	6,
									"scores":	[-8.31621320064739]
								}, {
									"case":	7,
									"scores":	[-8.31621320064739]
								}, {
									"case":	8,
									"scores":	[-8.31621320064739]
								}, {
									"case":	9,
									"scores":	[-8.31621320064739]
								}, {
									"case":	10,
									"scores":	[-8.31621320064739]
								}, {
									"case":	11,
									"scores":	[-8.31621320064739]
								}, {
									"case":	12,
									"scores":	[-8.31621320064739]
								}, {
									"case":	13,
									"scores":	[-8.31621320064739]
								}, {
									"case":	14,
									"scores":	[-8.31621320064739]
								}, {
									"case":	15,
									"scores":	[-8.31621320064739]
								}, {
									"case":	16,
									"scores":	[-8.31621320064739]
								}, {
									"case":	17,
									"scores":	[-8.31621320064739]
								}, {
									"case":	18,
									"scores":	[-8.31621320064739]
								}, {
									"case":	19,
									"scores":	[-8.31621320064739]
								}, {
									"case":	20,
									"scores":	[-8.31621320064739]
								}, {
									"case":	21,
									"scores":	[-8.31621320064739]
								}, {
									"case":	22,
									"scores":	[-8.31621320064739]
								}, {
									"case":	23,
									"scores":	[-8.31621320064739]
								}, {
									"case":	24,
									"scores":	[-8.31621320064739]
								}, {
									"case":	25,
									"scores":	[-8.31621320064739]
								}, {
									"case":	26,
									"scores":	[-8.31621320064739]
								}, {
									"case":	27,
									"scores":	[-8.31621320064739]
								}, {
									"case":	28,
									"scores":	[-8.31621320064739]
								}, {
									"case":	29,
									"scores":	[-8.31621320064739]
								}, {
									"case":	30,
									"scores":	[-8.31621320064739]
								}, {
									"case":	31,
									"scores":	[-8.31621320064739]
								}, {
									"case":	32,
									"scores":	[-8.31621320064739]
								}, {
									"case":	33,
									"scores":	[-8.31621320064739]
								}, {
									"case":	34,
									"scores":	[-8.31621320064739]
								}, {
									"case":	35,
									"scores":	[-8.31621320064739]
								}, {
									"case":	36,
									"scores":	[-8.31621320064739]
								}, {
									"case":	37,
									"scores":	[-8.31621320064739]
								}, {
									"case":	38,
									"scores":	[-8.31621320064739]
								}, {
									"case":	39,
									"scores":	[-8.31621320064739]
								}, {
									"case":	40,
									"scores":	[-8.31621320064739]
								}, {
									"case":	41,
									"scores":	[-8.31621320064739]
								}, {
									"case":	42,
									"scores":	[-8.31621320064739]
								}, {
									"case":	43,
									"scores":	[-8.31621320064739]
								}, {
									"case":	44,
									"scores":	[-8.31621320064739]
								}, {
									"case":	45,
									"scores":	[-8.31621320064739]
								}, {
									"case":	46,
									"scores":	[-8.31621320064739]
								}, {
									"case":	47,
									"scores":	[-8.31621320064739]
								}, {
									"case":	48,
									"scores":	[-8.31621320064739]
								}, {
									"case":	49,
									"scores":	[-8.31621320064739]
								}, {
									"case":	50,
									"scores":	[-8.31621320064739]
								}, {
									"case":	51,
									"scores":	[-8.31621320064739]
								}, {
									"case":	52,
									"scores":	[-8.31621320064739]
								}, {
									"case":	53,
									"scores":	[-8.31621320064739]
								}, {
									"case":	54,
									"scores":	[-8.31621320064739]
								}, {
									"case":	55,
									"scores":	[-8.31621320064739]
								}, {
									"case":	56,
									"scores":	[-8.31621320064739]
								}, {
									"case":	57,
									"scores":	[-8.31621320064739]
								}, {
									"case":	58,
									"scores":	[-8.31621320064739]
								}, {
									"case":	59,
									"scores":	[-8.31621320064739]
								}, {
									"case":	60,
									"scores":	[-8.31621320064739]
								}, {
									"case":	61,
									"scores":	[-8.31621320064739]
								}, {
									"case":	62,
									"scores":	[-8.31621320064739]
								}, {
									"case":	63,
									"scores":	[-8.31621320064739]
								}, {
									"case":	64,
									"scores":	[-8.31621320064739]
								}, {
									"case":	65,
									"scores":	[-8.31621320064739]
								}, {
									"case":	66,
									"scores":	[-8.31621320064739]
								}, {
									"case":	67,
									"scores":	[-8.31621320064739]
								}, {
									"case":	68,
									"scores":	[-8.31621320064739]
								}, {
									"case":	69,
									"scores":	[-8.31621320064739]
								}, {
									"case":	70,
									"scores":	[-8.31621320064739]
								}, {
									"case":	71,
									"scores":	[-8.31621320064739]
								}, {
									"case":	72,
									"scores":	[-8.31621320064739]
								}, {
									"case":	73,
									"scores":	[-8.31621320064739]
								}, {
									"case":	74,
									"scores":	[-8.31621320064739]
								}, {
									"case":	75,
									"scores":	[-8.31621320064739]
								}, {
									"case":	76,
									"scores":	[-8.31621320064739]
								}, {
									"case":	77,
									"scores":	[-8.31621320064739]
								}, {
									"case":	78,
									"scores":	[-8.31621320064739]
								}, {
									"case":	79,
									"scores":	[-8.31621320064739]
								}, {
									"case":	80,
									"scores":	[-8.31621320064739]
								}, {
									"case":	81,
									"scores":	[-8.31621320064739]
								}, {
									"case":	82,
									"scores":	[-8.31621320064739]
								}, {
									"case":	83,
									"scores":	[-8.31621320064739]
								}, {
									"case":	84,
									"scores":	[-8.31621320064739]
								}, {
									"case":	85,
									"scores":	[-8.31621320064739]
								}, {
									"case":	86,
									"scores":	[-8.31621320064739]
								}, {
									"case":	87,
									"scores":	[-8.31621320064739]
								}, {
									"case":	88,
									"scores":	[-8.31621320064739]
								}, {
									"case":	89,
									"scores":	[-8.31621320064739]
								}, {
									"case":	90,
									"scores":	[-8.31621320064739]
								}, {
									"case":	91,
									"scores":	[-8.31621320064739]
								}, {
									"case":	92,
									"scores":	[-8.31621320064739]
								}, {
									"case":	93,
									"scores":	[-8.31621320064739]
								}, {
									"case":	94,
									"scores":	[-8.31621320064739]
								}, {
									"case":	95,
									"scores":	[-8.31621320064739]
								}, {
									"case":	96,
									"scores":	[-8.31621320064739]
								}, {
									"case":	97,
									"scores":	[-8.31621320064739]
								}, {
									"case":	98,
									"scores":	[-8.31621320064739]
								}, {
									"case":	99,
									"scores":	[-8.31621320064739]
								}, {
									"case":	100,
									"scores":	[-8.31621320064739]
								}, {
									"case":	101,
									"scores":	[-8.31621320064739]
								}, {
									"case":	102,
									"scores":	[-8.31621320064739]
								}, {
									"case":	103,
									"scores":	[-8.31621320064739]
								}, {
									"case":	104,
									"scores":	[-8.31621320064739]
								}, {
									"case":	105,
									"scores":	[-8.31621320064739]
								}, {
									"case":	106,
									"scores":	[-8.31621320064739]
								}, {
									"case":	107,
									"scores":	[-8.31621320064739]
								}, {
									"case":	108,
									"scores":	[-8.31621320064739]
								}, {
									"case":	109,
									"scores":	[-8.31621320064739]
								}, {
									"case":	110,
									"scores":	[-8.31621320064739]
								}, {
									"case":	111,
									"scores":	[-8.31621320064739]
								}, {
									"case":	112,
									"scores":	[-8.31621320064739]
								}, {
									"case":	113,
									"scores":	[-8.31621320064739]
								}, {
									"case":	114,
									"scores":	[-8.31621320064739]
								}, {
									"case":	115,
									"scores":	[-8.31621320064739]
								}, {
									"case":	116,
									"scores":	[-8.31621320064739]
								}, {
									"case":	117,
									"scores":	[-8.31621320064739]
								}, {
									"case":	118,
									"scores":	[-8.31621320064739]
								}, {
									"case":	119,
									"scores":	[-8.31621320064739]
								}, {
									"case":	120,
									"scores":	[-8.31621320064739]
								}, {
									"case":	121,
									"scores":	[-8.31621320064739]
								}, {
									"case":	122,
									"scores":	[-8.31621320064739]
								}, {
									"case":	123,
									"scores":	[-8.31621320064739]
								}, {
									"case":	124,
									"scores":	[-8.31621320064739]
								}, {
									"case":	125,
									"scores":	[-8.31621320064739]
								}, {
									"case":	126,
									"scores":	[-8.31621320064739]
								}, {
									"case":	127,
									"scores":	[-8.31621320064739]
								}, {
									"case":	128,
									"scores":	[-8.31621320064739]
								}, {
									"case":	129,
									"scores":	[-8.31621320064739]
								}, {
									"case":	130,
									"scores":	[-8.31621320064739]
								}, {
									"case":	131,
									"scores":	[-8.31621320064739]
								}, {
									"case":	132,
									"scores":	[-8.31621320064739]
								}, {
									"case":	133,
									"scores":	[-8.31621320064739]
								}, {
									"case":	134,
									"scores":	[-8.31621320064739]
								}, {
									"case":	135,
									"scores":	[-8.31621320064739]
								}, {
									"case":	136,
									"scores":	[-8.31621320064739]
								}, {
									"case":	137,
									"scores":	[-8.31621320064739]
								}, {
									"case":	138,
									"scores":	[-13.78332767534739, -13.019421707347391, -12.998463104447389, -12.254577710447389, -12.785584570647389, -12.488586484447389, -13.03162348444739, -13.03162348444739, -12.785584570647389, -12.785584570647389, -12.996473687647388, -12.996473687647388, -12.996473687647388, -12.996473687647388, -12.996473687647388, -13.03162348444739, -13.03162348444739, -12.785584570647389, -12.785584570647389, -12.996473687647388, -12.996473687647388, -13.03162348444739, -13.03162348444739, -13.03162348444739, -12.996473687647388]
								}, {
									"case":	139,
									"scores":	[-16.752017675347389, -15.988111707347391, -15.967153104447389, -15.22326771044739, -15.754274570647389, -15.457276484447389, -16.000313484447389, -16.000313484447389, -15.754274570647389, -15.754274570647389, -15.965163687647388, -15.965163687647388, -15.965163687647388, -15.965163687647388, -15.965163687647388, -16.000313484447389, -16.000313484447389, -15.754274570647389, -15.754274570647389, -15.965163687647388, -15.965163687647388, -16.000313484447389, -16.000313484447389, -16.000313484447389, -15.965163687647388]
								}, {
									"case":	140,
									"scores":	[-13.927548675347392, -13.163642707347391, -13.14268410444739, -12.398798710447391, -12.929805570647389, -12.63280748444739, -13.175844484447389, -13.175844484447389, -12.929805570647389, -12.929805570647389, -13.14069468764739, -13.14069468764739, -13.14069468764739, -13.14069468764739, -13.14069468764739, -13.175844484447389, -13.175844484447389, -12.929805570647389, -12.929805570647389, -13.14069468764739, -13.14069468764739, -13.175844484447389, -13.175844484447389, -13.175844484447389, -13.14069468764739]
								}, {
									"case":	141,
									"scores":	[-16.752017675347389, -15.988111707347391, -15.967153104447389, -15.22326771044739, -15.754274570647389, -15.457276484447389, -16.000313484447389, -16.000313484447389, -15.754274570647389, -15.754274570647389, -15.965163687647388, -15.965163687647388, -15.965163687647388, -15.965163687647388, -15.965163687647388, -16.000313484447389, -16.000313484447389, -15.754274570647389, -15.754274570647389, -15.965163687647388, -15.965163687647388, -16.000313484447389, -16.000313484447389, -16.000313484447389, -15.965163687647388]
								}]
						}, {
							"switch":	8,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	123,
							"begin_column":	3,
							"end_line":	125,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L123\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(p->pNext), sizeof (p->pNext), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey))) {\n    return 0;\n}\n", "if ((p == intern->pos) || __is_neg(\"\", \"L123\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(p->pNext), sizeof (p->pNext), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey))) {\n    return 0;\n}\n", "if ((p == intern->pos) && !__is_neg(\"\", \"L123\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(p->pNext), sizeof (p->pNext), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey))) {\n    return 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3945153754281456, -2.9330345543281453, -3.0798556854281456, -4.9733516754281455, -4.4459575854281459, -4.5901622454281465, -5.2038456854281456, -5.2038456854281456, -4.4459575854281459, -4.4459575854281459, -4.9152175854281452, -4.9152175854281452, -4.9152175854281452, -4.9152175854281452, -4.9152175854281452, -5.2038456854281456, -5.2038456854281456, -4.4459575854281459, -4.4459575854281459, -4.9152175854281452, -4.9152175854281452, -5.2038456854281456, -5.2038456854281456, -5.2038456854281456, -4.9152175854281452]
								}, {
									"case":	2,
									"scores":	[-7.1200126794281458, -4.6585318583281463, -4.8053529894281457, -6.6988489794281456, -6.171454889428146, -6.3156595494281458, -6.9293429894281449, -6.9293429894281449, -6.171454889428146, -6.171454889428146, -6.6407148894281454, -6.6407148894281454, -6.6407148894281454, -6.6407148894281454, -6.6407148894281454, -6.9293429894281449, -6.9293429894281449, -6.171454889428146, -6.171454889428146, -6.6407148894281454, -6.6407148894281454, -6.9293429894281449, -6.9293429894281449, -6.9293429894281449, -6.6407148894281454]
								}, {
									"case":	3,
									"scores":	[-7.1200126794281458, -4.6585318583281463, -4.8053529894281457, -6.6988489794281456, -6.171454889428146, -6.3156595494281458, -6.9293429894281449, -6.9293429894281449, -6.171454889428146, -6.171454889428146, -6.6407148894281454, -6.6407148894281454, -6.6407148894281454, -6.6407148894281454, -6.6407148894281454, -6.9293429894281449, -6.9293429894281449, -6.171454889428146, -6.171454889428146, -6.6407148894281454, -6.6407148894281454, -6.9293429894281449, -6.9293429894281449, -6.9293429894281449, -6.6407148894281454]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	123,
							"begin_column":	3,
							"end_line":	125,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L123\", 25, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(p->pNext), sizeof (p->pNext), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(p->h), sizeof (p->h), &(p->nKeyLength), sizeof (p->nKeyLength), &(p->pData), sizeof (p->pData), &(p->pDataPtr), sizeof (p->pDataPtr), &(p->pListNext), sizeof (p->pListNext), &(p->pListLast), sizeof (p->pListLast), &(p->pLast), sizeof (p->pLast), &(p->arKey), sizeof (p->arKey)))\n    if (p == intern->pos) {\n        return 0;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-11.129036470647389, -8.66755564954739, -8.81437678064739, -10.70787277064739, -10.18047868064739, -10.32468334064739, -10.938366780647389, -10.938366780647389, -10.18047868064739, -10.18047868064739, -10.649738680647388, -10.649738680647388, -10.649738680647388, -10.649738680647388, -10.649738680647388, -10.938366780647389, -10.938366780647389, -10.18047868064739, -10.18047868064739, -10.649738680647388, -10.649738680647388, -10.938366780647389, -10.938366780647389, -10.938366780647389, -10.649738680647388]
								}]
						}]
				}, {
					"line":	121,
					"switches":	[{
							"switch":	6,
							"types":	[[], [], [], [], [121, 122, 123], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [], [], [], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [], [], []],
							"begin_line":	122,
							"begin_column":	0,
							"end_line":	122,
							"end_column":	0,
							"patch_codes":	["memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "p = (ht)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (p)->pNext", "p = (p)", "p = ht->arBuckets[(intern)->pos_h & ht->nTableMask]", "p = ht->arBuckets[intern->pos_h & (ht)->nTableMask]", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "p = ht->arBuckets[intern->pos_h & ht->nTableMask]", "p = p->pNext", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L122\", 28, &(p), sizeof (p), &(intern), sizeof (intern), &(ht), sizeof (ht), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->arBuckets), sizeof (ht->arBuckets), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return -1;\n", "if (__is_neg(\"\", \"L122\", 28, &(p), sizeof (p), &(intern), sizeof (intern), &(ht), sizeof (ht), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->arBuckets), sizeof (ht->arBuckets), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return 0;\n", "if (__is_neg(\"\", \"L122\", 28, &(p), sizeof (p), &(intern), sizeof (intern), &(ht), sizeof (ht), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->arBuckets), sizeof (ht->arBuckets), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	2,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	3,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	4,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	5,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	6,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	7,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	8,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	9,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	10,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	11,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	12,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	13,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	14,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	15,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	16,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	17,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	18,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	19,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	20,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	21,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	22,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	23,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	24,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	25,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	26,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	27,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	28,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	29,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	30,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	31,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	32,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	33,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	34,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	35,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	36,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	37,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	38,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	39,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	40,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	41,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	42,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	43,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	44,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	45,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	46,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	47,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	48,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	49,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	50,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	51,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	52,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	53,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	54,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	55,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	56,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	57,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	58,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	59,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	60,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	61,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	62,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	63,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	64,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	65,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	66,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	67,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	68,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	69,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	70,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	71,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	72,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	73,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	74,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	75,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	76,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	77,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	78,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	79,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	80,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	81,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	82,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	83,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	84,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	85,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	86,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	87,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	88,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	89,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	90,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	91,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	92,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	93,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	94,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	95,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	96,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	97,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	98,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	99,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	100,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	101,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	102,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	103,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	104,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	105,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	106,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	107,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	108,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	109,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	110,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	111,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	112,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	113,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	114,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	115,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	116,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	117,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	118,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	119,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	120,
									"scores":	[-8.5384429811401041]
								}, {
									"case":	121,
									"scores":	[-13.490113141640105, -16.3721565902401, -14.697723972340103, -15.120420946340104, -14.693467132540103, -14.693467132540103, -15.213409649540104, -15.153581326340104, -15.153581326340104, -14.907542412540105, -14.907542412540105, -15.118431529540103, -15.118431529540103, -15.118431529540103, -15.118431529540103, -15.118431529540103, -15.153581326340104, -15.153581326340104, -14.907542412540105, -14.907542412540105, -14.907542412540105, -15.153581326340104, -15.153581326340104, -15.153581326340104, -14.907542412540105, -14.907542412540105, -14.907542412540105, -14.907542412540105]
								}, {
									"case":	122,
									"scores":	[-10.665644141640104, -13.547687590240104, -11.873254972340105, -12.295951946340104, -11.868998132540105, -11.868998132540105, -12.388940649540103, -12.329112326340104, -12.329112326340104, -12.083073412540104, -12.083073412540104, -12.293962529540103, -12.293962529540103, -12.293962529540103, -12.293962529540103, -12.293962529540103, -12.329112326340104, -12.329112326340104, -12.083073412540104, -12.083073412540104, -12.083073412540104, -12.329112326340104, -12.329112326340104, -12.329112326340104, -12.083073412540104, -12.083073412540104, -12.083073412540104, -12.083073412540104]
								}, {
									"case":	123,
									"scores":	[-13.490113141640105, -16.3721565902401, -14.697723972340103, -15.120420946340104, -14.693467132540103, -14.693467132540103, -15.213409649540104, -15.153581326340104, -15.153581326340104, -14.907542412540105, -14.907542412540105, -15.118431529540103, -15.118431529540103, -15.118431529540103, -15.118431529540103, -15.118431529540103, -15.153581326340104, -15.153581326340104, -14.907542412540105, -14.907542412540105, -14.907542412540105, -15.153581326340104, -15.153581326340104, -15.153581326340104, -14.907542412540105, -14.907542412540105, -14.907542412540105, -14.907542412540105]
								}]
						}, {
							"switch":	12,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	122,
							"begin_column":	2,
							"end_line":	127,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L122\", 28, &(p), sizeof (p), &(intern), sizeof (intern), &(ht), sizeof (ht), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->arBuckets), sizeof (ht->arBuckets), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    while (p != ((void *)0))\n        {\n            if (p == intern->pos) {\n                return 0;\n            }\n            p = p->pNext;\n        }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.3295984121401041, -10.171829950640104, -10.430926041640104, -8.6662055611401048, -9.6617444611401044, -9.6617444611401044, -10.207508171640104, -10.790195561140104, -10.790195561140104, -10.032307461140103, -10.032307461140103, -10.501567461140104, -10.501567461140104, -10.501567461140104, -10.501567461140104, -10.501567461140104, -10.790195561140104, -10.790195561140104, -10.032307461140103, -10.032307461140103, -10.032307461140103, -10.790195561140104, -10.790195561140104, -10.790195561140104, -10.032307461140103, -10.032307461140103, -10.032307461140103, -10.032307461140103]
								}]
						}]
				}, {
					"line":	128,
					"switches":	[{
							"switch":	13,
							"types":	[[], [], [], [], [121, 122, 123], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], [], [], [], [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [], [], [], [], [], []],
							"begin_line":	129,
							"begin_column":	0,
							"end_line":	129,
							"end_column":	0,
							"patch_codes":	["memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "p = (ht)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (p)->pNext", "p = (p)", "p = ht->arBuckets[(intern)->pos_h & ht->nTableMask]", "p = ht->arBuckets[intern->pos_h & (ht)->nTableMask]", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "p = ht->arBuckets[intern->pos_h & ht->nTableMask]", "p = p->pNext", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L129\", 16, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return -1;\n", "if (__is_neg(\"\", \"L129\", 16, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 0;\n", "if (__is_neg(\"\", \"L129\", 16, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.275739761577924]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}, {
									"case":	28,
									"scores":	[-6.275739761577924]
								}, {
									"case":	29,
									"scores":	[-6.275739761577924]
								}, {
									"case":	30,
									"scores":	[-6.275739761577924]
								}, {
									"case":	31,
									"scores":	[-6.275739761577924]
								}, {
									"case":	32,
									"scores":	[-6.275739761577924]
								}, {
									"case":	33,
									"scores":	[-6.275739761577924]
								}, {
									"case":	34,
									"scores":	[-6.275739761577924]
								}, {
									"case":	35,
									"scores":	[-6.275739761577924]
								}, {
									"case":	36,
									"scores":	[-6.275739761577924]
								}, {
									"case":	37,
									"scores":	[-6.275739761577924]
								}, {
									"case":	38,
									"scores":	[-6.275739761577924]
								}, {
									"case":	39,
									"scores":	[-6.275739761577924]
								}, {
									"case":	40,
									"scores":	[-6.275739761577924]
								}, {
									"case":	41,
									"scores":	[-6.275739761577924]
								}, {
									"case":	42,
									"scores":	[-6.275739761577924]
								}, {
									"case":	43,
									"scores":	[-6.275739761577924]
								}, {
									"case":	44,
									"scores":	[-6.275739761577924]
								}, {
									"case":	45,
									"scores":	[-6.275739761577924]
								}, {
									"case":	46,
									"scores":	[-6.275739761577924]
								}, {
									"case":	47,
									"scores":	[-6.275739761577924]
								}, {
									"case":	48,
									"scores":	[-6.275739761577924]
								}, {
									"case":	49,
									"scores":	[-6.275739761577924]
								}, {
									"case":	50,
									"scores":	[-6.275739761577924]
								}, {
									"case":	51,
									"scores":	[-6.275739761577924]
								}, {
									"case":	52,
									"scores":	[-6.275739761577924]
								}, {
									"case":	53,
									"scores":	[-6.275739761577924]
								}, {
									"case":	54,
									"scores":	[-6.275739761577924]
								}, {
									"case":	55,
									"scores":	[-6.275739761577924]
								}, {
									"case":	56,
									"scores":	[-6.275739761577924]
								}, {
									"case":	57,
									"scores":	[-6.275739761577924]
								}, {
									"case":	58,
									"scores":	[-6.275739761577924]
								}, {
									"case":	59,
									"scores":	[-6.275739761577924]
								}, {
									"case":	60,
									"scores":	[-6.275739761577924]
								}, {
									"case":	61,
									"scores":	[-6.275739761577924]
								}, {
									"case":	62,
									"scores":	[-6.275739761577924]
								}, {
									"case":	63,
									"scores":	[-6.275739761577924]
								}, {
									"case":	64,
									"scores":	[-6.275739761577924]
								}, {
									"case":	65,
									"scores":	[-6.275739761577924]
								}, {
									"case":	66,
									"scores":	[-6.275739761577924]
								}, {
									"case":	67,
									"scores":	[-6.275739761577924]
								}, {
									"case":	68,
									"scores":	[-6.275739761577924]
								}, {
									"case":	69,
									"scores":	[-6.275739761577924]
								}, {
									"case":	70,
									"scores":	[-6.275739761577924]
								}, {
									"case":	71,
									"scores":	[-6.275739761577924]
								}, {
									"case":	72,
									"scores":	[-6.275739761577924]
								}, {
									"case":	73,
									"scores":	[-6.275739761577924]
								}, {
									"case":	74,
									"scores":	[-6.275739761577924]
								}, {
									"case":	75,
									"scores":	[-6.275739761577924]
								}, {
									"case":	76,
									"scores":	[-6.275739761577924]
								}, {
									"case":	77,
									"scores":	[-6.275739761577924]
								}, {
									"case":	78,
									"scores":	[-6.275739761577924]
								}, {
									"case":	79,
									"scores":	[-6.275739761577924]
								}, {
									"case":	80,
									"scores":	[-6.275739761577924]
								}, {
									"case":	81,
									"scores":	[-6.275739761577924]
								}, {
									"case":	82,
									"scores":	[-6.275739761577924]
								}, {
									"case":	83,
									"scores":	[-6.275739761577924]
								}, {
									"case":	84,
									"scores":	[-6.275739761577924]
								}, {
									"case":	85,
									"scores":	[-6.275739761577924]
								}, {
									"case":	86,
									"scores":	[-6.275739761577924]
								}, {
									"case":	87,
									"scores":	[-6.275739761577924]
								}, {
									"case":	88,
									"scores":	[-6.275739761577924]
								}, {
									"case":	89,
									"scores":	[-6.275739761577924]
								}, {
									"case":	90,
									"scores":	[-6.275739761577924]
								}, {
									"case":	91,
									"scores":	[-6.275739761577924]
								}, {
									"case":	92,
									"scores":	[-6.275739761577924]
								}, {
									"case":	93,
									"scores":	[-6.275739761577924]
								}, {
									"case":	94,
									"scores":	[-6.275739761577924]
								}, {
									"case":	95,
									"scores":	[-6.275739761577924]
								}, {
									"case":	96,
									"scores":	[-6.275739761577924]
								}, {
									"case":	97,
									"scores":	[-6.275739761577924]
								}, {
									"case":	98,
									"scores":	[-6.275739761577924]
								}, {
									"case":	99,
									"scores":	[-6.275739761577924]
								}, {
									"case":	100,
									"scores":	[-6.275739761577924]
								}, {
									"case":	101,
									"scores":	[-6.275739761577924]
								}, {
									"case":	102,
									"scores":	[-6.275739761577924]
								}, {
									"case":	103,
									"scores":	[-6.275739761577924]
								}, {
									"case":	104,
									"scores":	[-6.275739761577924]
								}, {
									"case":	105,
									"scores":	[-6.275739761577924]
								}, {
									"case":	106,
									"scores":	[-6.275739761577924]
								}, {
									"case":	107,
									"scores":	[-6.275739761577924]
								}, {
									"case":	108,
									"scores":	[-6.275739761577924]
								}, {
									"case":	109,
									"scores":	[-6.275739761577924]
								}, {
									"case":	110,
									"scores":	[-6.275739761577924]
								}, {
									"case":	111,
									"scores":	[-6.275739761577924]
								}, {
									"case":	112,
									"scores":	[-6.275739761577924]
								}, {
									"case":	113,
									"scores":	[-6.275739761577924]
								}, {
									"case":	114,
									"scores":	[-6.275739761577924]
								}, {
									"case":	115,
									"scores":	[-6.275739761577924]
								}, {
									"case":	116,
									"scores":	[-6.275739761577924]
								}, {
									"case":	117,
									"scores":	[-6.275739761577924]
								}, {
									"case":	118,
									"scores":	[-6.275739761577924]
								}, {
									"case":	119,
									"scores":	[-6.275739761577924]
								}, {
									"case":	120,
									"scores":	[-6.275739761577924]
								}, {
									"case":	121,
									"scores":	[-11.403195157777924, -10.034455962477924, -11.964971306777924, -12.000917952777924, -11.996661112977923, -12.456775306777924, -12.456775306777924, -12.210736392977925, -12.210736392977925, -12.421625509977924, -12.421625509977924, -12.421625509977924, -12.421625509977924, -12.421625509977924, -12.456775306777924, -12.456775306777924]
								}, {
									"case":	122,
									"scores":	[-8.5787261577779237, -7.2099869624779238, -9.1405023067779236, -9.1764489527779229, -9.1721921129779247, -9.6323063067779238, -9.6323063067779238, -9.3862673929779241, -9.3862673929779241, -9.5971565099779248, -9.5971565099779248, -9.5971565099779248, -9.5971565099779248, -9.5971565099779248, -9.6323063067779238, -9.6323063067779238]
								}, {
									"case":	123,
									"scores":	[-11.403195157777924, -10.034455962477924, -11.964971306777924, -12.000917952777924, -11.996661112977923, -12.456775306777924, -12.456775306777924, -12.210736392977925, -12.210736392977925, -12.421625509977924, -12.421625509977924, -12.421625509977924, -12.421625509977924, -12.421625509977924, -12.456775306777924, -12.456775306777924]
								}]
						}, {
							"switch":	14,
							"types":	[[], [], [1], [], [], [], [24, 25, 26, 27], [], [20, 21, 22, 23], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [19]],
							"begin_line":	129,
							"begin_column":	2,
							"end_line":	129,
							"end_column":	35,
							"patch_codes":	["if (!__is_neg(\"\", \"L129\", 16, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    spl_array_rewind(intern);\n", "spl_array_get_hash_table(intern, -1)", "spl_array_get_hash_table(intern, 0)", "spl_array_get_hash_table(intern, 1)", "spl_array_get_hash_table(intern, le_index_ptr)", "spl_array_next_ex(intern, 0)", "spl_array_next_ex(intern, ht)", "spl_array_next_no_verify(intern, 0)", "spl_array_next_no_verify(intern, ht)", "spl_array_object_count_elements_helper(intern, 0)", "spl_array_rewind_ex(intern, 0)", "spl_array_rewind_ex(intern, ht)", "spl_array_set_pos(intern, 0)", "spl_array_set_pos(intern, p)", "spl_array_skip_protected(intern, 0)", "spl_array_skip_protected(intern, ht)", "spl_hash_verify_pos_ex(intern, 0)", "spl_hash_verify_pos_ex(intern, ht)", "{\n}\n", "spl_array_next(intern)", "spl_array_rewind(intern)", "spl_array_update_pos(intern)", "spl_hash_verify_pos(intern)", "spl_array_rewind((&ht))", "spl_array_rewind((&intern))", "spl_array_rewind((&p))", "spl_array_rewind((intern))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5411628220779239, -6.9028447935779242, -7.9133141015779245, -7.940800422077924, -7.1716188415779243, -8.3000699415779238, -8.3000699415779238, -7.542181841577924, -7.542181841577924, -8.0114418415779234, -8.0114418415779234, -8.0114418415779234, -8.0114418415779234, -8.0114418415779234, -8.3000699415779238, -8.3000699415779238]
								}, {
									"case":	2,
									"scores":	[-6.275739761577924]
								}, {
									"case":	3,
									"scores":	[-6.275739761577924]
								}, {
									"case":	4,
									"scores":	[-6.275739761577924]
								}, {
									"case":	5,
									"scores":	[-6.275739761577924]
								}, {
									"case":	6,
									"scores":	[-6.275739761577924]
								}, {
									"case":	7,
									"scores":	[-6.275739761577924]
								}, {
									"case":	8,
									"scores":	[-6.275739761577924]
								}, {
									"case":	9,
									"scores":	[-6.275739761577924]
								}, {
									"case":	10,
									"scores":	[-6.275739761577924]
								}, {
									"case":	11,
									"scores":	[-6.275739761577924]
								}, {
									"case":	12,
									"scores":	[-6.275739761577924]
								}, {
									"case":	13,
									"scores":	[-6.275739761577924]
								}, {
									"case":	14,
									"scores":	[-6.275739761577924]
								}, {
									"case":	15,
									"scores":	[-6.275739761577924]
								}, {
									"case":	16,
									"scores":	[-6.275739761577924]
								}, {
									"case":	17,
									"scores":	[-6.275739761577924]
								}, {
									"case":	18,
									"scores":	[-6.275739761577924]
								}, {
									"case":	19,
									"scores":	[-6.275739761577924]
								}, {
									"case":	20,
									"scores":	[-6.275739761577924]
								}, {
									"case":	21,
									"scores":	[-6.275739761577924]
								}, {
									"case":	22,
									"scores":	[-6.275739761577924]
								}, {
									"case":	23,
									"scores":	[-6.275739761577924]
								}, {
									"case":	24,
									"scores":	[-6.275739761577924]
								}, {
									"case":	25,
									"scores":	[-6.275739761577924]
								}, {
									"case":	26,
									"scores":	[-6.275739761577924]
								}, {
									"case":	27,
									"scores":	[-6.275739761577924]
								}]
						}]
				}, {
					"line":	129,
					"switches":	[{
							"switch":	15,
							"types":	[[], [], [], [], [120, 121, 122], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [], [], [], [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], [], [], [], [], [], []],
							"begin_line":	130,
							"begin_column":	0,
							"end_line":	130,
							"end_column":	0,
							"patch_codes":	["memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "p = (ht)->arBuckets[intern->pos_h & ht->nTableMask]", "p = (p)->pNext", "p = (p)", "p = ht->arBuckets[(intern)->pos_h & ht->nTableMask]", "p = ht->arBuckets[intern->pos_h & (ht)->nTableMask]", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "p = ht->arBuckets[intern->pos_h & ht->nTableMask]", "p = p->pNext", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L130\", 16, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return -1;\n", "if (__is_neg(\"\", \"L130\", 16, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 0;\n", "if (__is_neg(\"\", \"L130\", 16, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	2,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	3,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	4,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	5,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	6,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	7,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	8,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	9,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	10,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	11,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	12,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	13,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	14,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	15,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	16,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	17,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	18,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	19,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	20,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	21,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	22,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	23,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	24,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	25,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	26,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	27,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	28,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	29,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	30,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	31,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	32,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	33,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	34,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	35,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	36,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	37,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	38,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	39,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	40,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	41,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	42,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	43,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	44,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	45,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	46,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	47,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	48,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	49,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	50,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	51,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	52,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	53,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	54,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	55,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	56,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	57,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	58,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	59,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	60,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	61,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	62,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	63,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	64,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	65,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	66,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	67,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	68,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	69,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	70,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	71,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	72,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	73,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	74,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	75,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	76,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	77,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	78,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	79,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	80,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	81,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	82,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	83,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	84,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	85,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	86,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	87,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	88,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	89,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	90,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	91,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	92,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	93,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	94,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	95,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	96,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	97,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	98,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	99,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	100,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	101,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	102,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	103,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	104,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	105,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	106,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	107,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	108,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	109,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	110,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	111,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	112,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	113,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	114,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	115,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	116,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	117,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	118,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	119,
									"scores":	[-6.2555370542604045]
								}, {
									"case":	120,
									"scores":	[-12.200821638060404, -9.956660393760405, -11.887175738060405, -11.923122384060404, -11.918865544260404, -12.378979738060405, -12.378979738060405, -12.132940824260405, -12.132940824260405, -12.343829941260404, -12.343829941260404, -12.343829941260404, -12.343829941260404, -12.343829941260404, -12.378979738060405, -12.378979738060405]
								}, {
									"case":	121,
									"scores":	[-9.3763526380604034, -7.1321913937604045, -9.0627067380604043, -9.0986533840604036, -9.0943965442604053, -9.5545107380604044, -9.5545107380604044, -9.3084718242604048, -9.3084718242604048, -9.5193609412604054, -9.5193609412604054, -9.5193609412604054, -9.5193609412604054, -9.5193609412604054, -9.5545107380604044, -9.5545107380604044]
								}, {
									"case":	122,
									"scores":	[-12.200821638060404, -9.956660393760405, -11.887175738060405, -11.923122384060404, -11.918865544260404, -12.378979738060405, -12.378979738060405, -12.132940824260405, -12.132940824260405, -12.343829941260404, -12.343829941260404, -12.343829941260404, -12.343829941260404, -12.343829941260404, -12.378979738060405, -12.378979738060405]
								}]
						}, {
							"switch":	16,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	130,
							"begin_column":	2,
							"end_line":	130,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L130\", 16, &(intern), sizeof (intern), &(p), sizeof (p), &(intern->pos), sizeof (intern->pos), &(ht), sizeof (ht), &(intern->pos_h), sizeof (intern->pos_h), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return -1;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.020408260760405, -7.5796720862604046, -8.5901413942604048, -8.6176277147604043, -7.8484461342604046, -8.9768972342604041, -8.9768972342604041, -8.2190091342604035, -8.2190091342604035, -8.6882691342604037, -8.6882691342604037, -8.6882691342604037, -8.6882691342604037, -8.6882691342604037, -8.9768972342604041, -8.9768972342604041]
								}]
						}]
				}, {
					"line":	135,
					"switches":	[]
				}, {
					"line":	136,
					"switches":	[{
							"switch":	17,
							"types":	[[], [], [], [], [71], [], [], [], [], [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], []],
							"begin_line":	137,
							"begin_column":	0,
							"end_line":	137,
							"end_column":	0,
							"patch_codes":	["(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L137\", 2, &(intern), sizeof (intern), &(ht), sizeof (ht)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-7.9911686645056763, -7.9339541845056765]
								}]
						}, {
							"switch":	18,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	137,
							"begin_column":	2,
							"end_line":	137,
							"end_column":	52,
							"patch_codes":	["if (!__is_neg(\"\", \"L137\", 2, &(intern), sizeof (intern), &(ht), sizeof (ht)))\n    return spl_hash_verify_pos_ex(intern, ht);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0559892687056767, -7.6726556227056761]
								}]
						}]
				}, {
					"line":	182,
					"switches":	[]
				}, {
					"line":	184,
					"switches":	[{
							"switch":	21,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321], [], [], [], [], [], []],
							"begin_line":	185,
							"begin_column":	1,
							"end_line":	185,
							"end_column":	1,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&other->ar_flags, 0, sizeof (*(&other->ar_flags)))", "memset(&other->array, 0, sizeof (*(&other->array)))", "memset(&other->ce_get_iterator, 0, sizeof (*(&other->ce_get_iterator)))", "memset(&other->debug_info, 0, sizeof (*(&other->debug_info)))", "memset(&other->fptr_count, 0, sizeof (*(&other->fptr_count)))", "memset(&other->fptr_offset_del, 0, sizeof (*(&other->fptr_offset_del)))", "memset(&other->fptr_offset_get, 0, sizeof (*(&other->fptr_offset_get)))", "memset(&other->fptr_offset_has, 0, sizeof (*(&other->fptr_offset_has)))", "memset(&other->fptr_offset_set, 0, sizeof (*(&other->fptr_offset_set)))", "memset(&other->is_self, 0, sizeof (*(&other->is_self)))", "memset(&other->pos, 0, sizeof (*(&other->pos)))", "memset(&other->pos_h, 0, sizeof (*(&other->pos_h)))", "memset(&other->retval, 0, sizeof (*(&other->retval)))", "memset(&other->std, 0, sizeof (*(&other->std)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(other->array, 0, sizeof (*(other->array)))", "memset(other->ce_get_iterator, 0, sizeof (*(other->ce_get_iterator)))", "memset(other->debug_info, 0, sizeof (*(other->debug_info)))", "memset(other->fptr_count, 0, sizeof (*(other->fptr_count)))", "memset(other->fptr_offset_del, 0, sizeof (*(other->fptr_offset_del)))", "memset(other->fptr_offset_get, 0, sizeof (*(other->fptr_offset_get)))", "memset(other->fptr_offset_has, 0, sizeof (*(other->fptr_offset_has)))", "memset(other->fptr_offset_set, 0, sizeof (*(other->fptr_offset_set)))", "memset(other->pos, 0, sizeof (*(other->pos)))", "memset(other->retval, 0, sizeof (*(other->retval)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern->array)->is_ref__gc = (-16777217)", "(intern->array)->is_ref__gc = (-50397184)", "(intern->array)->is_ref__gc = (0)", "(intern->array)->is_ref__gc = (1)", "(intern->array)->is_ref__gc = (1048576)", "(intern->array)->is_ref__gc = (131072)", "(intern->array)->is_ref__gc = (16777216)", "(intern->array)->is_ref__gc = (262144)", "(intern->array)->is_ref__gc = (4)", "(intern->array)->is_ref__gc = (5)", "(intern->array)->is_ref__gc = (50397183)", "(intern->array)->is_ref__gc = (524288)", "(intern->array)->is_ref__gc = (6)", "(intern->array)->is_ref__gc = (64)", "(intern->array)->is_ref__gc = (65536)", "(intern->array)->is_ref__gc = (67108864)", "(intern->array)->is_ref__gc = (83886080)", "(intern->array)->refcount__gc = (-16777217)", "(intern->array)->refcount__gc = (-50397184)", "(intern->array)->refcount__gc = (0)", "(intern->array)->refcount__gc = (1)", "(intern->array)->refcount__gc = (1048576)", "(intern->array)->refcount__gc = (131072)", "(intern->array)->refcount__gc = (16777216)", "(intern->array)->refcount__gc = (262144)", "(intern->array)->refcount__gc = (4)", "(intern->array)->refcount__gc = (5)", "(intern->array)->refcount__gc = (50397183)", "(intern->array)->refcount__gc = (524288)", "(intern->array)->refcount__gc = (6)", "(intern->array)->refcount__gc = (64)", "(intern->array)->refcount__gc = (65536)", "(intern->array)->refcount__gc = (67108864)", "(intern->array)->refcount__gc = (83886080)", "_array_init(((intern)->array), 0)", "_array_init(((orig)), 0)", "_array_init(((other)->array), 0)", "_array_init(((tmp)), 0)", "_efree(((intern)->debug_info))", "_efree(((orig)))", "_efree(((other)->debug_info))", "_efree(((tmp)))", "_zval_copy_ctor((&(*(orig))))", "_zval_copy_ctor((&(*(tmp))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((orig)))", "_zval_copy_ctor(((other)->retval))", "_zval_copy_ctor(((tmp)))", "_zval_copy_ctor_func((orig))", "_zval_copy_ctor_func((tmp))", "_zval_dtor(((orig)))", "_zval_dtor(((tmp)))", "_zval_dtor_func((orig))", "_zval_dtor_func((tmp))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(orig)))", "_zval_ptr_dtor((&(other)->array))", "_zval_ptr_dtor((&(other)->retval))", "_zval_ptr_dtor((&(tmp)))", "convert_to_boolean((orig))", "convert_to_boolean((tmp))", "convert_to_long((intern)->retval)", "convert_to_long((other)->retval)", "gc_remove_zval_from_buffer((orig))", "gc_remove_zval_from_buffer((tmp))", "gc_zval_check_possible_root(((orig)))", "gc_zval_check_possible_root(((tmp)))", "gc_zval_possible_root((orig))", "gc_zval_possible_root((tmp))", "i_zval_ptr_dtor((orig))", "i_zval_ptr_dtor((tmp))", "inherited = (-16777217)", "inherited = (-50397184)", "inherited = (0)", "inherited = (1)", "inherited = (1048576)", "inherited = (131072)", "inherited = (16777216)", "inherited = (262144)", "inherited = (4)", "inherited = (5)", "inherited = (50397183)", "inherited = (524288)", "inherited = (6)", "inherited = (64)", "inherited = (65536)", "inherited = (67108864)", "inherited = (83886080)", "inherited = (clone_orig)", "inherited = (inherited)", "intern = (intern)", "intern = (other)", "intern->ar_flags = (-16777217)", "intern->ar_flags = (-50397184)", "intern->ar_flags = (0)", "intern->ar_flags = (1)", "intern->ar_flags = (1048576)", "intern->ar_flags = (131072)", "intern->ar_flags = (16777216)", "intern->ar_flags = (262144)", "intern->ar_flags = (4)", "intern->ar_flags = (5)", "intern->ar_flags = (50397183)", "intern->ar_flags = (524288)", "intern->ar_flags = (6)", "intern->ar_flags = (64)", "intern->ar_flags = (65536)", "intern->ar_flags = (67108864)", "intern->ar_flags = (83886080)", "intern->ar_flags = (clone_orig)", "intern->ar_flags = (inherited)", "intern->array = (intern)->array", "intern->array = (orig)", "intern->array = (other)->array", "intern->array = (tmp)", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (other)->ce_get_iterator", "intern->ce_get_iterator = (parent)", "memset((intern), 0, sizeof(spl_array_object))", "memset((other), 0, sizeof(spl_array_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&(other)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "object_properties_init(&intern->std, (parent))", "parent = (class_type)->parent", "parent = (class_type)", "parent = (parent)->parent", "parent = (parent)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(orig)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(tmp)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(other)->std)", "retval.handle = (-16777217)", "retval.handle = (-50397184)", "retval.handle = (0)", "retval.handle = (1)", "retval.handle = (1048576)", "retval.handle = (131072)", "retval.handle = (16777216)", "retval.handle = (262144)", "retval.handle = (4)", "retval.handle = (5)", "retval.handle = (50397183)", "retval.handle = (524288)", "retval.handle = (6)", "retval.handle = (64)", "retval.handle = (65536)", "retval.handle = (67108864)", "retval.handle = (83886080)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((other), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "spl_array_rewind((intern))", "spl_array_rewind((other))", "spl_array_update_pos((intern))", "spl_array_update_pos((other))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((other))", "spl_register_std_class(&(class_type), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(class_type), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_std_class(&(parent), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(parent), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&(class_type), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&(parent), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (class_type), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (parent), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_aggregate)", "zend_class_implements((class_type), 1, zend_ce_arrayaccess)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements((class_type), 1, zend_ce_serializable)", "zend_class_implements((parent), 1, spl_ce_Countable)", "zend_class_implements((parent), 1, spl_ce_RecursiveIterator)", "zend_class_implements((parent), 1, spl_ce_SeekableIterator)", "zend_class_implements((parent), 1, zend_ce_aggregate)", "zend_class_implements((parent), 1, zend_ce_arrayaccess)", "zend_class_implements((parent), 1, zend_ce_iterator)", "zend_class_implements((parent), 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_ArrayIterator, 1, (parent))", "zend_class_implements(spl_ce_ArrayObject, 1, (class_type))", "zend_class_implements(spl_ce_ArrayObject, 1, (parent))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (parent))", "zend_declare_class_constant_long((class_type), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((class_type), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long((parent), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((parent), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((parent), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(orig)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(tmp)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(orig)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(tmp)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((other)->debug_info)", "zend_hash_copy(((*(intern)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*(other)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(intern)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(other)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(intern)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(other)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(intern)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(other)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(intern)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(other)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(intern)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(other)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(orig), sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(tmp), sizeof(zval *))", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((other)->debug_info)", "zend_hash_find(&(class_type)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(class_type)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(class_type)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(class_type)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(class_type)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(class_type)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(class_type)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(class_type)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(class_type)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(class_type)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_hash_find(&(parent)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(parent)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(parent)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(parent)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(parent)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(parent)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(parent)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(parent)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(parent)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(parent)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(other)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&(other)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_object_std_init(&intern->std, (parent))", "zend_throw_exception((class_type), \"Function expects exactly one argument\", 0)", "zend_throw_exception((class_type), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception((parent), \"Function expects exactly one argument\", 0)", "zend_throw_exception((parent), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex((class_type), 0, \"Empty serialized string cannot be empty\")", "zend_throw_exception_ex((parent), 0, \"Empty serialized string cannot be empty\")", "zval_add_ref(&(orig))", "zval_add_ref(&(tmp))", "zval_addref_p((intern)->array)", "zval_addref_p((orig))", "zval_addref_p((other)->array)", "zval_addref_p((tmp))", "zval_delref_p(((orig)))", "zval_delref_p(((tmp)))", "zval_set_isref_p((orig))", "zval_set_isref_p((tmp))", "zval_set_refcount_p((orig), 1)", "zval_set_refcount_p((tmp), 1)", "zval_unset_isref_p((orig))", "zval_unset_isref_p((tmp))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->array)->is_ref__gc = 0", "(intern->array)->refcount__gc = 1", "_array_init((intern->array), 0)", "class_type->get_iterator = spl_array_get_iterator", "exit(1)", "inherited = 1", "intern = _emalloc((sizeof(spl_array_object)))", "intern->ar_flags = 0", "intern->array = orig", "intern->array = other->array", "intern->ce_get_iterator = other->ce_get_iterator", "intern->ce_get_iterator = spl_ce_ArrayIterator", "intern->debug_info = ((void *)0)", "intern->fptr_count = ((void *)0)", "intern->fptr_offset_del = ((void *)0)", "intern->fptr_offset_get = ((void *)0)", "intern->fptr_offset_has = ((void *)0)", "intern->fptr_offset_set = ((void *)0)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_array_object))", "object_properties_init(&intern->std, class_type)", "parent = parent->parent", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handlers = &spl_handler_ArrayIterator", "retval.handlers = &spl_handler_ArrayObject", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_find(&class_type->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&class_type->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&class_type->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&class_type->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&class_type->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&class_type->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&class_type->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&class_type->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&class_type->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&class_type->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)", "zval_addref_p(other->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.78087546895034]
								}, {
									"case":	2,
									"scores":	[-8.78087546895034]
								}, {
									"case":	3,
									"scores":	[-8.78087546895034]
								}, {
									"case":	4,
									"scores":	[-8.78087546895034]
								}, {
									"case":	5,
									"scores":	[-8.78087546895034]
								}, {
									"case":	6,
									"scores":	[-8.78087546895034]
								}, {
									"case":	7,
									"scores":	[-8.78087546895034]
								}, {
									"case":	8,
									"scores":	[-8.78087546895034]
								}, {
									"case":	9,
									"scores":	[-8.78087546895034]
								}, {
									"case":	10,
									"scores":	[-8.78087546895034]
								}, {
									"case":	11,
									"scores":	[-8.78087546895034]
								}, {
									"case":	12,
									"scores":	[-8.78087546895034]
								}, {
									"case":	13,
									"scores":	[-8.78087546895034]
								}, {
									"case":	14,
									"scores":	[-8.78087546895034]
								}, {
									"case":	15,
									"scores":	[-8.78087546895034]
								}, {
									"case":	16,
									"scores":	[-8.78087546895034]
								}, {
									"case":	17,
									"scores":	[-8.78087546895034]
								}, {
									"case":	18,
									"scores":	[-8.78087546895034]
								}, {
									"case":	19,
									"scores":	[-8.78087546895034]
								}, {
									"case":	20,
									"scores":	[-8.78087546895034]
								}, {
									"case":	21,
									"scores":	[-8.78087546895034]
								}, {
									"case":	22,
									"scores":	[-8.78087546895034]
								}, {
									"case":	23,
									"scores":	[-8.78087546895034]
								}, {
									"case":	24,
									"scores":	[-8.78087546895034]
								}, {
									"case":	25,
									"scores":	[-8.78087546895034]
								}, {
									"case":	26,
									"scores":	[-8.78087546895034]
								}, {
									"case":	27,
									"scores":	[-8.78087546895034]
								}, {
									"case":	28,
									"scores":	[-8.78087546895034]
								}, {
									"case":	29,
									"scores":	[-8.78087546895034]
								}, {
									"case":	30,
									"scores":	[-8.78087546895034]
								}, {
									"case":	31,
									"scores":	[-8.78087546895034]
								}, {
									"case":	32,
									"scores":	[-8.78087546895034]
								}, {
									"case":	33,
									"scores":	[-8.78087546895034]
								}, {
									"case":	34,
									"scores":	[-8.78087546895034]
								}, {
									"case":	35,
									"scores":	[-8.78087546895034]
								}, {
									"case":	36,
									"scores":	[-8.78087546895034]
								}, {
									"case":	37,
									"scores":	[-8.78087546895034]
								}, {
									"case":	38,
									"scores":	[-8.78087546895034]
								}, {
									"case":	39,
									"scores":	[-8.78087546895034]
								}, {
									"case":	40,
									"scores":	[-8.78087546895034]
								}, {
									"case":	41,
									"scores":	[-8.78087546895034]
								}, {
									"case":	42,
									"scores":	[-8.78087546895034]
								}, {
									"case":	43,
									"scores":	[-8.78087546895034]
								}, {
									"case":	44,
									"scores":	[-8.78087546895034]
								}, {
									"case":	45,
									"scores":	[-8.78087546895034]
								}, {
									"case":	46,
									"scores":	[-8.78087546895034]
								}, {
									"case":	47,
									"scores":	[-8.78087546895034]
								}, {
									"case":	48,
									"scores":	[-8.78087546895034]
								}, {
									"case":	49,
									"scores":	[-8.78087546895034]
								}, {
									"case":	50,
									"scores":	[-8.78087546895034]
								}, {
									"case":	51,
									"scores":	[-8.78087546895034]
								}, {
									"case":	52,
									"scores":	[-8.78087546895034]
								}, {
									"case":	53,
									"scores":	[-8.78087546895034]
								}, {
									"case":	54,
									"scores":	[-8.78087546895034]
								}, {
									"case":	55,
									"scores":	[-8.78087546895034]
								}, {
									"case":	56,
									"scores":	[-8.78087546895034]
								}, {
									"case":	57,
									"scores":	[-8.78087546895034]
								}, {
									"case":	58,
									"scores":	[-8.78087546895034]
								}, {
									"case":	59,
									"scores":	[-8.78087546895034]
								}, {
									"case":	60,
									"scores":	[-8.78087546895034]
								}, {
									"case":	61,
									"scores":	[-8.78087546895034]
								}, {
									"case":	62,
									"scores":	[-8.78087546895034]
								}, {
									"case":	63,
									"scores":	[-8.78087546895034]
								}, {
									"case":	64,
									"scores":	[-8.78087546895034]
								}, {
									"case":	65,
									"scores":	[-8.78087546895034]
								}, {
									"case":	66,
									"scores":	[-8.78087546895034]
								}, {
									"case":	67,
									"scores":	[-8.78087546895034]
								}, {
									"case":	68,
									"scores":	[-8.78087546895034]
								}, {
									"case":	69,
									"scores":	[-8.78087546895034]
								}, {
									"case":	70,
									"scores":	[-8.78087546895034]
								}, {
									"case":	71,
									"scores":	[-8.78087546895034]
								}, {
									"case":	72,
									"scores":	[-8.78087546895034]
								}, {
									"case":	73,
									"scores":	[-8.78087546895034]
								}, {
									"case":	74,
									"scores":	[-8.78087546895034]
								}, {
									"case":	75,
									"scores":	[-8.78087546895034]
								}, {
									"case":	76,
									"scores":	[-8.78087546895034]
								}, {
									"case":	77,
									"scores":	[-8.78087546895034]
								}, {
									"case":	78,
									"scores":	[-8.78087546895034]
								}, {
									"case":	79,
									"scores":	[-8.78087546895034]
								}, {
									"case":	80,
									"scores":	[-8.78087546895034]
								}, {
									"case":	81,
									"scores":	[-8.78087546895034]
								}, {
									"case":	82,
									"scores":	[-8.78087546895034]
								}, {
									"case":	83,
									"scores":	[-8.78087546895034]
								}, {
									"case":	84,
									"scores":	[-8.78087546895034]
								}, {
									"case":	85,
									"scores":	[-8.78087546895034]
								}, {
									"case":	86,
									"scores":	[-8.78087546895034]
								}, {
									"case":	87,
									"scores":	[-8.78087546895034]
								}, {
									"case":	88,
									"scores":	[-8.78087546895034]
								}, {
									"case":	89,
									"scores":	[-8.78087546895034]
								}, {
									"case":	90,
									"scores":	[-8.78087546895034]
								}, {
									"case":	91,
									"scores":	[-8.78087546895034]
								}, {
									"case":	92,
									"scores":	[-8.78087546895034]
								}, {
									"case":	93,
									"scores":	[-8.78087546895034]
								}, {
									"case":	94,
									"scores":	[-8.78087546895034]
								}, {
									"case":	95,
									"scores":	[-8.78087546895034]
								}, {
									"case":	96,
									"scores":	[-8.78087546895034]
								}, {
									"case":	97,
									"scores":	[-8.78087546895034]
								}, {
									"case":	98,
									"scores":	[-8.78087546895034]
								}, {
									"case":	99,
									"scores":	[-8.78087546895034]
								}, {
									"case":	100,
									"scores":	[-8.78087546895034]
								}, {
									"case":	101,
									"scores":	[-8.78087546895034]
								}, {
									"case":	102,
									"scores":	[-8.78087546895034]
								}, {
									"case":	103,
									"scores":	[-8.78087546895034]
								}, {
									"case":	104,
									"scores":	[-8.78087546895034]
								}, {
									"case":	105,
									"scores":	[-8.78087546895034]
								}, {
									"case":	106,
									"scores":	[-8.78087546895034]
								}, {
									"case":	107,
									"scores":	[-8.78087546895034]
								}, {
									"case":	108,
									"scores":	[-8.78087546895034]
								}, {
									"case":	109,
									"scores":	[-8.78087546895034]
								}, {
									"case":	110,
									"scores":	[-8.78087546895034]
								}, {
									"case":	111,
									"scores":	[-8.78087546895034]
								}, {
									"case":	112,
									"scores":	[-8.78087546895034]
								}, {
									"case":	113,
									"scores":	[-8.78087546895034]
								}, {
									"case":	114,
									"scores":	[-8.78087546895034]
								}, {
									"case":	115,
									"scores":	[-8.78087546895034]
								}, {
									"case":	116,
									"scores":	[-8.78087546895034]
								}, {
									"case":	117,
									"scores":	[-8.78087546895034]
								}, {
									"case":	118,
									"scores":	[-8.78087546895034]
								}, {
									"case":	119,
									"scores":	[-8.78087546895034]
								}, {
									"case":	120,
									"scores":	[-8.78087546895034]
								}, {
									"case":	121,
									"scores":	[-8.78087546895034]
								}, {
									"case":	122,
									"scores":	[-8.78087546895034]
								}, {
									"case":	123,
									"scores":	[-8.78087546895034]
								}, {
									"case":	124,
									"scores":	[-8.78087546895034]
								}, {
									"case":	125,
									"scores":	[-8.78087546895034]
								}, {
									"case":	126,
									"scores":	[-8.78087546895034]
								}, {
									"case":	127,
									"scores":	[-8.78087546895034]
								}, {
									"case":	128,
									"scores":	[-8.78087546895034]
								}, {
									"case":	129,
									"scores":	[-8.78087546895034]
								}, {
									"case":	130,
									"scores":	[-8.78087546895034]
								}, {
									"case":	131,
									"scores":	[-8.78087546895034]
								}, {
									"case":	132,
									"scores":	[-8.78087546895034]
								}, {
									"case":	133,
									"scores":	[-8.78087546895034]
								}, {
									"case":	134,
									"scores":	[-8.78087546895034]
								}, {
									"case":	135,
									"scores":	[-8.78087546895034]
								}, {
									"case":	136,
									"scores":	[-8.78087546895034]
								}, {
									"case":	137,
									"scores":	[-8.78087546895034]
								}, {
									"case":	138,
									"scores":	[-8.78087546895034]
								}, {
									"case":	139,
									"scores":	[-8.78087546895034]
								}, {
									"case":	140,
									"scores":	[-8.78087546895034]
								}, {
									"case":	141,
									"scores":	[-8.78087546895034]
								}, {
									"case":	142,
									"scores":	[-8.78087546895034]
								}, {
									"case":	143,
									"scores":	[-8.78087546895034]
								}, {
									"case":	144,
									"scores":	[-8.78087546895034]
								}, {
									"case":	145,
									"scores":	[-8.78087546895034]
								}, {
									"case":	146,
									"scores":	[-8.78087546895034]
								}, {
									"case":	147,
									"scores":	[-8.78087546895034]
								}, {
									"case":	148,
									"scores":	[-8.78087546895034]
								}, {
									"case":	149,
									"scores":	[-8.78087546895034]
								}, {
									"case":	150,
									"scores":	[-8.78087546895034]
								}, {
									"case":	151,
									"scores":	[-8.78087546895034]
								}, {
									"case":	152,
									"scores":	[-8.78087546895034]
								}, {
									"case":	153,
									"scores":	[-8.78087546895034]
								}, {
									"case":	154,
									"scores":	[-8.78087546895034]
								}, {
									"case":	155,
									"scores":	[-8.78087546895034]
								}, {
									"case":	156,
									"scores":	[-8.78087546895034]
								}, {
									"case":	157,
									"scores":	[-8.78087546895034]
								}, {
									"case":	158,
									"scores":	[-8.78087546895034]
								}, {
									"case":	159,
									"scores":	[-8.78087546895034]
								}, {
									"case":	160,
									"scores":	[-8.78087546895034]
								}, {
									"case":	161,
									"scores":	[-8.78087546895034]
								}, {
									"case":	162,
									"scores":	[-8.78087546895034]
								}, {
									"case":	163,
									"scores":	[-8.78087546895034]
								}, {
									"case":	164,
									"scores":	[-8.78087546895034]
								}, {
									"case":	165,
									"scores":	[-8.78087546895034]
								}, {
									"case":	166,
									"scores":	[-8.78087546895034]
								}, {
									"case":	167,
									"scores":	[-8.78087546895034]
								}, {
									"case":	168,
									"scores":	[-8.78087546895034]
								}, {
									"case":	169,
									"scores":	[-8.78087546895034]
								}, {
									"case":	170,
									"scores":	[-8.78087546895034]
								}, {
									"case":	171,
									"scores":	[-8.78087546895034]
								}, {
									"case":	172,
									"scores":	[-8.78087546895034]
								}, {
									"case":	173,
									"scores":	[-8.78087546895034]
								}, {
									"case":	174,
									"scores":	[-8.78087546895034]
								}, {
									"case":	175,
									"scores":	[-8.78087546895034]
								}, {
									"case":	176,
									"scores":	[-8.78087546895034]
								}, {
									"case":	177,
									"scores":	[-8.78087546895034]
								}, {
									"case":	178,
									"scores":	[-8.78087546895034]
								}, {
									"case":	179,
									"scores":	[-8.78087546895034]
								}, {
									"case":	180,
									"scores":	[-8.78087546895034]
								}, {
									"case":	181,
									"scores":	[-8.78087546895034]
								}, {
									"case":	182,
									"scores":	[-8.78087546895034]
								}, {
									"case":	183,
									"scores":	[-8.78087546895034]
								}, {
									"case":	184,
									"scores":	[-8.78087546895034]
								}, {
									"case":	185,
									"scores":	[-8.78087546895034]
								}, {
									"case":	186,
									"scores":	[-8.78087546895034]
								}, {
									"case":	187,
									"scores":	[-8.78087546895034]
								}, {
									"case":	188,
									"scores":	[-8.78087546895034]
								}, {
									"case":	189,
									"scores":	[-8.78087546895034]
								}, {
									"case":	190,
									"scores":	[-8.78087546895034]
								}, {
									"case":	191,
									"scores":	[-8.78087546895034]
								}, {
									"case":	192,
									"scores":	[-8.78087546895034]
								}, {
									"case":	193,
									"scores":	[-8.78087546895034]
								}, {
									"case":	194,
									"scores":	[-8.78087546895034]
								}, {
									"case":	195,
									"scores":	[-8.78087546895034]
								}, {
									"case":	196,
									"scores":	[-8.78087546895034]
								}, {
									"case":	197,
									"scores":	[-8.78087546895034]
								}, {
									"case":	198,
									"scores":	[-8.78087546895034]
								}, {
									"case":	199,
									"scores":	[-8.78087546895034]
								}, {
									"case":	200,
									"scores":	[-8.78087546895034]
								}, {
									"case":	201,
									"scores":	[-8.78087546895034]
								}, {
									"case":	202,
									"scores":	[-8.78087546895034]
								}, {
									"case":	203,
									"scores":	[-8.78087546895034]
								}, {
									"case":	204,
									"scores":	[-8.78087546895034]
								}, {
									"case":	205,
									"scores":	[-8.78087546895034]
								}, {
									"case":	206,
									"scores":	[-8.78087546895034]
								}, {
									"case":	207,
									"scores":	[-8.78087546895034]
								}, {
									"case":	208,
									"scores":	[-8.78087546895034]
								}, {
									"case":	209,
									"scores":	[-8.78087546895034]
								}, {
									"case":	210,
									"scores":	[-8.78087546895034]
								}, {
									"case":	211,
									"scores":	[-8.78087546895034]
								}, {
									"case":	212,
									"scores":	[-8.78087546895034]
								}, {
									"case":	213,
									"scores":	[-8.78087546895034]
								}, {
									"case":	214,
									"scores":	[-8.78087546895034]
								}, {
									"case":	215,
									"scores":	[-8.78087546895034]
								}, {
									"case":	216,
									"scores":	[-8.78087546895034]
								}, {
									"case":	217,
									"scores":	[-8.78087546895034]
								}, {
									"case":	218,
									"scores":	[-8.78087546895034]
								}, {
									"case":	219,
									"scores":	[-8.78087546895034]
								}, {
									"case":	220,
									"scores":	[-8.78087546895034]
								}, {
									"case":	221,
									"scores":	[-8.78087546895034]
								}, {
									"case":	222,
									"scores":	[-8.78087546895034]
								}, {
									"case":	223,
									"scores":	[-8.78087546895034]
								}, {
									"case":	224,
									"scores":	[-8.78087546895034]
								}, {
									"case":	225,
									"scores":	[-8.78087546895034]
								}, {
									"case":	226,
									"scores":	[-8.78087546895034]
								}, {
									"case":	227,
									"scores":	[-8.78087546895034]
								}, {
									"case":	228,
									"scores":	[-8.78087546895034]
								}, {
									"case":	229,
									"scores":	[-8.78087546895034]
								}, {
									"case":	230,
									"scores":	[-8.78087546895034]
								}, {
									"case":	231,
									"scores":	[-8.78087546895034]
								}, {
									"case":	232,
									"scores":	[-8.78087546895034]
								}, {
									"case":	233,
									"scores":	[-8.78087546895034]
								}, {
									"case":	234,
									"scores":	[-8.78087546895034]
								}, {
									"case":	235,
									"scores":	[-8.78087546895034]
								}, {
									"case":	236,
									"scores":	[-8.78087546895034]
								}, {
									"case":	237,
									"scores":	[-8.78087546895034]
								}, {
									"case":	238,
									"scores":	[-8.78087546895034]
								}, {
									"case":	239,
									"scores":	[-8.78087546895034]
								}, {
									"case":	240,
									"scores":	[-8.78087546895034]
								}, {
									"case":	241,
									"scores":	[-8.78087546895034]
								}, {
									"case":	242,
									"scores":	[-8.78087546895034]
								}, {
									"case":	243,
									"scores":	[-8.78087546895034]
								}, {
									"case":	244,
									"scores":	[-8.78087546895034]
								}, {
									"case":	245,
									"scores":	[-8.78087546895034]
								}, {
									"case":	246,
									"scores":	[-8.78087546895034]
								}, {
									"case":	247,
									"scores":	[-8.78087546895034]
								}, {
									"case":	248,
									"scores":	[-8.78087546895034]
								}, {
									"case":	249,
									"scores":	[-8.78087546895034]
								}, {
									"case":	250,
									"scores":	[-8.78087546895034]
								}, {
									"case":	251,
									"scores":	[-8.78087546895034]
								}, {
									"case":	252,
									"scores":	[-8.78087546895034]
								}, {
									"case":	253,
									"scores":	[-8.78087546895034]
								}, {
									"case":	254,
									"scores":	[-8.78087546895034]
								}, {
									"case":	255,
									"scores":	[-8.78087546895034]
								}, {
									"case":	256,
									"scores":	[-8.78087546895034]
								}, {
									"case":	257,
									"scores":	[-8.78087546895034]
								}, {
									"case":	258,
									"scores":	[-8.78087546895034]
								}, {
									"case":	259,
									"scores":	[-8.78087546895034]
								}, {
									"case":	260,
									"scores":	[-8.78087546895034]
								}, {
									"case":	261,
									"scores":	[-8.78087546895034]
								}, {
									"case":	262,
									"scores":	[-8.78087546895034]
								}, {
									"case":	263,
									"scores":	[-8.78087546895034]
								}, {
									"case":	264,
									"scores":	[-8.78087546895034]
								}, {
									"case":	265,
									"scores":	[-8.78087546895034]
								}, {
									"case":	266,
									"scores":	[-8.78087546895034]
								}, {
									"case":	267,
									"scores":	[-8.78087546895034]
								}, {
									"case":	268,
									"scores":	[-8.78087546895034]
								}, {
									"case":	269,
									"scores":	[-8.78087546895034]
								}, {
									"case":	270,
									"scores":	[-8.78087546895034]
								}, {
									"case":	271,
									"scores":	[-8.78087546895034]
								}, {
									"case":	272,
									"scores":	[-8.78087546895034]
								}, {
									"case":	273,
									"scores":	[-8.78087546895034]
								}, {
									"case":	274,
									"scores":	[-8.78087546895034]
								}, {
									"case":	275,
									"scores":	[-8.78087546895034]
								}, {
									"case":	276,
									"scores":	[-8.78087546895034]
								}, {
									"case":	277,
									"scores":	[-8.78087546895034]
								}, {
									"case":	278,
									"scores":	[-8.78087546895034]
								}, {
									"case":	279,
									"scores":	[-8.78087546895034]
								}, {
									"case":	280,
									"scores":	[-8.78087546895034]
								}, {
									"case":	281,
									"scores":	[-8.78087546895034]
								}, {
									"case":	282,
									"scores":	[-8.78087546895034]
								}, {
									"case":	283,
									"scores":	[-8.78087546895034]
								}, {
									"case":	284,
									"scores":	[-8.78087546895034]
								}, {
									"case":	285,
									"scores":	[-8.78087546895034]
								}, {
									"case":	286,
									"scores":	[-8.78087546895034]
								}, {
									"case":	287,
									"scores":	[-8.78087546895034]
								}, {
									"case":	288,
									"scores":	[-8.78087546895034]
								}, {
									"case":	289,
									"scores":	[-8.78087546895034]
								}, {
									"case":	290,
									"scores":	[-8.78087546895034]
								}, {
									"case":	291,
									"scores":	[-8.78087546895034]
								}, {
									"case":	292,
									"scores":	[-8.78087546895034]
								}, {
									"case":	293,
									"scores":	[-8.78087546895034]
								}, {
									"case":	294,
									"scores":	[-8.78087546895034]
								}, {
									"case":	295,
									"scores":	[-8.78087546895034]
								}, {
									"case":	296,
									"scores":	[-8.78087546895034]
								}, {
									"case":	297,
									"scores":	[-8.78087546895034]
								}, {
									"case":	298,
									"scores":	[-8.78087546895034]
								}, {
									"case":	299,
									"scores":	[-8.78087546895034]
								}, {
									"case":	300,
									"scores":	[-8.78087546895034]
								}, {
									"case":	301,
									"scores":	[-8.78087546895034]
								}, {
									"case":	302,
									"scores":	[-8.78087546895034]
								}, {
									"case":	303,
									"scores":	[-8.78087546895034]
								}, {
									"case":	304,
									"scores":	[-8.78087546895034]
								}, {
									"case":	305,
									"scores":	[-8.78087546895034]
								}, {
									"case":	306,
									"scores":	[-8.78087546895034]
								}, {
									"case":	307,
									"scores":	[-8.78087546895034]
								}, {
									"case":	308,
									"scores":	[-8.78087546895034]
								}, {
									"case":	309,
									"scores":	[-8.78087546895034]
								}, {
									"case":	310,
									"scores":	[-8.78087546895034]
								}, {
									"case":	311,
									"scores":	[-8.78087546895034]
								}, {
									"case":	312,
									"scores":	[-8.78087546895034]
								}, {
									"case":	313,
									"scores":	[-8.78087546895034]
								}, {
									"case":	314,
									"scores":	[-8.78087546895034]
								}, {
									"case":	315,
									"scores":	[-8.78087546895034]
								}, {
									"case":	316,
									"scores":	[-8.78087546895034]
								}, {
									"case":	317,
									"scores":	[-8.78087546895034]
								}, {
									"case":	318,
									"scores":	[-8.78087546895034]
								}, {
									"case":	319,
									"scores":	[-8.78087546895034]
								}, {
									"case":	320,
									"scores":	[-8.78087546895034]
								}, {
									"case":	321,
									"scores":	[-8.78087546895034]
								}, {
									"case":	322,
									"scores":	[-8.78087546895034]
								}, {
									"case":	323,
									"scores":	[-8.78087546895034]
								}, {
									"case":	324,
									"scores":	[-8.78087546895034]
								}, {
									"case":	325,
									"scores":	[-8.78087546895034]
								}, {
									"case":	326,
									"scores":	[-8.78087546895034]
								}, {
									"case":	327,
									"scores":	[-8.78087546895034]
								}, {
									"case":	328,
									"scores":	[-8.78087546895034]
								}, {
									"case":	329,
									"scores":	[-8.78087546895034]
								}, {
									"case":	330,
									"scores":	[-8.78087546895034]
								}, {
									"case":	331,
									"scores":	[-8.78087546895034]
								}, {
									"case":	332,
									"scores":	[-8.78087546895034]
								}, {
									"case":	333,
									"scores":	[-8.78087546895034]
								}, {
									"case":	334,
									"scores":	[-8.78087546895034]
								}, {
									"case":	335,
									"scores":	[-8.78087546895034]
								}, {
									"case":	336,
									"scores":	[-8.78087546895034]
								}, {
									"case":	337,
									"scores":	[-8.78087546895034]
								}, {
									"case":	338,
									"scores":	[-8.78087546895034]
								}, {
									"case":	339,
									"scores":	[-8.78087546895034]
								}, {
									"case":	340,
									"scores":	[-8.78087546895034]
								}, {
									"case":	341,
									"scores":	[-8.78087546895034]
								}, {
									"case":	342,
									"scores":	[-8.78087546895034]
								}, {
									"case":	343,
									"scores":	[-8.78087546895034]
								}, {
									"case":	344,
									"scores":	[-8.78087546895034]
								}, {
									"case":	345,
									"scores":	[-8.78087546895034]
								}, {
									"case":	346,
									"scores":	[-8.78087546895034]
								}, {
									"case":	347,
									"scores":	[-8.78087546895034]
								}, {
									"case":	348,
									"scores":	[-8.78087546895034]
								}, {
									"case":	349,
									"scores":	[-8.78087546895034]
								}, {
									"case":	350,
									"scores":	[-8.78087546895034]
								}, {
									"case":	351,
									"scores":	[-8.78087546895034]
								}, {
									"case":	352,
									"scores":	[-8.78087546895034]
								}, {
									"case":	353,
									"scores":	[-8.78087546895034]
								}, {
									"case":	354,
									"scores":	[-8.78087546895034]
								}, {
									"case":	355,
									"scores":	[-8.78087546895034]
								}, {
									"case":	356,
									"scores":	[-8.78087546895034]
								}, {
									"case":	357,
									"scores":	[-8.78087546895034]
								}, {
									"case":	358,
									"scores":	[-8.78087546895034]
								}, {
									"case":	359,
									"scores":	[-8.78087546895034]
								}, {
									"case":	360,
									"scores":	[-8.78087546895034]
								}, {
									"case":	361,
									"scores":	[-8.78087546895034]
								}, {
									"case":	362,
									"scores":	[-8.78087546895034]
								}, {
									"case":	363,
									"scores":	[-8.78087546895034]
								}, {
									"case":	364,
									"scores":	[-8.78087546895034]
								}, {
									"case":	365,
									"scores":	[-8.78087546895034]
								}, {
									"case":	366,
									"scores":	[-8.78087546895034]
								}, {
									"case":	367,
									"scores":	[-8.78087546895034]
								}, {
									"case":	368,
									"scores":	[-8.78087546895034]
								}, {
									"case":	369,
									"scores":	[-8.78087546895034]
								}, {
									"case":	370,
									"scores":	[-8.78087546895034]
								}, {
									"case":	371,
									"scores":	[-8.78087546895034]
								}, {
									"case":	372,
									"scores":	[-8.78087546895034]
								}, {
									"case":	373,
									"scores":	[-8.78087546895034]
								}, {
									"case":	374,
									"scores":	[-8.78087546895034]
								}, {
									"case":	375,
									"scores":	[-8.78087546895034]
								}, {
									"case":	376,
									"scores":	[-8.78087546895034]
								}, {
									"case":	377,
									"scores":	[-8.78087546895034]
								}, {
									"case":	378,
									"scores":	[-8.78087546895034]
								}, {
									"case":	379,
									"scores":	[-8.78087546895034]
								}, {
									"case":	380,
									"scores":	[-8.78087546895034]
								}, {
									"case":	381,
									"scores":	[-8.78087546895034]
								}, {
									"case":	382,
									"scores":	[-8.78087546895034]
								}, {
									"case":	383,
									"scores":	[-8.78087546895034]
								}, {
									"case":	384,
									"scores":	[-8.78087546895034]
								}, {
									"case":	385,
									"scores":	[-8.78087546895034]
								}, {
									"case":	386,
									"scores":	[-8.78087546895034]
								}, {
									"case":	387,
									"scores":	[-8.78087546895034]
								}, {
									"case":	388,
									"scores":	[-8.78087546895034]
								}, {
									"case":	389,
									"scores":	[-8.78087546895034]
								}, {
									"case":	390,
									"scores":	[-8.78087546895034]
								}, {
									"case":	391,
									"scores":	[-8.78087546895034]
								}, {
									"case":	392,
									"scores":	[-8.78087546895034]
								}, {
									"case":	393,
									"scores":	[-8.78087546895034]
								}, {
									"case":	394,
									"scores":	[-8.78087546895034]
								}, {
									"case":	395,
									"scores":	[-8.78087546895034]
								}, {
									"case":	396,
									"scores":	[-8.78087546895034]
								}, {
									"case":	397,
									"scores":	[-8.78087546895034]
								}, {
									"case":	398,
									"scores":	[-8.78087546895034]
								}, {
									"case":	399,
									"scores":	[-8.78087546895034]
								}, {
									"case":	400,
									"scores":	[-8.78087546895034]
								}, {
									"case":	401,
									"scores":	[-8.78087546895034]
								}, {
									"case":	402,
									"scores":	[-8.78087546895034]
								}, {
									"case":	403,
									"scores":	[-8.78087546895034]
								}, {
									"case":	404,
									"scores":	[-8.78087546895034]
								}, {
									"case":	405,
									"scores":	[-8.78087546895034]
								}, {
									"case":	406,
									"scores":	[-8.78087546895034]
								}, {
									"case":	407,
									"scores":	[-8.78087546895034]
								}, {
									"case":	408,
									"scores":	[-8.78087546895034]
								}, {
									"case":	409,
									"scores":	[-8.78087546895034]
								}, {
									"case":	410,
									"scores":	[-8.78087546895034]
								}, {
									"case":	411,
									"scores":	[-8.78087546895034]
								}, {
									"case":	412,
									"scores":	[-8.78087546895034]
								}]
						}, {
							"switch":	22,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	185,
							"begin_column":	3,
							"end_line":	185,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L185\", 41, &(intern), sizeof (intern), &(intern->ar_flags), sizeof (intern->ar_flags), &(other), sizeof (other), &(other->ar_flags), sizeof (other->ar_flags), &(orig), sizeof (orig), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(other->ce_get_iterator), sizeof (other->ce_get_iterator), &(clone_orig), sizeof (clone_orig), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->array), sizeof (intern->array), &(other->array), sizeof (other->array), &(intern->debug_info), sizeof (intern->debug_info), &(class_type), sizeof (class_type), &(tmp), sizeof (tmp), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(other->retval), sizeof (other->retval), &(other->pos), sizeof (other->pos), &(other->pos_h), sizeof (other->pos_h), &(other->is_self), sizeof (other->is_self), &(other->fptr_offset_get), sizeof (other->fptr_offset_get), &(other->fptr_offset_set), sizeof (other->fptr_offset_set), &(other->fptr_offset_has), sizeof (other->fptr_offset_has), &(other->fptr_offset_del), sizeof (other->fptr_offset_del), &(other->fptr_count), sizeof (other->fptr_count), &(other->debug_info), sizeof (other->debug_info)))\n    intern->ar_flags &= ~50397183;\n", "{\n}\n", "(&class_type)->ar_flags &= ~50397183", "(&clone_orig)->ar_flags &= ~50397183", "(&inherited)->ar_flags &= ~50397183", "(&intern)->ar_flags &= ~50397183", "(&obj)->ar_flags &= ~50397183", "(&orig)->ar_flags &= ~50397183", "(&other)->ar_flags &= ~50397183", "(&parent)->ar_flags &= ~50397183", "(&retval)->ar_flags &= ~50397183", "(&tmp)->ar_flags &= ~50397183", "(intern)->ar_flags &= ~50397183", "(other)->ar_flags &= ~50397183", "intern->ar_flags &= ~(0 * clone_orig)", "intern->ar_flags &= ~(0 * inherited)", "intern->ar_flags &= ~(0)", "intern->ar_flags &= ~(class_type != 0)", "intern->ar_flags &= ~(class_type != parent)", "intern->ar_flags &= ~(class_type == 0)", "intern->ar_flags &= ~(class_type == parent)", "intern->ar_flags &= ~(clone_orig != 0)", "intern->ar_flags &= ~(clone_orig != inherited)", "intern->ar_flags &= ~(clone_orig * inherited)", "intern->ar_flags &= ~(clone_orig + 0)", "intern->ar_flags &= ~(clone_orig + inherited)", "intern->ar_flags &= ~(clone_orig - 0)", "intern->ar_flags &= ~(clone_orig - inherited)", "intern->ar_flags &= ~(clone_orig == 0)", "intern->ar_flags &= ~(clone_orig == inherited)", "intern->ar_flags &= ~(inherited != 0)", "intern->ar_flags &= ~(inherited * clone_orig)", "intern->ar_flags &= ~(inherited + 0)", "intern->ar_flags &= ~(inherited - 0)", "intern->ar_flags &= ~(inherited == 0)", "intern->ar_flags &= ~(intern != 0)", "intern->ar_flags &= ~(intern != other)", "intern->ar_flags &= ~(intern == 0)", "intern->ar_flags &= ~(intern == other)", "intern->ar_flags &= ~(obj != 0)", "intern->ar_flags &= ~(obj == 0)", "intern->ar_flags &= ~(orig != 0)", "intern->ar_flags &= ~(orig != tmp)", "intern->ar_flags &= ~(orig == 0)", "intern->ar_flags &= ~(orig == tmp)", "intern->ar_flags &= ~(other != 0)", "intern->ar_flags &= ~(other == 0)", "intern->ar_flags &= ~(parent != 0)", "intern->ar_flags &= ~(parent == 0)", "intern->ar_flags &= ~(retval != 0)", "intern->ar_flags &= ~(retval == 0)", "intern->ar_flags &= ~(tmp != 0)", "intern->ar_flags &= ~(tmp == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-11.031978926850339, -9.62597812995034, -11.031978926850339, -9.79499733895034, -10.977762624950337, -10.419778858950338, -10.434110988950339, -9.56450332895034, -10.345095768950337, -10.345095768950337, -10.989776105850337, -11.152449297950337, -10.552885438950337, -10.322391428950338, -10.506879038950338, -10.552885438950337, -10.033763328950338, -10.028040628950338, -10.345095768950337, -10.345095768950337, -10.345095768950337, -10.345095768950337, -9.2701525289503373, -10.264257338950339, -10.264257338950339, -10.264257338950339, -10.264257338950339, -10.264257338950339, -10.552885438950337, -9.79499733895034, -9.79499733895034, -10.552885438950337, -10.552885438950337, -9.79499733895034, -9.79499733895034, -10.264257338950339, -10.264257338950339, -10.264257338950339, -10.264257338950339, -10.264257338950339, -10.552885438950337]
								}, {
									"case":	2,
									"scores":	[-8.78087546895034]
								}, {
									"case":	3,
									"scores":	[-8.78087546895034]
								}, {
									"case":	4,
									"scores":	[-8.78087546895034]
								}, {
									"case":	5,
									"scores":	[-8.78087546895034]
								}, {
									"case":	6,
									"scores":	[-8.78087546895034]
								}, {
									"case":	7,
									"scores":	[-8.78087546895034]
								}, {
									"case":	8,
									"scores":	[-8.78087546895034]
								}, {
									"case":	9,
									"scores":	[-8.78087546895034]
								}, {
									"case":	10,
									"scores":	[-8.78087546895034]
								}, {
									"case":	11,
									"scores":	[-8.78087546895034]
								}, {
									"case":	12,
									"scores":	[-8.78087546895034]
								}, {
									"case":	13,
									"scores":	[-8.78087546895034]
								}, {
									"case":	14,
									"scores":	[-8.78087546895034]
								}, {
									"case":	15,
									"scores":	[-8.78087546895034]
								}, {
									"case":	16,
									"scores":	[-8.78087546895034]
								}, {
									"case":	17,
									"scores":	[-8.78087546895034]
								}, {
									"case":	18,
									"scores":	[-8.78087546895034]
								}, {
									"case":	19,
									"scores":	[-8.78087546895034]
								}, {
									"case":	20,
									"scores":	[-8.78087546895034]
								}, {
									"case":	21,
									"scores":	[-8.78087546895034]
								}, {
									"case":	22,
									"scores":	[-8.78087546895034]
								}, {
									"case":	23,
									"scores":	[-8.78087546895034]
								}, {
									"case":	24,
									"scores":	[-8.78087546895034]
								}, {
									"case":	25,
									"scores":	[-8.78087546895034]
								}, {
									"case":	26,
									"scores":	[-8.78087546895034]
								}, {
									"case":	27,
									"scores":	[-8.78087546895034]
								}, {
									"case":	28,
									"scores":	[-8.78087546895034]
								}, {
									"case":	29,
									"scores":	[-8.78087546895034]
								}, {
									"case":	30,
									"scores":	[-8.78087546895034]
								}, {
									"case":	31,
									"scores":	[-8.78087546895034]
								}, {
									"case":	32,
									"scores":	[-8.78087546895034]
								}, {
									"case":	33,
									"scores":	[-8.78087546895034]
								}, {
									"case":	34,
									"scores":	[-8.78087546895034]
								}, {
									"case":	35,
									"scores":	[-8.78087546895034]
								}, {
									"case":	36,
									"scores":	[-8.78087546895034]
								}, {
									"case":	37,
									"scores":	[-8.78087546895034]
								}, {
									"case":	38,
									"scores":	[-8.78087546895034]
								}, {
									"case":	39,
									"scores":	[-8.78087546895034]
								}, {
									"case":	40,
									"scores":	[-8.78087546895034]
								}, {
									"case":	41,
									"scores":	[-8.78087546895034]
								}, {
									"case":	42,
									"scores":	[-8.78087546895034]
								}, {
									"case":	43,
									"scores":	[-8.78087546895034]
								}, {
									"case":	44,
									"scores":	[-8.78087546895034]
								}, {
									"case":	45,
									"scores":	[-8.78087546895034]
								}, {
									"case":	46,
									"scores":	[-8.78087546895034]
								}, {
									"case":	47,
									"scores":	[-8.78087546895034]
								}, {
									"case":	48,
									"scores":	[-8.78087546895034]
								}, {
									"case":	49,
									"scores":	[-8.78087546895034]
								}, {
									"case":	50,
									"scores":	[-8.78087546895034]
								}, {
									"case":	51,
									"scores":	[-8.78087546895034]
								}, {
									"case":	52,
									"scores":	[-8.78087546895034]
								}, {
									"case":	53,
									"scores":	[-8.78087546895034]
								}]
						}]
				}, {
					"line":	185,
					"switches":	[{
							"switch":	23,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [], [], [], [323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [], []],
							"begin_line":	186,
							"begin_column":	1,
							"end_line":	186,
							"end_column":	1,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&other->ar_flags, 0, sizeof (*(&other->ar_flags)))", "memset(&other->array, 0, sizeof (*(&other->array)))", "memset(&other->ce_get_iterator, 0, sizeof (*(&other->ce_get_iterator)))", "memset(&other->debug_info, 0, sizeof (*(&other->debug_info)))", "memset(&other->fptr_count, 0, sizeof (*(&other->fptr_count)))", "memset(&other->fptr_offset_del, 0, sizeof (*(&other->fptr_offset_del)))", "memset(&other->fptr_offset_get, 0, sizeof (*(&other->fptr_offset_get)))", "memset(&other->fptr_offset_has, 0, sizeof (*(&other->fptr_offset_has)))", "memset(&other->fptr_offset_set, 0, sizeof (*(&other->fptr_offset_set)))", "memset(&other->is_self, 0, sizeof (*(&other->is_self)))", "memset(&other->pos, 0, sizeof (*(&other->pos)))", "memset(&other->pos_h, 0, sizeof (*(&other->pos_h)))", "memset(&other->retval, 0, sizeof (*(&other->retval)))", "memset(&other->std, 0, sizeof (*(&other->std)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(other, 0, sizeof (*(other)))", "memset(other->array, 0, sizeof (*(other->array)))", "memset(other->ce_get_iterator, 0, sizeof (*(other->ce_get_iterator)))", "memset(other->debug_info, 0, sizeof (*(other->debug_info)))", "memset(other->fptr_count, 0, sizeof (*(other->fptr_count)))", "memset(other->fptr_offset_del, 0, sizeof (*(other->fptr_offset_del)))", "memset(other->fptr_offset_get, 0, sizeof (*(other->fptr_offset_get)))", "memset(other->fptr_offset_has, 0, sizeof (*(other->fptr_offset_has)))", "memset(other->fptr_offset_set, 0, sizeof (*(other->fptr_offset_set)))", "memset(other->pos, 0, sizeof (*(other->pos)))", "memset(other->retval, 0, sizeof (*(other->retval)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern->array)->is_ref__gc = (-16777217)", "(intern->array)->is_ref__gc = (-50397184)", "(intern->array)->is_ref__gc = (0)", "(intern->array)->is_ref__gc = (1)", "(intern->array)->is_ref__gc = (1048576)", "(intern->array)->is_ref__gc = (131072)", "(intern->array)->is_ref__gc = (16777216)", "(intern->array)->is_ref__gc = (262144)", "(intern->array)->is_ref__gc = (4)", "(intern->array)->is_ref__gc = (5)", "(intern->array)->is_ref__gc = (50397183)", "(intern->array)->is_ref__gc = (524288)", "(intern->array)->is_ref__gc = (6)", "(intern->array)->is_ref__gc = (64)", "(intern->array)->is_ref__gc = (65536)", "(intern->array)->is_ref__gc = (67108864)", "(intern->array)->is_ref__gc = (83886080)", "(intern->array)->refcount__gc = (-16777217)", "(intern->array)->refcount__gc = (-50397184)", "(intern->array)->refcount__gc = (0)", "(intern->array)->refcount__gc = (1)", "(intern->array)->refcount__gc = (1048576)", "(intern->array)->refcount__gc = (131072)", "(intern->array)->refcount__gc = (16777216)", "(intern->array)->refcount__gc = (262144)", "(intern->array)->refcount__gc = (4)", "(intern->array)->refcount__gc = (5)", "(intern->array)->refcount__gc = (50397183)", "(intern->array)->refcount__gc = (524288)", "(intern->array)->refcount__gc = (6)", "(intern->array)->refcount__gc = (64)", "(intern->array)->refcount__gc = (65536)", "(intern->array)->refcount__gc = (67108864)", "(intern->array)->refcount__gc = (83886080)", "_array_init(((intern)->array), 0)", "_array_init(((orig)), 0)", "_array_init(((other)->array), 0)", "_array_init(((tmp)), 0)", "_efree(((intern)->debug_info))", "_efree(((orig)))", "_efree(((other)->debug_info))", "_efree(((tmp)))", "_zval_copy_ctor((&(*(orig))))", "_zval_copy_ctor((&(*(tmp))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((orig)))", "_zval_copy_ctor(((other)->retval))", "_zval_copy_ctor(((tmp)))", "_zval_copy_ctor_func((orig))", "_zval_copy_ctor_func((tmp))", "_zval_dtor(((orig)))", "_zval_dtor(((tmp)))", "_zval_dtor_func((orig))", "_zval_dtor_func((tmp))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(orig)))", "_zval_ptr_dtor((&(other)->array))", "_zval_ptr_dtor((&(other)->retval))", "_zval_ptr_dtor((&(tmp)))", "convert_to_boolean((orig))", "convert_to_boolean((tmp))", "convert_to_long((intern)->retval)", "convert_to_long((other)->retval)", "gc_remove_zval_from_buffer((orig))", "gc_remove_zval_from_buffer((tmp))", "gc_zval_check_possible_root(((orig)))", "gc_zval_check_possible_root(((tmp)))", "gc_zval_possible_root((orig))", "gc_zval_possible_root((tmp))", "i_zval_ptr_dtor((orig))", "i_zval_ptr_dtor((tmp))", "inherited = (-16777217)", "inherited = (-50397184)", "inherited = (0)", "inherited = (1)", "inherited = (1048576)", "inherited = (131072)", "inherited = (16777216)", "inherited = (262144)", "inherited = (4)", "inherited = (5)", "inherited = (50397183)", "inherited = (524288)", "inherited = (6)", "inherited = (64)", "inherited = (65536)", "inherited = (67108864)", "inherited = (83886080)", "inherited = (clone_orig)", "inherited = (inherited)", "intern = (intern)", "intern = (other)", "intern->ar_flags = (-16777217)", "intern->ar_flags = (-50397184)", "intern->ar_flags = (0)", "intern->ar_flags = (1)", "intern->ar_flags = (1048576)", "intern->ar_flags = (131072)", "intern->ar_flags = (16777216)", "intern->ar_flags = (262144)", "intern->ar_flags = (4)", "intern->ar_flags = (5)", "intern->ar_flags = (50397183)", "intern->ar_flags = (524288)", "intern->ar_flags = (6)", "intern->ar_flags = (64)", "intern->ar_flags = (65536)", "intern->ar_flags = (67108864)", "intern->ar_flags = (83886080)", "intern->ar_flags = (clone_orig)", "intern->ar_flags = (inherited)", "intern->array = (intern)->array", "intern->array = (orig)", "intern->array = (other)->array", "intern->array = (tmp)", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (other)->ce_get_iterator", "intern->ce_get_iterator = (parent)", "memset((intern), 0, sizeof(spl_array_object))", "memset((other), 0, sizeof(spl_array_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&(other)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "object_properties_init(&intern->std, (parent))", "parent = (class_type)->parent", "parent = (class_type)", "parent = (parent)->parent", "parent = (parent)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(orig)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(tmp)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(other)->std)", "retval.handle = (-16777217)", "retval.handle = (-50397184)", "retval.handle = (0)", "retval.handle = (1)", "retval.handle = (1048576)", "retval.handle = (131072)", "retval.handle = (16777216)", "retval.handle = (262144)", "retval.handle = (4)", "retval.handle = (5)", "retval.handle = (50397183)", "retval.handle = (524288)", "retval.handle = (6)", "retval.handle = (64)", "retval.handle = (65536)", "retval.handle = (67108864)", "retval.handle = (83886080)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((other), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "spl_array_rewind((intern))", "spl_array_rewind((other))", "spl_array_update_pos((intern))", "spl_array_update_pos((other))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((other))", "spl_register_std_class(&(class_type), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(class_type), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_std_class(&(parent), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(parent), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&(class_type), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&(parent), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (class_type), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (parent), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_aggregate)", "zend_class_implements((class_type), 1, zend_ce_arrayaccess)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements((class_type), 1, zend_ce_serializable)", "zend_class_implements((parent), 1, spl_ce_Countable)", "zend_class_implements((parent), 1, spl_ce_RecursiveIterator)", "zend_class_implements((parent), 1, spl_ce_SeekableIterator)", "zend_class_implements((parent), 1, zend_ce_aggregate)", "zend_class_implements((parent), 1, zend_ce_arrayaccess)", "zend_class_implements((parent), 1, zend_ce_iterator)", "zend_class_implements((parent), 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_ArrayIterator, 1, (parent))", "zend_class_implements(spl_ce_ArrayObject, 1, (class_type))", "zend_class_implements(spl_ce_ArrayObject, 1, (parent))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (parent))", "zend_declare_class_constant_long((class_type), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((class_type), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long((parent), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((parent), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((parent), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(orig)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(tmp)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(orig)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(tmp)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((other)->debug_info)", "zend_hash_copy(((*(intern)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*(other)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(intern)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(other)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(intern)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(other)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(intern)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(other)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(intern)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(other)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(intern)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(other)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(orig), sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(tmp), sizeof(zval *))", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((other)->debug_info)", "zend_hash_find(&(class_type)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(class_type)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(class_type)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(class_type)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(class_type)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(class_type)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(class_type)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(class_type)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(class_type)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(class_type)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_hash_find(&(parent)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(parent)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(parent)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(parent)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(parent)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(parent)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(parent)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(parent)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(parent)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(parent)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(other)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&(other)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_object_std_init(&intern->std, (parent))", "zend_throw_exception((class_type), \"Function expects exactly one argument\", 0)", "zend_throw_exception((class_type), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception((parent), \"Function expects exactly one argument\", 0)", "zend_throw_exception((parent), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex((class_type), 0, \"Empty serialized string cannot be empty\")", "zend_throw_exception_ex((parent), 0, \"Empty serialized string cannot be empty\")", "zval_add_ref(&(orig))", "zval_add_ref(&(tmp))", "zval_addref_p((intern)->array)", "zval_addref_p((orig))", "zval_addref_p((other)->array)", "zval_addref_p((tmp))", "zval_delref_p(((orig)))", "zval_delref_p(((tmp)))", "zval_set_isref_p((orig))", "zval_set_isref_p((tmp))", "zval_set_refcount_p((orig), 1)", "zval_set_refcount_p((tmp), 1)", "zval_unset_isref_p((orig))", "zval_unset_isref_p((tmp))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->array)->is_ref__gc = 0", "(intern->array)->refcount__gc = 1", "_array_init((intern->array), 0)", "class_type->get_iterator = spl_array_get_iterator", "exit(1)", "inherited = 1", "intern = _emalloc((sizeof(spl_array_object)))", "intern->ar_flags = 0", "intern->array = orig", "intern->array = other->array", "intern->ce_get_iterator = other->ce_get_iterator", "intern->ce_get_iterator = spl_ce_ArrayIterator", "intern->debug_info = ((void *)0)", "intern->fptr_count = ((void *)0)", "intern->fptr_offset_del = ((void *)0)", "intern->fptr_offset_get = ((void *)0)", "intern->fptr_offset_has = ((void *)0)", "intern->fptr_offset_set = ((void *)0)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_array_object))", "object_properties_init(&intern->std, class_type)", "parent = parent->parent", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handlers = &spl_handler_ArrayIterator", "retval.handlers = &spl_handler_ArrayObject", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_find(&class_type->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&class_type->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&class_type->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&class_type->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&class_type->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&class_type->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&class_type->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&class_type->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&class_type->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&class_type->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)", "zval_addref_p(other->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.76067276163282]
								}, {
									"case":	2,
									"scores":	[-8.76067276163282]
								}, {
									"case":	3,
									"scores":	[-8.76067276163282]
								}, {
									"case":	4,
									"scores":	[-8.76067276163282]
								}, {
									"case":	5,
									"scores":	[-8.76067276163282]
								}, {
									"case":	6,
									"scores":	[-8.76067276163282]
								}, {
									"case":	7,
									"scores":	[-8.76067276163282]
								}, {
									"case":	8,
									"scores":	[-8.76067276163282]
								}, {
									"case":	9,
									"scores":	[-8.76067276163282]
								}, {
									"case":	10,
									"scores":	[-8.76067276163282]
								}, {
									"case":	11,
									"scores":	[-8.76067276163282]
								}, {
									"case":	12,
									"scores":	[-8.76067276163282]
								}, {
									"case":	13,
									"scores":	[-8.76067276163282]
								}, {
									"case":	14,
									"scores":	[-8.76067276163282]
								}, {
									"case":	15,
									"scores":	[-8.76067276163282]
								}, {
									"case":	16,
									"scores":	[-8.76067276163282]
								}, {
									"case":	17,
									"scores":	[-8.76067276163282]
								}, {
									"case":	18,
									"scores":	[-8.76067276163282]
								}, {
									"case":	19,
									"scores":	[-8.76067276163282]
								}, {
									"case":	20,
									"scores":	[-8.76067276163282]
								}, {
									"case":	21,
									"scores":	[-8.76067276163282]
								}, {
									"case":	22,
									"scores":	[-8.76067276163282]
								}, {
									"case":	23,
									"scores":	[-8.76067276163282]
								}, {
									"case":	24,
									"scores":	[-8.76067276163282]
								}, {
									"case":	25,
									"scores":	[-8.76067276163282]
								}, {
									"case":	26,
									"scores":	[-8.76067276163282]
								}, {
									"case":	27,
									"scores":	[-8.76067276163282]
								}, {
									"case":	28,
									"scores":	[-8.76067276163282]
								}, {
									"case":	29,
									"scores":	[-8.76067276163282]
								}, {
									"case":	30,
									"scores":	[-8.76067276163282]
								}, {
									"case":	31,
									"scores":	[-8.76067276163282]
								}, {
									"case":	32,
									"scores":	[-8.76067276163282]
								}, {
									"case":	33,
									"scores":	[-8.76067276163282]
								}, {
									"case":	34,
									"scores":	[-8.76067276163282]
								}, {
									"case":	35,
									"scores":	[-8.76067276163282]
								}, {
									"case":	36,
									"scores":	[-8.76067276163282]
								}, {
									"case":	37,
									"scores":	[-8.76067276163282]
								}, {
									"case":	38,
									"scores":	[-8.76067276163282]
								}, {
									"case":	39,
									"scores":	[-8.76067276163282]
								}, {
									"case":	40,
									"scores":	[-8.76067276163282]
								}, {
									"case":	41,
									"scores":	[-8.76067276163282]
								}, {
									"case":	42,
									"scores":	[-8.76067276163282]
								}, {
									"case":	43,
									"scores":	[-8.76067276163282]
								}, {
									"case":	44,
									"scores":	[-8.76067276163282]
								}, {
									"case":	45,
									"scores":	[-8.76067276163282]
								}, {
									"case":	46,
									"scores":	[-8.76067276163282]
								}, {
									"case":	47,
									"scores":	[-8.76067276163282]
								}, {
									"case":	48,
									"scores":	[-8.76067276163282]
								}, {
									"case":	49,
									"scores":	[-8.76067276163282]
								}, {
									"case":	50,
									"scores":	[-8.76067276163282]
								}, {
									"case":	51,
									"scores":	[-8.76067276163282]
								}, {
									"case":	52,
									"scores":	[-8.76067276163282]
								}, {
									"case":	53,
									"scores":	[-8.76067276163282]
								}, {
									"case":	54,
									"scores":	[-8.76067276163282]
								}, {
									"case":	55,
									"scores":	[-8.76067276163282]
								}, {
									"case":	56,
									"scores":	[-8.76067276163282]
								}, {
									"case":	57,
									"scores":	[-8.76067276163282]
								}, {
									"case":	58,
									"scores":	[-8.76067276163282]
								}, {
									"case":	59,
									"scores":	[-8.76067276163282]
								}, {
									"case":	60,
									"scores":	[-8.76067276163282]
								}, {
									"case":	61,
									"scores":	[-8.76067276163282]
								}, {
									"case":	62,
									"scores":	[-8.76067276163282]
								}, {
									"case":	63,
									"scores":	[-8.76067276163282]
								}, {
									"case":	64,
									"scores":	[-8.76067276163282]
								}, {
									"case":	65,
									"scores":	[-8.76067276163282]
								}, {
									"case":	66,
									"scores":	[-8.76067276163282]
								}, {
									"case":	67,
									"scores":	[-8.76067276163282]
								}, {
									"case":	68,
									"scores":	[-8.76067276163282]
								}, {
									"case":	69,
									"scores":	[-8.76067276163282]
								}, {
									"case":	70,
									"scores":	[-8.76067276163282]
								}, {
									"case":	71,
									"scores":	[-8.76067276163282]
								}, {
									"case":	72,
									"scores":	[-8.76067276163282]
								}, {
									"case":	73,
									"scores":	[-8.76067276163282]
								}, {
									"case":	74,
									"scores":	[-8.76067276163282]
								}, {
									"case":	75,
									"scores":	[-8.76067276163282]
								}, {
									"case":	76,
									"scores":	[-8.76067276163282]
								}, {
									"case":	77,
									"scores":	[-8.76067276163282]
								}, {
									"case":	78,
									"scores":	[-8.76067276163282]
								}, {
									"case":	79,
									"scores":	[-8.76067276163282]
								}, {
									"case":	80,
									"scores":	[-8.76067276163282]
								}, {
									"case":	81,
									"scores":	[-8.76067276163282]
								}, {
									"case":	82,
									"scores":	[-8.76067276163282]
								}, {
									"case":	83,
									"scores":	[-8.76067276163282]
								}, {
									"case":	84,
									"scores":	[-8.76067276163282]
								}, {
									"case":	85,
									"scores":	[-8.76067276163282]
								}, {
									"case":	86,
									"scores":	[-8.76067276163282]
								}, {
									"case":	87,
									"scores":	[-8.76067276163282]
								}, {
									"case":	88,
									"scores":	[-8.76067276163282]
								}, {
									"case":	89,
									"scores":	[-8.76067276163282]
								}, {
									"case":	90,
									"scores":	[-8.76067276163282]
								}, {
									"case":	91,
									"scores":	[-8.76067276163282]
								}, {
									"case":	92,
									"scores":	[-8.76067276163282]
								}, {
									"case":	93,
									"scores":	[-8.76067276163282]
								}, {
									"case":	94,
									"scores":	[-8.76067276163282]
								}, {
									"case":	95,
									"scores":	[-8.76067276163282]
								}, {
									"case":	96,
									"scores":	[-8.76067276163282]
								}, {
									"case":	97,
									"scores":	[-8.76067276163282]
								}, {
									"case":	98,
									"scores":	[-8.76067276163282]
								}, {
									"case":	99,
									"scores":	[-8.76067276163282]
								}, {
									"case":	100,
									"scores":	[-8.76067276163282]
								}, {
									"case":	101,
									"scores":	[-8.76067276163282]
								}, {
									"case":	102,
									"scores":	[-8.76067276163282]
								}, {
									"case":	103,
									"scores":	[-8.76067276163282]
								}, {
									"case":	104,
									"scores":	[-8.76067276163282]
								}, {
									"case":	105,
									"scores":	[-8.76067276163282]
								}, {
									"case":	106,
									"scores":	[-8.76067276163282]
								}, {
									"case":	107,
									"scores":	[-8.76067276163282]
								}, {
									"case":	108,
									"scores":	[-8.76067276163282]
								}, {
									"case":	109,
									"scores":	[-8.76067276163282]
								}, {
									"case":	110,
									"scores":	[-8.76067276163282]
								}, {
									"case":	111,
									"scores":	[-8.76067276163282]
								}, {
									"case":	112,
									"scores":	[-8.76067276163282]
								}, {
									"case":	113,
									"scores":	[-8.76067276163282]
								}, {
									"case":	114,
									"scores":	[-8.76067276163282]
								}, {
									"case":	115,
									"scores":	[-8.76067276163282]
								}, {
									"case":	116,
									"scores":	[-8.76067276163282]
								}, {
									"case":	117,
									"scores":	[-8.76067276163282]
								}, {
									"case":	118,
									"scores":	[-8.76067276163282]
								}, {
									"case":	119,
									"scores":	[-8.76067276163282]
								}, {
									"case":	120,
									"scores":	[-8.76067276163282]
								}, {
									"case":	121,
									"scores":	[-8.76067276163282]
								}, {
									"case":	122,
									"scores":	[-8.76067276163282]
								}, {
									"case":	123,
									"scores":	[-8.76067276163282]
								}, {
									"case":	124,
									"scores":	[-8.76067276163282]
								}, {
									"case":	125,
									"scores":	[-8.76067276163282]
								}, {
									"case":	126,
									"scores":	[-8.76067276163282]
								}, {
									"case":	127,
									"scores":	[-8.76067276163282]
								}, {
									"case":	128,
									"scores":	[-8.76067276163282]
								}, {
									"case":	129,
									"scores":	[-8.76067276163282]
								}, {
									"case":	130,
									"scores":	[-8.76067276163282]
								}, {
									"case":	131,
									"scores":	[-8.76067276163282]
								}, {
									"case":	132,
									"scores":	[-8.76067276163282]
								}, {
									"case":	133,
									"scores":	[-8.76067276163282]
								}, {
									"case":	134,
									"scores":	[-8.76067276163282]
								}, {
									"case":	135,
									"scores":	[-8.76067276163282]
								}, {
									"case":	136,
									"scores":	[-8.76067276163282]
								}, {
									"case":	137,
									"scores":	[-8.76067276163282]
								}, {
									"case":	138,
									"scores":	[-8.76067276163282]
								}, {
									"case":	139,
									"scores":	[-8.76067276163282]
								}, {
									"case":	140,
									"scores":	[-8.76067276163282]
								}, {
									"case":	141,
									"scores":	[-8.76067276163282]
								}, {
									"case":	142,
									"scores":	[-8.76067276163282]
								}, {
									"case":	143,
									"scores":	[-8.76067276163282]
								}, {
									"case":	144,
									"scores":	[-8.76067276163282]
								}, {
									"case":	145,
									"scores":	[-8.76067276163282]
								}, {
									"case":	146,
									"scores":	[-8.76067276163282]
								}, {
									"case":	147,
									"scores":	[-8.76067276163282]
								}, {
									"case":	148,
									"scores":	[-8.76067276163282]
								}, {
									"case":	149,
									"scores":	[-8.76067276163282]
								}, {
									"case":	150,
									"scores":	[-8.76067276163282]
								}, {
									"case":	151,
									"scores":	[-8.76067276163282]
								}, {
									"case":	152,
									"scores":	[-8.76067276163282]
								}, {
									"case":	153,
									"scores":	[-8.76067276163282]
								}, {
									"case":	154,
									"scores":	[-8.76067276163282]
								}, {
									"case":	155,
									"scores":	[-8.76067276163282]
								}, {
									"case":	156,
									"scores":	[-8.76067276163282]
								}, {
									"case":	157,
									"scores":	[-8.76067276163282]
								}, {
									"case":	158,
									"scores":	[-8.76067276163282]
								}, {
									"case":	159,
									"scores":	[-8.76067276163282]
								}, {
									"case":	160,
									"scores":	[-8.76067276163282]
								}, {
									"case":	161,
									"scores":	[-8.76067276163282]
								}, {
									"case":	162,
									"scores":	[-8.76067276163282]
								}, {
									"case":	163,
									"scores":	[-8.76067276163282]
								}, {
									"case":	164,
									"scores":	[-8.76067276163282]
								}, {
									"case":	165,
									"scores":	[-8.76067276163282]
								}, {
									"case":	166,
									"scores":	[-8.76067276163282]
								}, {
									"case":	167,
									"scores":	[-8.76067276163282]
								}, {
									"case":	168,
									"scores":	[-8.76067276163282]
								}, {
									"case":	169,
									"scores":	[-8.76067276163282]
								}, {
									"case":	170,
									"scores":	[-8.76067276163282]
								}, {
									"case":	171,
									"scores":	[-8.76067276163282]
								}, {
									"case":	172,
									"scores":	[-8.76067276163282]
								}, {
									"case":	173,
									"scores":	[-8.76067276163282]
								}, {
									"case":	174,
									"scores":	[-8.76067276163282]
								}, {
									"case":	175,
									"scores":	[-8.76067276163282]
								}, {
									"case":	176,
									"scores":	[-8.76067276163282]
								}, {
									"case":	177,
									"scores":	[-8.76067276163282]
								}, {
									"case":	178,
									"scores":	[-8.76067276163282]
								}, {
									"case":	179,
									"scores":	[-8.76067276163282]
								}, {
									"case":	180,
									"scores":	[-8.76067276163282]
								}, {
									"case":	181,
									"scores":	[-8.76067276163282]
								}, {
									"case":	182,
									"scores":	[-8.76067276163282]
								}, {
									"case":	183,
									"scores":	[-8.76067276163282]
								}, {
									"case":	184,
									"scores":	[-8.76067276163282]
								}, {
									"case":	185,
									"scores":	[-8.76067276163282]
								}, {
									"case":	186,
									"scores":	[-8.76067276163282]
								}, {
									"case":	187,
									"scores":	[-8.76067276163282]
								}, {
									"case":	188,
									"scores":	[-8.76067276163282]
								}, {
									"case":	189,
									"scores":	[-8.76067276163282]
								}, {
									"case":	190,
									"scores":	[-8.76067276163282]
								}, {
									"case":	191,
									"scores":	[-8.76067276163282]
								}, {
									"case":	192,
									"scores":	[-8.76067276163282]
								}, {
									"case":	193,
									"scores":	[-8.76067276163282]
								}, {
									"case":	194,
									"scores":	[-8.76067276163282]
								}, {
									"case":	195,
									"scores":	[-8.76067276163282]
								}, {
									"case":	196,
									"scores":	[-8.76067276163282]
								}, {
									"case":	197,
									"scores":	[-8.76067276163282]
								}, {
									"case":	198,
									"scores":	[-8.76067276163282]
								}, {
									"case":	199,
									"scores":	[-8.76067276163282]
								}, {
									"case":	200,
									"scores":	[-8.76067276163282]
								}, {
									"case":	201,
									"scores":	[-8.76067276163282]
								}, {
									"case":	202,
									"scores":	[-8.76067276163282]
								}, {
									"case":	203,
									"scores":	[-8.76067276163282]
								}, {
									"case":	204,
									"scores":	[-8.76067276163282]
								}, {
									"case":	205,
									"scores":	[-8.76067276163282]
								}, {
									"case":	206,
									"scores":	[-8.76067276163282]
								}, {
									"case":	207,
									"scores":	[-8.76067276163282]
								}, {
									"case":	208,
									"scores":	[-8.76067276163282]
								}, {
									"case":	209,
									"scores":	[-8.76067276163282]
								}, {
									"case":	210,
									"scores":	[-8.76067276163282]
								}, {
									"case":	211,
									"scores":	[-8.76067276163282]
								}, {
									"case":	212,
									"scores":	[-8.76067276163282]
								}, {
									"case":	213,
									"scores":	[-8.76067276163282]
								}, {
									"case":	214,
									"scores":	[-8.76067276163282]
								}, {
									"case":	215,
									"scores":	[-8.76067276163282]
								}, {
									"case":	216,
									"scores":	[-8.76067276163282]
								}, {
									"case":	217,
									"scores":	[-8.76067276163282]
								}, {
									"case":	218,
									"scores":	[-8.76067276163282]
								}, {
									"case":	219,
									"scores":	[-8.76067276163282]
								}, {
									"case":	220,
									"scores":	[-8.76067276163282]
								}, {
									"case":	221,
									"scores":	[-8.76067276163282]
								}, {
									"case":	222,
									"scores":	[-8.76067276163282]
								}, {
									"case":	223,
									"scores":	[-8.76067276163282]
								}, {
									"case":	224,
									"scores":	[-8.76067276163282]
								}, {
									"case":	225,
									"scores":	[-8.76067276163282]
								}, {
									"case":	226,
									"scores":	[-8.76067276163282]
								}, {
									"case":	227,
									"scores":	[-8.76067276163282]
								}, {
									"case":	228,
									"scores":	[-8.76067276163282]
								}, {
									"case":	229,
									"scores":	[-8.76067276163282]
								}, {
									"case":	230,
									"scores":	[-8.76067276163282]
								}, {
									"case":	231,
									"scores":	[-8.76067276163282]
								}, {
									"case":	232,
									"scores":	[-8.76067276163282]
								}, {
									"case":	233,
									"scores":	[-8.76067276163282]
								}, {
									"case":	234,
									"scores":	[-8.76067276163282]
								}, {
									"case":	235,
									"scores":	[-8.76067276163282]
								}, {
									"case":	236,
									"scores":	[-8.76067276163282]
								}, {
									"case":	237,
									"scores":	[-8.76067276163282]
								}, {
									"case":	238,
									"scores":	[-8.76067276163282]
								}, {
									"case":	239,
									"scores":	[-8.76067276163282]
								}, {
									"case":	240,
									"scores":	[-8.76067276163282]
								}, {
									"case":	241,
									"scores":	[-8.76067276163282]
								}, {
									"case":	242,
									"scores":	[-8.76067276163282]
								}, {
									"case":	243,
									"scores":	[-8.76067276163282]
								}, {
									"case":	244,
									"scores":	[-8.76067276163282]
								}, {
									"case":	245,
									"scores":	[-8.76067276163282]
								}, {
									"case":	246,
									"scores":	[-8.76067276163282]
								}, {
									"case":	247,
									"scores":	[-8.76067276163282]
								}, {
									"case":	248,
									"scores":	[-8.76067276163282]
								}, {
									"case":	249,
									"scores":	[-8.76067276163282]
								}, {
									"case":	250,
									"scores":	[-8.76067276163282]
								}, {
									"case":	251,
									"scores":	[-8.76067276163282]
								}, {
									"case":	252,
									"scores":	[-8.76067276163282]
								}, {
									"case":	253,
									"scores":	[-8.76067276163282]
								}, {
									"case":	254,
									"scores":	[-8.76067276163282]
								}, {
									"case":	255,
									"scores":	[-8.76067276163282]
								}, {
									"case":	256,
									"scores":	[-8.76067276163282]
								}, {
									"case":	257,
									"scores":	[-8.76067276163282]
								}, {
									"case":	258,
									"scores":	[-8.76067276163282]
								}, {
									"case":	259,
									"scores":	[-8.76067276163282]
								}, {
									"case":	260,
									"scores":	[-8.76067276163282]
								}, {
									"case":	261,
									"scores":	[-8.76067276163282]
								}, {
									"case":	262,
									"scores":	[-8.76067276163282]
								}, {
									"case":	263,
									"scores":	[-8.76067276163282]
								}, {
									"case":	264,
									"scores":	[-8.76067276163282]
								}, {
									"case":	265,
									"scores":	[-8.76067276163282]
								}, {
									"case":	266,
									"scores":	[-8.76067276163282]
								}, {
									"case":	267,
									"scores":	[-8.76067276163282]
								}, {
									"case":	268,
									"scores":	[-8.76067276163282]
								}, {
									"case":	269,
									"scores":	[-8.76067276163282]
								}, {
									"case":	270,
									"scores":	[-8.76067276163282]
								}, {
									"case":	271,
									"scores":	[-8.76067276163282]
								}, {
									"case":	272,
									"scores":	[-8.76067276163282]
								}, {
									"case":	273,
									"scores":	[-8.76067276163282]
								}, {
									"case":	274,
									"scores":	[-8.76067276163282]
								}, {
									"case":	275,
									"scores":	[-8.76067276163282]
								}, {
									"case":	276,
									"scores":	[-8.76067276163282]
								}, {
									"case":	277,
									"scores":	[-8.76067276163282]
								}, {
									"case":	278,
									"scores":	[-8.76067276163282]
								}, {
									"case":	279,
									"scores":	[-8.76067276163282]
								}, {
									"case":	280,
									"scores":	[-8.76067276163282]
								}, {
									"case":	281,
									"scores":	[-8.76067276163282]
								}, {
									"case":	282,
									"scores":	[-8.76067276163282]
								}, {
									"case":	283,
									"scores":	[-8.76067276163282]
								}, {
									"case":	284,
									"scores":	[-8.76067276163282]
								}, {
									"case":	285,
									"scores":	[-8.76067276163282]
								}, {
									"case":	286,
									"scores":	[-8.76067276163282]
								}, {
									"case":	287,
									"scores":	[-8.76067276163282]
								}, {
									"case":	288,
									"scores":	[-8.76067276163282]
								}, {
									"case":	289,
									"scores":	[-8.76067276163282]
								}, {
									"case":	290,
									"scores":	[-8.76067276163282]
								}, {
									"case":	291,
									"scores":	[-8.76067276163282]
								}, {
									"case":	292,
									"scores":	[-8.76067276163282]
								}, {
									"case":	293,
									"scores":	[-8.76067276163282]
								}, {
									"case":	294,
									"scores":	[-8.76067276163282]
								}, {
									"case":	295,
									"scores":	[-8.76067276163282]
								}, {
									"case":	296,
									"scores":	[-8.76067276163282]
								}, {
									"case":	297,
									"scores":	[-8.76067276163282]
								}, {
									"case":	298,
									"scores":	[-8.76067276163282]
								}, {
									"case":	299,
									"scores":	[-8.76067276163282]
								}, {
									"case":	300,
									"scores":	[-8.76067276163282]
								}, {
									"case":	301,
									"scores":	[-8.76067276163282]
								}, {
									"case":	302,
									"scores":	[-8.76067276163282]
								}, {
									"case":	303,
									"scores":	[-8.76067276163282]
								}, {
									"case":	304,
									"scores":	[-8.76067276163282]
								}, {
									"case":	305,
									"scores":	[-8.76067276163282]
								}, {
									"case":	306,
									"scores":	[-8.76067276163282]
								}, {
									"case":	307,
									"scores":	[-8.76067276163282]
								}, {
									"case":	308,
									"scores":	[-8.76067276163282]
								}, {
									"case":	309,
									"scores":	[-8.76067276163282]
								}, {
									"case":	310,
									"scores":	[-8.76067276163282]
								}, {
									"case":	311,
									"scores":	[-8.76067276163282]
								}, {
									"case":	312,
									"scores":	[-8.76067276163282]
								}, {
									"case":	313,
									"scores":	[-8.76067276163282]
								}, {
									"case":	314,
									"scores":	[-8.76067276163282]
								}, {
									"case":	315,
									"scores":	[-8.76067276163282]
								}, {
									"case":	316,
									"scores":	[-8.76067276163282]
								}, {
									"case":	317,
									"scores":	[-8.76067276163282]
								}, {
									"case":	318,
									"scores":	[-8.76067276163282]
								}, {
									"case":	319,
									"scores":	[-8.76067276163282]
								}, {
									"case":	320,
									"scores":	[-8.76067276163282]
								}, {
									"case":	321,
									"scores":	[-8.76067276163282]
								}, {
									"case":	322,
									"scores":	[-8.76067276163282]
								}, {
									"case":	323,
									"scores":	[-8.76067276163282]
								}, {
									"case":	324,
									"scores":	[-8.76067276163282]
								}, {
									"case":	325,
									"scores":	[-8.76067276163282]
								}, {
									"case":	326,
									"scores":	[-8.76067276163282]
								}, {
									"case":	327,
									"scores":	[-8.76067276163282]
								}, {
									"case":	328,
									"scores":	[-8.76067276163282]
								}, {
									"case":	329,
									"scores":	[-8.76067276163282]
								}, {
									"case":	330,
									"scores":	[-8.76067276163282]
								}, {
									"case":	331,
									"scores":	[-8.76067276163282]
								}, {
									"case":	332,
									"scores":	[-8.76067276163282]
								}, {
									"case":	333,
									"scores":	[-8.76067276163282]
								}, {
									"case":	334,
									"scores":	[-8.76067276163282]
								}, {
									"case":	335,
									"scores":	[-8.76067276163282]
								}, {
									"case":	336,
									"scores":	[-8.76067276163282]
								}, {
									"case":	337,
									"scores":	[-8.76067276163282]
								}, {
									"case":	338,
									"scores":	[-8.76067276163282]
								}, {
									"case":	339,
									"scores":	[-8.76067276163282]
								}, {
									"case":	340,
									"scores":	[-8.76067276163282]
								}, {
									"case":	341,
									"scores":	[-8.76067276163282]
								}, {
									"case":	342,
									"scores":	[-8.76067276163282]
								}, {
									"case":	343,
									"scores":	[-8.76067276163282]
								}, {
									"case":	344,
									"scores":	[-8.76067276163282]
								}, {
									"case":	345,
									"scores":	[-8.76067276163282]
								}, {
									"case":	346,
									"scores":	[-8.76067276163282]
								}, {
									"case":	347,
									"scores":	[-8.76067276163282]
								}, {
									"case":	348,
									"scores":	[-8.76067276163282]
								}, {
									"case":	349,
									"scores":	[-8.76067276163282]
								}, {
									"case":	350,
									"scores":	[-8.76067276163282]
								}, {
									"case":	351,
									"scores":	[-8.76067276163282]
								}, {
									"case":	352,
									"scores":	[-8.76067276163282]
								}, {
									"case":	353,
									"scores":	[-8.76067276163282]
								}, {
									"case":	354,
									"scores":	[-8.76067276163282]
								}, {
									"case":	355,
									"scores":	[-8.76067276163282]
								}, {
									"case":	356,
									"scores":	[-8.76067276163282]
								}, {
									"case":	357,
									"scores":	[-8.76067276163282]
								}, {
									"case":	358,
									"scores":	[-8.76067276163282]
								}, {
									"case":	359,
									"scores":	[-8.76067276163282]
								}, {
									"case":	360,
									"scores":	[-8.76067276163282]
								}, {
									"case":	361,
									"scores":	[-8.76067276163282]
								}, {
									"case":	362,
									"scores":	[-8.76067276163282]
								}, {
									"case":	363,
									"scores":	[-8.76067276163282]
								}, {
									"case":	364,
									"scores":	[-8.76067276163282]
								}, {
									"case":	365,
									"scores":	[-8.76067276163282]
								}, {
									"case":	366,
									"scores":	[-8.76067276163282]
								}, {
									"case":	367,
									"scores":	[-8.76067276163282]
								}, {
									"case":	368,
									"scores":	[-8.76067276163282]
								}, {
									"case":	369,
									"scores":	[-8.76067276163282]
								}, {
									"case":	370,
									"scores":	[-8.76067276163282]
								}, {
									"case":	371,
									"scores":	[-8.76067276163282]
								}, {
									"case":	372,
									"scores":	[-8.76067276163282]
								}, {
									"case":	373,
									"scores":	[-8.76067276163282]
								}, {
									"case":	374,
									"scores":	[-8.76067276163282]
								}, {
									"case":	375,
									"scores":	[-8.76067276163282]
								}, {
									"case":	376,
									"scores":	[-8.76067276163282]
								}, {
									"case":	377,
									"scores":	[-8.76067276163282]
								}, {
									"case":	378,
									"scores":	[-8.76067276163282]
								}, {
									"case":	379,
									"scores":	[-8.76067276163282]
								}, {
									"case":	380,
									"scores":	[-8.76067276163282]
								}, {
									"case":	381,
									"scores":	[-8.76067276163282]
								}, {
									"case":	382,
									"scores":	[-8.76067276163282]
								}, {
									"case":	383,
									"scores":	[-8.76067276163282]
								}, {
									"case":	384,
									"scores":	[-8.76067276163282]
								}, {
									"case":	385,
									"scores":	[-8.76067276163282]
								}, {
									"case":	386,
									"scores":	[-8.76067276163282]
								}, {
									"case":	387,
									"scores":	[-8.76067276163282]
								}, {
									"case":	388,
									"scores":	[-8.76067276163282]
								}, {
									"case":	389,
									"scores":	[-8.76067276163282]
								}, {
									"case":	390,
									"scores":	[-8.76067276163282]
								}, {
									"case":	391,
									"scores":	[-8.76067276163282]
								}, {
									"case":	392,
									"scores":	[-8.76067276163282]
								}, {
									"case":	393,
									"scores":	[-8.76067276163282]
								}, {
									"case":	394,
									"scores":	[-8.76067276163282]
								}, {
									"case":	395,
									"scores":	[-8.76067276163282]
								}, {
									"case":	396,
									"scores":	[-8.76067276163282]
								}, {
									"case":	397,
									"scores":	[-8.76067276163282]
								}, {
									"case":	398,
									"scores":	[-8.76067276163282]
								}, {
									"case":	399,
									"scores":	[-8.76067276163282]
								}, {
									"case":	400,
									"scores":	[-8.76067276163282]
								}, {
									"case":	401,
									"scores":	[-8.76067276163282]
								}, {
									"case":	402,
									"scores":	[-8.76067276163282]
								}, {
									"case":	403,
									"scores":	[-8.76067276163282]
								}, {
									"case":	404,
									"scores":	[-8.76067276163282]
								}, {
									"case":	405,
									"scores":	[-8.76067276163282]
								}, {
									"case":	406,
									"scores":	[-8.76067276163282]
								}, {
									"case":	407,
									"scores":	[-8.76067276163282]
								}, {
									"case":	408,
									"scores":	[-8.76067276163282]
								}, {
									"case":	409,
									"scores":	[-8.76067276163282]
								}, {
									"case":	410,
									"scores":	[-8.76067276163282]
								}, {
									"case":	411,
									"scores":	[-8.76067276163282]
								}, {
									"case":	412,
									"scores":	[-8.76067276163282]
								}, {
									"case":	413,
									"scores":	[-8.76067276163282]
								}]
						}, {
							"switch":	24,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	186,
							"begin_column":	3,
							"end_line":	186,
							"end_column":	62,
							"patch_codes":	["if (!__is_neg(\"\", \"L186\", 41, &(intern), sizeof (intern), &(other), sizeof (other), &(intern->ar_flags), sizeof (intern->ar_flags), &(other->ar_flags), sizeof (other->ar_flags), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(other->ce_get_iterator), sizeof (other->ce_get_iterator), &(clone_orig), sizeof (clone_orig), &(orig), sizeof (orig), &(intern->array), sizeof (intern->array), &(other->array), sizeof (other->array), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->debug_info), sizeof (intern->debug_info), &(tmp), sizeof (tmp), &(class_type), sizeof (class_type), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(other->retval), sizeof (other->retval), &(other->pos), sizeof (other->pos), &(other->pos_h), sizeof (other->pos_h), &(other->is_self), sizeof (other->is_self), &(other->fptr_offset_get), sizeof (other->fptr_offset_get), &(other->fptr_offset_set), sizeof (other->fptr_offset_set), &(other->fptr_offset_has), sizeof (other->fptr_offset_has), &(other->fptr_offset_del), sizeof (other->fptr_offset_del), &(other->fptr_count), sizeof (other->fptr_count), &(other->debug_info), sizeof (other->debug_info)))\n    intern->ar_flags |= (other->ar_flags & 50397183);\n", "{\n}\n", "(&class_type)->ar_flags |= (other->ar_flags & 50397183)", "(&clone_orig)->ar_flags |= (other->ar_flags & 50397183)", "(&inherited)->ar_flags |= (other->ar_flags & 50397183)", "(&intern)->ar_flags |= (other->ar_flags & 50397183)", "(&obj)->ar_flags |= (other->ar_flags & 50397183)", "(&orig)->ar_flags |= (other->ar_flags & 50397183)", "(&other)->ar_flags |= (other->ar_flags & 50397183)", "(&parent)->ar_flags |= (other->ar_flags & 50397183)", "(&retval)->ar_flags |= (other->ar_flags & 50397183)", "(&tmp)->ar_flags |= (other->ar_flags & 50397183)", "(intern)->ar_flags |= (other->ar_flags & 50397183)", "(other)->ar_flags |= (other->ar_flags & 50397183)", "intern->ar_flags |= ((&class_type)->ar_flags & 50397183)", "intern->ar_flags |= ((&clone_orig)->ar_flags & 50397183)", "intern->ar_flags |= ((&inherited)->ar_flags & 50397183)", "intern->ar_flags |= ((&intern)->ar_flags & 50397183)", "intern->ar_flags |= ((&obj)->ar_flags & 50397183)", "intern->ar_flags |= ((&orig)->ar_flags & 50397183)", "intern->ar_flags |= ((&other)->ar_flags & 50397183)", "intern->ar_flags |= ((&parent)->ar_flags & 50397183)", "intern->ar_flags |= ((&retval)->ar_flags & 50397183)", "intern->ar_flags |= ((&tmp)->ar_flags & 50397183)", "intern->ar_flags |= ((intern)->ar_flags & 50397183)", "intern->ar_flags |= ((other)->ar_flags & 50397183)", "intern->ar_flags |= (other->ar_flags & (0 * clone_orig))", "intern->ar_flags |= (other->ar_flags & (0 * inherited))", "intern->ar_flags |= (other->ar_flags & (0))", "intern->ar_flags |= (other->ar_flags & (class_type != 0))", "intern->ar_flags |= (other->ar_flags & (class_type != parent))", "intern->ar_flags |= (other->ar_flags & (class_type == 0))", "intern->ar_flags |= (other->ar_flags & (class_type == parent))", "intern->ar_flags |= (other->ar_flags & (clone_orig != 0))", "intern->ar_flags |= (other->ar_flags & (clone_orig != inherited))", "intern->ar_flags |= (other->ar_flags & (clone_orig * inherited))", "intern->ar_flags |= (other->ar_flags & (clone_orig + 0))", "intern->ar_flags |= (other->ar_flags & (clone_orig + inherited))", "intern->ar_flags |= (other->ar_flags & (clone_orig - 0))", "intern->ar_flags |= (other->ar_flags & (clone_orig - inherited))", "intern->ar_flags |= (other->ar_flags & (clone_orig == 0))", "intern->ar_flags |= (other->ar_flags & (clone_orig == inherited))", "intern->ar_flags |= (other->ar_flags & (inherited != 0))", "intern->ar_flags |= (other->ar_flags & (inherited * clone_orig))", "intern->ar_flags |= (other->ar_flags & (inherited + 0))", "intern->ar_flags |= (other->ar_flags & (inherited - 0))", "intern->ar_flags |= (other->ar_flags & (inherited == 0))", "intern->ar_flags |= (other->ar_flags & (intern != 0))", "intern->ar_flags |= (other->ar_flags & (intern != other))", "intern->ar_flags |= (other->ar_flags & (intern == 0))", "intern->ar_flags |= (other->ar_flags & (intern == other))", "intern->ar_flags |= (other->ar_flags & (obj != 0))", "intern->ar_flags |= (other->ar_flags & (obj == 0))", "intern->ar_flags |= (other->ar_flags & (orig != 0))", "intern->ar_flags |= (other->ar_flags & (orig != tmp))", "intern->ar_flags |= (other->ar_flags & (orig == 0))", "intern->ar_flags |= (other->ar_flags & (orig == tmp))", "intern->ar_flags |= (other->ar_flags & (other != 0))", "intern->ar_flags |= (other->ar_flags & (other == 0))", "intern->ar_flags |= (other->ar_flags & (parent != 0))", "intern->ar_flags |= (other->ar_flags & (parent == 0))", "intern->ar_flags |= (other->ar_flags & (retval != 0))", "intern->ar_flags |= (other->ar_flags & (retval == 0))", "intern->ar_flags |= (other->ar_flags & (tmp != 0))", "intern->ar_flags |= (other->ar_flags & (tmp == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.561735720032818, -10.31994822953282, -9.48525422263282, -9.57787563163282, -10.069599672632819, -9.72208029163282, -9.34738162163282, -10.760640917632818, -10.772654398532818, -10.935327590632818, -10.127974061632818, -10.127974061632818, -10.335763731632818, -10.289757331632819, -10.105269721632819, -10.335763731632818, -9.81664162163282, -9.81091892163282, -10.127974061632818, -10.127974061632818, -10.127974061632818, -10.127974061632818, -9.05303082163282, -10.047135631632818, -10.047135631632818, -10.047135631632818, -10.047135631632818, -10.047135631632818, -10.335763731632818, -9.57787563163282, -9.57787563163282, -10.335763731632818, -10.335763731632818, -9.57787563163282, -9.57787563163282, -10.047135631632818, -10.047135631632818, -10.047135631632818, -10.047135631632818, -10.047135631632818, -10.335763731632818]
								}, {
									"case":	2,
									"scores":	[-8.76067276163282]
								}, {
									"case":	3,
									"scores":	[-8.76067276163282]
								}, {
									"case":	4,
									"scores":	[-8.76067276163282]
								}, {
									"case":	5,
									"scores":	[-8.76067276163282]
								}, {
									"case":	6,
									"scores":	[-8.76067276163282]
								}, {
									"case":	7,
									"scores":	[-8.76067276163282]
								}, {
									"case":	8,
									"scores":	[-8.76067276163282]
								}, {
									"case":	9,
									"scores":	[-8.76067276163282]
								}, {
									"case":	10,
									"scores":	[-8.76067276163282]
								}, {
									"case":	11,
									"scores":	[-8.76067276163282]
								}, {
									"case":	12,
									"scores":	[-8.76067276163282]
								}, {
									"case":	13,
									"scores":	[-8.76067276163282]
								}, {
									"case":	14,
									"scores":	[-8.76067276163282]
								}, {
									"case":	15,
									"scores":	[-8.76067276163282]
								}, {
									"case":	16,
									"scores":	[-8.76067276163282]
								}, {
									"case":	17,
									"scores":	[-8.76067276163282]
								}, {
									"case":	18,
									"scores":	[-8.76067276163282]
								}, {
									"case":	19,
									"scores":	[-8.76067276163282]
								}, {
									"case":	20,
									"scores":	[-8.76067276163282]
								}, {
									"case":	21,
									"scores":	[-8.76067276163282]
								}, {
									"case":	22,
									"scores":	[-8.76067276163282]
								}, {
									"case":	23,
									"scores":	[-8.76067276163282]
								}, {
									"case":	24,
									"scores":	[-8.76067276163282]
								}, {
									"case":	25,
									"scores":	[-8.76067276163282]
								}, {
									"case":	26,
									"scores":	[-8.76067276163282]
								}, {
									"case":	27,
									"scores":	[-8.76067276163282]
								}, {
									"case":	28,
									"scores":	[-8.76067276163282]
								}, {
									"case":	29,
									"scores":	[-8.76067276163282]
								}, {
									"case":	30,
									"scores":	[-8.76067276163282]
								}, {
									"case":	31,
									"scores":	[-8.76067276163282]
								}, {
									"case":	32,
									"scores":	[-8.76067276163282]
								}, {
									"case":	33,
									"scores":	[-8.76067276163282]
								}, {
									"case":	34,
									"scores":	[-8.76067276163282]
								}, {
									"case":	35,
									"scores":	[-8.76067276163282]
								}, {
									"case":	36,
									"scores":	[-8.76067276163282]
								}, {
									"case":	37,
									"scores":	[-8.76067276163282]
								}, {
									"case":	38,
									"scores":	[-8.76067276163282]
								}, {
									"case":	39,
									"scores":	[-8.76067276163282]
								}, {
									"case":	40,
									"scores":	[-8.76067276163282]
								}, {
									"case":	41,
									"scores":	[-8.76067276163282]
								}, {
									"case":	42,
									"scores":	[-8.76067276163282]
								}, {
									"case":	43,
									"scores":	[-8.76067276163282]
								}, {
									"case":	44,
									"scores":	[-8.76067276163282]
								}, {
									"case":	45,
									"scores":	[-8.76067276163282]
								}, {
									"case":	46,
									"scores":	[-8.76067276163282]
								}, {
									"case":	47,
									"scores":	[-8.76067276163282]
								}, {
									"case":	48,
									"scores":	[-8.76067276163282]
								}, {
									"case":	49,
									"scores":	[-8.76067276163282]
								}, {
									"case":	50,
									"scores":	[-8.76067276163282]
								}, {
									"case":	51,
									"scores":	[-8.76067276163282]
								}, {
									"case":	52,
									"scores":	[-8.76067276163282]
								}, {
									"case":	53,
									"scores":	[-8.76067276163282]
								}, {
									"case":	54,
									"scores":	[-8.76067276163282]
								}, {
									"case":	55,
									"scores":	[-8.76067276163282]
								}, {
									"case":	56,
									"scores":	[-8.76067276163282]
								}, {
									"case":	57,
									"scores":	[-8.76067276163282]
								}, {
									"case":	58,
									"scores":	[-8.76067276163282]
								}, {
									"case":	59,
									"scores":	[-8.76067276163282]
								}, {
									"case":	60,
									"scores":	[-8.76067276163282]
								}, {
									"case":	61,
									"scores":	[-8.76067276163282]
								}, {
									"case":	62,
									"scores":	[-8.76067276163282]
								}, {
									"case":	63,
									"scores":	[-8.76067276163282]
								}, {
									"case":	64,
									"scores":	[-8.76067276163282]
								}, {
									"case":	65,
									"scores":	[-8.76067276163282]
								}]
						}]
				}, {
					"line":	186,
					"switches":	[{
							"switch":	25,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [], [], [], [323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [], []],
							"begin_line":	187,
							"begin_column":	1,
							"end_line":	187,
							"end_column":	1,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&other->ar_flags, 0, sizeof (*(&other->ar_flags)))", "memset(&other->array, 0, sizeof (*(&other->array)))", "memset(&other->ce_get_iterator, 0, sizeof (*(&other->ce_get_iterator)))", "memset(&other->debug_info, 0, sizeof (*(&other->debug_info)))", "memset(&other->fptr_count, 0, sizeof (*(&other->fptr_count)))", "memset(&other->fptr_offset_del, 0, sizeof (*(&other->fptr_offset_del)))", "memset(&other->fptr_offset_get, 0, sizeof (*(&other->fptr_offset_get)))", "memset(&other->fptr_offset_has, 0, sizeof (*(&other->fptr_offset_has)))", "memset(&other->fptr_offset_set, 0, sizeof (*(&other->fptr_offset_set)))", "memset(&other->is_self, 0, sizeof (*(&other->is_self)))", "memset(&other->pos, 0, sizeof (*(&other->pos)))", "memset(&other->pos_h, 0, sizeof (*(&other->pos_h)))", "memset(&other->retval, 0, sizeof (*(&other->retval)))", "memset(&other->std, 0, sizeof (*(&other->std)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(other, 0, sizeof (*(other)))", "memset(other->array, 0, sizeof (*(other->array)))", "memset(other->ce_get_iterator, 0, sizeof (*(other->ce_get_iterator)))", "memset(other->debug_info, 0, sizeof (*(other->debug_info)))", "memset(other->fptr_count, 0, sizeof (*(other->fptr_count)))", "memset(other->fptr_offset_del, 0, sizeof (*(other->fptr_offset_del)))", "memset(other->fptr_offset_get, 0, sizeof (*(other->fptr_offset_get)))", "memset(other->fptr_offset_has, 0, sizeof (*(other->fptr_offset_has)))", "memset(other->fptr_offset_set, 0, sizeof (*(other->fptr_offset_set)))", "memset(other->pos, 0, sizeof (*(other->pos)))", "memset(other->retval, 0, sizeof (*(other->retval)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern->array)->is_ref__gc = (-16777217)", "(intern->array)->is_ref__gc = (-50397184)", "(intern->array)->is_ref__gc = (0)", "(intern->array)->is_ref__gc = (1)", "(intern->array)->is_ref__gc = (1048576)", "(intern->array)->is_ref__gc = (131072)", "(intern->array)->is_ref__gc = (16777216)", "(intern->array)->is_ref__gc = (262144)", "(intern->array)->is_ref__gc = (4)", "(intern->array)->is_ref__gc = (5)", "(intern->array)->is_ref__gc = (50397183)", "(intern->array)->is_ref__gc = (524288)", "(intern->array)->is_ref__gc = (6)", "(intern->array)->is_ref__gc = (64)", "(intern->array)->is_ref__gc = (65536)", "(intern->array)->is_ref__gc = (67108864)", "(intern->array)->is_ref__gc = (83886080)", "(intern->array)->refcount__gc = (-16777217)", "(intern->array)->refcount__gc = (-50397184)", "(intern->array)->refcount__gc = (0)", "(intern->array)->refcount__gc = (1)", "(intern->array)->refcount__gc = (1048576)", "(intern->array)->refcount__gc = (131072)", "(intern->array)->refcount__gc = (16777216)", "(intern->array)->refcount__gc = (262144)", "(intern->array)->refcount__gc = (4)", "(intern->array)->refcount__gc = (5)", "(intern->array)->refcount__gc = (50397183)", "(intern->array)->refcount__gc = (524288)", "(intern->array)->refcount__gc = (6)", "(intern->array)->refcount__gc = (64)", "(intern->array)->refcount__gc = (65536)", "(intern->array)->refcount__gc = (67108864)", "(intern->array)->refcount__gc = (83886080)", "_array_init(((intern)->array), 0)", "_array_init(((orig)), 0)", "_array_init(((other)->array), 0)", "_array_init(((tmp)), 0)", "_efree(((intern)->debug_info))", "_efree(((orig)))", "_efree(((other)->debug_info))", "_efree(((tmp)))", "_zval_copy_ctor((&(*(orig))))", "_zval_copy_ctor((&(*(tmp))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((orig)))", "_zval_copy_ctor(((other)->retval))", "_zval_copy_ctor(((tmp)))", "_zval_copy_ctor_func((orig))", "_zval_copy_ctor_func((tmp))", "_zval_dtor(((orig)))", "_zval_dtor(((tmp)))", "_zval_dtor_func((orig))", "_zval_dtor_func((tmp))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(orig)))", "_zval_ptr_dtor((&(other)->array))", "_zval_ptr_dtor((&(other)->retval))", "_zval_ptr_dtor((&(tmp)))", "convert_to_boolean((orig))", "convert_to_boolean((tmp))", "convert_to_long((intern)->retval)", "convert_to_long((other)->retval)", "gc_remove_zval_from_buffer((orig))", "gc_remove_zval_from_buffer((tmp))", "gc_zval_check_possible_root(((orig)))", "gc_zval_check_possible_root(((tmp)))", "gc_zval_possible_root((orig))", "gc_zval_possible_root((tmp))", "i_zval_ptr_dtor((orig))", "i_zval_ptr_dtor((tmp))", "inherited = (-16777217)", "inherited = (-50397184)", "inherited = (0)", "inherited = (1)", "inherited = (1048576)", "inherited = (131072)", "inherited = (16777216)", "inherited = (262144)", "inherited = (4)", "inherited = (5)", "inherited = (50397183)", "inherited = (524288)", "inherited = (6)", "inherited = (64)", "inherited = (65536)", "inherited = (67108864)", "inherited = (83886080)", "inherited = (clone_orig)", "inherited = (inherited)", "intern = (intern)", "intern = (other)", "intern->ar_flags = (-16777217)", "intern->ar_flags = (-50397184)", "intern->ar_flags = (0)", "intern->ar_flags = (1)", "intern->ar_flags = (1048576)", "intern->ar_flags = (131072)", "intern->ar_flags = (16777216)", "intern->ar_flags = (262144)", "intern->ar_flags = (4)", "intern->ar_flags = (5)", "intern->ar_flags = (50397183)", "intern->ar_flags = (524288)", "intern->ar_flags = (6)", "intern->ar_flags = (64)", "intern->ar_flags = (65536)", "intern->ar_flags = (67108864)", "intern->ar_flags = (83886080)", "intern->ar_flags = (clone_orig)", "intern->ar_flags = (inherited)", "intern->array = (intern)->array", "intern->array = (orig)", "intern->array = (other)->array", "intern->array = (tmp)", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (other)->ce_get_iterator", "intern->ce_get_iterator = (parent)", "memset((intern), 0, sizeof(spl_array_object))", "memset((other), 0, sizeof(spl_array_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&(other)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "object_properties_init(&intern->std, (parent))", "parent = (class_type)->parent", "parent = (class_type)", "parent = (parent)->parent", "parent = (parent)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(orig)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(tmp)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(other)->std)", "retval.handle = (-16777217)", "retval.handle = (-50397184)", "retval.handle = (0)", "retval.handle = (1)", "retval.handle = (1048576)", "retval.handle = (131072)", "retval.handle = (16777216)", "retval.handle = (262144)", "retval.handle = (4)", "retval.handle = (5)", "retval.handle = (50397183)", "retval.handle = (524288)", "retval.handle = (6)", "retval.handle = (64)", "retval.handle = (65536)", "retval.handle = (67108864)", "retval.handle = (83886080)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((other), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "spl_array_rewind((intern))", "spl_array_rewind((other))", "spl_array_update_pos((intern))", "spl_array_update_pos((other))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((other))", "spl_register_std_class(&(class_type), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(class_type), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_std_class(&(parent), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(parent), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&(class_type), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&(parent), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (class_type), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (parent), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_aggregate)", "zend_class_implements((class_type), 1, zend_ce_arrayaccess)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements((class_type), 1, zend_ce_serializable)", "zend_class_implements((parent), 1, spl_ce_Countable)", "zend_class_implements((parent), 1, spl_ce_RecursiveIterator)", "zend_class_implements((parent), 1, spl_ce_SeekableIterator)", "zend_class_implements((parent), 1, zend_ce_aggregate)", "zend_class_implements((parent), 1, zend_ce_arrayaccess)", "zend_class_implements((parent), 1, zend_ce_iterator)", "zend_class_implements((parent), 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_ArrayIterator, 1, (parent))", "zend_class_implements(spl_ce_ArrayObject, 1, (class_type))", "zend_class_implements(spl_ce_ArrayObject, 1, (parent))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (parent))", "zend_declare_class_constant_long((class_type), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((class_type), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long((parent), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((parent), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((parent), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(orig)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(tmp)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(orig)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(tmp)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((other)->debug_info)", "zend_hash_copy(((*(intern)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*(other)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(intern)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(other)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(intern)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(other)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(intern)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(other)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(intern)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(other)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(intern)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(other)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(orig), sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(tmp), sizeof(zval *))", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((other)->debug_info)", "zend_hash_find(&(class_type)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(class_type)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(class_type)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(class_type)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(class_type)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(class_type)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(class_type)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(class_type)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(class_type)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(class_type)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_hash_find(&(parent)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(parent)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(parent)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(parent)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(parent)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(parent)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(parent)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(parent)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(parent)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(parent)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(other)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&(other)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_object_std_init(&intern->std, (parent))", "zend_throw_exception((class_type), \"Function expects exactly one argument\", 0)", "zend_throw_exception((class_type), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception((parent), \"Function expects exactly one argument\", 0)", "zend_throw_exception((parent), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex((class_type), 0, \"Empty serialized string cannot be empty\")", "zend_throw_exception_ex((parent), 0, \"Empty serialized string cannot be empty\")", "zval_add_ref(&(orig))", "zval_add_ref(&(tmp))", "zval_addref_p((intern)->array)", "zval_addref_p((orig))", "zval_addref_p((other)->array)", "zval_addref_p((tmp))", "zval_delref_p(((orig)))", "zval_delref_p(((tmp)))", "zval_set_isref_p((orig))", "zval_set_isref_p((tmp))", "zval_set_refcount_p((orig), 1)", "zval_set_refcount_p((tmp), 1)", "zval_unset_isref_p((orig))", "zval_unset_isref_p((tmp))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->array)->is_ref__gc = 0", "(intern->array)->refcount__gc = 1", "_array_init((intern->array), 0)", "class_type->get_iterator = spl_array_get_iterator", "exit(1)", "inherited = 1", "intern = _emalloc((sizeof(spl_array_object)))", "intern->ar_flags = 0", "intern->array = orig", "intern->array = other->array", "intern->ce_get_iterator = other->ce_get_iterator", "intern->ce_get_iterator = spl_ce_ArrayIterator", "intern->debug_info = ((void *)0)", "intern->fptr_count = ((void *)0)", "intern->fptr_offset_del = ((void *)0)", "intern->fptr_offset_get = ((void *)0)", "intern->fptr_offset_has = ((void *)0)", "intern->fptr_offset_set = ((void *)0)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_array_object))", "object_properties_init(&intern->std, class_type)", "parent = parent->parent", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handlers = &spl_handler_ArrayIterator", "retval.handlers = &spl_handler_ArrayObject", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_find(&class_type->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&class_type->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&class_type->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&class_type->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&class_type->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&class_type->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&class_type->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&class_type->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&class_type->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&class_type->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)", "zval_addref_p(other->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.7404700543153]
								}, {
									"case":	2,
									"scores":	[-8.7404700543153]
								}, {
									"case":	3,
									"scores":	[-8.7404700543153]
								}, {
									"case":	4,
									"scores":	[-8.7404700543153]
								}, {
									"case":	5,
									"scores":	[-8.7404700543153]
								}, {
									"case":	6,
									"scores":	[-8.7404700543153]
								}, {
									"case":	7,
									"scores":	[-8.7404700543153]
								}, {
									"case":	8,
									"scores":	[-8.7404700543153]
								}, {
									"case":	9,
									"scores":	[-8.7404700543153]
								}, {
									"case":	10,
									"scores":	[-8.7404700543153]
								}, {
									"case":	11,
									"scores":	[-8.7404700543153]
								}, {
									"case":	12,
									"scores":	[-8.7404700543153]
								}, {
									"case":	13,
									"scores":	[-8.7404700543153]
								}, {
									"case":	14,
									"scores":	[-8.7404700543153]
								}, {
									"case":	15,
									"scores":	[-8.7404700543153]
								}, {
									"case":	16,
									"scores":	[-8.7404700543153]
								}, {
									"case":	17,
									"scores":	[-8.7404700543153]
								}, {
									"case":	18,
									"scores":	[-8.7404700543153]
								}, {
									"case":	19,
									"scores":	[-8.7404700543153]
								}, {
									"case":	20,
									"scores":	[-8.7404700543153]
								}, {
									"case":	21,
									"scores":	[-8.7404700543153]
								}, {
									"case":	22,
									"scores":	[-8.7404700543153]
								}, {
									"case":	23,
									"scores":	[-8.7404700543153]
								}, {
									"case":	24,
									"scores":	[-8.7404700543153]
								}, {
									"case":	25,
									"scores":	[-8.7404700543153]
								}, {
									"case":	26,
									"scores":	[-8.7404700543153]
								}, {
									"case":	27,
									"scores":	[-8.7404700543153]
								}, {
									"case":	28,
									"scores":	[-8.7404700543153]
								}, {
									"case":	29,
									"scores":	[-8.7404700543153]
								}, {
									"case":	30,
									"scores":	[-8.7404700543153]
								}, {
									"case":	31,
									"scores":	[-8.7404700543153]
								}, {
									"case":	32,
									"scores":	[-8.7404700543153]
								}, {
									"case":	33,
									"scores":	[-8.7404700543153]
								}, {
									"case":	34,
									"scores":	[-8.7404700543153]
								}, {
									"case":	35,
									"scores":	[-8.7404700543153]
								}, {
									"case":	36,
									"scores":	[-8.7404700543153]
								}, {
									"case":	37,
									"scores":	[-8.7404700543153]
								}, {
									"case":	38,
									"scores":	[-8.7404700543153]
								}, {
									"case":	39,
									"scores":	[-8.7404700543153]
								}, {
									"case":	40,
									"scores":	[-8.7404700543153]
								}, {
									"case":	41,
									"scores":	[-8.7404700543153]
								}, {
									"case":	42,
									"scores":	[-8.7404700543153]
								}, {
									"case":	43,
									"scores":	[-8.7404700543153]
								}, {
									"case":	44,
									"scores":	[-8.7404700543153]
								}, {
									"case":	45,
									"scores":	[-8.7404700543153]
								}, {
									"case":	46,
									"scores":	[-8.7404700543153]
								}, {
									"case":	47,
									"scores":	[-8.7404700543153]
								}, {
									"case":	48,
									"scores":	[-8.7404700543153]
								}, {
									"case":	49,
									"scores":	[-8.7404700543153]
								}, {
									"case":	50,
									"scores":	[-8.7404700543153]
								}, {
									"case":	51,
									"scores":	[-8.7404700543153]
								}, {
									"case":	52,
									"scores":	[-8.7404700543153]
								}, {
									"case":	53,
									"scores":	[-8.7404700543153]
								}, {
									"case":	54,
									"scores":	[-8.7404700543153]
								}, {
									"case":	55,
									"scores":	[-8.7404700543153]
								}, {
									"case":	56,
									"scores":	[-8.7404700543153]
								}, {
									"case":	57,
									"scores":	[-8.7404700543153]
								}, {
									"case":	58,
									"scores":	[-8.7404700543153]
								}, {
									"case":	59,
									"scores":	[-8.7404700543153]
								}, {
									"case":	60,
									"scores":	[-8.7404700543153]
								}, {
									"case":	61,
									"scores":	[-8.7404700543153]
								}, {
									"case":	62,
									"scores":	[-8.7404700543153]
								}, {
									"case":	63,
									"scores":	[-8.7404700543153]
								}, {
									"case":	64,
									"scores":	[-8.7404700543153]
								}, {
									"case":	65,
									"scores":	[-8.7404700543153]
								}, {
									"case":	66,
									"scores":	[-8.7404700543153]
								}, {
									"case":	67,
									"scores":	[-8.7404700543153]
								}, {
									"case":	68,
									"scores":	[-8.7404700543153]
								}, {
									"case":	69,
									"scores":	[-8.7404700543153]
								}, {
									"case":	70,
									"scores":	[-8.7404700543153]
								}, {
									"case":	71,
									"scores":	[-8.7404700543153]
								}, {
									"case":	72,
									"scores":	[-8.7404700543153]
								}, {
									"case":	73,
									"scores":	[-8.7404700543153]
								}, {
									"case":	74,
									"scores":	[-8.7404700543153]
								}, {
									"case":	75,
									"scores":	[-8.7404700543153]
								}, {
									"case":	76,
									"scores":	[-8.7404700543153]
								}, {
									"case":	77,
									"scores":	[-8.7404700543153]
								}, {
									"case":	78,
									"scores":	[-8.7404700543153]
								}, {
									"case":	79,
									"scores":	[-8.7404700543153]
								}, {
									"case":	80,
									"scores":	[-8.7404700543153]
								}, {
									"case":	81,
									"scores":	[-8.7404700543153]
								}, {
									"case":	82,
									"scores":	[-8.7404700543153]
								}, {
									"case":	83,
									"scores":	[-8.7404700543153]
								}, {
									"case":	84,
									"scores":	[-8.7404700543153]
								}, {
									"case":	85,
									"scores":	[-8.7404700543153]
								}, {
									"case":	86,
									"scores":	[-8.7404700543153]
								}, {
									"case":	87,
									"scores":	[-8.7404700543153]
								}, {
									"case":	88,
									"scores":	[-8.7404700543153]
								}, {
									"case":	89,
									"scores":	[-8.7404700543153]
								}, {
									"case":	90,
									"scores":	[-8.7404700543153]
								}, {
									"case":	91,
									"scores":	[-8.7404700543153]
								}, {
									"case":	92,
									"scores":	[-8.7404700543153]
								}, {
									"case":	93,
									"scores":	[-8.7404700543153]
								}, {
									"case":	94,
									"scores":	[-8.7404700543153]
								}, {
									"case":	95,
									"scores":	[-8.7404700543153]
								}, {
									"case":	96,
									"scores":	[-8.7404700543153]
								}, {
									"case":	97,
									"scores":	[-8.7404700543153]
								}, {
									"case":	98,
									"scores":	[-8.7404700543153]
								}, {
									"case":	99,
									"scores":	[-8.7404700543153]
								}, {
									"case":	100,
									"scores":	[-8.7404700543153]
								}, {
									"case":	101,
									"scores":	[-8.7404700543153]
								}, {
									"case":	102,
									"scores":	[-8.7404700543153]
								}, {
									"case":	103,
									"scores":	[-8.7404700543153]
								}, {
									"case":	104,
									"scores":	[-8.7404700543153]
								}, {
									"case":	105,
									"scores":	[-8.7404700543153]
								}, {
									"case":	106,
									"scores":	[-8.7404700543153]
								}, {
									"case":	107,
									"scores":	[-8.7404700543153]
								}, {
									"case":	108,
									"scores":	[-8.7404700543153]
								}, {
									"case":	109,
									"scores":	[-8.7404700543153]
								}, {
									"case":	110,
									"scores":	[-8.7404700543153]
								}, {
									"case":	111,
									"scores":	[-8.7404700543153]
								}, {
									"case":	112,
									"scores":	[-8.7404700543153]
								}, {
									"case":	113,
									"scores":	[-8.7404700543153]
								}, {
									"case":	114,
									"scores":	[-8.7404700543153]
								}, {
									"case":	115,
									"scores":	[-8.7404700543153]
								}, {
									"case":	116,
									"scores":	[-8.7404700543153]
								}, {
									"case":	117,
									"scores":	[-8.7404700543153]
								}, {
									"case":	118,
									"scores":	[-8.7404700543153]
								}, {
									"case":	119,
									"scores":	[-8.7404700543153]
								}, {
									"case":	120,
									"scores":	[-8.7404700543153]
								}, {
									"case":	121,
									"scores":	[-8.7404700543153]
								}, {
									"case":	122,
									"scores":	[-8.7404700543153]
								}, {
									"case":	123,
									"scores":	[-8.7404700543153]
								}, {
									"case":	124,
									"scores":	[-8.7404700543153]
								}, {
									"case":	125,
									"scores":	[-8.7404700543153]
								}, {
									"case":	126,
									"scores":	[-8.7404700543153]
								}, {
									"case":	127,
									"scores":	[-8.7404700543153]
								}, {
									"case":	128,
									"scores":	[-8.7404700543153]
								}, {
									"case":	129,
									"scores":	[-8.7404700543153]
								}, {
									"case":	130,
									"scores":	[-8.7404700543153]
								}, {
									"case":	131,
									"scores":	[-8.7404700543153]
								}, {
									"case":	132,
									"scores":	[-8.7404700543153]
								}, {
									"case":	133,
									"scores":	[-8.7404700543153]
								}, {
									"case":	134,
									"scores":	[-8.7404700543153]
								}, {
									"case":	135,
									"scores":	[-8.7404700543153]
								}, {
									"case":	136,
									"scores":	[-8.7404700543153]
								}, {
									"case":	137,
									"scores":	[-8.7404700543153]
								}, {
									"case":	138,
									"scores":	[-8.7404700543153]
								}, {
									"case":	139,
									"scores":	[-8.7404700543153]
								}, {
									"case":	140,
									"scores":	[-8.7404700543153]
								}, {
									"case":	141,
									"scores":	[-8.7404700543153]
								}, {
									"case":	142,
									"scores":	[-8.7404700543153]
								}, {
									"case":	143,
									"scores":	[-8.7404700543153]
								}, {
									"case":	144,
									"scores":	[-8.7404700543153]
								}, {
									"case":	145,
									"scores":	[-8.7404700543153]
								}, {
									"case":	146,
									"scores":	[-8.7404700543153]
								}, {
									"case":	147,
									"scores":	[-8.7404700543153]
								}, {
									"case":	148,
									"scores":	[-8.7404700543153]
								}, {
									"case":	149,
									"scores":	[-8.7404700543153]
								}, {
									"case":	150,
									"scores":	[-8.7404700543153]
								}, {
									"case":	151,
									"scores":	[-8.7404700543153]
								}, {
									"case":	152,
									"scores":	[-8.7404700543153]
								}, {
									"case":	153,
									"scores":	[-8.7404700543153]
								}, {
									"case":	154,
									"scores":	[-8.7404700543153]
								}, {
									"case":	155,
									"scores":	[-8.7404700543153]
								}, {
									"case":	156,
									"scores":	[-8.7404700543153]
								}, {
									"case":	157,
									"scores":	[-8.7404700543153]
								}, {
									"case":	158,
									"scores":	[-8.7404700543153]
								}, {
									"case":	159,
									"scores":	[-8.7404700543153]
								}, {
									"case":	160,
									"scores":	[-8.7404700543153]
								}, {
									"case":	161,
									"scores":	[-8.7404700543153]
								}, {
									"case":	162,
									"scores":	[-8.7404700543153]
								}, {
									"case":	163,
									"scores":	[-8.7404700543153]
								}, {
									"case":	164,
									"scores":	[-8.7404700543153]
								}, {
									"case":	165,
									"scores":	[-8.7404700543153]
								}, {
									"case":	166,
									"scores":	[-8.7404700543153]
								}, {
									"case":	167,
									"scores":	[-8.7404700543153]
								}, {
									"case":	168,
									"scores":	[-8.7404700543153]
								}, {
									"case":	169,
									"scores":	[-8.7404700543153]
								}, {
									"case":	170,
									"scores":	[-8.7404700543153]
								}, {
									"case":	171,
									"scores":	[-8.7404700543153]
								}, {
									"case":	172,
									"scores":	[-8.7404700543153]
								}, {
									"case":	173,
									"scores":	[-8.7404700543153]
								}, {
									"case":	174,
									"scores":	[-8.7404700543153]
								}, {
									"case":	175,
									"scores":	[-8.7404700543153]
								}, {
									"case":	176,
									"scores":	[-8.7404700543153]
								}, {
									"case":	177,
									"scores":	[-8.7404700543153]
								}, {
									"case":	178,
									"scores":	[-8.7404700543153]
								}, {
									"case":	179,
									"scores":	[-8.7404700543153]
								}, {
									"case":	180,
									"scores":	[-8.7404700543153]
								}, {
									"case":	181,
									"scores":	[-8.7404700543153]
								}, {
									"case":	182,
									"scores":	[-8.7404700543153]
								}, {
									"case":	183,
									"scores":	[-8.7404700543153]
								}, {
									"case":	184,
									"scores":	[-8.7404700543153]
								}, {
									"case":	185,
									"scores":	[-8.7404700543153]
								}, {
									"case":	186,
									"scores":	[-8.7404700543153]
								}, {
									"case":	187,
									"scores":	[-8.7404700543153]
								}, {
									"case":	188,
									"scores":	[-8.7404700543153]
								}, {
									"case":	189,
									"scores":	[-8.7404700543153]
								}, {
									"case":	190,
									"scores":	[-8.7404700543153]
								}, {
									"case":	191,
									"scores":	[-8.7404700543153]
								}, {
									"case":	192,
									"scores":	[-8.7404700543153]
								}, {
									"case":	193,
									"scores":	[-8.7404700543153]
								}, {
									"case":	194,
									"scores":	[-8.7404700543153]
								}, {
									"case":	195,
									"scores":	[-8.7404700543153]
								}, {
									"case":	196,
									"scores":	[-8.7404700543153]
								}, {
									"case":	197,
									"scores":	[-8.7404700543153]
								}, {
									"case":	198,
									"scores":	[-8.7404700543153]
								}, {
									"case":	199,
									"scores":	[-8.7404700543153]
								}, {
									"case":	200,
									"scores":	[-8.7404700543153]
								}, {
									"case":	201,
									"scores":	[-8.7404700543153]
								}, {
									"case":	202,
									"scores":	[-8.7404700543153]
								}, {
									"case":	203,
									"scores":	[-8.7404700543153]
								}, {
									"case":	204,
									"scores":	[-8.7404700543153]
								}, {
									"case":	205,
									"scores":	[-8.7404700543153]
								}, {
									"case":	206,
									"scores":	[-8.7404700543153]
								}, {
									"case":	207,
									"scores":	[-8.7404700543153]
								}, {
									"case":	208,
									"scores":	[-8.7404700543153]
								}, {
									"case":	209,
									"scores":	[-8.7404700543153]
								}, {
									"case":	210,
									"scores":	[-8.7404700543153]
								}, {
									"case":	211,
									"scores":	[-8.7404700543153]
								}, {
									"case":	212,
									"scores":	[-8.7404700543153]
								}, {
									"case":	213,
									"scores":	[-8.7404700543153]
								}, {
									"case":	214,
									"scores":	[-8.7404700543153]
								}, {
									"case":	215,
									"scores":	[-8.7404700543153]
								}, {
									"case":	216,
									"scores":	[-8.7404700543153]
								}, {
									"case":	217,
									"scores":	[-8.7404700543153]
								}, {
									"case":	218,
									"scores":	[-8.7404700543153]
								}, {
									"case":	219,
									"scores":	[-8.7404700543153]
								}, {
									"case":	220,
									"scores":	[-8.7404700543153]
								}, {
									"case":	221,
									"scores":	[-8.7404700543153]
								}, {
									"case":	222,
									"scores":	[-8.7404700543153]
								}, {
									"case":	223,
									"scores":	[-8.7404700543153]
								}, {
									"case":	224,
									"scores":	[-8.7404700543153]
								}, {
									"case":	225,
									"scores":	[-8.7404700543153]
								}, {
									"case":	226,
									"scores":	[-8.7404700543153]
								}, {
									"case":	227,
									"scores":	[-8.7404700543153]
								}, {
									"case":	228,
									"scores":	[-8.7404700543153]
								}, {
									"case":	229,
									"scores":	[-8.7404700543153]
								}, {
									"case":	230,
									"scores":	[-8.7404700543153]
								}, {
									"case":	231,
									"scores":	[-8.7404700543153]
								}, {
									"case":	232,
									"scores":	[-8.7404700543153]
								}, {
									"case":	233,
									"scores":	[-8.7404700543153]
								}, {
									"case":	234,
									"scores":	[-8.7404700543153]
								}, {
									"case":	235,
									"scores":	[-8.7404700543153]
								}, {
									"case":	236,
									"scores":	[-8.7404700543153]
								}, {
									"case":	237,
									"scores":	[-8.7404700543153]
								}, {
									"case":	238,
									"scores":	[-8.7404700543153]
								}, {
									"case":	239,
									"scores":	[-8.7404700543153]
								}, {
									"case":	240,
									"scores":	[-8.7404700543153]
								}, {
									"case":	241,
									"scores":	[-8.7404700543153]
								}, {
									"case":	242,
									"scores":	[-8.7404700543153]
								}, {
									"case":	243,
									"scores":	[-8.7404700543153]
								}, {
									"case":	244,
									"scores":	[-8.7404700543153]
								}, {
									"case":	245,
									"scores":	[-8.7404700543153]
								}, {
									"case":	246,
									"scores":	[-8.7404700543153]
								}, {
									"case":	247,
									"scores":	[-8.7404700543153]
								}, {
									"case":	248,
									"scores":	[-8.7404700543153]
								}, {
									"case":	249,
									"scores":	[-8.7404700543153]
								}, {
									"case":	250,
									"scores":	[-8.7404700543153]
								}, {
									"case":	251,
									"scores":	[-8.7404700543153]
								}, {
									"case":	252,
									"scores":	[-8.7404700543153]
								}, {
									"case":	253,
									"scores":	[-8.7404700543153]
								}, {
									"case":	254,
									"scores":	[-8.7404700543153]
								}, {
									"case":	255,
									"scores":	[-8.7404700543153]
								}, {
									"case":	256,
									"scores":	[-8.7404700543153]
								}, {
									"case":	257,
									"scores":	[-8.7404700543153]
								}, {
									"case":	258,
									"scores":	[-8.7404700543153]
								}, {
									"case":	259,
									"scores":	[-8.7404700543153]
								}, {
									"case":	260,
									"scores":	[-8.7404700543153]
								}, {
									"case":	261,
									"scores":	[-8.7404700543153]
								}, {
									"case":	262,
									"scores":	[-8.7404700543153]
								}, {
									"case":	263,
									"scores":	[-8.7404700543153]
								}, {
									"case":	264,
									"scores":	[-8.7404700543153]
								}, {
									"case":	265,
									"scores":	[-8.7404700543153]
								}, {
									"case":	266,
									"scores":	[-8.7404700543153]
								}, {
									"case":	267,
									"scores":	[-8.7404700543153]
								}, {
									"case":	268,
									"scores":	[-8.7404700543153]
								}, {
									"case":	269,
									"scores":	[-8.7404700543153]
								}, {
									"case":	270,
									"scores":	[-8.7404700543153]
								}, {
									"case":	271,
									"scores":	[-8.7404700543153]
								}, {
									"case":	272,
									"scores":	[-8.7404700543153]
								}, {
									"case":	273,
									"scores":	[-8.7404700543153]
								}, {
									"case":	274,
									"scores":	[-8.7404700543153]
								}, {
									"case":	275,
									"scores":	[-8.7404700543153]
								}, {
									"case":	276,
									"scores":	[-8.7404700543153]
								}, {
									"case":	277,
									"scores":	[-8.7404700543153]
								}, {
									"case":	278,
									"scores":	[-8.7404700543153]
								}, {
									"case":	279,
									"scores":	[-8.7404700543153]
								}, {
									"case":	280,
									"scores":	[-8.7404700543153]
								}, {
									"case":	281,
									"scores":	[-8.7404700543153]
								}, {
									"case":	282,
									"scores":	[-8.7404700543153]
								}, {
									"case":	283,
									"scores":	[-8.7404700543153]
								}, {
									"case":	284,
									"scores":	[-8.7404700543153]
								}, {
									"case":	285,
									"scores":	[-8.7404700543153]
								}, {
									"case":	286,
									"scores":	[-8.7404700543153]
								}, {
									"case":	287,
									"scores":	[-8.7404700543153]
								}, {
									"case":	288,
									"scores":	[-8.7404700543153]
								}, {
									"case":	289,
									"scores":	[-8.7404700543153]
								}, {
									"case":	290,
									"scores":	[-8.7404700543153]
								}, {
									"case":	291,
									"scores":	[-8.7404700543153]
								}, {
									"case":	292,
									"scores":	[-8.7404700543153]
								}, {
									"case":	293,
									"scores":	[-8.7404700543153]
								}, {
									"case":	294,
									"scores":	[-8.7404700543153]
								}, {
									"case":	295,
									"scores":	[-8.7404700543153]
								}, {
									"case":	296,
									"scores":	[-8.7404700543153]
								}, {
									"case":	297,
									"scores":	[-8.7404700543153]
								}, {
									"case":	298,
									"scores":	[-8.7404700543153]
								}, {
									"case":	299,
									"scores":	[-8.7404700543153]
								}, {
									"case":	300,
									"scores":	[-8.7404700543153]
								}, {
									"case":	301,
									"scores":	[-8.7404700543153]
								}, {
									"case":	302,
									"scores":	[-8.7404700543153]
								}, {
									"case":	303,
									"scores":	[-8.7404700543153]
								}, {
									"case":	304,
									"scores":	[-8.7404700543153]
								}, {
									"case":	305,
									"scores":	[-8.7404700543153]
								}, {
									"case":	306,
									"scores":	[-8.7404700543153]
								}, {
									"case":	307,
									"scores":	[-8.7404700543153]
								}, {
									"case":	308,
									"scores":	[-8.7404700543153]
								}, {
									"case":	309,
									"scores":	[-8.7404700543153]
								}, {
									"case":	310,
									"scores":	[-8.7404700543153]
								}, {
									"case":	311,
									"scores":	[-8.7404700543153]
								}, {
									"case":	312,
									"scores":	[-8.7404700543153]
								}, {
									"case":	313,
									"scores":	[-8.7404700543153]
								}, {
									"case":	314,
									"scores":	[-8.7404700543153]
								}, {
									"case":	315,
									"scores":	[-8.7404700543153]
								}, {
									"case":	316,
									"scores":	[-8.7404700543153]
								}, {
									"case":	317,
									"scores":	[-8.7404700543153]
								}, {
									"case":	318,
									"scores":	[-8.7404700543153]
								}, {
									"case":	319,
									"scores":	[-8.7404700543153]
								}, {
									"case":	320,
									"scores":	[-8.7404700543153]
								}, {
									"case":	321,
									"scores":	[-8.7404700543153]
								}, {
									"case":	322,
									"scores":	[-8.7404700543153]
								}, {
									"case":	323,
									"scores":	[-8.7404700543153]
								}, {
									"case":	324,
									"scores":	[-8.7404700543153]
								}, {
									"case":	325,
									"scores":	[-8.7404700543153]
								}, {
									"case":	326,
									"scores":	[-8.7404700543153]
								}, {
									"case":	327,
									"scores":	[-8.7404700543153]
								}, {
									"case":	328,
									"scores":	[-8.7404700543153]
								}, {
									"case":	329,
									"scores":	[-8.7404700543153]
								}, {
									"case":	330,
									"scores":	[-8.7404700543153]
								}, {
									"case":	331,
									"scores":	[-8.7404700543153]
								}, {
									"case":	332,
									"scores":	[-8.7404700543153]
								}, {
									"case":	333,
									"scores":	[-8.7404700543153]
								}, {
									"case":	334,
									"scores":	[-8.7404700543153]
								}, {
									"case":	335,
									"scores":	[-8.7404700543153]
								}, {
									"case":	336,
									"scores":	[-8.7404700543153]
								}, {
									"case":	337,
									"scores":	[-8.7404700543153]
								}, {
									"case":	338,
									"scores":	[-8.7404700543153]
								}, {
									"case":	339,
									"scores":	[-8.7404700543153]
								}, {
									"case":	340,
									"scores":	[-8.7404700543153]
								}, {
									"case":	341,
									"scores":	[-8.7404700543153]
								}, {
									"case":	342,
									"scores":	[-8.7404700543153]
								}, {
									"case":	343,
									"scores":	[-8.7404700543153]
								}, {
									"case":	344,
									"scores":	[-8.7404700543153]
								}, {
									"case":	345,
									"scores":	[-8.7404700543153]
								}, {
									"case":	346,
									"scores":	[-8.7404700543153]
								}, {
									"case":	347,
									"scores":	[-8.7404700543153]
								}, {
									"case":	348,
									"scores":	[-8.7404700543153]
								}, {
									"case":	349,
									"scores":	[-8.7404700543153]
								}, {
									"case":	350,
									"scores":	[-8.7404700543153]
								}, {
									"case":	351,
									"scores":	[-8.7404700543153]
								}, {
									"case":	352,
									"scores":	[-8.7404700543153]
								}, {
									"case":	353,
									"scores":	[-8.7404700543153]
								}, {
									"case":	354,
									"scores":	[-8.7404700543153]
								}, {
									"case":	355,
									"scores":	[-8.7404700543153]
								}, {
									"case":	356,
									"scores":	[-8.7404700543153]
								}, {
									"case":	357,
									"scores":	[-8.7404700543153]
								}, {
									"case":	358,
									"scores":	[-8.7404700543153]
								}, {
									"case":	359,
									"scores":	[-8.7404700543153]
								}, {
									"case":	360,
									"scores":	[-8.7404700543153]
								}, {
									"case":	361,
									"scores":	[-8.7404700543153]
								}, {
									"case":	362,
									"scores":	[-8.7404700543153]
								}, {
									"case":	363,
									"scores":	[-8.7404700543153]
								}, {
									"case":	364,
									"scores":	[-8.7404700543153]
								}, {
									"case":	365,
									"scores":	[-8.7404700543153]
								}, {
									"case":	366,
									"scores":	[-8.7404700543153]
								}, {
									"case":	367,
									"scores":	[-8.7404700543153]
								}, {
									"case":	368,
									"scores":	[-8.7404700543153]
								}, {
									"case":	369,
									"scores":	[-8.7404700543153]
								}, {
									"case":	370,
									"scores":	[-8.7404700543153]
								}, {
									"case":	371,
									"scores":	[-8.7404700543153]
								}, {
									"case":	372,
									"scores":	[-8.7404700543153]
								}, {
									"case":	373,
									"scores":	[-8.7404700543153]
								}, {
									"case":	374,
									"scores":	[-8.7404700543153]
								}, {
									"case":	375,
									"scores":	[-8.7404700543153]
								}, {
									"case":	376,
									"scores":	[-8.7404700543153]
								}, {
									"case":	377,
									"scores":	[-8.7404700543153]
								}, {
									"case":	378,
									"scores":	[-8.7404700543153]
								}, {
									"case":	379,
									"scores":	[-8.7404700543153]
								}, {
									"case":	380,
									"scores":	[-8.7404700543153]
								}, {
									"case":	381,
									"scores":	[-8.7404700543153]
								}, {
									"case":	382,
									"scores":	[-8.7404700543153]
								}, {
									"case":	383,
									"scores":	[-8.7404700543153]
								}, {
									"case":	384,
									"scores":	[-8.7404700543153]
								}, {
									"case":	385,
									"scores":	[-8.7404700543153]
								}, {
									"case":	386,
									"scores":	[-8.7404700543153]
								}, {
									"case":	387,
									"scores":	[-8.7404700543153]
								}, {
									"case":	388,
									"scores":	[-8.7404700543153]
								}, {
									"case":	389,
									"scores":	[-8.7404700543153]
								}, {
									"case":	390,
									"scores":	[-8.7404700543153]
								}, {
									"case":	391,
									"scores":	[-8.7404700543153]
								}, {
									"case":	392,
									"scores":	[-8.7404700543153]
								}, {
									"case":	393,
									"scores":	[-8.7404700543153]
								}, {
									"case":	394,
									"scores":	[-8.7404700543153]
								}, {
									"case":	395,
									"scores":	[-8.7404700543153]
								}, {
									"case":	396,
									"scores":	[-8.7404700543153]
								}, {
									"case":	397,
									"scores":	[-8.7404700543153]
								}, {
									"case":	398,
									"scores":	[-8.7404700543153]
								}, {
									"case":	399,
									"scores":	[-8.7404700543153]
								}, {
									"case":	400,
									"scores":	[-8.7404700543153]
								}, {
									"case":	401,
									"scores":	[-8.7404700543153]
								}, {
									"case":	402,
									"scores":	[-8.7404700543153]
								}, {
									"case":	403,
									"scores":	[-8.7404700543153]
								}, {
									"case":	404,
									"scores":	[-8.7404700543153]
								}, {
									"case":	405,
									"scores":	[-8.7404700543153]
								}, {
									"case":	406,
									"scores":	[-8.7404700543153]
								}, {
									"case":	407,
									"scores":	[-8.7404700543153]
								}, {
									"case":	408,
									"scores":	[-8.7404700543153]
								}, {
									"case":	409,
									"scores":	[-8.7404700543153]
								}, {
									"case":	410,
									"scores":	[-8.7404700543153]
								}, {
									"case":	411,
									"scores":	[-8.7404700543153]
								}, {
									"case":	412,
									"scores":	[-8.7404700543153]
								}, {
									"case":	413,
									"scores":	[-8.7404700543153]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	187,
							"begin_column":	3,
							"end_line":	187,
							"end_column":	36,
							"patch_codes":	["if (!__is_neg(\"\", \"L187\", 41, &(intern), sizeof (intern), &(other), sizeof (other), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(other->ce_get_iterator), sizeof (other->ce_get_iterator), &(clone_orig), sizeof (clone_orig), &(intern->ar_flags), sizeof (intern->ar_flags), &(other->ar_flags), sizeof (other->ar_flags), &(intern->array), sizeof (intern->array), &(other->array), sizeof (other->array), &(orig), sizeof (orig), &(tmp), sizeof (tmp), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->debug_info), sizeof (intern->debug_info), &(class_type), sizeof (class_type), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(other->retval), sizeof (other->retval), &(other->pos), sizeof (other->pos), &(other->pos_h), sizeof (other->pos_h), &(other->is_self), sizeof (other->is_self), &(other->fptr_offset_get), sizeof (other->fptr_offset_get), &(other->fptr_offset_set), sizeof (other->fptr_offset_set), &(other->fptr_offset_has), sizeof (other->fptr_offset_has), &(other->fptr_offset_del), sizeof (other->fptr_offset_del), &(other->fptr_count), sizeof (other->fptr_count), &(other->debug_info), sizeof (other->debug_info)))\n    intern->ce_get_iterator = other->ce_get_iterator;\n", "{\n}\n", "intern->ce_get_iterator = (&class_type)->ce_get_iterator", "intern->ce_get_iterator = (&clone_orig)->ce_get_iterator", "intern->ce_get_iterator = (&inherited)->ce_get_iterator", "intern->ce_get_iterator = (&intern)->ce_get_iterator", "intern->ce_get_iterator = (&obj)->ce_get_iterator", "intern->ce_get_iterator = (&orig)->ce_get_iterator", "intern->ce_get_iterator = (&other)->ce_get_iterator", "intern->ce_get_iterator = (&parent)->ce_get_iterator", "intern->ce_get_iterator = (&retval)->ce_get_iterator", "intern->ce_get_iterator = (&tmp)->ce_get_iterator", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (other)->ce_get_iterator", "intern->ce_get_iterator = (parent)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-11.4353050127153, -11.4353050127153, -11.6923785453153, -11.3305270343153, -10.8370539143153, -10.9749265153153, -11.0675479243153, -11.5231999122153, -10.0182695933153, -10.5570182203153, -11.3240787243153, -11.6176463543153, -11.6176463543153, -11.8254360243153, -11.5949420143153, -11.8254360243153, -11.3063139143153, -11.3005912143153, -11.6176463543153, -11.6176463543153, -11.6176463543153, -11.6176463543153, -10.5427031143153, -11.5368079243153, -11.5368079243153, -11.5368079243153, -11.5368079243153, -11.5368079243153, -11.8254360243153, -11.0675479243153, -11.0675479243153, -11.8254360243153, -11.8254360243153, -11.0675479243153, -11.0675479243153, -11.5368079243153, -11.5368079243153, -11.5368079243153, -11.5368079243153, -11.5368079243153, -11.8254360243153]
								}, {
									"case":	2,
									"scores":	[-8.7404700543153]
								}, {
									"case":	3,
									"scores":	[-8.7404700543153]
								}, {
									"case":	4,
									"scores":	[-8.7404700543153]
								}, {
									"case":	5,
									"scores":	[-8.7404700543153]
								}, {
									"case":	6,
									"scores":	[-8.7404700543153]
								}, {
									"case":	7,
									"scores":	[-8.7404700543153]
								}, {
									"case":	8,
									"scores":	[-8.7404700543153]
								}, {
									"case":	9,
									"scores":	[-8.7404700543153]
								}, {
									"case":	10,
									"scores":	[-8.7404700543153]
								}, {
									"case":	11,
									"scores":	[-8.7404700543153]
								}, {
									"case":	12,
									"scores":	[-8.7404700543153]
								}, {
									"case":	13,
									"scores":	[-8.7404700543153]
								}, {
									"case":	14,
									"scores":	[-8.7404700543153]
								}, {
									"case":	15,
									"scores":	[-8.7404700543153]
								}, {
									"case":	16,
									"scores":	[-8.7404700543153]
								}]
						}]
				}, {
					"line":	198,
					"switches":	[{
							"switch":	29,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321], [], [], [], [], [], []],
							"begin_line":	199,
							"begin_column":	2,
							"end_line":	199,
							"end_column":	2,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&other->ar_flags, 0, sizeof (*(&other->ar_flags)))", "memset(&other->array, 0, sizeof (*(&other->array)))", "memset(&other->ce_get_iterator, 0, sizeof (*(&other->ce_get_iterator)))", "memset(&other->debug_info, 0, sizeof (*(&other->debug_info)))", "memset(&other->fptr_count, 0, sizeof (*(&other->fptr_count)))", "memset(&other->fptr_offset_del, 0, sizeof (*(&other->fptr_offset_del)))", "memset(&other->fptr_offset_get, 0, sizeof (*(&other->fptr_offset_get)))", "memset(&other->fptr_offset_has, 0, sizeof (*(&other->fptr_offset_has)))", "memset(&other->fptr_offset_set, 0, sizeof (*(&other->fptr_offset_set)))", "memset(&other->is_self, 0, sizeof (*(&other->is_self)))", "memset(&other->pos, 0, sizeof (*(&other->pos)))", "memset(&other->pos_h, 0, sizeof (*(&other->pos_h)))", "memset(&other->retval, 0, sizeof (*(&other->retval)))", "memset(&other->std, 0, sizeof (*(&other->std)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(other->array, 0, sizeof (*(other->array)))", "memset(other->ce_get_iterator, 0, sizeof (*(other->ce_get_iterator)))", "memset(other->debug_info, 0, sizeof (*(other->debug_info)))", "memset(other->fptr_count, 0, sizeof (*(other->fptr_count)))", "memset(other->fptr_offset_del, 0, sizeof (*(other->fptr_offset_del)))", "memset(other->fptr_offset_get, 0, sizeof (*(other->fptr_offset_get)))", "memset(other->fptr_offset_has, 0, sizeof (*(other->fptr_offset_has)))", "memset(other->fptr_offset_set, 0, sizeof (*(other->fptr_offset_set)))", "memset(other->pos, 0, sizeof (*(other->pos)))", "memset(other->retval, 0, sizeof (*(other->retval)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern->array)->is_ref__gc = (-16777217)", "(intern->array)->is_ref__gc = (-50397184)", "(intern->array)->is_ref__gc = (0)", "(intern->array)->is_ref__gc = (1)", "(intern->array)->is_ref__gc = (1048576)", "(intern->array)->is_ref__gc = (131072)", "(intern->array)->is_ref__gc = (16777216)", "(intern->array)->is_ref__gc = (262144)", "(intern->array)->is_ref__gc = (4)", "(intern->array)->is_ref__gc = (5)", "(intern->array)->is_ref__gc = (50397183)", "(intern->array)->is_ref__gc = (524288)", "(intern->array)->is_ref__gc = (6)", "(intern->array)->is_ref__gc = (64)", "(intern->array)->is_ref__gc = (65536)", "(intern->array)->is_ref__gc = (67108864)", "(intern->array)->is_ref__gc = (83886080)", "(intern->array)->refcount__gc = (-16777217)", "(intern->array)->refcount__gc = (-50397184)", "(intern->array)->refcount__gc = (0)", "(intern->array)->refcount__gc = (1)", "(intern->array)->refcount__gc = (1048576)", "(intern->array)->refcount__gc = (131072)", "(intern->array)->refcount__gc = (16777216)", "(intern->array)->refcount__gc = (262144)", "(intern->array)->refcount__gc = (4)", "(intern->array)->refcount__gc = (5)", "(intern->array)->refcount__gc = (50397183)", "(intern->array)->refcount__gc = (524288)", "(intern->array)->refcount__gc = (6)", "(intern->array)->refcount__gc = (64)", "(intern->array)->refcount__gc = (65536)", "(intern->array)->refcount__gc = (67108864)", "(intern->array)->refcount__gc = (83886080)", "_array_init(((intern)->array), 0)", "_array_init(((orig)), 0)", "_array_init(((other)->array), 0)", "_array_init(((tmp)), 0)", "_efree(((intern)->debug_info))", "_efree(((orig)))", "_efree(((other)->debug_info))", "_efree(((tmp)))", "_zval_copy_ctor((&(*(orig))))", "_zval_copy_ctor((&(*(tmp))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((orig)))", "_zval_copy_ctor(((other)->retval))", "_zval_copy_ctor(((tmp)))", "_zval_copy_ctor_func((orig))", "_zval_copy_ctor_func((tmp))", "_zval_dtor(((orig)))", "_zval_dtor(((tmp)))", "_zval_dtor_func((orig))", "_zval_dtor_func((tmp))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(orig)))", "_zval_ptr_dtor((&(other)->array))", "_zval_ptr_dtor((&(other)->retval))", "_zval_ptr_dtor((&(tmp)))", "convert_to_boolean((orig))", "convert_to_boolean((tmp))", "convert_to_long((intern)->retval)", "convert_to_long((other)->retval)", "gc_remove_zval_from_buffer((orig))", "gc_remove_zval_from_buffer((tmp))", "gc_zval_check_possible_root(((orig)))", "gc_zval_check_possible_root(((tmp)))", "gc_zval_possible_root((orig))", "gc_zval_possible_root((tmp))", "i_zval_ptr_dtor((orig))", "i_zval_ptr_dtor((tmp))", "inherited = (-16777217)", "inherited = (-50397184)", "inherited = (0)", "inherited = (1)", "inherited = (1048576)", "inherited = (131072)", "inherited = (16777216)", "inherited = (262144)", "inherited = (4)", "inherited = (5)", "inherited = (50397183)", "inherited = (524288)", "inherited = (6)", "inherited = (64)", "inherited = (65536)", "inherited = (67108864)", "inherited = (83886080)", "inherited = (clone_orig)", "inherited = (inherited)", "intern = (intern)", "intern = (other)", "intern->ar_flags = (-16777217)", "intern->ar_flags = (-50397184)", "intern->ar_flags = (0)", "intern->ar_flags = (1)", "intern->ar_flags = (1048576)", "intern->ar_flags = (131072)", "intern->ar_flags = (16777216)", "intern->ar_flags = (262144)", "intern->ar_flags = (4)", "intern->ar_flags = (5)", "intern->ar_flags = (50397183)", "intern->ar_flags = (524288)", "intern->ar_flags = (6)", "intern->ar_flags = (64)", "intern->ar_flags = (65536)", "intern->ar_flags = (67108864)", "intern->ar_flags = (83886080)", "intern->ar_flags = (clone_orig)", "intern->ar_flags = (inherited)", "intern->array = (intern)->array", "intern->array = (orig)", "intern->array = (other)->array", "intern->array = (tmp)", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (other)->ce_get_iterator", "intern->ce_get_iterator = (parent)", "memset((intern), 0, sizeof(spl_array_object))", "memset((other), 0, sizeof(spl_array_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&(other)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "object_properties_init(&intern->std, (parent))", "parent = (class_type)->parent", "parent = (class_type)", "parent = (parent)->parent", "parent = (parent)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(orig)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(tmp)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(other)->std)", "retval.handle = (-16777217)", "retval.handle = (-50397184)", "retval.handle = (0)", "retval.handle = (1)", "retval.handle = (1048576)", "retval.handle = (131072)", "retval.handle = (16777216)", "retval.handle = (262144)", "retval.handle = (4)", "retval.handle = (5)", "retval.handle = (50397183)", "retval.handle = (524288)", "retval.handle = (6)", "retval.handle = (64)", "retval.handle = (65536)", "retval.handle = (67108864)", "retval.handle = (83886080)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((other), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "spl_array_rewind((intern))", "spl_array_rewind((other))", "spl_array_update_pos((intern))", "spl_array_update_pos((other))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((other))", "spl_register_std_class(&(class_type), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(class_type), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_std_class(&(parent), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(parent), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&(class_type), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&(parent), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (class_type), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (parent), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_aggregate)", "zend_class_implements((class_type), 1, zend_ce_arrayaccess)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements((class_type), 1, zend_ce_serializable)", "zend_class_implements((parent), 1, spl_ce_Countable)", "zend_class_implements((parent), 1, spl_ce_RecursiveIterator)", "zend_class_implements((parent), 1, spl_ce_SeekableIterator)", "zend_class_implements((parent), 1, zend_ce_aggregate)", "zend_class_implements((parent), 1, zend_ce_arrayaccess)", "zend_class_implements((parent), 1, zend_ce_iterator)", "zend_class_implements((parent), 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_ArrayIterator, 1, (parent))", "zend_class_implements(spl_ce_ArrayObject, 1, (class_type))", "zend_class_implements(spl_ce_ArrayObject, 1, (parent))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (parent))", "zend_declare_class_constant_long((class_type), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((class_type), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long((parent), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((parent), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((parent), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(orig)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(tmp)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(orig)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(tmp)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((other)->debug_info)", "zend_hash_copy(((*(intern)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*(other)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(intern)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(other)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(intern)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(other)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(intern)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(other)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(intern)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(other)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(intern)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(other)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(orig), sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(tmp), sizeof(zval *))", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((other)->debug_info)", "zend_hash_find(&(class_type)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(class_type)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(class_type)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(class_type)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(class_type)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(class_type)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(class_type)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(class_type)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(class_type)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(class_type)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_hash_find(&(parent)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(parent)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(parent)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(parent)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(parent)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(parent)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(parent)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(parent)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(parent)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(parent)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(other)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&(other)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_object_std_init(&intern->std, (parent))", "zend_throw_exception((class_type), \"Function expects exactly one argument\", 0)", "zend_throw_exception((class_type), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception((parent), \"Function expects exactly one argument\", 0)", "zend_throw_exception((parent), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex((class_type), 0, \"Empty serialized string cannot be empty\")", "zend_throw_exception_ex((parent), 0, \"Empty serialized string cannot be empty\")", "zval_add_ref(&(orig))", "zval_add_ref(&(tmp))", "zval_addref_p((intern)->array)", "zval_addref_p((orig))", "zval_addref_p((other)->array)", "zval_addref_p((tmp))", "zval_delref_p(((orig)))", "zval_delref_p(((tmp)))", "zval_set_isref_p((orig))", "zval_set_isref_p((tmp))", "zval_set_refcount_p((orig), 1)", "zval_set_refcount_p((tmp), 1)", "zval_unset_isref_p((orig))", "zval_unset_isref_p((tmp))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->array)->is_ref__gc = 0", "(intern->array)->refcount__gc = 1", "_array_init((intern->array), 0)", "class_type->get_iterator = spl_array_get_iterator", "exit(1)", "inherited = 1", "intern = _emalloc((sizeof(spl_array_object)))", "intern->ar_flags = 0", "intern->array = orig", "intern->array = other->array", "intern->ce_get_iterator = other->ce_get_iterator", "intern->ce_get_iterator = spl_ce_ArrayIterator", "intern->debug_info = ((void *)0)", "intern->fptr_count = ((void *)0)", "intern->fptr_offset_del = ((void *)0)", "intern->fptr_offset_get = ((void *)0)", "intern->fptr_offset_has = ((void *)0)", "intern->fptr_offset_set = ((void *)0)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_array_object))", "object_properties_init(&intern->std, class_type)", "parent = parent->parent", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handlers = &spl_handler_ArrayIterator", "retval.handlers = &spl_handler_ArrayObject", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_find(&class_type->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&class_type->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&class_type->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&class_type->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&class_type->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&class_type->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&class_type->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&class_type->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&class_type->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&class_type->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)", "zval_addref_p(other->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	2,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	3,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	4,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	5,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	6,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	7,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	8,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	9,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	10,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	11,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	12,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	13,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	14,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	15,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	16,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	17,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	18,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	19,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	20,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	21,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	22,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	23,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	24,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	25,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	26,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	27,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	28,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	29,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	30,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	31,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	32,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	33,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	34,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	35,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	36,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	37,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	38,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	39,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	40,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	41,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	42,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	43,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	44,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	45,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	46,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	47,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	48,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	49,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	50,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	51,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	52,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	53,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	54,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	55,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	56,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	57,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	58,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	59,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	60,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	61,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	62,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	63,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	64,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	65,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	66,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	67,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	68,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	69,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	70,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	71,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	72,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	73,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	74,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	75,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	76,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	77,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	78,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	79,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	80,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	81,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	82,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	83,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	84,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	85,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	86,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	87,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	88,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	89,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	90,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	91,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	92,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	93,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	94,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	95,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	96,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	97,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	98,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	99,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	100,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	101,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	102,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	103,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	104,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	105,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	106,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	107,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	108,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	109,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	110,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	111,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	112,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	113,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	114,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	115,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	116,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	117,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	118,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	119,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	120,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	121,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	122,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	123,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	124,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	125,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	126,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	127,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	128,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	129,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	130,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	131,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	132,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	133,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	134,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	135,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	136,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	137,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	138,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	139,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	140,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	141,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	142,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	143,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	144,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	145,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	146,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	147,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	148,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	149,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	150,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	151,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	152,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	153,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	154,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	155,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	156,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	157,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	158,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	159,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	160,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	161,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	162,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	163,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	164,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	165,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	166,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	167,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	168,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	169,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	170,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	171,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	172,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	173,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	174,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	175,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	176,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	177,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	178,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	179,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	180,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	181,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	182,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	183,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	184,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	185,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	186,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	187,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	188,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	189,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	190,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	191,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	192,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	193,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	194,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	195,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	196,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	197,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	198,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	199,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	200,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	201,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	202,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	203,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	204,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	205,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	206,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	207,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	208,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	209,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	210,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	211,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	212,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	213,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	214,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	215,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	216,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	217,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	218,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	219,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	220,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	221,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	222,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	223,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	224,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	225,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	226,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	227,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	228,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	229,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	230,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	231,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	232,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	233,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	234,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	235,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	236,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	237,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	238,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	239,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	240,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	241,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	242,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	243,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	244,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	245,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	246,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	247,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	248,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	249,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	250,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	251,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	252,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	253,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	254,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	255,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	256,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	257,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	258,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	259,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	260,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	261,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	262,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	263,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	264,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	265,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	266,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	267,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	268,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	269,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	270,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	271,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	272,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	273,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	274,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	275,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	276,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	277,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	278,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	279,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	280,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	281,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	282,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	283,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	284,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	285,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	286,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	287,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	288,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	289,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	290,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	291,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	292,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	293,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	294,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	295,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	296,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	297,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	298,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	299,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	300,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	301,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	302,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	303,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	304,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	305,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	306,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	307,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	308,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	309,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	310,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	311,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	312,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	313,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	314,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	315,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	316,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	317,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	318,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	319,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	320,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	321,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	322,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	323,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	324,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	325,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	326,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	327,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	328,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	329,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	330,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	331,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	332,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	333,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	334,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	335,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	336,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	337,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	338,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	339,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	340,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	341,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	342,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	343,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	344,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	345,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	346,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	347,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	348,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	349,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	350,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	351,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	352,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	353,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	354,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	355,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	356,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	357,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	358,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	359,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	360,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	361,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	362,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	363,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	364,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	365,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	366,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	367,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	368,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	369,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	370,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	371,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	372,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	373,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	374,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	375,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	376,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	377,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	378,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	379,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	380,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	381,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	382,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	383,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	384,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	385,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	386,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	387,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	388,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	389,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	390,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	391,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	392,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	393,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	394,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	395,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	396,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	397,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	398,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	399,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	400,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	401,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	402,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	403,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	404,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	405,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	406,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	407,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	408,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	409,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	410,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	411,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	412,
									"scores":	[-8.0737807128371557]
								}]
						}, {
							"switch":	30,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	199,
							"begin_column":	4,
							"end_line":	199,
							"end_column":	20,
							"patch_codes":	["if (!__is_neg(\"\", \"L199\", 28, &(orig), sizeof (orig), &(intern), sizeof (intern), &(intern->array), sizeof (intern->array), &(intern->ar_flags), sizeof (intern->ar_flags), &(other), sizeof (other), &(tmp), sizeof (tmp), &(clone_orig), sizeof (clone_orig), &(parent), sizeof (parent), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(class_type), sizeof (class_type), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(intern->debug_info), sizeof (intern->debug_info), &(inherited), sizeof (inherited), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self)))\n    intern->array = orig;\n", "{\n}\n", "intern->array = (&class_type)", "intern->array = (&clone_orig)", "intern->array = (&inherited)", "intern->array = (&intern)", "intern->array = (&obj)", "intern->array = (&orig)", "intern->array = (&other)", "intern->array = (&parent)", "intern->array = (&retval)", "intern->array = (&tmp)", "intern->array = (orig)", "intern->array = (tmp)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5310722928371554, -8.743331240737156, -8.4431580228371566, -8.5008754728371549, -9.0454281828371563, -8.731630482837156, -8.2680931828371556, -8.731630482837156, -9.0486856228371551, -9.0486856228371551, -9.0486856228371551, -9.0486856228371551, -9.2564752928371554, -9.0259812828371562, -9.0486856228371551, -9.0486856228371551, -9.2564752928371554, -7.9737423828371554, -9.2564752928371554, -8.7373531828371558, -8.967847192837155, -8.967847192837155, -8.967847192837155, -8.967847192837155, -8.967847192837155, -9.2564752928371554, -8.4985871928371566, -8.4985871928371566]
								}, {
									"case":	2,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	3,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	4,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	5,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	6,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	7,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	8,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	9,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	10,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	11,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	12,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	13,
									"scores":	[-8.0737807128371557]
								}, {
									"case":	14,
									"scores":	[-8.0737807128371557]
								}]
						}]
				}, {
					"line":	199,
					"switches":	[{
							"switch":	31,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321], [], [], [], [], [], []],
							"begin_line":	200,
							"begin_column":	2,
							"end_line":	200,
							"end_column":	2,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&other->ar_flags, 0, sizeof (*(&other->ar_flags)))", "memset(&other->array, 0, sizeof (*(&other->array)))", "memset(&other->ce_get_iterator, 0, sizeof (*(&other->ce_get_iterator)))", "memset(&other->debug_info, 0, sizeof (*(&other->debug_info)))", "memset(&other->fptr_count, 0, sizeof (*(&other->fptr_count)))", "memset(&other->fptr_offset_del, 0, sizeof (*(&other->fptr_offset_del)))", "memset(&other->fptr_offset_get, 0, sizeof (*(&other->fptr_offset_get)))", "memset(&other->fptr_offset_has, 0, sizeof (*(&other->fptr_offset_has)))", "memset(&other->fptr_offset_set, 0, sizeof (*(&other->fptr_offset_set)))", "memset(&other->is_self, 0, sizeof (*(&other->is_self)))", "memset(&other->pos, 0, sizeof (*(&other->pos)))", "memset(&other->pos_h, 0, sizeof (*(&other->pos_h)))", "memset(&other->retval, 0, sizeof (*(&other->retval)))", "memset(&other->std, 0, sizeof (*(&other->std)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(other->array, 0, sizeof (*(other->array)))", "memset(other->ce_get_iterator, 0, sizeof (*(other->ce_get_iterator)))", "memset(other->debug_info, 0, sizeof (*(other->debug_info)))", "memset(other->fptr_count, 0, sizeof (*(other->fptr_count)))", "memset(other->fptr_offset_del, 0, sizeof (*(other->fptr_offset_del)))", "memset(other->fptr_offset_get, 0, sizeof (*(other->fptr_offset_get)))", "memset(other->fptr_offset_has, 0, sizeof (*(other->fptr_offset_has)))", "memset(other->fptr_offset_set, 0, sizeof (*(other->fptr_offset_set)))", "memset(other->pos, 0, sizeof (*(other->pos)))", "memset(other->retval, 0, sizeof (*(other->retval)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern->array)->is_ref__gc = (-16777217)", "(intern->array)->is_ref__gc = (-50397184)", "(intern->array)->is_ref__gc = (0)", "(intern->array)->is_ref__gc = (1)", "(intern->array)->is_ref__gc = (1048576)", "(intern->array)->is_ref__gc = (131072)", "(intern->array)->is_ref__gc = (16777216)", "(intern->array)->is_ref__gc = (262144)", "(intern->array)->is_ref__gc = (4)", "(intern->array)->is_ref__gc = (5)", "(intern->array)->is_ref__gc = (50397183)", "(intern->array)->is_ref__gc = (524288)", "(intern->array)->is_ref__gc = (6)", "(intern->array)->is_ref__gc = (64)", "(intern->array)->is_ref__gc = (65536)", "(intern->array)->is_ref__gc = (67108864)", "(intern->array)->is_ref__gc = (83886080)", "(intern->array)->refcount__gc = (-16777217)", "(intern->array)->refcount__gc = (-50397184)", "(intern->array)->refcount__gc = (0)", "(intern->array)->refcount__gc = (1)", "(intern->array)->refcount__gc = (1048576)", "(intern->array)->refcount__gc = (131072)", "(intern->array)->refcount__gc = (16777216)", "(intern->array)->refcount__gc = (262144)", "(intern->array)->refcount__gc = (4)", "(intern->array)->refcount__gc = (5)", "(intern->array)->refcount__gc = (50397183)", "(intern->array)->refcount__gc = (524288)", "(intern->array)->refcount__gc = (6)", "(intern->array)->refcount__gc = (64)", "(intern->array)->refcount__gc = (65536)", "(intern->array)->refcount__gc = (67108864)", "(intern->array)->refcount__gc = (83886080)", "_array_init(((intern)->array), 0)", "_array_init(((orig)), 0)", "_array_init(((other)->array), 0)", "_array_init(((tmp)), 0)", "_efree(((intern)->debug_info))", "_efree(((orig)))", "_efree(((other)->debug_info))", "_efree(((tmp)))", "_zval_copy_ctor((&(*(orig))))", "_zval_copy_ctor((&(*(tmp))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((orig)))", "_zval_copy_ctor(((other)->retval))", "_zval_copy_ctor(((tmp)))", "_zval_copy_ctor_func((orig))", "_zval_copy_ctor_func((tmp))", "_zval_dtor(((orig)))", "_zval_dtor(((tmp)))", "_zval_dtor_func((orig))", "_zval_dtor_func((tmp))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(orig)))", "_zval_ptr_dtor((&(other)->array))", "_zval_ptr_dtor((&(other)->retval))", "_zval_ptr_dtor((&(tmp)))", "convert_to_boolean((orig))", "convert_to_boolean((tmp))", "convert_to_long((intern)->retval)", "convert_to_long((other)->retval)", "gc_remove_zval_from_buffer((orig))", "gc_remove_zval_from_buffer((tmp))", "gc_zval_check_possible_root(((orig)))", "gc_zval_check_possible_root(((tmp)))", "gc_zval_possible_root((orig))", "gc_zval_possible_root((tmp))", "i_zval_ptr_dtor((orig))", "i_zval_ptr_dtor((tmp))", "inherited = (-16777217)", "inherited = (-50397184)", "inherited = (0)", "inherited = (1)", "inherited = (1048576)", "inherited = (131072)", "inherited = (16777216)", "inherited = (262144)", "inherited = (4)", "inherited = (5)", "inherited = (50397183)", "inherited = (524288)", "inherited = (6)", "inherited = (64)", "inherited = (65536)", "inherited = (67108864)", "inherited = (83886080)", "inherited = (clone_orig)", "inherited = (inherited)", "intern = (intern)", "intern = (other)", "intern->ar_flags = (-16777217)", "intern->ar_flags = (-50397184)", "intern->ar_flags = (0)", "intern->ar_flags = (1)", "intern->ar_flags = (1048576)", "intern->ar_flags = (131072)", "intern->ar_flags = (16777216)", "intern->ar_flags = (262144)", "intern->ar_flags = (4)", "intern->ar_flags = (5)", "intern->ar_flags = (50397183)", "intern->ar_flags = (524288)", "intern->ar_flags = (6)", "intern->ar_flags = (64)", "intern->ar_flags = (65536)", "intern->ar_flags = (67108864)", "intern->ar_flags = (83886080)", "intern->ar_flags = (clone_orig)", "intern->ar_flags = (inherited)", "intern->array = (intern)->array", "intern->array = (orig)", "intern->array = (other)->array", "intern->array = (tmp)", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (other)->ce_get_iterator", "intern->ce_get_iterator = (parent)", "memset((intern), 0, sizeof(spl_array_object))", "memset((other), 0, sizeof(spl_array_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&(other)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "object_properties_init(&intern->std, (parent))", "parent = (class_type)->parent", "parent = (class_type)", "parent = (parent)->parent", "parent = (parent)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(orig)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(tmp)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(other)->std)", "retval.handle = (-16777217)", "retval.handle = (-50397184)", "retval.handle = (0)", "retval.handle = (1)", "retval.handle = (1048576)", "retval.handle = (131072)", "retval.handle = (16777216)", "retval.handle = (262144)", "retval.handle = (4)", "retval.handle = (5)", "retval.handle = (50397183)", "retval.handle = (524288)", "retval.handle = (6)", "retval.handle = (64)", "retval.handle = (65536)", "retval.handle = (67108864)", "retval.handle = (83886080)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((other), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "spl_array_rewind((intern))", "spl_array_rewind((other))", "spl_array_update_pos((intern))", "spl_array_update_pos((other))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((other))", "spl_register_std_class(&(class_type), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(class_type), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_std_class(&(parent), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(parent), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&(class_type), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&(parent), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (class_type), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (parent), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_aggregate)", "zend_class_implements((class_type), 1, zend_ce_arrayaccess)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements((class_type), 1, zend_ce_serializable)", "zend_class_implements((parent), 1, spl_ce_Countable)", "zend_class_implements((parent), 1, spl_ce_RecursiveIterator)", "zend_class_implements((parent), 1, spl_ce_SeekableIterator)", "zend_class_implements((parent), 1, zend_ce_aggregate)", "zend_class_implements((parent), 1, zend_ce_arrayaccess)", "zend_class_implements((parent), 1, zend_ce_iterator)", "zend_class_implements((parent), 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_ArrayIterator, 1, (parent))", "zend_class_implements(spl_ce_ArrayObject, 1, (class_type))", "zend_class_implements(spl_ce_ArrayObject, 1, (parent))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (parent))", "zend_declare_class_constant_long((class_type), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((class_type), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long((parent), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((parent), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((parent), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(orig)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(tmp)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(orig)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(tmp)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((other)->debug_info)", "zend_hash_copy(((*(intern)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*(other)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(intern)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(other)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(intern)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(other)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(intern)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(other)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(intern)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(other)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(intern)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(other)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(orig), sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(tmp), sizeof(zval *))", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((other)->debug_info)", "zend_hash_find(&(class_type)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(class_type)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(class_type)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(class_type)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(class_type)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(class_type)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(class_type)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(class_type)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(class_type)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(class_type)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_hash_find(&(parent)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(parent)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(parent)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(parent)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(parent)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(parent)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(parent)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(parent)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(parent)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(parent)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(other)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&(other)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_object_std_init(&intern->std, (parent))", "zend_throw_exception((class_type), \"Function expects exactly one argument\", 0)", "zend_throw_exception((class_type), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception((parent), \"Function expects exactly one argument\", 0)", "zend_throw_exception((parent), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex((class_type), 0, \"Empty serialized string cannot be empty\")", "zend_throw_exception_ex((parent), 0, \"Empty serialized string cannot be empty\")", "zval_add_ref(&(orig))", "zval_add_ref(&(tmp))", "zval_addref_p((intern)->array)", "zval_addref_p((orig))", "zval_addref_p((other)->array)", "zval_addref_p((tmp))", "zval_delref_p(((orig)))", "zval_delref_p(((tmp)))", "zval_set_isref_p((orig))", "zval_set_isref_p((tmp))", "zval_set_refcount_p((orig), 1)", "zval_set_refcount_p((tmp), 1)", "zval_unset_isref_p((orig))", "zval_unset_isref_p((tmp))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->array)->is_ref__gc = 0", "(intern->array)->refcount__gc = 1", "_array_init((intern->array), 0)", "class_type->get_iterator = spl_array_get_iterator", "exit(1)", "inherited = 1", "intern = _emalloc((sizeof(spl_array_object)))", "intern->ar_flags = 0", "intern->array = orig", "intern->array = other->array", "intern->ce_get_iterator = other->ce_get_iterator", "intern->ce_get_iterator = spl_ce_ArrayIterator", "intern->debug_info = ((void *)0)", "intern->fptr_count = ((void *)0)", "intern->fptr_offset_del = ((void *)0)", "intern->fptr_offset_get = ((void *)0)", "intern->fptr_offset_has = ((void *)0)", "intern->fptr_offset_set = ((void *)0)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_array_object))", "object_properties_init(&intern->std, class_type)", "parent = parent->parent", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handlers = &spl_handler_ArrayIterator", "retval.handlers = &spl_handler_ArrayObject", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_find(&class_type->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&class_type->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&class_type->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&class_type->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&class_type->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&class_type->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&class_type->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&class_type->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&class_type->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&class_type->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)", "zval_addref_p(other->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	2,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	3,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	4,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	5,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	6,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	7,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	8,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	9,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	10,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	11,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	12,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	13,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	14,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	15,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	16,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	17,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	18,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	19,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	20,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	21,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	22,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	23,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	24,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	25,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	26,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	27,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	28,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	29,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	30,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	31,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	32,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	33,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	34,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	35,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	36,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	37,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	38,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	39,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	40,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	41,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	42,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	43,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	44,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	45,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	46,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	47,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	48,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	49,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	50,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	51,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	52,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	53,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	54,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	55,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	56,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	57,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	58,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	59,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	60,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	61,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	62,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	63,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	64,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	65,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	66,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	67,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	68,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	69,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	70,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	71,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	72,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	73,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	74,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	75,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	76,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	77,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	78,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	79,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	80,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	81,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	82,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	83,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	84,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	85,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	86,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	87,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	88,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	89,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	90,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	91,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	92,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	93,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	94,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	95,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	96,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	97,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	98,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	99,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	100,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	101,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	102,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	103,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	104,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	105,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	106,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	107,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	108,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	109,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	110,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	111,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	112,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	113,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	114,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	115,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	116,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	117,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	118,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	119,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	120,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	121,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	122,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	123,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	124,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	125,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	126,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	127,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	128,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	129,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	130,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	131,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	132,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	133,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	134,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	135,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	136,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	137,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	138,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	139,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	140,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	141,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	142,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	143,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	144,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	145,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	146,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	147,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	148,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	149,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	150,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	151,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	152,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	153,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	154,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	155,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	156,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	157,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	158,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	159,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	160,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	161,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	162,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	163,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	164,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	165,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	166,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	167,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	168,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	169,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	170,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	171,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	172,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	173,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	174,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	175,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	176,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	177,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	178,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	179,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	180,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	181,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	182,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	183,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	184,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	185,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	186,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	187,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	188,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	189,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	190,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	191,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	192,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	193,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	194,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	195,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	196,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	197,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	198,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	199,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	200,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	201,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	202,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	203,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	204,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	205,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	206,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	207,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	208,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	209,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	210,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	211,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	212,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	213,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	214,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	215,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	216,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	217,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	218,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	219,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	220,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	221,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	222,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	223,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	224,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	225,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	226,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	227,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	228,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	229,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	230,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	231,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	232,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	233,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	234,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	235,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	236,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	237,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	238,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	239,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	240,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	241,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	242,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	243,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	244,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	245,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	246,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	247,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	248,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	249,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	250,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	251,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	252,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	253,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	254,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	255,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	256,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	257,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	258,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	259,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	260,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	261,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	262,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	263,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	264,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	265,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	266,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	267,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	268,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	269,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	270,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	271,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	272,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	273,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	274,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	275,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	276,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	277,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	278,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	279,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	280,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	281,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	282,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	283,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	284,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	285,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	286,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	287,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	288,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	289,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	290,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	291,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	292,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	293,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	294,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	295,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	296,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	297,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	298,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	299,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	300,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	301,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	302,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	303,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	304,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	305,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	306,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	307,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	308,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	309,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	310,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	311,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	312,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	313,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	314,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	315,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	316,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	317,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	318,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	319,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	320,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	321,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	322,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	323,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	324,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	325,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	326,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	327,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	328,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	329,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	330,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	331,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	332,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	333,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	334,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	335,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	336,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	337,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	338,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	339,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	340,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	341,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	342,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	343,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	344,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	345,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	346,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	347,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	348,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	349,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	350,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	351,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	352,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	353,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	354,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	355,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	356,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	357,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	358,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	359,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	360,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	361,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	362,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	363,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	364,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	365,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	366,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	367,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	368,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	369,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	370,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	371,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	372,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	373,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	374,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	375,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	376,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	377,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	378,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	379,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	380,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	381,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	382,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	383,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	384,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	385,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	386,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	387,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	388,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	389,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	390,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	391,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	392,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	393,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	394,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	395,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	396,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	397,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	398,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	399,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	400,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	401,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	402,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	403,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	404,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	405,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	406,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	407,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	408,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	409,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	410,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	411,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	412,
									"scores":	[-8.0535780055196362]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [], [], [], [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356], [], [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291], [], [], [292]],
							"begin_line":	200,
							"begin_column":	4,
							"end_line":	200,
							"end_column":	28,
							"patch_codes":	["if (!__is_neg(\"\", \"L200\", 28, &(intern), sizeof (intern), &(intern->array), sizeof (intern->array), &(orig), sizeof (orig), &(intern->ar_flags), sizeof (intern->ar_flags), &(other), sizeof (other), &(tmp), sizeof (tmp), &(parent), sizeof (parent), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(clone_orig), sizeof (clone_orig), &(class_type), sizeof (class_type), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->debug_info), sizeof (intern->debug_info), &(intern->retval), sizeof (intern->retval), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(obj), sizeof (obj), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self)))\n    zval_addref_p(intern->array);\n", "_array_init(intern->array, -16777217)", "_array_init(intern->array, -50397184)", "_array_init(intern->array, 0)", "_array_init(intern->array, 1)", "_array_init(intern->array, 1048576)", "_array_init(intern->array, 131072)", "_array_init(intern->array, 16777216)", "_array_init(intern->array, 262144)", "_array_init(intern->array, 4)", "_array_init(intern->array, 5)", "_array_init(intern->array, 50397183)", "_array_init(intern->array, 524288)", "_array_init(intern->array, 6)", "_array_init(intern->array, 64)", "_array_init(intern->array, 65536)", "_array_init(intern->array, 67108864)", "_array_init(intern->array, 83886080)", "_object_init_ex(intern->array, 0)", "_object_init_ex(intern->array, class_type)", "_object_init_ex(intern->array, parent)", "_object_init_ex(intern->array, spl_ce_AppendIterator)", "_object_init_ex(intern->array, spl_ce_ArrayIterator)", "_object_init_ex(intern->array, spl_ce_ArrayObject)", "_object_init_ex(intern->array, spl_ce_BadFunctionCallException)", "_object_init_ex(intern->array, spl_ce_BadMethodCallException)", "_object_init_ex(intern->array, spl_ce_CachingIterator)", "_object_init_ex(intern->array, spl_ce_Countable)", "_object_init_ex(intern->array, spl_ce_DomainException)", "_object_init_ex(intern->array, spl_ce_EmptyIterator)", "_object_init_ex(intern->array, spl_ce_FilterIterator)", "_object_init_ex(intern->array, spl_ce_InfiniteIterator)", "_object_init_ex(intern->array, spl_ce_InvalidArgumentException)", "_object_init_ex(intern->array, spl_ce_IteratorIterator)", "_object_init_ex(intern->array, spl_ce_LengthException)", "_object_init_ex(intern->array, spl_ce_LimitIterator)", "_object_init_ex(intern->array, spl_ce_LogicException)", "_object_init_ex(intern->array, spl_ce_NoRewindIterator)", "_object_init_ex(intern->array, spl_ce_OutOfBoundsException)", "_object_init_ex(intern->array, spl_ce_OutOfRangeException)", "_object_init_ex(intern->array, spl_ce_OuterIterator)", "_object_init_ex(intern->array, spl_ce_OverflowException)", "_object_init_ex(intern->array, spl_ce_ParentIterator)", "_object_init_ex(intern->array, spl_ce_RangeException)", "_object_init_ex(intern->array, spl_ce_RecursiveArrayIterator)", "_object_init_ex(intern->array, spl_ce_RecursiveCachingIterator)", "_object_init_ex(intern->array, spl_ce_RecursiveFilterIterator)", "_object_init_ex(intern->array, spl_ce_RecursiveIterator)", "_object_init_ex(intern->array, spl_ce_RecursiveIteratorIterator)", "_object_init_ex(intern->array, spl_ce_RecursiveRegexIterator)", "_object_init_ex(intern->array, spl_ce_RecursiveTreeIterator)", "_object_init_ex(intern->array, spl_ce_RegexIterator)", "_object_init_ex(intern->array, spl_ce_RuntimeException)", "_object_init_ex(intern->array, spl_ce_SeekableIterator)", "_object_init_ex(intern->array, spl_ce_UnderflowException)", "_object_init_ex(intern->array, spl_ce_UnexpectedValueException)", "_object_init_ex(intern->array, zend_ce_aggregate)", "_object_init_ex(intern->array, zend_ce_arrayaccess)", "_object_init_ex(intern->array, zend_ce_iterator)", "_object_init_ex(intern->array, zend_ce_serializable)", "_object_init_ex(intern->array, zend_ce_traversable)", "add_index_null(intern->array, -16777217)", "add_index_null(intern->array, -50397184)", "add_index_null(intern->array, 0)", "add_index_null(intern->array, 1)", "add_index_null(intern->array, 1048576)", "add_index_null(intern->array, 131072)", "add_index_null(intern->array, 16777216)", "add_index_null(intern->array, 262144)", "add_index_null(intern->array, 4)", "add_index_null(intern->array, 5)", "add_index_null(intern->array, 50397183)", "add_index_null(intern->array, 524288)", "add_index_null(intern->array, 6)", "add_index_null(intern->array, 64)", "add_index_null(intern->array, 65536)", "add_index_null(intern->array, 67108864)", "add_index_null(intern->array, 83886080)", "add_next_index_bool(intern->array, -16777217)", "add_next_index_bool(intern->array, -50397184)", "add_next_index_bool(intern->array, 0)", "add_next_index_bool(intern->array, 1)", "add_next_index_bool(intern->array, 1048576)", "add_next_index_bool(intern->array, 131072)", "add_next_index_bool(intern->array, 16777216)", "add_next_index_bool(intern->array, 262144)", "add_next_index_bool(intern->array, 4)", "add_next_index_bool(intern->array, 5)", "add_next_index_bool(intern->array, 50397183)", "add_next_index_bool(intern->array, 524288)", "add_next_index_bool(intern->array, 6)", "add_next_index_bool(intern->array, 64)", "add_next_index_bool(intern->array, 65536)", "add_next_index_bool(intern->array, 67108864)", "add_next_index_bool(intern->array, 83886080)", "add_next_index_bool(intern->array, clone_orig)", "add_next_index_bool(intern->array, inherited)", "add_next_index_bool(intern->array, le_index_ptr)", "add_next_index_long(intern->array, -16777217)", "add_next_index_long(intern->array, -50397184)", "add_next_index_long(intern->array, 0)", "add_next_index_long(intern->array, 1)", "add_next_index_long(intern->array, 1048576)", "add_next_index_long(intern->array, 131072)", "add_next_index_long(intern->array, 16777216)", "add_next_index_long(intern->array, 262144)", "add_next_index_long(intern->array, 4)", "add_next_index_long(intern->array, 5)", "add_next_index_long(intern->array, 50397183)", "add_next_index_long(intern->array, 524288)", "add_next_index_long(intern->array, 6)", "add_next_index_long(intern->array, 64)", "add_next_index_long(intern->array, 65536)", "add_next_index_long(intern->array, 67108864)", "add_next_index_long(intern->array, 83886080)", "add_next_index_resource(intern->array, -16777217)", "add_next_index_resource(intern->array, -50397184)", "add_next_index_resource(intern->array, 0)", "add_next_index_resource(intern->array, 1)", "add_next_index_resource(intern->array, 1048576)", "add_next_index_resource(intern->array, 131072)", "add_next_index_resource(intern->array, 16777216)", "add_next_index_resource(intern->array, 262144)", "add_next_index_resource(intern->array, 4)", "add_next_index_resource(intern->array, 5)", "add_next_index_resource(intern->array, 50397183)", "add_next_index_resource(intern->array, 524288)", "add_next_index_resource(intern->array, 6)", "add_next_index_resource(intern->array, 64)", "add_next_index_resource(intern->array, 65536)", "add_next_index_resource(intern->array, 67108864)", "add_next_index_resource(intern->array, 83886080)", "add_next_index_resource(intern->array, clone_orig)", "add_next_index_resource(intern->array, inherited)", "add_next_index_resource(intern->array, le_index_ptr)", "add_next_index_zval(intern->array, 0)", "add_next_index_zval(intern->array, orig)", "add_next_index_zval(intern->array, tmp)", "bitwise_not_function(intern->array, 0)", "bitwise_not_function(intern->array, orig)", "bitwise_not_function(intern->array, tmp)", "boolean_not_function(intern->array, 0)", "boolean_not_function(intern->array, orig)", "boolean_not_function(intern->array, tmp)", "compile_string(intern->array, 0)", "convert_to_long_base(intern->array, -16777217)", "convert_to_long_base(intern->array, -50397184)", "convert_to_long_base(intern->array, 0)", "convert_to_long_base(intern->array, 1)", "convert_to_long_base(intern->array, 1048576)", "convert_to_long_base(intern->array, 131072)", "convert_to_long_base(intern->array, 16777216)", "convert_to_long_base(intern->array, 262144)", "convert_to_long_base(intern->array, 4)", "convert_to_long_base(intern->array, 5)", "convert_to_long_base(intern->array, 50397183)", "convert_to_long_base(intern->array, 524288)", "convert_to_long_base(intern->array, 6)", "convert_to_long_base(intern->array, 64)", "convert_to_long_base(intern->array, 65536)", "convert_to_long_base(intern->array, 67108864)", "convert_to_long_base(intern->array, 83886080)", "convert_to_long_base(intern->array, clone_orig)", "convert_to_long_base(intern->array, inherited)", "convert_to_long_base(intern->array, le_index_ptr)", "php_spl_get_constructor_helper(intern->array, 0)", "php_spl_get_constructor_helper(intern->array, brk)", "php_spl_get_constructor_helper(intern->array, dlclose)", "php_spl_object_hash(intern->array, 0)", "spl_array_get_debug_info(intern->array, 0)", "spl_array_iterator_append(intern->array, 0)", "spl_array_iterator_append(intern->array, orig)", "spl_array_iterator_append(intern->array, tmp)", "spl_array_iterator_key(intern->array, 0)", "spl_array_iterator_key(intern->array, orig)", "spl_array_iterator_key(intern->array, tmp)", "spl_array_object_count_elements(intern->array, 0)", "spl_array_unset_dimension(intern->array, 0)", "spl_array_unset_dimension(intern->array, orig)", "spl_array_unset_dimension(intern->array, tmp)", "zend_binary_zval_strcasecmp(intern->array, 0)", "zend_binary_zval_strcasecmp(intern->array, orig)", "zend_binary_zval_strcasecmp(intern->array, tmp)", "zend_binary_zval_strcmp(intern->array, 0)", "zend_binary_zval_strcmp(intern->array, orig)", "zend_binary_zval_strcmp(intern->array, tmp)", "zend_exception_error(intern->array, -16777217)", "zend_exception_error(intern->array, -50397184)", "zend_exception_error(intern->array, 0)", "zend_exception_error(intern->array, 1)", "zend_exception_error(intern->array, 1048576)", "zend_exception_error(intern->array, 131072)", "zend_exception_error(intern->array, 16777216)", "zend_exception_error(intern->array, 262144)", "zend_exception_error(intern->array, 4)", "zend_exception_error(intern->array, 5)", "zend_exception_error(intern->array, 50397183)", "zend_exception_error(intern->array, 524288)", "zend_exception_error(intern->array, 6)", "zend_exception_error(intern->array, 64)", "zend_exception_error(intern->array, 65536)", "zend_exception_error(intern->array, 67108864)", "zend_exception_error(intern->array, 83886080)", "zend_exception_error(intern->array, clone_orig)", "zend_exception_error(intern->array, inherited)", "zend_exception_error(intern->array, le_index_ptr)", "zend_exception_set_previous(intern->array, 0)", "zend_exception_set_previous(intern->array, orig)", "zend_exception_set_previous(intern->array, tmp)", "zend_iterator_unwrap(intern->array, 0)", "zend_make_callable(intern->array, 0)", "zend_make_callable(intern->array, environ)", "zend_object_create_proxy(intern->array, 0)", "zend_object_create_proxy(intern->array, orig)", "zend_object_create_proxy(intern->array, tmp)", "zend_object_store_set_object(intern->array, 0)", "zend_print_zval(intern->array, -16777217)", "zend_print_zval(intern->array, -50397184)", "zend_print_zval(intern->array, 0)", "zend_print_zval(intern->array, 1)", "zend_print_zval(intern->array, 1048576)", "zend_print_zval(intern->array, 131072)", "zend_print_zval(intern->array, 16777216)", "zend_print_zval(intern->array, 262144)", "zend_print_zval(intern->array, 4)", "zend_print_zval(intern->array, 5)", "zend_print_zval(intern->array, 50397183)", "zend_print_zval(intern->array, 524288)", "zend_print_zval(intern->array, 6)", "zend_print_zval(intern->array, 64)", "zend_print_zval(intern->array, 65536)", "zend_print_zval(intern->array, 67108864)", "zend_print_zval(intern->array, 83886080)", "zend_print_zval(intern->array, clone_orig)", "zend_print_zval(intern->array, inherited)", "zend_print_zval(intern->array, le_index_ptr)", "zend_print_zval_r(intern->array, -16777217)", "zend_print_zval_r(intern->array, -50397184)", "zend_print_zval_r(intern->array, 0)", "zend_print_zval_r(intern->array, 1)", "zend_print_zval_r(intern->array, 1048576)", "zend_print_zval_r(intern->array, 131072)", "zend_print_zval_r(intern->array, 16777216)", "zend_print_zval_r(intern->array, 262144)", "zend_print_zval_r(intern->array, 4)", "zend_print_zval_r(intern->array, 5)", "zend_print_zval_r(intern->array, 50397183)", "zend_print_zval_r(intern->array, 524288)", "zend_print_zval_r(intern->array, 6)", "zend_print_zval_r(intern->array, 64)", "zend_print_zval_r(intern->array, 65536)", "zend_print_zval_r(intern->array, 67108864)", "zend_print_zval_r(intern->array, 83886080)", "zend_print_zval_r(intern->array, clone_orig)", "zend_print_zval_r(intern->array, inherited)", "zend_print_zval_r(intern->array, le_index_ptr)", "zend_std_get_debug_info(intern->array, 0)", "zval_set_isref_to_p(intern->array, -16777217)", "zval_set_isref_to_p(intern->array, -50397184)", "zval_set_isref_to_p(intern->array, 0)", "zval_set_isref_to_p(intern->array, 1)", "zval_set_isref_to_p(intern->array, 1048576)", "zval_set_isref_to_p(intern->array, 131072)", "zval_set_isref_to_p(intern->array, 16777216)", "zval_set_isref_to_p(intern->array, 262144)", "zval_set_isref_to_p(intern->array, 4)", "zval_set_isref_to_p(intern->array, 5)", "zval_set_isref_to_p(intern->array, 50397183)", "zval_set_isref_to_p(intern->array, 524288)", "zval_set_isref_to_p(intern->array, 6)", "zval_set_isref_to_p(intern->array, 64)", "zval_set_isref_to_p(intern->array, 65536)", "zval_set_isref_to_p(intern->array, 67108864)", "zval_set_isref_to_p(intern->array, 83886080)", "zval_set_refcount_p(intern->array, -16777217)", "zval_set_refcount_p(intern->array, -50397184)", "zval_set_refcount_p(intern->array, 0)", "zval_set_refcount_p(intern->array, 1)", "zval_set_refcount_p(intern->array, 1048576)", "zval_set_refcount_p(intern->array, 131072)", "zval_set_refcount_p(intern->array, 16777216)", "zval_set_refcount_p(intern->array, 262144)", "zval_set_refcount_p(intern->array, 4)", "zval_set_refcount_p(intern->array, 5)", "zval_set_refcount_p(intern->array, 50397183)", "zval_set_refcount_p(intern->array, 524288)", "zval_set_refcount_p(intern->array, 6)", "zval_set_refcount_p(intern->array, 64)", "zval_set_refcount_p(intern->array, 65536)", "zval_set_refcount_p(intern->array, 67108864)", "zval_set_refcount_p(intern->array, 83886080)", "{\n}\n", "_convert_to_string(intern->array)", "_object_init(intern->array)", "_zval_copy_ctor(intern->array)", "_zval_copy_ctor_func(intern->array)", "_zval_dtor(intern->array)", "_zval_dtor_func(intern->array)", "_zval_dtor_wrapper(intern->array)", "_zval_internal_dtor(intern->array)", "add_next_index_null(intern->array)", "config_zval_dtor(intern->array)", "convert_scalar_to_number(intern->array)", "convert_to_array(intern->array)", "convert_to_boolean(intern->array)", "convert_to_double(intern->array)", "convert_to_long(intern->array)", "convert_to_null(intern->array)", "convert_to_object(intern->array)", "decrement_function(intern->array)", "gc_remove_zval_from_buffer(intern->array)", "gc_zobj_possible_root(intern->array)", "gc_zval_check_possible_root(intern->array)", "gc_zval_possible_root(intern->array)", "i_zend_is_true(intern->array)", "i_zval_ptr_dtor(intern->array)", "increment_function(intern->array)", "lex_scan(intern->array)", "php_output_get_contents(intern->array)", "php_output_get_length(intern->array)", "safe_free_zval_ptr_rel(intern->array)", "spl_array_get_properties(intern->array)", "spl_array_object_clone(intern->array)", "spl_offset_convert_to_long(intern->array)", "zend_is_true(intern->array)", "zend_locale_sprintf_double(intern->array)", "zend_object_store_ctor_failed(intern->array)", "zend_objects_clone_obj(intern->array)", "zend_objects_store_add_ref(intern->array)", "zend_objects_store_clone_obj(intern->array)", "zend_objects_store_del_ref(intern->array)", "zend_objects_store_get_refcount(intern->array)", "zend_print_flat_zval_r(intern->array)", "zend_print_variable(intern->array)", "zend_std_get_constructor(intern->array)", "zend_std_get_properties(intern->array)", "zend_throw_exception_internal(intern->array)", "zend_throw_exception_object(intern->array)", "zval_delref_p(intern->array)", "zval_is_true(intern->array)", "zval_isref_p(intern->array)", "zval_refcount_p(intern->array)", "zval_set_isref_p(intern->array)", "zval_unset_isref_p(intern->array)", "zval_addref_p((&class_type)->array)", "zval_addref_p((&clone_orig)->array)", "zval_addref_p((&inherited)->array)", "zval_addref_p((&intern)->array)", "zval_addref_p((&obj)->array)", "zval_addref_p((&orig)->array)", "zval_addref_p((&other)->array)", "zval_addref_p((&parent)->array)", "zval_addref_p((&retval)->array)", "zval_addref_p((&tmp)->array)", "zval_addref_p((intern)->array)", "zval_addref_p((other)->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.9350687039196366, -8.6526944255196359, -9.6457495755196359, -9.3198992765196369, -10.035759475519637, -9.7219617755196364, -9.7219617755196364, -10.039016915519635, -10.039016915519635, -10.039016915519635, -10.039016915519635, -9.2584244755196359, -10.016312575519636, -10.246806585519636, -10.039016915519635, -10.039016915519635, -8.9640736755196357, -10.246806585519636, -10.246806585519636, -9.9581784855196354, -9.7276844755196361, -9.9581784855196354, -9.9581784855196354, -9.9581784855196354, -9.9581784855196354, -10.246806585519636, -9.4889184855196369, -9.4889184855196369]
								}, {
									"case":	2,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	3,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	4,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	5,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	6,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	7,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	8,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	9,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	10,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	11,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	12,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	13,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	14,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	15,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	16,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	17,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	18,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	19,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	20,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	21,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	22,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	23,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	24,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	25,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	26,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	27,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	28,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	29,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	30,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	31,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	32,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	33,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	34,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	35,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	36,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	37,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	38,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	39,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	40,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	41,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	42,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	43,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	44,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	45,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	46,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	47,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	48,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	49,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	50,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	51,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	52,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	53,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	54,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	55,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	56,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	57,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	58,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	59,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	60,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	61,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	62,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	63,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	64,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	65,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	66,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	67,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	68,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	69,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	70,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	71,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	72,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	73,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	74,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	75,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	76,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	77,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	78,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	79,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	80,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	81,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	82,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	83,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	84,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	85,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	86,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	87,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	88,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	89,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	90,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	91,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	92,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	93,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	94,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	95,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	96,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	97,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	98,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	99,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	100,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	101,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	102,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	103,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	104,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	105,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	106,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	107,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	108,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	109,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	110,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	111,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	112,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	113,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	114,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	115,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	116,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	117,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	118,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	119,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	120,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	121,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	122,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	123,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	124,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	125,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	126,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	127,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	128,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	129,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	130,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	131,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	132,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	133,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	134,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	135,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	136,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	137,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	138,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	139,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	140,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	141,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	142,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	143,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	144,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	145,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	146,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	147,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	148,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	149,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	150,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	151,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	152,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	153,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	154,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	155,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	156,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	157,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	158,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	159,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	160,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	161,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	162,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	163,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	164,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	165,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	166,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	167,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	168,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	169,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	170,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	171,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	172,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	173,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	174,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	175,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	176,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	177,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	178,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	179,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	180,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	181,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	182,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	183,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	184,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	185,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	186,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	187,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	188,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	189,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	190,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	191,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	192,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	193,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	194,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	195,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	196,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	197,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	198,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	199,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	200,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	201,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	202,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	203,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	204,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	205,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	206,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	207,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	208,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	209,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	210,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	211,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	212,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	213,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	214,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	215,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	216,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	217,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	218,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	219,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	220,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	221,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	222,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	223,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	224,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	225,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	226,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	227,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	228,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	229,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	230,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	231,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	232,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	233,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	234,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	235,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	236,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	237,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	238,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	239,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	240,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	241,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	242,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	243,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	244,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	245,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	246,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	247,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	248,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	249,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	250,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	251,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	252,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	253,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	254,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	255,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	256,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	257,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	258,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	259,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	260,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	261,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	262,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	263,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	264,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	265,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	266,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	267,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	268,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	269,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	270,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	271,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	272,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	273,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	274,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	275,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	276,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	277,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	278,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	279,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	280,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	281,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	282,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	283,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	284,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	285,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	286,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	287,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	288,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	289,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	290,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	291,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	292,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	293,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	294,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	295,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	296,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	297,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	298,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	299,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	300,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	301,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	302,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	303,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	304,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	305,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	306,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	307,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	308,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	309,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	310,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	311,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	312,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	313,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	314,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	315,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	316,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	317,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	318,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	319,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	320,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	321,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	322,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	323,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	324,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	325,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	326,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	327,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	328,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	329,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	330,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	331,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	332,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	333,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	334,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	335,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	336,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	337,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	338,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	339,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	340,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	341,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	342,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	343,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	344,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	345,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	346,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	347,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	348,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	349,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	350,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	351,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	352,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	353,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	354,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	355,
									"scores":	[-8.0535780055196362]
								}, {
									"case":	356,
									"scores":	[-8.0535780055196362]
								}]
						}]
				}, {
					"line":	200,
					"switches":	[{
							"switch":	33,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321], [], [], [], [], [], []],
							"begin_line":	201,
							"begin_column":	2,
							"end_line":	201,
							"end_column":	2,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&other->ar_flags, 0, sizeof (*(&other->ar_flags)))", "memset(&other->array, 0, sizeof (*(&other->array)))", "memset(&other->ce_get_iterator, 0, sizeof (*(&other->ce_get_iterator)))", "memset(&other->debug_info, 0, sizeof (*(&other->debug_info)))", "memset(&other->fptr_count, 0, sizeof (*(&other->fptr_count)))", "memset(&other->fptr_offset_del, 0, sizeof (*(&other->fptr_offset_del)))", "memset(&other->fptr_offset_get, 0, sizeof (*(&other->fptr_offset_get)))", "memset(&other->fptr_offset_has, 0, sizeof (*(&other->fptr_offset_has)))", "memset(&other->fptr_offset_set, 0, sizeof (*(&other->fptr_offset_set)))", "memset(&other->is_self, 0, sizeof (*(&other->is_self)))", "memset(&other->pos, 0, sizeof (*(&other->pos)))", "memset(&other->pos_h, 0, sizeof (*(&other->pos_h)))", "memset(&other->retval, 0, sizeof (*(&other->retval)))", "memset(&other->std, 0, sizeof (*(&other->std)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(other->array, 0, sizeof (*(other->array)))", "memset(other->ce_get_iterator, 0, sizeof (*(other->ce_get_iterator)))", "memset(other->debug_info, 0, sizeof (*(other->debug_info)))", "memset(other->fptr_count, 0, sizeof (*(other->fptr_count)))", "memset(other->fptr_offset_del, 0, sizeof (*(other->fptr_offset_del)))", "memset(other->fptr_offset_get, 0, sizeof (*(other->fptr_offset_get)))", "memset(other->fptr_offset_has, 0, sizeof (*(other->fptr_offset_has)))", "memset(other->fptr_offset_set, 0, sizeof (*(other->fptr_offset_set)))", "memset(other->pos, 0, sizeof (*(other->pos)))", "memset(other->retval, 0, sizeof (*(other->retval)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern->array)->is_ref__gc = (-16777217)", "(intern->array)->is_ref__gc = (-50397184)", "(intern->array)->is_ref__gc = (0)", "(intern->array)->is_ref__gc = (1)", "(intern->array)->is_ref__gc = (1048576)", "(intern->array)->is_ref__gc = (131072)", "(intern->array)->is_ref__gc = (16777216)", "(intern->array)->is_ref__gc = (262144)", "(intern->array)->is_ref__gc = (4)", "(intern->array)->is_ref__gc = (5)", "(intern->array)->is_ref__gc = (50397183)", "(intern->array)->is_ref__gc = (524288)", "(intern->array)->is_ref__gc = (6)", "(intern->array)->is_ref__gc = (64)", "(intern->array)->is_ref__gc = (65536)", "(intern->array)->is_ref__gc = (67108864)", "(intern->array)->is_ref__gc = (83886080)", "(intern->array)->refcount__gc = (-16777217)", "(intern->array)->refcount__gc = (-50397184)", "(intern->array)->refcount__gc = (0)", "(intern->array)->refcount__gc = (1)", "(intern->array)->refcount__gc = (1048576)", "(intern->array)->refcount__gc = (131072)", "(intern->array)->refcount__gc = (16777216)", "(intern->array)->refcount__gc = (262144)", "(intern->array)->refcount__gc = (4)", "(intern->array)->refcount__gc = (5)", "(intern->array)->refcount__gc = (50397183)", "(intern->array)->refcount__gc = (524288)", "(intern->array)->refcount__gc = (6)", "(intern->array)->refcount__gc = (64)", "(intern->array)->refcount__gc = (65536)", "(intern->array)->refcount__gc = (67108864)", "(intern->array)->refcount__gc = (83886080)", "_array_init(((intern)->array), 0)", "_array_init(((orig)), 0)", "_array_init(((other)->array), 0)", "_array_init(((tmp)), 0)", "_efree(((intern)->debug_info))", "_efree(((orig)))", "_efree(((other)->debug_info))", "_efree(((tmp)))", "_zval_copy_ctor((&(*(orig))))", "_zval_copy_ctor((&(*(tmp))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((orig)))", "_zval_copy_ctor(((other)->retval))", "_zval_copy_ctor(((tmp)))", "_zval_copy_ctor_func((orig))", "_zval_copy_ctor_func((tmp))", "_zval_dtor(((orig)))", "_zval_dtor(((tmp)))", "_zval_dtor_func((orig))", "_zval_dtor_func((tmp))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(orig)))", "_zval_ptr_dtor((&(other)->array))", "_zval_ptr_dtor((&(other)->retval))", "_zval_ptr_dtor((&(tmp)))", "convert_to_boolean((orig))", "convert_to_boolean((tmp))", "convert_to_long((intern)->retval)", "convert_to_long((other)->retval)", "gc_remove_zval_from_buffer((orig))", "gc_remove_zval_from_buffer((tmp))", "gc_zval_check_possible_root(((orig)))", "gc_zval_check_possible_root(((tmp)))", "gc_zval_possible_root((orig))", "gc_zval_possible_root((tmp))", "i_zval_ptr_dtor((orig))", "i_zval_ptr_dtor((tmp))", "inherited = (-16777217)", "inherited = (-50397184)", "inherited = (0)", "inherited = (1)", "inherited = (1048576)", "inherited = (131072)", "inherited = (16777216)", "inherited = (262144)", "inherited = (4)", "inherited = (5)", "inherited = (50397183)", "inherited = (524288)", "inherited = (6)", "inherited = (64)", "inherited = (65536)", "inherited = (67108864)", "inherited = (83886080)", "inherited = (clone_orig)", "inherited = (inherited)", "intern = (intern)", "intern = (other)", "intern->ar_flags = (-16777217)", "intern->ar_flags = (-50397184)", "intern->ar_flags = (0)", "intern->ar_flags = (1)", "intern->ar_flags = (1048576)", "intern->ar_flags = (131072)", "intern->ar_flags = (16777216)", "intern->ar_flags = (262144)", "intern->ar_flags = (4)", "intern->ar_flags = (5)", "intern->ar_flags = (50397183)", "intern->ar_flags = (524288)", "intern->ar_flags = (6)", "intern->ar_flags = (64)", "intern->ar_flags = (65536)", "intern->ar_flags = (67108864)", "intern->ar_flags = (83886080)", "intern->ar_flags = (clone_orig)", "intern->ar_flags = (inherited)", "intern->array = (intern)->array", "intern->array = (orig)", "intern->array = (other)->array", "intern->array = (tmp)", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (other)->ce_get_iterator", "intern->ce_get_iterator = (parent)", "memset((intern), 0, sizeof(spl_array_object))", "memset((other), 0, sizeof(spl_array_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&(other)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "object_properties_init(&intern->std, (parent))", "parent = (class_type)->parent", "parent = (class_type)", "parent = (parent)->parent", "parent = (parent)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(orig)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(tmp)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(other)->std)", "retval.handle = (-16777217)", "retval.handle = (-50397184)", "retval.handle = (0)", "retval.handle = (1)", "retval.handle = (1048576)", "retval.handle = (131072)", "retval.handle = (16777216)", "retval.handle = (262144)", "retval.handle = (4)", "retval.handle = (5)", "retval.handle = (50397183)", "retval.handle = (524288)", "retval.handle = (6)", "retval.handle = (64)", "retval.handle = (65536)", "retval.handle = (67108864)", "retval.handle = (83886080)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((other), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "spl_array_rewind((intern))", "spl_array_rewind((other))", "spl_array_update_pos((intern))", "spl_array_update_pos((other))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((other))", "spl_register_std_class(&(class_type), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(class_type), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_std_class(&(parent), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(parent), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&(class_type), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&(parent), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (class_type), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (parent), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_aggregate)", "zend_class_implements((class_type), 1, zend_ce_arrayaccess)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements((class_type), 1, zend_ce_serializable)", "zend_class_implements((parent), 1, spl_ce_Countable)", "zend_class_implements((parent), 1, spl_ce_RecursiveIterator)", "zend_class_implements((parent), 1, spl_ce_SeekableIterator)", "zend_class_implements((parent), 1, zend_ce_aggregate)", "zend_class_implements((parent), 1, zend_ce_arrayaccess)", "zend_class_implements((parent), 1, zend_ce_iterator)", "zend_class_implements((parent), 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_ArrayIterator, 1, (parent))", "zend_class_implements(spl_ce_ArrayObject, 1, (class_type))", "zend_class_implements(spl_ce_ArrayObject, 1, (parent))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (parent))", "zend_declare_class_constant_long((class_type), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((class_type), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long((parent), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((parent), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((parent), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(orig)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(tmp)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(orig)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(tmp)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((other)->debug_info)", "zend_hash_copy(((*(intern)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*(other)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(intern)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(other)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(intern)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(other)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(intern)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(other)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(intern)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(other)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(intern)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(other)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(orig), sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(tmp), sizeof(zval *))", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((other)->debug_info)", "zend_hash_find(&(class_type)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(class_type)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(class_type)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(class_type)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(class_type)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(class_type)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(class_type)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(class_type)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(class_type)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(class_type)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_hash_find(&(parent)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(parent)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(parent)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(parent)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(parent)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(parent)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(parent)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(parent)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(parent)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(parent)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(other)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&(other)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_object_std_init(&intern->std, (parent))", "zend_throw_exception((class_type), \"Function expects exactly one argument\", 0)", "zend_throw_exception((class_type), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception((parent), \"Function expects exactly one argument\", 0)", "zend_throw_exception((parent), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex((class_type), 0, \"Empty serialized string cannot be empty\")", "zend_throw_exception_ex((parent), 0, \"Empty serialized string cannot be empty\")", "zval_add_ref(&(orig))", "zval_add_ref(&(tmp))", "zval_addref_p((intern)->array)", "zval_addref_p((orig))", "zval_addref_p((other)->array)", "zval_addref_p((tmp))", "zval_delref_p(((orig)))", "zval_delref_p(((tmp)))", "zval_set_isref_p((orig))", "zval_set_isref_p((tmp))", "zval_set_refcount_p((orig), 1)", "zval_set_refcount_p((tmp), 1)", "zval_unset_isref_p((orig))", "zval_unset_isref_p((tmp))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->array)->is_ref__gc = 0", "(intern->array)->refcount__gc = 1", "_array_init((intern->array), 0)", "class_type->get_iterator = spl_array_get_iterator", "exit(1)", "inherited = 1", "intern = _emalloc((sizeof(spl_array_object)))", "intern->ar_flags = 0", "intern->array = orig", "intern->array = other->array", "intern->ce_get_iterator = other->ce_get_iterator", "intern->ce_get_iterator = spl_ce_ArrayIterator", "intern->debug_info = ((void *)0)", "intern->fptr_count = ((void *)0)", "intern->fptr_offset_del = ((void *)0)", "intern->fptr_offset_get = ((void *)0)", "intern->fptr_offset_has = ((void *)0)", "intern->fptr_offset_set = ((void *)0)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_array_object))", "object_properties_init(&intern->std, class_type)", "parent = parent->parent", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handlers = &spl_handler_ArrayIterator", "retval.handlers = &spl_handler_ArrayObject", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_find(&class_type->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&class_type->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&class_type->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&class_type->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&class_type->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&class_type->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&class_type->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&class_type->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&class_type->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&class_type->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)", "zval_addref_p(other->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	2,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	3,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	4,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	5,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	6,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	7,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	8,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	9,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	10,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	11,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	12,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	13,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	14,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	15,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	16,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	17,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	18,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	19,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	20,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	21,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	22,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	23,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	24,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	25,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	26,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	27,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	28,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	29,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	30,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	31,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	32,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	33,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	34,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	35,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	36,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	37,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	38,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	39,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	40,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	41,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	42,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	43,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	44,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	45,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	46,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	47,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	48,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	49,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	50,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	51,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	52,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	53,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	54,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	55,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	56,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	57,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	58,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	59,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	60,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	61,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	62,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	63,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	64,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	65,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	66,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	67,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	68,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	69,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	70,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	71,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	72,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	73,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	74,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	75,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	76,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	77,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	78,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	79,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	80,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	81,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	82,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	83,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	84,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	85,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	86,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	87,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	88,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	89,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	90,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	91,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	92,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	93,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	94,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	95,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	96,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	97,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	98,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	99,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	100,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	101,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	102,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	103,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	104,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	105,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	106,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	107,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	108,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	109,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	110,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	111,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	112,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	113,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	114,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	115,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	116,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	117,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	118,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	119,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	120,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	121,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	122,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	123,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	124,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	125,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	126,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	127,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	128,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	129,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	130,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	131,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	132,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	133,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	134,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	135,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	136,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	137,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	138,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	139,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	140,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	141,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	142,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	143,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	144,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	145,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	146,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	147,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	148,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	149,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	150,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	151,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	152,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	153,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	154,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	155,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	156,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	157,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	158,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	159,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	160,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	161,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	162,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	163,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	164,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	165,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	166,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	167,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	168,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	169,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	170,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	171,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	172,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	173,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	174,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	175,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	176,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	177,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	178,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	179,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	180,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	181,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	182,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	183,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	184,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	185,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	186,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	187,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	188,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	189,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	190,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	191,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	192,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	193,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	194,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	195,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	196,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	197,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	198,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	199,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	200,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	201,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	202,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	203,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	204,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	205,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	206,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	207,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	208,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	209,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	210,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	211,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	212,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	213,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	214,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	215,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	216,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	217,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	218,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	219,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	220,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	221,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	222,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	223,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	224,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	225,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	226,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	227,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	228,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	229,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	230,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	231,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	232,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	233,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	234,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	235,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	236,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	237,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	238,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	239,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	240,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	241,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	242,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	243,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	244,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	245,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	246,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	247,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	248,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	249,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	250,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	251,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	252,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	253,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	254,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	255,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	256,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	257,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	258,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	259,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	260,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	261,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	262,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	263,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	264,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	265,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	266,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	267,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	268,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	269,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	270,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	271,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	272,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	273,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	274,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	275,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	276,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	277,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	278,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	279,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	280,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	281,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	282,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	283,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	284,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	285,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	286,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	287,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	288,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	289,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	290,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	291,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	292,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	293,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	294,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	295,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	296,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	297,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	298,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	299,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	300,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	301,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	302,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	303,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	304,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	305,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	306,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	307,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	308,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	309,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	310,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	311,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	312,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	313,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	314,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	315,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	316,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	317,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	318,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	319,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	320,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	321,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	322,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	323,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	324,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	325,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	326,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	327,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	328,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	329,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	330,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	331,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	332,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	333,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	334,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	335,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	336,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	337,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	338,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	339,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	340,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	341,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	342,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	343,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	344,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	345,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	346,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	347,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	348,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	349,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	350,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	351,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	352,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	353,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	354,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	355,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	356,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	357,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	358,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	359,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	360,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	361,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	362,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	363,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	364,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	365,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	366,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	367,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	368,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	369,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	370,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	371,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	372,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	373,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	374,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	375,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	376,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	377,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	378,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	379,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	380,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	381,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	382,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	383,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	384,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	385,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	386,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	387,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	388,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	389,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	390,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	391,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	392,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	393,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	394,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	395,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	396,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	397,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	398,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	399,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	400,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	401,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	402,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	403,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	404,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	405,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	406,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	407,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	408,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	409,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	410,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	411,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	412,
									"scores":	[-8.0333752982021167]
								}]
						}, {
							"switch":	34,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	201,
							"begin_column":	4,
							"end_line":	201,
							"end_column":	43,
							"patch_codes":	["if (!__is_neg(\"\", \"L201\", 28, &(intern), sizeof (intern), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->array), sizeof (intern->array), &(orig), sizeof (orig), &(other), sizeof (other), &(tmp), sizeof (tmp), &(parent), sizeof (parent), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(class_type), sizeof (class_type), &(clone_orig), sizeof (clone_orig), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(inherited), sizeof (inherited), &(intern->debug_info), sizeof (intern->debug_info), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self)))\n    intern->ar_flags |= 16777216 | 67108864;\n", "{\n}\n", "(&class_type)->ar_flags |= 16777216 | 67108864", "(&clone_orig)->ar_flags |= 16777216 | 67108864", "(&inherited)->ar_flags |= 16777216 | 67108864", "(&intern)->ar_flags |= 16777216 | 67108864", "(&obj)->ar_flags |= 16777216 | 67108864", "(&orig)->ar_flags |= 16777216 | 67108864", "(&other)->ar_flags |= 16777216 | 67108864", "(&parent)->ar_flags |= 16777216 | 67108864", "(&retval)->ar_flags |= 16777216 | 67108864", "(&tmp)->ar_flags |= 16777216 | 67108864", "(intern)->ar_flags |= 16777216 | 67108864", "(other)->ar_flags |= 16777216 | 67108864", "intern->ar_flags |= (0 * clone_orig) | 67108864", "intern->ar_flags |= (0 * inherited) | 67108864", "intern->ar_flags |= (0) | 67108864", "intern->ar_flags |= (class_type != 0) | 67108864", "intern->ar_flags |= (class_type != parent) | 67108864", "intern->ar_flags |= (class_type == 0) | 67108864", "intern->ar_flags |= (class_type == parent) | 67108864", "intern->ar_flags |= (clone_orig != 0) | 67108864", "intern->ar_flags |= (clone_orig != inherited) | 67108864", "intern->ar_flags |= (clone_orig * inherited) | 67108864", "intern->ar_flags |= (clone_orig + 0) | 67108864", "intern->ar_flags |= (clone_orig + inherited) | 67108864", "intern->ar_flags |= (clone_orig - 0) | 67108864", "intern->ar_flags |= (clone_orig - inherited) | 67108864", "intern->ar_flags |= (clone_orig == 0) | 67108864", "intern->ar_flags |= (clone_orig == inherited) | 67108864", "intern->ar_flags |= (inherited != 0) | 67108864", "intern->ar_flags |= (inherited * clone_orig) | 67108864", "intern->ar_flags |= (inherited + 0) | 67108864", "intern->ar_flags |= (inherited - 0) | 67108864", "intern->ar_flags |= (inherited == 0) | 67108864", "intern->ar_flags |= (intern != 0) | 67108864", "intern->ar_flags |= (intern != other) | 67108864", "intern->ar_flags |= (intern == 0) | 67108864", "intern->ar_flags |= (intern == other) | 67108864", "intern->ar_flags |= (obj != 0) | 67108864", "intern->ar_flags |= (obj == 0) | 67108864", "intern->ar_flags |= (orig != 0) | 67108864", "intern->ar_flags |= (orig != tmp) | 67108864", "intern->ar_flags |= (orig == 0) | 67108864", "intern->ar_flags |= (orig == tmp) | 67108864", "intern->ar_flags |= (other != 0) | 67108864", "intern->ar_flags |= (other == 0) | 67108864", "intern->ar_flags |= (parent != 0) | 67108864", "intern->ar_flags |= (parent == 0) | 67108864", "intern->ar_flags |= (retval != 0) | 67108864", "intern->ar_flags |= (retval == 0) | 67108864", "intern->ar_flags |= (tmp != 0) | 67108864", "intern->ar_flags |= (tmp == 0) | 67108864", "intern->ar_flags |= 16777216 | (0 * clone_orig)", "intern->ar_flags |= 16777216 | (0 * inherited)", "intern->ar_flags |= 16777216 | (0)", "intern->ar_flags |= 16777216 | (class_type != 0)", "intern->ar_flags |= 16777216 | (class_type != parent)", "intern->ar_flags |= 16777216 | (class_type == 0)", "intern->ar_flags |= 16777216 | (class_type == parent)", "intern->ar_flags |= 16777216 | (clone_orig != 0)", "intern->ar_flags |= 16777216 | (clone_orig != inherited)", "intern->ar_flags |= 16777216 | (clone_orig * inherited)", "intern->ar_flags |= 16777216 | (clone_orig + 0)", "intern->ar_flags |= 16777216 | (clone_orig + inherited)", "intern->ar_flags |= 16777216 | (clone_orig - 0)", "intern->ar_flags |= 16777216 | (clone_orig - inherited)", "intern->ar_flags |= 16777216 | (clone_orig == 0)", "intern->ar_flags |= 16777216 | (clone_orig == inherited)", "intern->ar_flags |= 16777216 | (inherited != 0)", "intern->ar_flags |= 16777216 | (inherited * clone_orig)", "intern->ar_flags |= 16777216 | (inherited + 0)", "intern->ar_flags |= 16777216 | (inherited - 0)", "intern->ar_flags |= 16777216 | (inherited == 0)", "intern->ar_flags |= 16777216 | (intern != 0)", "intern->ar_flags |= 16777216 | (intern != other)", "intern->ar_flags |= 16777216 | (intern == 0)", "intern->ar_flags |= 16777216 | (intern == other)", "intern->ar_flags |= 16777216 | (obj != 0)", "intern->ar_flags |= 16777216 | (obj == 0)", "intern->ar_flags |= 16777216 | (orig != 0)", "intern->ar_flags |= 16777216 | (orig != tmp)", "intern->ar_flags |= 16777216 | (orig == 0)", "intern->ar_flags |= 16777216 | (orig == tmp)", "intern->ar_flags |= 16777216 | (other != 0)", "intern->ar_flags |= 16777216 | (other == 0)", "intern->ar_flags |= 16777216 | (parent != 0)", "intern->ar_flags |= 16777216 | (parent == 0)", "intern->ar_flags |= 16777216 | (retval != 0)", "intern->ar_flags |= 16777216 | (retval == 0)", "intern->ar_flags |= 16777216 | (tmp != 0)", "intern->ar_flags |= 16777216 | (tmp == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.390539058702117, -9.6095262892021172, -9.7470278642021171, -9.9376648682021163, -10.327674768202117, -10.013877068202117, -10.013877068202117, -10.330932208202118, -10.330932208202118, -10.330932208202118, -10.330932208202118, -10.308227868202117, -9.5503397682021163, -10.330932208202118, -10.330932208202118, -10.538721878202118, -9.2559889682021161, -10.538721878202118, -10.250093778202118, -10.538721878202118, -10.019599768202117, -10.250093778202118, -10.250093778202118, -10.250093778202118, -10.250093778202118, -10.538721878202118, -9.7808337782021173, -9.7808337782021173]
								}, {
									"case":	2,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	3,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	4,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	5,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	6,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	7,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	8,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	9,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	10,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	11,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	12,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	13,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	14,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	15,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	16,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	17,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	18,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	19,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	20,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	21,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	22,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	23,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	24,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	25,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	26,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	27,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	28,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	29,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	30,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	31,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	32,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	33,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	34,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	35,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	36,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	37,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	38,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	39,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	40,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	41,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	42,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	43,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	44,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	45,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	46,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	47,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	48,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	49,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	50,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	51,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	52,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	53,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	54,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	55,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	56,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	57,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	58,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	59,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	60,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	61,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	62,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	63,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	64,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	65,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	66,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	67,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	68,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	69,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	70,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	71,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	72,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	73,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	74,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	75,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	76,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	77,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	78,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	79,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	80,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	81,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	82,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	83,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	84,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	85,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	86,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	87,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	88,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	89,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	90,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	91,
									"scores":	[-8.0333752982021167]
								}, {
									"case":	92,
									"scores":	[-8.0333752982021167]
								}]
						}]
				}, {
					"line":	187,
					"switches":	[{
							"switch":	27,
							"types":	[[], [], [], [], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], [], [], [], [323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [], []],
							"begin_line":	188,
							"begin_column":	1,
							"end_line":	188,
							"end_column":	1,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&other->ar_flags, 0, sizeof (*(&other->ar_flags)))", "memset(&other->array, 0, sizeof (*(&other->array)))", "memset(&other->ce_get_iterator, 0, sizeof (*(&other->ce_get_iterator)))", "memset(&other->debug_info, 0, sizeof (*(&other->debug_info)))", "memset(&other->fptr_count, 0, sizeof (*(&other->fptr_count)))", "memset(&other->fptr_offset_del, 0, sizeof (*(&other->fptr_offset_del)))", "memset(&other->fptr_offset_get, 0, sizeof (*(&other->fptr_offset_get)))", "memset(&other->fptr_offset_has, 0, sizeof (*(&other->fptr_offset_has)))", "memset(&other->fptr_offset_set, 0, sizeof (*(&other->fptr_offset_set)))", "memset(&other->is_self, 0, sizeof (*(&other->is_self)))", "memset(&other->pos, 0, sizeof (*(&other->pos)))", "memset(&other->pos_h, 0, sizeof (*(&other->pos_h)))", "memset(&other->retval, 0, sizeof (*(&other->retval)))", "memset(&other->std, 0, sizeof (*(&other->std)))", "memset(&retval.handle, 0, sizeof (*(&retval.handle)))", "memset(&retval.handlers, 0, sizeof (*(&retval.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(other, 0, sizeof (*(other)))", "memset(other->array, 0, sizeof (*(other->array)))", "memset(other->ce_get_iterator, 0, sizeof (*(other->ce_get_iterator)))", "memset(other->debug_info, 0, sizeof (*(other->debug_info)))", "memset(other->fptr_count, 0, sizeof (*(other->fptr_count)))", "memset(other->fptr_offset_del, 0, sizeof (*(other->fptr_offset_del)))", "memset(other->fptr_offset_get, 0, sizeof (*(other->fptr_offset_get)))", "memset(other->fptr_offset_has, 0, sizeof (*(other->fptr_offset_has)))", "memset(other->fptr_offset_set, 0, sizeof (*(other->fptr_offset_set)))", "memset(other->pos, 0, sizeof (*(other->pos)))", "memset(other->retval, 0, sizeof (*(other->retval)))", "memset(retval.handlers, 0, sizeof (*(retval.handlers)))", "(intern->array)->is_ref__gc = (-16777217)", "(intern->array)->is_ref__gc = (-50397184)", "(intern->array)->is_ref__gc = (0)", "(intern->array)->is_ref__gc = (1)", "(intern->array)->is_ref__gc = (1048576)", "(intern->array)->is_ref__gc = (131072)", "(intern->array)->is_ref__gc = (16777216)", "(intern->array)->is_ref__gc = (262144)", "(intern->array)->is_ref__gc = (4)", "(intern->array)->is_ref__gc = (5)", "(intern->array)->is_ref__gc = (50397183)", "(intern->array)->is_ref__gc = (524288)", "(intern->array)->is_ref__gc = (6)", "(intern->array)->is_ref__gc = (64)", "(intern->array)->is_ref__gc = (65536)", "(intern->array)->is_ref__gc = (67108864)", "(intern->array)->is_ref__gc = (83886080)", "(intern->array)->refcount__gc = (-16777217)", "(intern->array)->refcount__gc = (-50397184)", "(intern->array)->refcount__gc = (0)", "(intern->array)->refcount__gc = (1)", "(intern->array)->refcount__gc = (1048576)", "(intern->array)->refcount__gc = (131072)", "(intern->array)->refcount__gc = (16777216)", "(intern->array)->refcount__gc = (262144)", "(intern->array)->refcount__gc = (4)", "(intern->array)->refcount__gc = (5)", "(intern->array)->refcount__gc = (50397183)", "(intern->array)->refcount__gc = (524288)", "(intern->array)->refcount__gc = (6)", "(intern->array)->refcount__gc = (64)", "(intern->array)->refcount__gc = (65536)", "(intern->array)->refcount__gc = (67108864)", "(intern->array)->refcount__gc = (83886080)", "_array_init(((intern)->array), 0)", "_array_init(((orig)), 0)", "_array_init(((other)->array), 0)", "_array_init(((tmp)), 0)", "_efree(((intern)->debug_info))", "_efree(((orig)))", "_efree(((other)->debug_info))", "_efree(((tmp)))", "_zval_copy_ctor((&(*(orig))))", "_zval_copy_ctor((&(*(tmp))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((orig)))", "_zval_copy_ctor(((other)->retval))", "_zval_copy_ctor(((tmp)))", "_zval_copy_ctor_func((orig))", "_zval_copy_ctor_func((tmp))", "_zval_dtor(((orig)))", "_zval_dtor(((tmp)))", "_zval_dtor_func((orig))", "_zval_dtor_func((tmp))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(orig)))", "_zval_ptr_dtor((&(other)->array))", "_zval_ptr_dtor((&(other)->retval))", "_zval_ptr_dtor((&(tmp)))", "convert_to_boolean((orig))", "convert_to_boolean((tmp))", "convert_to_long((intern)->retval)", "convert_to_long((other)->retval)", "gc_remove_zval_from_buffer((orig))", "gc_remove_zval_from_buffer((tmp))", "gc_zval_check_possible_root(((orig)))", "gc_zval_check_possible_root(((tmp)))", "gc_zval_possible_root((orig))", "gc_zval_possible_root((tmp))", "i_zval_ptr_dtor((orig))", "i_zval_ptr_dtor((tmp))", "inherited = (-16777217)", "inherited = (-50397184)", "inherited = (0)", "inherited = (1)", "inherited = (1048576)", "inherited = (131072)", "inherited = (16777216)", "inherited = (262144)", "inherited = (4)", "inherited = (5)", "inherited = (50397183)", "inherited = (524288)", "inherited = (6)", "inherited = (64)", "inherited = (65536)", "inherited = (67108864)", "inherited = (83886080)", "inherited = (clone_orig)", "inherited = (inherited)", "intern = (intern)", "intern = (other)", "intern->ar_flags = (-16777217)", "intern->ar_flags = (-50397184)", "intern->ar_flags = (0)", "intern->ar_flags = (1)", "intern->ar_flags = (1048576)", "intern->ar_flags = (131072)", "intern->ar_flags = (16777216)", "intern->ar_flags = (262144)", "intern->ar_flags = (4)", "intern->ar_flags = (5)", "intern->ar_flags = (50397183)", "intern->ar_flags = (524288)", "intern->ar_flags = (6)", "intern->ar_flags = (64)", "intern->ar_flags = (65536)", "intern->ar_flags = (67108864)", "intern->ar_flags = (83886080)", "intern->ar_flags = (clone_orig)", "intern->ar_flags = (inherited)", "intern->array = (intern)->array", "intern->array = (orig)", "intern->array = (other)->array", "intern->array = (tmp)", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (other)->ce_get_iterator", "intern->ce_get_iterator = (parent)", "memset((intern), 0, sizeof(spl_array_object))", "memset((other), 0, sizeof(spl_array_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&(other)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "object_properties_init(&intern->std, (parent))", "parent = (class_type)->parent", "parent = (class_type)", "parent = (parent)->parent", "parent = (parent)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(orig)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(tmp)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(other)->std)", "retval.handle = (-16777217)", "retval.handle = (-50397184)", "retval.handle = (0)", "retval.handle = (1)", "retval.handle = (1048576)", "retval.handle = (131072)", "retval.handle = (16777216)", "retval.handle = (262144)", "retval.handle = (4)", "retval.handle = (5)", "retval.handle = (50397183)", "retval.handle = (524288)", "retval.handle = (6)", "retval.handle = (64)", "retval.handle = (65536)", "retval.handle = (67108864)", "retval.handle = (83886080)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handle = zend_objects_store_put((other), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "spl_array_rewind((intern))", "spl_array_rewind((other))", "spl_array_update_pos((intern))", "spl_array_update_pos((other))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((other))", "spl_register_std_class(&(class_type), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(class_type), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_std_class(&(parent), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(parent), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&(class_type), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&(parent), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (class_type), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (parent), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_aggregate)", "zend_class_implements((class_type), 1, zend_ce_arrayaccess)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements((class_type), 1, zend_ce_serializable)", "zend_class_implements((parent), 1, spl_ce_Countable)", "zend_class_implements((parent), 1, spl_ce_RecursiveIterator)", "zend_class_implements((parent), 1, spl_ce_SeekableIterator)", "zend_class_implements((parent), 1, zend_ce_aggregate)", "zend_class_implements((parent), 1, zend_ce_arrayaccess)", "zend_class_implements((parent), 1, zend_ce_iterator)", "zend_class_implements((parent), 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_ArrayIterator, 1, (parent))", "zend_class_implements(spl_ce_ArrayObject, 1, (class_type))", "zend_class_implements(spl_ce_ArrayObject, 1, (parent))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (parent))", "zend_declare_class_constant_long((class_type), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((class_type), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long((parent), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((parent), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((parent), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(orig)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(tmp)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(orig)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(tmp)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((other)->debug_info)", "zend_hash_copy(((*(intern)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*(other)->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(intern)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*(other)->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(intern)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*(other)->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(intern)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*(other)->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(intern)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*(other)->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(intern)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*(other)->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(intern)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*(other)->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((intern)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties(((other)->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(orig), sizeof(zval *))", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &(tmp), sizeof(zval *))", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((other)->debug_info)", "zend_hash_find(&(class_type)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(class_type)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(class_type)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(class_type)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(class_type)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(class_type)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(class_type)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(class_type)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(class_type)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(class_type)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_hash_find(&(parent)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(parent)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(parent)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(parent)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(parent)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(parent)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(parent)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(parent)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(parent)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(parent)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(other)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&(other)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_object_std_init(&intern->std, (parent))", "zend_throw_exception((class_type), \"Function expects exactly one argument\", 0)", "zend_throw_exception((class_type), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception((parent), \"Function expects exactly one argument\", 0)", "zend_throw_exception((parent), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex((class_type), 0, \"Empty serialized string cannot be empty\")", "zend_throw_exception_ex((parent), 0, \"Empty serialized string cannot be empty\")", "zval_add_ref(&(orig))", "zval_add_ref(&(tmp))", "zval_addref_p((intern)->array)", "zval_addref_p((orig))", "zval_addref_p((other)->array)", "zval_addref_p((tmp))", "zval_delref_p(((orig)))", "zval_delref_p(((tmp)))", "zval_set_isref_p((orig))", "zval_set_isref_p((tmp))", "zval_set_refcount_p((orig), 1)", "zval_set_refcount_p((tmp), 1)", "zval_unset_isref_p((orig))", "zval_unset_isref_p((tmp))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->array)->is_ref__gc = 0", "(intern->array)->refcount__gc = 1", "_array_init((intern->array), 0)", "class_type->get_iterator = spl_array_get_iterator", "exit(1)", "inherited = 1", "intern = _emalloc((sizeof(spl_array_object)))", "intern->ar_flags = 0", "intern->array = orig", "intern->array = other->array", "intern->ce_get_iterator = other->ce_get_iterator", "intern->ce_get_iterator = spl_ce_ArrayIterator", "intern->debug_info = ((void *)0)", "intern->fptr_count = ((void *)0)", "intern->fptr_offset_del = ((void *)0)", "intern->fptr_offset_get = ((void *)0)", "intern->fptr_offset_has = ((void *)0)", "intern->fptr_offset_set = ((void *)0)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_array_object))", "object_properties_init(&intern->std, class_type)", "parent = parent->parent", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handlers = &spl_handler_ArrayIterator", "retval.handlers = &spl_handler_ArrayObject", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *))", "zend_hash_find(&class_type->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&class_type->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&class_type->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&class_type->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&class_type->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&class_type->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&class_type->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&class_type->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&class_type->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&class_type->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)", "zval_addref_p(other->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.72026734699778]
								}, {
									"case":	2,
									"scores":	[-8.72026734699778]
								}, {
									"case":	3,
									"scores":	[-8.72026734699778]
								}, {
									"case":	4,
									"scores":	[-8.72026734699778]
								}, {
									"case":	5,
									"scores":	[-8.72026734699778]
								}, {
									"case":	6,
									"scores":	[-8.72026734699778]
								}, {
									"case":	7,
									"scores":	[-8.72026734699778]
								}, {
									"case":	8,
									"scores":	[-8.72026734699778]
								}, {
									"case":	9,
									"scores":	[-8.72026734699778]
								}, {
									"case":	10,
									"scores":	[-8.72026734699778]
								}, {
									"case":	11,
									"scores":	[-8.72026734699778]
								}, {
									"case":	12,
									"scores":	[-8.72026734699778]
								}, {
									"case":	13,
									"scores":	[-8.72026734699778]
								}, {
									"case":	14,
									"scores":	[-8.72026734699778]
								}, {
									"case":	15,
									"scores":	[-8.72026734699778]
								}, {
									"case":	16,
									"scores":	[-8.72026734699778]
								}, {
									"case":	17,
									"scores":	[-8.72026734699778]
								}, {
									"case":	18,
									"scores":	[-8.72026734699778]
								}, {
									"case":	19,
									"scores":	[-8.72026734699778]
								}, {
									"case":	20,
									"scores":	[-8.72026734699778]
								}, {
									"case":	21,
									"scores":	[-8.72026734699778]
								}, {
									"case":	22,
									"scores":	[-8.72026734699778]
								}, {
									"case":	23,
									"scores":	[-8.72026734699778]
								}, {
									"case":	24,
									"scores":	[-8.72026734699778]
								}, {
									"case":	25,
									"scores":	[-8.72026734699778]
								}, {
									"case":	26,
									"scores":	[-8.72026734699778]
								}, {
									"case":	27,
									"scores":	[-8.72026734699778]
								}, {
									"case":	28,
									"scores":	[-8.72026734699778]
								}, {
									"case":	29,
									"scores":	[-8.72026734699778]
								}, {
									"case":	30,
									"scores":	[-8.72026734699778]
								}, {
									"case":	31,
									"scores":	[-8.72026734699778]
								}, {
									"case":	32,
									"scores":	[-8.72026734699778]
								}, {
									"case":	33,
									"scores":	[-8.72026734699778]
								}, {
									"case":	34,
									"scores":	[-8.72026734699778]
								}, {
									"case":	35,
									"scores":	[-8.72026734699778]
								}, {
									"case":	36,
									"scores":	[-8.72026734699778]
								}, {
									"case":	37,
									"scores":	[-8.72026734699778]
								}, {
									"case":	38,
									"scores":	[-8.72026734699778]
								}, {
									"case":	39,
									"scores":	[-8.72026734699778]
								}, {
									"case":	40,
									"scores":	[-8.72026734699778]
								}, {
									"case":	41,
									"scores":	[-8.72026734699778]
								}, {
									"case":	42,
									"scores":	[-8.72026734699778]
								}, {
									"case":	43,
									"scores":	[-8.72026734699778]
								}, {
									"case":	44,
									"scores":	[-8.72026734699778]
								}, {
									"case":	45,
									"scores":	[-8.72026734699778]
								}, {
									"case":	46,
									"scores":	[-8.72026734699778]
								}, {
									"case":	47,
									"scores":	[-8.72026734699778]
								}, {
									"case":	48,
									"scores":	[-8.72026734699778]
								}, {
									"case":	49,
									"scores":	[-8.72026734699778]
								}, {
									"case":	50,
									"scores":	[-8.72026734699778]
								}, {
									"case":	51,
									"scores":	[-8.72026734699778]
								}, {
									"case":	52,
									"scores":	[-8.72026734699778]
								}, {
									"case":	53,
									"scores":	[-8.72026734699778]
								}, {
									"case":	54,
									"scores":	[-8.72026734699778]
								}, {
									"case":	55,
									"scores":	[-8.72026734699778]
								}, {
									"case":	56,
									"scores":	[-8.72026734699778]
								}, {
									"case":	57,
									"scores":	[-8.72026734699778]
								}, {
									"case":	58,
									"scores":	[-8.72026734699778]
								}, {
									"case":	59,
									"scores":	[-8.72026734699778]
								}, {
									"case":	60,
									"scores":	[-8.72026734699778]
								}, {
									"case":	61,
									"scores":	[-8.72026734699778]
								}, {
									"case":	62,
									"scores":	[-8.72026734699778]
								}, {
									"case":	63,
									"scores":	[-8.72026734699778]
								}, {
									"case":	64,
									"scores":	[-8.72026734699778]
								}, {
									"case":	65,
									"scores":	[-8.72026734699778]
								}, {
									"case":	66,
									"scores":	[-8.72026734699778]
								}, {
									"case":	67,
									"scores":	[-8.72026734699778]
								}, {
									"case":	68,
									"scores":	[-8.72026734699778]
								}, {
									"case":	69,
									"scores":	[-8.72026734699778]
								}, {
									"case":	70,
									"scores":	[-8.72026734699778]
								}, {
									"case":	71,
									"scores":	[-8.72026734699778]
								}, {
									"case":	72,
									"scores":	[-8.72026734699778]
								}, {
									"case":	73,
									"scores":	[-8.72026734699778]
								}, {
									"case":	74,
									"scores":	[-8.72026734699778]
								}, {
									"case":	75,
									"scores":	[-8.72026734699778]
								}, {
									"case":	76,
									"scores":	[-8.72026734699778]
								}, {
									"case":	77,
									"scores":	[-8.72026734699778]
								}, {
									"case":	78,
									"scores":	[-8.72026734699778]
								}, {
									"case":	79,
									"scores":	[-8.72026734699778]
								}, {
									"case":	80,
									"scores":	[-8.72026734699778]
								}, {
									"case":	81,
									"scores":	[-8.72026734699778]
								}, {
									"case":	82,
									"scores":	[-8.72026734699778]
								}, {
									"case":	83,
									"scores":	[-8.72026734699778]
								}, {
									"case":	84,
									"scores":	[-8.72026734699778]
								}, {
									"case":	85,
									"scores":	[-8.72026734699778]
								}, {
									"case":	86,
									"scores":	[-8.72026734699778]
								}, {
									"case":	87,
									"scores":	[-8.72026734699778]
								}, {
									"case":	88,
									"scores":	[-8.72026734699778]
								}, {
									"case":	89,
									"scores":	[-8.72026734699778]
								}, {
									"case":	90,
									"scores":	[-8.72026734699778]
								}, {
									"case":	91,
									"scores":	[-8.72026734699778]
								}, {
									"case":	92,
									"scores":	[-8.72026734699778]
								}, {
									"case":	93,
									"scores":	[-8.72026734699778]
								}, {
									"case":	94,
									"scores":	[-8.72026734699778]
								}, {
									"case":	95,
									"scores":	[-8.72026734699778]
								}, {
									"case":	96,
									"scores":	[-8.72026734699778]
								}, {
									"case":	97,
									"scores":	[-8.72026734699778]
								}, {
									"case":	98,
									"scores":	[-8.72026734699778]
								}, {
									"case":	99,
									"scores":	[-8.72026734699778]
								}, {
									"case":	100,
									"scores":	[-8.72026734699778]
								}, {
									"case":	101,
									"scores":	[-8.72026734699778]
								}, {
									"case":	102,
									"scores":	[-8.72026734699778]
								}, {
									"case":	103,
									"scores":	[-8.72026734699778]
								}, {
									"case":	104,
									"scores":	[-8.72026734699778]
								}, {
									"case":	105,
									"scores":	[-8.72026734699778]
								}, {
									"case":	106,
									"scores":	[-8.72026734699778]
								}, {
									"case":	107,
									"scores":	[-8.72026734699778]
								}, {
									"case":	108,
									"scores":	[-8.72026734699778]
								}, {
									"case":	109,
									"scores":	[-8.72026734699778]
								}, {
									"case":	110,
									"scores":	[-8.72026734699778]
								}, {
									"case":	111,
									"scores":	[-8.72026734699778]
								}, {
									"case":	112,
									"scores":	[-8.72026734699778]
								}, {
									"case":	113,
									"scores":	[-8.72026734699778]
								}, {
									"case":	114,
									"scores":	[-8.72026734699778]
								}, {
									"case":	115,
									"scores":	[-8.72026734699778]
								}, {
									"case":	116,
									"scores":	[-8.72026734699778]
								}, {
									"case":	117,
									"scores":	[-8.72026734699778]
								}, {
									"case":	118,
									"scores":	[-8.72026734699778]
								}, {
									"case":	119,
									"scores":	[-8.72026734699778]
								}, {
									"case":	120,
									"scores":	[-8.72026734699778]
								}, {
									"case":	121,
									"scores":	[-8.72026734699778]
								}, {
									"case":	122,
									"scores":	[-8.72026734699778]
								}, {
									"case":	123,
									"scores":	[-8.72026734699778]
								}, {
									"case":	124,
									"scores":	[-8.72026734699778]
								}, {
									"case":	125,
									"scores":	[-8.72026734699778]
								}, {
									"case":	126,
									"scores":	[-8.72026734699778]
								}, {
									"case":	127,
									"scores":	[-8.72026734699778]
								}, {
									"case":	128,
									"scores":	[-8.72026734699778]
								}, {
									"case":	129,
									"scores":	[-8.72026734699778]
								}, {
									"case":	130,
									"scores":	[-8.72026734699778]
								}, {
									"case":	131,
									"scores":	[-8.72026734699778]
								}, {
									"case":	132,
									"scores":	[-8.72026734699778]
								}, {
									"case":	133,
									"scores":	[-8.72026734699778]
								}, {
									"case":	134,
									"scores":	[-8.72026734699778]
								}, {
									"case":	135,
									"scores":	[-8.72026734699778]
								}, {
									"case":	136,
									"scores":	[-8.72026734699778]
								}, {
									"case":	137,
									"scores":	[-8.72026734699778]
								}, {
									"case":	138,
									"scores":	[-8.72026734699778]
								}, {
									"case":	139,
									"scores":	[-8.72026734699778]
								}, {
									"case":	140,
									"scores":	[-8.72026734699778]
								}, {
									"case":	141,
									"scores":	[-8.72026734699778]
								}, {
									"case":	142,
									"scores":	[-8.72026734699778]
								}, {
									"case":	143,
									"scores":	[-8.72026734699778]
								}, {
									"case":	144,
									"scores":	[-8.72026734699778]
								}, {
									"case":	145,
									"scores":	[-8.72026734699778]
								}, {
									"case":	146,
									"scores":	[-8.72026734699778]
								}, {
									"case":	147,
									"scores":	[-8.72026734699778]
								}, {
									"case":	148,
									"scores":	[-8.72026734699778]
								}, {
									"case":	149,
									"scores":	[-8.72026734699778]
								}, {
									"case":	150,
									"scores":	[-8.72026734699778]
								}, {
									"case":	151,
									"scores":	[-8.72026734699778]
								}, {
									"case":	152,
									"scores":	[-8.72026734699778]
								}, {
									"case":	153,
									"scores":	[-8.72026734699778]
								}, {
									"case":	154,
									"scores":	[-8.72026734699778]
								}, {
									"case":	155,
									"scores":	[-8.72026734699778]
								}, {
									"case":	156,
									"scores":	[-8.72026734699778]
								}, {
									"case":	157,
									"scores":	[-8.72026734699778]
								}, {
									"case":	158,
									"scores":	[-8.72026734699778]
								}, {
									"case":	159,
									"scores":	[-8.72026734699778]
								}, {
									"case":	160,
									"scores":	[-8.72026734699778]
								}, {
									"case":	161,
									"scores":	[-8.72026734699778]
								}, {
									"case":	162,
									"scores":	[-8.72026734699778]
								}, {
									"case":	163,
									"scores":	[-8.72026734699778]
								}, {
									"case":	164,
									"scores":	[-8.72026734699778]
								}, {
									"case":	165,
									"scores":	[-8.72026734699778]
								}, {
									"case":	166,
									"scores":	[-8.72026734699778]
								}, {
									"case":	167,
									"scores":	[-8.72026734699778]
								}, {
									"case":	168,
									"scores":	[-8.72026734699778]
								}, {
									"case":	169,
									"scores":	[-8.72026734699778]
								}, {
									"case":	170,
									"scores":	[-8.72026734699778]
								}, {
									"case":	171,
									"scores":	[-8.72026734699778]
								}, {
									"case":	172,
									"scores":	[-8.72026734699778]
								}, {
									"case":	173,
									"scores":	[-8.72026734699778]
								}, {
									"case":	174,
									"scores":	[-8.72026734699778]
								}, {
									"case":	175,
									"scores":	[-8.72026734699778]
								}, {
									"case":	176,
									"scores":	[-8.72026734699778]
								}, {
									"case":	177,
									"scores":	[-8.72026734699778]
								}, {
									"case":	178,
									"scores":	[-8.72026734699778]
								}, {
									"case":	179,
									"scores":	[-8.72026734699778]
								}, {
									"case":	180,
									"scores":	[-8.72026734699778]
								}, {
									"case":	181,
									"scores":	[-8.72026734699778]
								}, {
									"case":	182,
									"scores":	[-8.72026734699778]
								}, {
									"case":	183,
									"scores":	[-8.72026734699778]
								}, {
									"case":	184,
									"scores":	[-8.72026734699778]
								}, {
									"case":	185,
									"scores":	[-8.72026734699778]
								}, {
									"case":	186,
									"scores":	[-8.72026734699778]
								}, {
									"case":	187,
									"scores":	[-8.72026734699778]
								}, {
									"case":	188,
									"scores":	[-8.72026734699778]
								}, {
									"case":	189,
									"scores":	[-8.72026734699778]
								}, {
									"case":	190,
									"scores":	[-8.72026734699778]
								}, {
									"case":	191,
									"scores":	[-8.72026734699778]
								}, {
									"case":	192,
									"scores":	[-8.72026734699778]
								}, {
									"case":	193,
									"scores":	[-8.72026734699778]
								}, {
									"case":	194,
									"scores":	[-8.72026734699778]
								}, {
									"case":	195,
									"scores":	[-8.72026734699778]
								}, {
									"case":	196,
									"scores":	[-8.72026734699778]
								}, {
									"case":	197,
									"scores":	[-8.72026734699778]
								}, {
									"case":	198,
									"scores":	[-8.72026734699778]
								}, {
									"case":	199,
									"scores":	[-8.72026734699778]
								}, {
									"case":	200,
									"scores":	[-8.72026734699778]
								}, {
									"case":	201,
									"scores":	[-8.72026734699778]
								}, {
									"case":	202,
									"scores":	[-8.72026734699778]
								}, {
									"case":	203,
									"scores":	[-8.72026734699778]
								}, {
									"case":	204,
									"scores":	[-8.72026734699778]
								}, {
									"case":	205,
									"scores":	[-8.72026734699778]
								}, {
									"case":	206,
									"scores":	[-8.72026734699778]
								}, {
									"case":	207,
									"scores":	[-8.72026734699778]
								}, {
									"case":	208,
									"scores":	[-8.72026734699778]
								}, {
									"case":	209,
									"scores":	[-8.72026734699778]
								}, {
									"case":	210,
									"scores":	[-8.72026734699778]
								}, {
									"case":	211,
									"scores":	[-8.72026734699778]
								}, {
									"case":	212,
									"scores":	[-8.72026734699778]
								}, {
									"case":	213,
									"scores":	[-8.72026734699778]
								}, {
									"case":	214,
									"scores":	[-8.72026734699778]
								}, {
									"case":	215,
									"scores":	[-8.72026734699778]
								}, {
									"case":	216,
									"scores":	[-8.72026734699778]
								}, {
									"case":	217,
									"scores":	[-8.72026734699778]
								}, {
									"case":	218,
									"scores":	[-8.72026734699778]
								}, {
									"case":	219,
									"scores":	[-8.72026734699778]
								}, {
									"case":	220,
									"scores":	[-8.72026734699778]
								}, {
									"case":	221,
									"scores":	[-8.72026734699778]
								}, {
									"case":	222,
									"scores":	[-8.72026734699778]
								}, {
									"case":	223,
									"scores":	[-8.72026734699778]
								}, {
									"case":	224,
									"scores":	[-8.72026734699778]
								}, {
									"case":	225,
									"scores":	[-8.72026734699778]
								}, {
									"case":	226,
									"scores":	[-8.72026734699778]
								}, {
									"case":	227,
									"scores":	[-8.72026734699778]
								}, {
									"case":	228,
									"scores":	[-8.72026734699778]
								}, {
									"case":	229,
									"scores":	[-8.72026734699778]
								}, {
									"case":	230,
									"scores":	[-8.72026734699778]
								}, {
									"case":	231,
									"scores":	[-8.72026734699778]
								}, {
									"case":	232,
									"scores":	[-8.72026734699778]
								}, {
									"case":	233,
									"scores":	[-8.72026734699778]
								}, {
									"case":	234,
									"scores":	[-8.72026734699778]
								}, {
									"case":	235,
									"scores":	[-8.72026734699778]
								}, {
									"case":	236,
									"scores":	[-8.72026734699778]
								}, {
									"case":	237,
									"scores":	[-8.72026734699778]
								}, {
									"case":	238,
									"scores":	[-8.72026734699778]
								}, {
									"case":	239,
									"scores":	[-8.72026734699778]
								}, {
									"case":	240,
									"scores":	[-8.72026734699778]
								}, {
									"case":	241,
									"scores":	[-8.72026734699778]
								}, {
									"case":	242,
									"scores":	[-8.72026734699778]
								}, {
									"case":	243,
									"scores":	[-8.72026734699778]
								}, {
									"case":	244,
									"scores":	[-8.72026734699778]
								}, {
									"case":	245,
									"scores":	[-8.72026734699778]
								}, {
									"case":	246,
									"scores":	[-8.72026734699778]
								}, {
									"case":	247,
									"scores":	[-8.72026734699778]
								}, {
									"case":	248,
									"scores":	[-8.72026734699778]
								}, {
									"case":	249,
									"scores":	[-8.72026734699778]
								}, {
									"case":	250,
									"scores":	[-8.72026734699778]
								}, {
									"case":	251,
									"scores":	[-8.72026734699778]
								}, {
									"case":	252,
									"scores":	[-8.72026734699778]
								}, {
									"case":	253,
									"scores":	[-8.72026734699778]
								}, {
									"case":	254,
									"scores":	[-8.72026734699778]
								}, {
									"case":	255,
									"scores":	[-8.72026734699778]
								}, {
									"case":	256,
									"scores":	[-8.72026734699778]
								}, {
									"case":	257,
									"scores":	[-8.72026734699778]
								}, {
									"case":	258,
									"scores":	[-8.72026734699778]
								}, {
									"case":	259,
									"scores":	[-8.72026734699778]
								}, {
									"case":	260,
									"scores":	[-8.72026734699778]
								}, {
									"case":	261,
									"scores":	[-8.72026734699778]
								}, {
									"case":	262,
									"scores":	[-8.72026734699778]
								}, {
									"case":	263,
									"scores":	[-8.72026734699778]
								}, {
									"case":	264,
									"scores":	[-8.72026734699778]
								}, {
									"case":	265,
									"scores":	[-8.72026734699778]
								}, {
									"case":	266,
									"scores":	[-8.72026734699778]
								}, {
									"case":	267,
									"scores":	[-8.72026734699778]
								}, {
									"case":	268,
									"scores":	[-8.72026734699778]
								}, {
									"case":	269,
									"scores":	[-8.72026734699778]
								}, {
									"case":	270,
									"scores":	[-8.72026734699778]
								}, {
									"case":	271,
									"scores":	[-8.72026734699778]
								}, {
									"case":	272,
									"scores":	[-8.72026734699778]
								}, {
									"case":	273,
									"scores":	[-8.72026734699778]
								}, {
									"case":	274,
									"scores":	[-8.72026734699778]
								}, {
									"case":	275,
									"scores":	[-8.72026734699778]
								}, {
									"case":	276,
									"scores":	[-8.72026734699778]
								}, {
									"case":	277,
									"scores":	[-8.72026734699778]
								}, {
									"case":	278,
									"scores":	[-8.72026734699778]
								}, {
									"case":	279,
									"scores":	[-8.72026734699778]
								}, {
									"case":	280,
									"scores":	[-8.72026734699778]
								}, {
									"case":	281,
									"scores":	[-8.72026734699778]
								}, {
									"case":	282,
									"scores":	[-8.72026734699778]
								}, {
									"case":	283,
									"scores":	[-8.72026734699778]
								}, {
									"case":	284,
									"scores":	[-8.72026734699778]
								}, {
									"case":	285,
									"scores":	[-8.72026734699778]
								}, {
									"case":	286,
									"scores":	[-8.72026734699778]
								}, {
									"case":	287,
									"scores":	[-8.72026734699778]
								}, {
									"case":	288,
									"scores":	[-8.72026734699778]
								}, {
									"case":	289,
									"scores":	[-8.72026734699778]
								}, {
									"case":	290,
									"scores":	[-8.72026734699778]
								}, {
									"case":	291,
									"scores":	[-8.72026734699778]
								}, {
									"case":	292,
									"scores":	[-8.72026734699778]
								}, {
									"case":	293,
									"scores":	[-8.72026734699778]
								}, {
									"case":	294,
									"scores":	[-8.72026734699778]
								}, {
									"case":	295,
									"scores":	[-8.72026734699778]
								}, {
									"case":	296,
									"scores":	[-8.72026734699778]
								}, {
									"case":	297,
									"scores":	[-8.72026734699778]
								}, {
									"case":	298,
									"scores":	[-8.72026734699778]
								}, {
									"case":	299,
									"scores":	[-8.72026734699778]
								}, {
									"case":	300,
									"scores":	[-8.72026734699778]
								}, {
									"case":	301,
									"scores":	[-8.72026734699778]
								}, {
									"case":	302,
									"scores":	[-8.72026734699778]
								}, {
									"case":	303,
									"scores":	[-8.72026734699778]
								}, {
									"case":	304,
									"scores":	[-8.72026734699778]
								}, {
									"case":	305,
									"scores":	[-8.72026734699778]
								}, {
									"case":	306,
									"scores":	[-8.72026734699778]
								}, {
									"case":	307,
									"scores":	[-8.72026734699778]
								}, {
									"case":	308,
									"scores":	[-8.72026734699778]
								}, {
									"case":	309,
									"scores":	[-8.72026734699778]
								}, {
									"case":	310,
									"scores":	[-8.72026734699778]
								}, {
									"case":	311,
									"scores":	[-8.72026734699778]
								}, {
									"case":	312,
									"scores":	[-8.72026734699778]
								}, {
									"case":	313,
									"scores":	[-8.72026734699778]
								}, {
									"case":	314,
									"scores":	[-8.72026734699778]
								}, {
									"case":	315,
									"scores":	[-8.72026734699778]
								}, {
									"case":	316,
									"scores":	[-8.72026734699778]
								}, {
									"case":	317,
									"scores":	[-8.72026734699778]
								}, {
									"case":	318,
									"scores":	[-8.72026734699778]
								}, {
									"case":	319,
									"scores":	[-8.72026734699778]
								}, {
									"case":	320,
									"scores":	[-8.72026734699778]
								}, {
									"case":	321,
									"scores":	[-8.72026734699778]
								}, {
									"case":	322,
									"scores":	[-8.72026734699778]
								}, {
									"case":	323,
									"scores":	[-8.72026734699778]
								}, {
									"case":	324,
									"scores":	[-8.72026734699778]
								}, {
									"case":	325,
									"scores":	[-8.72026734699778]
								}, {
									"case":	326,
									"scores":	[-8.72026734699778]
								}, {
									"case":	327,
									"scores":	[-8.72026734699778]
								}, {
									"case":	328,
									"scores":	[-8.72026734699778]
								}, {
									"case":	329,
									"scores":	[-8.72026734699778]
								}, {
									"case":	330,
									"scores":	[-8.72026734699778]
								}, {
									"case":	331,
									"scores":	[-8.72026734699778]
								}, {
									"case":	332,
									"scores":	[-8.72026734699778]
								}, {
									"case":	333,
									"scores":	[-8.72026734699778]
								}, {
									"case":	334,
									"scores":	[-8.72026734699778]
								}, {
									"case":	335,
									"scores":	[-8.72026734699778]
								}, {
									"case":	336,
									"scores":	[-8.72026734699778]
								}, {
									"case":	337,
									"scores":	[-8.72026734699778]
								}, {
									"case":	338,
									"scores":	[-8.72026734699778]
								}, {
									"case":	339,
									"scores":	[-8.72026734699778]
								}, {
									"case":	340,
									"scores":	[-8.72026734699778]
								}, {
									"case":	341,
									"scores":	[-8.72026734699778]
								}, {
									"case":	342,
									"scores":	[-8.72026734699778]
								}, {
									"case":	343,
									"scores":	[-8.72026734699778]
								}, {
									"case":	344,
									"scores":	[-8.72026734699778]
								}, {
									"case":	345,
									"scores":	[-8.72026734699778]
								}, {
									"case":	346,
									"scores":	[-8.72026734699778]
								}, {
									"case":	347,
									"scores":	[-8.72026734699778]
								}, {
									"case":	348,
									"scores":	[-8.72026734699778]
								}, {
									"case":	349,
									"scores":	[-8.72026734699778]
								}, {
									"case":	350,
									"scores":	[-8.72026734699778]
								}, {
									"case":	351,
									"scores":	[-8.72026734699778]
								}, {
									"case":	352,
									"scores":	[-8.72026734699778]
								}, {
									"case":	353,
									"scores":	[-8.72026734699778]
								}, {
									"case":	354,
									"scores":	[-8.72026734699778]
								}, {
									"case":	355,
									"scores":	[-8.72026734699778]
								}, {
									"case":	356,
									"scores":	[-8.72026734699778]
								}, {
									"case":	357,
									"scores":	[-8.72026734699778]
								}, {
									"case":	358,
									"scores":	[-8.72026734699778]
								}, {
									"case":	359,
									"scores":	[-8.72026734699778]
								}, {
									"case":	360,
									"scores":	[-8.72026734699778]
								}, {
									"case":	361,
									"scores":	[-8.72026734699778]
								}, {
									"case":	362,
									"scores":	[-8.72026734699778]
								}, {
									"case":	363,
									"scores":	[-8.72026734699778]
								}, {
									"case":	364,
									"scores":	[-8.72026734699778]
								}, {
									"case":	365,
									"scores":	[-8.72026734699778]
								}, {
									"case":	366,
									"scores":	[-8.72026734699778]
								}, {
									"case":	367,
									"scores":	[-8.72026734699778]
								}, {
									"case":	368,
									"scores":	[-8.72026734699778]
								}, {
									"case":	369,
									"scores":	[-8.72026734699778]
								}, {
									"case":	370,
									"scores":	[-8.72026734699778]
								}, {
									"case":	371,
									"scores":	[-8.72026734699778]
								}, {
									"case":	372,
									"scores":	[-8.72026734699778]
								}, {
									"case":	373,
									"scores":	[-8.72026734699778]
								}, {
									"case":	374,
									"scores":	[-8.72026734699778]
								}, {
									"case":	375,
									"scores":	[-8.72026734699778]
								}, {
									"case":	376,
									"scores":	[-8.72026734699778]
								}, {
									"case":	377,
									"scores":	[-8.72026734699778]
								}, {
									"case":	378,
									"scores":	[-8.72026734699778]
								}, {
									"case":	379,
									"scores":	[-8.72026734699778]
								}, {
									"case":	380,
									"scores":	[-8.72026734699778]
								}, {
									"case":	381,
									"scores":	[-8.72026734699778]
								}, {
									"case":	382,
									"scores":	[-8.72026734699778]
								}, {
									"case":	383,
									"scores":	[-8.72026734699778]
								}, {
									"case":	384,
									"scores":	[-8.72026734699778]
								}, {
									"case":	385,
									"scores":	[-8.72026734699778]
								}, {
									"case":	386,
									"scores":	[-8.72026734699778]
								}, {
									"case":	387,
									"scores":	[-8.72026734699778]
								}, {
									"case":	388,
									"scores":	[-8.72026734699778]
								}, {
									"case":	389,
									"scores":	[-8.72026734699778]
								}, {
									"case":	390,
									"scores":	[-8.72026734699778]
								}, {
									"case":	391,
									"scores":	[-8.72026734699778]
								}, {
									"case":	392,
									"scores":	[-8.72026734699778]
								}, {
									"case":	393,
									"scores":	[-8.72026734699778]
								}, {
									"case":	394,
									"scores":	[-8.72026734699778]
								}, {
									"case":	395,
									"scores":	[-8.72026734699778]
								}, {
									"case":	396,
									"scores":	[-8.72026734699778]
								}, {
									"case":	397,
									"scores":	[-8.72026734699778]
								}, {
									"case":	398,
									"scores":	[-8.72026734699778]
								}, {
									"case":	399,
									"scores":	[-8.72026734699778]
								}, {
									"case":	400,
									"scores":	[-8.72026734699778]
								}, {
									"case":	401,
									"scores":	[-8.72026734699778]
								}, {
									"case":	402,
									"scores":	[-8.72026734699778]
								}, {
									"case":	403,
									"scores":	[-8.72026734699778]
								}, {
									"case":	404,
									"scores":	[-8.72026734699778]
								}, {
									"case":	405,
									"scores":	[-8.72026734699778]
								}, {
									"case":	406,
									"scores":	[-8.72026734699778]
								}, {
									"case":	407,
									"scores":	[-8.72026734699778]
								}, {
									"case":	408,
									"scores":	[-8.72026734699778]
								}, {
									"case":	409,
									"scores":	[-8.72026734699778]
								}, {
									"case":	410,
									"scores":	[-8.72026734699778]
								}, {
									"case":	411,
									"scores":	[-8.72026734699778]
								}, {
									"case":	412,
									"scores":	[-8.72026734699778]
								}, {
									"case":	413,
									"scores":	[-8.72026734699778]
								}]
						}, {
							"switch":	28,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	188,
							"begin_column":	3,
							"end_line":	202,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L188\", 41, &(clone_orig), sizeof (clone_orig), &(intern), sizeof (intern), &(other), sizeof (other), &(intern->array), sizeof (intern->array), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(other->array), sizeof (other->array), &(other->ce_get_iterator), sizeof (other->ce_get_iterator), &(orig), sizeof (orig), &(intern->ar_flags), sizeof (intern->ar_flags), &(other->ar_flags), sizeof (other->ar_flags), &(tmp), sizeof (tmp), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->debug_info), sizeof (intern->debug_info), &(class_type), sizeof (class_type), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(other->retval), sizeof (other->retval), &(other->pos), sizeof (other->pos), &(other->pos_h), sizeof (other->pos_h), &(other->is_self), sizeof (other->is_self), &(other->fptr_offset_get), sizeof (other->fptr_offset_get), &(other->fptr_offset_set), sizeof (other->fptr_offset_set), &(other->fptr_offset_has), sizeof (other->fptr_offset_has), &(other->fptr_offset_del), sizeof (other->fptr_offset_del), &(other->fptr_count), sizeof (other->fptr_count), &(other->debug_info), sizeof (other->debug_info))) {\n    intern->array = other->array;\n    if ((*orig).value.obj.handlers == &spl_handler_ArrayObject) {\n        do {\n            (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n        } while (0);\n        (intern->array)->refcount__gc = 1;\n        (intern->array)->is_ref__gc = 0;\n        ;\n        ;\n        _array_init((intern->array), 0);\n        zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *));\n    }\n    if ((*orig).value.obj.handlers == &spl_handler_ArrayIterator) {\n        zval_addref_p(other->array);\n    }\n} else {\n    intern->array = orig;\n    zval_addref_p(intern->array);\n    intern->ar_flags |= 16777216 | 67108864;\n}\n", "if ((clone_orig) || __is_neg(\"\", \"L188\", 41, &(clone_orig), sizeof (clone_orig), &(intern), sizeof (intern), &(other), sizeof (other), &(intern->array), sizeof (intern->array), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(other->array), sizeof (other->array), &(other->ce_get_iterator), sizeof (other->ce_get_iterator), &(orig), sizeof (orig), &(intern->ar_flags), sizeof (intern->ar_flags), &(other->ar_flags), sizeof (other->ar_flags), &(tmp), sizeof (tmp), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->debug_info), sizeof (intern->debug_info), &(class_type), sizeof (class_type), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(other->retval), sizeof (other->retval), &(other->pos), sizeof (other->pos), &(other->pos_h), sizeof (other->pos_h), &(other->is_self), sizeof (other->is_self), &(other->fptr_offset_get), sizeof (other->fptr_offset_get), &(other->fptr_offset_set), sizeof (other->fptr_offset_set), &(other->fptr_offset_has), sizeof (other->fptr_offset_has), &(other->fptr_offset_del), sizeof (other->fptr_offset_del), &(other->fptr_count), sizeof (other->fptr_count), &(other->debug_info), sizeof (other->debug_info))) {\n    intern->array = other->array;\n    if ((*orig).value.obj.handlers == &spl_handler_ArrayObject) {\n        do {\n            (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n        } while (0);\n        (intern->array)->refcount__gc = 1;\n        (intern->array)->is_ref__gc = 0;\n        ;\n        ;\n        _array_init((intern->array), 0);\n        zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *));\n    }\n    if ((*orig).value.obj.handlers == &spl_handler_ArrayIterator) {\n        zval_addref_p(other->array);\n    }\n} else {\n    intern->array = orig;\n    zval_addref_p(intern->array);\n    intern->ar_flags |= 16777216 | 67108864;\n}\n", "if ((clone_orig) && !__is_neg(\"\", \"L188\", 41, &(clone_orig), sizeof (clone_orig), &(intern), sizeof (intern), &(other), sizeof (other), &(intern->array), sizeof (intern->array), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(other->array), sizeof (other->array), &(other->ce_get_iterator), sizeof (other->ce_get_iterator), &(orig), sizeof (orig), &(intern->ar_flags), sizeof (intern->ar_flags), &(other->ar_flags), sizeof (other->ar_flags), &(tmp), sizeof (tmp), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->debug_info), sizeof (intern->debug_info), &(class_type), sizeof (class_type), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(other->retval), sizeof (other->retval), &(other->pos), sizeof (other->pos), &(other->pos_h), sizeof (other->pos_h), &(other->is_self), sizeof (other->is_self), &(other->fptr_offset_get), sizeof (other->fptr_offset_get), &(other->fptr_offset_set), sizeof (other->fptr_offset_set), &(other->fptr_offset_has), sizeof (other->fptr_offset_has), &(other->fptr_offset_del), sizeof (other->fptr_offset_del), &(other->fptr_count), sizeof (other->fptr_count), &(other->debug_info), sizeof (other->debug_info))) {\n    intern->array = other->array;\n    if ((*orig).value.obj.handlers == &spl_handler_ArrayObject) {\n        do {\n            (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n        } while (0);\n        (intern->array)->refcount__gc = 1;\n        (intern->array)->is_ref__gc = 0;\n        ;\n        ;\n        _array_init((intern->array), 0);\n        zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *));\n    }\n    if ((*orig).value.obj.handlers == &spl_handler_ArrayIterator) {\n        zval_addref_p(other->array);\n    }\n} else {\n    intern->array = orig;\n    zval_addref_p(intern->array);\n    intern->ar_flags |= 16777216 | 67108864;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.3266619195281439, -5.971575420028147, -5.971575420028147, -6.5759172505281462, -6.4343671695281444, -4.908313739528146, -6.9444810295281449, -5.3912550295281445, -6.4622462405281453, -6.557155929528145, -6.3348483195281453, -7.1072543595281452, -7.1072543595281452, -7.3150440295281438, -7.0845500195281446, -7.3150440295281438, -6.7959219195281442, -6.7901992195281444, -7.1072543595281452, -7.1072543595281452, -7.1072543595281452, -7.1072543595281452, -6.0323111195281447, -7.0264159295281452, -7.0264159295281452, -7.0264159295281452, -7.0264159295281452, -7.0264159295281452, -7.3150440295281438, -6.557155929528145, -6.557155929528145, -7.3150440295281438, -7.3150440295281438, -6.557155929528145, -6.557155929528145, -7.0264159295281452, -7.0264159295281452, -7.0264159295281452, -7.0264159295281452, -7.0264159295281452, -7.3150440295281438]
								}, {
									"case":	2,
									"scores":	[-5.2665645754281458, -4.9114780759281462, -4.9114780759281462, -5.5158199064281463, -5.3742698254281454, -3.8482163954281456, -5.8843836854281459, -4.3311576854281455, -5.4021488964281463, -5.497058585428146, -5.2747509754281463, -6.0471570154281462, -6.0471570154281462, -6.2549466854281466, -6.0244526754281456, -6.2549466854281466, -5.7358245754281461, -5.7301018754281463, -6.0471570154281462, -6.0471570154281462, -6.0471570154281462, -6.0471570154281462, -4.9722137754281466, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -6.2549466854281466, -5.497058585428146, -5.497058585428146, -6.2549466854281466, -6.2549466854281466, -5.497058585428146, -5.497058585428146, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -6.2549466854281466]
								}, {
									"case":	3,
									"scores":	[-5.2665645754281458, -4.9114780759281462, -4.9114780759281462, -5.5158199064281463, -5.3742698254281454, -3.8482163954281456, -5.8843836854281459, -4.3311576854281455, -5.4021488964281463, -5.497058585428146, -5.2747509754281463, -6.0471570154281462, -6.0471570154281462, -6.2549466854281466, -6.0244526754281456, -6.2549466854281466, -5.7358245754281461, -5.7301018754281463, -6.0471570154281462, -6.0471570154281462, -6.0471570154281462, -6.0471570154281462, -4.9722137754281466, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -6.2549466854281466, -5.497058585428146, -5.497058585428146, -6.2549466854281466, -6.2549466854281466, -5.497058585428146, -5.497058585428146, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -5.9663185854281462, -6.2549466854281466]
								}]
						}, {
							"switch":	35,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	188,
							"begin_column":	3,
							"end_line":	202,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L188\", 41, &(clone_orig), sizeof (clone_orig), &(intern), sizeof (intern), &(other), sizeof (other), &(intern->array), sizeof (intern->array), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(other->array), sizeof (other->array), &(other->ce_get_iterator), sizeof (other->ce_get_iterator), &(orig), sizeof (orig), &(intern->ar_flags), sizeof (intern->ar_flags), &(other->ar_flags), sizeof (other->ar_flags), &(tmp), sizeof (tmp), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->debug_info), sizeof (intern->debug_info), &(class_type), sizeof (class_type), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(other->retval), sizeof (other->retval), &(other->pos), sizeof (other->pos), &(other->pos_h), sizeof (other->pos_h), &(other->is_self), sizeof (other->is_self), &(other->fptr_offset_get), sizeof (other->fptr_offset_get), &(other->fptr_offset_set), sizeof (other->fptr_offset_set), &(other->fptr_offset_has), sizeof (other->fptr_offset_has), &(other->fptr_offset_del), sizeof (other->fptr_offset_del), &(other->fptr_count), sizeof (other->fptr_count), &(other->debug_info), sizeof (other->debug_info)))\n    if (clone_orig) {\n        intern->array = other->array;\n        if ((*orig).value.obj.handlers == &spl_handler_ArrayObject) {\n            do {\n                (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n            } while (0);\n            (intern->array)->refcount__gc = 1;\n            (intern->array)->is_ref__gc = 0;\n            ;\n            ;\n            _array_init((intern->array), 0);\n            zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *));\n        }\n        if ((*orig).value.obj.handlers == &spl_handler_ArrayIterator) {\n            zval_addref_p(other->array);\n        }\n    } else {\n        intern->array = orig;\n        zval_addref_p(intern->array);\n        intern->ar_flags |= 16777216 | 67108864;\n    }\n", "if (!__is_neg(\"\", \"L188\", 41, &(clone_orig), sizeof (clone_orig), &(intern), sizeof (intern), &(other), sizeof (other), &(intern->array), sizeof (intern->array), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(other->array), sizeof (other->array), &(other->ce_get_iterator), sizeof (other->ce_get_iterator), &(orig), sizeof (orig), &(intern->ar_flags), sizeof (intern->ar_flags), &(other->ar_flags), sizeof (other->ar_flags), &(tmp), sizeof (tmp), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->debug_info), sizeof (intern->debug_info), &(class_type), sizeof (class_type), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(other->retval), sizeof (other->retval), &(other->pos), sizeof (other->pos), &(other->pos_h), sizeof (other->pos_h), &(other->is_self), sizeof (other->is_self), &(other->fptr_offset_get), sizeof (other->fptr_offset_get), &(other->fptr_offset_set), sizeof (other->fptr_offset_set), &(other->fptr_offset_has), sizeof (other->fptr_offset_has), &(other->fptr_offset_del), sizeof (other->fptr_offset_del), &(other->fptr_count), sizeof (other->fptr_count), &(other->debug_info), sizeof (other->debug_info)) && (clone_orig)) {\n    intern->array = other->array;\n    if ((*orig).value.obj.handlers == &spl_handler_ArrayObject) {\n        do {\n            (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n        } while (0);\n        (intern->array)->refcount__gc = 1;\n        (intern->array)->is_ref__gc = 0;\n        ;\n        ;\n        _array_init((intern->array), 0);\n        zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *));\n    }\n    if ((*orig).value.obj.handlers == &spl_handler_ArrayIterator) {\n        zval_addref_p(other->array);\n    }\n} else {\n    intern->array = orig;\n    zval_addref_p(intern->array);\n    intern->ar_flags |= 16777216 | 67108864;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-11.290487816997778, -10.93540131749778, -10.93540131749778, -11.539743147997779, -11.398193066997779, -9.87213963699778, -11.908306926997779, -10.355080926997779, -11.426072137997778, -11.52098182699778, -11.29867421699778, -12.07108025699778, -12.07108025699778, -12.278869926997778, -12.048375916997779, -12.278869926997778, -11.75974781699778, -11.754025116997779, -12.07108025699778, -12.07108025699778, -12.07108025699778, -12.07108025699778, -10.996137016997778, -11.99024182699778, -11.99024182699778, -11.99024182699778, -11.99024182699778, -11.99024182699778, -12.278869926997778, -11.52098182699778, -11.52098182699778, -12.278869926997778, -12.278869926997778, -11.52098182699778, -11.52098182699778, -11.99024182699778, -11.99024182699778, -11.99024182699778, -11.99024182699778, -11.99024182699778, -12.278869926997778]
								}, {
									"case":	2,
									"scores":	[-10.979754816997779, -10.624668317497779, -10.624668317497779, -11.22901014799778, -11.08746006699778, -9.56140663699778, -11.597573926997779, -10.04434792699778, -11.115339137997779, -11.21024882699778, -10.987941216997779, -11.760347256997779, -11.760347256997779, -11.968136926997779, -11.73764291699778, -11.968136926997779, -11.44901481699778, -11.44329211699778, -11.760347256997779, -11.760347256997779, -11.760347256997779, -11.760347256997779, -10.685404016997779, -11.679508826997779, -11.679508826997779, -11.679508826997779, -11.679508826997779, -11.679508826997779, -11.968136926997779, -11.21024882699778, -11.21024882699778, -11.968136926997779, -11.968136926997779, -11.21024882699778, -11.21024882699778, -11.679508826997779, -11.679508826997779, -11.679508826997779, -11.679508826997779, -11.679508826997779, -11.968136926997779]
								}]
						}]
				}, {
					"line":	181,
					"switches":	[{
							"switch":	19,
							"types":	[[], [], [], [], [], [], [], [], [], [227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [], [], [], [], []],
							"begin_line":	182,
							"begin_column":	0,
							"end_line":	182,
							"end_column":	0,
							"patch_codes":	["(intern->array)->is_ref__gc = (-16777217)", "(intern->array)->is_ref__gc = (-50397184)", "(intern->array)->is_ref__gc = (0)", "(intern->array)->is_ref__gc = (1)", "(intern->array)->is_ref__gc = (1048576)", "(intern->array)->is_ref__gc = (131072)", "(intern->array)->is_ref__gc = (16777216)", "(intern->array)->is_ref__gc = (262144)", "(intern->array)->is_ref__gc = (4)", "(intern->array)->is_ref__gc = (5)", "(intern->array)->is_ref__gc = (50397183)", "(intern->array)->is_ref__gc = (524288)", "(intern->array)->is_ref__gc = (6)", "(intern->array)->is_ref__gc = (64)", "(intern->array)->is_ref__gc = (65536)", "(intern->array)->is_ref__gc = (67108864)", "(intern->array)->is_ref__gc = (83886080)", "(intern->array)->refcount__gc = (-16777217)", "(intern->array)->refcount__gc = (-50397184)", "(intern->array)->refcount__gc = (0)", "(intern->array)->refcount__gc = (1)", "(intern->array)->refcount__gc = (1048576)", "(intern->array)->refcount__gc = (131072)", "(intern->array)->refcount__gc = (16777216)", "(intern->array)->refcount__gc = (262144)", "(intern->array)->refcount__gc = (4)", "(intern->array)->refcount__gc = (5)", "(intern->array)->refcount__gc = (50397183)", "(intern->array)->refcount__gc = (524288)", "(intern->array)->refcount__gc = (6)", "(intern->array)->refcount__gc = (64)", "(intern->array)->refcount__gc = (65536)", "(intern->array)->refcount__gc = (67108864)", "(intern->array)->refcount__gc = (83886080)", "_array_init(((intern)->array), 0)", "_array_init(((orig)), 0)", "_array_init(((tmp)), 0)", "_efree(((intern)->debug_info))", "_efree(((orig)))", "_efree(((tmp)))", "_zval_copy_ctor((&(*(orig))))", "_zval_copy_ctor((&(*(tmp))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((orig)))", "_zval_copy_ctor(((tmp)))", "_zval_copy_ctor_func((orig))", "_zval_copy_ctor_func((tmp))", "_zval_dtor(((orig)))", "_zval_dtor(((tmp)))", "_zval_dtor_func((orig))", "_zval_dtor_func((tmp))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(orig)))", "_zval_ptr_dtor((&(tmp)))", "convert_to_boolean((orig))", "convert_to_boolean((tmp))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((orig))", "gc_remove_zval_from_buffer((tmp))", "gc_zval_check_possible_root(((orig)))", "gc_zval_check_possible_root(((tmp)))", "gc_zval_possible_root((orig))", "gc_zval_possible_root((tmp))", "i_zval_ptr_dtor((orig))", "i_zval_ptr_dtor((tmp))", "inherited = (-16777217)", "inherited = (-50397184)", "inherited = (0)", "inherited = (1)", "inherited = (1048576)", "inherited = (131072)", "inherited = (16777216)", "inherited = (262144)", "inherited = (4)", "inherited = (5)", "inherited = (50397183)", "inherited = (524288)", "inherited = (6)", "inherited = (64)", "inherited = (65536)", "inherited = (67108864)", "inherited = (83886080)", "inherited = (clone_orig)", "inherited = (inherited)", "intern = (intern)", "intern->ar_flags = (-16777217)", "intern->ar_flags = (-50397184)", "intern->ar_flags = (0)", "intern->ar_flags = (1)", "intern->ar_flags = (1048576)", "intern->ar_flags = (131072)", "intern->ar_flags = (16777216)", "intern->ar_flags = (262144)", "intern->ar_flags = (4)", "intern->ar_flags = (5)", "intern->ar_flags = (50397183)", "intern->ar_flags = (524288)", "intern->ar_flags = (6)", "intern->ar_flags = (64)", "intern->ar_flags = (65536)", "intern->ar_flags = (67108864)", "intern->ar_flags = (83886080)", "intern->ar_flags = (clone_orig)", "intern->ar_flags = (inherited)", "intern->array = (intern)->array", "intern->array = (orig)", "intern->array = (tmp)", "intern->ce_get_iterator = (class_type)", "intern->ce_get_iterator = (intern)->ce_get_iterator", "intern->ce_get_iterator = (parent)", "memset((intern), 0, sizeof(spl_array_object))", "object_properties_init(&(intern)->std, class_type)", "object_properties_init(&intern->std, (class_type))", "object_properties_init(&intern->std, (parent))", "parent = (class_type)->parent", "parent = (class_type)", "parent = (parent)->parent", "parent = (parent)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(orig)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(tmp)))->name)", "rebuild_object_properties(&(intern)->std)", "retval.handle = (-16777217)", "retval.handle = (-50397184)", "retval.handle = (0)", "retval.handle = (1)", "retval.handle = (1048576)", "retval.handle = (131072)", "retval.handle = (16777216)", "retval.handle = (262144)", "retval.handle = (4)", "retval.handle = (5)", "retval.handle = (50397183)", "retval.handle = (524288)", "retval.handle = (6)", "retval.handle = (64)", "retval.handle = (65536)", "retval.handle = (67108864)", "retval.handle = (83886080)", "retval.handle = zend_objects_store_put((intern), (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "spl_register_std_class(&(class_type), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(class_type), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_std_class(&(parent), \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&(parent), \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&(class_type), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&(parent), spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (class_type), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, (parent), \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements((class_type), 1, spl_ce_Countable)", "zend_class_implements((class_type), 1, spl_ce_RecursiveIterator)", "zend_class_implements((class_type), 1, spl_ce_SeekableIterator)", "zend_class_implements((class_type), 1, zend_ce_aggregate)", "zend_class_implements((class_type), 1, zend_ce_arrayaccess)", "zend_class_implements((class_type), 1, zend_ce_iterator)", "zend_class_implements((class_type), 1, zend_ce_serializable)", "zend_class_implements((parent), 1, spl_ce_Countable)", "zend_class_implements((parent), 1, spl_ce_RecursiveIterator)", "zend_class_implements((parent), 1, spl_ce_SeekableIterator)", "zend_class_implements((parent), 1, zend_ce_aggregate)", "zend_class_implements((parent), 1, zend_ce_arrayaccess)", "zend_class_implements((parent), 1, zend_ce_iterator)", "zend_class_implements((parent), 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_ArrayIterator, 1, (parent))", "zend_class_implements(spl_ce_ArrayObject, 1, (class_type))", "zend_class_implements(spl_ce_ArrayObject, 1, (parent))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (class_type))", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, (parent))", "zend_declare_class_constant_long((class_type), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((class_type), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((class_type), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long((parent), \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long((parent), \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_declare_class_constant_long((parent), \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(orig)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(tmp)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(orig)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(tmp)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_find(&(class_type)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(class_type)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(class_type)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(class_type)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(class_type)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(class_type)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(class_type)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(class_type)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(class_type)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(class_type)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_hash_find(&(parent)->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&(parent)->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&(parent)->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&(parent)->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&(parent)->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&(parent)->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&(parent)->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&(parent)->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&(parent)->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&(parent)->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_init(&(intern)->std, class_type)", "zend_object_std_init(&intern->std, (class_type))", "zend_object_std_init(&intern->std, (parent))", "zend_throw_exception((class_type), \"Function expects exactly one argument\", 0)", "zend_throw_exception((class_type), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception((parent), \"Function expects exactly one argument\", 0)", "zend_throw_exception((parent), \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex((class_type), 0, \"Empty serialized string cannot be empty\")", "zend_throw_exception_ex((parent), 0, \"Empty serialized string cannot be empty\")", "zval_add_ref(&(orig))", "zval_add_ref(&(tmp))", "zval_addref_p((intern)->array)", "zval_addref_p((orig))", "zval_addref_p((tmp))", "zval_delref_p(((orig)))", "zval_delref_p(((tmp)))", "zval_set_isref_p((orig))", "zval_set_isref_p((tmp))", "zval_set_refcount_p((orig), 1)", "zval_set_refcount_p((tmp), 1)", "zval_unset_isref_p((orig))", "zval_unset_isref_p((tmp))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->array)->is_ref__gc = 0", "(intern->array)->refcount__gc = 1", "_array_init((intern->array), 0)", "class_type->get_iterator = spl_array_get_iterator", "exit(1)", "inherited = 1", "intern = _emalloc((sizeof(spl_array_object)))", "intern->ar_flags = 0", "intern->array = orig", "intern->ce_get_iterator = spl_ce_ArrayIterator", "intern->debug_info = ((void *)0)", "intern->fptr_count = ((void *)0)", "intern->fptr_offset_del = ((void *)0)", "intern->fptr_offset_get = ((void *)0)", "intern->fptr_offset_has = ((void *)0)", "intern->fptr_offset_set = ((void *)0)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "memset(intern, 0, sizeof(spl_array_object))", "object_properties_init(&intern->std, class_type)", "parent = parent->parent", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "retval.handle = zend_objects_store_put(intern, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)spl_array_object_free_storage, ((void *)0))", "retval.handlers = &spl_handler_ArrayIterator", "retval.handlers = &spl_handler_ArrayObject", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_find(&class_type->function_table, \"count\", sizeof (\"count\"), (void **)&intern->fptr_count)", "zend_hash_find(&class_type->function_table, \"current\", sizeof (\"current\"), (void **)&class_type->iterator_funcs.zf_current)", "zend_hash_find(&class_type->function_table, \"key\", sizeof (\"key\"), (void **)&class_type->iterator_funcs.zf_key)", "zend_hash_find(&class_type->function_table, \"next\", sizeof (\"next\"), (void **)&class_type->iterator_funcs.zf_next)", "zend_hash_find(&class_type->function_table, \"offsetexists\", sizeof (\"offsetexists\"), (void **)&intern->fptr_offset_has)", "zend_hash_find(&class_type->function_table, \"offsetget\", sizeof (\"offsetget\"), (void **)&intern->fptr_offset_get)", "zend_hash_find(&class_type->function_table, \"offsetset\", sizeof (\"offsetset\"), (void **)&intern->fptr_offset_set)", "zend_hash_find(&class_type->function_table, \"offsetunset\", sizeof (\"offsetunset\"), (void **)&intern->fptr_offset_del)", "zend_hash_find(&class_type->function_table, \"rewind\", sizeof (\"rewind\"), (void **)&class_type->iterator_funcs.zf_rewind)", "zend_hash_find(&class_type->function_table, \"valid\", sizeof (\"valid\"), (void **)&class_type->iterator_funcs.zf_valid)", "zend_object_std_init(&intern->std, class_type)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	2,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	3,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	4,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	5,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	6,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	7,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	8,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	9,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	10,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	11,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	12,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	13,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	14,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	15,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	16,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	17,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	18,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	19,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	20,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	21,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	22,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	23,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	24,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	25,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	26,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	27,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	28,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	29,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	30,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	31,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	32,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	33,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	34,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	35,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	36,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	37,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	38,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	39,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	40,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	41,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	42,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	43,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	44,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	45,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	46,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	47,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	48,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	49,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	50,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	51,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	52,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	53,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	54,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	55,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	56,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	57,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	58,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	59,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	60,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	61,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	62,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	63,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	64,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	65,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	66,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	67,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	68,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	69,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	70,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	71,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	72,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	73,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	74,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	75,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	76,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	77,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	78,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	79,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	80,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	81,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	82,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	83,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	84,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	85,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	86,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	87,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	88,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	89,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	90,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	91,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	92,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	93,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	94,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	95,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	96,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	97,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	98,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	99,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	100,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	101,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	102,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	103,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	104,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	105,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	106,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	107,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	108,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	109,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	110,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	111,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	112,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	113,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	114,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	115,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	116,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	117,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	118,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	119,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	120,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	121,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	122,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	123,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	124,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	125,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	126,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	127,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	128,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	129,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	130,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	131,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	132,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	133,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	134,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	135,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	136,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	137,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	138,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	139,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	140,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	141,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	142,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	143,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	144,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	145,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	146,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	147,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	148,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	149,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	150,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	151,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	152,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	153,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	154,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	155,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	156,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	157,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	158,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	159,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	160,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	161,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	162,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	163,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	164,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	165,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	166,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	167,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	168,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	169,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	170,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	171,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	172,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	173,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	174,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	175,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	176,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	177,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	178,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	179,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	180,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	181,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	182,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	183,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	184,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	185,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	186,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	187,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	188,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	189,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	190,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	191,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	192,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	193,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	194,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	195,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	196,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	197,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	198,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	199,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	200,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	201,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	202,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	203,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	204,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	205,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	206,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	207,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	208,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	209,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	210,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	211,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	212,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	213,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	214,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	215,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	216,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	217,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	218,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	219,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	220,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	221,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	222,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	223,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	224,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	225,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	226,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	227,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	228,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	229,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	230,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	231,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	232,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	233,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	234,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	235,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	236,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	237,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	238,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	239,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	240,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	241,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	242,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	243,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	244,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	245,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	246,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	247,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	248,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	249,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	250,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	251,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	252,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	253,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	254,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	255,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	256,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	257,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	258,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	259,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	260,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	261,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	262,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	263,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	264,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	265,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	266,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	267,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	268,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	269,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	270,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	271,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	272,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	273,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	274,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	275,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	276,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	277,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	278,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	279,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	280,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	281,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	282,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	283,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	284,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	285,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	286,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	287,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	288,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	289,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	290,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	291,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	292,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	293,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	294,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	295,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	296,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	297,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	298,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	299,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	300,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	301,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	302,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	303,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	304,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	305,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	306,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	307,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	308,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	309,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	310,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	311,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	312,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	313,
									"scores":	[-8.8010781762678558]
								}]
						}, {
							"switch":	20,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	182,
							"begin_column":	2,
							"end_line":	207,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L182\", 97, &(orig), sizeof (orig), &(intern), sizeof (intern), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(intern->ar_flags), sizeof (intern->ar_flags), &(class_type), sizeof (class_type), &(clone_orig), sizeof (clone_orig), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(tmp), sizeof (tmp), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(spl_ce_ArrayIterator->type), sizeof (spl_ce_ArrayIterator->type), &(spl_ce_ArrayIterator->name), sizeof (spl_ce_ArrayIterator->name), &(spl_ce_ArrayIterator->name_length), sizeof (spl_ce_ArrayIterator->name_length), &(spl_ce_ArrayIterator->parent), sizeof (spl_ce_ArrayIterator->parent), &(spl_ce_ArrayIterator->refcount), sizeof (spl_ce_ArrayIterator->refcount), &(spl_ce_ArrayIterator->ce_flags), sizeof (spl_ce_ArrayIterator->ce_flags), &(spl_ce_ArrayIterator->default_properties_table), sizeof (spl_ce_ArrayIterator->default_properties_table), &(spl_ce_ArrayIterator->default_static_members_table), sizeof (spl_ce_ArrayIterator->default_static_members_table), &(spl_ce_ArrayIterator->static_members_table), sizeof (spl_ce_ArrayIterator->static_members_table), &(spl_ce_ArrayIterator->default_properties_count), sizeof (spl_ce_ArrayIterator->default_properties_count), &(spl_ce_ArrayIterator->default_static_members_count), sizeof (spl_ce_ArrayIterator->default_static_members_count), &(spl_ce_ArrayIterator->constructor), sizeof (spl_ce_ArrayIterator->constructor), &(spl_ce_ArrayIterator->destructor), sizeof (spl_ce_ArrayIterator->destructor), &(spl_ce_ArrayIterator->clone), sizeof (spl_ce_ArrayIterator->clone), &(spl_ce_ArrayIterator->__get), sizeof (spl_ce_ArrayIterator->__get), &(spl_ce_ArrayIterator->__set), sizeof (spl_ce_ArrayIterator->__set), &(spl_ce_ArrayIterator->__unset), sizeof (spl_ce_ArrayIterator->__unset), &(spl_ce_ArrayIterator->__isset), sizeof (spl_ce_ArrayIterator->__isset), &(spl_ce_ArrayIterator->__call), sizeof (spl_ce_ArrayIterator->__call), &(spl_ce_ArrayIterator->__callstatic), sizeof (spl_ce_ArrayIterator->__callstatic), &(spl_ce_ArrayIterator->__tostring), sizeof (spl_ce_ArrayIterator->__tostring), &(spl_ce_ArrayIterator->serialize_func), sizeof (spl_ce_ArrayIterator->serialize_func), &(spl_ce_ArrayIterator->unserialize_func), sizeof (spl_ce_ArrayIterator->unserialize_func), &(spl_ce_ArrayIterator->create_object), sizeof (spl_ce_ArrayIterator->create_object), &(spl_ce_ArrayIterator->get_iterator), sizeof (spl_ce_ArrayIterator->get_iterator), &(spl_ce_ArrayIterator->interface_gets_implemented), sizeof (spl_ce_ArrayIterator->interface_gets_implemented), &(spl_ce_ArrayIterator->get_static_method), sizeof (spl_ce_ArrayIterator->get_static_method), &(spl_ce_ArrayIterator->serialize), sizeof (spl_ce_ArrayIterator->serialize), &(spl_ce_ArrayIterator->unserialize), sizeof (spl_ce_ArrayIterator->unserialize), &(spl_ce_ArrayIterator->interfaces), sizeof (spl_ce_ArrayIterator->interfaces), &(spl_ce_ArrayIterator->num_interfaces), sizeof (spl_ce_ArrayIterator->num_interfaces), &(spl_ce_ArrayIterator->traits), sizeof (spl_ce_ArrayIterator->traits), &(spl_ce_ArrayIterator->num_traits), sizeof (spl_ce_ArrayIterator->num_traits), &(spl_ce_ArrayIterator->trait_aliases), sizeof (spl_ce_ArrayIterator->trait_aliases), &(spl_ce_ArrayIterator->trait_precedences), sizeof (spl_ce_ArrayIterator->trait_precedences), &(spl_ce_ArrayIterator->type), sizeof (spl_ce_ArrayIterator->type), &(spl_ce_ArrayIterator->name), sizeof (spl_ce_ArrayIterator->name), &(spl_ce_ArrayIterator->name_length), sizeof (spl_ce_ArrayIterator->name_length), &(spl_ce_ArrayIterator->parent), sizeof (spl_ce_ArrayIterator->parent), &(spl_ce_ArrayIterator->refcount), sizeof (spl_ce_ArrayIterator->refcount), &(spl_ce_ArrayIterator->ce_flags), sizeof (spl_ce_ArrayIterator->ce_flags), &(spl_ce_ArrayIterator->default_properties_table), sizeof (spl_ce_ArrayIterator->default_properties_table), &(spl_ce_ArrayIterator->default_static_members_table), sizeof (spl_ce_ArrayIterator->default_static_members_table), &(spl_ce_ArrayIterator->static_members_table), sizeof (spl_ce_ArrayIterator->static_members_table), &(spl_ce_ArrayIterator->default_properties_count), sizeof (spl_ce_ArrayIterator->default_properties_count), &(spl_ce_ArrayIterator->default_static_members_count), sizeof (spl_ce_ArrayIterator->default_static_members_count), &(spl_ce_ArrayIterator->constructor), sizeof (spl_ce_ArrayIterator->constructor), &(spl_ce_ArrayIterator->destructor), sizeof (spl_ce_ArrayIterator->destructor), &(spl_ce_ArrayIterator->clone), sizeof (spl_ce_ArrayIterator->clone), &(spl_ce_ArrayIterator->__get), sizeof (spl_ce_ArrayIterator->__get), &(spl_ce_ArrayIterator->__set), sizeof (spl_ce_ArrayIterator->__set), &(spl_ce_ArrayIterator->__unset), sizeof (spl_ce_ArrayIterator->__unset), &(spl_ce_ArrayIterator->__isset), sizeof (spl_ce_ArrayIterator->__isset), &(spl_ce_ArrayIterator->__call), sizeof (spl_ce_ArrayIterator->__call), &(spl_ce_ArrayIterator->__callstatic), sizeof (spl_ce_ArrayIterator->__callstatic), &(spl_ce_ArrayIterator->__tostring), sizeof (spl_ce_ArrayIterator->__tostring), &(spl_ce_ArrayIterator->serialize_func), sizeof (spl_ce_ArrayIterator->serialize_func), &(spl_ce_ArrayIterator->unserialize_func), sizeof (spl_ce_ArrayIterator->unserialize_func), &(spl_ce_ArrayIterator->create_object), sizeof (spl_ce_ArrayIterator->create_object), &(spl_ce_ArrayIterator->get_iterator), sizeof (spl_ce_ArrayIterator->get_iterator), &(spl_ce_ArrayIterator->interface_gets_implemented), sizeof (spl_ce_ArrayIterator->interface_gets_implemented), &(spl_ce_ArrayIterator->get_static_method), sizeof (spl_ce_ArrayIterator->get_static_method), &(spl_ce_ArrayIterator->serialize), sizeof (spl_ce_ArrayIterator->serialize), &(spl_ce_ArrayIterator->unserialize), sizeof (spl_ce_ArrayIterator->unserialize), &(spl_ce_ArrayIterator->interfaces), sizeof (spl_ce_ArrayIterator->interfaces), &(spl_ce_ArrayIterator->num_interfaces), sizeof (spl_ce_ArrayIterator->num_interfaces), &(spl_ce_ArrayIterator->traits), sizeof (spl_ce_ArrayIterator->traits), &(spl_ce_ArrayIterator->num_traits), sizeof (spl_ce_ArrayIterator->num_traits), &(spl_ce_ArrayIterator->trait_aliases), sizeof (spl_ce_ArrayIterator->trait_aliases), &(spl_ce_ArrayIterator->trait_precedences), sizeof (spl_ce_ArrayIterator->trait_precedences))) {\n    spl_array_object *other = (spl_array_object *)zend_object_store_get_object(orig);\n    intern->ar_flags &= ~50397183;\n    intern->ar_flags |= (other->ar_flags & 50397183);\n    intern->ce_get_iterator = other->ce_get_iterator;\n    if (clone_orig) {\n        intern->array = other->array;\n        if ((*orig).value.obj.handlers == &spl_handler_ArrayObject) {\n            do {\n                (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n            } while (0);\n            (intern->array)->refcount__gc = 1;\n            (intern->array)->is_ref__gc = 0;\n            ;\n            ;\n            _array_init((intern->array), 0);\n            zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *));\n        }\n        if ((*orig).value.obj.handlers == &spl_handler_ArrayIterator) {\n            zval_addref_p(other->array);\n        }\n    } else {\n        intern->array = orig;\n        zval_addref_p(intern->array);\n        intern->ar_flags |= 16777216 | 67108864;\n    }\n} else {\n    do {\n        (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n    } while (0);\n    (intern->array)->refcount__gc = 1;\n    (intern->array)->is_ref__gc = 0;\n    ;\n    ;\n    _array_init((intern->array), 0);\n    intern->ar_flags &= ~16777216;\n}\n", "if ((orig) && !__is_neg(\"\", \"L182\", 97, &(orig), sizeof (orig), &(intern), sizeof (intern), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(spl_ce_ArrayIterator), sizeof (spl_ce_ArrayIterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(intern->ar_flags), sizeof (intern->ar_flags), &(class_type), sizeof (class_type), &(clone_orig), sizeof (clone_orig), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(obj), sizeof (obj), &(tmp), sizeof (tmp), &(parent), sizeof (parent), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_RecursiveArrayIterator), sizeof (spl_ce_RecursiveArrayIterator), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(spl_ce_ArrayObject), sizeof (spl_ce_ArrayObject), &(inherited), sizeof (inherited), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(spl_ce_ArrayIterator->type), sizeof (spl_ce_ArrayIterator->type), &(spl_ce_ArrayIterator->name), sizeof (spl_ce_ArrayIterator->name), &(spl_ce_ArrayIterator->name_length), sizeof (spl_ce_ArrayIterator->name_length), &(spl_ce_ArrayIterator->parent), sizeof (spl_ce_ArrayIterator->parent), &(spl_ce_ArrayIterator->refcount), sizeof (spl_ce_ArrayIterator->refcount), &(spl_ce_ArrayIterator->ce_flags), sizeof (spl_ce_ArrayIterator->ce_flags), &(spl_ce_ArrayIterator->default_properties_table), sizeof (spl_ce_ArrayIterator->default_properties_table), &(spl_ce_ArrayIterator->default_static_members_table), sizeof (spl_ce_ArrayIterator->default_static_members_table), &(spl_ce_ArrayIterator->static_members_table), sizeof (spl_ce_ArrayIterator->static_members_table), &(spl_ce_ArrayIterator->default_properties_count), sizeof (spl_ce_ArrayIterator->default_properties_count), &(spl_ce_ArrayIterator->default_static_members_count), sizeof (spl_ce_ArrayIterator->default_static_members_count), &(spl_ce_ArrayIterator->constructor), sizeof (spl_ce_ArrayIterator->constructor), &(spl_ce_ArrayIterator->destructor), sizeof (spl_ce_ArrayIterator->destructor), &(spl_ce_ArrayIterator->clone), sizeof (spl_ce_ArrayIterator->clone), &(spl_ce_ArrayIterator->__get), sizeof (spl_ce_ArrayIterator->__get), &(spl_ce_ArrayIterator->__set), sizeof (spl_ce_ArrayIterator->__set), &(spl_ce_ArrayIterator->__unset), sizeof (spl_ce_ArrayIterator->__unset), &(spl_ce_ArrayIterator->__isset), sizeof (spl_ce_ArrayIterator->__isset), &(spl_ce_ArrayIterator->__call), sizeof (spl_ce_ArrayIterator->__call), &(spl_ce_ArrayIterator->__callstatic), sizeof (spl_ce_ArrayIterator->__callstatic), &(spl_ce_ArrayIterator->__tostring), sizeof (spl_ce_ArrayIterator->__tostring), &(spl_ce_ArrayIterator->serialize_func), sizeof (spl_ce_ArrayIterator->serialize_func), &(spl_ce_ArrayIterator->unserialize_func), sizeof (spl_ce_ArrayIterator->unserialize_func), &(spl_ce_ArrayIterator->create_object), sizeof (spl_ce_ArrayIterator->create_object), &(spl_ce_ArrayIterator->get_iterator), sizeof (spl_ce_ArrayIterator->get_iterator), &(spl_ce_ArrayIterator->interface_gets_implemented), sizeof (spl_ce_ArrayIterator->interface_gets_implemented), &(spl_ce_ArrayIterator->get_static_method), sizeof (spl_ce_ArrayIterator->get_static_method), &(spl_ce_ArrayIterator->serialize), sizeof (spl_ce_ArrayIterator->serialize), &(spl_ce_ArrayIterator->unserialize), sizeof (spl_ce_ArrayIterator->unserialize), &(spl_ce_ArrayIterator->interfaces), sizeof (spl_ce_ArrayIterator->interfaces), &(spl_ce_ArrayIterator->num_interfaces), sizeof (spl_ce_ArrayIterator->num_interfaces), &(spl_ce_ArrayIterator->traits), sizeof (spl_ce_ArrayIterator->traits), &(spl_ce_ArrayIterator->num_traits), sizeof (spl_ce_ArrayIterator->num_traits), &(spl_ce_ArrayIterator->trait_aliases), sizeof (spl_ce_ArrayIterator->trait_aliases), &(spl_ce_ArrayIterator->trait_precedences), sizeof (spl_ce_ArrayIterator->trait_precedences), &(spl_ce_ArrayIterator->type), sizeof (spl_ce_ArrayIterator->type), &(spl_ce_ArrayIterator->name), sizeof (spl_ce_ArrayIterator->name), &(spl_ce_ArrayIterator->name_length), sizeof (spl_ce_ArrayIterator->name_length), &(spl_ce_ArrayIterator->parent), sizeof (spl_ce_ArrayIterator->parent), &(spl_ce_ArrayIterator->refcount), sizeof (spl_ce_ArrayIterator->refcount), &(spl_ce_ArrayIterator->ce_flags), sizeof (spl_ce_ArrayIterator->ce_flags), &(spl_ce_ArrayIterator->default_properties_table), sizeof (spl_ce_ArrayIterator->default_properties_table), &(spl_ce_ArrayIterator->default_static_members_table), sizeof (spl_ce_ArrayIterator->default_static_members_table), &(spl_ce_ArrayIterator->static_members_table), sizeof (spl_ce_ArrayIterator->static_members_table), &(spl_ce_ArrayIterator->default_properties_count), sizeof (spl_ce_ArrayIterator->default_properties_count), &(spl_ce_ArrayIterator->default_static_members_count), sizeof (spl_ce_ArrayIterator->default_static_members_count), &(spl_ce_ArrayIterator->constructor), sizeof (spl_ce_ArrayIterator->constructor), &(spl_ce_ArrayIterator->destructor), sizeof (spl_ce_ArrayIterator->destructor), &(spl_ce_ArrayIterator->clone), sizeof (spl_ce_ArrayIterator->clone), &(spl_ce_ArrayIterator->__get), sizeof (spl_ce_ArrayIterator->__get), &(spl_ce_ArrayIterator->__set), sizeof (spl_ce_ArrayIterator->__set), &(spl_ce_ArrayIterator->__unset), sizeof (spl_ce_ArrayIterator->__unset), &(spl_ce_ArrayIterator->__isset), sizeof (spl_ce_ArrayIterator->__isset), &(spl_ce_ArrayIterator->__call), sizeof (spl_ce_ArrayIterator->__call), &(spl_ce_ArrayIterator->__callstatic), sizeof (spl_ce_ArrayIterator->__callstatic), &(spl_ce_ArrayIterator->__tostring), sizeof (spl_ce_ArrayIterator->__tostring), &(spl_ce_ArrayIterator->serialize_func), sizeof (spl_ce_ArrayIterator->serialize_func), &(spl_ce_ArrayIterator->unserialize_func), sizeof (spl_ce_ArrayIterator->unserialize_func), &(spl_ce_ArrayIterator->create_object), sizeof (spl_ce_ArrayIterator->create_object), &(spl_ce_ArrayIterator->get_iterator), sizeof (spl_ce_ArrayIterator->get_iterator), &(spl_ce_ArrayIterator->interface_gets_implemented), sizeof (spl_ce_ArrayIterator->interface_gets_implemented), &(spl_ce_ArrayIterator->get_static_method), sizeof (spl_ce_ArrayIterator->get_static_method), &(spl_ce_ArrayIterator->serialize), sizeof (spl_ce_ArrayIterator->serialize), &(spl_ce_ArrayIterator->unserialize), sizeof (spl_ce_ArrayIterator->unserialize), &(spl_ce_ArrayIterator->interfaces), sizeof (spl_ce_ArrayIterator->interfaces), &(spl_ce_ArrayIterator->num_interfaces), sizeof (spl_ce_ArrayIterator->num_interfaces), &(spl_ce_ArrayIterator->traits), sizeof (spl_ce_ArrayIterator->traits), &(spl_ce_ArrayIterator->num_traits), sizeof (spl_ce_ArrayIterator->num_traits), &(spl_ce_ArrayIterator->trait_aliases), sizeof (spl_ce_ArrayIterator->trait_aliases), &(spl_ce_ArrayIterator->trait_precedences), sizeof (spl_ce_ArrayIterator->trait_precedences))) {\n    spl_array_object *other = (spl_array_object *)zend_object_store_get_object(orig);\n    intern->ar_flags &= ~50397183;\n    intern->ar_flags |= (other->ar_flags & 50397183);\n    intern->ce_get_iterator = other->ce_get_iterator;\n    if (clone_orig) {\n        intern->array = other->array;\n        if ((*orig).value.obj.handlers == &spl_handler_ArrayObject) {\n            do {\n                (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n            } while (0);\n            (intern->array)->refcount__gc = 1;\n            (intern->array)->is_ref__gc = 0;\n            ;\n            ;\n            _array_init((intern->array), 0);\n            zend_hash_copy(((*intern->array).type == 4 ? (*intern->array).value.ht : (((*intern->array).type == 5 ? (*intern->array).value.obj.handlers->get_properties((intern->array)) : ((void *)0)))), ((*other->array).type == 4 ? (*other->array).value.ht : (((*other->array).type == 5 ? (*other->array).value.obj.handlers->get_properties((other->array)) : ((void *)0)))), (copy_ctor_func_t)zval_add_ref, &tmp, sizeof(zval *));\n        }\n        if ((*orig).value.obj.handlers == &spl_handler_ArrayIterator) {\n            zval_addref_p(other->array);\n        }\n    } else {\n        intern->array = orig;\n        zval_addref_p(intern->array);\n        intern->ar_flags |= 16777216 | 67108864;\n    }\n} else {\n    do {\n        (intern->array) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(intern->array))->u.buffered = ((void *)0);\n    } while (0);\n    (intern->array)->refcount__gc = 1;\n    (intern->array)->is_ref__gc = 0;\n    ;\n    ;\n    _array_init((intern->array), 0);\n    intern->ar_flags &= ~16777216;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.8579519352281455, -5.0661086847281478, -6.8830365652281458, -6.8830365652281458, -5.4814418962281461, -5.6144993752281449, -5.8316507862281464, -6.6827295131281463, -5.5067941252281463, -5.7560494562281468, -6.4951762352281461, -5.9760541252281456, -5.5149805252281459, -7.0773486865281452, -7.2535995652281446, -7.2535995652281446, -7.2535995652281446, -7.2535995652281446, -5.2089620692281455, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.4951762352281461, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -6.2065481352281466, -5.4152771052281459, -6.4951762352281461, -5.7372881352281464, -5.7372881352281464, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -5.7372881352281464, -5.7372881352281464, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -6.2065481352281466, -5.7372881352281464, -6.2065481352281466, -5.7372881352281464, -6.2065481352281466, -6.2065481352281466, -5.7372881352281464, -6.2065481352281466, -5.4152771052281459, -6.4951762352281461, -5.7372881352281464, -5.7372881352281464, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -5.7372881352281464, -5.7372881352281464, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -6.2065481352281466, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -5.7372881352281464, -6.2065481352281466, -5.7372881352281464, -6.2065481352281466, -5.7372881352281464, -6.2065481352281466, -6.2065481352281466]
								}, {
									"case":	2,
									"scores":	[-3.789155520428146, -4.9973122699281456, -6.8142401504281453, -6.8142401504281453, -5.4126454814281457, -5.5457029604281463, -5.7628543714281459, -6.6139330983281459, -5.4379977104281458, -5.6872530414281464, -6.4263798204281457, -5.9072577104281461, -5.4461841104281463, -7.0085522717281457, -7.184803150428146, -7.184803150428146, -7.184803150428146, -7.184803150428146, -5.140165654428146, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.4263798204281457, -5.668491720428146, -5.668491720428146, -5.668491720428146, -6.1377517204281453, -5.3464806904281463, -6.4263798204281457, -5.668491720428146, -5.668491720428146, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -5.668491720428146, -5.668491720428146, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -5.668491720428146, -5.668491720428146, -5.668491720428146, -5.668491720428146, -5.668491720428146, -5.668491720428146, -6.1377517204281453, -5.668491720428146, -6.1377517204281453, -5.668491720428146, -6.1377517204281453, -6.1377517204281453, -5.668491720428146, -6.1377517204281453, -5.3464806904281463, -6.4263798204281457, -5.668491720428146, -5.668491720428146, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -5.668491720428146, -5.668491720428146, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -6.1377517204281453, -5.668491720428146, -5.668491720428146, -5.668491720428146, -5.668491720428146, -5.668491720428146, -5.668491720428146, -6.1377517204281453, -5.668491720428146, -6.1377517204281453, -5.668491720428146, -6.1377517204281453, -6.1377517204281453]
								}]
						}]
				}, {
					"line":	299,
					"switches":	[]
				}, {
					"line":	300,
					"switches":	[]
				}, {
					"line":	301,
					"switches":	[]
				}, {
					"line":	302,
					"switches":	[]
				}, {
					"line":	309,
					"switches":	[{
							"switch":	36,
							"types":	[[], [], [], [], [162], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [], [], [], [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161], [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [], [], [], [], [], []],
							"begin_line":	310,
							"begin_column":	0,
							"end_line":	310,
							"end_column":	0,
							"patch_codes":	["memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(retval)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_index_find((ht), index, (void **)&retval)", "zend_object_std_dtor(&(intern)->std)", "zend_symtable_find((ht), (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(object)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(offset)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(object)).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(offset)).value.str.len + 1, (void **)&retval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((retval)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((retval)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", index)", "zend_hash_index_find(ht, index, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L310\", 52, &(offset), sizeof (offset), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(type), sizeof (type), &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(retval), sizeof (retval), &(index), sizeof (index), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	2,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	3,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	4,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	5,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	6,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	7,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	8,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	9,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	10,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	11,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	12,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	13,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	14,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	15,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	16,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	17,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	18,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	19,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	20,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	21,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-10.86067697585095, -11.611782657950949, -10.897577805150949, -11.492149402850949, -10.50007757295095, -10.259478718950948, -10.948349095150949, -10.090623578150948, -11.001374696150947, -11.036524492950949, -11.001374696150947, -11.001374696150947, -11.001374696150947, -11.036524492950949, -11.001374696150947, -10.79048557915095, -10.79048557915095, -10.79048557915095, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -10.79048557915095, -10.79048557915095, -10.79048557915095, -11.036524492950949, -11.001374696150947, -10.79048557915095, -10.79048557915095, -11.036524492950949, -10.79048557915095, -11.036524492950949, -11.036524492950949, -10.79048557915095, -11.036524492950949, -10.79048557915095, -10.79048557915095, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -11.036524492950949, -10.79048557915095, -11.036524492950949, -11.001374696150947, -10.79048557915095]
								}]
						}, {
							"switch":	37,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	310,
							"begin_column":	2,
							"end_line":	312,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L310\", 52, &(offset), sizeof (offset), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(type), sizeof (type), &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(retval), sizeof (retval), &(index), sizeof (index), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    return &(executor_globals.uninitialized_zval_ptr);\n}\n", "if ((!offset) || __is_neg(\"\", \"L310\", 52, &(offset), sizeof (offset), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(type), sizeof (type), &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(retval), sizeof (retval), &(index), sizeof (index), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    return &(executor_globals.uninitialized_zval_ptr);\n}\n", "if ((!offset) && !__is_neg(\"\", \"L310\", 52, &(offset), sizeof (offset), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(type), sizeof (type), &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(retval), sizeof (retval), &(index), sizeof (index), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    return &(executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.2048993892281459, -5.2035717033281452, -2.7064596913281442, -5.3189349382281463, -4.7305545373281452, -4.6221247913281456, -4.2378175073281454, -3.4699548203281458, -4.5639907013281453, -4.8526188013281457, -4.5639907013281453, -4.5639907013281453, -4.5639907013281453, -4.8526188013281457, -4.5639907013281453, -4.094730701328146, -4.094730701328146, -4.094730701328146, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.094730701328146, -4.094730701328146, -4.094730701328146, -4.8526188013281457, -4.5639907013281453, -4.094730701328146, -4.094730701328146, -4.8526188013281457, -4.094730701328146, -4.8526188013281457, -4.8526188013281457, -4.094730701328146, -4.8526188013281457, -4.094730701328146, -4.094730701328146, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.8526188013281457, -4.094730701328146, -4.8526188013281457, -4.5639907013281453, -4.094730701328146]
								}, {
									"case":	2,
									"scores":	[-5.7434329463281459, -5.7421052604281462, -3.2449932484281456, -5.8574684953281455, -5.2690880944281453, -5.1606583484281456, -4.7763510644281464, -4.0084883774281455, -5.1025242584281454, -5.3911523584281458, -5.1025242584281454, -5.1025242584281454, -5.1025242584281454, -5.3911523584281458, -5.1025242584281454, -4.633264258428146, -4.633264258428146, -4.633264258428146, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -4.633264258428146, -4.633264258428146, -4.633264258428146, -5.3911523584281458, -5.1025242584281454, -4.633264258428146, -4.633264258428146, -5.3911523584281458, -4.633264258428146, -5.3911523584281458, -5.3911523584281458, -4.633264258428146, -5.3911523584281458, -4.633264258428146, -4.633264258428146, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -4.633264258428146, -5.3911523584281458, -5.1025242584281454, -4.633264258428146]
								}, {
									"case":	3,
									"scores":	[-5.7434329463281459, -5.7421052604281462, -3.2449932484281456, -5.8574684953281455, -5.2690880944281453, -5.1606583484281456, -4.7763510644281464, -4.0084883774281455, -5.1025242584281454, -5.3911523584281458, -5.1025242584281454, -5.1025242584281454, -5.1025242584281454, -5.3911523584281458, -5.1025242584281454, -4.633264258428146, -4.633264258428146, -4.633264258428146, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -4.633264258428146, -4.633264258428146, -4.633264258428146, -5.3911523584281458, -5.1025242584281454, -4.633264258428146, -4.633264258428146, -5.3911523584281458, -4.633264258428146, -5.3911523584281458, -5.3911523584281458, -4.633264258428146, -5.3911523584281458, -4.633264258428146, -4.633264258428146, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -5.3911523584281458, -4.633264258428146, -5.3911523584281458, -5.1025242584281454, -4.633264258428146]
								}]
						}, {
							"switch":	38,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	310,
							"begin_column":	2,
							"end_line":	312,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L310\", 52, &(offset), sizeof (offset), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(type), sizeof (type), &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(retval), sizeof (retval), &(index), sizeof (index), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    if (!offset) {\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.320745767050949, -10.319418081150948, -7.8223060691509483, -10.434781316050948, -9.84640091515095, -9.73797116915095, -9.3536638851509473, -8.58580119815095, -9.67983707915095, -9.96846517915095, -9.67983707915095, -9.67983707915095, -9.67983707915095, -9.96846517915095, -9.67983707915095, -9.21057707915095, -9.21057707915095, -9.21057707915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.21057707915095, -9.21057707915095, -9.21057707915095, -9.96846517915095, -9.67983707915095, -9.21057707915095, -9.21057707915095, -9.96846517915095, -9.21057707915095, -9.96846517915095, -9.96846517915095, -9.21057707915095, -9.96846517915095, -9.21057707915095, -9.21057707915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.96846517915095, -9.21057707915095, -9.96846517915095, -9.67983707915095, -9.21057707915095]
								}]
						}]
				}, {
					"line":	313,
					"switches":	[{
							"switch":	39,
							"types":	[[], [], [], [], [163], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [], [], [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], [], [], [], [], [], []],
							"begin_line":	314,
							"begin_column":	0,
							"end_line":	314,
							"end_column":	0,
							"patch_codes":	["memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(ht, 0, sizeof (*(ht)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(retval)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_index_find((ht), index, (void **)&retval)", "zend_object_std_dtor(&(intern)->std)", "zend_symtable_find((ht), (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(object)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(offset)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(object)).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(offset)).value.str.len + 1, (void **)&retval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((retval)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((retval)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", index)", "zend_hash_index_find(ht, index, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L314\", 19, &(type), sizeof (type), &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset), sizeof (offset), &(retval), sizeof (retval), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.72019932256335]
								}, {
									"case":	2,
									"scores":	[-6.72019932256335]
								}, {
									"case":	3,
									"scores":	[-6.72019932256335]
								}, {
									"case":	4,
									"scores":	[-6.72019932256335]
								}, {
									"case":	5,
									"scores":	[-6.72019932256335]
								}, {
									"case":	6,
									"scores":	[-6.72019932256335]
								}, {
									"case":	7,
									"scores":	[-6.72019932256335]
								}, {
									"case":	8,
									"scores":	[-6.72019932256335]
								}, {
									"case":	9,
									"scores":	[-6.72019932256335]
								}, {
									"case":	10,
									"scores":	[-6.72019932256335]
								}, {
									"case":	11,
									"scores":	[-6.72019932256335]
								}, {
									"case":	12,
									"scores":	[-6.72019932256335]
								}, {
									"case":	13,
									"scores":	[-6.72019932256335]
								}, {
									"case":	14,
									"scores":	[-6.72019932256335]
								}, {
									"case":	15,
									"scores":	[-6.72019932256335]
								}, {
									"case":	16,
									"scores":	[-6.72019932256335]
								}, {
									"case":	17,
									"scores":	[-6.72019932256335]
								}, {
									"case":	18,
									"scores":	[-6.72019932256335]
								}, {
									"case":	19,
									"scores":	[-6.72019932256335]
								}, {
									"case":	20,
									"scores":	[-6.72019932256335]
								}, {
									"case":	21,
									"scores":	[-6.72019932256335]
								}, {
									"case":	22,
									"scores":	[-6.72019932256335]
								}, {
									"case":	23,
									"scores":	[-6.72019932256335]
								}, {
									"case":	24,
									"scores":	[-6.72019932256335]
								}, {
									"case":	25,
									"scores":	[-6.72019932256335]
								}, {
									"case":	26,
									"scores":	[-6.72019932256335]
								}, {
									"case":	27,
									"scores":	[-6.72019932256335]
								}, {
									"case":	28,
									"scores":	[-6.72019932256335]
								}, {
									"case":	29,
									"scores":	[-6.72019932256335]
								}, {
									"case":	30,
									"scores":	[-6.72019932256335]
								}, {
									"case":	31,
									"scores":	[-6.72019932256335]
								}, {
									"case":	32,
									"scores":	[-6.72019932256335]
								}, {
									"case":	33,
									"scores":	[-6.72019932256335]
								}, {
									"case":	34,
									"scores":	[-6.72019932256335]
								}, {
									"case":	35,
									"scores":	[-6.72019932256335]
								}, {
									"case":	36,
									"scores":	[-6.72019932256335]
								}, {
									"case":	37,
									"scores":	[-6.72019932256335]
								}, {
									"case":	38,
									"scores":	[-6.72019932256335]
								}, {
									"case":	39,
									"scores":	[-6.72019932256335]
								}, {
									"case":	40,
									"scores":	[-6.72019932256335]
								}, {
									"case":	41,
									"scores":	[-6.72019932256335]
								}, {
									"case":	42,
									"scores":	[-6.72019932256335]
								}, {
									"case":	43,
									"scores":	[-6.72019932256335]
								}, {
									"case":	44,
									"scores":	[-6.72019932256335]
								}, {
									"case":	45,
									"scores":	[-6.72019932256335]
								}, {
									"case":	46,
									"scores":	[-6.72019932256335]
								}, {
									"case":	47,
									"scores":	[-6.72019932256335]
								}, {
									"case":	48,
									"scores":	[-6.72019932256335]
								}, {
									"case":	49,
									"scores":	[-6.72019932256335]
								}, {
									"case":	50,
									"scores":	[-6.72019932256335]
								}, {
									"case":	51,
									"scores":	[-6.72019932256335]
								}, {
									"case":	52,
									"scores":	[-6.72019932256335]
								}, {
									"case":	53,
									"scores":	[-6.72019932256335]
								}, {
									"case":	54,
									"scores":	[-6.72019932256335]
								}, {
									"case":	55,
									"scores":	[-6.72019932256335]
								}, {
									"case":	56,
									"scores":	[-6.72019932256335]
								}, {
									"case":	57,
									"scores":	[-6.72019932256335]
								}, {
									"case":	58,
									"scores":	[-6.72019932256335]
								}, {
									"case":	59,
									"scores":	[-6.72019932256335]
								}, {
									"case":	60,
									"scores":	[-6.72019932256335]
								}, {
									"case":	61,
									"scores":	[-6.72019932256335]
								}, {
									"case":	62,
									"scores":	[-6.72019932256335]
								}, {
									"case":	63,
									"scores":	[-6.72019932256335]
								}, {
									"case":	64,
									"scores":	[-6.72019932256335]
								}, {
									"case":	65,
									"scores":	[-6.72019932256335]
								}, {
									"case":	66,
									"scores":	[-6.72019932256335]
								}, {
									"case":	67,
									"scores":	[-6.72019932256335]
								}, {
									"case":	68,
									"scores":	[-6.72019932256335]
								}, {
									"case":	69,
									"scores":	[-6.72019932256335]
								}, {
									"case":	70,
									"scores":	[-6.72019932256335]
								}, {
									"case":	71,
									"scores":	[-6.72019932256335]
								}, {
									"case":	72,
									"scores":	[-6.72019932256335]
								}, {
									"case":	73,
									"scores":	[-6.72019932256335]
								}, {
									"case":	74,
									"scores":	[-6.72019932256335]
								}, {
									"case":	75,
									"scores":	[-6.72019932256335]
								}, {
									"case":	76,
									"scores":	[-6.72019932256335]
								}, {
									"case":	77,
									"scores":	[-6.72019932256335]
								}, {
									"case":	78,
									"scores":	[-6.72019932256335]
								}, {
									"case":	79,
									"scores":	[-6.72019932256335]
								}, {
									"case":	80,
									"scores":	[-6.72019932256335]
								}, {
									"case":	81,
									"scores":	[-6.72019932256335]
								}, {
									"case":	82,
									"scores":	[-6.72019932256335]
								}, {
									"case":	83,
									"scores":	[-6.72019932256335]
								}, {
									"case":	84,
									"scores":	[-6.72019932256335]
								}, {
									"case":	85,
									"scores":	[-6.72019932256335]
								}, {
									"case":	86,
									"scores":	[-6.72019932256335]
								}, {
									"case":	87,
									"scores":	[-6.72019932256335]
								}, {
									"case":	88,
									"scores":	[-6.72019932256335]
								}, {
									"case":	89,
									"scores":	[-6.72019932256335]
								}, {
									"case":	90,
									"scores":	[-6.72019932256335]
								}, {
									"case":	91,
									"scores":	[-6.72019932256335]
								}, {
									"case":	92,
									"scores":	[-6.72019932256335]
								}, {
									"case":	93,
									"scores":	[-6.72019932256335]
								}, {
									"case":	94,
									"scores":	[-6.72019932256335]
								}, {
									"case":	95,
									"scores":	[-6.72019932256335]
								}, {
									"case":	96,
									"scores":	[-6.72019932256335]
								}, {
									"case":	97,
									"scores":	[-6.72019932256335]
								}, {
									"case":	98,
									"scores":	[-6.72019932256335]
								}, {
									"case":	99,
									"scores":	[-6.72019932256335]
								}, {
									"case":	100,
									"scores":	[-6.72019932256335]
								}, {
									"case":	101,
									"scores":	[-6.72019932256335]
								}, {
									"case":	102,
									"scores":	[-6.72019932256335]
								}, {
									"case":	103,
									"scores":	[-6.72019932256335]
								}, {
									"case":	104,
									"scores":	[-6.72019932256335]
								}, {
									"case":	105,
									"scores":	[-6.72019932256335]
								}, {
									"case":	106,
									"scores":	[-6.72019932256335]
								}, {
									"case":	107,
									"scores":	[-6.72019932256335]
								}, {
									"case":	108,
									"scores":	[-6.72019932256335]
								}, {
									"case":	109,
									"scores":	[-6.72019932256335]
								}, {
									"case":	110,
									"scores":	[-6.72019932256335]
								}, {
									"case":	111,
									"scores":	[-6.72019932256335]
								}, {
									"case":	112,
									"scores":	[-6.72019932256335]
								}, {
									"case":	113,
									"scores":	[-6.72019932256335]
								}, {
									"case":	114,
									"scores":	[-6.72019932256335]
								}, {
									"case":	115,
									"scores":	[-6.72019932256335]
								}, {
									"case":	116,
									"scores":	[-6.72019932256335]
								}, {
									"case":	117,
									"scores":	[-6.72019932256335]
								}, {
									"case":	118,
									"scores":	[-6.72019932256335]
								}, {
									"case":	119,
									"scores":	[-6.72019932256335]
								}, {
									"case":	120,
									"scores":	[-6.72019932256335]
								}, {
									"case":	121,
									"scores":	[-6.72019932256335]
								}, {
									"case":	122,
									"scores":	[-6.72019932256335]
								}, {
									"case":	123,
									"scores":	[-6.72019932256335]
								}, {
									"case":	124,
									"scores":	[-6.72019932256335]
								}, {
									"case":	125,
									"scores":	[-6.72019932256335]
								}, {
									"case":	126,
									"scores":	[-6.72019932256335]
								}, {
									"case":	127,
									"scores":	[-6.72019932256335]
								}, {
									"case":	128,
									"scores":	[-6.72019932256335]
								}, {
									"case":	129,
									"scores":	[-6.72019932256335]
								}, {
									"case":	130,
									"scores":	[-6.72019932256335]
								}, {
									"case":	131,
									"scores":	[-6.72019932256335]
								}, {
									"case":	132,
									"scores":	[-6.72019932256335]
								}, {
									"case":	133,
									"scores":	[-6.72019932256335]
								}, {
									"case":	134,
									"scores":	[-6.72019932256335]
								}, {
									"case":	135,
									"scores":	[-6.72019932256335]
								}, {
									"case":	136,
									"scores":	[-6.72019932256335]
								}, {
									"case":	137,
									"scores":	[-6.72019932256335]
								}, {
									"case":	138,
									"scores":	[-6.72019932256335]
								}, {
									"case":	139,
									"scores":	[-6.72019932256335]
								}, {
									"case":	140,
									"scores":	[-6.72019932256335]
								}, {
									"case":	141,
									"scores":	[-6.72019932256335]
								}, {
									"case":	142,
									"scores":	[-6.72019932256335]
								}, {
									"case":	143,
									"scores":	[-6.72019932256335]
								}, {
									"case":	144,
									"scores":	[-6.72019932256335]
								}, {
									"case":	145,
									"scores":	[-6.72019932256335]
								}, {
									"case":	146,
									"scores":	[-6.72019932256335]
								}, {
									"case":	147,
									"scores":	[-6.72019932256335]
								}, {
									"case":	148,
									"scores":	[-6.72019932256335]
								}, {
									"case":	149,
									"scores":	[-6.72019932256335]
								}, {
									"case":	150,
									"scores":	[-6.72019932256335]
								}, {
									"case":	151,
									"scores":	[-6.72019932256335]
								}, {
									"case":	152,
									"scores":	[-6.72019932256335]
								}, {
									"case":	153,
									"scores":	[-6.72019932256335]
								}, {
									"case":	154,
									"scores":	[-6.72019932256335]
								}, {
									"case":	155,
									"scores":	[-6.72019932256335]
								}, {
									"case":	156,
									"scores":	[-6.72019932256335]
								}, {
									"case":	157,
									"scores":	[-6.72019932256335]
								}, {
									"case":	158,
									"scores":	[-6.72019932256335]
								}, {
									"case":	159,
									"scores":	[-6.72019932256335]
								}, {
									"case":	160,
									"scores":	[-6.72019932256335]
								}, {
									"case":	161,
									"scores":	[-6.72019932256335]
								}, {
									"case":	162,
									"scores":	[-6.72019932256335]
								}, {
									"case":	163,
									"scores":	[-10.51470053856335, -12.431232050263352, -11.102411160563351, -11.395098089263351, -11.482770208563352, -11.034498686363353, -10.793899832363351, -10.62504469156335, -11.324906692563349, -11.324906692563349, -11.324906692563349, -11.324906692563349, -11.570945606363351, -11.570945606363351, -11.570945606363351, -11.53579580956335, -11.324906692563349, -11.324906692563349, -11.324906692563349]
								}]
						}, {
							"switch":	40,
							"types":	[[5], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4]],
							"begin_line":	314,
							"begin_column":	2,
							"end_line":	317,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L314\", 19, &(type), sizeof (type), &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset), sizeof (offset), &(retval), sizeof (retval), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return &(executor_globals.uninitialized_zval_ptr);\n    ;\n}\n", "if ((((type == 1 || type == 2)) || __is_neg(\"\", \"L314\", 19, &(type), sizeof (type), &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset), sizeof (offset), &(retval), sizeof (retval), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) && (ht->nApplyCount > 0)) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return &(executor_globals.uninitialized_zval_ptr);\n    ;\n}\n", "if (((type == 1 || type == 2) && (ht->nApplyCount > 0)) || __is_neg(\"\", \"L314\", 19, &(type), sizeof (type), &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset), sizeof (offset), &(retval), sizeof (retval), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return &(executor_globals.uninitialized_zval_ptr);\n    ;\n}\n", "if ((type == 1 || type == 2)) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return &(executor_globals.uninitialized_zval_ptr);\n    ;\n}\n", "if (((type == 1 || type == 2) && (ht->nApplyCount > 0)) && !__is_neg(\"\", \"L314\", 19, &(type), sizeof (type), &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset), sizeof (offset), &(retval), sizeof (retval), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return &(executor_globals.uninitialized_zval_ptr);\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.6790479480281442, -3.041266157028145, -1.6117649580281452, -3.173841655928145, -2.7558490600281447, -3.7031427940281452, -3.5947130480281455, -1.5960502980281448, -3.0673189580281459, -3.0673189580281459, -3.0673189580281459, -3.0673189580281459, -3.8252070580281456, -3.8252070580281456, -3.8252070580281456, -3.5365789580281457, -3.0673189580281459, -3.0673189580281459, -3.0673189580281459]
								}, {
									"case":	2,
									"scores":	[-4.1760830534281457, -5.5383012624281456, -4.1088000634281459, -5.6708767613281461, -5.2528841654281457, -6.2001778994281453, -6.0917481534281457, -4.0930854034281463, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452, -6.3222421634281449, -6.3222421634281449, -6.3222421634281449, -6.0336140634281445, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452]
								}, {
									"case":	3,
									"scores":	[-4.1760830534281457, -5.5383012624281456, -4.1088000634281459, -5.6708767613281461, -5.2528841654281457, -6.2001778994281453, -6.0917481534281457, -4.0930854034281463, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452, -6.3222421634281449, -6.3222421634281449, -6.3222421634281449, -6.0336140634281445, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-4.1760830534281457, -5.5383012624281456, -4.1088000634281459, -5.6708767613281461, -5.2528841654281457, -6.2001778994281453, -6.0917481534281457, -4.0930854034281463, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452, -6.3222421634281449, -6.3222421634281449, -6.3222421634281449, -6.0336140634281445, -5.5643540634281452, -5.5643540634281452, -5.5643540634281452]
								}]
						}, {
							"switch":	41,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	314,
							"begin_column":	2,
							"end_line":	317,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L314\", 19, &(type), sizeof (type), &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset), sizeof (offset), &(retval), sizeof (retval), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    if ((type == 1 || type == 2) && (ht->nApplyCount > 0)) {\n        zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n        return &(executor_globals.uninitialized_zval_ptr);\n        ;\n    }\n", "if (!__is_neg(\"\", \"L314\", 19, &(type), sizeof (type), &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset), sizeof (offset), &(retval), sizeof (retval), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)) && ((type == 1 || type == 2) && (ht->nApplyCount > 0))) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return &(executor_globals.uninitialized_zval_ptr);\n    ;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.11159218256335, -9.47381039156335, -8.04430919256335, -9.60638589046335, -9.18839329456335, -10.135687028563352, -10.027257282563351, -8.02859453256335, -9.49986319256335, -9.49986319256335, -9.49986319256335, -9.49986319256335, -10.257751292563352, -10.257751292563352, -10.257751292563352, -9.96912319256335, -9.49986319256335, -9.49986319256335, -9.49986319256335]
								}, {
									"case":	2,
									"scores":	[-8.62841083756335, -9.99062904656335, -8.56112784756335, -10.12320454546335, -9.70521194956335, -10.652505683563351, -10.544075937563351, -8.54541318756335, -10.016681847563351, -10.016681847563351, -10.016681847563351, -10.016681847563351, -10.77456994756335, -10.77456994756335, -10.77456994756335, -10.48594184756335, -10.016681847563351, -10.016681847563351, -10.016681847563351]
								}]
						}]
				}, {
					"line":	328,
					"switches":	[{
							"switch":	47,
							"types":	[[], [], [], [], [268], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], [], [], [], [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], [], [], [], [], [], []],
							"begin_line":	329,
							"begin_column":	3,
							"end_line":	329,
							"end_column":	3,
							"patch_codes":	["memset(&(*offset), 0, sizeof (*(&(*offset))))", "memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&(*offset).value.dval, 0, sizeof (*(&(*offset).value.dval)))", "memset(&(*offset).value.ht, 0, sizeof (*(&(*offset).value.ht)))", "memset(&(*offset).value.lval, 0, sizeof (*(&(*offset).value.lval)))", "memset(&(*offset).value.obj, 0, sizeof (*(&(*offset).value.obj)))", "memset(&(*offset).value.str, 0, sizeof (*(&(*offset).value.str)))", "memset(&(*offset).value.str.len, 0, sizeof (*(&(*offset).value.str.len)))", "memset(&(*offset).value.str.val, 0, sizeof (*(&(*offset).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&offset->is_ref__gc, 0, sizeof (*(&offset->is_ref__gc)))", "memset(&offset->refcount__gc, 0, sizeof (*(&offset->refcount__gc)))", "memset(&offset->type, 0, sizeof (*(&offset->type)))", "memset(&offset->value, 0, sizeof (*(&offset->value)))", "memset((*offset).value.ht, 0, sizeof (*((*offset).value.ht)))", "memset((*offset).value.str.val, 0, sizeof (*((*offset).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(offset, 0, sizeof (*(offset)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(retval)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_index_find((ht), index, (void **)&retval)", "zend_object_std_dtor(&(intern)->std)", "zend_symtable_find((ht), (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(object)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(offset)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(object)).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(offset)).value.str.len + 1, (void **)&retval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((retval)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((retval)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", index)", "zend_hash_index_find(ht, index, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L329\", 105, &(offset), sizeof (offset), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(type), sizeof (type), &((*offset).type), sizeof ((*offset).type), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	2,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	3,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	4,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	5,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	6,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	7,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	8,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	9,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	10,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	11,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	12,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	13,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	14,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	15,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	16,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	17,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	18,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	19,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	20,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	21,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	22,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	23,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	24,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	25,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	26,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	27,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	28,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	29,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	30,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	31,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	32,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	33,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	34,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	35,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	36,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	37,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	38,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	39,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	40,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	41,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	42,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	43,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	44,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	45,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	46,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	47,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	48,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	49,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	50,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	51,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	52,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	53,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	54,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	55,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	56,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	57,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	58,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	59,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	60,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	61,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	62,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	63,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	64,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	65,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	66,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	67,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	68,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	69,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	70,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	71,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	72,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	73,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	74,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	75,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	76,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	77,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	78,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	79,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	80,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	81,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	82,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	83,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	84,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	85,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	86,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	87,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	88,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	89,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	90,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	91,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	92,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	93,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	94,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	95,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	96,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	97,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	98,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	99,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	100,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	101,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	102,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	103,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	104,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	105,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	106,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	107,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	108,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	109,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	110,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	111,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	112,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	113,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	114,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	115,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	116,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	117,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	118,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	119,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	120,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	121,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	122,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	123,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	124,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	125,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	126,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	127,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	128,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	129,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	130,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	131,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	132,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	133,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	134,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	135,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	136,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	137,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	138,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	139,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	140,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	141,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	142,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	143,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	144,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	145,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	146,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	147,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	148,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	149,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	150,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	151,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	152,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	153,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	154,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	155,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	156,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	157,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	158,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	159,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	160,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	161,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	162,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	163,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	164,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	165,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	166,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	167,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	168,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	169,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	170,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	171,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	172,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	173,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	174,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	175,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	176,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	177,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	178,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	179,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	180,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	181,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	182,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	183,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	184,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	185,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	186,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	187,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	188,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	189,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	190,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	191,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	192,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	193,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	194,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	195,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	196,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	197,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	198,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	199,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	200,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	201,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	202,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	203,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	204,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	205,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	206,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	207,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	208,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	209,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	210,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	211,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	212,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	213,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	214,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	215,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	216,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	217,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	218,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	219,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	220,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	221,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	222,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	223,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	224,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	225,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	226,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	227,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	228,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	229,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	230,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	231,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	232,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	233,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	234,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	235,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	236,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	237,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	238,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	239,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	240,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	241,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	242,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	243,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	244,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	245,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	246,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	247,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	248,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	249,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	250,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	251,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	252,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	253,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	254,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	255,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	256,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	257,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	258,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	259,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	260,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	261,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	262,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	263,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	264,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	265,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	266,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	267,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	268,
									"scores":	[-8.0796933497924943, -7.5792511799924949, -8.9064014617924947, -8.9064014617924947, -7.6671090319924948, -7.9131479457924954, -7.722735031992495, -7.4466242579924948, -8.2236700319924942, -8.2236700319924942, -7.4095238579924949, -7.9131479457924954, -7.6926631717924945, -8.2236700319924942, -8.2236700319924942, -8.2236700319924942, -8.2236700319924942, -8.4345591489924949, -8.4697089457924939, -8.4345591489924949, -8.4345591489924949, -8.4345591489924949, -8.4697089457924939, -8.4345591489924949, -8.2236700319924942, -8.2236700319924942, -8.2236700319924942, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.2236700319924942, -8.2236700319924942, -8.2236700319924942, -8.4697089457924939, -8.4345591489924949, -8.2236700319924942, -8.2236700319924942, -8.4697089457924939, -8.2236700319924942, -8.4697089457924939, -8.4697089457924939, -8.2236700319924942, -8.4697089457924939, -8.2236700319924942, -8.2236700319924942, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.2236700319924942, -8.4697089457924939, -8.4345591489924949, -8.2236700319924942, -8.4345591489924949, -8.4697089457924939, -8.4345591489924949, -8.4345591489924949, -8.4345591489924949, -8.4697089457924939, -8.4345591489924949, -8.2236700319924942, -8.2236700319924942, -8.2236700319924942, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.2236700319924942, -8.2236700319924942, -8.2236700319924942, -8.4697089457924939, -8.4345591489924949, -8.2236700319924942, -8.2236700319924942, -8.4697089457924939, -8.2236700319924942, -8.4697089457924939, -8.4697089457924939, -8.2236700319924942, -8.4697089457924939, -8.2236700319924942, -8.2236700319924942, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.4697089457924939, -8.2236700319924942, -8.4697089457924939, -8.4345591489924949, -8.2236700319924942]
								}]
						}, {
							"switch":	48,
							"types":	[[], [], [1], [], [], [], [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], [], [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [], [], [33]],
							"begin_line":	329,
							"begin_column":	5,
							"end_line":	329,
							"end_column":	68,
							"patch_codes":	["if (!__is_neg(\"\", \"L329\", 105, &(offset), sizeof (offset), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(type), sizeof (type), &((*offset).type), sizeof ((*offset).type), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n", "_php_error_log((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 0)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, -1)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 0)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 1)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 2)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 3)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 6)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 7)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 8)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, check_inherited)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, le_index_ptr)", "fstatat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, type)", "readlinkat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, -1)", "readlinkat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 0)", "readlinkat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 1)", "readlinkat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 2)", "readlinkat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 3)", "readlinkat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 6)", "readlinkat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 7)", "readlinkat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 8)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, -1)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 0)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 1)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 2)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 3)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 6)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 7)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, 8)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, check_inherited)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, le_index_ptr)", "utimensat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val, type)", "{\n}\n", "__lxstat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "__xstat((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "_php_stream_fopen_from_fd((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "dprintf((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "multi_convert_to_double_ex((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "multi_convert_to_long_ex((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "multi_convert_to_string_ex((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "newlocale((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "php_info_print_table_header((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "php_info_print_table_row((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "php_info_print_table_row_ex((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "vdprintf((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error_noreturn((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_get_parameters_ex((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_parse_parameters((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((0 * check_inherited) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((0 * index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((0 * type) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited != 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited != index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited != type) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited * index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited * type) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited + 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited + index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited + type) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited - 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited - index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited - type) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited == 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited == index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((check_inherited == type) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((ht != 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((ht == 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((index != 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((index * check_inherited) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((index * type) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((index + 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((index - 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((index == 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((intern != 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((intern == 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((object != 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((object != offset) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((object == 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((object == offset) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((offset != 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((offset == 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((retval != 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((retval == 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type != 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type != index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type * check_inherited) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type * index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type + 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type + index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type - 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type - index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type == 0) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error(((type == index) << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (0 * check_inherited)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (0 * index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (0 * type)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited != 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited != index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited != type)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited * index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited * type)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited + 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited + index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited + type)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited - 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited - index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited - type)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited == 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited == index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (check_inherited == type)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (ht != 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (ht == 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (index != 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (index * check_inherited)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (index * type)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (index + 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (index - 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (index == 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (intern != 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (intern == 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (object != 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (object != offset)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (object == 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (object == offset)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (offset != 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (offset == 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (retval != 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (retval == 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type != 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type != index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type * check_inherited)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type * index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type + 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type + index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type - 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type - index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type == 0)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << (type == index)), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s or the directory does not exist\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(&check_inherited)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(&ht)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(&index)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(&intern)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(&object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(&offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(&retval)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(&type)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), (&check_inherited), (*offset).value.str.val)", "zend_error((1 << 3L), (&ht), (*offset).value.str.val)", "zend_error((1 << 3L), (&index), (*offset).value.str.val)", "zend_error((1 << 3L), (&intern), (*offset).value.str.val)", "zend_error((1 << 3L), (&object), (*offset).value.str.val)", "zend_error((1 << 3L), (&offset), (*offset).value.str.val)", "zend_error((1 << 3L), (&retval), (*offset).value.str.val)", "zend_error((1 << 3L), (&type), (*offset).value.str.val)", "zend_error((1 << 3L), (0), (*offset).value.str.val)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1141113205924951, -6.1570309305924953, -7.5100472325924956, -7.5100472325924956, -6.1901591205924955, -6.9480472205924952, -6.079195200592495, -6.1707122205924954, -6.4012062305924946, -6.4012062305924946, -5.8763614205924952, -6.9480472205924952, -6.9286003205924951, -6.4012062305924946, -6.4012062305924946, -6.4012062305924946, -6.4012062305924946, -6.8704662305924948, -7.1590943305924952, -6.8704662305924948, -6.8704662305924948, -6.8704662305924948, -7.1590943305924952, -6.8704662305924948, -6.4012062305924946, -6.4012062305924946, -6.4012062305924946, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -6.4012062305924946, -6.4012062305924946, -6.4012062305924946, -7.1590943305924952, -6.8704662305924948, -6.4012062305924946, -6.4012062305924946, -7.1590943305924952, -6.4012062305924946, -7.1590943305924952, -7.1590943305924952, -6.4012062305924946, -7.1590943305924952, -6.4012062305924946, -6.4012062305924946, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -6.4012062305924946, -7.1590943305924952, -6.8704662305924948, -6.4012062305924946, -6.8704662305924948, -7.1590943305924952, -6.8704662305924948, -6.8704662305924948, -6.8704662305924948, -7.1590943305924952, -6.8704662305924948, -6.4012062305924946, -6.4012062305924946, -6.4012062305924946, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -6.4012062305924946, -6.4012062305924946, -6.4012062305924946, -7.1590943305924952, -6.8704662305924948, -6.4012062305924946, -6.4012062305924946, -7.1590943305924952, -6.4012062305924946, -7.1590943305924952, -7.1590943305924952, -6.4012062305924946, -7.1590943305924952, -6.4012062305924946, -6.4012062305924946, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -7.1590943305924952, -6.4012062305924946, -7.1590943305924952, -6.8704662305924948, -6.4012062305924946]
								}, {
									"case":	2,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	3,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	4,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	5,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	6,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	7,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	8,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	9,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	10,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	11,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	12,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	13,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	14,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	15,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	16,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	17,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	18,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	19,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	20,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	21,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	22,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	23,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	24,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	25,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	26,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	27,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	28,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	29,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	30,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	31,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	32,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	33,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	34,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	35,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	36,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	37,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	38,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	39,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	40,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	41,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	42,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	43,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	44,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	45,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	46,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	47,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	48,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	49,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	50,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	51,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	52,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	53,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	54,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	55,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	56,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	57,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	58,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	59,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	60,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	61,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	62,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	63,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	64,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	65,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	66,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	67,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	68,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	69,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	70,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	71,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	72,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	73,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	74,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	75,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	76,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	77,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	78,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	79,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	80,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	81,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	82,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	83,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	84,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	85,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	86,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	87,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	88,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	89,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	90,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	91,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	92,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	93,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	94,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	95,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	96,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	97,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	98,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	99,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	100,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	101,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	102,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	103,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	104,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	105,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	106,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	107,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	108,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	109,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	110,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	111,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	112,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	113,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	114,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	115,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	116,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	117,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	118,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	119,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	120,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	121,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	122,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	123,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	124,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	125,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	126,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	127,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	128,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	129,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	130,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	131,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	132,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	133,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	134,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	135,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	136,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	137,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	138,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	139,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	140,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	141,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	142,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	143,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	144,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	145,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	146,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	147,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	148,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	149,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	150,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	151,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	152,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	153,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	154,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	155,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	156,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	157,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	158,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	159,
									"scores":	[-5.8312802005924951]
								}, {
									"case":	160,
									"scores":	[-5.8312802005924951]
								}]
						}]
				}, {
					"line":	329,
					"switches":	[{
							"switch":	49,
							"types":	[[], [], [], [], [267], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], [], [], [], [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [], [], [], [], [], []],
							"begin_line":	330,
							"begin_column":	3,
							"end_line":	330,
							"end_column":	3,
							"patch_codes":	["memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&(*offset).value.dval, 0, sizeof (*(&(*offset).value.dval)))", "memset(&(*offset).value.ht, 0, sizeof (*(&(*offset).value.ht)))", "memset(&(*offset).value.lval, 0, sizeof (*(&(*offset).value.lval)))", "memset(&(*offset).value.obj, 0, sizeof (*(&(*offset).value.obj)))", "memset(&(*offset).value.str, 0, sizeof (*(&(*offset).value.str)))", "memset(&(*offset).value.str.len, 0, sizeof (*(&(*offset).value.str.len)))", "memset(&(*offset).value.str.val, 0, sizeof (*(&(*offset).value.str.val)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&offset->is_ref__gc, 0, sizeof (*(&offset->is_ref__gc)))", "memset(&offset->refcount__gc, 0, sizeof (*(&offset->refcount__gc)))", "memset(&offset->type, 0, sizeof (*(&offset->type)))", "memset(&offset->value, 0, sizeof (*(&offset->value)))", "memset((*offset).value.ht, 0, sizeof (*((*offset).value.ht)))", "memset((*offset).value.str.val, 0, sizeof (*((*offset).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(retval)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_index_find((ht), index, (void **)&retval)", "zend_object_std_dtor(&(intern)->std)", "zend_symtable_find((ht), (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(object)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(offset)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(object)).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(offset)).value.str.len + 1, (void **)&retval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((retval)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((retval)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", index)", "zend_hash_index_find(ht, index, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L330\", 105, &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(offset), sizeof (offset), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(type), sizeof (type), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &((*offset).type), sizeof ((*offset).type), &(intern), sizeof (intern), &(object), sizeof (object), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	2,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	3,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	4,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	5,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	6,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	7,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	8,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	9,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	10,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	11,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	12,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	13,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	14,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	15,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	16,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	17,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	18,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	19,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	20,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	21,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	22,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	23,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	24,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	25,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	26,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	27,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	28,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	29,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	30,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	31,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	32,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	33,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	34,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	35,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	36,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	37,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	38,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	39,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	40,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	41,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	42,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	43,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	44,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	45,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	46,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	47,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	48,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	49,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	50,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	51,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	52,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	53,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	54,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	55,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	56,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	57,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	58,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	59,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	60,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	61,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	62,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	63,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	64,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	65,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	66,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	67,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	68,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	69,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	70,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	71,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	72,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	73,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	74,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	75,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	76,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	77,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	78,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	79,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	80,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	81,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	82,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	83,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	84,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	85,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	86,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	87,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	88,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	89,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	90,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	91,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	92,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	93,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	94,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	95,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	96,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	97,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	98,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	99,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	100,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	101,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	102,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	103,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	104,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	105,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	106,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	107,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	108,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	109,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	110,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	111,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	112,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	113,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	114,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	115,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	116,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	117,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	118,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	119,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	120,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	121,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	122,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	123,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	124,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	125,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	126,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	127,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	128,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	129,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	130,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	131,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	132,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	133,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	134,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	135,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	136,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	137,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	138,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	139,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	140,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	141,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	142,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	143,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	144,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	145,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	146,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	147,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	148,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	149,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	150,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	151,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	152,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	153,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	154,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	155,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	156,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	157,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	158,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	159,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	160,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	161,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	162,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	163,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	164,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	165,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	166,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	167,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	168,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	169,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	170,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	171,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	172,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	173,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	174,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	175,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	176,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	177,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	178,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	179,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	180,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	181,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	182,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	183,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	184,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	185,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	186,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	187,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	188,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	189,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	190,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	191,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	192,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	193,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	194,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	195,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	196,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	197,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	198,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	199,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	200,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	201,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	202,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	203,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	204,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	205,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	206,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	207,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	208,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	209,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	210,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	211,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	212,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	213,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	214,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	215,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	216,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	217,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	218,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	219,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	220,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	221,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	222,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	223,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	224,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	225,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	226,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	227,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	228,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	229,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	230,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	231,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	232,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	233,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	234,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	235,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	236,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	237,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	238,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	239,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	240,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	241,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	242,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	243,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	244,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	245,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	246,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	247,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	248,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	249,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	250,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	251,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	252,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	253,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	254,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	255,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	256,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	257,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	258,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	259,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	260,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	261,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	262,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	263,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	264,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	265,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	266,
									"scores":	[-5.8110774932749756]
								}, {
									"case":	267,
									"scores":	[-8.9646178920749762, -8.9646178920749762, -7.9370335930749754, -8.3743240102749752, -7.5867598132749752, -7.8327987270749748, -7.6423858132749753, -7.3662750392749752, -8.1433208132749755, -7.3291746392749753, -8.1433208132749755, -7.8327987270749748, -7.6123139530749757, -8.1433208132749755, -8.1433208132749755, -8.1433208132749755, -8.1433208132749755, -8.3542099302749762, -8.3893597270749751, -8.3542099302749762, -8.3542099302749762, -8.3542099302749762, -8.3893597270749751, -8.3542099302749762, -8.1433208132749755, -8.1433208132749755, -8.1433208132749755, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.1433208132749755, -8.1433208132749755, -8.1433208132749755, -8.3893597270749751, -8.3542099302749762, -8.1433208132749755, -8.1433208132749755, -8.3893597270749751, -8.1433208132749755, -8.3893597270749751, -8.3893597270749751, -8.1433208132749755, -8.3893597270749751, -8.1433208132749755, -8.1433208132749755, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.1433208132749755, -8.3893597270749751, -8.3542099302749762, -8.1433208132749755, -8.3542099302749762, -8.3893597270749751, -8.3542099302749762, -8.3542099302749762, -8.3542099302749762, -8.3893597270749751, -8.3542099302749762, -8.1433208132749755, -8.1433208132749755, -8.1433208132749755, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.1433208132749755, -8.1433208132749755, -8.1433208132749755, -8.3893597270749751, -8.3542099302749762, -8.1433208132749755, -8.1433208132749755, -8.3893597270749751, -8.1433208132749755, -8.3893597270749751, -8.3893597270749751, -8.1433208132749755, -8.3893597270749751, -8.1433208132749755, -8.1433208132749755, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.3893597270749751, -8.1433208132749755, -8.3893597270749751, -8.3542099302749762, -8.1433208132749755]
								}]
						}, {
							"switch":	50,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	330,
							"begin_column":	5,
							"end_line":	330,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L330\", 105, &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(offset), sizeof (offset), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(type), sizeof (type), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &((*offset).type), sizeof ((*offset).type), &(intern), sizeof (intern), &(object), sizeof (object), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return &(executor_globals.uninitialized_zval_ptr);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.1295469192749756, -8.1295469192749756, -7.8982841237749755, -7.7683553692749756, -6.999065413274975, -7.7569535132749756, -6.8881014932749753, -6.9796185132749757, -7.2101125232749759, -6.6852677132749756, -7.2101125232749759, -7.7569535132749756, -7.7375066132749755, -7.2101125232749759, -7.2101125232749759, -7.2101125232749759, -7.2101125232749759, -7.6793725232749752, -7.9680006232749747, -7.6793725232749752, -7.6793725232749752, -7.6793725232749752, -7.9680006232749747, -7.6793725232749752, -7.2101125232749759, -7.2101125232749759, -7.2101125232749759, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.2101125232749759, -7.2101125232749759, -7.2101125232749759, -7.9680006232749747, -7.6793725232749752, -7.2101125232749759, -7.2101125232749759, -7.9680006232749747, -7.2101125232749759, -7.9680006232749747, -7.9680006232749747, -7.2101125232749759, -7.9680006232749747, -7.2101125232749759, -7.2101125232749759, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.2101125232749759, -7.9680006232749747, -7.6793725232749752, -7.2101125232749759, -7.6793725232749752, -7.9680006232749747, -7.6793725232749752, -7.6793725232749752, -7.6793725232749752, -7.9680006232749747, -7.6793725232749752, -7.2101125232749759, -7.2101125232749759, -7.2101125232749759, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.2101125232749759, -7.2101125232749759, -7.2101125232749759, -7.9680006232749747, -7.6793725232749752, -7.2101125232749759, -7.2101125232749759, -7.9680006232749747, -7.2101125232749759, -7.9680006232749747, -7.9680006232749747, -7.2101125232749759, -7.9680006232749747, -7.2101125232749759, -7.2101125232749759, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.9680006232749747, -7.2101125232749759, -7.9680006232749747, -7.6793725232749752, -7.2101125232749759]
								}]
						}]
				}, {
					"line":	321,
					"switches":	[{
							"switch":	45,
							"types":	[[], [], [], [], [270], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], [], [], [], [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], [], [], [], [], [], []],
							"begin_line":	322,
							"begin_column":	2,
							"end_line":	322,
							"end_column":	2,
							"patch_codes":	["memset(&(*offset), 0, sizeof (*(&(*offset))))", "memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&(*offset).value.dval, 0, sizeof (*(&(*offset).value.dval)))", "memset(&(*offset).value.ht, 0, sizeof (*(&(*offset).value.ht)))", "memset(&(*offset).value.lval, 0, sizeof (*(&(*offset).value.lval)))", "memset(&(*offset).value.obj, 0, sizeof (*(&(*offset).value.obj)))", "memset(&(*offset).value.str, 0, sizeof (*(&(*offset).value.str)))", "memset(&(*offset).value.str.len, 0, sizeof (*(&(*offset).value.str.len)))", "memset(&(*offset).value.str.val, 0, sizeof (*(&(*offset).value.str.val)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&offset->is_ref__gc, 0, sizeof (*(&offset->is_ref__gc)))", "memset(&offset->refcount__gc, 0, sizeof (*(&offset->refcount__gc)))", "memset(&offset->type, 0, sizeof (*(&offset->type)))", "memset(&offset->value, 0, sizeof (*(&offset->value)))", "memset((*offset).value.ht, 0, sizeof (*((*offset).value.ht)))", "memset((*offset).value.str.val, 0, sizeof (*((*offset).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(ht, 0, sizeof (*(ht)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(offset, 0, sizeof (*(offset)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(retval)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_index_find((ht), index, (void **)&retval)", "zend_object_std_dtor(&(intern)->std)", "zend_symtable_find((ht), (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(object)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(offset)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(object)).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(offset)).value.str.len + 1, (void **)&retval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((retval)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((retval)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", index)", "zend_hash_index_find(ht, index, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L322\", 27, &(type), sizeof (type), &(offset), sizeof (offset), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &((*offset).type), sizeof ((*offset).type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	2,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	3,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	4,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	5,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	6,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	7,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	8,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	9,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	10,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	11,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	12,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	13,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	14,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	15,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	16,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	17,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	18,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	19,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	20,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	21,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	22,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	23,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	24,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	25,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	26,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	27,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	28,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	29,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	30,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	31,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	32,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	33,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	34,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	35,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	36,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	37,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	38,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	39,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	40,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	41,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	42,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	43,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	44,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	45,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	46,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	47,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	48,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	49,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	50,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	51,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	52,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	53,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	54,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	55,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	56,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	57,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	58,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	59,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	60,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	61,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	62,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	63,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	64,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	65,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	66,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	67,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	68,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	69,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	70,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	71,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	72,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	73,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	74,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	75,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	76,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	77,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	78,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	79,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	80,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	81,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	82,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	83,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	84,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	85,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	86,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	87,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	88,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	89,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	90,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	91,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	92,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	93,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	94,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	95,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	96,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	97,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	98,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	99,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	100,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	101,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	102,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	103,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	104,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	105,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	106,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	107,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	108,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	109,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	110,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	111,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	112,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	113,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	114,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	115,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	116,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	117,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	118,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	119,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	120,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	121,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	122,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	123,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	124,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	125,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	126,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	127,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	128,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	129,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	130,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	131,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	132,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	133,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	134,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	135,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	136,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	137,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	138,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	139,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	140,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	141,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	142,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	143,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	144,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	145,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	146,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	147,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	148,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	149,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	150,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	151,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	152,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	153,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	154,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	155,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	156,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	157,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	158,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	159,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	160,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	161,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	162,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	163,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	164,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	165,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	166,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	167,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	168,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	169,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	170,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	171,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	172,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	173,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	174,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	175,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	176,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	177,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	178,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	179,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	180,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	181,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	182,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	183,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	184,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	185,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	186,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	187,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	188,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	189,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	190,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	191,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	192,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	193,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	194,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	195,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	196,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	197,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	198,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	199,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	200,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	201,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	202,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	203,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	204,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	205,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	206,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	207,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	208,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	209,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	210,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	211,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	212,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	213,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	214,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	215,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	216,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	217,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	218,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	219,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	220,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	221,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	222,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	223,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	224,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	225,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	226,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	227,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	228,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	229,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	230,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	231,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	232,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	233,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	234,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	235,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	236,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	237,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	238,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	239,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	240,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	241,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	242,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	243,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	244,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	245,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	246,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	247,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	248,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	249,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	250,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	251,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	252,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	253,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	254,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	255,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	256,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	257,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	258,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	259,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	260,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	261,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	262,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	263,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	264,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	265,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	266,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	267,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	268,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	269,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	270,
									"scores":	[-9.3773410409903271, -10.043570512790327, -10.071070737990325, -9.02171713979033, -9.5431283429903271, -9.27964792239033, -10.187547194990326, -10.187547194990326, -10.187547194990326, -9.3734010209903253, -9.8770251087903258, -9.6565403347903267, -10.187547194990326, -10.187547194990326, -10.187547194990326, -10.187547194990326, -10.433586108790326, -10.433586108790326, -10.433586108790326, -10.398436311990325, -10.187547194990326, -10.187547194990326, -10.187547194990326, -10.187547194990326, -10.187547194990326, -10.187547194990326, -10.187547194990326]
								}]
						}, {
							"switch":	46,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	322,
							"begin_column":	4,
							"end_line":	331,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L322\", 27, &(type), sizeof (type), &(offset), sizeof (offset), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &((*offset).type), sizeof ((*offset).type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc))) {\n    zval *value;\n    do {\n        (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n    } while (0);\n    *value = zval_used_for_init;\n    ;\n    ;\n    zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n    zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n    return retval;\n} else {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    return &(executor_globals.uninitialized_zval_ptr);\n}\n", "if ((type == 1 || type == 2) || __is_neg(\"\", \"L322\", 27, &(type), sizeof (type), &(offset), sizeof (offset), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &((*offset).type), sizeof ((*offset).type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc))) {\n    zval *value;\n    do {\n        (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n    } while (0);\n    *value = zval_used_for_init;\n    ;\n    ;\n    zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n    zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n    return retval;\n} else {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    return &(executor_globals.uninitialized_zval_ptr);\n}\n", "if (type == 1) {\n    zval *value;\n    do {\n        (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n    } while (0);\n    *value = zval_used_for_init;\n    ;\n    ;\n    zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n    zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n    return retval;\n} else {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    return &(executor_globals.uninitialized_zval_ptr);\n}\n", "if ((type == 1 || type == 2) && !__is_neg(\"\", \"L322\", 27, &(type), sizeof (type), &(offset), sizeof (offset), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &((*offset).type), sizeof ((*offset).type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc))) {\n    zval *value;\n    do {\n        (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n    } while (0);\n    *value = zval_used_for_init;\n    ;\n    ;\n    zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n    zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n    return retval;\n} else {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    return &(executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[1.3218915539718563, 0.25450245397185656, -0.366988642028145, -0.86599814602814318, -0.78841715602814277, 0.879229573971856, -1.0325924560281448, -1.0325924560281448, -1.0325924560281448, -0.50774764602814448, -1.5794334460281454, -1.5599865460281452, -1.0325924560281448, -1.0325924560281448, -1.0325924560281448, -1.0325924560281448, -1.7904805560281454, -1.7904805560281454, -1.7904805560281454, -1.501852456028145, -1.0325924560281448, -1.0325924560281448, -1.0325924560281448, -1.0325924560281448, -1.0325924560281448, -1.0325924560281448, -1.0325924560281448]
								}, {
									"case":	2,
									"scores":	[-2.6241571754281452, -3.6915462754281454, -4.3130373714281456, -4.8120468754281456, -4.7344658854281452, -3.0668191554281456, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.453796375428146, -5.5254821754281451, -5.5060352754281459, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -5.736529285428146, -5.736529285428146, -5.736529285428146, -5.4479011854281456, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-2.6241571754281452, -3.6915462754281454, -4.3130373714281456, -4.8120468754281456, -4.7344658854281452, -3.0668191554281456, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.453796375428146, -5.5254821754281451, -5.5060352754281459, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -5.736529285428146, -5.736529285428146, -5.736529285428146, -5.4479011854281456, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454, -4.9786411854281454]
								}]
						}, {
							"switch":	51,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	322,
							"begin_column":	4,
							"end_line":	331,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L322\", 27, &(type), sizeof (type), &(offset), sizeof (offset), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &((*offset).type), sizeof ((*offset).type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc)))\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n", "if (!__is_neg(\"\", \"L322\", 27, &(type), sizeof (type), &(offset), sizeof (offset), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &((*offset).type), sizeof ((*offset).type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc)) && (type == 1 || type == 2)) {\n    zval *value;\n    do {\n        (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n    } while (0);\n    *value = zval_used_for_init;\n    ;\n    ;\n    zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n    zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n    return retval;\n} else {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    return &(executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2227622949903267, -7.2901513949903265, -7.9116424909903262, -8.4106519949903262, -8.3330710049903267, -6.6654242749903263, -8.5772463049903269, -8.5772463049903269, -8.5772463049903269, -8.05240149499033, -9.1240872949903267, -9.1046403949903265, -8.5772463049903269, -8.5772463049903269, -8.5772463049903269, -8.5772463049903269, -9.33513440499033, -9.33513440499033, -9.33513440499033, -9.0465063049903272, -8.5772463049903269, -8.5772463049903269, -8.5772463049903269, -8.5772463049903269, -8.5772463049903269, -8.5772463049903269, -8.5772463049903269]
								}, {
									"case":	2,
									"scores":	[-6.1506528949903263, -7.2180419949903261, -7.8395330909903267, -8.3385425949903258, -8.2609616049903263, -6.5933148749903268, -8.5051369049903265, -8.5051369049903265, -8.5051369049903265, -7.9802920949903271, -9.0519778949903262, -9.0325309949903261, -8.5051369049903265, -8.5051369049903265, -8.5051369049903265, -8.5051369049903265, -9.2630250049903253, -9.2630250049903253, -9.2630250049903253, -8.9743969049903267, -8.5051369049903265, -8.5051369049903265, -8.5051369049903265, -8.5051369049903265, -8.5051369049903265, -8.5051369049903265, -8.5051369049903265]
								}]
						}]
				}, {
					"line":	320,
					"switches":	[{
							"switch":	43,
							"types":	[[], [], [], [], [], [], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	321,
							"begin_column":	1,
							"end_line":	321,
							"end_column":	1,
							"patch_codes":	["(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(retval)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_index_find((ht), index, (void **)&retval)", "zend_object_std_dtor(&(intern)->std)", "zend_symtable_find((ht), (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(object)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(offset)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(object)).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(offset)).value.str.len + 1, (void **)&retval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((retval)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((retval)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", index)", "zend_hash_index_find(ht, index, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	2,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	3,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	4,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	5,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	6,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	7,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	8,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	9,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	10,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	11,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	12,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	13,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	14,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	15,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	16,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	17,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	18,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	19,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	20,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	21,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	22,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	23,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	24,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	25,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	26,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	27,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	28,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	29,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	30,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	31,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	32,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	33,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	34,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	35,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	36,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	37,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	38,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	39,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	40,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	41,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	42,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	43,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	44,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	45,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	46,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	47,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	48,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	49,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	50,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	51,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	52,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	53,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	54,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	55,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	56,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	57,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	58,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	59,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	60,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	61,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	62,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	63,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	64,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	65,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	66,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	67,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	68,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	69,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	70,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	71,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	72,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	73,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	74,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	75,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	76,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	77,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	78,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	79,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	80,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	81,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	82,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	83,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	84,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	85,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	86,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	87,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	88,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	89,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	90,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	91,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	92,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	93,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	94,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	95,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	96,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	97,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	98,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	99,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	100,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	101,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	102,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	103,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	104,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	105,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	106,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	107,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	108,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	109,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	110,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	111,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	112,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	113,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	114,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	115,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	116,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	117,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	118,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	119,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	120,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	121,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	122,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	123,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	124,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	125,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	126,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	127,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	128,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	129,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	130,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	131,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	132,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	133,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	134,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	135,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	136,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	137,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	138,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	139,
									"scores":	[-6.1747262249903265]
								}, {
									"case":	140,
									"scores":	[-6.1747262249903265]
								}]
						}, {
							"switch":	44,
							"types":	[[14], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], []],
							"begin_line":	321,
							"begin_column":	3,
							"end_line":	334,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L321\", 27, &(offset), sizeof (offset), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(type), sizeof (type), &((*offset).type), sizeof ((*offset).type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(object), sizeof (object), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc))) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (Debug(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (ap_php_asprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (execl(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (execle(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (execlp(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (fprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (php_printf(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (php_sprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (printf(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (sprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (wprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if (zend_hash_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n", "if ((zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) && !__is_neg(\"\", \"L321\", 27, &(offset), sizeof (offset), &(retval), sizeof (retval), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(type), sizeof (type), &((*offset).type), sizeof ((*offset).type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &(object), sizeof (object), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc))) {\n    if (type == 1 || type == 2) {\n        zval *value;\n        do {\n            (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n        } while (0);\n        *value = zval_used_for_init;\n        ;\n        ;\n        zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n        zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n        return retval;\n    } else {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n} else {\n    return retval;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[0.22052285397185623, -0.40096824202814352, -0.89997774602814351, -0.822396756028143, 0.8452499739718573, 1.287911953971856, -1.0665720560281433, -1.0665720560281433, -1.6134130460281439, -1.0665720560281433, -0.541727246028143, -1.5939661460281438, -1.0665720560281433, -1.0665720560281433, -1.0665720560281433, -1.0665720560281433, -1.8244601560281435, -1.8244601560281435, -1.8244601560281435, -1.5358320560281435, -1.0665720560281433, -1.0665720560281433, -1.0665720560281433, -1.0665720560281433, -1.0665720560281433, -1.0665720560281433, -1.0665720560281433]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-0.95314290262814483, -1.5746339986281455, -2.0736435026281468, -1.9960625126281459, -0.32841578262814553, 0.11424619737185493, -2.2402378126281457, -2.2402378126281457, -2.7870788026281454, -2.2402378126281457, -1.715393002628145, -2.7676319026281453, -2.2402378126281457, -2.2402378126281457, -2.2402378126281457, -2.2402378126281457, -2.9981259126281454, -2.9981259126281454, -2.9981259126281454, -2.7094978126281455, -2.2402378126281457, -2.2402378126281457, -2.2402378126281457, -2.2402378126281457, -2.2402378126281457, -2.2402378126281457, -2.2402378126281457]
								}]
						}]
				}, {
					"line":	318,
					"switches":	[{
							"switch":	42,
							"types":	[[], [], [], [], [164], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [], [], [], [], [], []],
							"begin_line":	319,
							"begin_column":	0,
							"end_line":	319,
							"end_column":	0,
							"patch_codes":	["memset(&(*offset), 0, sizeof (*(&(*offset))))", "memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(ht, 0, sizeof (*(ht)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(retval)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_index_find((ht), index, (void **)&retval)", "zend_object_std_dtor(&(intern)->std)", "zend_symtable_find((ht), (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(object)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*(offset)).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(object)).value.str.len + 1, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*(offset)).value.str.len + 1, (void **)&retval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((retval)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((retval)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", index)", "zend_hash_index_find(ht, index, (void **)&retval)", "zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L319\", 10, &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(retval), sizeof (retval), &(ht), sizeof (ht), &(type), sizeof (type), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	2,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	3,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	4,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	5,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	6,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	7,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	8,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	9,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	10,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	11,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	12,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	13,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	14,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	15,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	16,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	17,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	18,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	19,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	20,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	21,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	22,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	23,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	24,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	25,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	26,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	27,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	28,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	29,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	30,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	31,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	32,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	33,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	34,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	35,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	36,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	37,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	38,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	39,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	40,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	41,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	42,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	43,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	44,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	45,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	46,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	47,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	48,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	49,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	50,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	51,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	52,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	53,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	54,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	55,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	56,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	57,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	58,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	59,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	60,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	61,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	62,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	63,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	64,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	65,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	66,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	67,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	68,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	69,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	70,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	71,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	72,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	73,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	74,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	75,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	76,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	77,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	78,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	79,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	80,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	81,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	82,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	83,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	84,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	85,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	86,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	87,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	88,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	89,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	90,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	91,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	92,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	93,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	94,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	95,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	96,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	97,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	98,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	99,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	100,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	101,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	102,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	103,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	104,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	105,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	106,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	107,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	108,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	109,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	110,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	111,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	112,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	113,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	114,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	115,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	116,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	117,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	118,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	119,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	120,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	121,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	122,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	123,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	124,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	125,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	126,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	127,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	128,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	129,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	130,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	131,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	132,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	133,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	134,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	135,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	136,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	137,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	138,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	139,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	140,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	141,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	142,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	143,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	144,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	145,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	146,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	147,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	148,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	149,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	150,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	151,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	152,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	153,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	154,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	155,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	156,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	157,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	158,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	159,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	160,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	161,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	162,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	163,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	164,
									"scores":	[-10.193220293945831, -11.30470398524583, -11.188227528245832, -10.674137630045831, -10.002693831245832, -11.014295979045833, -10.773697125045832, -8.74522308324583, -11.30470398524583, -11.30470398524583]
								}]
						}, {
							"switch":	52,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	319,
							"begin_column":	2,
							"end_line":	362,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L319\", 10, &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(retval), sizeof (retval), &(ht), sizeof (ht), &(type), sizeof (type), &(intern), sizeof (intern), &(object), sizeof (object), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc)))\n    switch ((*offset).type) {\n      case 6:\n        if (zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval) == -1) {\n            if (type == 1 || type == 2) {\n                zval *value;\n                do {\n                    (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n                } while (0);\n                *value = zval_used_for_init;\n                ;\n                ;\n                zend_symtable_update(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&value, sizeof(void *), ((void *)0));\n                zend_symtable_find(ht, (*offset).value.str.val, (*offset).value.str.len + 1, (void **)&retval);\n                return retval;\n            } else {\n                zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n                return &(executor_globals.uninitialized_zval_ptr);\n            }\n        } else {\n            return retval;\n        }\n      case 2:\n      case 7:\n      case 3:\n      case 1:\n        if (offset->type == 2) {\n            index = (long)(*offset).value.dval;\n        } else {\n            index = (*offset).value.lval;\n        }\n        if (zend_hash_index_find(ht, index, (void **)&retval) == -1) {\n            if (type == 1 || type == 2) {\n                zval *value;\n                do {\n                    (value) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(value))->u.buffered = ((void *)0);\n                } while (0);\n                *value = zval_used_for_init;\n                ;\n                ;\n                _zend_hash_index_update_or_next_insert(ht, index, (void **)&value, sizeof(void *), ((void *)0), (1 << 0));\n                zend_hash_index_find(ht, index, (void **)&retval);\n                return retval;\n            } else {\n                zend_error((1 << 3L), \"Undefined offset:  %ld\", index);\n                return &(executor_globals.uninitialized_zval_ptr);\n            }\n        } else {\n            return retval;\n        }\n        break;\n      default:\n        zend_error((1 << 1L), \"Illegal offset type\");\n        return &(executor_globals.uninitialized_zval_ptr);\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.99721519524583, -9.47346709524583, -8.80786328124583, -9.54866027574583, -6.7322272452458316, -10.109290931245832, -10.000861185245832, -8.10212950624583, -9.47346709524583, -9.47346709524583]
								}]
						}]
				}, {
					"line":	366,
					"switches":	[]
				}, {
					"line":	369,
					"switches":	[]
				}, {
					"line":	370,
					"switches":	[{
							"switch":	55,
							"types":	[[], [], [], [], [164], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [], [], [], [], [], []],
							"begin_line":	371,
							"begin_column":	1,
							"end_line":	371,
							"end_column":	1,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(intern->retval)->is_ref__gc = (0)", "(intern->retval)->is_ref__gc = (1)", "(intern->retval)->is_ref__gc = (2)", "(intern->retval)->refcount__gc = (0)", "(intern->retval)->refcount__gc = (1)", "(intern->retval)->refcount__gc = (2)", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(ret)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "ret = (ret)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (object), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (offset), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (object), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (offset), type)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &(object), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &(offset), 1, offset, ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((ret)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((ret)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(intern->retval)->is_ref__gc = 0", "(intern->retval)->refcount__gc = 1", "_zval_copy_ctor((intern->retval))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&intern->retval))", "_zval_ptr_dtor((&offset))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, type)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "zval_delref_p(*(ret))", "zval_set_isref_p(*(ret))", "if (__is_neg(\"\", \"L371\", 19, &(intern), sizeof (intern), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset), sizeof (offset), &(intern->retval), sizeof (intern->retval), &(type), sizeof (type), &(ret), sizeof (ret), &(intern->array), sizeof (intern->array), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	2,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	3,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	4,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	5,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	6,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	7,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	8,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	9,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	10,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	11,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	12,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	13,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	14,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	15,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	16,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	17,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	18,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	19,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	20,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	21,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	22,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	23,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	24,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	25,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	26,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	27,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	28,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	29,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	30,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	31,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	32,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	33,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	34,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	35,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	36,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	37,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	38,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	39,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	40,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	41,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	42,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	43,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	44,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	45,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	46,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	47,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	48,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	49,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	50,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	51,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	52,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	53,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	54,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	55,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	56,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	57,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	58,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	59,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	60,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	61,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	62,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	63,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	64,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	65,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	66,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	67,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	68,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	69,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	70,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	71,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	72,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	73,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	74,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	75,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	76,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	77,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	78,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	79,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	80,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	81,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	82,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	83,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	84,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	85,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	86,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	87,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	88,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	89,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	90,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	91,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	92,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	93,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	94,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	95,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	96,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	97,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	98,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	99,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	100,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	101,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	102,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	103,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	104,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	105,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	106,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	107,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	108,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	109,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	110,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	111,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	112,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	113,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	114,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	115,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	116,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	117,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	118,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	119,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	120,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	121,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	122,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	123,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	124,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	125,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	126,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	127,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	128,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	129,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	130,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	131,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	132,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	133,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	134,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	135,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	136,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	137,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	138,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	139,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	140,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	141,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	142,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	143,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	144,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	145,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	146,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	147,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	148,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	149,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	150,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	151,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	152,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	153,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	154,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	155,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	156,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	157,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	158,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	159,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	160,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	161,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	162,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	163,
									"scores":	[-6.9424291030560656]
								}, {
									"case":	164,
									"scores":	[-10.351376768756067, -11.501266920056064, -11.559273996856067, -10.526873873056067, -10.677959801756067, -11.393461614756067, -10.526873873056067, -10.443077416056067, -11.292373386856067, -11.292373386856067, -11.046334473056067, -11.046334473056067, -11.046334473056067, -11.257223590056064, -11.257223590056064, -11.257223590056064, -11.257223590056064, -11.292373386856067, -11.292373386856067]
								}]
						}, {
							"switch":	56,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	371,
							"begin_column":	3,
							"end_line":	383,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L371\", 19, &(intern), sizeof (intern), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset), sizeof (offset), &(intern->retval), sizeof (intern->retval), &(type), sizeof (type), &(ret), sizeof (ret), &(intern->array), sizeof (intern->array), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    zval *rv;\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    if (rv) {\n        _zval_ptr_dtor((&intern->retval));\n        do {\n            (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n        } while (0);\n        (intern->retval)->refcount__gc = 1;\n        (intern->retval)->is_ref__gc = 0;\n        ;\n        ;\n        {\n            zend_uchar is_ref = zval_isref_p(intern->retval);\n            zend_uint refcount = zval_refcount_p(intern->retval);\n            do {\n                (intern->retval)->value = (rv)->value;\n                (*intern->retval).type = (*rv).type;\n            } while (0);\n            if (1) {\n                _zval_copy_ctor((intern->retval));\n            }\n            if (1) {\n                if (!1) {\n                    {\n                        (*rv).type = 0;\n                    }\n                    ;\n                }\n                _zval_ptr_dtor((&rv));\n            }\n            zval_set_isref_to_p(intern->retval, is_ref);\n            zval_set_refcount_p(intern->retval, refcount);\n        }\n        ;\n        return intern->retval;\n    }\n    return (executor_globals.uninitialized_zval_ptr);\n}\n", "if ((intern->fptr_offset_get) || __is_neg(\"\", \"L371\", 19, &(intern), sizeof (intern), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset), sizeof (offset), &(intern->retval), sizeof (intern->retval), &(type), sizeof (type), &(ret), sizeof (ret), &(intern->array), sizeof (intern->array), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    zval *rv;\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    if (rv) {\n        _zval_ptr_dtor((&intern->retval));\n        do {\n            (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n        } while (0);\n        (intern->retval)->refcount__gc = 1;\n        (intern->retval)->is_ref__gc = 0;\n        ;\n        ;\n        {\n            zend_uchar is_ref = zval_isref_p(intern->retval);\n            zend_uint refcount = zval_refcount_p(intern->retval);\n            do {\n                (intern->retval)->value = (rv)->value;\n                (*intern->retval).type = (*rv).type;\n            } while (0);\n            if (1) {\n                _zval_copy_ctor((intern->retval));\n            }\n            if (1) {\n                if (!1) {\n                    {\n                        (*rv).type = 0;\n                    }\n                    ;\n                }\n                _zval_ptr_dtor((&rv));\n            }\n            zval_set_isref_to_p(intern->retval, is_ref);\n            zval_set_refcount_p(intern->retval, refcount);\n        }\n        ;\n        return intern->retval;\n    }\n    return (executor_globals.uninitialized_zval_ptr);\n}\n", "if ((intern->fptr_offset_get) && !__is_neg(\"\", \"L371\", 19, &(intern), sizeof (intern), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset), sizeof (offset), &(intern->retval), sizeof (intern->retval), &(type), sizeof (type), &(ret), sizeof (ret), &(intern->array), sizeof (intern->array), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    zval *rv;\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    if (rv) {\n        _zval_ptr_dtor((&intern->retval));\n        do {\n            (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n        } while (0);\n        (intern->retval)->refcount__gc = 1;\n        (intern->retval)->is_ref__gc = 0;\n        ;\n        ;\n        {\n            zend_uchar is_ref = zval_isref_p(intern->retval);\n            zend_uint refcount = zval_refcount_p(intern->retval);\n            do {\n                (intern->retval)->value = (rv)->value;\n                (*intern->retval).type = (*rv).type;\n            } while (0);\n            if (1) {\n                _zval_copy_ctor((intern->retval));\n            }\n            if (1) {\n                if (!1) {\n                    {\n                        (*rv).type = 0;\n                    }\n                    ;\n                }\n                _zval_ptr_dtor((&rv));\n            }\n            zval_set_isref_to_p(intern->retval, is_ref);\n            zval_set_refcount_p(intern->retval, refcount);\n        }\n        ;\n        return intern->retval;\n    }\n    return (executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.6963215959281439, -3.1662414999281445, -2.4287701359281435, -3.2356360899281449, -3.4151495109281442, -3.3326400169281447, -3.2356360899281449, -3.0967475899281451, -3.9102204999281449, -3.9102204999281449, -3.1523323999281447, -3.1523323999281447, -3.1523323999281447, -3.6215923999281445, -3.6215923999281445, -3.6215923999281445, -3.6215923999281445, -3.9102204999281449, -3.9102204999281449]
								}, {
									"case":	2,
									"scores":	[-3.9588322634281461, -4.4287521674281454, -3.6912808034281457, -4.4981467574281453, -4.6776601784281464, -4.5951506844281456, -4.4981467574281453, -4.359258257428146, -5.1727311674281458, -5.1727311674281458, -4.414843067428146, -4.414843067428146, -4.414843067428146, -4.8841030674281454, -4.8841030674281454, -4.8841030674281454, -4.8841030674281454, -5.1727311674281458, -5.1727311674281458]
								}, {
									"case":	3,
									"scores":	[-3.9588322634281461, -4.4287521674281454, -3.6912808034281457, -4.4981467574281453, -4.6776601784281464, -4.5951506844281456, -4.4981467574281453, -4.359258257428146, -5.1727311674281458, -5.1727311674281458, -4.414843067428146, -4.414843067428146, -4.414843067428146, -4.8841030674281454, -4.8841030674281454, -4.8841030674281454, -4.8841030674281454, -5.1727311674281458, -5.1727311674281458]
								}]
						}, {
							"switch":	57,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	371,
							"begin_column":	3,
							"end_line":	383,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L371\", 19, &(intern), sizeof (intern), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset), sizeof (offset), &(intern->retval), sizeof (intern->retval), &(type), sizeof (type), &(ret), sizeof (ret), &(intern->array), sizeof (intern->array), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    if (intern->fptr_offset_get) {\n        zval *rv;\n        if (zval_isref_p(offset)) {\n            zval *original_var = offset;\n            do {\n                (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (offset)->value = (original_var)->value;\n                    (*offset).type = (*original_var).type;\n                } while (0);\n                zval_set_refcount_p(offset, 1);\n                zval_unset_isref_p(offset);\n            } while (0);\n            _zval_copy_ctor((offset));\n        } else {\n            zval_addref_p(offset);\n        }\n        ;\n        zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n        _zval_ptr_dtor((&offset));\n        if (rv) {\n            _zval_ptr_dtor((&intern->retval));\n            do {\n                (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n            } while (0);\n            (intern->retval)->refcount__gc = 1;\n            (intern->retval)->is_ref__gc = 0;\n            ;\n            ;\n            {\n                zend_uchar is_ref = zval_isref_p(intern->retval);\n                zend_uint refcount = zval_refcount_p(intern->retval);\n                do {\n                    (intern->retval)->value = (rv)->value;\n                    (*intern->retval).type = (*rv).type;\n                } while (0);\n                if (1) {\n                    _zval_copy_ctor((intern->retval));\n                }\n                if (1) {\n                    if (!1) {\n                        {\n                            (*rv).type = 0;\n                        }\n                        ;\n                    }\n                    _zval_ptr_dtor((&rv));\n                }\n                zval_set_isref_to_p(intern->retval, is_ref);\n                zval_set_refcount_p(intern->retval, refcount);\n            }\n            ;\n            return intern->retval;\n        }\n        return (executor_globals.uninitialized_zval_ptr);\n    }\n", "if (!__is_neg(\"\", \"L371\", 19, &(intern), sizeof (intern), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset), sizeof (offset), &(intern->retval), sizeof (intern->retval), &(type), sizeof (type), &(ret), sizeof (ret), &(intern->array), sizeof (intern->array), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)) && (intern->fptr_offset_get)) {\n    zval *rv;\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    if (rv) {\n        _zval_ptr_dtor((&intern->retval));\n        do {\n            (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n        } while (0);\n        (intern->retval)->refcount__gc = 1;\n        (intern->retval)->is_ref__gc = 0;\n        ;\n        ;\n        {\n            zend_uchar is_ref = zval_isref_p(intern->retval);\n            zend_uint refcount = zval_refcount_p(intern->retval);\n            do {\n                (intern->retval)->value = (rv)->value;\n                (*intern->retval).type = (*rv).type;\n            } while (0);\n            if (1) {\n                _zval_copy_ctor((intern->retval));\n            }\n            if (1) {\n                if (!1) {\n                    {\n                        (*rv).type = 0;\n                    }\n                    ;\n                }\n                _zval_ptr_dtor((&rv));\n            }\n            zval_set_isref_to_p(intern->retval, is_ref);\n            zval_set_refcount_p(intern->retval, refcount);\n        }\n        ;\n        return intern->retval;\n    }\n    return (executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.0042217790560652, -9.4741416830560663, -8.7366703190560653, -9.5435362730560662, -9.7230496940560656, -9.6405402000560656, -9.5435362730560662, -9.404647773056066, -10.218120683056066, -10.218120683056066, -9.4602325830560652, -9.4602325830560652, -9.4602325830560652, -9.9294925830560654, -9.9294925830560654, -9.9294925830560654, -9.9294925830560654, -10.218120683056066, -10.218120683056066]
								}, {
									"case":	2,
									"scores":	[-8.6603505380560648, -9.1302704420560659, -8.3927990780560648, -9.1996650320560658, -9.3791784530560651, -9.2966689590560652, -9.1996650320560658, -9.0607765320560656, -9.8742494420560654, -9.8742494420560654, -9.1163613420560665, -9.1163613420560665, -9.1163613420560665, -9.585621342056065, -9.585621342056065, -9.585621342056065, -9.585621342056065, -9.8742494420560654, -9.8742494420560654]
								}]
						}]
				}, {
					"line":	368,
					"switches":	[{
							"switch":	53,
							"types":	[[], [], [], [], [112], [], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	369,
							"begin_column":	0,
							"end_line":	369,
							"end_column":	0,
							"patch_codes":	["_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(ret)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "ret = (ret)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (object), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (offset), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (object), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (offset), type)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((ret)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((ret)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, type)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "zval_delref_p(*(ret))", "zval_set_isref_p(*(ret))", "if (__is_neg(\"\", \"L369\", 5, &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type), &(ret), sizeof (ret)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-10.940968640691105, -11.087437684491105, -11.489408916391106, -11.825106640691104, -12.561586556691106]
								}]
						}, {
							"switch":	54,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	369,
							"begin_column":	2,
							"end_line":	384,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L369\", 5, &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type), &(ret), sizeof (ret))) {\n    spl_array_object *intern = (spl_array_object *)zend_object_store_get_object(object);\n    if (intern->fptr_offset_get) {\n        zval *rv;\n        if (zval_isref_p(offset)) {\n            zval *original_var = offset;\n            do {\n                (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (offset)->value = (original_var)->value;\n                    (*offset).type = (*original_var).type;\n                } while (0);\n                zval_set_refcount_p(offset, 1);\n                zval_unset_isref_p(offset);\n            } while (0);\n            _zval_copy_ctor((offset));\n        } else {\n            zval_addref_p(offset);\n        }\n        ;\n        zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n        _zval_ptr_dtor((&offset));\n        if (rv) {\n            _zval_ptr_dtor((&intern->retval));\n            do {\n                (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n            } while (0);\n            (intern->retval)->refcount__gc = 1;\n            (intern->retval)->is_ref__gc = 0;\n            ;\n            ;\n            {\n                zend_uchar is_ref = zval_isref_p(intern->retval);\n                zend_uint refcount = zval_refcount_p(intern->retval);\n                do {\n                    (intern->retval)->value = (rv)->value;\n                    (*intern->retval).type = (*rv).type;\n                } while (0);\n                if (1) {\n                    _zval_copy_ctor((intern->retval));\n                }\n                if (1) {\n                    if (!1) {\n                        {\n                            (*rv).type = 0;\n                        }\n                        ;\n                    }\n                    _zval_ptr_dtor((&rv));\n                }\n                zval_set_isref_to_p(intern->retval, is_ref);\n                zval_set_refcount_p(intern->retval, refcount);\n            }\n            ;\n            return intern->retval;\n        }\n        return (executor_globals.uninitialized_zval_ptr);\n    }\n}\n", "if ((check_inherited) || __is_neg(\"\", \"L369\", 5, &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type), &(ret), sizeof (ret))) {\n    spl_array_object *intern = (spl_array_object *)zend_object_store_get_object(object);\n    if (intern->fptr_offset_get) {\n        zval *rv;\n        if (zval_isref_p(offset)) {\n            zval *original_var = offset;\n            do {\n                (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (offset)->value = (original_var)->value;\n                    (*offset).type = (*original_var).type;\n                } while (0);\n                zval_set_refcount_p(offset, 1);\n                zval_unset_isref_p(offset);\n            } while (0);\n            _zval_copy_ctor((offset));\n        } else {\n            zval_addref_p(offset);\n        }\n        ;\n        zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n        _zval_ptr_dtor((&offset));\n        if (rv) {\n            _zval_ptr_dtor((&intern->retval));\n            do {\n                (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n            } while (0);\n            (intern->retval)->refcount__gc = 1;\n            (intern->retval)->is_ref__gc = 0;\n            ;\n            ;\n            {\n                zend_uchar is_ref = zval_isref_p(intern->retval);\n                zend_uint refcount = zval_refcount_p(intern->retval);\n                do {\n                    (intern->retval)->value = (rv)->value;\n                    (*intern->retval).type = (*rv).type;\n                } while (0);\n                if (1) {\n                    _zval_copy_ctor((intern->retval));\n                }\n                if (1) {\n                    if (!1) {\n                        {\n                            (*rv).type = 0;\n                        }\n                        ;\n                    }\n                    _zval_ptr_dtor((&rv));\n                }\n                zval_set_isref_to_p(intern->retval, is_ref);\n                zval_set_refcount_p(intern->retval, refcount);\n            }\n            ;\n            return intern->retval;\n        }\n        return (executor_globals.uninitialized_zval_ptr);\n    }\n}\n", "if ((check_inherited) && !__is_neg(\"\", \"L369\", 5, &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type), &(ret), sizeof (ret))) {\n    spl_array_object *intern = (spl_array_object *)zend_object_store_get_object(object);\n    if (intern->fptr_offset_get) {\n        zval *rv;\n        if (zval_isref_p(offset)) {\n            zval *original_var = offset;\n            do {\n                (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (offset)->value = (original_var)->value;\n                    (*offset).type = (*original_var).type;\n                } while (0);\n                zval_set_refcount_p(offset, 1);\n                zval_unset_isref_p(offset);\n            } while (0);\n            _zval_copy_ctor((offset));\n        } else {\n            zval_addref_p(offset);\n        }\n        ;\n        zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n        _zval_ptr_dtor((&offset));\n        if (rv) {\n            _zval_ptr_dtor((&intern->retval));\n            do {\n                (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n            } while (0);\n            (intern->retval)->refcount__gc = 1;\n            (intern->retval)->is_ref__gc = 0;\n            ;\n            ;\n            {\n                zend_uchar is_ref = zval_isref_p(intern->retval);\n                zend_uint refcount = zval_refcount_p(intern->retval);\n                do {\n                    (intern->retval)->value = (rv)->value;\n                    (*intern->retval).type = (*rv).type;\n                } while (0);\n                if (1) {\n                    _zval_copy_ctor((intern->retval));\n                }\n                if (1) {\n                    if (!1) {\n                        {\n                            (*rv).type = 0;\n                        }\n                        ;\n                    }\n                    _zval_ptr_dtor((&rv));\n                }\n                zval_set_isref_to_p(intern->retval, is_ref);\n                zval_set_refcount_p(intern->retval, refcount);\n            }\n            ;\n            return intern->retval;\n        }\n        return (executor_globals.uninitialized_zval_ptr);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.2678456038281429, -0.988099803828144, -2.6557033148281448, -2.2340586038281431, -2.8819218918281475]
								}, {
									"case":	2,
									"scores":	[-3.8373698444281463, -3.5576240444281453, -5.2252275554281464, -4.8035828444281456, -5.4514461324281456]
								}, {
									"case":	3,
									"scores":	[-3.8373698444281463, -3.5576240444281453, -5.2252275554281464, -4.8035828444281456, -5.4514461324281456]
								}]
						}, {
							"switch":	58,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	369,
							"begin_column":	2,
							"end_line":	384,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L369\", 5, &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type), &(ret), sizeof (ret)))\n    if (check_inherited) {\n        spl_array_object *intern = (spl_array_object *)zend_object_store_get_object(object);\n        if (intern->fptr_offset_get) {\n            zval *rv;\n            if (zval_isref_p(offset)) {\n                zval *original_var = offset;\n                do {\n                    (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (offset)->value = (original_var)->value;\n                        (*offset).type = (*original_var).type;\n                    } while (0);\n                    zval_set_refcount_p(offset, 1);\n                    zval_unset_isref_p(offset);\n                } while (0);\n                _zval_copy_ctor((offset));\n            } else {\n                zval_addref_p(offset);\n            }\n            ;\n            zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n            _zval_ptr_dtor((&offset));\n            if (rv) {\n                _zval_ptr_dtor((&intern->retval));\n                do {\n                    (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n                } while (0);\n                (intern->retval)->refcount__gc = 1;\n                (intern->retval)->is_ref__gc = 0;\n                ;\n                ;\n                {\n                    zend_uchar is_ref = zval_isref_p(intern->retval);\n                    zend_uint refcount = zval_refcount_p(intern->retval);\n                    do {\n                        (intern->retval)->value = (rv)->value;\n                        (*intern->retval).type = (*rv).type;\n                    } while (0);\n                    if (1) {\n                        _zval_copy_ctor((intern->retval));\n                    }\n                    if (1) {\n                        if (!1) {\n                            {\n                                (*rv).type = 0;\n                            }\n                            ;\n                        }\n                        _zval_ptr_dtor((&rv));\n                    }\n                    zval_set_isref_to_p(intern->retval, is_ref);\n                    zval_set_refcount_p(intern->retval, refcount);\n                }\n                ;\n                return intern->retval;\n            }\n            return (executor_globals.uninitialized_zval_ptr);\n        }\n    }\n", "if (!__is_neg(\"\", \"L369\", 5, &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type), &(ret), sizeof (ret)) && (check_inherited)) {\n    spl_array_object *intern = (spl_array_object *)zend_object_store_get_object(object);\n    if (intern->fptr_offset_get) {\n        zval *rv;\n        if (zval_isref_p(offset)) {\n            zval *original_var = offset;\n            do {\n                (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (offset)->value = (original_var)->value;\n                    (*offset).type = (*original_var).type;\n                } while (0);\n                zval_set_refcount_p(offset, 1);\n                zval_unset_isref_p(offset);\n            } while (0);\n            _zval_copy_ctor((offset));\n        } else {\n            zval_addref_p(offset);\n        }\n        ;\n        zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_get, \"offsetGet\", sizeof (\"offsetGet\") - 1, &rv, 1, offset, ((void *)0));\n        _zval_ptr_dtor((&offset));\n        if (rv) {\n            _zval_ptr_dtor((&intern->retval));\n            do {\n                (intern->retval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(intern->retval))->u.buffered = ((void *)0);\n            } while (0);\n            (intern->retval)->refcount__gc = 1;\n            (intern->retval)->is_ref__gc = 0;\n            ;\n            ;\n            {\n                zend_uchar is_ref = zval_isref_p(intern->retval);\n                zend_uint refcount = zval_refcount_p(intern->retval);\n                do {\n                    (intern->retval)->value = (rv)->value;\n                    (*intern->retval).type = (*rv).type;\n                } while (0);\n                if (1) {\n                    _zval_copy_ctor((intern->retval));\n                }\n                if (1) {\n                    if (!1) {\n                        {\n                            (*rv).type = 0;\n                        }\n                        ;\n                    }\n                    _zval_ptr_dtor((&rv));\n                }\n                zval_set_isref_to_p(intern->retval, is_ref);\n                zval_set_refcount_p(intern->retval, refcount);\n            }\n            ;\n            return intern->retval;\n        }\n        return (executor_globals.uninitialized_zval_ptr);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2392545466911047, -6.9595087466911041, -8.6271122576911043, -8.2054675466911036, -8.8533308346911035]
								}, {
									"case":	2,
									"scores":	[-7.1254405466911042, -6.8456947466911036, -8.5132982576911047, -8.0916535466911039, -8.7395168346911039]
								}]
						}]
				}, {
					"line":	384,
					"switches":	[{
							"switch":	59,
							"types":	[[], [], [], [], [112], [], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	385,
							"begin_column":	0,
							"end_line":	385,
							"end_column":	0,
							"patch_codes":	["_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(ret)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "ret = (ret)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (object), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (offset), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (object), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (offset), type)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((ret)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((ret)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, type)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "zval_delref_p(*(ret))", "zval_set_isref_p(*(ret))", "if (__is_neg(\"\", \"L385\", 5, &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type), &(ret), sizeof (ret)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	2,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	3,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	4,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	5,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	6,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	7,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	8,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	9,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	10,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	11,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	12,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	13,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	14,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	15,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	16,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	17,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	18,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	19,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	20,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	21,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	22,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	23,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	24,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	25,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	26,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	27,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	28,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	29,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	30,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	31,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	32,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	33,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	34,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	35,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	36,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	37,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	38,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	39,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	40,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	41,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	42,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	43,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	44,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	45,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	46,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	47,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	48,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	49,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	50,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	51,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	52,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	53,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	54,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	55,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	56,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	57,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	58,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	59,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	60,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	61,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	62,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	63,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	64,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	65,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	66,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	67,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	68,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	69,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	70,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	71,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	72,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	73,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	74,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	75,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	76,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	77,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	78,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	79,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	80,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	81,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	82,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	83,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	84,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	85,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	86,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	87,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	88,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	89,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	90,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	91,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	92,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	93,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	94,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	95,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	96,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	97,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	98,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	99,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	100,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	101,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	102,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	103,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	104,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	105,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	106,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	107,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	108,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	109,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	110,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	111,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	112,
									"scores":	[-8.3033378967385456, -8.5211936905385457, -6.9425725105385458, -9.1874758967385457, -11.239749155738545]
								}]
						}, {
							"switch":	60,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	385,
							"begin_column":	2,
							"end_line":	385,
							"end_column":	87,
							"patch_codes":	["if (!__is_neg(\"\", \"L385\", 5, &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type), &(ret), sizeof (ret)))\n    ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, type);\n", "{\n}\n", "ret = (ret)", "ret = spl_array_get_dimension_ptr_ptr((0 * check_inherited), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((0 * type), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited != 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited != type), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited * type), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited + 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited + type), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited - 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited - type), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited == 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited == type), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((check_inherited), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((object != 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((object != offset), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((object == 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((object == offset), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((offset != 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((offset == 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((ret != 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((ret == 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((type != 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((type * check_inherited), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((type + 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((type - 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((type == 0), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr((type), object, offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (&check_inherited), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (&object), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (&offset), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (&ret), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (&type), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (object), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (offset), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (&check_inherited), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (&object), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (&offset), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (&ret), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (&type), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (object), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (offset), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (0 * check_inherited))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (0 * type))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited != 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited != type))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited * type))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited + 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited + type))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited - 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited - type))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited == 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited == type))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (check_inherited))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (object != 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (object != offset))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (object == 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (object == offset))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (offset != 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (offset == 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (ret != 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (ret == 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (type != 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (type * check_inherited))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (type + 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (type - 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (type == 0))", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, (type))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7782273657385463, -8.4213554462385467, -7.7059623662385457, -6.6204503657385461, -7.5065478427385459]
								}, {
									"case":	2,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	3,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	4,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	5,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	6,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	7,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	8,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	9,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	10,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	11,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	12,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	13,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	14,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	15,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	16,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	17,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	18,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	19,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	20,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	21,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	22,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	23,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	24,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	25,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	26,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	27,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	28,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	29,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	30,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	31,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	32,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	33,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	34,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	35,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	36,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	37,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	38,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	39,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	40,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	41,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	42,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	43,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	44,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	45,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	46,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	47,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	48,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	49,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	50,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	51,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	52,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	53,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	54,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	55,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	56,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	57,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	58,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	59,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	60,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	61,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	62,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	63,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	64,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	65,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	66,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	67,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	68,
									"scores":	[-6.9222263957385461]
								}, {
									"case":	69,
									"scores":	[-6.9222263957385461]
								}]
						}]
				}, {
					"line":	389,
					"switches":	[{
							"switch":	61,
							"types":	[[], [], [], [], [112], [], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	390,
							"begin_column":	0,
							"end_line":	390,
							"end_column":	0,
							"patch_codes":	["_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(ret)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "ret = (ret)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (object), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (offset), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (object), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (offset), type)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((ret)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((ret)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, type)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "zval_delref_p(*(ret))", "zval_set_isref_p(*(ret))", "if (__is_neg(\"\", \"L390\", 5, &(type), sizeof (type), &(ret), sizeof (ret), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.80101015183343]
								}, {
									"case":	2,
									"scores":	[-6.80101015183343]
								}, {
									"case":	3,
									"scores":	[-6.80101015183343]
								}, {
									"case":	4,
									"scores":	[-6.80101015183343]
								}, {
									"case":	5,
									"scores":	[-6.80101015183343]
								}, {
									"case":	6,
									"scores":	[-6.80101015183343]
								}, {
									"case":	7,
									"scores":	[-6.80101015183343]
								}, {
									"case":	8,
									"scores":	[-6.80101015183343]
								}, {
									"case":	9,
									"scores":	[-6.80101015183343]
								}, {
									"case":	10,
									"scores":	[-6.80101015183343]
								}, {
									"case":	11,
									"scores":	[-6.80101015183343]
								}, {
									"case":	12,
									"scores":	[-6.80101015183343]
								}, {
									"case":	13,
									"scores":	[-6.80101015183343]
								}, {
									"case":	14,
									"scores":	[-6.80101015183343]
								}, {
									"case":	15,
									"scores":	[-6.80101015183343]
								}, {
									"case":	16,
									"scores":	[-6.80101015183343]
								}, {
									"case":	17,
									"scores":	[-6.80101015183343]
								}, {
									"case":	18,
									"scores":	[-6.80101015183343]
								}, {
									"case":	19,
									"scores":	[-6.80101015183343]
								}, {
									"case":	20,
									"scores":	[-6.80101015183343]
								}, {
									"case":	21,
									"scores":	[-6.80101015183343]
								}, {
									"case":	22,
									"scores":	[-6.80101015183343]
								}, {
									"case":	23,
									"scores":	[-6.80101015183343]
								}, {
									"case":	24,
									"scores":	[-6.80101015183343]
								}, {
									"case":	25,
									"scores":	[-6.80101015183343]
								}, {
									"case":	26,
									"scores":	[-6.80101015183343]
								}, {
									"case":	27,
									"scores":	[-6.80101015183343]
								}, {
									"case":	28,
									"scores":	[-6.80101015183343]
								}, {
									"case":	29,
									"scores":	[-6.80101015183343]
								}, {
									"case":	30,
									"scores":	[-6.80101015183343]
								}, {
									"case":	31,
									"scores":	[-6.80101015183343]
								}, {
									"case":	32,
									"scores":	[-6.80101015183343]
								}, {
									"case":	33,
									"scores":	[-6.80101015183343]
								}, {
									"case":	34,
									"scores":	[-6.80101015183343]
								}, {
									"case":	35,
									"scores":	[-6.80101015183343]
								}, {
									"case":	36,
									"scores":	[-6.80101015183343]
								}, {
									"case":	37,
									"scores":	[-6.80101015183343]
								}, {
									"case":	38,
									"scores":	[-6.80101015183343]
								}, {
									"case":	39,
									"scores":	[-6.80101015183343]
								}, {
									"case":	40,
									"scores":	[-6.80101015183343]
								}, {
									"case":	41,
									"scores":	[-6.80101015183343]
								}, {
									"case":	42,
									"scores":	[-6.80101015183343]
								}, {
									"case":	43,
									"scores":	[-6.80101015183343]
								}, {
									"case":	44,
									"scores":	[-6.80101015183343]
								}, {
									"case":	45,
									"scores":	[-6.80101015183343]
								}, {
									"case":	46,
									"scores":	[-6.80101015183343]
								}, {
									"case":	47,
									"scores":	[-6.80101015183343]
								}, {
									"case":	48,
									"scores":	[-6.80101015183343]
								}, {
									"case":	49,
									"scores":	[-6.80101015183343]
								}, {
									"case":	50,
									"scores":	[-6.80101015183343]
								}, {
									"case":	51,
									"scores":	[-6.80101015183343]
								}, {
									"case":	52,
									"scores":	[-6.80101015183343]
								}, {
									"case":	53,
									"scores":	[-6.80101015183343]
								}, {
									"case":	54,
									"scores":	[-6.80101015183343]
								}, {
									"case":	55,
									"scores":	[-6.80101015183343]
								}, {
									"case":	56,
									"scores":	[-6.80101015183343]
								}, {
									"case":	57,
									"scores":	[-6.80101015183343]
								}, {
									"case":	58,
									"scores":	[-6.80101015183343]
								}, {
									"case":	59,
									"scores":	[-6.80101015183343]
								}, {
									"case":	60,
									"scores":	[-6.80101015183343]
								}, {
									"case":	61,
									"scores":	[-6.80101015183343]
								}, {
									"case":	62,
									"scores":	[-6.80101015183343]
								}, {
									"case":	63,
									"scores":	[-6.80101015183343]
								}, {
									"case":	64,
									"scores":	[-6.80101015183343]
								}, {
									"case":	65,
									"scores":	[-6.80101015183343]
								}, {
									"case":	66,
									"scores":	[-6.80101015183343]
								}, {
									"case":	67,
									"scores":	[-6.80101015183343]
								}, {
									"case":	68,
									"scores":	[-6.80101015183343]
								}, {
									"case":	69,
									"scores":	[-6.80101015183343]
								}, {
									"case":	70,
									"scores":	[-6.80101015183343]
								}, {
									"case":	71,
									"scores":	[-6.80101015183343]
								}, {
									"case":	72,
									"scores":	[-6.80101015183343]
								}, {
									"case":	73,
									"scores":	[-6.80101015183343]
								}, {
									"case":	74,
									"scores":	[-6.80101015183343]
								}, {
									"case":	75,
									"scores":	[-6.80101015183343]
								}, {
									"case":	76,
									"scores":	[-6.80101015183343]
								}, {
									"case":	77,
									"scores":	[-6.80101015183343]
								}, {
									"case":	78,
									"scores":	[-6.80101015183343]
								}, {
									"case":	79,
									"scores":	[-6.80101015183343]
								}, {
									"case":	80,
									"scores":	[-6.80101015183343]
								}, {
									"case":	81,
									"scores":	[-6.80101015183343]
								}, {
									"case":	82,
									"scores":	[-6.80101015183343]
								}, {
									"case":	83,
									"scores":	[-6.80101015183343]
								}, {
									"case":	84,
									"scores":	[-6.80101015183343]
								}, {
									"case":	85,
									"scores":	[-6.80101015183343]
								}, {
									"case":	86,
									"scores":	[-6.80101015183343]
								}, {
									"case":	87,
									"scores":	[-6.80101015183343]
								}, {
									"case":	88,
									"scores":	[-6.80101015183343]
								}, {
									"case":	89,
									"scores":	[-6.80101015183343]
								}, {
									"case":	90,
									"scores":	[-6.80101015183343]
								}, {
									"case":	91,
									"scores":	[-6.80101015183343]
								}, {
									"case":	92,
									"scores":	[-6.80101015183343]
								}, {
									"case":	93,
									"scores":	[-6.80101015183343]
								}, {
									"case":	94,
									"scores":	[-6.80101015183343]
								}, {
									"case":	95,
									"scores":	[-6.80101015183343]
								}, {
									"case":	96,
									"scores":	[-6.80101015183343]
								}, {
									"case":	97,
									"scores":	[-6.80101015183343]
								}, {
									"case":	98,
									"scores":	[-6.80101015183343]
								}, {
									"case":	99,
									"scores":	[-6.80101015183343]
								}, {
									"case":	100,
									"scores":	[-6.80101015183343]
								}, {
									"case":	101,
									"scores":	[-6.80101015183343]
								}, {
									"case":	102,
									"scores":	[-6.80101015183343]
								}, {
									"case":	103,
									"scores":	[-6.80101015183343]
								}, {
									"case":	104,
									"scores":	[-6.80101015183343]
								}, {
									"case":	105,
									"scores":	[-6.80101015183343]
								}, {
									"case":	106,
									"scores":	[-6.80101015183343]
								}, {
									"case":	107,
									"scores":	[-6.80101015183343]
								}, {
									"case":	108,
									"scores":	[-6.80101015183343]
								}, {
									"case":	109,
									"scores":	[-6.80101015183343]
								}, {
									"case":	110,
									"scores":	[-6.80101015183343]
								}, {
									"case":	111,
									"scores":	[-6.80101015183343]
								}, {
									"case":	112,
									"scores":	[-11.353641041833429, -8.55731736883343, -11.386801421833429, -11.58454313563343, -10.219997235633429]
								}]
						}, {
							"switch":	62,
							"types":	[[7], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [5, 6], [], [4]],
							"begin_line":	390,
							"begin_column":	2,
							"end_line":	406,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L390\", 5, &(type), sizeof (type), &(ret), sizeof (ret), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset))) {\n    if (zval_refcount_p(*(ret)) > 1) {\n        zval *newval;\n        do {\n            (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n        } while (0);\n        (newval)->refcount__gc = 1;\n        (newval)->is_ref__gc = 0;\n        ;\n        ;\n        *newval = **ret;\n        _zval_copy_ctor((newval));\n        zval_set_refcount_p(newval, 1);\n        zval_delref_p(*(ret));\n        *ret = newval;\n    }\n    zval_set_isref_p(*(ret));\n}\n", "if ((((type == 1 || type == 2)) || __is_neg(\"\", \"L390\", 5, &(type), sizeof (type), &(ret), sizeof (ret), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset))) && !zval_isref_p(*(ret))) {\n    if (zval_refcount_p(*(ret)) > 1) {\n        zval *newval;\n        do {\n            (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n        } while (0);\n        (newval)->refcount__gc = 1;\n        (newval)->is_ref__gc = 0;\n        ;\n        ;\n        *newval = **ret;\n        _zval_copy_ctor((newval));\n        zval_set_refcount_p(newval, 1);\n        zval_delref_p(*(ret));\n        *ret = newval;\n    }\n    zval_set_isref_p(*(ret));\n}\n", "if (((type == 1 || type == 2) && !zval_isref_p(*(ret))) || __is_neg(\"\", \"L390\", 5, &(type), sizeof (type), &(ret), sizeof (ret), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset))) {\n    if (zval_refcount_p(*(ret)) > 1) {\n        zval *newval;\n        do {\n            (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n        } while (0);\n        (newval)->refcount__gc = 1;\n        (newval)->is_ref__gc = 0;\n        ;\n        ;\n        *newval = **ret;\n        _zval_copy_ctor((newval));\n        zval_set_refcount_p(newval, 1);\n        zval_delref_p(*(ret));\n        *ret = newval;\n    }\n    zval_set_isref_p(*(ret));\n}\n", "if ((type == 1 || type == 2)) {\n    if (zval_refcount_p(*(ret)) > 1) {\n        zval *newval;\n        do {\n            (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n        } while (0);\n        (newval)->refcount__gc = 1;\n        (newval)->is_ref__gc = 0;\n        ;\n        ;\n        *newval = **ret;\n        _zval_copy_ctor((newval));\n        zval_set_refcount_p(newval, 1);\n        zval_delref_p(*(ret));\n        *ret = newval;\n    }\n    zval_set_isref_p(*(ret));\n}\n", "if ((type == 1 || type == 2) && !zval_set_isref_p(*(ret))) {\n    if (zval_refcount_p(*(ret)) > 1) {\n        zval *newval;\n        do {\n            (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n        } while (0);\n        (newval)->refcount__gc = 1;\n        (newval)->is_ref__gc = 0;\n        ;\n        ;\n        *newval = **ret;\n        _zval_copy_ctor((newval));\n        zval_set_refcount_p(newval, 1);\n        zval_delref_p(*(ret));\n        *ret = newval;\n    }\n    zval_set_isref_p(*(ret));\n}\n", "if ((type == 1 || type == 2) && !zval_unset_isref_p(*(ret))) {\n    if (zval_refcount_p(*(ret)) > 1) {\n        zval *newval;\n        do {\n            (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n        } while (0);\n        (newval)->refcount__gc = 1;\n        (newval)->is_ref__gc = 0;\n        ;\n        ;\n        *newval = **ret;\n        _zval_copy_ctor((newval));\n        zval_set_refcount_p(newval, 1);\n        zval_delref_p(*(ret));\n        *ret = newval;\n    }\n    zval_set_isref_p(*(ret));\n}\n", "if (((type == 1 || type == 2) && !zval_isref_p(*(ret))) && !__is_neg(\"\", \"L390\", 5, &(type), sizeof (type), &(ret), sizeof (ret), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset))) {\n    if (zval_refcount_p(*(ret)) > 1) {\n        zval *newval;\n        do {\n            (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n        } while (0);\n        (newval)->refcount__gc = 1;\n        (newval)->is_ref__gc = 0;\n        ;\n        ;\n        *newval = **ret;\n        _zval_copy_ctor((newval));\n        zval_set_refcount_p(newval, 1);\n        zval_delref_p(*(ret));\n        *ret = newval;\n    }\n    zval_set_isref_p(*(ret));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.5104259604281469, -2.1482852664281458, -4.6344159604281456, -5.1885611949281465, -4.8437311149281452]
								}, {
									"case":	2,
									"scores":	[-3.7045584694281462, -3.3424177754281459, -5.8285484694281458, -6.3826937039281457, -6.0378636239281454]
								}, {
									"case":	3,
									"scores":	[-3.7045584694281462, -3.3424177754281459, -5.8285484694281458, -6.3826937039281457, -6.0378636239281454]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.7045584694281462, -3.3424177754281459, -5.8285484694281458, -6.3826937039281457, -6.0378636239281454]
								}]
						}, {
							"switch":	63,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	390,
							"begin_column":	2,
							"end_line":	406,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L390\", 5, &(type), sizeof (type), &(ret), sizeof (ret), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset)))\n    if ((type == 1 || type == 2) && !zval_isref_p(*(ret))) {\n        if (zval_refcount_p(*(ret)) > 1) {\n            zval *newval;\n            do {\n                (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n            } while (0);\n            (newval)->refcount__gc = 1;\n            (newval)->is_ref__gc = 0;\n            ;\n            ;\n            *newval = **ret;\n            _zval_copy_ctor((newval));\n            zval_set_refcount_p(newval, 1);\n            zval_delref_p(*(ret));\n            *ret = newval;\n        }\n        zval_set_isref_p(*(ret));\n    }\n", "if (!__is_neg(\"\", \"L390\", 5, &(type), sizeof (type), &(ret), sizeof (ret), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset)) && ((type == 1 || type == 2) && !zval_isref_p(*(ret)))) {\n    if (zval_refcount_p(*(ret)) > 1) {\n        zval *newval;\n        do {\n            (newval) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(newval))->u.buffered = ((void *)0);\n        } while (0);\n        (newval)->refcount__gc = 1;\n        (newval)->is_ref__gc = 0;\n        ;\n        ;\n        *newval = **ret;\n        _zval_copy_ctor((newval));\n        zval_set_refcount_p(newval, 1);\n        zval_delref_p(*(ret));\n        *ret = newval;\n    }\n    zval_set_isref_p(*(ret));\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.18405046783343, -6.82190977383343, -9.30804046783343, -9.86218570233343, -9.51735562233343]
								}, {
									"case":	2,
									"scores":	[-7.62272531583343, -7.26058462183343, -9.74671531583343, -10.300860550333429, -9.95603047033343]
								}]
						}]
				}, {
					"line":	407,
					"switches":	[{
							"switch":	64,
							"types":	[[], [], [], [], [112], [], [], [], [], [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], [], [], [], [], [], []],
							"begin_line":	408,
							"begin_column":	0,
							"end_line":	408,
							"end_column":	0,
							"patch_codes":	["_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "_zval_ptr_dtor((&*(ret)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "ret = (ret)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (object), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, (offset), offset, type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (object), type)", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, (offset), type)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_delref_p(*((ret)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_isref_p(*((ret)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "ret = spl_array_get_dimension_ptr_ptr(check_inherited, object, offset, type)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "zval_delref_p(*(ret))", "zval_set_isref_p(*(ret))", "if (__is_neg(\"\", \"L408\", 5, &(ret), sizeof (ret), &(type), sizeof (type), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.78080744451591]
								}, {
									"case":	2,
									"scores":	[-6.78080744451591]
								}, {
									"case":	3,
									"scores":	[-6.78080744451591]
								}, {
									"case":	4,
									"scores":	[-6.78080744451591]
								}, {
									"case":	5,
									"scores":	[-6.78080744451591]
								}, {
									"case":	6,
									"scores":	[-6.78080744451591]
								}, {
									"case":	7,
									"scores":	[-6.78080744451591]
								}, {
									"case":	8,
									"scores":	[-6.78080744451591]
								}, {
									"case":	9,
									"scores":	[-6.78080744451591]
								}, {
									"case":	10,
									"scores":	[-6.78080744451591]
								}, {
									"case":	11,
									"scores":	[-6.78080744451591]
								}, {
									"case":	12,
									"scores":	[-6.78080744451591]
								}, {
									"case":	13,
									"scores":	[-6.78080744451591]
								}, {
									"case":	14,
									"scores":	[-6.78080744451591]
								}, {
									"case":	15,
									"scores":	[-6.78080744451591]
								}, {
									"case":	16,
									"scores":	[-6.78080744451591]
								}, {
									"case":	17,
									"scores":	[-6.78080744451591]
								}, {
									"case":	18,
									"scores":	[-6.78080744451591]
								}, {
									"case":	19,
									"scores":	[-6.78080744451591]
								}, {
									"case":	20,
									"scores":	[-6.78080744451591]
								}, {
									"case":	21,
									"scores":	[-6.78080744451591]
								}, {
									"case":	22,
									"scores":	[-6.78080744451591]
								}, {
									"case":	23,
									"scores":	[-6.78080744451591]
								}, {
									"case":	24,
									"scores":	[-6.78080744451591]
								}, {
									"case":	25,
									"scores":	[-6.78080744451591]
								}, {
									"case":	26,
									"scores":	[-6.78080744451591]
								}, {
									"case":	27,
									"scores":	[-6.78080744451591]
								}, {
									"case":	28,
									"scores":	[-6.78080744451591]
								}, {
									"case":	29,
									"scores":	[-6.78080744451591]
								}, {
									"case":	30,
									"scores":	[-6.78080744451591]
								}, {
									"case":	31,
									"scores":	[-6.78080744451591]
								}, {
									"case":	32,
									"scores":	[-6.78080744451591]
								}, {
									"case":	33,
									"scores":	[-6.78080744451591]
								}, {
									"case":	34,
									"scores":	[-6.78080744451591]
								}, {
									"case":	35,
									"scores":	[-6.78080744451591]
								}, {
									"case":	36,
									"scores":	[-6.78080744451591]
								}, {
									"case":	37,
									"scores":	[-6.78080744451591]
								}, {
									"case":	38,
									"scores":	[-6.78080744451591]
								}, {
									"case":	39,
									"scores":	[-6.78080744451591]
								}, {
									"case":	40,
									"scores":	[-6.78080744451591]
								}, {
									"case":	41,
									"scores":	[-6.78080744451591]
								}, {
									"case":	42,
									"scores":	[-6.78080744451591]
								}, {
									"case":	43,
									"scores":	[-6.78080744451591]
								}, {
									"case":	44,
									"scores":	[-6.78080744451591]
								}, {
									"case":	45,
									"scores":	[-6.78080744451591]
								}, {
									"case":	46,
									"scores":	[-6.78080744451591]
								}, {
									"case":	47,
									"scores":	[-6.78080744451591]
								}, {
									"case":	48,
									"scores":	[-6.78080744451591]
								}, {
									"case":	49,
									"scores":	[-6.78080744451591]
								}, {
									"case":	50,
									"scores":	[-6.78080744451591]
								}, {
									"case":	51,
									"scores":	[-6.78080744451591]
								}, {
									"case":	52,
									"scores":	[-6.78080744451591]
								}, {
									"case":	53,
									"scores":	[-6.78080744451591]
								}, {
									"case":	54,
									"scores":	[-6.78080744451591]
								}, {
									"case":	55,
									"scores":	[-6.78080744451591]
								}, {
									"case":	56,
									"scores":	[-6.78080744451591]
								}, {
									"case":	57,
									"scores":	[-6.78080744451591]
								}, {
									"case":	58,
									"scores":	[-6.78080744451591]
								}, {
									"case":	59,
									"scores":	[-6.78080744451591]
								}, {
									"case":	60,
									"scores":	[-6.78080744451591]
								}, {
									"case":	61,
									"scores":	[-6.78080744451591]
								}, {
									"case":	62,
									"scores":	[-6.78080744451591]
								}, {
									"case":	63,
									"scores":	[-6.78080744451591]
								}, {
									"case":	64,
									"scores":	[-6.78080744451591]
								}, {
									"case":	65,
									"scores":	[-6.78080744451591]
								}, {
									"case":	66,
									"scores":	[-6.78080744451591]
								}, {
									"case":	67,
									"scores":	[-6.78080744451591]
								}, {
									"case":	68,
									"scores":	[-6.78080744451591]
								}, {
									"case":	69,
									"scores":	[-6.78080744451591]
								}, {
									"case":	70,
									"scores":	[-6.78080744451591]
								}, {
									"case":	71,
									"scores":	[-6.78080744451591]
								}, {
									"case":	72,
									"scores":	[-6.78080744451591]
								}, {
									"case":	73,
									"scores":	[-6.78080744451591]
								}, {
									"case":	74,
									"scores":	[-6.78080744451591]
								}, {
									"case":	75,
									"scores":	[-6.78080744451591]
								}, {
									"case":	76,
									"scores":	[-6.78080744451591]
								}, {
									"case":	77,
									"scores":	[-6.78080744451591]
								}, {
									"case":	78,
									"scores":	[-6.78080744451591]
								}, {
									"case":	79,
									"scores":	[-6.78080744451591]
								}, {
									"case":	80,
									"scores":	[-6.78080744451591]
								}, {
									"case":	81,
									"scores":	[-6.78080744451591]
								}, {
									"case":	82,
									"scores":	[-6.78080744451591]
								}, {
									"case":	83,
									"scores":	[-6.78080744451591]
								}, {
									"case":	84,
									"scores":	[-6.78080744451591]
								}, {
									"case":	85,
									"scores":	[-6.78080744451591]
								}, {
									"case":	86,
									"scores":	[-6.78080744451591]
								}, {
									"case":	87,
									"scores":	[-6.78080744451591]
								}, {
									"case":	88,
									"scores":	[-6.78080744451591]
								}, {
									"case":	89,
									"scores":	[-6.78080744451591]
								}, {
									"case":	90,
									"scores":	[-6.78080744451591]
								}, {
									"case":	91,
									"scores":	[-6.78080744451591]
								}, {
									"case":	92,
									"scores":	[-6.78080744451591]
								}, {
									"case":	93,
									"scores":	[-6.78080744451591]
								}, {
									"case":	94,
									"scores":	[-6.78080744451591]
								}, {
									"case":	95,
									"scores":	[-6.78080744451591]
								}, {
									"case":	96,
									"scores":	[-6.78080744451591]
								}, {
									"case":	97,
									"scores":	[-6.78080744451591]
								}, {
									"case":	98,
									"scores":	[-6.78080744451591]
								}, {
									"case":	99,
									"scores":	[-6.78080744451591]
								}, {
									"case":	100,
									"scores":	[-6.78080744451591]
								}, {
									"case":	101,
									"scores":	[-6.78080744451591]
								}, {
									"case":	102,
									"scores":	[-6.78080744451591]
								}, {
									"case":	103,
									"scores":	[-6.78080744451591]
								}, {
									"case":	104,
									"scores":	[-6.78080744451591]
								}, {
									"case":	105,
									"scores":	[-6.78080744451591]
								}, {
									"case":	106,
									"scores":	[-6.78080744451591]
								}, {
									"case":	107,
									"scores":	[-6.78080744451591]
								}, {
									"case":	108,
									"scores":	[-6.78080744451591]
								}, {
									"case":	109,
									"scores":	[-6.78080744451591]
								}, {
									"case":	110,
									"scores":	[-6.78080744451591]
								}, {
									"case":	111,
									"scores":	[-6.78080744451591]
								}, {
									"case":	112,
									"scores":	[-8.71500263051591, -8.87490071451591, -9.36670471451591, -9.56444642831591, -8.19990052831591]
								}]
						}, {
							"switch":	65,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	408,
							"begin_column":	2,
							"end_line":	408,
							"end_column":	10,
							"patch_codes":	["if (!__is_neg(\"\", \"L408\", 5, &(ret), sizeof (ret), &(type), sizeof (type), &(check_inherited), sizeof (check_inherited), &(object), sizeof (object), &(offset), sizeof (offset)))\n    return *ret;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.64639026101591, -8.03443392051591, -8.42118976051591, -8.97533499501591, -8.63050491501591]
								}]
						}]
				}, {
					"line":	412,
					"switches":	[{
							"switch":	66,
							"types":	[[], [], [], [], [98], [], [], [], [], [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [], [], [], [], []],
							"begin_line":	413,
							"begin_column":	0,
							"end_line":	413,
							"end_column":	0,
							"patch_codes":	["_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L413\", 3, &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-8.2818145601261435, -8.2818145601261435, -8.0357756463261438]
								}]
						}, {
							"switch":	67,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	413,
							"begin_column":	2,
							"end_line":	413,
							"end_column":	70,
							"patch_codes":	["if (!__is_neg(\"\", \"L413\", 3, &(object), sizeof (object), &(offset), sizeof (offset), &(type), sizeof (type)))\n    return spl_array_read_dimension_ex(1, object, offset, type);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.2535673983261439, -8.2535673983261439, -7.4956792983261433]
								}]
						}]
				}, {
					"line":	491,
					"switches":	[]
				}, {
					"line":	492,
					"switches":	[]
				}, {
					"line":	493,
					"switches":	[]
				}, {
					"line":	495,
					"switches":	[{
							"switch":	68,
							"types":	[[], [], [], [], [175], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], []],
							"begin_line":	496,
							"begin_column":	0,
							"end_line":	496,
							"end_column":	0,
							"patch_codes":	["memset(&(*offset), 0, sizeof (*(&(*offset))))", "memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "ht = (ht)", "ht = spl_array_get_hash_table((intern), 0)", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_call_method(&(object), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&(offset), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(object))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(offset))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &(intern)->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (object), ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (offset), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "ht = spl_array_get_hash_table(intern, 0)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_hash_verify_pos(intern)", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*offset).value.lval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "if (__is_neg(\"\", \"L496\", 22, &(check_inherited), sizeof (check_inherited), &(intern), sizeof (intern), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(ht), sizeof (ht), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	2,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	3,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	4,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	5,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	6,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	7,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	8,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	9,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	10,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	11,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	12,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	13,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	14,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	15,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	16,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	17,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	18,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	19,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	20,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	21,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	22,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	23,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	24,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	25,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	26,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	27,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	28,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	29,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	30,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-10.059379617375756, -10.729222953075755, -11.033772664375753, -10.210465546075756, -9.6888134583757548, -11.091779741175756, -12.133243561075759, -10.136563390375755, -10.824879131175756, -10.824879131175756, -10.824879131175756, -10.578840217375756, -10.578840217375756, -10.578840217375756, -10.789729334375753, -10.789729334375753, -10.789729334375753, -10.789729334375753, -10.824879131175756, -10.824879131175756, -10.578840217375756, -10.578840217375756]
								}]
						}, {
							"switch":	69,
							"types":	[[5], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [4]],
							"begin_line":	496,
							"begin_column":	2,
							"end_line":	501,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L496\", 22, &(check_inherited), sizeof (check_inherited), &(intern), sizeof (intern), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(ht), sizeof (ht), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc))) {\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    return;\n}\n", "if (((check_inherited) || __is_neg(\"\", \"L496\", 22, &(check_inherited), sizeof (check_inherited), &(intern), sizeof (intern), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(ht), sizeof (ht), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc))) && intern->fptr_offset_del) {\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    return;\n}\n", "if ((check_inherited && intern->fptr_offset_del) || __is_neg(\"\", \"L496\", 22, &(check_inherited), sizeof (check_inherited), &(intern), sizeof (intern), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(ht), sizeof (ht), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc))) {\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    return;\n}\n", "if (check_inherited) {\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    return;\n}\n", "if ((check_inherited && intern->fptr_offset_del) && !__is_neg(\"\", \"L496\", 22, &(check_inherited), sizeof (check_inherited), &(intern), sizeof (intern), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(ht), sizeof (ht), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc))) {\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.840615147528145, -0.11757521652814606, -0.771220557528144, -1.6029031664281455, -0.624253978528145, -0.03374919352814576, 0.15586066457185455, 0.400159502471857, -1.5151995575281445, -1.5151995575281445, -1.5151995575281445, -0.75731145752814477, -0.75731145752814477, -0.75731145752814477, -1.2265714575281441, -1.2265714575281441, -1.2265714575281441, -1.2265714575281441, -1.5151995575281445, -1.5151995575281445, -0.75731145752814477, -0.75731145752814477]
								}, {
									"case":	2,
									"scores":	[-4.2443376004281452, -3.5212976694281455, -4.1749430104281453, -5.0066256193281458, -4.0279764314281454, -3.4374716464281461, -3.2478617883281453, -3.0035629504281456, -4.9189220104281457, -4.9189220104281457, -4.9189220104281457, -4.1610339104281451, -4.1610339104281451, -4.1610339104281451, -4.6302939104281453, -4.6302939104281453, -4.6302939104281453, -4.6302939104281453, -4.9189220104281457, -4.9189220104281457, -4.1610339104281451, -4.1610339104281451]
								}, {
									"case":	3,
									"scores":	[-4.2443376004281452, -3.5212976694281455, -4.1749430104281453, -5.0066256193281458, -4.0279764314281454, -3.4374716464281461, -3.2478617883281453, -3.0035629504281456, -4.9189220104281457, -4.9189220104281457, -4.9189220104281457, -4.1610339104281451, -4.1610339104281451, -4.1610339104281451, -4.6302939104281453, -4.6302939104281453, -4.6302939104281453, -4.6302939104281453, -4.9189220104281457, -4.9189220104281457, -4.1610339104281451, -4.1610339104281451]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-4.2443376004281452, -3.5212976694281455, -4.1749430104281453, -5.0066256193281458, -4.0279764314281454, -3.4374716464281461, -3.2478617883281453, -3.0035629504281456, -4.9189220104281457, -4.9189220104281457, -4.9189220104281457, -4.1610339104281451, -4.1610339104281451, -4.1610339104281451, -4.6302939104281453, -4.6302939104281453, -4.6302939104281453, -4.6302939104281453, -4.9189220104281457, -4.9189220104281457, -4.1610339104281451, -4.1610339104281451]
								}]
						}, {
							"switch":	70,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	496,
							"begin_column":	2,
							"end_line":	501,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L496\", 22, &(check_inherited), sizeof (check_inherited), &(intern), sizeof (intern), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(ht), sizeof (ht), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc)))\n    if (check_inherited && intern->fptr_offset_del) {\n        if (zval_isref_p(offset)) {\n            zval *original_var = offset;\n            do {\n                (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (offset)->value = (original_var)->value;\n                    (*offset).type = (*original_var).type;\n                } while (0);\n                zval_set_refcount_p(offset, 1);\n                zval_unset_isref_p(offset);\n            } while (0);\n            _zval_copy_ctor((offset));\n        } else {\n            zval_addref_p(offset);\n        }\n        ;\n        zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0));\n        _zval_ptr_dtor((&offset));\n        return;\n    }\n", "if (!__is_neg(\"\", \"L496\", 22, &(check_inherited), sizeof (check_inherited), &(intern), sizeof (intern), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(ht), sizeof (ht), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc)) && (check_inherited && intern->fptr_offset_del)) {\n    if (zval_isref_p(offset)) {\n        zval *original_var = offset;\n        do {\n            (offset) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(offset))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (offset)->value = (original_var)->value;\n                (*offset).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(offset, 1);\n            zval_unset_isref_p(offset);\n        } while (0);\n        _zval_copy_ctor((offset));\n    } else {\n        zval_addref_p(offset);\n    }\n    ;\n    zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0));\n    _zval_ptr_dtor((&offset));\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8940863459757544, -8.1710464149757556, -8.8246917559757545, -9.6563743648757541, -8.6777251769757537, -8.0872203919757553, -7.8976105338757545, -7.6533116959757548, -9.568670755975754, -9.568670755975754, -9.568670755975754, -8.8107826559757534, -8.8107826559757534, -8.8107826559757534, -9.2800426559757536, -9.2800426559757536, -9.2800426559757536, -9.2800426559757536, -9.568670755975754, -9.568670755975754, -8.8107826559757534, -8.8107826559757534]
								}, {
									"case":	2,
									"scores":	[-8.0860496109757545, -7.3630096799757547, -8.0166550209757546, -8.8483376298757541, -7.8696884419757547, -7.2791836569757544, -7.0895737988757555, -6.8452749609757548, -8.7606340209757541, -8.7606340209757541, -8.7606340209757541, -8.0027459209757552, -8.0027459209757552, -8.0027459209757552, -8.4720059209757537, -8.4720059209757537, -8.4720059209757537, -8.4720059209757537, -8.7606340209757541, -8.7606340209757541, -8.0027459209757552, -8.0027459209757552]
								}]
						}]
				}, {
					"line":	505,
					"switches":	[{
							"switch":	72,
							"types":	[[], [], [], [], [286], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], [], [], [], [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], [], [], [], [], [], []],
							"begin_line":	506,
							"begin_column":	1,
							"end_line":	506,
							"end_column":	1,
							"patch_codes":	["memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&offset->is_ref__gc, 0, sizeof (*(&offset->is_ref__gc)))", "memset(&offset->refcount__gc, 0, sizeof (*(&offset->refcount__gc)))", "memset(&offset->type, 0, sizeof (*(&offset->type)))", "memset(&offset->value, 0, sizeof (*(&offset->value)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(ht, 0, sizeof (*(ht)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "ht = (ht)", "ht = spl_array_get_hash_table((intern), 0)", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_call_method(&(object), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&(offset), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(object))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(offset))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &(intern)->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (object), ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (offset), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "ht = spl_array_get_hash_table(intern, 0)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_hash_verify_pos(intern)", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*offset).value.lval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "if (__is_neg(\"\", \"L506\", 31, &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(offset), sizeof (offset), &(object), sizeof (object), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(check_inherited), sizeof (check_inherited), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	2,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	3,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	4,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	5,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	6,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	7,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	8,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	9,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	10,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	11,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	12,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	13,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	14,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	15,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	16,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	17,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	18,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	19,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	20,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	21,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	22,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	23,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	24,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	25,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	26,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	27,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	28,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	29,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	30,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	31,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	32,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	33,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	34,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	35,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	36,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	37,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	38,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	39,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	40,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	41,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	42,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	43,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	44,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	45,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	46,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	47,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	48,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	49,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	50,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	51,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	52,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	53,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	54,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	55,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	56,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	57,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	58,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	59,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	60,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	61,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	62,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	63,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	64,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	65,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	66,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	67,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	68,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	69,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	70,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	71,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	72,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	73,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	74,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	75,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	76,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	77,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	78,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	79,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	80,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	81,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	82,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	83,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	84,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	85,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	86,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	87,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	88,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	89,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	90,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	91,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	92,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	93,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	94,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	95,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	96,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	97,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	98,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	99,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	100,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	101,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	102,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	103,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	104,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	105,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	106,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	107,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	108,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	109,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	110,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	111,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	112,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	113,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	114,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	115,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	116,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	117,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	118,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	119,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	120,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	121,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	122,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	123,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	124,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	125,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	126,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	127,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	128,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	129,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	130,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	131,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	132,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	133,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	134,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	135,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	136,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	137,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	138,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	139,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	140,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	141,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	142,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	143,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	144,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	145,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	146,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	147,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	148,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	149,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	150,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	151,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	152,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	153,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	154,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	155,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	156,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	157,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	158,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	159,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	160,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	161,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	162,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	163,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	164,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	165,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	166,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	167,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	168,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	169,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	170,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	171,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	172,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	173,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	174,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	175,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	176,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	177,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	178,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	179,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	180,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	181,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	182,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	183,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	184,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	185,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	186,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	187,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	188,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	189,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	190,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	191,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	192,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	193,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	194,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	195,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	196,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	197,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	198,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	199,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	200,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	201,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	202,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	203,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	204,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	205,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	206,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	207,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	208,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	209,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	210,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	211,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	212,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	213,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	214,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	215,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	216,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	217,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	218,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	219,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	220,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	221,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	222,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	223,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	224,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	225,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	226,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	227,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	228,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	229,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	230,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	231,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	232,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	233,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	234,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	235,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	236,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	237,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	238,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	239,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	240,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	241,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	242,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	243,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	244,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	245,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	246,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	247,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	248,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	249,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	250,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	251,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	252,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	253,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	254,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	255,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	256,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	257,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	258,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	259,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	260,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	261,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	262,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	263,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	264,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	265,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	266,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	267,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	268,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	269,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	270,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	271,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	272,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	273,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	274,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	275,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	276,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	277,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	278,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	279,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	280,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	281,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	282,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	283,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	284,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	285,
									"scores":	[-6.4979695420706376]
								}, {
									"case":	286,
									"scores":	[-11.356278789770638, -10.948151380070637, -10.666163625870638, -11.498423482770638, -10.897225225870638, -11.381536029070638, -10.651186312070639, -10.582687432070639, -11.416685825870637, -11.416685825870637, -11.416685825870637, -11.170646912070637, -11.170646912070637, -11.170646912070637, -11.381536029070638, -11.381536029070638, -11.381536029070638, -11.381536029070638, -11.416685825870637, -11.416685825870637, -11.170646912070637, -11.170646912070637, -11.170646912070637, -11.170646912070637, -11.416685825870637, -11.416685825870637, -11.416685825870637, -11.381536029070638, -11.170646912070637, -11.170646912070637, -11.170646912070637]
								}]
						}, {
							"switch":	73,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	506,
							"begin_column":	3,
							"end_line":	509,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L506\", 31, &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(offset), sizeof (offset), &(object), sizeof (object), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(check_inherited), sizeof (check_inherited), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return;\n}\n", "if ((ht->nApplyCount > 0) || __is_neg(\"\", \"L506\", 31, &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(offset), sizeof (offset), &(object), sizeof (object), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(check_inherited), sizeof (check_inherited), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return;\n}\n", "if ((ht->nApplyCount > 0) && !__is_neg(\"\", \"L506\", 31, &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(offset), sizeof (offset), &(object), sizeof (object), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(check_inherited), sizeof (check_inherited), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.476097174428145, -3.0850498354281459, -4.8058646714281457, -4.1500812233281463, -5.381795625428146, -5.0098638354281455, -4.6239075254281454, -4.1964501454281464, -5.2984919354281459, -5.2984919354281459, -5.2984919354281459, -4.5406038354281453, -4.5406038354281453, -4.5406038354281453, -5.0098638354281455, -5.0098638354281455, -5.0098638354281455, -5.0098638354281455, -5.2984919354281459, -5.2984919354281459, -4.5406038354281453, -4.5406038354281453, -4.5406038354281453, -4.5406038354281453, -5.2984919354281459, -5.2984919354281459, -5.2984919354281459, -5.0098638354281455, -4.5406038354281453, -4.5406038354281453, -4.5406038354281453]
								}, {
									"case":	2,
									"scores":	[-4.7439286678741466, -5.3528813288741457, -7.0736961648741454, -6.4179127167741452, -7.6496271188741458, -7.2776953288741462, -6.8917390188741461, -6.4642816388741462, -7.5663234288741457, -7.5663234288741457, -7.5663234288741457, -6.8084353288741459, -6.8084353288741459, -6.8084353288741459, -7.2776953288741462, -7.2776953288741462, -7.2776953288741462, -7.2776953288741462, -7.5663234288741457, -7.5663234288741457, -6.8084353288741459, -6.8084353288741459, -6.8084353288741459, -6.8084353288741459, -7.5663234288741457, -7.5663234288741457, -7.5663234288741457, -7.2776953288741462, -6.8084353288741459, -6.8084353288741459, -6.8084353288741459]
								}, {
									"case":	3,
									"scores":	[-4.7439286678741466, -5.3528813288741457, -7.0736961648741454, -6.4179127167741452, -7.6496271188741458, -7.2776953288741462, -6.8917390188741461, -6.4642816388741462, -7.5663234288741457, -7.5663234288741457, -7.5663234288741457, -6.8084353288741459, -6.8084353288741459, -6.8084353288741459, -7.2776953288741462, -7.2776953288741462, -7.2776953288741462, -7.2776953288741462, -7.5663234288741457, -7.5663234288741457, -6.8084353288741459, -6.8084353288741459, -6.8084353288741459, -6.8084353288741459, -7.5663234288741457, -7.5663234288741457, -7.5663234288741457, -7.2776953288741462, -6.8084353288741459, -6.8084353288741459, -6.8084353288741459]
								}]
						}, {
							"switch":	74,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	506,
							"begin_column":	3,
							"end_line":	509,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L506\", 31, &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(offset), sizeof (offset), &(object), sizeof (object), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(check_inherited), sizeof (check_inherited), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    if (ht->nApplyCount > 0) {\n        zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n        return;\n    }\n", "if (!__is_neg(\"\", \"L506\", 31, &(ht), sizeof (ht), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(offset), sizeof (offset), &(object), sizeof (object), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(check_inherited), sizeof (check_inherited), &(index), sizeof (index), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)) && (ht->nApplyCount > 0)) {\n    zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8554587510706373, -7.4644114120706373, -9.18522624807064, -8.52944279997064, -9.76115720207064, -9.3892254120706369, -9.00326910207064, -8.57581172207064, -9.6778535120706373, -9.6778535120706373, -9.6778535120706373, -8.91996541207064, -8.91996541207064, -8.91996541207064, -9.3892254120706369, -9.3892254120706369, -9.3892254120706369, -9.3892254120706369, -9.6778535120706373, -9.6778535120706373, -8.91996541207064, -8.91996541207064, -8.91996541207064, -8.91996541207064, -9.6778535120706373, -9.6778535120706373, -9.6778535120706373, -9.3892254120706369, -8.91996541207064, -8.91996541207064, -8.91996541207064]
								}, {
									"case":	2,
									"scores":	[-7.9761283945166381, -8.5850810555166372, -10.305895891516638, -9.6501124434166368, -10.881826845516638, -10.509895055516637, -10.123938745516638, -9.69648136551664, -10.798523155516637, -10.798523155516637, -10.798523155516637, -10.040635055516638, -10.040635055516638, -10.040635055516638, -10.509895055516637, -10.509895055516637, -10.509895055516637, -10.509895055516637, -10.798523155516637, -10.798523155516637, -10.040635055516638, -10.040635055516638, -10.040635055516638, -10.040635055516638, -10.798523155516637, -10.798523155516637, -10.798523155516637, -10.509895055516637, -10.040635055516638, -10.040635055516638, -10.040635055516638]
								}]
						}]
				}, {
					"line":	514,
					"switches":	[{
							"switch":	77,
							"types":	[[], [], [], [], [297], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], [], [], [], [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], [], [], [], [], [], []],
							"begin_line":	515,
							"begin_column":	2,
							"end_line":	515,
							"end_column":	2,
							"patch_codes":	["memset(&(*offset), 0, sizeof (*(&(*offset))))", "memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&(*offset).value.dval, 0, sizeof (*(&(*offset).value.dval)))", "memset(&(*offset).value.ht, 0, sizeof (*(&(*offset).value.ht)))", "memset(&(*offset).value.lval, 0, sizeof (*(&(*offset).value.lval)))", "memset(&(*offset).value.obj, 0, sizeof (*(&(*offset).value.obj)))", "memset(&(*offset).value.str, 0, sizeof (*(&(*offset).value.str)))", "memset(&(*offset).value.str.len, 0, sizeof (*(&(*offset).value.str.len)))", "memset(&(*offset).value.str.val, 0, sizeof (*(&(*offset).value.str.val)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&offset->is_ref__gc, 0, sizeof (*(&offset->is_ref__gc)))", "memset(&offset->refcount__gc, 0, sizeof (*(&offset->refcount__gc)))", "memset(&offset->type, 0, sizeof (*(&offset->type)))", "memset(&offset->value, 0, sizeof (*(&offset->value)))", "memset((*offset).value.ht, 0, sizeof (*((*offset).value.ht)))", "memset((*offset).value.str.val, 0, sizeof (*((*offset).value.str.val)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(ht, 0, sizeof (*(ht)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(offset, 0, sizeof (*(offset)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "ht = (ht)", "ht = spl_array_get_hash_table((intern), 0)", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_call_method(&(object), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&(offset), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(object))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(offset))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &(intern)->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (object), ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (offset), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "ht = spl_array_get_hash_table(intern, 0)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_hash_verify_pos(intern)", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*offset).value.lval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "if (__is_neg(\"\", \"L515\", 26, &(offset), sizeof (offset), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(offset->type), sizeof (offset->type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(index), sizeof (index), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	2,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	3,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	4,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	5,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	6,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	7,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	8,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	9,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	10,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	11,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	12,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	13,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	14,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	15,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	16,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	17,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	18,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	19,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	20,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	21,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	22,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	23,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	24,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	25,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	26,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	27,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	28,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	29,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	30,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	31,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	32,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	33,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	34,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	35,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	36,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	37,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	38,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	39,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	40,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	41,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	42,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	43,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	44,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	45,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	46,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	47,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	48,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	49,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	50,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	51,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	52,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	53,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	54,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	55,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	56,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	57,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	58,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	59,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	60,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	61,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	62,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	63,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	64,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	65,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	66,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	67,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	68,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	69,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	70,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	71,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	72,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	73,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	74,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	75,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	76,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	77,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	78,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	79,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	80,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	81,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	82,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	83,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	84,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	85,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	86,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	87,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	88,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	89,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	90,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	91,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	92,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	93,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	94,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	95,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	96,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	97,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	98,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	99,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	100,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	101,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	102,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	103,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	104,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	105,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	106,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	107,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	108,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	109,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	110,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	111,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	112,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	113,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	114,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	115,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	116,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	117,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	118,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	119,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	120,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	121,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	122,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	123,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	124,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	125,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	126,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	127,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	128,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	129,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	130,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	131,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	132,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	133,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	134,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	135,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	136,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	137,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	138,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	139,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	140,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	141,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	142,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	143,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	144,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	145,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	146,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	147,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	148,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	149,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	150,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	151,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	152,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	153,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	154,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	155,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	156,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	157,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	158,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	159,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	160,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	161,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	162,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	163,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	164,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	165,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	166,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	167,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	168,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	169,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	170,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	171,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	172,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	173,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	174,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	175,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	176,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	177,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	178,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	179,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	180,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	181,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	182,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	183,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	184,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	185,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	186,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	187,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	188,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	189,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	190,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	191,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	192,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	193,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	194,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	195,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	196,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	197,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	198,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	199,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	200,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	201,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	202,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	203,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	204,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	205,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	206,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	207,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	208,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	209,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	210,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	211,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	212,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	213,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	214,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	215,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	216,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	217,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	218,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	219,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	220,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	221,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	222,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	223,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	224,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	225,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	226,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	227,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	228,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	229,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	230,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	231,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	232,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	233,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	234,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	235,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	236,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	237,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	238,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	239,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	240,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	241,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	242,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	243,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	244,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	245,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	246,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	247,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	248,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	249,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	250,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	251,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	252,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	253,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	254,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	255,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	256,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	257,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	258,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	259,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	260,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	261,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	262,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	263,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	264,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	265,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	266,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	267,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	268,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	269,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	270,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	271,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	272,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	273,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	274,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	275,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	276,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	277,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	278,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	279,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	280,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	281,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	282,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	283,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	284,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	285,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	286,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	287,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	288,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	289,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	290,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	291,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	292,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	293,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	294,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	295,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	296,
									"scores":	[-6.4575641274355986]
								}, {
									"case":	297,
									"scores":	[-10.4397725892356, -9.1603340422356, -9.6817452454356, -9.4182648248356, -10.3261640974356, -10.3261640974356, -10.0156420112356, -9.7696030974356, -10.3261640974356, -10.0527424112356, -9.8067034974356, -10.3261640974356, -10.3261640974356, -10.3261640974356, -10.3261640974356, -10.3261640974356, -10.3261640974356, -10.3261640974356, -10.3261640974356, -10.5722030112356, -10.5722030112356, -10.5722030112356, -10.5370532144356, -10.3261640974356, -10.3261640974356, -10.3261640974356]
								}]
						}, {
							"switch":	78,
							"types":	[[19], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], []],
							"begin_line":	515,
							"begin_column":	4,
							"end_line":	517,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L515\", 26, &(offset), sizeof (offset), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(offset->type), sizeof (offset->type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(index), sizeof (index), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if ((zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) || __is_neg(\"\", \"L515\", 26, &(offset), sizeof (offset), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(offset->type), sizeof (offset->type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(index), sizeof (index), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (Debug(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (add_assoc_null_ex(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (add_property_null_ex(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (ap_php_asprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (execl(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (execle(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (execlp(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (fprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (php_printf(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (php_sprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (printf(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (sprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (wprintf(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (zend_hash_add_empty_element(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (zend_hash_exists(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if (zend_symtable_exists(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n", "if ((zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) && !__is_neg(\"\", \"L515\", 26, &(offset), sizeof (offset), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(offset->type), sizeof (offset->type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(index), sizeof (index), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection))) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.6648940024281451, -3.4715969024281454, -3.3940159124281455, -1.7263691824281446, -3.6381912124281461, -3.6381912124281461, -4.1850322024281459, -3.4271441024281462, -3.6381912124281461, -4.479383002428146, -3.7214949024281458, -3.6381912124281461, -3.6381912124281461, -3.6381912124281461, -3.6381912124281461, -3.6381912124281461, -3.6381912124281461, -3.6381912124281461, -3.6381912124281461, -4.3960793124281459, -4.3960793124281459, -4.3960793124281459, -4.1074512124281464, -3.6381912124281461, -3.6381912124281461, -3.6381912124281461]
								}, {
									"case":	2,
									"scores":	[-3.0097985124281466, -3.8165014124281456, -3.7389204224281456, -2.0712736924281465, -3.9830957224281458, -3.9830957224281458, -4.529936712428146, -3.7720486124281458, -3.9830957224281458, -4.8242875124281461, -4.0663994124281455, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -4.740983822428146, -4.740983822428146, -4.740983822428146, -4.4523557224281456, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.0097985124281466, -3.8165014124281456, -3.7389204224281456, -2.0712736924281465, -3.9830957224281458, -3.9830957224281458, -4.529936712428146, -3.7720486124281458, -3.9830957224281458, -4.8242875124281461, -4.0663994124281455, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458, -4.740983822428146, -4.740983822428146, -4.740983822428146, -4.4523557224281456, -3.9830957224281458, -3.9830957224281458, -3.9830957224281458]
								}]
						}, {
							"switch":	79,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	515,
							"begin_column":	4,
							"end_line":	517,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L515\", 26, &(offset), sizeof (offset), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(offset->type), sizeof (offset->type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(index), sizeof (index), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)))\n    if (zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n", "if (!__is_neg(\"\", \"L515\", 26, &(offset), sizeof (offset), &(ht), sizeof (ht), &((*offset).value.str.val), sizeof ((*offset).value.str.val), &((*offset).value.str.len), sizeof ((*offset).value.str.len), &(offset->type), sizeof (offset->type), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &(index), sizeof (index), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection)) && (zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1)) {\n    zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.8867869974356, -8.6934898974356, -8.6159089074356, -6.9482621774355984, -8.8600842074356, -8.8600842074356, -9.4069251974356, -8.6490370974356, -8.8600842074356, -9.7012759974356, -8.9433878974356, -8.8600842074356, -8.8600842074356, -8.8600842074356, -8.8600842074356, -8.8600842074356, -8.8600842074356, -8.8600842074356, -8.8600842074356, -9.6179723074356, -9.6179723074356, -9.6179723074356, -9.3293442074356, -8.8600842074356, -8.8600842074356, -8.8600842074356]
								}, {
									"case":	2,
									"scores":	[-6.8060799344355987, -7.6127828344355981, -7.5352018444355986, -5.8675551144356, -7.7793771444356, -7.7793771444356, -8.3262181344356, -7.5683300344356, -7.7793771444356, -8.6205689344356, -7.8626808344356, -7.7793771444356, -7.7793771444356, -7.7793771444356, -7.7793771444356, -7.7793771444356, -7.7793771444356, -7.7793771444356, -7.7793771444356, -8.5372652444356, -8.5372652444356, -8.5372652444356, -8.2486371444356, -7.7793771444356, -7.7793771444356, -7.7793771444356]
								}]
						}]
				}, {
					"line":	509,
					"switches":	[{
							"switch":	75,
							"types":	[[], [], [], [], [289], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], [], [], [], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], [145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [], [], []],
							"begin_line":	510,
							"begin_column":	1,
							"end_line":	510,
							"end_column":	1,
							"patch_codes":	["memset(&(*offset), 0, sizeof (*(&(*offset))))", "memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&offset->is_ref__gc, 0, sizeof (*(&offset->is_ref__gc)))", "memset(&offset->refcount__gc, 0, sizeof (*(&offset->refcount__gc)))", "memset(&offset->type, 0, sizeof (*(&offset->type)))", "memset(&offset->value, 0, sizeof (*(&offset->value)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(ht, 0, sizeof (*(ht)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(offset, 0, sizeof (*(offset)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "ht = (ht)", "ht = spl_array_get_hash_table((intern), 0)", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_call_method(&(object), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&(offset), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(object))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(offset))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &(intern)->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (object), ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (offset), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "ht = spl_array_get_hash_table(intern, 0)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_hash_verify_pos(intern)", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*offset).value.lval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "if (__is_neg(\"\", \"L510\", 126, &(ht), sizeof (ht), &(offset), sizeof (offset), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.symbol_table.nTableSize), sizeof (executor_globals.symbol_table.nTableSize), &(executor_globals.symbol_table.nTableMask), sizeof (executor_globals.symbol_table.nTableMask), &(executor_globals.symbol_table.nNumOfElements), sizeof (executor_globals.symbol_table.nNumOfElements), &(executor_globals.symbol_table.nNextFreeElement), sizeof (executor_globals.symbol_table.nNextFreeElement), &(executor_globals.symbol_table.pInternalPointer), sizeof (executor_globals.symbol_table.pInternalPointer), &(executor_globals.symbol_table.pListHead), sizeof (executor_globals.symbol_table.pListHead), &(executor_globals.symbol_table.pListTail), sizeof (executor_globals.symbol_table.pListTail), &(executor_globals.symbol_table.arBuckets), sizeof (executor_globals.symbol_table.arBuckets), &(executor_globals.symbol_table.pDestructor), sizeof (executor_globals.symbol_table.pDestructor), &(executor_globals.symbol_table.persistent), sizeof (executor_globals.symbol_table.persistent), &(executor_globals.symbol_table.nApplyCount), sizeof (executor_globals.symbol_table.nApplyCount), &(executor_globals.symbol_table.bApplyProtection), sizeof (executor_globals.symbol_table.bApplyProtection), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	2,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	3,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	4,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	5,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	6,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	7,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	8,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	9,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	10,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	11,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	12,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	13,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	14,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	15,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	16,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	17,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	18,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	19,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	20,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	21,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	22,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	23,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	24,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	25,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	26,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	27,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	28,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	29,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	30,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	31,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	32,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	33,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	34,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	35,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	36,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	37,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	38,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	39,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	40,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	41,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	42,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	43,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	44,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	45,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	46,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	47,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	48,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	49,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	50,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	51,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	52,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	53,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	54,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	55,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	56,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	57,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	58,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	59,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	60,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	61,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	62,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	63,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	64,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	65,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	66,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	67,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	68,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	69,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	70,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	71,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	72,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	73,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	74,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	75,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	76,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	77,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	78,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	79,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	80,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	81,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	82,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	83,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	84,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	85,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	86,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	87,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	88,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	89,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	90,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	91,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	92,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	93,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	94,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	95,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	96,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	97,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	98,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	99,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	100,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	101,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	102,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	103,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	104,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	105,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	106,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	107,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	108,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	109,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	110,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	111,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	112,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	113,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	114,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	115,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	116,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	117,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	118,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	119,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	120,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	121,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	122,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	123,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	124,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	125,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	126,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	127,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	128,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	129,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	130,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	131,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	132,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	133,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	134,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	135,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	136,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	137,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	138,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	139,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	140,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	141,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	142,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	143,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	144,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	145,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	146,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	147,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	148,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	149,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	150,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	151,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	152,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	153,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	154,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	155,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	156,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	157,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	158,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	159,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	160,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	161,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	162,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	163,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	164,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	165,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	166,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	167,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	168,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	169,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	170,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	171,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	172,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	173,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	174,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	175,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	176,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	177,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	178,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	179,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	180,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	181,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	182,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	183,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	184,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	185,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	186,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	187,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	188,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	189,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	190,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	191,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	192,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	193,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	194,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	195,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	196,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	197,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	198,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	199,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	200,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	201,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	202,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	203,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	204,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	205,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	206,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	207,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	208,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	209,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	210,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	211,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	212,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	213,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	214,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	215,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	216,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	217,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	218,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	219,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	220,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	221,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	222,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	223,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	224,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	225,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	226,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	227,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	228,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	229,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	230,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	231,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	232,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	233,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	234,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	235,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	236,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	237,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	238,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	239,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	240,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	241,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	242,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	243,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	244,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	245,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	246,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	247,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	248,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	249,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	250,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	251,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	252,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	253,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	254,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	255,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	256,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	257,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	258,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	259,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	260,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	261,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	262,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	263,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	264,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	265,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	266,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	267,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	268,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	269,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	270,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	271,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	272,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	273,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	274,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	275,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	276,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	277,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	278,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	279,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	280,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	281,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	282,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	283,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	284,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	285,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	286,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	287,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	288,
									"scores":	[-6.4777668347531181]
								}, {
									"case":	289,
									"scores":	[-9.83508150955312, -11.906006953453119, -12.070298204753117, -11.433200571553119, -12.335038204753118, -12.061616518553119, -11.81557760475312, -13.219176204753118, -11.74707872475312, -12.335038204753118, -12.335038204753118, -12.545927321753119, -12.581077118553118, -12.581077118553118, -12.545927321753119, -12.545927321753119, -12.545927321753119, -12.581077118553118, -12.545927321753119, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.545927321753119, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.335038204753118, -12.581077118553118, -12.581077118553118, -12.335038204753118, -12.581077118553118, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.335038204753118, -12.581077118553118, -12.545927321753119, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.545927321753119, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.545927321753119, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.545927321753119, -12.581077118553118, -12.581077118553118, -12.545927321753119, -12.545927321753119, -12.545927321753119, -12.581077118553118, -12.545927321753119, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.335038204753118, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.545927321753119, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.335038204753118, -12.581077118553118, -12.581077118553118, -12.335038204753118, -12.581077118553118, -12.335038204753118, -12.335038204753118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.581077118553118, -12.335038204753118, -12.581077118553118, -12.545927321753119, -12.335038204753118]
								}]
						}, {
							"switch":	76,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	510,
							"begin_column":	3,
							"end_line":	518,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L510\", 126, &(ht), sizeof (ht), &(offset), sizeof (offset), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.symbol_table.nTableSize), sizeof (executor_globals.symbol_table.nTableSize), &(executor_globals.symbol_table.nTableMask), sizeof (executor_globals.symbol_table.nTableMask), &(executor_globals.symbol_table.nNumOfElements), sizeof (executor_globals.symbol_table.nNumOfElements), &(executor_globals.symbol_table.nNextFreeElement), sizeof (executor_globals.symbol_table.nNextFreeElement), &(executor_globals.symbol_table.pInternalPointer), sizeof (executor_globals.symbol_table.pInternalPointer), &(executor_globals.symbol_table.pListHead), sizeof (executor_globals.symbol_table.pListHead), &(executor_globals.symbol_table.pListTail), sizeof (executor_globals.symbol_table.pListTail), &(executor_globals.symbol_table.arBuckets), sizeof (executor_globals.symbol_table.arBuckets), &(executor_globals.symbol_table.pDestructor), sizeof (executor_globals.symbol_table.pDestructor), &(executor_globals.symbol_table.persistent), sizeof (executor_globals.symbol_table.persistent), &(executor_globals.symbol_table.nApplyCount), sizeof (executor_globals.symbol_table.nApplyCount), &(executor_globals.symbol_table.bApplyProtection), sizeof (executor_globals.symbol_table.bApplyProtection), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    if (zend_delete_global_variable((*offset).value.str.val, (*offset).value.str.len)) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n} else {\n    if (zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n}\n", "if ((ht == &(executor_globals.symbol_table)) || __is_neg(\"\", \"L510\", 126, &(ht), sizeof (ht), &(offset), sizeof (offset), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.symbol_table.nTableSize), sizeof (executor_globals.symbol_table.nTableSize), &(executor_globals.symbol_table.nTableMask), sizeof (executor_globals.symbol_table.nTableMask), &(executor_globals.symbol_table.nNumOfElements), sizeof (executor_globals.symbol_table.nNumOfElements), &(executor_globals.symbol_table.nNextFreeElement), sizeof (executor_globals.symbol_table.nNextFreeElement), &(executor_globals.symbol_table.pInternalPointer), sizeof (executor_globals.symbol_table.pInternalPointer), &(executor_globals.symbol_table.pListHead), sizeof (executor_globals.symbol_table.pListHead), &(executor_globals.symbol_table.pListTail), sizeof (executor_globals.symbol_table.pListTail), &(executor_globals.symbol_table.arBuckets), sizeof (executor_globals.symbol_table.arBuckets), &(executor_globals.symbol_table.pDestructor), sizeof (executor_globals.symbol_table.pDestructor), &(executor_globals.symbol_table.persistent), sizeof (executor_globals.symbol_table.persistent), &(executor_globals.symbol_table.nApplyCount), sizeof (executor_globals.symbol_table.nApplyCount), &(executor_globals.symbol_table.bApplyProtection), sizeof (executor_globals.symbol_table.bApplyProtection), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    if (zend_delete_global_variable((*offset).value.str.val, (*offset).value.str.len)) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n} else {\n    if (zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n}\n", "if ((ht == &(executor_globals.symbol_table)) && !__is_neg(\"\", \"L510\", 126, &(ht), sizeof (ht), &(offset), sizeof (offset), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.symbol_table.nTableSize), sizeof (executor_globals.symbol_table.nTableSize), &(executor_globals.symbol_table.nTableMask), sizeof (executor_globals.symbol_table.nTableMask), &(executor_globals.symbol_table.nNumOfElements), sizeof (executor_globals.symbol_table.nNumOfElements), &(executor_globals.symbol_table.nNextFreeElement), sizeof (executor_globals.symbol_table.nNextFreeElement), &(executor_globals.symbol_table.pInternalPointer), sizeof (executor_globals.symbol_table.pInternalPointer), &(executor_globals.symbol_table.pListHead), sizeof (executor_globals.symbol_table.pListHead), &(executor_globals.symbol_table.pListTail), sizeof (executor_globals.symbol_table.pListTail), &(executor_globals.symbol_table.arBuckets), sizeof (executor_globals.symbol_table.arBuckets), &(executor_globals.symbol_table.pDestructor), sizeof (executor_globals.symbol_table.pDestructor), &(executor_globals.symbol_table.persistent), sizeof (executor_globals.symbol_table.persistent), &(executor_globals.symbol_table.nApplyCount), sizeof (executor_globals.symbol_table.nApplyCount), &(executor_globals.symbol_table.bApplyProtection), sizeof (executor_globals.symbol_table.bApplyProtection), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    if (zend_delete_global_variable((*offset).value.str.val, (*offset).value.str.len)) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n} else {\n    if (zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.1896595169281472, -3.6969898543281436, -4.0515537304281466, -4.4319016714281458, -4.2522397764281461, -5.093431566428146, -4.3355434664281463, -5.2184527764281468, -3.9080860864281464, -4.2522397764281461, -4.2522397764281461, -4.7214997764281463, -5.0101278764281467, -5.0101278764281467, -4.7214997764281463, -4.7214997764281463, -4.7214997764281463, -5.0101278764281467, -4.7214997764281463, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -4.7214997764281463, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -4.2522397764281461, -5.0101278764281467, -5.0101278764281467, -4.2522397764281461, -5.0101278764281467, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -4.2522397764281461, -5.0101278764281467, -4.7214997764281463, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -4.7214997764281463, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -4.7214997764281463, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -4.7214997764281463, -5.0101278764281467, -5.0101278764281467, -4.7214997764281463, -4.7214997764281463, -4.7214997764281463, -5.0101278764281467, -4.7214997764281463, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -4.2522397764281461, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -4.7214997764281463, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -4.2522397764281461, -5.0101278764281467, -5.0101278764281467, -4.2522397764281461, -5.0101278764281467, -4.2522397764281461, -4.2522397764281461, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -5.0101278764281467, -4.2522397764281461, -5.0101278764281467, -4.7214997764281463, -4.2522397764281461]
								}, {
									"case":	2,
									"scores":	[-0.967791276928149, -3.4751216143281445, -3.8296854904281461, -4.2100334314281458, -4.0303715364281461, -4.8715633264281459, -4.1136752264281462, -4.9965845364281467, -3.6862178464281463, -4.0303715364281461, -4.0303715364281461, -4.4996315364281463, -4.7882596364281458, -4.7882596364281458, -4.4996315364281463, -4.4996315364281463, -4.4996315364281463, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.4996315364281463, -4.7882596364281458, -4.7882596364281458, -4.4996315364281463, -4.4996315364281463, -4.4996315364281463, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461]
								}, {
									"case":	3,
									"scores":	[-0.967791276928149, -3.4751216143281445, -3.8296854904281461, -4.2100334314281458, -4.0303715364281461, -4.8715633264281459, -4.1136752264281462, -4.9965845364281467, -3.6862178464281463, -4.0303715364281461, -4.0303715364281461, -4.4996315364281463, -4.7882596364281458, -4.7882596364281458, -4.4996315364281463, -4.4996315364281463, -4.4996315364281463, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.4996315364281463, -4.7882596364281458, -4.7882596364281458, -4.4996315364281463, -4.4996315364281463, -4.4996315364281463, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.0303715364281461, -4.0303715364281461, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.7882596364281458, -4.0303715364281461, -4.7882596364281458, -4.4996315364281463, -4.0303715364281461]
								}]
						}, {
							"switch":	80,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	510,
							"begin_column":	3,
							"end_line":	518,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L510\", 126, &(ht), sizeof (ht), &(offset), sizeof (offset), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.symbol_table.nTableSize), sizeof (executor_globals.symbol_table.nTableSize), &(executor_globals.symbol_table.nTableMask), sizeof (executor_globals.symbol_table.nTableMask), &(executor_globals.symbol_table.nNumOfElements), sizeof (executor_globals.symbol_table.nNumOfElements), &(executor_globals.symbol_table.nNextFreeElement), sizeof (executor_globals.symbol_table.nNextFreeElement), &(executor_globals.symbol_table.pInternalPointer), sizeof (executor_globals.symbol_table.pInternalPointer), &(executor_globals.symbol_table.pListHead), sizeof (executor_globals.symbol_table.pListHead), &(executor_globals.symbol_table.pListTail), sizeof (executor_globals.symbol_table.pListTail), &(executor_globals.symbol_table.arBuckets), sizeof (executor_globals.symbol_table.arBuckets), &(executor_globals.symbol_table.pDestructor), sizeof (executor_globals.symbol_table.pDestructor), &(executor_globals.symbol_table.persistent), sizeof (executor_globals.symbol_table.persistent), &(executor_globals.symbol_table.nApplyCount), sizeof (executor_globals.symbol_table.nApplyCount), &(executor_globals.symbol_table.bApplyProtection), sizeof (executor_globals.symbol_table.bApplyProtection), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    if (ht == &(executor_globals.symbol_table)) {\n        if (zend_delete_global_variable((*offset).value.str.val, (*offset).value.str.len)) {\n            zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        }\n    } else {\n        if (zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n            zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n        }\n    }\n", "if (!__is_neg(\"\", \"L510\", 126, &(ht), sizeof (ht), &(offset), sizeof (offset), &(ht->nApplyCount), sizeof (ht->nApplyCount), &(intern), sizeof (intern), &((*offset).type), sizeof ((*offset).type), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(offset->type), sizeof (offset->type), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.symbol_table.nTableSize), sizeof (executor_globals.symbol_table.nTableSize), &(executor_globals.symbol_table.nTableMask), sizeof (executor_globals.symbol_table.nTableMask), &(executor_globals.symbol_table.nNumOfElements), sizeof (executor_globals.symbol_table.nNumOfElements), &(executor_globals.symbol_table.nNextFreeElement), sizeof (executor_globals.symbol_table.nNextFreeElement), &(executor_globals.symbol_table.pInternalPointer), sizeof (executor_globals.symbol_table.pInternalPointer), &(executor_globals.symbol_table.pListHead), sizeof (executor_globals.symbol_table.pListHead), &(executor_globals.symbol_table.pListTail), sizeof (executor_globals.symbol_table.pListTail), &(executor_globals.symbol_table.arBuckets), sizeof (executor_globals.symbol_table.arBuckets), &(executor_globals.symbol_table.pDestructor), sizeof (executor_globals.symbol_table.pDestructor), &(executor_globals.symbol_table.persistent), sizeof (executor_globals.symbol_table.persistent), &(executor_globals.symbol_table.nApplyCount), sizeof (executor_globals.symbol_table.nApplyCount), &(executor_globals.symbol_table.bApplyProtection), sizeof (executor_globals.symbol_table.bApplyProtection), &(offset->refcount__gc), sizeof (offset->refcount__gc), &(offset->is_ref__gc), sizeof (offset->is_ref__gc), &(ht->nTableSize), sizeof (ht->nTableSize), &(ht->nTableMask), sizeof (ht->nTableMask), &(ht->nNumOfElements), sizeof (ht->nNumOfElements), &(ht->nNextFreeElement), sizeof (ht->nNextFreeElement), &(ht->pInternalPointer), sizeof (ht->pInternalPointer), &(ht->pListHead), sizeof (ht->pListHead), &(ht->pListTail), sizeof (ht->pListTail), &(ht->arBuckets), sizeof (ht->arBuckets), &(ht->pDestructor), sizeof (ht->pDestructor), &(ht->persistent), sizeof (ht->persistent), &(ht->bApplyProtection), sizeof (ht->bApplyProtection), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)) && (ht == &(executor_globals.symbol_table))) {\n    if (zend_delete_global_variable((*offset).value.str.val, (*offset).value.str.len)) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n} else {\n    if (zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n        zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.886859045253118, -8.3941893826531171, -8.74875325875312, -9.12910119975312, -8.9494393047531169, -9.79063109475312, -9.03274299475312, -9.9156523047531167, -8.60528561475312, -8.9494393047531169, -8.9494393047531169, -9.4186993047531171, -9.70732740475312, -9.70732740475312, -9.4186993047531171, -9.4186993047531171, -9.4186993047531171, -9.70732740475312, -9.4186993047531171, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -9.4186993047531171, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -8.9494393047531169, -9.70732740475312, -9.70732740475312, -8.9494393047531169, -9.70732740475312, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -8.9494393047531169, -9.70732740475312, -9.4186993047531171, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.4186993047531171, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.4186993047531171, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -9.4186993047531171, -9.70732740475312, -9.70732740475312, -9.4186993047531171, -9.4186993047531171, -9.4186993047531171, -9.70732740475312, -9.4186993047531171, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -8.9494393047531169, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -9.4186993047531171, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -8.9494393047531169, -9.70732740475312, -9.70732740475312, -8.9494393047531169, -9.70732740475312, -8.9494393047531169, -8.9494393047531169, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -9.70732740475312, -8.9494393047531169, -9.70732740475312, -9.4186993047531171, -8.9494393047531169]
								}, {
									"case":	2,
									"scores":	[-4.25480859625312, -6.7621389336531168, -7.116702809753118, -7.4970507507531181, -7.3173888557531184, -8.15858064575312, -7.4006925457531185, -8.28360185575312, -6.9732351657531186, -7.3173888557531184, -7.3173888557531184, -7.7866488557531186, -8.07527695575312, -8.07527695575312, -7.7866488557531186, -7.7866488557531186, -7.7866488557531186, -8.07527695575312, -7.7866488557531186, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -7.7866488557531186, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -7.3173888557531184, -8.07527695575312, -8.07527695575312, -7.3173888557531184, -8.07527695575312, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -7.3173888557531184, -8.07527695575312, -7.7866488557531186, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -8.07527695575312, -8.07527695575312, -7.7866488557531186, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -8.07527695575312, -8.07527695575312, -7.7866488557531186, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -7.7866488557531186, -8.07527695575312, -8.07527695575312, -7.7866488557531186, -7.7866488557531186, -7.7866488557531186, -8.07527695575312, -7.7866488557531186, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -7.3173888557531184, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -7.7866488557531186, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -7.3173888557531184, -8.07527695575312, -8.07527695575312, -7.3173888557531184, -8.07527695575312, -7.3173888557531184, -7.3173888557531184, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -8.07527695575312, -7.3173888557531184, -8.07527695575312, -7.7866488557531186, -7.3173888557531184]
								}]
						}]
				}, {
					"line":	518,
					"switches":	[{
							"switch":	81,
							"types":	[[], [], [], [], [285], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], [], [], [], [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284], [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], [], [], [], [], [], []],
							"begin_line":	519,
							"begin_column":	1,
							"end_line":	519,
							"end_column":	1,
							"patch_codes":	["memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&ht->arBuckets, 0, sizeof (*(&ht->arBuckets)))", "memset(&ht->bApplyProtection, 0, sizeof (*(&ht->bApplyProtection)))", "memset(&ht->nApplyCount, 0, sizeof (*(&ht->nApplyCount)))", "memset(&ht->nNextFreeElement, 0, sizeof (*(&ht->nNextFreeElement)))", "memset(&ht->nNumOfElements, 0, sizeof (*(&ht->nNumOfElements)))", "memset(&ht->nTableMask, 0, sizeof (*(&ht->nTableMask)))", "memset(&ht->nTableSize, 0, sizeof (*(&ht->nTableSize)))", "memset(&ht->pDestructor, 0, sizeof (*(&ht->pDestructor)))", "memset(&ht->pInternalPointer, 0, sizeof (*(&ht->pInternalPointer)))", "memset(&ht->pListHead, 0, sizeof (*(&ht->pListHead)))", "memset(&ht->pListTail, 0, sizeof (*(&ht->pListTail)))", "memset(&ht->persistent, 0, sizeof (*(&ht->persistent)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&offset->is_ref__gc, 0, sizeof (*(&offset->is_ref__gc)))", "memset(&offset->refcount__gc, 0, sizeof (*(&offset->refcount__gc)))", "memset(&offset->type, 0, sizeof (*(&offset->type)))", "memset(&offset->value, 0, sizeof (*(&offset->value)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(ht->arBuckets, 0, sizeof (*(ht->arBuckets)))", "memset(ht->pDestructor, 0, sizeof (*(ht->pDestructor)))", "memset(ht->pInternalPointer, 0, sizeof (*(ht->pInternalPointer)))", "memset(ht->pListHead, 0, sizeof (*(ht->pListHead)))", "memset(ht->pListTail, 0, sizeof (*(ht->pListTail)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "ht = (ht)", "ht = spl_array_get_hash_table((intern), 0)", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_call_method(&(object), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&(offset), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(object))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(offset))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &(intern)->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (object), ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (offset), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "ht = spl_array_get_hash_table(intern, 0)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_hash_verify_pos(intern)", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*offset).value.lval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "if (__is_neg(\"\", \"L519\", 6, &(offset), sizeof (offset), &(ht), sizeof (ht), &(index), sizeof (index), &(intern), sizeof (intern), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	2,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	3,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	4,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	5,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	6,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	7,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	8,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	9,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	10,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	11,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	12,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	13,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	14,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	15,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	16,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	17,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	18,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	19,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	20,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	21,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	22,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	23,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	24,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	25,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	26,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	27,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	28,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	29,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	30,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	31,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	32,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	33,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	34,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	35,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	36,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	37,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	38,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	39,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	40,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	41,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	42,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	43,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	44,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	45,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	46,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	47,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	48,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	49,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	50,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	51,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	52,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	53,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	54,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	55,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	56,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	57,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	58,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	59,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	60,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	61,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	62,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	63,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	64,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	65,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	66,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	67,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	68,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	69,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	70,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	71,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	72,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	73,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	74,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	75,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	76,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	77,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	78,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	79,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	80,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	81,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	82,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	83,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	84,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	85,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	86,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	87,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	88,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	89,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	90,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	91,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	92,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	93,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	94,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	95,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	96,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	97,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	98,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	99,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	100,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	101,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	102,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	103,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	104,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	105,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	106,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	107,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	108,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	109,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	110,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	111,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	112,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	113,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	114,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	115,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	116,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	117,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	118,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	119,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	120,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	121,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	122,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	123,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	124,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	125,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	126,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	127,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	128,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	129,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	130,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	131,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	132,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	133,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	134,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	135,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	136,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	137,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	138,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	139,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	140,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	141,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	142,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	143,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	144,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	145,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	146,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	147,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	148,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	149,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	150,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	151,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	152,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	153,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	154,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	155,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	156,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	157,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	158,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	159,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	160,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	161,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	162,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	163,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	164,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	165,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	166,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	167,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	168,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	169,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	170,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	171,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	172,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	173,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	174,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	175,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	176,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	177,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	178,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	179,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	180,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	181,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	182,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	183,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	184,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	185,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	186,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	187,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	188,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	189,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	190,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	191,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	192,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	193,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	194,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	195,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	196,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	197,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	198,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	199,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	200,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	201,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	202,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	203,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	204,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	205,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	206,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	207,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	208,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	209,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	210,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	211,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	212,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	213,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	214,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	215,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	216,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	217,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	218,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	219,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	220,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	221,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	222,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	223,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	224,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	225,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	226,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	227,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	228,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	229,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	230,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	231,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	232,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	233,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	234,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	235,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	236,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	237,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	238,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	239,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	240,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	241,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	242,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	243,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	244,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	245,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	246,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	247,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	248,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	249,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	250,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	251,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	252,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	253,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	254,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	255,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	256,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	257,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	258,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	259,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	260,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	261,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	262,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	263,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	264,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	265,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	266,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	267,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	268,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	269,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	270,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	271,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	272,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	273,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	274,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	275,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	276,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	277,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	278,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	279,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	280,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	281,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	282,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	283,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	284,
									"scores":	[-6.2959424688954435]
								}, {
									"case":	285,
									"scores":	[-11.539606749595444, -9.9481675295954446, -10.576883058895444, -10.263004905695444, -10.891420852695443, -10.645381938895444]
								}]
						}]
				}, {
					"line":	502,
					"switches":	[{
							"switch":	71,
							"types":	[[], [], [], [], [175], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], [], [], [], [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], [], [], [], [], [], []],
							"begin_line":	503,
							"begin_column":	0,
							"end_line":	503,
							"end_column":	0,
							"patch_codes":	["memset(&(*offset), 0, sizeof (*(&(*offset))))", "memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "ht = (ht)", "ht = spl_array_get_hash_table((intern), 0)", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_call_method(&(object), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&(offset), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(object))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(offset))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &(intern)->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (object), ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (offset), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "ht = spl_array_get_hash_table(intern, 0)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_hash_verify_pos(intern)", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*offset).value.lval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "if (__is_neg(\"\", \"L503\", 9, &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(intern), sizeof (intern), &(ht), sizeof (ht), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	2,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	3,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	4,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	5,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	6,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	7,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	8,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	9,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	10,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	11,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	12,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	13,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	14,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	15,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	16,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	17,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	18,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	19,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	20,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	21,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	22,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	23,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	24,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	25,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	26,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	27,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	28,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	29,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	30,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	31,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	32,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	33,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	34,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	35,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	36,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	37,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	38,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	39,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	40,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	41,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	42,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	43,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	44,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	45,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	46,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	47,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	48,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	49,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	50,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	51,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	52,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	53,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	54,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	55,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	56,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	57,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	58,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	59,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	60,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	61,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	62,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	63,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	64,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	65,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	66,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	67,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	68,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	69,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	70,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	71,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	72,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	73,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	74,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	75,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	76,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	77,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	78,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	79,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	80,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	81,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	82,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	83,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	84,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	85,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	86,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	87,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	88,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	89,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	90,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	91,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	92,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	93,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	94,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	95,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	96,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	97,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	98,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	99,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	100,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	101,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	102,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	103,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	104,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	105,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	106,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	107,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	108,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	109,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	110,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	111,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	112,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	113,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	114,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	115,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	116,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	117,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	118,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	119,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	120,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	121,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	122,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	123,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	124,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	125,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	126,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	127,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	128,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	129,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	130,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	131,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	132,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	133,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	134,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	135,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	136,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	137,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	138,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	139,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	140,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	141,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	142,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	143,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	144,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	145,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	146,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	147,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	148,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	149,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	150,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	151,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	152,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	153,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	154,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	155,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	156,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	157,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	158,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	159,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	160,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	161,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	162,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	163,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	164,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	165,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	166,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	167,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	168,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	169,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	170,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	171,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	172,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	173,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	174,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	175,
									"scores":	[-8.4246316927582363, -9.0805030300582352, -8.5539663948582358, -10.067482106758236, -10.579281863858235, -10.365873910058236, -8.5834387820582343, -10.885334510058236, -10.885334510058236]
								}]
						}, {
							"switch":	82,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	503,
							"begin_column":	2,
							"end_line":	541,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L503\", 9, &(offset), sizeof (offset), &((*offset).type), sizeof ((*offset).type), &(intern), sizeof (intern), &(ht), sizeof (ht), &(object), sizeof (object), &(check_inherited), sizeof (check_inherited), &(index), sizeof (index), &((*offset).refcount__gc), sizeof ((*offset).refcount__gc), &((*offset).is_ref__gc), sizeof ((*offset).is_ref__gc)))\n    switch ((*offset).type) {\n      case 6:\n        ht = spl_array_get_hash_table(intern, 0);\n        if (ht->nApplyCount > 0) {\n            zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n            return;\n        }\n        if (ht == &(executor_globals.symbol_table)) {\n            if (zend_delete_global_variable((*offset).value.str.val, (*offset).value.str.len)) {\n                zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n            }\n        } else {\n            if (zend_symtable_del(ht, (*offset).value.str.val, (*offset).value.str.len + 1) == -1) {\n                zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val);\n            }\n        }\n        break;\n      case 2:\n      case 7:\n      case 3:\n      case 1:\n        if (offset->type == 2) {\n            index = (long)(*offset).value.dval;\n        } else {\n            index = (*offset).value.lval;\n        }\n        ht = spl_array_get_hash_table(intern, 0);\n        if (ht->nApplyCount > 0) {\n            zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\");\n            return;\n        }\n        if (zend_hash_del_key_or_index(ht, ((void *)0), 0, index, 1) == -1) {\n            zend_error((1 << 3L), \"Undefined offset:  %ld\", (*offset).value.lval);\n        }\n        break;\n      default:\n        zend_error((1 << 1L), \"Illegal offset type\");\n        return;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.7353282591582353, -7.8472586986582353, -8.4256690581582347, -6.4116597696582351, -9.4496582831582359, -8.8112392486582358, -7.6703956696582356, -8.7279355586582348, -8.7279355586582348]
								}]
						}]
				}, {
					"line":	541,
					"switches":	[{
							"switch":	83,
							"types":	[[], [], [], [], [174], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [], [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], [], [], [], [], [], []],
							"begin_line":	542,
							"begin_column":	0,
							"end_line":	542,
							"end_column":	0,
							"patch_codes":	["memset(&(*offset).is_ref__gc, 0, sizeof (*(&(*offset).is_ref__gc)))", "memset(&(*offset).refcount__gc, 0, sizeof (*(&(*offset).refcount__gc)))", "memset(&(*offset).type, 0, sizeof (*(&(*offset).type)))", "memset(&(*offset).value, 0, sizeof (*(&(*offset).value)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(ht)->nApplyCount++", "(ht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "ht = (ht)", "ht = spl_array_get_hash_table((intern), 0)", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "index = (*(object)).value.lval", "index = (*(offset)).value.lval", "index = (-1)", "index = (0)", "index = (1)", "index = (2)", "index = (3)", "index = (6)", "index = (7)", "index = (8)", "index = (index)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_call_method(&(object), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&(offset), zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(object))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*(offset))), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &(intern)->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (object), ((void *)0))", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, (offset), ((void *)0))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_copy_ctor((offset))", "_zval_ptr_dtor((&offset))", "exit(1)", "ht = spl_array_get_hash_table(intern, 0)", "index = (*offset).value.lval", "index = (long)(*offset).value.dval", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_hash_verify_pos(intern)", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_call_method(&object, zend_get_class_entry(&(*object)), &intern->fptr_offset_del, \"offsetUnset\", sizeof (\"offsetUnset\") - 1, ((void *)0), 1, offset, ((void *)0))", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Undefined index:  %s\", (*offset).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*offset).value.lval)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(offset)", "if (__is_neg(\"\", \"L542\", 19, &(intern), sizeof (intern), &(offset), sizeof (offset), &(index), sizeof (index), &(ht), sizeof (ht), &(object), sizeof (object), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(check_inherited), sizeof (check_inherited), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	2,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	3,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	4,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	5,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	6,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	7,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	8,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	9,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	10,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	11,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	12,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	13,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	14,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	15,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	16,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	17,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	18,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	19,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	20,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	21,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	22,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	23,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	24,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	25,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	26,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	27,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	28,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	29,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	30,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	31,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	32,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	33,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	34,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	35,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	36,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	37,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	38,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	39,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	40,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	41,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	42,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	43,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	44,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	45,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	46,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	47,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	48,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	49,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	50,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	51,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	52,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	53,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	54,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	55,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	56,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	57,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	58,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	59,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	60,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	61,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	62,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	63,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	64,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	65,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	66,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	67,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	68,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	69,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	70,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	71,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	72,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	73,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	74,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	75,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	76,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	77,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	78,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	79,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	80,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	81,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	82,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	83,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	84,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	85,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	86,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	87,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	88,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	89,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	90,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	91,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	92,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	93,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	94,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	95,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	96,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	97,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	98,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	99,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	100,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	101,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	102,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	103,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	104,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	105,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	106,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	107,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	108,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	109,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	110,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	111,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	112,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	113,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	114,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	115,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	116,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	117,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	118,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	119,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	120,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	121,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	122,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	123,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	124,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	125,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	126,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	127,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	128,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	129,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	130,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	131,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	132,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	133,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	134,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	135,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	136,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	137,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	138,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	139,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	140,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	141,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	142,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	143,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	144,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	145,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	146,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	147,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	148,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	149,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	150,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	151,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	152,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	153,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	154,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	155,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	156,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	157,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	158,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	159,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	160,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	161,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	162,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	163,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	164,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	165,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	166,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	167,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	168,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	169,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	170,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	171,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	172,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	173,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	174,
									"scores":	[-8.2724380475407155, -7.2167396165407158, -6.7556872027407149, -7.0451858165407151, -8.7909129565407156, -8.9661703597407154, -8.5775050027407147, -9.3430045165407165, -9.3430045165407165, -9.3430045165407165, -9.0969656027407151, -9.0969656027407151, -9.0969656027407151, -9.3078547197407158, -9.3078547197407158, -9.3078547197407158, -9.3078547197407158, -9.3430045165407165, -9.3430045165407165]
								}]
						}, {
							"switch":	84,
							"types":	[[], [], [1], [], [], [], [28, 29, 30, 31, 32, 33, 34], [], [25, 26, 27], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [24]],
							"begin_line":	542,
							"begin_column":	2,
							"end_line":	542,
							"end_column":	38,
							"patch_codes":	["if (!__is_neg(\"\", \"L542\", 19, &(intern), sizeof (intern), &(offset), sizeof (offset), &(index), sizeof (index), &(ht), sizeof (ht), &(object), sizeof (object), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(check_inherited), sizeof (check_inherited), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    spl_hash_verify_pos(intern);\n", "spl_array_get_hash_table(intern, -1)", "spl_array_get_hash_table(intern, 0)", "spl_array_get_hash_table(intern, 1)", "spl_array_get_hash_table(intern, 2)", "spl_array_get_hash_table(intern, 3)", "spl_array_get_hash_table(intern, 6)", "spl_array_get_hash_table(intern, 7)", "spl_array_get_hash_table(intern, 8)", "spl_array_get_hash_table(intern, check_inherited)", "spl_array_get_hash_table(intern, le_index_ptr)", "spl_array_next_ex(intern, 0)", "spl_array_next_ex(intern, ht)", "spl_array_next_no_verify(intern, 0)", "spl_array_next_no_verify(intern, ht)", "spl_array_object_count_elements_helper(intern, 0)", "spl_array_rewind_ex(intern, 0)", "spl_array_rewind_ex(intern, ht)", "spl_array_set_pos(intern, 0)", "spl_array_skip_protected(intern, 0)", "spl_array_skip_protected(intern, ht)", "spl_hash_verify_pos_ex(intern, 0)", "spl_hash_verify_pos_ex(intern, ht)", "{\n}\n", "spl_array_next(intern)", "spl_array_rewind(intern)", "spl_array_update_pos(intern)", "spl_hash_verify_pos((&check_inherited))", "spl_hash_verify_pos((&ht))", "spl_hash_verify_pos((&index))", "spl_hash_verify_pos((&intern))", "spl_hash_verify_pos((&object))", "spl_hash_verify_pos((&offset))", "spl_hash_verify_pos((intern))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5821858778407156, -7.7996115418407159, -6.7858317273407156, -7.3987514778407153, -8.5102955758407148, -8.0618600753407161, -7.8718765413407157, -8.5464609513407162, -8.5464609513407162, -8.5464609513407162, -7.7885728513407155, -7.7885728513407155, -7.7885728513407155, -8.2578328513407158, -8.2578328513407158, -8.2578328513407158, -8.2578328513407158, -8.5464609513407162, -8.5464609513407162]
								}, {
									"case":	2,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	3,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	4,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	5,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	6,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	7,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	8,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	9,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	10,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	11,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	12,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	13,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	14,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	15,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	16,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	17,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	18,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	19,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	20,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	21,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	22,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	23,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	24,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	25,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	26,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	27,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	28,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	29,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	30,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	31,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	32,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	33,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	34,
									"scores":	[-6.5787803713407156]
								}]
						}]
				}, {
					"line":	546,
					"switches":	[{
							"switch":	85,
							"types":	[[], [], [], [], [103], [], [], [], [], [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [], [], [], [], [], []],
							"begin_line":	547,
							"begin_column":	0,
							"end_line":	547,
							"end_column":	0,
							"patch_codes":	["_array_init(((object)), 0)", "_array_init(((offset)), 0)", "_efree(((object)))", "_efree(((offset)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(offset))))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((offset)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((offset))", "_zval_dtor(((object)))", "_zval_dtor(((offset)))", "_zval_dtor_func((object))", "_zval_dtor_func((offset))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(offset)))", "convert_to_boolean((object))", "convert_to_boolean((offset))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((offset))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((offset)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((offset))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((offset))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(offset)))->name)", "spl_array_unset_dimension_ex(1, (object), offset)", "spl_array_unset_dimension_ex(1, (offset), offset)", "spl_array_unset_dimension_ex(1, object, (object))", "spl_array_unset_dimension_ex(1, object, (offset))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(offset)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(offset)).value.lval)", "zval_add_ref(&(object))", "zval_add_ref(&(offset))", "zval_addref_p((object))", "zval_addref_p((offset))", "zval_delref_p(((object)))", "zval_delref_p(((offset)))", "zval_set_isref_p((object))", "zval_set_isref_p((offset))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((offset), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((offset))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_unset_dimension_ex(1, object, offset)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L547\", 2, &(object), sizeof (object), &(offset), sizeof (offset)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-7.3883385255881571, -7.3883385255881571]
								}]
						}, {
							"switch":	86,
							"types":	[[], [], [1], [], [], [], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], [], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [], [], [14]],
							"begin_line":	547,
							"begin_column":	2,
							"end_line":	547,
							"end_column":	58,
							"patch_codes":	["if (!__is_neg(\"\", \"L547\", 2, &(object), sizeof (object), &(offset), sizeof (offset)))\n    spl_array_unset_dimension_ex(1, object, offset);\n", "spl_array_get_dimension_ptr_ptr(1, object, offset, 0)", "spl_array_get_dimension_ptr_ptr(1, object, offset, 1)", "spl_array_get_dimension_ptr_ptr(1, object, offset, le_index_ptr)", "spl_array_has_dimension_ex(1, object, offset, 0)", "spl_array_has_dimension_ex(1, object, offset, 1)", "spl_array_has_dimension_ex(1, object, offset, le_index_ptr)", "spl_array_read_dimension_ex(1, object, offset, 0)", "spl_array_read_dimension_ex(1, object, offset, 1)", "spl_array_read_dimension_ex(1, object, offset, le_index_ptr)", "spl_array_write_dimension_ex(1, object, offset, 0)", "spl_array_write_dimension_ex(1, object, offset, object)", "spl_array_write_dimension_ex(1, object, offset, offset)", "{\n}\n", "dprintf(1, object, offset)", "multi_convert_to_double_ex(1, object, offset)", "multi_convert_to_long_ex(1, object, offset)", "multi_convert_to_string_ex(1, object, offset)", "php_info_print_table_header(1, object, offset)", "php_info_print_table_row(1, object, offset)", "php_info_print_table_row_ex(1, object, offset)", "zend_error(1, object, offset)", "zend_error_noreturn(1, object, offset)", "zend_get_parameters_ex(1, object, offset)", "zend_parse_method_parameters(1, object, offset)", "zend_parse_parameters(1, object, offset)", "spl_array_unset_dimension_ex((0), object, offset)", "spl_array_unset_dimension_ex((object != 0), object, offset)", "spl_array_unset_dimension_ex((object != offset), object, offset)", "spl_array_unset_dimension_ex((object == 0), object, offset)", "spl_array_unset_dimension_ex((object == offset), object, offset)", "spl_array_unset_dimension_ex((offset != 0), object, offset)", "spl_array_unset_dimension_ex((offset == 0), object, offset)", "spl_array_unset_dimension_ex(1, (&object), offset)", "spl_array_unset_dimension_ex(1, (&offset), offset)", "spl_array_unset_dimension_ex(1, (object), offset)", "spl_array_unset_dimension_ex(1, (offset), offset)", "spl_array_unset_dimension_ex(1, object, (&object))", "spl_array_unset_dimension_ex(1, object, (&offset))", "spl_array_unset_dimension_ex(1, object, (object))", "spl_array_unset_dimension_ex(1, object, (offset))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5815669193881572, -7.5815669193881572]
								}, {
									"case":	2,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	3,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	4,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	5,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	6,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	7,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	8,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	9,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	10,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	11,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	12,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	13,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	14,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	15,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	16,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	17,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	18,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	19,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	20,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	21,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	22,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	23,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	24,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	25,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	26,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	27,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	28,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	29,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	30,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	31,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	32,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	33,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	34,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	35,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	36,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	37,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	38,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	39,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	40,
									"scores":	[-6.5181722493881571]
								}, {
									"case":	41,
									"scores":	[-6.5181722493881571]
								}]
						}]
				}, {
					"line":	833,
					"switches":	[{
							"switch":	91,
							"types":	[[], [], [], [], [107, 108, 109, 110, 111, 112], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [], [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [], [], [], [], []],
							"begin_line":	834,
							"begin_column":	4,
							"end_line":	834,
							"end_column":	4,
							"patch_codes":	["memset(&(*intern->array).is_ref__gc, 0, sizeof (*(&(*intern->array).is_ref__gc)))", "memset(&(*intern->array).refcount__gc, 0, sizeof (*(&(*intern->array).refcount__gc)))", "memset(&(*intern->array).type, 0, sizeof (*(&(*intern->array).type)))", "memset(&(*intern->array).value, 0, sizeof (*(&(*intern->array).value)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "(string_key)++", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_efree(((string_key)))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (string_key))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (string_key))", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_move_forward_ex((aht), &intern->pos)", "zend_hash_move_forward_ex(aht, &(intern)->pos)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_update_pos(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_move_forward_ex(aht, &intern->pos)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L834\", 5, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key)))\n    break;\n", "if (__is_neg(\"\", \"L834\", 5, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key)))\n    return -1;\n", "if (__is_neg(\"\", \"L834\", 5, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key)))\n    return 0;\n", "if (__is_neg(\"\", \"L834\", 5, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key)))\n    return 1;\n", "if (__is_neg(\"\", \"L834\", 5, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key)))\n    return 3;\n", "if (__is_neg(\"\", \"L834\", 5, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key)))\n    return 5;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	2,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	3,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	4,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	5,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	6,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	7,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	8,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	9,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	10,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	11,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	12,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	13,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	14,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	15,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	16,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	17,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	18,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	19,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	20,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	21,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	22,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	23,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	24,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	25,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	26,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	27,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	28,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	29,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	30,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	31,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	32,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	33,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	34,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	35,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	36,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	37,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	38,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	39,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	40,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	41,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	42,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	43,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	44,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	45,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	46,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	47,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	48,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	49,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	50,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	51,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	52,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	53,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	54,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	55,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	56,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	57,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	58,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	59,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	60,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	61,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	62,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	63,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	64,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	65,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	66,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	67,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	68,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	69,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	70,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	71,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	72,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	73,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	74,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	75,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	76,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	77,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	78,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	79,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	80,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	81,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	82,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	83,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	84,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	85,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	86,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	87,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	88,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	89,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	90,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	91,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	92,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	93,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	94,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	95,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	96,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	97,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	98,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	99,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	100,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	101,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	102,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	103,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	104,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	105,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	106,
									"scores":	[-7.8313482250269217]
								}, {
									"case":	107,
									"scores":	[-9.35815383802692, -8.64632972102692, -9.68798920882692, -9.43040403482692, -9.14726472102692]
								}, {
									"case":	108,
									"scores":	[-12.326843838026921, -11.615019721026922, -12.656679208826922, -12.399094034826922, -12.115954721026922]
								}, {
									"case":	109,
									"scores":	[-9.50237483802692, -8.79055072102692, -9.83221020882692, -9.57462503482692, -9.29148572102692]
								}, {
									"case":	110,
									"scores":	[-12.326843838026921, -11.615019721026922, -12.656679208826922, -12.399094034826922, -12.115954721026922]
								}, {
									"case":	111,
									"scores":	[-12.326843838026921, -11.615019721026922, -12.656679208826922, -12.399094034826922, -12.115954721026922]
								}, {
									"case":	112,
									"scores":	[-12.326843838026921, -11.615019721026922, -12.656679208826922, -12.399094034826922, -12.115954721026922]
								}]
						}, {
							"switch":	92,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	834,
							"begin_column":	6,
							"end_line":	834,
							"end_column":	13,
							"patch_codes":	["if (!__is_neg(\"\", \"L834\", 5, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.96056079502692, -8.16928976502692, -9.85733739502692, -9.54353969502692, -8.49130079502692]
								}]
						}]
				}, {
					"line":	832,
					"switches":	[{
							"switch":	89,
							"types":	[[], [], [], [], [107, 108, 109, 110, 111, 112], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [], [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [], [], [], [], []],
							"begin_line":	833,
							"begin_column":	3,
							"end_line":	833,
							"end_column":	3,
							"patch_codes":	["memset(&(*intern->array).is_ref__gc, 0, sizeof (*(&(*intern->array).is_ref__gc)))", "memset(&(*intern->array).refcount__gc, 0, sizeof (*(&(*intern->array).refcount__gc)))", "memset(&(*intern->array).type, 0, sizeof (*(&(*intern->array).type)))", "memset(&(*intern->array).value, 0, sizeof (*(&(*intern->array).value)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "(string_key)++", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_efree(((string_key)))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (string_key))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (string_key))", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_move_forward_ex((aht), &intern->pos)", "zend_hash_move_forward_ex(aht, &(intern)->pos)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_update_pos(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_move_forward_ex(aht, &intern->pos)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    break;\n", "if (__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return -1;\n", "if (__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 0;\n", "if (__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 1;\n", "if (__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 3;\n", "if (__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    return 5;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.85155093234444]
								}, {
									"case":	2,
									"scores":	[-7.85155093234444]
								}, {
									"case":	3,
									"scores":	[-7.85155093234444]
								}, {
									"case":	4,
									"scores":	[-7.85155093234444]
								}, {
									"case":	5,
									"scores":	[-7.85155093234444]
								}, {
									"case":	6,
									"scores":	[-7.85155093234444]
								}, {
									"case":	7,
									"scores":	[-7.85155093234444]
								}, {
									"case":	8,
									"scores":	[-7.85155093234444]
								}, {
									"case":	9,
									"scores":	[-7.85155093234444]
								}, {
									"case":	10,
									"scores":	[-7.85155093234444]
								}, {
									"case":	11,
									"scores":	[-7.85155093234444]
								}, {
									"case":	12,
									"scores":	[-7.85155093234444]
								}, {
									"case":	13,
									"scores":	[-7.85155093234444]
								}, {
									"case":	14,
									"scores":	[-7.85155093234444]
								}, {
									"case":	15,
									"scores":	[-7.85155093234444]
								}, {
									"case":	16,
									"scores":	[-7.85155093234444]
								}, {
									"case":	17,
									"scores":	[-7.85155093234444]
								}, {
									"case":	18,
									"scores":	[-7.85155093234444]
								}, {
									"case":	19,
									"scores":	[-7.85155093234444]
								}, {
									"case":	20,
									"scores":	[-7.85155093234444]
								}, {
									"case":	21,
									"scores":	[-7.85155093234444]
								}, {
									"case":	22,
									"scores":	[-7.85155093234444]
								}, {
									"case":	23,
									"scores":	[-7.85155093234444]
								}, {
									"case":	24,
									"scores":	[-7.85155093234444]
								}, {
									"case":	25,
									"scores":	[-7.85155093234444]
								}, {
									"case":	26,
									"scores":	[-7.85155093234444]
								}, {
									"case":	27,
									"scores":	[-7.85155093234444]
								}, {
									"case":	28,
									"scores":	[-7.85155093234444]
								}, {
									"case":	29,
									"scores":	[-7.85155093234444]
								}, {
									"case":	30,
									"scores":	[-7.85155093234444]
								}, {
									"case":	31,
									"scores":	[-7.85155093234444]
								}, {
									"case":	32,
									"scores":	[-7.85155093234444]
								}, {
									"case":	33,
									"scores":	[-7.85155093234444]
								}, {
									"case":	34,
									"scores":	[-7.85155093234444]
								}, {
									"case":	35,
									"scores":	[-7.85155093234444]
								}, {
									"case":	36,
									"scores":	[-7.85155093234444]
								}, {
									"case":	37,
									"scores":	[-7.85155093234444]
								}, {
									"case":	38,
									"scores":	[-7.85155093234444]
								}, {
									"case":	39,
									"scores":	[-7.85155093234444]
								}, {
									"case":	40,
									"scores":	[-7.85155093234444]
								}, {
									"case":	41,
									"scores":	[-7.85155093234444]
								}, {
									"case":	42,
									"scores":	[-7.85155093234444]
								}, {
									"case":	43,
									"scores":	[-7.85155093234444]
								}, {
									"case":	44,
									"scores":	[-7.85155093234444]
								}, {
									"case":	45,
									"scores":	[-7.85155093234444]
								}, {
									"case":	46,
									"scores":	[-7.85155093234444]
								}, {
									"case":	47,
									"scores":	[-7.85155093234444]
								}, {
									"case":	48,
									"scores":	[-7.85155093234444]
								}, {
									"case":	49,
									"scores":	[-7.85155093234444]
								}, {
									"case":	50,
									"scores":	[-7.85155093234444]
								}, {
									"case":	51,
									"scores":	[-7.85155093234444]
								}, {
									"case":	52,
									"scores":	[-7.85155093234444]
								}, {
									"case":	53,
									"scores":	[-7.85155093234444]
								}, {
									"case":	54,
									"scores":	[-7.85155093234444]
								}, {
									"case":	55,
									"scores":	[-7.85155093234444]
								}, {
									"case":	56,
									"scores":	[-7.85155093234444]
								}, {
									"case":	57,
									"scores":	[-7.85155093234444]
								}, {
									"case":	58,
									"scores":	[-7.85155093234444]
								}, {
									"case":	59,
									"scores":	[-7.85155093234444]
								}, {
									"case":	60,
									"scores":	[-7.85155093234444]
								}, {
									"case":	61,
									"scores":	[-7.85155093234444]
								}, {
									"case":	62,
									"scores":	[-7.85155093234444]
								}, {
									"case":	63,
									"scores":	[-7.85155093234444]
								}, {
									"case":	64,
									"scores":	[-7.85155093234444]
								}, {
									"case":	65,
									"scores":	[-7.85155093234444]
								}, {
									"case":	66,
									"scores":	[-7.85155093234444]
								}, {
									"case":	67,
									"scores":	[-7.85155093234444]
								}, {
									"case":	68,
									"scores":	[-7.85155093234444]
								}, {
									"case":	69,
									"scores":	[-7.85155093234444]
								}, {
									"case":	70,
									"scores":	[-7.85155093234444]
								}, {
									"case":	71,
									"scores":	[-7.85155093234444]
								}, {
									"case":	72,
									"scores":	[-7.85155093234444]
								}, {
									"case":	73,
									"scores":	[-7.85155093234444]
								}, {
									"case":	74,
									"scores":	[-7.85155093234444]
								}, {
									"case":	75,
									"scores":	[-7.85155093234444]
								}, {
									"case":	76,
									"scores":	[-7.85155093234444]
								}, {
									"case":	77,
									"scores":	[-7.85155093234444]
								}, {
									"case":	78,
									"scores":	[-7.85155093234444]
								}, {
									"case":	79,
									"scores":	[-7.85155093234444]
								}, {
									"case":	80,
									"scores":	[-7.85155093234444]
								}, {
									"case":	81,
									"scores":	[-7.85155093234444]
								}, {
									"case":	82,
									"scores":	[-7.85155093234444]
								}, {
									"case":	83,
									"scores":	[-7.85155093234444]
								}, {
									"case":	84,
									"scores":	[-7.85155093234444]
								}, {
									"case":	85,
									"scores":	[-7.85155093234444]
								}, {
									"case":	86,
									"scores":	[-7.85155093234444]
								}, {
									"case":	87,
									"scores":	[-7.85155093234444]
								}, {
									"case":	88,
									"scores":	[-7.85155093234444]
								}, {
									"case":	89,
									"scores":	[-7.85155093234444]
								}, {
									"case":	90,
									"scores":	[-7.85155093234444]
								}, {
									"case":	91,
									"scores":	[-7.85155093234444]
								}, {
									"case":	92,
									"scores":	[-7.85155093234444]
								}, {
									"case":	93,
									"scores":	[-7.85155093234444]
								}, {
									"case":	94,
									"scores":	[-7.85155093234444]
								}, {
									"case":	95,
									"scores":	[-7.85155093234444]
								}, {
									"case":	96,
									"scores":	[-7.85155093234444]
								}, {
									"case":	97,
									"scores":	[-7.85155093234444]
								}, {
									"case":	98,
									"scores":	[-7.85155093234444]
								}, {
									"case":	99,
									"scores":	[-7.85155093234444]
								}, {
									"case":	100,
									"scores":	[-7.85155093234444]
								}, {
									"case":	101,
									"scores":	[-7.85155093234444]
								}, {
									"case":	102,
									"scores":	[-7.85155093234444]
								}, {
									"case":	103,
									"scores":	[-7.85155093234444]
								}, {
									"case":	104,
									"scores":	[-7.85155093234444]
								}, {
									"case":	105,
									"scores":	[-7.85155093234444]
								}, {
									"case":	106,
									"scores":	[-7.85155093234444]
								}, {
									"case":	107,
									"scores":	[-11.639097645344441, -10.40506972834444, -11.44672921614444, -11.189144042144441, -10.90600472834444, -11.966189816144441, -11.966189816144441, -11.966189816144441, -11.720150902344441, -11.720150902344441, -11.720150902344441, -11.93104001934444, -11.93104001934444, -11.93104001934444, -11.93104001934444, -11.93104001934444, -11.966189816144441, -11.966189816144441]
								}, {
									"case":	108,
									"scores":	[-14.607787645344441, -13.37375972834444, -14.415419216144441, -14.15783404214444, -13.874694728344441, -14.934879816144441, -14.934879816144441, -14.934879816144441, -14.688840902344442, -14.688840902344442, -14.688840902344442, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.934879816144441, -14.934879816144441]
								}, {
									"case":	109,
									"scores":	[-11.783318645344441, -10.54929072834444, -11.590950216144442, -11.333365042144441, -11.05022572834444, -12.110410816144441, -12.110410816144441, -12.110410816144441, -11.864371902344441, -11.864371902344441, -11.864371902344441, -12.07526101934444, -12.07526101934444, -12.07526101934444, -12.07526101934444, -12.07526101934444, -12.110410816144441, -12.110410816144441]
								}, {
									"case":	110,
									"scores":	[-14.607787645344441, -13.37375972834444, -14.415419216144441, -14.15783404214444, -13.874694728344441, -14.934879816144441, -14.934879816144441, -14.934879816144441, -14.688840902344442, -14.688840902344442, -14.688840902344442, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.934879816144441, -14.934879816144441]
								}, {
									"case":	111,
									"scores":	[-14.607787645344441, -13.37375972834444, -14.415419216144441, -14.15783404214444, -13.874694728344441, -14.934879816144441, -14.934879816144441, -14.934879816144441, -14.688840902344442, -14.688840902344442, -14.688840902344442, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.934879816144441, -14.934879816144441]
								}, {
									"case":	112,
									"scores":	[-14.607787645344441, -13.37375972834444, -14.415419216144441, -14.15783404214444, -13.874694728344441, -14.934879816144441, -14.934879816144441, -14.934879816144441, -14.688840902344442, -14.688840902344442, -14.688840902344442, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.899730019344441, -14.934879816144441, -14.934879816144441]
								}]
						}, {
							"switch":	90,
							"types":	[[4], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], [], [3]],
							"begin_line":	833,
							"begin_column":	5,
							"end_line":	835,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    return 0;\n}\n", "if ((!string_length || string_key[0]) || __is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    return 0;\n}\n", "if (!string_length) {\n    return 0;\n}\n", "if ((!string_length || string_key[0]) && !__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    return 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.386051975428146, -3.7931669454281458, -5.4812145754281456, -5.1674168754281453, -4.1151779754281455, -5.3979108854281463, -5.3979108854281463, -5.3979108854281463, -4.6400227854281457, -4.6400227854281457, -4.6400227854281457, -5.109282785428146, -5.109282785428146, -5.109282785428146, -5.109282785428146, -5.109282785428146, -5.3979108854281463, -5.3979108854281463]
								}, {
									"case":	2,
									"scores":	[-3.0057919754281457, -3.412906945428146, -5.1009545754281458, -4.7871568754281455, -3.7349179754281461, -5.0176508854281456, -5.0176508854281456, -5.0176508854281456, -4.2597627854281459, -4.2597627854281459, -4.2597627854281459, -4.7290227854281461, -4.7290227854281461, -4.7290227854281461, -4.7290227854281461, -4.7290227854281461, -5.0176508854281456, -5.0176508854281456]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.0057919754281457, -3.412906945428146, -5.1009545754281458, -4.7871568754281455, -3.7349179754281461, -5.0176508854281456, -5.0176508854281456, -5.0176508854281456, -4.2597627854281459, -4.2597627854281459, -4.2597627854281459, -4.7290227854281461, -4.7290227854281461, -4.7290227854281461, -4.7290227854281461, -4.7290227854281461, -5.0176508854281456, -5.0176508854281456]
								}]
						}, {
							"switch":	93,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	833,
							"begin_column":	5,
							"end_line":	835,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L833\", 18, &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(intern), sizeof (intern), &(aht), sizeof (aht), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info)))\n    if (!string_length || string_key[0]) {\n        return 0;\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.00010020234444, -9.40721517234444, -11.095262802344442, -10.781465102344441, -9.72922620234444, -11.011959112344442, -11.011959112344442, -11.011959112344442, -10.254071012344442, -10.254071012344442, -10.254071012344442, -10.723331012344442, -10.723331012344442, -10.723331012344442, -10.723331012344442, -10.723331012344442, -11.011959112344442, -11.011959112344442]
								}]
						}]
				}, {
					"line":	836,
					"switches":	[{
							"switch":	94,
							"types":	[[], [], [], [], [107, 108, 109, 110, 111, 112], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], [], [], [], [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], [], [], [], [], [], []],
							"begin_line":	837,
							"begin_column":	3,
							"end_line":	837,
							"end_column":	3,
							"patch_codes":	["memset(&(*intern->array).is_ref__gc, 0, sizeof (*(&(*intern->array).is_ref__gc)))", "memset(&(*intern->array).refcount__gc, 0, sizeof (*(&(*intern->array).refcount__gc)))", "memset(&(*intern->array).type, 0, sizeof (*(&(*intern->array).type)))", "memset(&(*intern->array).value, 0, sizeof (*(&(*intern->array).value)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "(string_key)++", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_efree(((string_key)))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (string_key))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (string_key))", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_move_forward_ex((aht), &intern->pos)", "zend_hash_move_forward_ex(aht, &(intern)->pos)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_update_pos(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_move_forward_ex(aht, &intern->pos)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L837\", 5, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key)))\n    break;\n", "if (__is_neg(\"\", \"L837\", 5, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key)))\n    return -1;\n", "if (__is_neg(\"\", \"L837\", 5, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key)))\n    return 0;\n", "if (__is_neg(\"\", \"L837\", 5, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key)))\n    return 1;\n", "if (__is_neg(\"\", \"L837\", 5, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key)))\n    return 3;\n", "if (__is_neg(\"\", \"L837\", 5, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key)))\n    return 5;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.00310524944305]
								}, {
									"case":	2,
									"scores":	[-9.00310524944305]
								}, {
									"case":	3,
									"scores":	[-9.00310524944305]
								}, {
									"case":	4,
									"scores":	[-9.00310524944305]
								}, {
									"case":	5,
									"scores":	[-9.00310524944305]
								}, {
									"case":	6,
									"scores":	[-9.00310524944305]
								}, {
									"case":	7,
									"scores":	[-9.00310524944305]
								}, {
									"case":	8,
									"scores":	[-9.00310524944305]
								}, {
									"case":	9,
									"scores":	[-9.00310524944305]
								}, {
									"case":	10,
									"scores":	[-9.00310524944305]
								}, {
									"case":	11,
									"scores":	[-9.00310524944305]
								}, {
									"case":	12,
									"scores":	[-9.00310524944305]
								}, {
									"case":	13,
									"scores":	[-9.00310524944305]
								}, {
									"case":	14,
									"scores":	[-9.00310524944305]
								}, {
									"case":	15,
									"scores":	[-9.00310524944305]
								}, {
									"case":	16,
									"scores":	[-9.00310524944305]
								}, {
									"case":	17,
									"scores":	[-9.00310524944305]
								}, {
									"case":	18,
									"scores":	[-9.00310524944305]
								}, {
									"case":	19,
									"scores":	[-9.00310524944305]
								}, {
									"case":	20,
									"scores":	[-9.00310524944305]
								}, {
									"case":	21,
									"scores":	[-9.00310524944305]
								}, {
									"case":	22,
									"scores":	[-9.00310524944305]
								}, {
									"case":	23,
									"scores":	[-9.00310524944305]
								}, {
									"case":	24,
									"scores":	[-9.00310524944305]
								}, {
									"case":	25,
									"scores":	[-9.00310524944305]
								}, {
									"case":	26,
									"scores":	[-9.00310524944305]
								}, {
									"case":	27,
									"scores":	[-9.00310524944305]
								}, {
									"case":	28,
									"scores":	[-9.00310524944305]
								}, {
									"case":	29,
									"scores":	[-9.00310524944305]
								}, {
									"case":	30,
									"scores":	[-9.00310524944305]
								}, {
									"case":	31,
									"scores":	[-9.00310524944305]
								}, {
									"case":	32,
									"scores":	[-9.00310524944305]
								}, {
									"case":	33,
									"scores":	[-9.00310524944305]
								}, {
									"case":	34,
									"scores":	[-9.00310524944305]
								}, {
									"case":	35,
									"scores":	[-9.00310524944305]
								}, {
									"case":	36,
									"scores":	[-9.00310524944305]
								}, {
									"case":	37,
									"scores":	[-9.00310524944305]
								}, {
									"case":	38,
									"scores":	[-9.00310524944305]
								}, {
									"case":	39,
									"scores":	[-9.00310524944305]
								}, {
									"case":	40,
									"scores":	[-9.00310524944305]
								}, {
									"case":	41,
									"scores":	[-9.00310524944305]
								}, {
									"case":	42,
									"scores":	[-9.00310524944305]
								}, {
									"case":	43,
									"scores":	[-9.00310524944305]
								}, {
									"case":	44,
									"scores":	[-9.00310524944305]
								}, {
									"case":	45,
									"scores":	[-9.00310524944305]
								}, {
									"case":	46,
									"scores":	[-9.00310524944305]
								}, {
									"case":	47,
									"scores":	[-9.00310524944305]
								}, {
									"case":	48,
									"scores":	[-9.00310524944305]
								}, {
									"case":	49,
									"scores":	[-9.00310524944305]
								}, {
									"case":	50,
									"scores":	[-9.00310524944305]
								}, {
									"case":	51,
									"scores":	[-9.00310524944305]
								}, {
									"case":	52,
									"scores":	[-9.00310524944305]
								}, {
									"case":	53,
									"scores":	[-9.00310524944305]
								}, {
									"case":	54,
									"scores":	[-9.00310524944305]
								}, {
									"case":	55,
									"scores":	[-9.00310524944305]
								}, {
									"case":	56,
									"scores":	[-9.00310524944305]
								}, {
									"case":	57,
									"scores":	[-9.00310524944305]
								}, {
									"case":	58,
									"scores":	[-9.00310524944305]
								}, {
									"case":	59,
									"scores":	[-9.00310524944305]
								}, {
									"case":	60,
									"scores":	[-9.00310524944305]
								}, {
									"case":	61,
									"scores":	[-9.00310524944305]
								}, {
									"case":	62,
									"scores":	[-9.00310524944305]
								}, {
									"case":	63,
									"scores":	[-9.00310524944305]
								}, {
									"case":	64,
									"scores":	[-9.00310524944305]
								}, {
									"case":	65,
									"scores":	[-9.00310524944305]
								}, {
									"case":	66,
									"scores":	[-9.00310524944305]
								}, {
									"case":	67,
									"scores":	[-9.00310524944305]
								}, {
									"case":	68,
									"scores":	[-9.00310524944305]
								}, {
									"case":	69,
									"scores":	[-9.00310524944305]
								}, {
									"case":	70,
									"scores":	[-9.00310524944305]
								}, {
									"case":	71,
									"scores":	[-9.00310524944305]
								}, {
									"case":	72,
									"scores":	[-9.00310524944305]
								}, {
									"case":	73,
									"scores":	[-9.00310524944305]
								}, {
									"case":	74,
									"scores":	[-9.00310524944305]
								}, {
									"case":	75,
									"scores":	[-9.00310524944305]
								}, {
									"case":	76,
									"scores":	[-9.00310524944305]
								}, {
									"case":	77,
									"scores":	[-9.00310524944305]
								}, {
									"case":	78,
									"scores":	[-9.00310524944305]
								}, {
									"case":	79,
									"scores":	[-9.00310524944305]
								}, {
									"case":	80,
									"scores":	[-9.00310524944305]
								}, {
									"case":	81,
									"scores":	[-9.00310524944305]
								}, {
									"case":	82,
									"scores":	[-9.00310524944305]
								}, {
									"case":	83,
									"scores":	[-9.00310524944305]
								}, {
									"case":	84,
									"scores":	[-9.00310524944305]
								}, {
									"case":	85,
									"scores":	[-9.00310524944305]
								}, {
									"case":	86,
									"scores":	[-9.00310524944305]
								}, {
									"case":	87,
									"scores":	[-9.00310524944305]
								}, {
									"case":	88,
									"scores":	[-9.00310524944305]
								}, {
									"case":	89,
									"scores":	[-9.00310524944305]
								}, {
									"case":	90,
									"scores":	[-9.00310524944305]
								}, {
									"case":	91,
									"scores":	[-9.00310524944305]
								}, {
									"case":	92,
									"scores":	[-9.00310524944305]
								}, {
									"case":	93,
									"scores":	[-9.00310524944305]
								}, {
									"case":	94,
									"scores":	[-9.00310524944305]
								}, {
									"case":	95,
									"scores":	[-9.00310524944305]
								}, {
									"case":	96,
									"scores":	[-9.00310524944305]
								}, {
									"case":	97,
									"scores":	[-9.00310524944305]
								}, {
									"case":	98,
									"scores":	[-9.00310524944305]
								}, {
									"case":	99,
									"scores":	[-9.00310524944305]
								}, {
									"case":	100,
									"scores":	[-9.00310524944305]
								}, {
									"case":	101,
									"scores":	[-9.00310524944305]
								}, {
									"case":	102,
									"scores":	[-9.00310524944305]
								}, {
									"case":	103,
									"scores":	[-9.00310524944305]
								}, {
									"case":	104,
									"scores":	[-9.00310524944305]
								}, {
									"case":	105,
									"scores":	[-9.00310524944305]
								}, {
									"case":	106,
									"scores":	[-9.00310524944305]
								}, {
									"case":	107,
									"scores":	[-10.859746233243051, -10.60216105924305, -10.529910862443051, -9.81808674544305, -10.319021745443051]
								}, {
									"case":	108,
									"scores":	[-13.82843623324305, -13.570851059243051, -13.498600862443052, -12.786776745443051, -13.287711745443051]
								}, {
									"case":	109,
									"scores":	[-11.003967233243051, -10.74638205924305, -10.674131862443051, -9.96230774544305, -10.463242745443051]
								}, {
									"case":	110,
									"scores":	[-13.82843623324305, -13.570851059243051, -13.498600862443052, -12.786776745443051, -13.287711745443051]
								}, {
									"case":	111,
									"scores":	[-13.82843623324305, -13.570851059243051, -13.498600862443052, -12.786776745443051, -13.287711745443051]
								}, {
									"case":	112,
									"scores":	[-13.82843623324305, -13.570851059243051, -13.498600862443052, -12.786776745443051, -13.287711745443051]
								}]
						}, {
							"switch":	95,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	837,
							"begin_column":	5,
							"end_line":	837,
							"end_column":	12,
							"patch_codes":	["if (!__is_neg(\"\", \"L837\", 5, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-11.029094419443052, -10.715296719443051, -10.132317819443051, -9.34104678944305, -9.66305781944305]
								}]
						}]
				}, {
					"line":	831,
					"switches":	[{
							"switch":	87,
							"types":	[[], [], [], [], [], [], [], [], [], [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [], [], [], [], [], []],
							"begin_line":	832,
							"begin_column":	2,
							"end_line":	832,
							"end_column":	2,
							"patch_codes":	["(aht)->nApplyCount++", "(aht)->nApplyCount--", "(string_key)++", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_efree(((string_key)))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted long input array (%s) overwrite\", (string_key))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted super-global (%s) variable overwrite\", (string_key))", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_move_forward_ex((aht), &intern->pos)", "zend_hash_move_forward_ex(aht, &(intern)->pos)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_update_pos(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_move_forward_ex(aht, &intern->pos)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.85155093234444]
								}, {
									"case":	2,
									"scores":	[-7.85155093234444]
								}, {
									"case":	3,
									"scores":	[-7.85155093234444]
								}, {
									"case":	4,
									"scores":	[-7.85155093234444]
								}, {
									"case":	5,
									"scores":	[-7.85155093234444]
								}, {
									"case":	6,
									"scores":	[-7.85155093234444]
								}, {
									"case":	7,
									"scores":	[-7.85155093234444]
								}, {
									"case":	8,
									"scores":	[-7.85155093234444]
								}, {
									"case":	9,
									"scores":	[-7.85155093234444]
								}, {
									"case":	10,
									"scores":	[-7.85155093234444]
								}, {
									"case":	11,
									"scores":	[-7.85155093234444]
								}, {
									"case":	12,
									"scores":	[-7.85155093234444]
								}, {
									"case":	13,
									"scores":	[-7.85155093234444]
								}, {
									"case":	14,
									"scores":	[-7.85155093234444]
								}, {
									"case":	15,
									"scores":	[-7.85155093234444]
								}, {
									"case":	16,
									"scores":	[-7.85155093234444]
								}, {
									"case":	17,
									"scores":	[-7.85155093234444]
								}, {
									"case":	18,
									"scores":	[-7.85155093234444]
								}, {
									"case":	19,
									"scores":	[-7.85155093234444]
								}, {
									"case":	20,
									"scores":	[-7.85155093234444]
								}, {
									"case":	21,
									"scores":	[-7.85155093234444]
								}, {
									"case":	22,
									"scores":	[-7.85155093234444]
								}, {
									"case":	23,
									"scores":	[-7.85155093234444]
								}, {
									"case":	24,
									"scores":	[-7.85155093234444]
								}, {
									"case":	25,
									"scores":	[-7.85155093234444]
								}, {
									"case":	26,
									"scores":	[-7.85155093234444]
								}, {
									"case":	27,
									"scores":	[-7.85155093234444]
								}, {
									"case":	28,
									"scores":	[-7.85155093234444]
								}, {
									"case":	29,
									"scores":	[-7.85155093234444]
								}, {
									"case":	30,
									"scores":	[-7.85155093234444]
								}, {
									"case":	31,
									"scores":	[-7.85155093234444]
								}, {
									"case":	32,
									"scores":	[-7.85155093234444]
								}, {
									"case":	33,
									"scores":	[-7.85155093234444]
								}, {
									"case":	34,
									"scores":	[-7.85155093234444]
								}, {
									"case":	35,
									"scores":	[-7.85155093234444]
								}, {
									"case":	36,
									"scores":	[-7.85155093234444]
								}, {
									"case":	37,
									"scores":	[-7.85155093234444]
								}, {
									"case":	38,
									"scores":	[-7.85155093234444]
								}, {
									"case":	39,
									"scores":	[-7.85155093234444]
								}, {
									"case":	40,
									"scores":	[-7.85155093234444]
								}, {
									"case":	41,
									"scores":	[-7.85155093234444]
								}, {
									"case":	42,
									"scores":	[-7.85155093234444]
								}, {
									"case":	43,
									"scores":	[-7.85155093234444]
								}, {
									"case":	44,
									"scores":	[-7.85155093234444]
								}, {
									"case":	45,
									"scores":	[-7.85155093234444]
								}, {
									"case":	46,
									"scores":	[-7.85155093234444]
								}, {
									"case":	47,
									"scores":	[-7.85155093234444]
								}, {
									"case":	48,
									"scores":	[-7.85155093234444]
								}, {
									"case":	49,
									"scores":	[-7.85155093234444]
								}, {
									"case":	50,
									"scores":	[-7.85155093234444]
								}, {
									"case":	51,
									"scores":	[-7.85155093234444]
								}, {
									"case":	52,
									"scores":	[-7.85155093234444]
								}, {
									"case":	53,
									"scores":	[-7.85155093234444]
								}, {
									"case":	54,
									"scores":	[-7.85155093234444]
								}, {
									"case":	55,
									"scores":	[-7.85155093234444]
								}, {
									"case":	56,
									"scores":	[-7.85155093234444]
								}, {
									"case":	57,
									"scores":	[-7.85155093234444]
								}, {
									"case":	58,
									"scores":	[-7.85155093234444]
								}, {
									"case":	59,
									"scores":	[-7.85155093234444]
								}, {
									"case":	60,
									"scores":	[-7.85155093234444]
								}, {
									"case":	61,
									"scores":	[-7.85155093234444]
								}, {
									"case":	62,
									"scores":	[-7.85155093234444]
								}, {
									"case":	63,
									"scores":	[-7.85155093234444]
								}, {
									"case":	64,
									"scores":	[-7.85155093234444]
								}, {
									"case":	65,
									"scores":	[-7.85155093234444]
								}, {
									"case":	66,
									"scores":	[-7.85155093234444]
								}, {
									"case":	67,
									"scores":	[-7.85155093234444]
								}, {
									"case":	68,
									"scores":	[-7.85155093234444]
								}, {
									"case":	69,
									"scores":	[-7.85155093234444]
								}, {
									"case":	70,
									"scores":	[-7.85155093234444]
								}, {
									"case":	71,
									"scores":	[-7.85155093234444]
								}, {
									"case":	72,
									"scores":	[-7.85155093234444]
								}, {
									"case":	73,
									"scores":	[-7.85155093234444]
								}, {
									"case":	74,
									"scores":	[-7.85155093234444]
								}, {
									"case":	75,
									"scores":	[-7.85155093234444]
								}, {
									"case":	76,
									"scores":	[-7.85155093234444]
								}, {
									"case":	77,
									"scores":	[-7.85155093234444]
								}, {
									"case":	78,
									"scores":	[-7.85155093234444]
								}]
						}, {
							"switch":	88,
							"types":	[[7], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6], []],
							"begin_line":	832,
							"begin_column":	4,
							"end_line":	838,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L832\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    if (!string_length || string_key[0]) {\n        return 0;\n    }\n} else {\n    return 0;\n}\n", "if ((zend_hash_get_current_key_ex(aht, &string_key, &string_length, &num_key, 0, &intern->pos) == 1) || __is_neg(\"\", \"L832\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    if (!string_length || string_key[0]) {\n        return 0;\n    }\n} else {\n    return 0;\n}\n", "if (Debug(aht, &string_key, &string_length, &num_key, 0, &intern->pos) == 1) {\n    if (!string_length || string_key[0]) {\n        return 0;\n    }\n} else {\n    return 0;\n}\n", "if (php_printf(aht, &string_key, &string_length, &num_key, 0, &intern->pos) == 1) {\n    if (!string_length || string_key[0]) {\n        return 0;\n    }\n} else {\n    return 0;\n}\n", "if (printf(aht, &string_key, &string_length, &num_key, 0, &intern->pos) == 1) {\n    if (!string_length || string_key[0]) {\n        return 0;\n    }\n} else {\n    return 0;\n}\n", "if (wprintf(aht, &string_key, &string_length, &num_key, 0, &intern->pos) == 1) {\n    if (!string_length || string_key[0]) {\n        return 0;\n    }\n} else {\n    return 0;\n}\n", "if ((zend_hash_get_current_key_ex(aht, &string_key, &string_length, &num_key, 0, &intern->pos) == 1) && !__is_neg(\"\", \"L832\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(string_key), sizeof (string_key), &(string_length), sizeof (string_length), &(num_key), sizeof (num_key), &(intern->pos), sizeof (intern->pos), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info))) {\n    if (!string_length || string_key[0]) {\n        return 0;\n    }\n} else {\n    return 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.3632420903281464, -4.3079243524281461, -2.7514683434281455, -3.1585833134281458, -3.4805943434281459, -5.2421656634281462, -5.2186781534281454, -5.2186781534281454, -4.4607900534281457, -4.4607900534281457, -4.4607900534281457, -4.930050053428146, -4.930050053428146, -4.930050053428146, -4.930050053428146, -4.930050053428146, -5.2186781534281454, -5.2186781534281454]
								}, {
									"case":	2,
									"scores":	[-7.0901714483281477, -6.0348537104281466, -4.4783977014281442, -4.8855126714281463, -5.2075237014281468, -6.9690950214281457, -6.945607511428145, -6.945607511428145, -6.1877194114281462, -6.1877194114281462, -6.1877194114281462, -6.6569794114281464, -6.6569794114281464, -6.6569794114281464, -6.6569794114281464, -6.6569794114281464, -6.945607511428145, -6.945607511428145]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-7.0901714483281477, -6.0348537104281466, -4.4783977014281442, -4.8855126714281463, -5.2075237014281468, -6.9690950214281457, -6.945607511428145, -6.945607511428145, -6.1877194114281462, -6.1877194114281462, -6.1877194114281462, -6.6569794114281464, -6.6569794114281464, -6.6569794114281464, -6.6569794114281464, -6.6569794114281464, -6.945607511428145, -6.945607511428145]
								}]
						}]
				}, {
					"line":	853,
					"switches":	[{
							"switch":	98,
							"types":	[[], [], [], [], [104, 105, 106, 107, 108], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [], [], [], [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [], [], [], [], [], []],
							"begin_line":	854,
							"begin_column":	1,
							"end_line":	854,
							"end_column":	1,
							"patch_codes":	["memset(&(*intern->array).is_ref__gc, 0, sizeof (*(&(*intern->array).is_ref__gc)))", "memset(&(*intern->array).refcount__gc, 0, sizeof (*(&(*intern->array).refcount__gc)))", "memset(&(*intern->array).type, 0, sizeof (*(&(*intern->array).type)))", "memset(&(*intern->array).value, 0, sizeof (*(&(*intern->array).value)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_move_forward_ex((aht), &intern->pos)", "zend_hash_move_forward_ex(aht, &(intern)->pos)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_update_pos(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_move_forward_ex(aht, &intern->pos)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "if (__is_neg(\"\", \"L854\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(intern->array), sizeof (intern->array), &((*intern->array).type), sizeof ((*intern->array).type), &(intern->pos), sizeof (intern->pos), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc)))\n    return -1;\n", "if (__is_neg(\"\", \"L854\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(intern->array), sizeof (intern->array), &((*intern->array).type), sizeof ((*intern->array).type), &(intern->pos), sizeof (intern->pos), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc)))\n    return 0;\n", "if (__is_neg(\"\", \"L854\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(intern->array), sizeof (intern->array), &((*intern->array).type), sizeof ((*intern->array).type), &(intern->pos), sizeof (intern->pos), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc)))\n    return 1;\n", "if (__is_neg(\"\", \"L854\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(intern->array), sizeof (intern->array), &((*intern->array).type), sizeof ((*intern->array).type), &(intern->pos), sizeof (intern->pos), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc)))\n    return 3;\n", "if (__is_neg(\"\", \"L854\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(intern->array), sizeof (intern->array), &((*intern->array).type), sizeof ((*intern->array).type), &(intern->pos), sizeof (intern->pos), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc)))\n    return 5;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	2,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	3,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	4,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	5,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	6,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	7,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	8,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	9,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	10,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	11,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	12,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	13,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	14,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	15,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	16,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	17,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	18,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	19,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	20,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	21,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	22,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	23,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	24,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	25,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	26,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	27,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	28,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	29,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	30,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	31,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	32,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	33,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	34,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	35,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	36,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	37,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	38,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	39,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	40,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	41,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	42,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	43,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	44,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	45,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	46,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	47,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	48,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	49,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	50,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	51,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	52,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	53,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	54,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	55,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	56,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	57,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	58,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	59,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	60,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	61,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	62,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	63,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	64,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	65,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	66,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	67,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	68,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	69,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	70,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	71,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	72,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	73,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	74,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	75,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	76,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	77,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	78,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	79,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	80,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	81,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	82,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	83,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	84,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	85,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	86,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	87,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	88,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	89,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	90,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	91,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	92,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	93,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	94,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	95,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	96,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	97,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	98,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	99,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	100,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	101,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	102,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	103,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	104,
									"scores":	[-11.9126764455094, -11.9126764455094, -13.0914038015094, -12.8453648877094, -13.0914038015094, -13.0914038015094, -12.8453648877094, -12.8453648877094, -12.8453648877094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0914038015094, -13.0914038015094, -12.8453648877094, -12.8453648877094]
								}, {
									"case":	105,
									"scores":	[-9.0882074455094, -9.0882074455094, -10.2669348015094, -10.0208958877094, -10.2669348015094, -10.2669348015094, -10.0208958877094, -10.0208958877094, -10.0208958877094, -10.2317850047094, -10.2317850047094, -10.2317850047094, -10.2317850047094, -10.2317850047094, -10.2669348015094, -10.2669348015094, -10.0208958877094, -10.0208958877094]
								}, {
									"case":	106,
									"scores":	[-11.9126764455094, -11.9126764455094, -13.0914038015094, -12.8453648877094, -13.0914038015094, -13.0914038015094, -12.8453648877094, -12.8453648877094, -12.8453648877094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0914038015094, -13.0914038015094, -12.8453648877094, -12.8453648877094]
								}, {
									"case":	107,
									"scores":	[-11.9126764455094, -11.9126764455094, -13.0914038015094, -12.8453648877094, -13.0914038015094, -13.0914038015094, -12.8453648877094, -12.8453648877094, -12.8453648877094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0914038015094, -13.0914038015094, -12.8453648877094, -12.8453648877094]
								}, {
									"case":	108,
									"scores":	[-11.9126764455094, -11.9126764455094, -13.0914038015094, -12.8453648877094, -13.0914038015094, -13.0914038015094, -12.8453648877094, -12.8453648877094, -12.8453648877094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0562540047094, -13.0914038015094, -13.0914038015094, -12.8453648877094, -12.8453648877094]
								}]
						}, {
							"switch":	99,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	854,
							"begin_column":	3,
							"end_line":	854,
							"end_column":	56,
							"patch_codes":	["if (!__is_neg(\"\", \"L854\", 18, &(intern), sizeof (intern), &(aht), sizeof (aht), &(intern->array), sizeof (intern->array), &((*intern->array).type), sizeof ((*intern->array).type), &(intern->pos), sizeof (intern->pos), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc)))\n    return spl_array_skip_protected(intern, aht);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.0599602837094029, -9.0599602837094029, -9.689297697709403, -8.9314095977094, -9.689297697709403, -9.689297697709403, -8.9314095977094, -8.9314095977094, -8.9314095977094, -9.4006695977094, -9.4006695977094, -9.4006695977094, -9.4006695977094, -9.4006695977094, -9.689297697709403, -9.689297697709403, -8.9314095977094, -8.9314095977094]
								}]
						}]
				}, {
					"line":	852,
					"switches":	[{
							"switch":	96,
							"types":	[[], [], [], [], [], [], [], [], [], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [], [], [], [], [], []],
							"begin_line":	853,
							"begin_column":	0,
							"end_line":	853,
							"end_column":	0,
							"patch_codes":	["(aht)->nApplyCount++", "(aht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_efree(((intern)->debug_info))", "_zval_copy_ctor(((intern)->retval))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "convert_to_long((intern)->retval)", "memset((intern), 0, sizeof(spl_array_object))", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_move_forward_ex((aht), &intern->pos)", "zend_hash_move_forward_ex(aht, &(intern)->pos)", "zend_object_std_dtor(&(intern)->std)", "zval_addref_p((intern)->array)", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_update_pos(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_hash_move_forward_ex(aht, &intern->pos)", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	2,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	3,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	4,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	5,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	6,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	7,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	8,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	9,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	10,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	11,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	12,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	13,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	14,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	15,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	16,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	17,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	18,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	19,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	20,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	21,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	22,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	23,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	24,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	25,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	26,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	27,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	28,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	29,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	30,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	31,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	32,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	33,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	34,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	35,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	36,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	37,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	38,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	39,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	40,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	41,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	42,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	43,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	44,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	45,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	46,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	47,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	48,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	49,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	50,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	51,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	52,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	53,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	54,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	55,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	56,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	57,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	58,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	59,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	60,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	61,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	62,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	63,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	64,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	65,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	66,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	67,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	68,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	69,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	70,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	71,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	72,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	73,
									"scores":	[-7.8111455177094022]
								}, {
									"case":	74,
									"scores":	[-7.8111455177094022]
								}]
						}, {
							"switch":	97,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	853,
							"begin_column":	2,
							"end_line":	857,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L853\", 18, &(intern), sizeof (intern), &(intern->array), sizeof (intern->array), &((*intern->array).type), sizeof ((*intern->array).type), &(aht), sizeof (aht), &(intern->pos), sizeof (intern->pos), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc))) {\n    return spl_array_skip_protected(intern, aht);\n} else {\n    return (zend_hash_get_current_key_type_ex(aht, &intern->pos) == 3 ? -1 : 0);\n}\n", "if (((*intern->array).type == 5) && !__is_neg(\"\", \"L853\", 18, &(intern), sizeof (intern), &(intern->array), sizeof (intern->array), &((*intern->array).type), sizeof ((*intern->array).type), &(aht), sizeof (aht), &(intern->pos), sizeof (intern->pos), &(intern->retval), sizeof (intern->retval), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((*intern->array).refcount__gc), sizeof ((*intern->array).refcount__gc), &((*intern->array).is_ref__gc), sizeof ((*intern->array).is_ref__gc))) {\n    return spl_array_skip_protected(intern, aht);\n} else {\n    return (zend_hash_get_current_key_type_ex(aht, &intern->pos) == 3 ? -1 : 0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.8523397421281445, -1.8451548196281453, -0.16166271962814482, -2.5031862516281445, -2.3930113396281447, -3.0435408196281455, -2.2856527196281453, -2.2856527196281453, -2.2856527196281453, -2.7549127196281455, -2.7549127196281455, -2.7549127196281455, -2.7549127196281455, -2.7549127196281455, -3.0435408196281455, -3.0435408196281455, -2.2856527196281453, -2.2856527196281453]
								}, {
									"case":	2,
									"scores":	[-4.4284161079281459, -3.421231185428145, -1.7377390854281463, -4.0792626174281459, -3.9690877054281457, -4.6196171854281456, -3.8617290854281454, -3.8617290854281454, -3.8617290854281454, -4.3309890854281452, -4.3309890854281452, -4.3309890854281452, -4.3309890854281452, -4.3309890854281452, -4.6196171854281456, -4.6196171854281456, -3.8617290854281454, -3.8617290854281454]
								}]
						}]
				}, {
					"line":	1050,
					"switches":	[]
				}, {
					"line":	1051,
					"switches":	[{
							"switch":	102,
							"types":	[[], [], [], [], [269], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], [], [], [], [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], [], [], [], [], [], []],
							"begin_line":	1052,
							"begin_column":	1,
							"end_line":	1052,
							"end_column":	1,
							"patch_codes":	["memset(&((**array)).is_ref__gc, 0, sizeof (*(&((**array)).is_ref__gc)))", "memset(&((**array)).refcount__gc, 0, sizeof (*(&((**array)).refcount__gc)))", "memset(&((**array)).type, 0, sizeof (*(&((**array)).type)))", "memset(&((**array)).value, 0, sizeof (*(&((**array)).value)))", "memset(&((**array)).value.dval, 0, sizeof (*(&((**array)).value.dval)))", "memset(&((**array)).value.ht, 0, sizeof (*(&((**array)).value.ht)))", "memset(&((**array)).value.lval, 0, sizeof (*(&((**array)).value.lval)))", "memset(&((**array)).value.obj, 0, sizeof (*(&((**array)).value.obj)))", "memset(&((**array)).value.obj.handle, 0, sizeof (*(&((**array)).value.obj.handle)))", "memset(&((**array)).value.obj.handlers, 0, sizeof (*(&((**array)).value.obj.handlers)))", "memset(&((**array)).value.obj.handlers->add_ref, 0, sizeof (*(&((**array)).value.obj.handlers->add_ref)))", "memset(&((**array)).value.obj.handlers->call_method, 0, sizeof (*(&((**array)).value.obj.handlers->call_method)))", "memset(&((**array)).value.obj.handlers->cast_object, 0, sizeof (*(&((**array)).value.obj.handlers->cast_object)))", "memset(&((**array)).value.obj.handlers->clone_obj, 0, sizeof (*(&((**array)).value.obj.handlers->clone_obj)))", "memset(&((**array)).value.obj.handlers->compare_objects, 0, sizeof (*(&((**array)).value.obj.handlers->compare_objects)))", "memset(&((**array)).value.obj.handlers->count_elements, 0, sizeof (*(&((**array)).value.obj.handlers->count_elements)))", "memset(&((**array)).value.obj.handlers->del_ref, 0, sizeof (*(&((**array)).value.obj.handlers->del_ref)))", "memset(&((**array)).value.obj.handlers->get, 0, sizeof (*(&((**array)).value.obj.handlers->get)))", "memset(&((**array)).value.obj.handlers->get_class_entry, 0, sizeof (*(&((**array)).value.obj.handlers->get_class_entry)))", "memset(&((**array)).value.obj.handlers->get_class_name, 0, sizeof (*(&((**array)).value.obj.handlers->get_class_name)))", "memset(&((**array)).value.obj.handlers->get_closure, 0, sizeof (*(&((**array)).value.obj.handlers->get_closure)))", "memset(&((**array)).value.obj.handlers->get_constructor, 0, sizeof (*(&((**array)).value.obj.handlers->get_constructor)))", "memset(&((**array)).value.obj.handlers->get_debug_info, 0, sizeof (*(&((**array)).value.obj.handlers->get_debug_info)))", "memset(&((**array)).value.obj.handlers->get_method, 0, sizeof (*(&((**array)).value.obj.handlers->get_method)))", "memset(&((**array)).value.obj.handlers->get_properties, 0, sizeof (*(&((**array)).value.obj.handlers->get_properties)))", "memset(&((**array)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(&((**array)).value.obj.handlers->get_property_ptr_ptr)))", "memset(&((**array)).value.obj.handlers->has_dimension, 0, sizeof (*(&((**array)).value.obj.handlers->has_dimension)))", "memset(&((**array)).value.obj.handlers->has_property, 0, sizeof (*(&((**array)).value.obj.handlers->has_property)))", "memset(&((**array)).value.obj.handlers->read_dimension, 0, sizeof (*(&((**array)).value.obj.handlers->read_dimension)))", "memset(&((**array)).value.obj.handlers->read_property, 0, sizeof (*(&((**array)).value.obj.handlers->read_property)))", "memset(&((**array)).value.obj.handlers->set, 0, sizeof (*(&((**array)).value.obj.handlers->set)))", "memset(&((**array)).value.obj.handlers->unset_dimension, 0, sizeof (*(&((**array)).value.obj.handlers->unset_dimension)))", "memset(&((**array)).value.obj.handlers->unset_property, 0, sizeof (*(&((**array)).value.obj.handlers->unset_property)))", "memset(&((**array)).value.obj.handlers->write_dimension, 0, sizeof (*(&((**array)).value.obj.handlers->write_dimension)))", "memset(&((**array)).value.obj.handlers->write_property, 0, sizeof (*(&((**array)).value.obj.handlers->write_property)))", "memset(&((**array)).value.str, 0, sizeof (*(&((**array)).value.str)))", "memset(&(**array), 0, sizeof (*(&(**array))))", "memset(&(**array).is_ref__gc, 0, sizeof (*(&(**array).is_ref__gc)))", "memset(&(**array).refcount__gc, 0, sizeof (*(&(**array).refcount__gc)))", "memset(&(**array).type, 0, sizeof (*(&(**array).type)))", "memset(&(**array).value, 0, sizeof (*(&(**array).value)))", "memset(&(**array).value.dval, 0, sizeof (*(&(**array).value.dval)))", "memset(&(**array).value.ht, 0, sizeof (*(&(**array).value.ht)))", "memset(&(**array).value.lval, 0, sizeof (*(&(**array).value.lval)))", "memset(&(**array).value.obj, 0, sizeof (*(&(**array).value.obj)))", "memset(&(**array).value.obj.handle, 0, sizeof (*(&(**array).value.obj.handle)))", "memset(&(**array).value.obj.handlers, 0, sizeof (*(&(**array).value.obj.handlers)))", "memset(&(**array).value.str, 0, sizeof (*(&(**array).value.str)))", "memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&std_object_handlers, 0, sizeof (*(&std_object_handlers)))", "memset(&std_object_handlers.add_ref, 0, sizeof (*(&std_object_handlers.add_ref)))", "memset(&std_object_handlers.call_method, 0, sizeof (*(&std_object_handlers.call_method)))", "memset(&std_object_handlers.cast_object, 0, sizeof (*(&std_object_handlers.cast_object)))", "memset(&std_object_handlers.clone_obj, 0, sizeof (*(&std_object_handlers.clone_obj)))", "memset(&std_object_handlers.compare_objects, 0, sizeof (*(&std_object_handlers.compare_objects)))", "memset(&std_object_handlers.count_elements, 0, sizeof (*(&std_object_handlers.count_elements)))", "memset(&std_object_handlers.del_ref, 0, sizeof (*(&std_object_handlers.del_ref)))", "memset(&std_object_handlers.get, 0, sizeof (*(&std_object_handlers.get)))", "memset(&std_object_handlers.get_class_entry, 0, sizeof (*(&std_object_handlers.get_class_entry)))", "memset(&std_object_handlers.get_class_name, 0, sizeof (*(&std_object_handlers.get_class_name)))", "memset(&std_object_handlers.get_closure, 0, sizeof (*(&std_object_handlers.get_closure)))", "memset(&std_object_handlers.get_constructor, 0, sizeof (*(&std_object_handlers.get_constructor)))", "memset(&std_object_handlers.get_debug_info, 0, sizeof (*(&std_object_handlers.get_debug_info)))", "memset(&std_object_handlers.get_method, 0, sizeof (*(&std_object_handlers.get_method)))", "memset(&std_object_handlers.get_properties, 0, sizeof (*(&std_object_handlers.get_properties)))", "memset(&std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(&std_object_handlers.get_property_ptr_ptr)))", "memset(&std_object_handlers.has_dimension, 0, sizeof (*(&std_object_handlers.has_dimension)))", "memset(&std_object_handlers.has_property, 0, sizeof (*(&std_object_handlers.has_property)))", "memset(&std_object_handlers.read_dimension, 0, sizeof (*(&std_object_handlers.read_dimension)))", "memset(&std_object_handlers.read_property, 0, sizeof (*(&std_object_handlers.read_property)))", "memset(&std_object_handlers.set, 0, sizeof (*(&std_object_handlers.set)))", "memset(&std_object_handlers.unset_dimension, 0, sizeof (*(&std_object_handlers.unset_dimension)))", "memset(&std_object_handlers.unset_property, 0, sizeof (*(&std_object_handlers.unset_property)))", "memset(&std_object_handlers.write_dimension, 0, sizeof (*(&std_object_handlers.write_dimension)))", "memset(&std_object_handlers.write_property, 0, sizeof (*(&std_object_handlers.write_property)))", "memset(((**array)).value.ht, 0, sizeof (*(((**array)).value.ht)))", "memset(((**array)).value.obj.handlers, 0, sizeof (*(((**array)).value.obj.handlers)))", "memset(((**array)).value.obj.handlers->add_ref, 0, sizeof (*(((**array)).value.obj.handlers->add_ref)))", "memset(((**array)).value.obj.handlers->call_method, 0, sizeof (*(((**array)).value.obj.handlers->call_method)))", "memset(((**array)).value.obj.handlers->cast_object, 0, sizeof (*(((**array)).value.obj.handlers->cast_object)))", "memset(((**array)).value.obj.handlers->clone_obj, 0, sizeof (*(((**array)).value.obj.handlers->clone_obj)))", "memset(((**array)).value.obj.handlers->compare_objects, 0, sizeof (*(((**array)).value.obj.handlers->compare_objects)))", "memset(((**array)).value.obj.handlers->count_elements, 0, sizeof (*(((**array)).value.obj.handlers->count_elements)))", "memset(((**array)).value.obj.handlers->del_ref, 0, sizeof (*(((**array)).value.obj.handlers->del_ref)))", "memset(((**array)).value.obj.handlers->get, 0, sizeof (*(((**array)).value.obj.handlers->get)))", "memset(((**array)).value.obj.handlers->get_class_entry, 0, sizeof (*(((**array)).value.obj.handlers->get_class_entry)))", "memset(((**array)).value.obj.handlers->get_class_name, 0, sizeof (*(((**array)).value.obj.handlers->get_class_name)))", "memset(((**array)).value.obj.handlers->get_closure, 0, sizeof (*(((**array)).value.obj.handlers->get_closure)))", "memset(((**array)).value.obj.handlers->get_constructor, 0, sizeof (*(((**array)).value.obj.handlers->get_constructor)))", "memset(((**array)).value.obj.handlers->get_debug_info, 0, sizeof (*(((**array)).value.obj.handlers->get_debug_info)))", "memset(((**array)).value.obj.handlers->get_method, 0, sizeof (*(((**array)).value.obj.handlers->get_method)))", "memset(((**array)).value.obj.handlers->get_properties, 0, sizeof (*(((**array)).value.obj.handlers->get_properties)))", "memset(((**array)).value.obj.handlers->get_property_ptr_ptr, 0, sizeof (*(((**array)).value.obj.handlers->get_property_ptr_ptr)))", "memset(((**array)).value.obj.handlers->has_dimension, 0, sizeof (*(((**array)).value.obj.handlers->has_dimension)))", "memset(((**array)).value.obj.handlers->has_property, 0, sizeof (*(((**array)).value.obj.handlers->has_property)))", "memset(((**array)).value.obj.handlers->read_dimension, 0, sizeof (*(((**array)).value.obj.handlers->read_dimension)))", "memset(((**array)).value.obj.handlers->read_property, 0, sizeof (*(((**array)).value.obj.handlers->read_property)))", "memset(((**array)).value.obj.handlers->set, 0, sizeof (*(((**array)).value.obj.handlers->set)))", "memset(((**array)).value.obj.handlers->unset_dimension, 0, sizeof (*(((**array)).value.obj.handlers->unset_dimension)))", "memset(((**array)).value.obj.handlers->unset_property, 0, sizeof (*(((**array)).value.obj.handlers->unset_property)))", "memset(((**array)).value.obj.handlers->write_dimension, 0, sizeof (*(((**array)).value.obj.handlers->write_dimension)))", "memset(((**array)).value.obj.handlers->write_property, 0, sizeof (*(((**array)).value.obj.handlers->write_property)))", "memset((**array).value.ht, 0, sizeof (*((**array).value.ht)))", "memset((**array).value.obj.handlers, 0, sizeof (*((**array).value.obj.handlers)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(std_object_handlers.add_ref, 0, sizeof (*(std_object_handlers.add_ref)))", "memset(std_object_handlers.call_method, 0, sizeof (*(std_object_handlers.call_method)))", "memset(std_object_handlers.cast_object, 0, sizeof (*(std_object_handlers.cast_object)))", "memset(std_object_handlers.clone_obj, 0, sizeof (*(std_object_handlers.clone_obj)))", "memset(std_object_handlers.compare_objects, 0, sizeof (*(std_object_handlers.compare_objects)))", "memset(std_object_handlers.count_elements, 0, sizeof (*(std_object_handlers.count_elements)))", "memset(std_object_handlers.del_ref, 0, sizeof (*(std_object_handlers.del_ref)))", "memset(std_object_handlers.get, 0, sizeof (*(std_object_handlers.get)))", "memset(std_object_handlers.get_class_entry, 0, sizeof (*(std_object_handlers.get_class_entry)))", "memset(std_object_handlers.get_class_name, 0, sizeof (*(std_object_handlers.get_class_name)))", "memset(std_object_handlers.get_closure, 0, sizeof (*(std_object_handlers.get_closure)))", "memset(std_object_handlers.get_constructor, 0, sizeof (*(std_object_handlers.get_constructor)))", "memset(std_object_handlers.get_debug_info, 0, sizeof (*(std_object_handlers.get_debug_info)))", "memset(std_object_handlers.get_method, 0, sizeof (*(std_object_handlers.get_method)))", "memset(std_object_handlers.get_properties, 0, sizeof (*(std_object_handlers.get_properties)))", "memset(std_object_handlers.get_property_ptr_ptr, 0, sizeof (*(std_object_handlers.get_property_ptr_ptr)))", "memset(std_object_handlers.has_dimension, 0, sizeof (*(std_object_handlers.has_dimension)))", "memset(std_object_handlers.has_property, 0, sizeof (*(std_object_handlers.has_property)))", "memset(std_object_handlers.read_dimension, 0, sizeof (*(std_object_handlers.read_dimension)))", "memset(std_object_handlers.read_property, 0, sizeof (*(std_object_handlers.read_property)))", "memset(std_object_handlers.set, 0, sizeof (*(std_object_handlers.set)))", "memset(std_object_handlers.unset_dimension, 0, sizeof (*(std_object_handlers.unset_dimension)))", "memset(std_object_handlers.unset_property, 0, sizeof (*(std_object_handlers.unset_property)))", "memset(std_object_handlers.write_dimension, 0, sizeof (*(std_object_handlers.write_dimension)))", "memset(std_object_handlers.write_property, 0, sizeof (*(std_object_handlers.write_property)))", "_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor_func((object))", "_zval_dtor(((object)))", "_zval_dtor_func((object))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&*(array)))", "ar_flags = (-33554433)", "ar_flags = (-65536)", "ar_flags = (-67108865)", "ar_flags = (0)", "ar_flags = (1)", "ar_flags = (33554432)", "ar_flags = (4)", "ar_flags = (5)", "ar_flags = (65535)", "ar_flags = (67108864)", "ar_flags = (ar_flags)", "ar_flags = (intern)->ar_flags & ~4294901760U", "convert_to_boolean((object))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_zval_check_possible_root(((object)))", "gc_zval_possible_root((object))", "i_zval_ptr_dtor((object))", "intern->array = (object)", "intern->array = *(array)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_handler_ArrayObject.get_properties = (handler)", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**(array)))->name, intern->std.ce->name)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, (intern)->std.ce->name)", "zval_add_ref(&(object))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_delref_p(((object)))", "zval_delref_p(*((array)))", "zval_set_isref_p((object))", "zval_set_isref_p(*((array)))", "zval_set_refcount_p((object), 1)", "zval_unset_isref_p((object))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_ptr_dtor((&intern->array))", "exit(1)", "intern->array = *array", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)", "if (__is_neg(\"\", \"L1052\", 103, &(handler), sizeof (handler), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(intern), sizeof (intern), &(array), sizeof (array), &(((**array)).value.obj.handlers), sizeof (((**array)).value.obj.handlers), &(((**array)).value.obj.handlers->get_properties), sizeof (((**array)).value.obj.handlers->get_properties), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &((**array).type), sizeof ((**array).type), &(intern->array), sizeof (intern->array), &(ar_flags), sizeof (ar_flags), &(intern->ar_flags), sizeof (intern->ar_flags), &(object), sizeof (object), &(just_array), sizeof (just_array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((**array).refcount__gc), sizeof ((**array).refcount__gc), &((**array).is_ref__gc), sizeof ((**array).is_ref__gc), &(((**array)).refcount__gc), sizeof (((**array)).refcount__gc), &(((**array)).type), sizeof (((**array)).type), &(((**array)).is_ref__gc), sizeof (((**array)).is_ref__gc), &(((**array)).value.obj.handle), sizeof (((**array)).value.obj.handle), &(((**array)).value.obj.handlers->add_ref), sizeof (((**array)).value.obj.handlers->add_ref), &(((**array)).value.obj.handlers->del_ref), sizeof (((**array)).value.obj.handlers->del_ref), &(((**array)).value.obj.handlers->clone_obj), sizeof (((**array)).value.obj.handlers->clone_obj), &(((**array)).value.obj.handlers->read_property), sizeof (((**array)).value.obj.handlers->read_property), &(((**array)).value.obj.handlers->write_property), sizeof (((**array)).value.obj.handlers->write_property), &(((**array)).value.obj.handlers->read_dimension), sizeof (((**array)).value.obj.handlers->read_dimension), &(((**array)).value.obj.handlers->write_dimension), sizeof (((**array)).value.obj.handlers->write_dimension), &(((**array)).value.obj.handlers->get_property_ptr_ptr), sizeof (((**array)).value.obj.handlers->get_property_ptr_ptr), &(((**array)).value.obj.handlers->get), sizeof (((**array)).value.obj.handlers->get), &(((**array)).value.obj.handlers->set), sizeof (((**array)).value.obj.handlers->set), &(((**array)).value.obj.handlers->has_property), sizeof (((**array)).value.obj.handlers->has_property), &(((**array)).value.obj.handlers->unset_property), sizeof (((**array)).value.obj.handlers->unset_property), &(((**array)).value.obj.handlers->has_dimension), sizeof (((**array)).value.obj.handlers->has_dimension), &(((**array)).value.obj.handlers->unset_dimension), sizeof (((**array)).value.obj.handlers->unset_dimension), &(((**array)).value.obj.handlers->get_method), sizeof (((**array)).value.obj.handlers->get_method), &(((**array)).value.obj.handlers->call_method), sizeof (((**array)).value.obj.handlers->call_method), &(((**array)).value.obj.handlers->get_constructor), sizeof (((**array)).value.obj.handlers->get_constructor), &(((**array)).value.obj.handlers->get_class_entry), sizeof (((**array)).value.obj.handlers->get_class_entry), &(((**array)).value.obj.handlers->get_class_name), sizeof (((**array)).value.obj.handlers->get_class_name), &(((**array)).value.obj.handlers->compare_objects), sizeof (((**array)).value.obj.handlers->compare_objects), &(((**array)).value.obj.handlers->cast_object), sizeof (((**array)).value.obj.handlers->cast_object), &(((**array)).value.obj.handlers->count_elements), sizeof (((**array)).value.obj.handlers->count_elements), &(((**array)).value.obj.handlers->get_debug_info), sizeof (((**array)).value.obj.handlers->get_debug_info), &(((**array)).value.obj.handlers->get_closure), sizeof (((**array)).value.obj.handlers->get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.50817293238104]
								}, {
									"case":	2,
									"scores":	[-9.50817293238104]
								}, {
									"case":	3,
									"scores":	[-9.50817293238104]
								}, {
									"case":	4,
									"scores":	[-9.50817293238104]
								}, {
									"case":	5,
									"scores":	[-9.50817293238104]
								}, {
									"case":	6,
									"scores":	[-9.50817293238104]
								}, {
									"case":	7,
									"scores":	[-9.50817293238104]
								}, {
									"case":	8,
									"scores":	[-9.50817293238104]
								}, {
									"case":	9,
									"scores":	[-9.50817293238104]
								}, {
									"case":	10,
									"scores":	[-9.50817293238104]
								}, {
									"case":	11,
									"scores":	[-9.50817293238104]
								}, {
									"case":	12,
									"scores":	[-9.50817293238104]
								}, {
									"case":	13,
									"scores":	[-9.50817293238104]
								}, {
									"case":	14,
									"scores":	[-9.50817293238104]
								}, {
									"case":	15,
									"scores":	[-9.50817293238104]
								}, {
									"case":	16,
									"scores":	[-9.50817293238104]
								}, {
									"case":	17,
									"scores":	[-9.50817293238104]
								}, {
									"case":	18,
									"scores":	[-9.50817293238104]
								}, {
									"case":	19,
									"scores":	[-9.50817293238104]
								}, {
									"case":	20,
									"scores":	[-9.50817293238104]
								}, {
									"case":	21,
									"scores":	[-9.50817293238104]
								}, {
									"case":	22,
									"scores":	[-9.50817293238104]
								}, {
									"case":	23,
									"scores":	[-9.50817293238104]
								}, {
									"case":	24,
									"scores":	[-9.50817293238104]
								}, {
									"case":	25,
									"scores":	[-9.50817293238104]
								}, {
									"case":	26,
									"scores":	[-9.50817293238104]
								}, {
									"case":	27,
									"scores":	[-9.50817293238104]
								}, {
									"case":	28,
									"scores":	[-9.50817293238104]
								}, {
									"case":	29,
									"scores":	[-9.50817293238104]
								}, {
									"case":	30,
									"scores":	[-9.50817293238104]
								}, {
									"case":	31,
									"scores":	[-9.50817293238104]
								}, {
									"case":	32,
									"scores":	[-9.50817293238104]
								}, {
									"case":	33,
									"scores":	[-9.50817293238104]
								}, {
									"case":	34,
									"scores":	[-9.50817293238104]
								}, {
									"case":	35,
									"scores":	[-9.50817293238104]
								}, {
									"case":	36,
									"scores":	[-9.50817293238104]
								}, {
									"case":	37,
									"scores":	[-9.50817293238104]
								}, {
									"case":	38,
									"scores":	[-9.50817293238104]
								}, {
									"case":	39,
									"scores":	[-9.50817293238104]
								}, {
									"case":	40,
									"scores":	[-9.50817293238104]
								}, {
									"case":	41,
									"scores":	[-9.50817293238104]
								}, {
									"case":	42,
									"scores":	[-9.50817293238104]
								}, {
									"case":	43,
									"scores":	[-9.50817293238104]
								}, {
									"case":	44,
									"scores":	[-9.50817293238104]
								}, {
									"case":	45,
									"scores":	[-9.50817293238104]
								}, {
									"case":	46,
									"scores":	[-9.50817293238104]
								}, {
									"case":	47,
									"scores":	[-9.50817293238104]
								}, {
									"case":	48,
									"scores":	[-9.50817293238104]
								}, {
									"case":	49,
									"scores":	[-9.50817293238104]
								}, {
									"case":	50,
									"scores":	[-9.50817293238104]
								}, {
									"case":	51,
									"scores":	[-9.50817293238104]
								}, {
									"case":	52,
									"scores":	[-9.50817293238104]
								}, {
									"case":	53,
									"scores":	[-9.50817293238104]
								}, {
									"case":	54,
									"scores":	[-9.50817293238104]
								}, {
									"case":	55,
									"scores":	[-9.50817293238104]
								}, {
									"case":	56,
									"scores":	[-9.50817293238104]
								}, {
									"case":	57,
									"scores":	[-9.50817293238104]
								}, {
									"case":	58,
									"scores":	[-9.50817293238104]
								}, {
									"case":	59,
									"scores":	[-9.50817293238104]
								}, {
									"case":	60,
									"scores":	[-9.50817293238104]
								}, {
									"case":	61,
									"scores":	[-9.50817293238104]
								}, {
									"case":	62,
									"scores":	[-9.50817293238104]
								}, {
									"case":	63,
									"scores":	[-9.50817293238104]
								}, {
									"case":	64,
									"scores":	[-9.50817293238104]
								}, {
									"case":	65,
									"scores":	[-9.50817293238104]
								}, {
									"case":	66,
									"scores":	[-9.50817293238104]
								}, {
									"case":	67,
									"scores":	[-9.50817293238104]
								}, {
									"case":	68,
									"scores":	[-9.50817293238104]
								}, {
									"case":	69,
									"scores":	[-9.50817293238104]
								}, {
									"case":	70,
									"scores":	[-9.50817293238104]
								}, {
									"case":	71,
									"scores":	[-9.50817293238104]
								}, {
									"case":	72,
									"scores":	[-9.50817293238104]
								}, {
									"case":	73,
									"scores":	[-9.50817293238104]
								}, {
									"case":	74,
									"scores":	[-9.50817293238104]
								}, {
									"case":	75,
									"scores":	[-9.50817293238104]
								}, {
									"case":	76,
									"scores":	[-9.50817293238104]
								}, {
									"case":	77,
									"scores":	[-9.50817293238104]
								}, {
									"case":	78,
									"scores":	[-9.50817293238104]
								}, {
									"case":	79,
									"scores":	[-9.50817293238104]
								}, {
									"case":	80,
									"scores":	[-9.50817293238104]
								}, {
									"case":	81,
									"scores":	[-9.50817293238104]
								}, {
									"case":	82,
									"scores":	[-9.50817293238104]
								}, {
									"case":	83,
									"scores":	[-9.50817293238104]
								}, {
									"case":	84,
									"scores":	[-9.50817293238104]
								}, {
									"case":	85,
									"scores":	[-9.50817293238104]
								}, {
									"case":	86,
									"scores":	[-9.50817293238104]
								}, {
									"case":	87,
									"scores":	[-9.50817293238104]
								}, {
									"case":	88,
									"scores":	[-9.50817293238104]
								}, {
									"case":	89,
									"scores":	[-9.50817293238104]
								}, {
									"case":	90,
									"scores":	[-9.50817293238104]
								}, {
									"case":	91,
									"scores":	[-9.50817293238104]
								}, {
									"case":	92,
									"scores":	[-9.50817293238104]
								}, {
									"case":	93,
									"scores":	[-9.50817293238104]
								}, {
									"case":	94,
									"scores":	[-9.50817293238104]
								}, {
									"case":	95,
									"scores":	[-9.50817293238104]
								}, {
									"case":	96,
									"scores":	[-9.50817293238104]
								}, {
									"case":	97,
									"scores":	[-9.50817293238104]
								}, {
									"case":	98,
									"scores":	[-9.50817293238104]
								}, {
									"case":	99,
									"scores":	[-9.50817293238104]
								}, {
									"case":	100,
									"scores":	[-9.50817293238104]
								}, {
									"case":	101,
									"scores":	[-9.50817293238104]
								}, {
									"case":	102,
									"scores":	[-9.50817293238104]
								}, {
									"case":	103,
									"scores":	[-9.50817293238104]
								}, {
									"case":	104,
									"scores":	[-9.50817293238104]
								}, {
									"case":	105,
									"scores":	[-9.50817293238104]
								}, {
									"case":	106,
									"scores":	[-9.50817293238104]
								}, {
									"case":	107,
									"scores":	[-9.50817293238104]
								}, {
									"case":	108,
									"scores":	[-9.50817293238104]
								}, {
									"case":	109,
									"scores":	[-9.50817293238104]
								}, {
									"case":	110,
									"scores":	[-9.50817293238104]
								}, {
									"case":	111,
									"scores":	[-9.50817293238104]
								}, {
									"case":	112,
									"scores":	[-9.50817293238104]
								}, {
									"case":	113,
									"scores":	[-9.50817293238104]
								}, {
									"case":	114,
									"scores":	[-9.50817293238104]
								}, {
									"case":	115,
									"scores":	[-9.50817293238104]
								}, {
									"case":	116,
									"scores":	[-9.50817293238104]
								}, {
									"case":	117,
									"scores":	[-9.50817293238104]
								}, {
									"case":	118,
									"scores":	[-9.50817293238104]
								}, {
									"case":	119,
									"scores":	[-9.50817293238104]
								}, {
									"case":	120,
									"scores":	[-9.50817293238104]
								}, {
									"case":	121,
									"scores":	[-9.50817293238104]
								}, {
									"case":	122,
									"scores":	[-9.50817293238104]
								}, {
									"case":	123,
									"scores":	[-9.50817293238104]
								}, {
									"case":	124,
									"scores":	[-9.50817293238104]
								}, {
									"case":	125,
									"scores":	[-9.50817293238104]
								}, {
									"case":	126,
									"scores":	[-9.50817293238104]
								}, {
									"case":	127,
									"scores":	[-9.50817293238104]
								}, {
									"case":	128,
									"scores":	[-9.50817293238104]
								}, {
									"case":	129,
									"scores":	[-9.50817293238104]
								}, {
									"case":	130,
									"scores":	[-9.50817293238104]
								}, {
									"case":	131,
									"scores":	[-9.50817293238104]
								}, {
									"case":	132,
									"scores":	[-9.50817293238104]
								}, {
									"case":	133,
									"scores":	[-9.50817293238104]
								}, {
									"case":	134,
									"scores":	[-9.50817293238104]
								}, {
									"case":	135,
									"scores":	[-9.50817293238104]
								}, {
									"case":	136,
									"scores":	[-9.50817293238104]
								}, {
									"case":	137,
									"scores":	[-9.50817293238104]
								}, {
									"case":	138,
									"scores":	[-9.50817293238104]
								}, {
									"case":	139,
									"scores":	[-9.50817293238104]
								}, {
									"case":	140,
									"scores":	[-9.50817293238104]
								}, {
									"case":	141,
									"scores":	[-9.50817293238104]
								}, {
									"case":	142,
									"scores":	[-9.50817293238104]
								}, {
									"case":	143,
									"scores":	[-9.50817293238104]
								}, {
									"case":	144,
									"scores":	[-9.50817293238104]
								}, {
									"case":	145,
									"scores":	[-9.50817293238104]
								}, {
									"case":	146,
									"scores":	[-9.50817293238104]
								}, {
									"case":	147,
									"scores":	[-9.50817293238104]
								}, {
									"case":	148,
									"scores":	[-9.50817293238104]
								}, {
									"case":	149,
									"scores":	[-9.50817293238104]
								}, {
									"case":	150,
									"scores":	[-9.50817293238104]
								}, {
									"case":	151,
									"scores":	[-9.50817293238104]
								}, {
									"case":	152,
									"scores":	[-9.50817293238104]
								}, {
									"case":	153,
									"scores":	[-9.50817293238104]
								}, {
									"case":	154,
									"scores":	[-9.50817293238104]
								}, {
									"case":	155,
									"scores":	[-9.50817293238104]
								}, {
									"case":	156,
									"scores":	[-9.50817293238104]
								}, {
									"case":	157,
									"scores":	[-9.50817293238104]
								}, {
									"case":	158,
									"scores":	[-9.50817293238104]
								}, {
									"case":	159,
									"scores":	[-9.50817293238104]
								}, {
									"case":	160,
									"scores":	[-9.50817293238104]
								}, {
									"case":	161,
									"scores":	[-9.50817293238104]
								}, {
									"case":	162,
									"scores":	[-9.50817293238104]
								}, {
									"case":	163,
									"scores":	[-9.50817293238104]
								}, {
									"case":	164,
									"scores":	[-9.50817293238104]
								}, {
									"case":	165,
									"scores":	[-9.50817293238104]
								}, {
									"case":	166,
									"scores":	[-9.50817293238104]
								}, {
									"case":	167,
									"scores":	[-9.50817293238104]
								}, {
									"case":	168,
									"scores":	[-9.50817293238104]
								}, {
									"case":	169,
									"scores":	[-9.50817293238104]
								}, {
									"case":	170,
									"scores":	[-9.50817293238104]
								}, {
									"case":	171,
									"scores":	[-9.50817293238104]
								}, {
									"case":	172,
									"scores":	[-9.50817293238104]
								}, {
									"case":	173,
									"scores":	[-9.50817293238104]
								}, {
									"case":	174,
									"scores":	[-9.50817293238104]
								}, {
									"case":	175,
									"scores":	[-9.50817293238104]
								}, {
									"case":	176,
									"scores":	[-9.50817293238104]
								}, {
									"case":	177,
									"scores":	[-9.50817293238104]
								}, {
									"case":	178,
									"scores":	[-9.50817293238104]
								}, {
									"case":	179,
									"scores":	[-9.50817293238104]
								}, {
									"case":	180,
									"scores":	[-9.50817293238104]
								}, {
									"case":	181,
									"scores":	[-9.50817293238104]
								}, {
									"case":	182,
									"scores":	[-9.50817293238104]
								}, {
									"case":	183,
									"scores":	[-9.50817293238104]
								}, {
									"case":	184,
									"scores":	[-9.50817293238104]
								}, {
									"case":	185,
									"scores":	[-9.50817293238104]
								}, {
									"case":	186,
									"scores":	[-9.50817293238104]
								}, {
									"case":	187,
									"scores":	[-9.50817293238104]
								}, {
									"case":	188,
									"scores":	[-9.50817293238104]
								}, {
									"case":	189,
									"scores":	[-9.50817293238104]
								}, {
									"case":	190,
									"scores":	[-9.50817293238104]
								}, {
									"case":	191,
									"scores":	[-9.50817293238104]
								}, {
									"case":	192,
									"scores":	[-9.50817293238104]
								}, {
									"case":	193,
									"scores":	[-9.50817293238104]
								}, {
									"case":	194,
									"scores":	[-9.50817293238104]
								}, {
									"case":	195,
									"scores":	[-9.50817293238104]
								}, {
									"case":	196,
									"scores":	[-9.50817293238104]
								}, {
									"case":	197,
									"scores":	[-9.50817293238104]
								}, {
									"case":	198,
									"scores":	[-9.50817293238104]
								}, {
									"case":	199,
									"scores":	[-9.50817293238104]
								}, {
									"case":	200,
									"scores":	[-9.50817293238104]
								}, {
									"case":	201,
									"scores":	[-9.50817293238104]
								}, {
									"case":	202,
									"scores":	[-9.50817293238104]
								}, {
									"case":	203,
									"scores":	[-9.50817293238104]
								}, {
									"case":	204,
									"scores":	[-9.50817293238104]
								}, {
									"case":	205,
									"scores":	[-9.50817293238104]
								}, {
									"case":	206,
									"scores":	[-9.50817293238104]
								}, {
									"case":	207,
									"scores":	[-9.50817293238104]
								}, {
									"case":	208,
									"scores":	[-9.50817293238104]
								}, {
									"case":	209,
									"scores":	[-9.50817293238104]
								}, {
									"case":	210,
									"scores":	[-9.50817293238104]
								}, {
									"case":	211,
									"scores":	[-9.50817293238104]
								}, {
									"case":	212,
									"scores":	[-9.50817293238104]
								}, {
									"case":	213,
									"scores":	[-9.50817293238104]
								}, {
									"case":	214,
									"scores":	[-9.50817293238104]
								}, {
									"case":	215,
									"scores":	[-9.50817293238104]
								}, {
									"case":	216,
									"scores":	[-9.50817293238104]
								}, {
									"case":	217,
									"scores":	[-9.50817293238104]
								}, {
									"case":	218,
									"scores":	[-9.50817293238104]
								}, {
									"case":	219,
									"scores":	[-9.50817293238104]
								}, {
									"case":	220,
									"scores":	[-9.50817293238104]
								}, {
									"case":	221,
									"scores":	[-9.50817293238104]
								}, {
									"case":	222,
									"scores":	[-9.50817293238104]
								}, {
									"case":	223,
									"scores":	[-9.50817293238104]
								}, {
									"case":	224,
									"scores":	[-9.50817293238104]
								}, {
									"case":	225,
									"scores":	[-9.50817293238104]
								}, {
									"case":	226,
									"scores":	[-9.50817293238104]
								}, {
									"case":	227,
									"scores":	[-9.50817293238104]
								}, {
									"case":	228,
									"scores":	[-9.50817293238104]
								}, {
									"case":	229,
									"scores":	[-9.50817293238104]
								}, {
									"case":	230,
									"scores":	[-9.50817293238104]
								}, {
									"case":	231,
									"scores":	[-9.50817293238104]
								}, {
									"case":	232,
									"scores":	[-9.50817293238104]
								}, {
									"case":	233,
									"scores":	[-9.50817293238104]
								}, {
									"case":	234,
									"scores":	[-9.50817293238104]
								}, {
									"case":	235,
									"scores":	[-9.50817293238104]
								}, {
									"case":	236,
									"scores":	[-9.50817293238104]
								}, {
									"case":	237,
									"scores":	[-9.50817293238104]
								}, {
									"case":	238,
									"scores":	[-9.50817293238104]
								}, {
									"case":	239,
									"scores":	[-9.50817293238104]
								}, {
									"case":	240,
									"scores":	[-9.50817293238104]
								}, {
									"case":	241,
									"scores":	[-9.50817293238104]
								}, {
									"case":	242,
									"scores":	[-9.50817293238104]
								}, {
									"case":	243,
									"scores":	[-9.50817293238104]
								}, {
									"case":	244,
									"scores":	[-9.50817293238104]
								}, {
									"case":	245,
									"scores":	[-9.50817293238104]
								}, {
									"case":	246,
									"scores":	[-9.50817293238104]
								}, {
									"case":	247,
									"scores":	[-9.50817293238104]
								}, {
									"case":	248,
									"scores":	[-9.50817293238104]
								}, {
									"case":	249,
									"scores":	[-9.50817293238104]
								}, {
									"case":	250,
									"scores":	[-9.50817293238104]
								}, {
									"case":	251,
									"scores":	[-9.50817293238104]
								}, {
									"case":	252,
									"scores":	[-9.50817293238104]
								}, {
									"case":	253,
									"scores":	[-9.50817293238104]
								}, {
									"case":	254,
									"scores":	[-9.50817293238104]
								}, {
									"case":	255,
									"scores":	[-9.50817293238104]
								}, {
									"case":	256,
									"scores":	[-9.50817293238104]
								}, {
									"case":	257,
									"scores":	[-9.50817293238104]
								}, {
									"case":	258,
									"scores":	[-9.50817293238104]
								}, {
									"case":	259,
									"scores":	[-9.50817293238104]
								}, {
									"case":	260,
									"scores":	[-9.50817293238104]
								}, {
									"case":	261,
									"scores":	[-9.50817293238104]
								}, {
									"case":	262,
									"scores":	[-9.50817293238104]
								}, {
									"case":	263,
									"scores":	[-9.50817293238104]
								}, {
									"case":	264,
									"scores":	[-9.50817293238104]
								}, {
									"case":	265,
									"scores":	[-9.50817293238104]
								}, {
									"case":	266,
									"scores":	[-9.50817293238104]
								}, {
									"case":	267,
									"scores":	[-9.50817293238104]
								}, {
									"case":	268,
									"scores":	[-9.50817293238104]
								}, {
									"case":	269,
									"scores":	[-12.446445748381038, -13.260591922381039, -13.260591922381039, -13.436187438081038, -13.423679223381038, -14.075054916181038, -13.293752302381039, -12.129409281181038, -13.293752302381039, -13.539791216181039, -12.516706528381039, -13.293752302381039, -13.020330616181038, -12.516706528381039, -13.539791216181039, -13.539791216181039, -13.293752302381039, -13.293752302381039, -13.504641419381038, -13.504641419381038, -13.504641419381038, -13.504641419381038, -13.504641419381038, -13.539791216181039, -13.539791216181039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039, -13.293752302381039]
								}]
						}, {
							"switch":	103,
							"types":	[[6], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [4, 5], [], [3]],
							"begin_line":	1052,
							"begin_column":	3,
							"end_line":	1055,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L1052\", 108, &(intern), sizeof (intern), &(array), sizeof (array), &(handler), sizeof (handler), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &((**array).type), sizeof ((**array).type), &(intern->array), sizeof (intern->array), &(ar_flags), sizeof (ar_flags), &(intern->ar_flags), sizeof (intern->ar_flags), &(object), sizeof (object), &(just_array), sizeof (just_array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((**array).refcount__gc), sizeof ((**array).refcount__gc), &((**array).is_ref__gc), sizeof ((**array).is_ref__gc), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(spl_ce_InvalidArgumentException->type), sizeof (spl_ce_InvalidArgumentException->type), &(spl_ce_InvalidArgumentException->name), sizeof (spl_ce_InvalidArgumentException->name), &(spl_ce_InvalidArgumentException->name_length), sizeof (spl_ce_InvalidArgumentException->name_length), &(spl_ce_InvalidArgumentException->parent), sizeof (spl_ce_InvalidArgumentException->parent), &(spl_ce_InvalidArgumentException->refcount), sizeof (spl_ce_InvalidArgumentException->refcount), &(spl_ce_InvalidArgumentException->ce_flags), sizeof (spl_ce_InvalidArgumentException->ce_flags), &(spl_ce_InvalidArgumentException->default_properties_table), sizeof (spl_ce_InvalidArgumentException->default_properties_table), &(spl_ce_InvalidArgumentException->default_static_members_table), sizeof (spl_ce_InvalidArgumentException->default_static_members_table), &(spl_ce_InvalidArgumentException->static_members_table), sizeof (spl_ce_InvalidArgumentException->static_members_table), &(spl_ce_InvalidArgumentException->default_properties_count), sizeof (spl_ce_InvalidArgumentException->default_properties_count), &(spl_ce_InvalidArgumentException->default_static_members_count), sizeof (spl_ce_InvalidArgumentException->default_static_members_count), &(spl_ce_InvalidArgumentException->constructor), sizeof (spl_ce_InvalidArgumentException->constructor), &(spl_ce_InvalidArgumentException->destructor), sizeof (spl_ce_InvalidArgumentException->destructor), &(spl_ce_InvalidArgumentException->clone), sizeof (spl_ce_InvalidArgumentException->clone), &(spl_ce_InvalidArgumentException->__get), sizeof (spl_ce_InvalidArgumentException->__get), &(spl_ce_InvalidArgumentException->__set), sizeof (spl_ce_InvalidArgumentException->__set), &(spl_ce_InvalidArgumentException->__unset), sizeof (spl_ce_InvalidArgumentException->__unset), &(spl_ce_InvalidArgumentException->__isset), sizeof (spl_ce_InvalidArgumentException->__isset), &(spl_ce_InvalidArgumentException->__call), sizeof (spl_ce_InvalidArgumentException->__call), &(spl_ce_InvalidArgumentException->__callstatic), sizeof (spl_ce_InvalidArgumentException->__callstatic), &(spl_ce_InvalidArgumentException->__tostring), sizeof (spl_ce_InvalidArgumentException->__tostring), &(spl_ce_InvalidArgumentException->serialize_func), sizeof (spl_ce_InvalidArgumentException->serialize_func), &(spl_ce_InvalidArgumentException->unserialize_func), sizeof (spl_ce_InvalidArgumentException->unserialize_func), &(spl_ce_InvalidArgumentException->create_object), sizeof (spl_ce_InvalidArgumentException->create_object), &(spl_ce_InvalidArgumentException->get_iterator), sizeof (spl_ce_InvalidArgumentException->get_iterator), &(spl_ce_InvalidArgumentException->interface_gets_implemented), sizeof (spl_ce_InvalidArgumentException->interface_gets_implemented), &(spl_ce_InvalidArgumentException->get_static_method), sizeof (spl_ce_InvalidArgumentException->get_static_method), &(spl_ce_InvalidArgumentException->serialize), sizeof (spl_ce_InvalidArgumentException->serialize), &(spl_ce_InvalidArgumentException->unserialize), sizeof (spl_ce_InvalidArgumentException->unserialize), &(spl_ce_InvalidArgumentException->interfaces), sizeof (spl_ce_InvalidArgumentException->interfaces), &(spl_ce_InvalidArgumentException->num_interfaces), sizeof (spl_ce_InvalidArgumentException->num_interfaces), &(spl_ce_InvalidArgumentException->traits), sizeof (spl_ce_InvalidArgumentException->traits), &(spl_ce_InvalidArgumentException->num_traits), sizeof (spl_ce_InvalidArgumentException->num_traits), &(spl_ce_InvalidArgumentException->trait_aliases), sizeof (spl_ce_InvalidArgumentException->trait_aliases), &(spl_ce_InvalidArgumentException->trait_precedences), sizeof (spl_ce_InvalidArgumentException->trait_precedences))) {\n    zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n}\n", "if (((handler != std_object_handlers.get_properties && handler != spl_array_get_properties) || !spl_array_get_hash_table(intern, 0)) || __is_neg(\"\", \"L1052\", 108, &(intern), sizeof (intern), &(array), sizeof (array), &(handler), sizeof (handler), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &((**array).type), sizeof ((**array).type), &(intern->array), sizeof (intern->array), &(ar_flags), sizeof (ar_flags), &(intern->ar_flags), sizeof (intern->ar_flags), &(object), sizeof (object), &(just_array), sizeof (just_array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((**array).refcount__gc), sizeof ((**array).refcount__gc), &((**array).is_ref__gc), sizeof ((**array).is_ref__gc), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(spl_ce_InvalidArgumentException->type), sizeof (spl_ce_InvalidArgumentException->type), &(spl_ce_InvalidArgumentException->name), sizeof (spl_ce_InvalidArgumentException->name), &(spl_ce_InvalidArgumentException->name_length), sizeof (spl_ce_InvalidArgumentException->name_length), &(spl_ce_InvalidArgumentException->parent), sizeof (spl_ce_InvalidArgumentException->parent), &(spl_ce_InvalidArgumentException->refcount), sizeof (spl_ce_InvalidArgumentException->refcount), &(spl_ce_InvalidArgumentException->ce_flags), sizeof (spl_ce_InvalidArgumentException->ce_flags), &(spl_ce_InvalidArgumentException->default_properties_table), sizeof (spl_ce_InvalidArgumentException->default_properties_table), &(spl_ce_InvalidArgumentException->default_static_members_table), sizeof (spl_ce_InvalidArgumentException->default_static_members_table), &(spl_ce_InvalidArgumentException->static_members_table), sizeof (spl_ce_InvalidArgumentException->static_members_table), &(spl_ce_InvalidArgumentException->default_properties_count), sizeof (spl_ce_InvalidArgumentException->default_properties_count), &(spl_ce_InvalidArgumentException->default_static_members_count), sizeof (spl_ce_InvalidArgumentException->default_static_members_count), &(spl_ce_InvalidArgumentException->constructor), sizeof (spl_ce_InvalidArgumentException->constructor), &(spl_ce_InvalidArgumentException->destructor), sizeof (spl_ce_InvalidArgumentException->destructor), &(spl_ce_InvalidArgumentException->clone), sizeof (spl_ce_InvalidArgumentException->clone), &(spl_ce_InvalidArgumentException->__get), sizeof (spl_ce_InvalidArgumentException->__get), &(spl_ce_InvalidArgumentException->__set), sizeof (spl_ce_InvalidArgumentException->__set), &(spl_ce_InvalidArgumentException->__unset), sizeof (spl_ce_InvalidArgumentException->__unset), &(spl_ce_InvalidArgumentException->__isset), sizeof (spl_ce_InvalidArgumentException->__isset), &(spl_ce_InvalidArgumentException->__call), sizeof (spl_ce_InvalidArgumentException->__call), &(spl_ce_InvalidArgumentException->__callstatic), sizeof (spl_ce_InvalidArgumentException->__callstatic), &(spl_ce_InvalidArgumentException->__tostring), sizeof (spl_ce_InvalidArgumentException->__tostring), &(spl_ce_InvalidArgumentException->serialize_func), sizeof (spl_ce_InvalidArgumentException->serialize_func), &(spl_ce_InvalidArgumentException->unserialize_func), sizeof (spl_ce_InvalidArgumentException->unserialize_func), &(spl_ce_InvalidArgumentException->create_object), sizeof (spl_ce_InvalidArgumentException->create_object), &(spl_ce_InvalidArgumentException->get_iterator), sizeof (spl_ce_InvalidArgumentException->get_iterator), &(spl_ce_InvalidArgumentException->interface_gets_implemented), sizeof (spl_ce_InvalidArgumentException->interface_gets_implemented), &(spl_ce_InvalidArgumentException->get_static_method), sizeof (spl_ce_InvalidArgumentException->get_static_method), &(spl_ce_InvalidArgumentException->serialize), sizeof (spl_ce_InvalidArgumentException->serialize), &(spl_ce_InvalidArgumentException->unserialize), sizeof (spl_ce_InvalidArgumentException->unserialize), &(spl_ce_InvalidArgumentException->interfaces), sizeof (spl_ce_InvalidArgumentException->interfaces), &(spl_ce_InvalidArgumentException->num_interfaces), sizeof (spl_ce_InvalidArgumentException->num_interfaces), &(spl_ce_InvalidArgumentException->traits), sizeof (spl_ce_InvalidArgumentException->traits), &(spl_ce_InvalidArgumentException->num_traits), sizeof (spl_ce_InvalidArgumentException->num_traits), &(spl_ce_InvalidArgumentException->trait_aliases), sizeof (spl_ce_InvalidArgumentException->trait_aliases), &(spl_ce_InvalidArgumentException->trait_precedences), sizeof (spl_ce_InvalidArgumentException->trait_precedences))) {\n    zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n}\n", "if ((handler != std_object_handlers.get_properties && handler != spl_array_get_properties)) {\n    zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n}\n", "if ((handler != std_object_handlers.get_properties && handler != spl_array_get_properties) || !spl_array_get_debug_info(intern, 0)) {\n    zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n}\n", "if ((handler != std_object_handlers.get_properties && handler != spl_array_get_properties) || !zend_std_get_debug_info(intern, 0)) {\n    zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n}\n", "if (((handler != std_object_handlers.get_properties && handler != spl_array_get_properties) || !spl_array_get_hash_table(intern, 0)) && !__is_neg(\"\", \"L1052\", 108, &(intern), sizeof (intern), &(array), sizeof (array), &(handler), sizeof (handler), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &((**array).type), sizeof ((**array).type), &(intern->array), sizeof (intern->array), &(ar_flags), sizeof (ar_flags), &(intern->ar_flags), sizeof (intern->ar_flags), &(object), sizeof (object), &(just_array), sizeof (just_array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((**array).refcount__gc), sizeof ((**array).refcount__gc), &((**array).is_ref__gc), sizeof ((**array).is_ref__gc), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(spl_ce_InvalidArgumentException->type), sizeof (spl_ce_InvalidArgumentException->type), &(spl_ce_InvalidArgumentException->name), sizeof (spl_ce_InvalidArgumentException->name), &(spl_ce_InvalidArgumentException->name_length), sizeof (spl_ce_InvalidArgumentException->name_length), &(spl_ce_InvalidArgumentException->parent), sizeof (spl_ce_InvalidArgumentException->parent), &(spl_ce_InvalidArgumentException->refcount), sizeof (spl_ce_InvalidArgumentException->refcount), &(spl_ce_InvalidArgumentException->ce_flags), sizeof (spl_ce_InvalidArgumentException->ce_flags), &(spl_ce_InvalidArgumentException->default_properties_table), sizeof (spl_ce_InvalidArgumentException->default_properties_table), &(spl_ce_InvalidArgumentException->default_static_members_table), sizeof (spl_ce_InvalidArgumentException->default_static_members_table), &(spl_ce_InvalidArgumentException->static_members_table), sizeof (spl_ce_InvalidArgumentException->static_members_table), &(spl_ce_InvalidArgumentException->default_properties_count), sizeof (spl_ce_InvalidArgumentException->default_properties_count), &(spl_ce_InvalidArgumentException->default_static_members_count), sizeof (spl_ce_InvalidArgumentException->default_static_members_count), &(spl_ce_InvalidArgumentException->constructor), sizeof (spl_ce_InvalidArgumentException->constructor), &(spl_ce_InvalidArgumentException->destructor), sizeof (spl_ce_InvalidArgumentException->destructor), &(spl_ce_InvalidArgumentException->clone), sizeof (spl_ce_InvalidArgumentException->clone), &(spl_ce_InvalidArgumentException->__get), sizeof (spl_ce_InvalidArgumentException->__get), &(spl_ce_InvalidArgumentException->__set), sizeof (spl_ce_InvalidArgumentException->__set), &(spl_ce_InvalidArgumentException->__unset), sizeof (spl_ce_InvalidArgumentException->__unset), &(spl_ce_InvalidArgumentException->__isset), sizeof (spl_ce_InvalidArgumentException->__isset), &(spl_ce_InvalidArgumentException->__call), sizeof (spl_ce_InvalidArgumentException->__call), &(spl_ce_InvalidArgumentException->__callstatic), sizeof (spl_ce_InvalidArgumentException->__callstatic), &(spl_ce_InvalidArgumentException->__tostring), sizeof (spl_ce_InvalidArgumentException->__tostring), &(spl_ce_InvalidArgumentException->serialize_func), sizeof (spl_ce_InvalidArgumentException->serialize_func), &(spl_ce_InvalidArgumentException->unserialize_func), sizeof (spl_ce_InvalidArgumentException->unserialize_func), &(spl_ce_InvalidArgumentException->create_object), sizeof (spl_ce_InvalidArgumentException->create_object), &(spl_ce_InvalidArgumentException->get_iterator), sizeof (spl_ce_InvalidArgumentException->get_iterator), &(spl_ce_InvalidArgumentException->interface_gets_implemented), sizeof (spl_ce_InvalidArgumentException->interface_gets_implemented), &(spl_ce_InvalidArgumentException->get_static_method), sizeof (spl_ce_InvalidArgumentException->get_static_method), &(spl_ce_InvalidArgumentException->serialize), sizeof (spl_ce_InvalidArgumentException->serialize), &(spl_ce_InvalidArgumentException->unserialize), sizeof (spl_ce_InvalidArgumentException->unserialize), &(spl_ce_InvalidArgumentException->interfaces), sizeof (spl_ce_InvalidArgumentException->interfaces), &(spl_ce_InvalidArgumentException->num_interfaces), sizeof (spl_ce_InvalidArgumentException->num_interfaces), &(spl_ce_InvalidArgumentException->traits), sizeof (spl_ce_InvalidArgumentException->traits), &(spl_ce_InvalidArgumentException->num_traits), sizeof (spl_ce_InvalidArgumentException->num_traits), &(spl_ce_InvalidArgumentException->trait_aliases), sizeof (spl_ce_InvalidArgumentException->trait_aliases), &(spl_ce_InvalidArgumentException->trait_precedences), sizeof (spl_ce_InvalidArgumentException->trait_precedences))) {\n    zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.4308505594281451, -3.6965087699281476, -2.5468932594281477, -5.0323911994281456, -3.0717380694281475, -3.0717380694281475, -5.1957280694281458, -5.9536161694281455, -4.9652340594281457, -5.1957280694281458, -6.0369198594281457, -4.9652340594281457, -5.9536161694281455, -5.9536161694281455, -5.1957280694281458, -5.1957280694281458, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.9536161694281455, -5.9536161694281455, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.6649880694281451, -4.8737170394281453, -5.9536161694281455, -5.1957280694281458, -5.1957280694281458, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.1957280694281458, -5.1957280694281458, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.6649880694281451, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.1957280694281458, -5.6649880694281451, -5.1957280694281458, -5.6649880694281451, -5.1957280694281458, -5.6649880694281451, -5.6649880694281451]
								}, {
									"case":	2,
									"scores":	[-5.8491035324281464, -4.1147617429281462, -2.9651462324281459, -5.4506441724281469, -3.4899910424281462, -3.4899910424281462, -5.6139810424281462, -6.3718691424281459, -5.3834870324281461, -5.6139810424281462, -6.4551728324281461, -5.3834870324281461, -6.3718691424281459, -6.3718691424281459, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.3718691424281459, -6.3718691424281459, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -5.2919700124281466, -6.3718691424281459, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -5.6139810424281462, -6.0832410424281465, -5.6139810424281462, -6.0832410424281465, -6.0832410424281465]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-5.8491035324281464, -4.1147617429281462, -2.9651462324281459, -5.4506441724281469, -3.4899910424281462, -3.4899910424281462, -5.6139810424281462, -6.3718691424281459, -5.3834870324281461, -5.6139810424281462, -6.4551728324281461, -5.3834870324281461, -6.3718691424281459, -6.3718691424281459, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.3718691424281459, -6.3718691424281459, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -5.2919700124281466, -6.3718691424281459, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -6.0832410424281465, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -5.6139810424281462, -6.0832410424281465, -5.6139810424281462, -6.0832410424281465, -5.6139810424281462, -6.0832410424281465, -6.0832410424281465]
								}]
						}, {
							"switch":	104,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1052,
							"begin_column":	3,
							"end_line":	1055,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L1052\", 103, &(handler), sizeof (handler), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(intern), sizeof (intern), &(array), sizeof (array), &(((**array)).value.obj.handlers), sizeof (((**array)).value.obj.handlers), &(((**array)).value.obj.handlers->get_properties), sizeof (((**array)).value.obj.handlers->get_properties), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &((**array).type), sizeof ((**array).type), &(intern->array), sizeof (intern->array), &(ar_flags), sizeof (ar_flags), &(intern->ar_flags), sizeof (intern->ar_flags), &(object), sizeof (object), &(just_array), sizeof (just_array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((**array).refcount__gc), sizeof ((**array).refcount__gc), &((**array).is_ref__gc), sizeof ((**array).is_ref__gc), &(((**array)).refcount__gc), sizeof (((**array)).refcount__gc), &(((**array)).type), sizeof (((**array)).type), &(((**array)).is_ref__gc), sizeof (((**array)).is_ref__gc), &(((**array)).value.obj.handle), sizeof (((**array)).value.obj.handle), &(((**array)).value.obj.handlers->add_ref), sizeof (((**array)).value.obj.handlers->add_ref), &(((**array)).value.obj.handlers->del_ref), sizeof (((**array)).value.obj.handlers->del_ref), &(((**array)).value.obj.handlers->clone_obj), sizeof (((**array)).value.obj.handlers->clone_obj), &(((**array)).value.obj.handlers->read_property), sizeof (((**array)).value.obj.handlers->read_property), &(((**array)).value.obj.handlers->write_property), sizeof (((**array)).value.obj.handlers->write_property), &(((**array)).value.obj.handlers->read_dimension), sizeof (((**array)).value.obj.handlers->read_dimension), &(((**array)).value.obj.handlers->write_dimension), sizeof (((**array)).value.obj.handlers->write_dimension), &(((**array)).value.obj.handlers->get_property_ptr_ptr), sizeof (((**array)).value.obj.handlers->get_property_ptr_ptr), &(((**array)).value.obj.handlers->get), sizeof (((**array)).value.obj.handlers->get), &(((**array)).value.obj.handlers->set), sizeof (((**array)).value.obj.handlers->set), &(((**array)).value.obj.handlers->has_property), sizeof (((**array)).value.obj.handlers->has_property), &(((**array)).value.obj.handlers->unset_property), sizeof (((**array)).value.obj.handlers->unset_property), &(((**array)).value.obj.handlers->has_dimension), sizeof (((**array)).value.obj.handlers->has_dimension), &(((**array)).value.obj.handlers->unset_dimension), sizeof (((**array)).value.obj.handlers->unset_dimension), &(((**array)).value.obj.handlers->get_method), sizeof (((**array)).value.obj.handlers->get_method), &(((**array)).value.obj.handlers->call_method), sizeof (((**array)).value.obj.handlers->call_method), &(((**array)).value.obj.handlers->get_constructor), sizeof (((**array)).value.obj.handlers->get_constructor), &(((**array)).value.obj.handlers->get_class_entry), sizeof (((**array)).value.obj.handlers->get_class_entry), &(((**array)).value.obj.handlers->get_class_name), sizeof (((**array)).value.obj.handlers->get_class_name), &(((**array)).value.obj.handlers->compare_objects), sizeof (((**array)).value.obj.handlers->compare_objects), &(((**array)).value.obj.handlers->cast_object), sizeof (((**array)).value.obj.handlers->cast_object), &(((**array)).value.obj.handlers->count_elements), sizeof (((**array)).value.obj.handlers->count_elements), &(((**array)).value.obj.handlers->get_debug_info), sizeof (((**array)).value.obj.handlers->get_debug_info), &(((**array)).value.obj.handlers->get_closure), sizeof (((**array)).value.obj.handlers->get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure)))\n    if ((handler != std_object_handlers.get_properties && handler != spl_array_get_properties) || !spl_array_get_hash_table(intern, 0)) {\n        zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n    }\n", "if (!__is_neg(\"\", \"L1052\", 103, &(handler), sizeof (handler), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(std_object_handlers.get_properties), sizeof (std_object_handlers.get_properties), &(intern), sizeof (intern), &(array), sizeof (array), &(((**array)).value.obj.handlers), sizeof (((**array)).value.obj.handlers), &(((**array)).value.obj.handlers->get_properties), sizeof (((**array)).value.obj.handlers->get_properties), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &((**array).type), sizeof ((**array).type), &(intern->array), sizeof (intern->array), &(ar_flags), sizeof (ar_flags), &(intern->ar_flags), sizeof (intern->ar_flags), &(object), sizeof (object), &(just_array), sizeof (just_array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((**array).refcount__gc), sizeof ((**array).refcount__gc), &((**array).is_ref__gc), sizeof ((**array).is_ref__gc), &(((**array)).refcount__gc), sizeof (((**array)).refcount__gc), &(((**array)).type), sizeof (((**array)).type), &(((**array)).is_ref__gc), sizeof (((**array)).is_ref__gc), &(((**array)).value.obj.handle), sizeof (((**array)).value.obj.handle), &(((**array)).value.obj.handlers->add_ref), sizeof (((**array)).value.obj.handlers->add_ref), &(((**array)).value.obj.handlers->del_ref), sizeof (((**array)).value.obj.handlers->del_ref), &(((**array)).value.obj.handlers->clone_obj), sizeof (((**array)).value.obj.handlers->clone_obj), &(((**array)).value.obj.handlers->read_property), sizeof (((**array)).value.obj.handlers->read_property), &(((**array)).value.obj.handlers->write_property), sizeof (((**array)).value.obj.handlers->write_property), &(((**array)).value.obj.handlers->read_dimension), sizeof (((**array)).value.obj.handlers->read_dimension), &(((**array)).value.obj.handlers->write_dimension), sizeof (((**array)).value.obj.handlers->write_dimension), &(((**array)).value.obj.handlers->get_property_ptr_ptr), sizeof (((**array)).value.obj.handlers->get_property_ptr_ptr), &(((**array)).value.obj.handlers->get), sizeof (((**array)).value.obj.handlers->get), &(((**array)).value.obj.handlers->set), sizeof (((**array)).value.obj.handlers->set), &(((**array)).value.obj.handlers->has_property), sizeof (((**array)).value.obj.handlers->has_property), &(((**array)).value.obj.handlers->unset_property), sizeof (((**array)).value.obj.handlers->unset_property), &(((**array)).value.obj.handlers->has_dimension), sizeof (((**array)).value.obj.handlers->has_dimension), &(((**array)).value.obj.handlers->unset_dimension), sizeof (((**array)).value.obj.handlers->unset_dimension), &(((**array)).value.obj.handlers->get_method), sizeof (((**array)).value.obj.handlers->get_method), &(((**array)).value.obj.handlers->call_method), sizeof (((**array)).value.obj.handlers->call_method), &(((**array)).value.obj.handlers->get_constructor), sizeof (((**array)).value.obj.handlers->get_constructor), &(((**array)).value.obj.handlers->get_class_entry), sizeof (((**array)).value.obj.handlers->get_class_entry), &(((**array)).value.obj.handlers->get_class_name), sizeof (((**array)).value.obj.handlers->get_class_name), &(((**array)).value.obj.handlers->compare_objects), sizeof (((**array)).value.obj.handlers->compare_objects), &(((**array)).value.obj.handlers->cast_object), sizeof (((**array)).value.obj.handlers->cast_object), &(((**array)).value.obj.handlers->count_elements), sizeof (((**array)).value.obj.handlers->count_elements), &(((**array)).value.obj.handlers->get_debug_info), sizeof (((**array)).value.obj.handlers->get_debug_info), &(((**array)).value.obj.handlers->get_closure), sizeof (((**array)).value.obj.handlers->get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure), &(std_object_handlers.add_ref), sizeof (std_object_handlers.add_ref), &(std_object_handlers.del_ref), sizeof (std_object_handlers.del_ref), &(std_object_handlers.clone_obj), sizeof (std_object_handlers.clone_obj), &(std_object_handlers.read_property), sizeof (std_object_handlers.read_property), &(std_object_handlers.write_property), sizeof (std_object_handlers.write_property), &(std_object_handlers.read_dimension), sizeof (std_object_handlers.read_dimension), &(std_object_handlers.write_dimension), sizeof (std_object_handlers.write_dimension), &(std_object_handlers.get_property_ptr_ptr), sizeof (std_object_handlers.get_property_ptr_ptr), &(std_object_handlers.get), sizeof (std_object_handlers.get), &(std_object_handlers.set), sizeof (std_object_handlers.set), &(std_object_handlers.has_property), sizeof (std_object_handlers.has_property), &(std_object_handlers.unset_property), sizeof (std_object_handlers.unset_property), &(std_object_handlers.has_dimension), sizeof (std_object_handlers.has_dimension), &(std_object_handlers.unset_dimension), sizeof (std_object_handlers.unset_dimension), &(std_object_handlers.get_method), sizeof (std_object_handlers.get_method), &(std_object_handlers.call_method), sizeof (std_object_handlers.call_method), &(std_object_handlers.get_constructor), sizeof (std_object_handlers.get_constructor), &(std_object_handlers.get_class_entry), sizeof (std_object_handlers.get_class_entry), &(std_object_handlers.get_class_name), sizeof (std_object_handlers.get_class_name), &(std_object_handlers.compare_objects), sizeof (std_object_handlers.compare_objects), &(std_object_handlers.cast_object), sizeof (std_object_handlers.cast_object), &(std_object_handlers.count_elements), sizeof (std_object_handlers.count_elements), &(std_object_handlers.get_debug_info), sizeof (std_object_handlers.get_debug_info), &(std_object_handlers.get_closure), sizeof (std_object_handlers.get_closure)) && ((handler != std_object_handlers.get_properties && handler != spl_array_get_properties) || !spl_array_get_hash_table(intern, 0))) {\n    zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.17883760238104, -9.70368241238104, -9.70368241238104, -12.062794902381038, -10.328453112881038, -12.827348002881038, -11.827672412381038, -11.664335542381039, -11.827672412381038, -12.585560512381038, -11.597178402381038, -11.827672412381038, -12.668864202381039, -11.597178402381038, -12.585560512381038, -12.585560512381038, -11.827672412381038, -11.827672412381038, -12.296932412381038, -12.296932412381038, -12.296932412381038, -12.296932412381038, -12.296932412381038, -12.585560512381038, -12.585560512381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038, -11.827672412381038]
								}, {
									"case":	2,
									"scores":	[-9.72901585938104, -10.253860669381037, -10.253860669381037, -12.612973159381038, -10.878631369881038, -13.377526259881037, -12.377850669381038, -12.214513799381038, -12.377850669381038, -13.135738769381037, -12.147356659381037, -12.377850669381038, -13.219042459381038, -12.147356659381037, -13.135738769381037, -13.135738769381037, -12.377850669381038, -12.377850669381038, -12.847110669381038, -12.847110669381038, -12.847110669381038, -12.847110669381038, -12.847110669381038, -13.135738769381037, -13.135738769381037, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038, -12.377850669381038]
								}]
						}]
				}, {
					"line":	1049,
					"switches":	[{
							"switch":	100,
							"types":	[[], [], [], [], [], [], [], [], [], [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [], [], [], [], [], []],
							"begin_line":	1050,
							"begin_column":	0,
							"end_line":	1050,
							"end_column":	0,
							"patch_codes":	["_array_init(((intern)->array), 0)", "_array_init(((object)), 0)", "_efree(((intern)->debug_info))", "_efree(((object)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor_func((object))", "_zval_dtor(((object)))", "_zval_dtor_func((object))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&*(array)))", "ar_flags = (-33554433)", "ar_flags = (-65536)", "ar_flags = (-67108865)", "ar_flags = (0)", "ar_flags = (1)", "ar_flags = (33554432)", "ar_flags = (4)", "ar_flags = (5)", "ar_flags = (65535)", "ar_flags = (67108864)", "ar_flags = (ar_flags)", "ar_flags = (intern)->ar_flags & ~4294901760U", "convert_to_boolean((object))", "convert_to_long((intern)->retval)", "gc_remove_zval_from_buffer((object))", "gc_zval_check_possible_root(((object)))", "gc_zval_possible_root((object))", "i_zval_ptr_dtor((object))", "intern->array = (object)", "intern->array = *(array)", "memset((intern), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "rebuild_object_properties(&(intern)->std)", "spl_array_rewind((intern))", "spl_array_update_pos((intern))", "spl_hash_verify_pos((intern))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**(array)))->name, intern->std.ce->name)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, (intern)->std.ce->name)", "zval_add_ref(&(object))", "zval_addref_p((intern)->array)", "zval_addref_p((object))", "zval_delref_p(((object)))", "zval_delref_p(*((array)))", "zval_set_isref_p((object))", "zval_set_isref_p(*((array)))", "zval_set_refcount_p((object), 1)", "zval_unset_isref_p((object))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "_zval_ptr_dtor((&intern->array))", "exit(1)", "intern->array = *array", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "spl_array_rewind(intern)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_addref_p(intern->array)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.52837563969856]
								}, {
									"case":	2,
									"scores":	[-9.52837563969856]
								}, {
									"case":	3,
									"scores":	[-9.52837563969856]
								}, {
									"case":	4,
									"scores":	[-9.52837563969856]
								}, {
									"case":	5,
									"scores":	[-9.52837563969856]
								}, {
									"case":	6,
									"scores":	[-9.52837563969856]
								}, {
									"case":	7,
									"scores":	[-9.52837563969856]
								}, {
									"case":	8,
									"scores":	[-9.52837563969856]
								}, {
									"case":	9,
									"scores":	[-9.52837563969856]
								}, {
									"case":	10,
									"scores":	[-9.52837563969856]
								}, {
									"case":	11,
									"scores":	[-9.52837563969856]
								}, {
									"case":	12,
									"scores":	[-9.52837563969856]
								}, {
									"case":	13,
									"scores":	[-9.52837563969856]
								}, {
									"case":	14,
									"scores":	[-9.52837563969856]
								}, {
									"case":	15,
									"scores":	[-9.52837563969856]
								}, {
									"case":	16,
									"scores":	[-9.52837563969856]
								}, {
									"case":	17,
									"scores":	[-9.52837563969856]
								}, {
									"case":	18,
									"scores":	[-9.52837563969856]
								}, {
									"case":	19,
									"scores":	[-9.52837563969856]
								}, {
									"case":	20,
									"scores":	[-9.52837563969856]
								}, {
									"case":	21,
									"scores":	[-9.52837563969856]
								}, {
									"case":	22,
									"scores":	[-9.52837563969856]
								}, {
									"case":	23,
									"scores":	[-9.52837563969856]
								}, {
									"case":	24,
									"scores":	[-9.52837563969856]
								}, {
									"case":	25,
									"scores":	[-9.52837563969856]
								}, {
									"case":	26,
									"scores":	[-9.52837563969856]
								}, {
									"case":	27,
									"scores":	[-9.52837563969856]
								}, {
									"case":	28,
									"scores":	[-9.52837563969856]
								}, {
									"case":	29,
									"scores":	[-9.52837563969856]
								}, {
									"case":	30,
									"scores":	[-9.52837563969856]
								}, {
									"case":	31,
									"scores":	[-9.52837563969856]
								}, {
									"case":	32,
									"scores":	[-9.52837563969856]
								}, {
									"case":	33,
									"scores":	[-9.52837563969856]
								}, {
									"case":	34,
									"scores":	[-9.52837563969856]
								}, {
									"case":	35,
									"scores":	[-9.52837563969856]
								}, {
									"case":	36,
									"scores":	[-9.52837563969856]
								}, {
									"case":	37,
									"scores":	[-9.52837563969856]
								}, {
									"case":	38,
									"scores":	[-9.52837563969856]
								}, {
									"case":	39,
									"scores":	[-9.52837563969856]
								}, {
									"case":	40,
									"scores":	[-9.52837563969856]
								}, {
									"case":	41,
									"scores":	[-9.52837563969856]
								}, {
									"case":	42,
									"scores":	[-9.52837563969856]
								}, {
									"case":	43,
									"scores":	[-9.52837563969856]
								}, {
									"case":	44,
									"scores":	[-9.52837563969856]
								}, {
									"case":	45,
									"scores":	[-9.52837563969856]
								}, {
									"case":	46,
									"scores":	[-9.52837563969856]
								}, {
									"case":	47,
									"scores":	[-9.52837563969856]
								}, {
									"case":	48,
									"scores":	[-9.52837563969856]
								}, {
									"case":	49,
									"scores":	[-9.52837563969856]
								}, {
									"case":	50,
									"scores":	[-9.52837563969856]
								}, {
									"case":	51,
									"scores":	[-9.52837563969856]
								}, {
									"case":	52,
									"scores":	[-9.52837563969856]
								}, {
									"case":	53,
									"scores":	[-9.52837563969856]
								}, {
									"case":	54,
									"scores":	[-9.52837563969856]
								}, {
									"case":	55,
									"scores":	[-9.52837563969856]
								}, {
									"case":	56,
									"scores":	[-9.52837563969856]
								}, {
									"case":	57,
									"scores":	[-9.52837563969856]
								}, {
									"case":	58,
									"scores":	[-9.52837563969856]
								}, {
									"case":	59,
									"scores":	[-9.52837563969856]
								}, {
									"case":	60,
									"scores":	[-9.52837563969856]
								}, {
									"case":	61,
									"scores":	[-9.52837563969856]
								}, {
									"case":	62,
									"scores":	[-9.52837563969856]
								}, {
									"case":	63,
									"scores":	[-9.52837563969856]
								}, {
									"case":	64,
									"scores":	[-9.52837563969856]
								}, {
									"case":	65,
									"scores":	[-9.52837563969856]
								}, {
									"case":	66,
									"scores":	[-9.52837563969856]
								}, {
									"case":	67,
									"scores":	[-9.52837563969856]
								}, {
									"case":	68,
									"scores":	[-9.52837563969856]
								}, {
									"case":	69,
									"scores":	[-9.52837563969856]
								}, {
									"case":	70,
									"scores":	[-9.52837563969856]
								}, {
									"case":	71,
									"scores":	[-9.52837563969856]
								}, {
									"case":	72,
									"scores":	[-9.52837563969856]
								}, {
									"case":	73,
									"scores":	[-9.52837563969856]
								}, {
									"case":	74,
									"scores":	[-9.52837563969856]
								}, {
									"case":	75,
									"scores":	[-9.52837563969856]
								}, {
									"case":	76,
									"scores":	[-9.52837563969856]
								}, {
									"case":	77,
									"scores":	[-9.52837563969856]
								}, {
									"case":	78,
									"scores":	[-9.52837563969856]
								}, {
									"case":	79,
									"scores":	[-9.52837563969856]
								}, {
									"case":	80,
									"scores":	[-9.52837563969856]
								}, {
									"case":	81,
									"scores":	[-9.52837563969856]
								}, {
									"case":	82,
									"scores":	[-9.52837563969856]
								}, {
									"case":	83,
									"scores":	[-9.52837563969856]
								}, {
									"case":	84,
									"scores":	[-9.52837563969856]
								}, {
									"case":	85,
									"scores":	[-9.52837563969856]
								}, {
									"case":	86,
									"scores":	[-9.52837563969856]
								}, {
									"case":	87,
									"scores":	[-9.52837563969856]
								}, {
									"case":	88,
									"scores":	[-9.52837563969856]
								}, {
									"case":	89,
									"scores":	[-9.52837563969856]
								}, {
									"case":	90,
									"scores":	[-9.52837563969856]
								}, {
									"case":	91,
									"scores":	[-9.52837563969856]
								}, {
									"case":	92,
									"scores":	[-9.52837563969856]
								}, {
									"case":	93,
									"scores":	[-9.52837563969856]
								}, {
									"case":	94,
									"scores":	[-9.52837563969856]
								}, {
									"case":	95,
									"scores":	[-9.52837563969856]
								}, {
									"case":	96,
									"scores":	[-9.52837563969856]
								}, {
									"case":	97,
									"scores":	[-9.52837563969856]
								}, {
									"case":	98,
									"scores":	[-9.52837563969856]
								}, {
									"case":	99,
									"scores":	[-9.52837563969856]
								}, {
									"case":	100,
									"scores":	[-9.52837563969856]
								}, {
									"case":	101,
									"scores":	[-9.52837563969856]
								}, {
									"case":	102,
									"scores":	[-9.52837563969856]
								}, {
									"case":	103,
									"scores":	[-9.52837563969856]
								}, {
									"case":	104,
									"scores":	[-9.52837563969856]
								}, {
									"case":	105,
									"scores":	[-9.52837563969856]
								}, {
									"case":	106,
									"scores":	[-9.52837563969856]
								}, {
									"case":	107,
									"scores":	[-9.52837563969856]
								}, {
									"case":	108,
									"scores":	[-9.52837563969856]
								}, {
									"case":	109,
									"scores":	[-9.52837563969856]
								}, {
									"case":	110,
									"scores":	[-9.52837563969856]
								}, {
									"case":	111,
									"scores":	[-9.52837563969856]
								}, {
									"case":	112,
									"scores":	[-9.52837563969856]
								}, {
									"case":	113,
									"scores":	[-9.52837563969856]
								}, {
									"case":	114,
									"scores":	[-9.52837563969856]
								}]
						}, {
							"switch":	101,
							"types":	[[2], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1050,
							"begin_column":	2,
							"end_line":	1056,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1050\", 22, &(array), sizeof (array), &((**array).type), sizeof ((**array).type), &(intern), sizeof (intern), &(intern->array), sizeof (intern->array), &(ar_flags), sizeof (ar_flags), &(intern->ar_flags), sizeof (intern->ar_flags), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(object), sizeof (object), &(just_array), sizeof (just_array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((**array).refcount__gc), sizeof ((**array).refcount__gc), &((**array).is_ref__gc), sizeof ((**array).is_ref__gc))) {\n    zend_object_get_properties_t handler = ((**array)).value.obj.handlers->get_properties;\n    if ((handler != std_object_handlers.get_properties && handler != spl_array_get_properties) || !spl_array_get_hash_table(intern, 0)) {\n        zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n    }\n}\n", "if (((**array).type == 5) && !__is_neg(\"\", \"L1050\", 22, &(array), sizeof (array), &((**array).type), sizeof ((**array).type), &(intern), sizeof (intern), &(intern->array), sizeof (intern->array), &(ar_flags), sizeof (ar_flags), &(intern->ar_flags), sizeof (intern->ar_flags), &(spl_ce_InvalidArgumentException), sizeof (spl_ce_InvalidArgumentException), &(object), sizeof (object), &(just_array), sizeof (just_array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(intern->debug_info), sizeof (intern->debug_info), &((**array).refcount__gc), sizeof ((**array).refcount__gc), &((**array).is_ref__gc), sizeof ((**array).is_ref__gc))) {\n    zend_object_get_properties_t handler = ((**array)).value.obj.handlers->get_properties;\n    if ((handler != std_object_handlers.get_properties && handler != spl_array_get_properties) || !spl_array_get_hash_table(intern, 0)) {\n        zend_throw_exception_ex(spl_ce_InvalidArgumentException, 0, \"Overloaded object of type %s is not compatible with %s\", zend_get_class_entry(&(**array))->name, intern->std.ce->name);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.0697925609281453, -1.4450218604281453, -4.1633711499281452, -4.4158828064281463, -3.3385178504281461, -3.6454096604281454, -3.4056749904281451, -4.0234478104281468, -3.3385178504281461, -4.326899960428146, -4.326899960428146, -3.5690118604281458, -3.5690118604281458, -4.0382718604281456, -4.0382718604281456, -4.0382718604281456, -4.0382718604281456, -4.0382718604281456, -4.326899960428146, -4.326899960428146, -3.5690118604281458, -3.5690118604281458]
								}, {
									"case":	2,
									"scores":	[-1.7200770839281465, -1.0953063834281465, -3.8136556729281454, -4.0661673294281462, -2.9888023734281464, -3.2956941834281466, -3.0559595134281454, -3.6737323334281453, -2.9888023734281464, -3.9771844834281462, -3.9771844834281462, -3.2192963834281461, -3.2192963834281461, -3.6885563834281463, -3.6885563834281463, -3.6885563834281463, -3.6885563834281463, -3.6885563834281463, -3.9771844834281462, -3.9771844834281462, -3.2192963834281461, -3.2192963834281461]
								}]
						}]
				}, {
					"line":	1216,
					"switches":	[]
				}, {
					"line":	1217,
					"switches":	[]
				}, {
					"line":	1218,
					"switches":	[]
				}, {
					"line":	1219,
					"switches":	[]
				}, {
					"line":	1221,
					"switches":	[{
							"switch":	105,
							"types":	[[], [], [], [], [206], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	1222,
							"begin_column":	0,
							"end_line":	1222,
							"end_column":	0,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&return_value->is_ref__gc, 0, sizeof (*(&return_value->is_ref__gc)))", "memset(&return_value->refcount__gc, 0, sizeof (*(&return_value->refcount__gc)))", "memset(&return_value->type, 0, sizeof (*(&return_value->type)))", "memset(&return_value->value, 0, sizeof (*(&return_value->value)))", "memset(&return_value->value.dval, 0, sizeof (*(&return_value->value.dval)))", "memset(&return_value->value.ht, 0, sizeof (*(&return_value->value.ht)))", "memset(&return_value->value.lval, 0, sizeof (*(&return_value->value.lval)))", "memset(&return_value->value.obj, 0, sizeof (*(&return_value->value.obj)))", "memset(&return_value->value.str, 0, sizeof (*(&return_value->value.str)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(return_value->value.ht, 0, sizeof (*(return_value->value.ht)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((iterator)->array), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->debug_info))", "_efree(((iterator)->debug_info))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(return_value))))", "_zval_copy_ctor((&(*(this_ptr))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((iterator)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(iterator)->array))", "_zval_ptr_dtor((&(iterator)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long((intern)->retval)", "convert_to_long((iterator)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((intern), 0, sizeof(spl_array_object))", "memset((iterator), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(return_value)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(this_ptr)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(iterator)->std)", "return_value->type = (-1)", "return_value->type = (0)", "return_value->type = (1)", "return_value->type = (3)", "return_value->type = (5)", "return_value->type = (8)", "return_value->value.obj = spl_array_object_new_ex((intern)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((iterator)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(intern), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(iterator), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (object), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (return_value), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (this_ptr), 0)", "spl_array_rewind((intern))", "spl_array_rewind((iterator))", "spl_array_update_pos((intern))", "spl_array_update_pos((iterator))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((iterator))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(return_value)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(this_ptr)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(return_value)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(this_ptr)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((iterator)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((iterator)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(iterator)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_addref_p((intern)->array)", "zval_addref_p((iterator)->array)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_delref_p(((object)))", "zval_delref_p(((return_value)))", "zval_delref_p(((this_ptr)))", "zval_delref_p(*((return_value_ptr)))", "zval_set_isref_p((object))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p(*((return_value_ptr)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "return_value->type = 5", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, 0)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_set_isref_p(return_value)", "zval_set_refcount_p(return_value, 1)", "if (__is_neg(\"\", \"L1222\", 7, &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(aht), sizeof (aht), &(this_ptr), sizeof (this_ptr), &(return_value), sizeof (return_value), &(iterator), sizeof (iterator)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	2,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	3,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	4,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	5,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	6,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	7,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	8,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	9,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	10,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	11,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	12,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	13,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	14,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	15,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	16,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	17,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	18,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	19,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	20,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	21,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	22,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	23,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	24,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	25,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	26,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	27,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	28,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	29,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	30,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	31,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	32,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	33,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	34,
									"scores":	[-8.1545915421072337]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-11.793431956907234, -13.232951862807234, -12.234399258907235, -12.611639525907234, -12.391154751907234, -12.714621008807235, -12.330821361907233]
								}]
						}, {
							"switch":	106,
							"types":	[[40], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], []],
							"begin_line":	1222,
							"begin_column":	2,
							"end_line":	1224,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1222\", 7, &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(aht), sizeof (aht), &(this_ptr), sizeof (this_ptr), &(return_value), sizeof (return_value), &(iterator), sizeof (iterator))) {\n    return;\n}\n", "if ((zend_parse_parameters((ht), \"\") == -1) || __is_neg(\"\", \"L1222\", 7, &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(aht), sizeof (aht), &(this_ptr), sizeof (this_ptr), &(return_value), sizeof (return_value), &(iterator), sizeof (iterator))) {\n    return;\n}\n", "if (_IO_putc((ht), \"\") == -1) {\n    return;\n}\n", "if (__tolower_l((ht), \"\") == -1) {\n    return;\n}\n", "if (__toupper_l((ht), \"\") == -1) {\n    return;\n}\n", "if (_zend_get_parameters_array_ex((ht), \"\") == -1) {\n    return;\n}\n", "if (clock_getcpuclockid((ht), \"\") == -1) {\n    return;\n}\n", "if (clock_getres((ht), \"\") == -1) {\n    return;\n}\n", "if (clock_gettime((ht), \"\") == -1) {\n    return;\n}\n", "if (clock_settime((ht), \"\") == -1) {\n    return;\n}\n", "if (dprintf((ht), \"\") == -1) {\n    return;\n}\n", "if (fputc((ht), \"\") == -1) {\n    return;\n}\n", "if (fputc_unlocked((ht), \"\") == -1) {\n    return;\n}\n", "if (fstat((ht), \"\") == -1) {\n    return;\n}\n", "if (futimens((ht), \"\") == -1) {\n    return;\n}\n", "if (futimes((ht), \"\") == -1) {\n    return;\n}\n", "if (getgroups((ht), \"\") == -1) {\n    return;\n}\n", "if (getitimer((ht), \"\") == -1) {\n    return;\n}\n", "if (isalnum_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isalpha_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isblank_l((ht), \"\") == -1) {\n    return;\n}\n", "if (iscntrl_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isdigit_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isgraph_l((ht), \"\") == -1) {\n    return;\n}\n", "if (islower_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isprint_l((ht), \"\") == -1) {\n    return;\n}\n", "if (ispunct_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isspace_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isupper_l((ht), \"\") == -1) {\n    return;\n}\n", "if (isxdigit_l((ht), \"\") == -1) {\n    return;\n}\n", "if (php_pcre_config((ht), \"\") == -1) {\n    return;\n}\n", "if (putc((ht), \"\") == -1) {\n    return;\n}\n", "if (putc_unlocked((ht), \"\") == -1) {\n    return;\n}\n", "if (putw((ht), \"\") == -1) {\n    return;\n}\n", "if (tolower_l((ht), \"\") == -1) {\n    return;\n}\n", "if (toupper_l((ht), \"\") == -1) {\n    return;\n}\n", "if (ungetc((ht), \"\") == -1) {\n    return;\n}\n", "if (zend_copy_parameters_array((ht), \"\") == -1) {\n    return;\n}\n", "if (zend_get_parameters_ex((ht), \"\") == -1) {\n    return;\n}\n", "if ((zend_parse_parameters((ht), \"\") == -1) && !__is_neg(\"\", \"L1222\", 7, &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(aht), sizeof (aht), &(this_ptr), sizeof (this_ptr), &(return_value), sizeof (return_value), &(iterator), sizeof (iterator))) {\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.9445340984281456, -6.0353760423281457, -5.3670025034281466, -5.3636185984281459, -5.3441716984281458, -5.7622189863281461, -5.4098848584281463]
								}, {
									"case":	2,
									"scores":	[-4.5781629884281454, -5.6690049323281464, -5.0006313934281463, -4.9972474884281457, -4.9778005884281455, -5.3958478763281459, -5.0435137484281451]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-4.5781629884281454, -5.6690049323281464, -5.0006313934281463, -4.9972474884281457, -4.9778005884281455, -5.3958478763281459, -5.0435137484281451]
								}]
						}, {
							"switch":	107,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1222,
							"begin_column":	2,
							"end_line":	1224,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1222\", 7, &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(aht), sizeof (aht), &(this_ptr), sizeof (this_ptr), &(return_value), sizeof (return_value), &(iterator), sizeof (iterator)))\n    if (zend_parse_parameters((ht), \"\") == -1) {\n        return;\n    }\n", "if (!__is_neg(\"\", \"L1222\", 7, &(ht), sizeof (ht), &(intern), sizeof (intern), &(object), sizeof (object), &(aht), sizeof (aht), &(this_ptr), sizeof (this_ptr), &(return_value), sizeof (return_value), &(iterator), sizeof (iterator)) && (zend_parse_parameters((ht), \"\") == -1)) {\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.719809602107233, -11.810651546007234, -11.142278007107233, -11.138894102107233, -11.119447202107233, -11.537494490007234, -11.185160362107233]
								}, {
									"case":	2,
									"scores":	[-10.405763092107234, -11.496605036007235, -10.828231497107234, -10.824847592107233, -10.805400692107234, -11.223447980007233, -10.871113852107234]
								}]
						}]
				}, {
					"line":	1225,
					"switches":	[{
							"switch":	108,
							"types":	[[], [], [], [], [206], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	1226,
							"begin_column":	0,
							"end_line":	1226,
							"end_column":	0,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&return_value->is_ref__gc, 0, sizeof (*(&return_value->is_ref__gc)))", "memset(&return_value->refcount__gc, 0, sizeof (*(&return_value->refcount__gc)))", "memset(&return_value->type, 0, sizeof (*(&return_value->type)))", "memset(&return_value->value, 0, sizeof (*(&return_value->value)))", "memset(&return_value->value.dval, 0, sizeof (*(&return_value->value.dval)))", "memset(&return_value->value.ht, 0, sizeof (*(&return_value->value.ht)))", "memset(&return_value->value.lval, 0, sizeof (*(&return_value->value.lval)))", "memset(&return_value->value.obj, 0, sizeof (*(&return_value->value.obj)))", "memset(&return_value->value.str, 0, sizeof (*(&return_value->value.str)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(return_value->value.ht, 0, sizeof (*(return_value->value.ht)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((iterator)->array), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->debug_info))", "_efree(((iterator)->debug_info))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(return_value))))", "_zval_copy_ctor((&(*(this_ptr))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((iterator)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(iterator)->array))", "_zval_ptr_dtor((&(iterator)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long((intern)->retval)", "convert_to_long((iterator)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((intern), 0, sizeof(spl_array_object))", "memset((iterator), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(return_value)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(this_ptr)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(iterator)->std)", "return_value->type = (-1)", "return_value->type = (0)", "return_value->type = (1)", "return_value->type = (3)", "return_value->type = (5)", "return_value->type = (8)", "return_value->value.obj = spl_array_object_new_ex((intern)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((iterator)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(intern), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(iterator), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (object), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (return_value), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (this_ptr), 0)", "spl_array_rewind((intern))", "spl_array_rewind((iterator))", "spl_array_update_pos((intern))", "spl_array_update_pos((iterator))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((iterator))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(return_value)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(this_ptr)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(return_value)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(this_ptr)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((iterator)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((iterator)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(iterator)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_addref_p((intern)->array)", "zval_addref_p((iterator)->array)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_delref_p(((object)))", "zval_delref_p(((return_value)))", "zval_delref_p(((this_ptr)))", "zval_delref_p(*((return_value_ptr)))", "zval_set_isref_p((object))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p(*((return_value_ptr)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "return_value->type = 5", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, 0)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_set_isref_p(return_value)", "zval_set_refcount_p(return_value, 1)", "if (__is_neg(\"\", \"L1226\", 7, &(aht), sizeof (aht), &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(this_ptr), sizeof (this_ptr)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	2,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	3,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	4,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	5,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	6,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	7,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	8,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	9,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	10,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	11,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	12,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	13,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	14,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	15,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	16,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	17,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	18,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	19,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	20,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	21,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	22,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	23,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	24,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	25,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	26,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	27,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	28,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	29,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	30,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	31,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	32,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	33,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	34,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	35,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	36,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	37,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	38,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	39,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	40,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	41,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	42,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	43,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	44,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	45,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	46,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	47,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	48,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	49,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	50,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	51,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	52,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	53,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	54,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	55,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	56,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	57,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	58,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	59,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	60,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	61,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	62,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	63,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	64,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	65,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	66,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	67,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	68,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	69,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	70,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	71,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	72,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	73,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	74,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	75,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	76,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	77,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	78,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	79,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	80,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	81,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	82,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	83,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	84,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	85,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	86,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	87,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	88,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	89,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	90,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	91,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	92,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	93,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	94,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	95,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	96,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	97,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	98,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	99,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	100,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	101,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	102,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	103,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	104,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	105,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	106,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	107,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	108,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	109,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	110,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	111,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	112,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	113,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	114,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	115,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	116,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	117,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	118,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	119,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	120,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	121,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	122,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	123,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	124,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	125,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	126,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	127,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	128,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	129,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	130,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	131,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	132,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	133,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	134,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	135,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	136,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	137,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	138,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	139,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	140,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	141,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	142,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	143,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	144,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	145,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	146,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	147,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	148,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	149,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	150,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	151,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	152,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	153,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	154,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	155,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	156,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	157,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	158,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	159,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	160,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	161,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	162,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	163,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	164,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	165,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	166,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	167,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	168,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	169,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	170,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	171,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	172,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	173,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	174,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	175,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	176,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	177,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	178,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	179,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	180,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	181,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	182,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	183,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	184,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	185,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	186,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	187,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	188,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	189,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	190,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	191,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	192,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	193,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	194,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	195,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	196,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	197,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	198,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	199,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	200,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	201,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	202,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	203,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	204,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	205,
									"scores":	[-8.1343888347897142]
								}, {
									"case":	206,
									"scores":	[-12.952351579989715, -13.009566059989716, -13.201015715889714, -12.554997232989715, -13.573663916889716, -12.671533415989714, -12.731866805989714]
								}]
						}, {
							"switch":	109,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	1226,
							"begin_column":	2,
							"end_line":	1229,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L1226\", 7, &(aht), sizeof (aht), &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(this_ptr), sizeof (this_ptr))) {\n    php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\");\n    return;\n}\n", "if ((!aht) || __is_neg(\"\", \"L1226\", 7, &(aht), sizeof (aht), &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(this_ptr), sizeof (this_ptr))) {\n    php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\");\n    return;\n}\n", "if ((!aht) && !__is_neg(\"\", \"L1226\", 7, &(aht), sizeof (aht), &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(this_ptr), sizeof (this_ptr))) {\n    php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\");\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5378937254281455, -4.921227371428146, -4.582126632328146, -4.4522947844281457, -5.2096511693281462, -4.5841599854281458, -4.5184468254281462]
								}, {
									"case":	2,
									"scores":	[-5.1941611354281463, -5.5774947814281459, -5.2383940423281459, -5.1085621944281456, -5.8659185793281461, -5.2404273954281457, -5.1747142354281461]
								}, {
									"case":	3,
									"scores":	[-5.1941611354281463, -5.5774947814281459, -5.2383940423281459, -5.1085621944281456, -5.8659185793281461, -5.2404273954281457, -5.1747142354281461]
								}]
						}, {
							"switch":	110,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	1226,
							"begin_column":	2,
							"end_line":	1229,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L1226\", 7, &(aht), sizeof (aht), &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(this_ptr), sizeof (this_ptr)))\n    if (!aht) {\n        php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\");\n        return;\n    }\n", "if (!__is_neg(\"\", \"L1226\", 7, &(aht), sizeof (aht), &(ht), sizeof (ht), &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(this_ptr), sizeof (this_ptr)) && (!aht)) {\n    php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\");\n    return;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.651302704789714, -11.034636350789714, -10.695535611689714, -10.565703763789713, -11.323060148689715, -10.697568964789713, -10.631855804789714]
								}, {
									"case":	2,
									"scores":	[-10.589813304789715, -10.973146950789713, -10.634046211689714, -10.504214363789714, -11.261570748689714, -10.636079564789714, -10.570366404789715]
								}]
						}]
				}, {
					"line":	1230,
					"switches":	[{
							"switch":	111,
							"types":	[[], [], [], [], [207], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [], [], [], [], [], []],
							"begin_line":	1231,
							"begin_column":	0,
							"end_line":	1231,
							"end_column":	0,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&return_value->is_ref__gc, 0, sizeof (*(&return_value->is_ref__gc)))", "memset(&return_value->refcount__gc, 0, sizeof (*(&return_value->refcount__gc)))", "memset(&return_value->type, 0, sizeof (*(&return_value->type)))", "memset(&return_value->value, 0, sizeof (*(&return_value->value)))", "memset(&return_value->value.dval, 0, sizeof (*(&return_value->value.dval)))", "memset(&return_value->value.ht, 0, sizeof (*(&return_value->value.ht)))", "memset(&return_value->value.lval, 0, sizeof (*(&return_value->value.lval)))", "memset(&return_value->value.obj, 0, sizeof (*(&return_value->value.obj)))", "memset(&return_value->value.str, 0, sizeof (*(&return_value->value.str)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(return_value, 0, sizeof (*(return_value)))", "memset(return_value->value.ht, 0, sizeof (*(return_value->value.ht)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((iterator)->array), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->debug_info))", "_efree(((iterator)->debug_info))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(return_value))))", "_zval_copy_ctor((&(*(this_ptr))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((iterator)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(iterator)->array))", "_zval_ptr_dtor((&(iterator)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long((intern)->retval)", "convert_to_long((iterator)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((intern), 0, sizeof(spl_array_object))", "memset((iterator), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(return_value)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(this_ptr)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(iterator)->std)", "return_value->type = (-1)", "return_value->type = (0)", "return_value->type = (1)", "return_value->type = (3)", "return_value->type = (5)", "return_value->type = (8)", "return_value->value.obj = spl_array_object_new_ex((intern)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((iterator)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(intern), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(iterator), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (object), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (return_value), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (this_ptr), 0)", "spl_array_rewind((intern))", "spl_array_rewind((iterator))", "spl_array_update_pos((intern))", "spl_array_update_pos((iterator))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((iterator))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(return_value)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(this_ptr)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(return_value)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(this_ptr)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((iterator)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((iterator)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(iterator)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_addref_p((intern)->array)", "zval_addref_p((iterator)->array)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_delref_p(((object)))", "zval_delref_p(((return_value)))", "zval_delref_p(((this_ptr)))", "zval_delref_p(*((return_value_ptr)))", "zval_set_isref_p((object))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p(*((return_value_ptr)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "return_value->type = 5", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, 0)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_set_isref_p(return_value)", "zval_set_refcount_p(return_value, 1)", "if (__is_neg(\"\", \"L1231\", 25, &(return_value), sizeof (return_value), &(return_value->type), sizeof (return_value->type), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(aht), sizeof (aht), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(return_value->refcount__gc), sizeof (return_value->refcount__gc), &(return_value->is_ref__gc), sizeof (return_value->is_ref__gc), &(return_value->value.obj.handle), sizeof (return_value->value.obj.handle), &(return_value->value.obj.handlers), sizeof (return_value->value.obj.handlers), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->debug_info), sizeof (intern->debug_info)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	2,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	3,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	4,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	5,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	6,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	7,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	8,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	9,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	10,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	11,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	12,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	13,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	14,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	15,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	16,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	17,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	18,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	19,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	20,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	21,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	22,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	23,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	24,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	25,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	26,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	27,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	28,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	29,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	30,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	31,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	32,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	33,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	34,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	35,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	36,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	37,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	38,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	39,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	40,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	41,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	42,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	43,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	44,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	45,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	46,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	47,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	48,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	49,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	50,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	51,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	52,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	53,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	54,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	55,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	56,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	57,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	58,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	59,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	60,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	61,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	62,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	63,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	64,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	65,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	66,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	67,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	68,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	69,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	70,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	71,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	72,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	73,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	74,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	75,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	76,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	77,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	78,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	79,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	80,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	81,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	82,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	83,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	84,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	85,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	86,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	87,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	88,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	89,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	90,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	91,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	92,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	93,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	94,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	95,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	96,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	97,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	98,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	99,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	100,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	101,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	102,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	103,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	104,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	105,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	106,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	107,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	108,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	109,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	110,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	111,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	112,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	113,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	114,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	115,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	116,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	117,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	118,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	119,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	120,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	121,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	122,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	123,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	124,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	125,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	126,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	127,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	128,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	129,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	130,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	131,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	132,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	133,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	134,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	135,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	136,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	137,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	138,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	139,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	140,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	141,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	142,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	143,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	144,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	145,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	146,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	147,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	148,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	149,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	150,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	151,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	152,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	153,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	154,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	155,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	156,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	157,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	158,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	159,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	160,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	161,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	162,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	163,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	164,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	165,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	166,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	167,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	168,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	169,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	170,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	171,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	172,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	173,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	174,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	175,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	176,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	177,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	178,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	179,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	180,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	181,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	182,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	183,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	184,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	185,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	186,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	187,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	188,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	189,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	190,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	191,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	192,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	193,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	194,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	195,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	196,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	197,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	198,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	199,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	200,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	201,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	202,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	203,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	204,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	205,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	206,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	207,
									"scores":	[-10.497117842572194, -11.063996075872195, -10.619868825672194, -11.638535509572193, -10.736405008672193, -11.176429825672194, -11.017223172672194, -11.074437652672195, -10.796738398672195, -11.327745258872195, -11.327745258872195, -11.327745258872195, -11.573784172672195, -11.573784172672195, -11.573784172672195, -11.573784172672195, -11.327745258872195, -11.327745258872195, -11.327745258872195, -11.538634375872196, -11.538634375872196, -11.538634375872196, -11.538634375872196, -11.538634375872196, -11.573784172672195]
								}]
						}, {
							"switch":	112,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1231,
							"begin_column":	2,
							"end_line":	1231,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L1231\", 25, &(return_value), sizeof (return_value), &(return_value->type), sizeof (return_value->type), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(aht), sizeof (aht), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(return_value->refcount__gc), sizeof (return_value->refcount__gc), &(return_value->is_ref__gc), sizeof (return_value->is_ref__gc), &(return_value->value.obj.handle), sizeof (return_value->value.obj.handle), &(return_value->value.obj.handlers), sizeof (return_value->value.obj.handlers), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->debug_info), sizeof (intern->debug_info)))\n    return_value->type = 5;\n", "{\n}\n", "return_value->type = (-1)", "return_value->type = (0 * ht)", "return_value->type = (0 * return_value_used)", "return_value->type = (0)", "return_value->type = (1)", "return_value->type = (3)", "return_value->type = (5)", "return_value->type = (8)", "return_value->type = (aht != 0)", "return_value->type = (aht == 0)", "return_value->type = (ht != 0)", "return_value->type = (ht != return_value_used)", "return_value->type = (ht * return_value_used)", "return_value->type = (ht + 0)", "return_value->type = (ht + return_value_used)", "return_value->type = (ht - 0)", "return_value->type = (ht - return_value_used)", "return_value->type = (ht == 0)", "return_value->type = (ht == return_value_used)", "return_value->type = (intern != 0)", "return_value->type = (intern != iterator)", "return_value->type = (intern == 0)", "return_value->type = (intern == iterator)", "return_value->type = (iterator != 0)", "return_value->type = (iterator == 0)", "return_value->type = (object != 0)", "return_value->type = (object == 0)", "return_value->type = (return_value != 0)", "return_value->type = (return_value != object)", "return_value->type = (return_value != this_ptr)", "return_value->type = (return_value == 0)", "return_value->type = (return_value == object)", "return_value->type = (return_value == this_ptr)", "return_value->type = (return_value_ptr != 0)", "return_value->type = (return_value_ptr == 0)", "return_value->type = (return_value_used != 0)", "return_value->type = (return_value_used * ht)", "return_value->type = (return_value_used + 0)", "return_value->type = (return_value_used - 0)", "return_value->type = (return_value_used == 0)", "return_value->type = (this_ptr != 0)", "return_value->type = (this_ptr != object)", "return_value->type = (this_ptr == 0)", "return_value->type = (this_ptr == object)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.4422602043721948, -9.6279148284721945, -8.1040840664721951, -9.0661387513721934, -8.4940336674721948, -8.3151311764721942, -9.3980272974721952, -9.781360943472194, -9.3785803974721951, -8.8511863074721937, -8.8511863074721937, -8.8511863074721937, -9.6090744074721943, -9.6090744074721943, -9.6090744074721943, -9.6090744074721943, -8.8511863074721937, -8.8511863074721937, -8.8511863074721937, -9.3204463074721939, -9.3204463074721939, -9.3204463074721939, -9.3204463074721939, -9.3204463074721939, -9.6090744074721943]
								}, {
									"case":	2,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	3,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	4,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	5,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	6,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	7,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	8,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	9,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	10,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	11,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	12,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	13,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	14,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	15,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	16,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	17,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	18,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	19,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	20,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	21,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	22,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	23,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	24,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	25,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	26,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	27,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	28,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	29,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	30,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	31,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	32,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	33,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	34,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	35,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	36,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	37,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	38,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	39,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	40,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	41,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	42,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	43,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	44,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	45,
									"scores":	[-8.1141861274721947]
								}, {
									"case":	46,
									"scores":	[-8.1141861274721947]
								}]
						}]
				}, {
					"line":	1231,
					"switches":	[{
							"switch":	113,
							"types":	[[], [], [], [], [208], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [], [], [], [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], [], [], [], [], [], []],
							"begin_line":	1232,
							"begin_column":	0,
							"end_line":	1232,
							"end_column":	0,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&return_value->is_ref__gc, 0, sizeof (*(&return_value->is_ref__gc)))", "memset(&return_value->refcount__gc, 0, sizeof (*(&return_value->refcount__gc)))", "memset(&return_value->type, 0, sizeof (*(&return_value->type)))", "memset(&return_value->value, 0, sizeof (*(&return_value->value)))", "memset(&return_value->value.dval, 0, sizeof (*(&return_value->value.dval)))", "memset(&return_value->value.ht, 0, sizeof (*(&return_value->value.ht)))", "memset(&return_value->value.lval, 0, sizeof (*(&return_value->value.lval)))", "memset(&return_value->value.obj, 0, sizeof (*(&return_value->value.obj)))", "memset(&return_value->value.str, 0, sizeof (*(&return_value->value.str)))", "memset(intern, 0, sizeof (*(intern)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(return_value, 0, sizeof (*(return_value)))", "memset(return_value->value.ht, 0, sizeof (*(return_value->value.ht)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((iterator)->array), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->debug_info))", "_efree(((iterator)->debug_info))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(return_value))))", "_zval_copy_ctor((&(*(this_ptr))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((iterator)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(iterator)->array))", "_zval_ptr_dtor((&(iterator)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long((intern)->retval)", "convert_to_long((iterator)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((intern), 0, sizeof(spl_array_object))", "memset((iterator), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(return_value)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(this_ptr)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(iterator)->std)", "return_value->type = (-1)", "return_value->type = (0)", "return_value->type = (1)", "return_value->type = (3)", "return_value->type = (5)", "return_value->type = (8)", "return_value->value.obj = spl_array_object_new_ex((intern)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((iterator)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(intern), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(iterator), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (object), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (return_value), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (this_ptr), 0)", "spl_array_rewind((intern))", "spl_array_rewind((iterator))", "spl_array_update_pos((intern))", "spl_array_update_pos((iterator))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((iterator))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(return_value)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(this_ptr)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(return_value)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(this_ptr)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((iterator)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((iterator)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(iterator)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_addref_p((intern)->array)", "zval_addref_p((iterator)->array)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_delref_p(((object)))", "zval_delref_p(((return_value)))", "zval_delref_p(((this_ptr)))", "zval_delref_p(*((return_value_ptr)))", "zval_set_isref_p((object))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p(*((return_value_ptr)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "return_value->type = 5", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, 0)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_set_isref_p(return_value)", "zval_set_refcount_p(return_value, 1)", "if (__is_neg(\"\", \"L1232\", 25, &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(return_value->type), sizeof (return_value->type), &(aht), sizeof (aht), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(return_value->refcount__gc), sizeof (return_value->refcount__gc), &(return_value->is_ref__gc), sizeof (return_value->is_ref__gc), &(return_value->value.obj.handle), sizeof (return_value->value.obj.handle), &(return_value->value.obj.handlers), sizeof (return_value->value.obj.handlers), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->debug_info), sizeof (intern->debug_info)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	2,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	3,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	4,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	5,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	6,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	7,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	8,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	9,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	10,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	11,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	12,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	13,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	14,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	15,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	16,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	17,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	18,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	19,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	20,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	21,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	22,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	23,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	24,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	25,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	26,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	27,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	28,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	29,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	30,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	31,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	32,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	33,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	34,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	35,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	36,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	37,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	38,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	39,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	40,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	41,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	42,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	43,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	44,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	45,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	46,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	47,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	48,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	49,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	50,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	51,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	52,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	53,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	54,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	55,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	56,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	57,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	58,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	59,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	60,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	61,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	62,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	63,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	64,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	65,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	66,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	67,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	68,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	69,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	70,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	71,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	72,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	73,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	74,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	75,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	76,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	77,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	78,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	79,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	80,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	81,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	82,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	83,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	84,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	85,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	86,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	87,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	88,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	89,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	90,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	91,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	92,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	93,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	94,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	95,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	96,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	97,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	98,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	99,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	100,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	101,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	102,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	103,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	104,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	105,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	106,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	107,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	108,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	109,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	110,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	111,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	112,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	113,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	114,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	115,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	116,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	117,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	118,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	119,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	120,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	121,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	122,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	123,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	124,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	125,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	126,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	127,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	128,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	129,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	130,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	131,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	132,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	133,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	134,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	135,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	136,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	137,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	138,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	139,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	140,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	141,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	142,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	143,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	144,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	145,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	146,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	147,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	148,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	149,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	150,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	151,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	152,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	153,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	154,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	155,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	156,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	157,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	158,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	159,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	160,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	161,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	162,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	163,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	164,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	165,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	166,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	167,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	168,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	169,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	170,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	171,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	172,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	173,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	174,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	175,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	176,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	177,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	178,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	179,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	180,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	181,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	182,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	183,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	184,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	185,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	186,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	187,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	188,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	189,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	190,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	191,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	192,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	193,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	194,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	195,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	196,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	197,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	198,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	199,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	200,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	201,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	202,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	203,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	204,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	205,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	206,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	207,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	208,
									"scores":	[-11.231252555254676, -8.858393496354676, -10.849692634254675, -9.7001596213546755, -9.4149544963546745, -10.490033386554675, -11.430169465354675, -11.487383945354676, -11.209684691354676, -11.740691551554676, -11.740691551554676, -11.740691551554676, -11.986730465354675, -11.986730465354675, -11.986730465354675, -11.986730465354675, -11.740691551554676, -11.740691551554676, -11.740691551554676, -11.951580668554676, -11.951580668554676, -11.951580668554676, -11.951580668554676, -11.951580668554676, -11.986730465354675]
								}]
						}, {
							"switch":	114,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	1232,
							"begin_column":	2,
							"end_line":	1232,
							"end_column":	107,
							"patch_codes":	["if (!__is_neg(\"\", \"L1232\", 25, &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(return_value->type), sizeof (return_value->type), &(aht), sizeof (aht), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(return_value->refcount__gc), sizeof (return_value->refcount__gc), &(return_value->is_ref__gc), sizeof (return_value->is_ref__gc), &(return_value->value.obj.handle), sizeof (return_value->value.obj.handle), &(return_value->value.obj.handlers), sizeof (return_value->value.obj.handlers), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->debug_info), sizeof (intern->debug_info)))\n    return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, 0);\n", "{\n}\n", "return_value->value.obj = spl_array_object_new_ex((&aht)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((&ht)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((&intern)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((&iterator)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((&object)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((&return_value)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((&return_value_ptr)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((&return_value_used)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((&this_ptr)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((intern)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((iterator)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&aht), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&ht), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&intern), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&iterator), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&object), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&return_value), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&return_value_ptr), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&return_value_used), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(&this_ptr), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(intern), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(iterator), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&aht), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&ht), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&intern), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&iterator), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&object), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&return_value), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&return_value_ptr), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&return_value_used), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (&this_ptr), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (object), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (return_value), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (this_ptr), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (0 * ht))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (0 * return_value_used))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (aht != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (aht == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht != return_value_used))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht * return_value_used))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht + 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht + return_value_used))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht - 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht - return_value_used))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (ht == return_value_used))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (intern != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (intern != iterator))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (intern == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (intern == iterator))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (iterator != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (iterator == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (object != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (object == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value != object))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value != this_ptr))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value == object))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value == this_ptr))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value_ptr != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value_ptr == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value_used != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value_used * ht))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value_used + 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value_used - 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (return_value_used == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (this_ptr != 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (this_ptr != object))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (this_ptr == 0))", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, (this_ptr == object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5892113996546762, -8.5968923001546749, -8.8015906001546753, -8.5411790001546759, -8.8079394101546757, -9.2931477401546747, -9.8052365901546743, -10.188570236154675, -9.7857896901546759, -9.2583956001546746, -9.2583956001546746, -9.2583956001546746, -10.016283700154675, -10.016283700154675, -10.016283700154675, -10.016283700154675, -9.2583956001546746, -9.2583956001546746, -9.2583956001546746, -9.7276556001546748, -9.7276556001546748, -9.7276556001546748, -9.7276556001546748, -9.7276556001546748, -10.016283700154675]
								}, {
									"case":	2,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	3,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	4,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	5,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	6,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	7,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	8,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	9,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	10,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	11,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	12,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	13,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	14,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	15,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	16,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	17,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	18,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	19,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	20,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	21,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	22,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	23,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	24,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	25,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	26,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	27,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	28,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	29,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	30,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	31,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	32,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	33,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	34,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	35,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	36,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	37,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	38,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	39,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	40,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	41,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	42,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	43,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	44,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	45,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	46,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	47,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	48,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	49,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	50,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	51,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	52,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	53,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	54,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	55,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	56,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	57,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	58,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	59,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	60,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	61,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	62,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	63,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	64,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	65,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	66,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	67,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	68,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	69,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	70,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	71,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	72,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	73,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	74,
									"scores":	[-8.0939834201546752]
								}, {
									"case":	75,
									"scores":	[-8.0939834201546752]
								}]
						}]
				}, {
					"line":	1232,
					"switches":	[{
							"switch":	115,
							"types":	[[], [], [], [], [207], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [], [], [], [], [], []],
							"begin_line":	1233,
							"begin_column":	0,
							"end_line":	1233,
							"end_column":	0,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&return_value->is_ref__gc, 0, sizeof (*(&return_value->is_ref__gc)))", "memset(&return_value->refcount__gc, 0, sizeof (*(&return_value->refcount__gc)))", "memset(&return_value->type, 0, sizeof (*(&return_value->type)))", "memset(&return_value->value, 0, sizeof (*(&return_value->value)))", "memset(&return_value->value.dval, 0, sizeof (*(&return_value->value.dval)))", "memset(&return_value->value.ht, 0, sizeof (*(&return_value->value.ht)))", "memset(&return_value->value.lval, 0, sizeof (*(&return_value->value.lval)))", "memset(&return_value->value.obj, 0, sizeof (*(&return_value->value.obj)))", "memset(&return_value->value.str, 0, sizeof (*(&return_value->value.str)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(return_value, 0, sizeof (*(return_value)))", "memset(return_value->value.ht, 0, sizeof (*(return_value->value.ht)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((iterator)->array), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->debug_info))", "_efree(((iterator)->debug_info))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(return_value))))", "_zval_copy_ctor((&(*(this_ptr))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((iterator)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(iterator)->array))", "_zval_ptr_dtor((&(iterator)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long((intern)->retval)", "convert_to_long((iterator)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((intern), 0, sizeof(spl_array_object))", "memset((iterator), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(return_value)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(this_ptr)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(iterator)->std)", "return_value->type = (-1)", "return_value->type = (0)", "return_value->type = (1)", "return_value->type = (3)", "return_value->type = (5)", "return_value->type = (8)", "return_value->value.obj = spl_array_object_new_ex((intern)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((iterator)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(intern), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(iterator), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (object), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (return_value), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (this_ptr), 0)", "spl_array_rewind((intern))", "spl_array_rewind((iterator))", "spl_array_update_pos((intern))", "spl_array_update_pos((iterator))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((iterator))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(return_value)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(this_ptr)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(return_value)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(this_ptr)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((iterator)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((iterator)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(iterator)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_addref_p((intern)->array)", "zval_addref_p((iterator)->array)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_delref_p(((object)))", "zval_delref_p(((return_value)))", "zval_delref_p(((this_ptr)))", "zval_delref_p(*((return_value_ptr)))", "zval_set_isref_p((object))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p(*((return_value_ptr)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "return_value->type = 5", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, 0)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_set_isref_p(return_value)", "zval_set_refcount_p(return_value, 1)", "if (__is_neg(\"\", \"L1233\", 25, &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(return_value->type), sizeof (return_value->type), &(aht), sizeof (aht), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(return_value->refcount__gc), sizeof (return_value->refcount__gc), &(return_value->is_ref__gc), sizeof (return_value->is_ref__gc), &(return_value->value.obj.handle), sizeof (return_value->value.obj.handle), &(return_value->value.obj.handlers), sizeof (return_value->value.obj.handlers), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->debug_info), sizeof (intern->debug_info)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	2,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	3,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	4,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	5,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	6,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	7,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	8,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	9,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	10,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	11,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	12,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	13,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	14,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	15,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	16,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	17,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	18,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	19,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	20,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	21,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	22,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	23,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	24,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	25,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	26,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	27,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	28,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	29,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	30,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	31,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	32,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	33,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	34,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	35,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	36,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	37,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	38,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	39,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	40,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	41,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	42,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	43,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	44,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	45,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	46,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	47,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	48,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	49,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	50,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	51,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	52,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	53,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	54,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	55,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	56,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	57,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	58,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	59,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	60,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	61,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	62,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	63,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	64,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	65,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	66,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	67,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	68,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	69,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	70,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	71,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	72,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	73,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	74,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	75,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	76,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	77,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	78,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	79,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	80,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	81,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	82,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	83,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	84,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	85,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	86,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	87,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	88,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	89,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	90,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	91,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	92,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	93,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	94,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	95,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	96,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	97,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	98,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	99,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	100,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	101,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	102,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	103,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	104,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	105,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	106,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	107,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	108,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	109,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	110,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	111,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	112,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	113,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	114,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	115,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	116,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	117,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	118,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	119,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	120,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	121,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	122,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	123,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	124,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	125,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	126,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	127,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	128,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	129,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	130,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	131,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	132,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	133,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	134,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	135,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	136,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	137,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	138,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	139,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	140,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	141,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	142,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	143,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	144,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	145,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	146,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	147,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	148,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	149,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	150,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	151,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	152,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	153,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	154,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	155,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	156,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	157,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	158,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	159,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	160,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	161,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	162,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	163,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	164,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	165,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	166,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	167,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	168,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	169,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	170,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	171,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	172,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	173,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	174,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	175,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	176,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	177,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	178,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	179,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	180,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	181,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	182,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	183,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	184,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	185,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	186,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	187,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	188,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	189,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	190,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	191,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	192,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	193,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	194,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	195,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	196,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	197,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	198,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	199,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	200,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	201,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	202,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	203,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	204,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	205,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	206,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	207,
									"scores":	[-10.0734854130846, -10.634128536084596, -11.164944396084596, -10.014744922084596, -11.1906895360846, -9.8879536572845961, -10.828089736084596, -10.865190136084596, -10.607604962084597, -11.138611822284597, -11.138611822284597, -11.138611822284597, -11.3846507360846, -11.3846507360846, -11.3846507360846, -11.3846507360846, -11.138611822284597, -11.138611822284597, -11.138611822284597, -11.3495009392846, -11.3495009392846, -11.3495009392846, -11.3495009392846, -11.3495009392846, -11.3846507360846]
								}]
						}, {
							"switch":	116,
							"types":	[[], [], [1], [], [], [], [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [], [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [], [], [80]],
							"begin_line":	1233,
							"begin_column":	2,
							"end_line":	1233,
							"end_column":	34,
							"patch_codes":	["if (!__is_neg(\"\", \"L1233\", 25, &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(intern->ce_get_iterator), sizeof (intern->ce_get_iterator), &(return_value->type), sizeof (return_value->type), &(aht), sizeof (aht), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(return_value->refcount__gc), sizeof (return_value->refcount__gc), &(return_value->is_ref__gc), sizeof (return_value->is_ref__gc), &(return_value->value.obj.handle), sizeof (return_value->value.obj.handle), &(return_value->value.obj.handlers), sizeof (return_value->value.obj.handlers), &(intern->array), sizeof (intern->array), &(intern->retval), sizeof (intern->retval), &(intern->pos), sizeof (intern->pos), &(intern->pos_h), sizeof (intern->pos_h), &(intern->ar_flags), sizeof (intern->ar_flags), &(intern->is_self), sizeof (intern->is_self), &(intern->fptr_offset_get), sizeof (intern->fptr_offset_get), &(intern->fptr_offset_set), sizeof (intern->fptr_offset_set), &(intern->fptr_offset_has), sizeof (intern->fptr_offset_has), &(intern->fptr_offset_del), sizeof (intern->fptr_offset_del), &(intern->fptr_count), sizeof (intern->fptr_count), &(intern->debug_info), sizeof (intern->debug_info)))\n    zval_set_refcount_p(return_value, 1);\n", "chown(return_value, 1, -1)", "chown(return_value, 1, 0)", "chown(return_value, 1, 1)", "chown(return_value, 1, 3)", "chown(return_value, 1, 5)", "chown(return_value, 1, 8)", "lchown(return_value, 1, -1)", "lchown(return_value, 1, 0)", "lchown(return_value, 1, 1)", "lchown(return_value, 1, 3)", "lchown(return_value, 1, 5)", "lchown(return_value, 1, 8)", "mknod(return_value, 1, -1)", "mknod(return_value, 1, 0)", "mknod(return_value, 1, 1)", "mknod(return_value, 1, 3)", "mknod(return_value, 1, 5)", "mknod(return_value, 1, 8)", "zend_fetch_class(return_value, 1, -1)", "zend_fetch_class(return_value, 1, 0)", "zend_fetch_class(return_value, 1, 1)", "zend_fetch_class(return_value, 1, 3)", "zend_fetch_class(return_value, 1, 5)", "zend_fetch_class(return_value, 1, 8)", "zend_fetch_class(return_value, 1, ht)", "zend_fetch_class(return_value, 1, le_index_ptr)", "zend_fetch_class(return_value, 1, return_value_used)", "zend_get_compiled_variable_name(return_value, 1, 0)", "zend_get_configuration_directive(return_value, 1, 0)", "zend_get_configuration_directive(return_value, 1, object)", "zend_get_configuration_directive(return_value, 1, return_value)", "zend_get_configuration_directive(return_value, 1, this_ptr)", "zend_get_constant(return_value, 1, 0)", "zend_get_constant(return_value, 1, object)", "zend_get_constant(return_value, 1, return_value)", "zend_get_constant(return_value, 1, this_ptr)", "zend_ini_double(return_value, 1, -1)", "zend_ini_double(return_value, 1, 0)", "zend_ini_double(return_value, 1, 1)", "zend_ini_double(return_value, 1, 3)", "zend_ini_double(return_value, 1, 5)", "zend_ini_double(return_value, 1, 8)", "zend_ini_double(return_value, 1, ht)", "zend_ini_double(return_value, 1, le_index_ptr)", "zend_ini_double(return_value, 1, return_value_used)", "zend_ini_long(return_value, 1, -1)", "zend_ini_long(return_value, 1, 0)", "zend_ini_long(return_value, 1, 1)", "zend_ini_long(return_value, 1, 3)", "zend_ini_long(return_value, 1, 5)", "zend_ini_long(return_value, 1, 8)", "zend_ini_long(return_value, 1, ht)", "zend_ini_long(return_value, 1, le_index_ptr)", "zend_ini_long(return_value, 1, return_value_used)", "zend_ini_register_displayer(return_value, 1, 0)", "zend_ini_register_displayer(return_value, 1, display_link_numbers)", "zend_ini_register_displayer(return_value, 1, zend_ini_boolean_displayer_cb)", "zend_ini_register_displayer(return_value, 1, zend_ini_color_displayer_cb)", "zend_ini_string(return_value, 1, -1)", "zend_ini_string(return_value, 1, 0)", "zend_ini_string(return_value, 1, 1)", "zend_ini_string(return_value, 1, 3)", "zend_ini_string(return_value, 1, 5)", "zend_ini_string(return_value, 1, 8)", "zend_ini_string(return_value, 1, ht)", "zend_ini_string(return_value, 1, le_index_ptr)", "zend_ini_string(return_value, 1, return_value_used)", "zend_is_callable(return_value, 1, 0)", "zend_is_callable(return_value, 1, environ)", "zend_restore_ini_entry(return_value, 1, -1)", "zend_restore_ini_entry(return_value, 1, 0)", "zend_restore_ini_entry(return_value, 1, 1)", "zend_restore_ini_entry(return_value, 1, 3)", "zend_restore_ini_entry(return_value, 1, 5)", "zend_restore_ini_entry(return_value, 1, 8)", "zend_restore_ini_entry(return_value, 1, ht)", "zend_restore_ini_entry(return_value, 1, le_index_ptr)", "zend_restore_ini_entry(return_value, 1, return_value_used)", "{\n}\n", "Debug(return_value, 1)", "_array_init(return_value, 1)", "_estrndup(return_value, 1)", "_zend_bailout(return_value, 1)", "cfg_get_entry(return_value, 1)", "chmod(return_value, 1)", "lchmod(return_value, 1)", "mkdir(return_value, 1)", "mkfifo(return_value, 1)", "php_ini_activate_per_dir_config(return_value, 1)", "php_ini_activate_per_host_config(return_value, 1)", "php_printf(return_value, 1)", "php_write(return_value, 1)", "printf(return_value, 1)", "virtual_chmod(return_value, 1)", "virtual_creat(return_value, 1)", "virtual_mkdir(return_value, 1)", "wprintf(return_value, 1)", "zend_disable_class(return_value, 1)", "zend_disable_function(return_value, 1)", "zend_get_class_fetch_type(return_value, 1)", "zend_get_compiled_variable_value(return_value, 1)", "zend_get_hash_value(return_value, 1)", "zend_hash_func(return_value, 1)", "zend_html_puts(return_value, 1)", "zend_inline_hash_func(return_value, 1)", "zend_is_auto_global(return_value, 1)", "zend_objects_destroy_object(return_value, 1)", "zend_objects_store_init(return_value, 1)", "zend_str_tolower(return_value, 1)", "zend_str_tolower_dup(return_value, 1)", "zend_string_to_double(return_value, 1)", "zend_strndup(return_value, 1)", "zend_ts_hash_func(return_value, 1)", "zval_set_refcount_p((&aht), 1)", "zval_set_refcount_p((&ht), 1)", "zval_set_refcount_p((&intern), 1)", "zval_set_refcount_p((&iterator), 1)", "zval_set_refcount_p((&object), 1)", "zval_set_refcount_p((&return_value), 1)", "zval_set_refcount_p((&return_value_ptr), 1)", "zval_set_refcount_p((&return_value_used), 1)", "zval_set_refcount_p((&this_ptr), 1)", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_set_refcount_p(return_value, (0 * ht))", "zval_set_refcount_p(return_value, (0 * return_value_used))", "zval_set_refcount_p(return_value, (0))", "zval_set_refcount_p(return_value, (aht != 0))", "zval_set_refcount_p(return_value, (aht == 0))", "zval_set_refcount_p(return_value, (ht != 0))", "zval_set_refcount_p(return_value, (ht != return_value_used))", "zval_set_refcount_p(return_value, (ht * return_value_used))", "zval_set_refcount_p(return_value, (ht + 0))", "zval_set_refcount_p(return_value, (ht + return_value_used))", "zval_set_refcount_p(return_value, (ht - 0))", "zval_set_refcount_p(return_value, (ht - return_value_used))", "zval_set_refcount_p(return_value, (ht == 0))", "zval_set_refcount_p(return_value, (ht == return_value_used))", "zval_set_refcount_p(return_value, (intern != 0))", "zval_set_refcount_p(return_value, (intern != iterator))", "zval_set_refcount_p(return_value, (intern == 0))", "zval_set_refcount_p(return_value, (intern == iterator))", "zval_set_refcount_p(return_value, (iterator != 0))", "zval_set_refcount_p(return_value, (iterator == 0))", "zval_set_refcount_p(return_value, (object != 0))", "zval_set_refcount_p(return_value, (object == 0))", "zval_set_refcount_p(return_value, (return_value != 0))", "zval_set_refcount_p(return_value, (return_value != object))", "zval_set_refcount_p(return_value, (return_value != this_ptr))", "zval_set_refcount_p(return_value, (return_value == 0))", "zval_set_refcount_p(return_value, (return_value == object))", "zval_set_refcount_p(return_value, (return_value == this_ptr))", "zval_set_refcount_p(return_value, (return_value_ptr != 0))", "zval_set_refcount_p(return_value, (return_value_ptr == 0))", "zval_set_refcount_p(return_value, (return_value_used != 0))", "zval_set_refcount_p(return_value, (return_value_used * ht))", "zval_set_refcount_p(return_value, (return_value_used + 0))", "zval_set_refcount_p(return_value, (return_value_used - 0))", "zval_set_refcount_p(return_value, (return_value_used == 0))", "zval_set_refcount_p(return_value, (this_ptr != 0))", "zval_set_refcount_p(return_value, (this_ptr != object))", "zval_set_refcount_p(return_value, (this_ptr == 0))", "zval_set_refcount_p(return_value, (this_ptr == object))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.090138860384597, -9.6370409068845966, -9.8741193513845964, -9.0382875848845963, -9.8480880168846, -9.4065322108845972, -9.9186210608845968, -10.212971860884597, -9.8991741608845967, -9.3717800708845971, -9.3717800708845971, -9.3717800708845971, -10.1296681708846, -10.1296681708846, -10.1296681708846, -10.1296681708846, -9.3717800708845971, -9.3717800708845971, -9.3717800708845971, -9.8410400708845973, -9.8410400708845973, -9.8410400708845973, -9.8410400708845973, -9.8410400708845973, -10.1296681708846]
								}, {
									"case":	2,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	3,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	4,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	5,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	6,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	7,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	8,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	9,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	10,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	11,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	12,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	13,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	14,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	15,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	16,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	17,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	18,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	19,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	20,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	21,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	22,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	23,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	24,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	25,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	26,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	27,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	28,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	29,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	30,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	31,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	32,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	33,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	34,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	35,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	36,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	37,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	38,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	39,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	40,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	41,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	42,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	43,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	44,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	45,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	46,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	47,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	48,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	49,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	50,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	51,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	52,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	53,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	54,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	55,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	56,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	57,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	58,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	59,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	60,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	61,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	62,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	63,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	64,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	65,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	66,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	67,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	68,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	69,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	70,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	71,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	72,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	73,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	74,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	75,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	76,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	77,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	78,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	79,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	80,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	81,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	82,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	83,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	84,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	85,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	86,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	87,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	88,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	89,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	90,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	91,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	92,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	93,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	94,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	95,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	96,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	97,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	98,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	99,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	100,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	101,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	102,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	103,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	104,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	105,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	106,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	107,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	108,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	109,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	110,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	111,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	112,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	113,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	114,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	115,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	116,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	117,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	118,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	119,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	120,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	121,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	122,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	123,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	124,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	125,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	126,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	127,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	128,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	129,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	130,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	131,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	132,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	133,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	134,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	135,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	136,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	137,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	138,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	139,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	140,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	141,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	142,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	143,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	144,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	145,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	146,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	147,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	148,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	149,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	150,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	151,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	152,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	153,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	154,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	155,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	156,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	157,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	158,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	159,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	160,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	161,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	162,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	163,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	164,
									"scores":	[-8.0131725908845972]
								}, {
									"case":	165,
									"scores":	[-8.0131725908845972]
								}]
						}]
				}, {
					"line":	1233,
					"switches":	[{
							"switch":	117,
							"types":	[[], [], [], [], [207], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], [], [], [], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [], [], [], [], [], []],
							"begin_line":	1234,
							"begin_column":	0,
							"end_line":	1234,
							"end_column":	0,
							"patch_codes":	["memset(&intern->ar_flags, 0, sizeof (*(&intern->ar_flags)))", "memset(&intern->array, 0, sizeof (*(&intern->array)))", "memset(&intern->ce_get_iterator, 0, sizeof (*(&intern->ce_get_iterator)))", "memset(&intern->debug_info, 0, sizeof (*(&intern->debug_info)))", "memset(&intern->fptr_count, 0, sizeof (*(&intern->fptr_count)))", "memset(&intern->fptr_offset_del, 0, sizeof (*(&intern->fptr_offset_del)))", "memset(&intern->fptr_offset_get, 0, sizeof (*(&intern->fptr_offset_get)))", "memset(&intern->fptr_offset_has, 0, sizeof (*(&intern->fptr_offset_has)))", "memset(&intern->fptr_offset_set, 0, sizeof (*(&intern->fptr_offset_set)))", "memset(&intern->is_self, 0, sizeof (*(&intern->is_self)))", "memset(&intern->pos, 0, sizeof (*(&intern->pos)))", "memset(&intern->pos_h, 0, sizeof (*(&intern->pos_h)))", "memset(&intern->retval, 0, sizeof (*(&intern->retval)))", "memset(&intern->std, 0, sizeof (*(&intern->std)))", "memset(&return_value->is_ref__gc, 0, sizeof (*(&return_value->is_ref__gc)))", "memset(&return_value->refcount__gc, 0, sizeof (*(&return_value->refcount__gc)))", "memset(&return_value->type, 0, sizeof (*(&return_value->type)))", "memset(&return_value->value, 0, sizeof (*(&return_value->value)))", "memset(&return_value->value.dval, 0, sizeof (*(&return_value->value.dval)))", "memset(&return_value->value.ht, 0, sizeof (*(&return_value->value.ht)))", "memset(&return_value->value.lval, 0, sizeof (*(&return_value->value.lval)))", "memset(&return_value->value.obj, 0, sizeof (*(&return_value->value.obj)))", "memset(&return_value->value.str, 0, sizeof (*(&return_value->value.str)))", "memset(intern->array, 0, sizeof (*(intern->array)))", "memset(intern->ce_get_iterator, 0, sizeof (*(intern->ce_get_iterator)))", "memset(intern->debug_info, 0, sizeof (*(intern->debug_info)))", "memset(intern->fptr_count, 0, sizeof (*(intern->fptr_count)))", "memset(intern->fptr_offset_del, 0, sizeof (*(intern->fptr_offset_del)))", "memset(intern->fptr_offset_get, 0, sizeof (*(intern->fptr_offset_get)))", "memset(intern->fptr_offset_has, 0, sizeof (*(intern->fptr_offset_has)))", "memset(intern->fptr_offset_set, 0, sizeof (*(intern->fptr_offset_set)))", "memset(intern->pos, 0, sizeof (*(intern->pos)))", "memset(intern->retval, 0, sizeof (*(intern->retval)))", "memset(return_value, 0, sizeof (*(return_value)))", "memset(return_value->value.ht, 0, sizeof (*(return_value->value.ht)))", "(aht)->nApplyCount++", "(aht)->nApplyCount--", "_array_init(((intern)->array), 0)", "_array_init(((iterator)->array), 0)", "_array_init(((object)), 0)", "_array_init(((return_value)), 0)", "_array_init(((this_ptr)), 0)", "_efree(((intern)->debug_info))", "_efree(((iterator)->debug_info))", "_efree(((object)))", "_efree(((return_value)))", "_efree(((this_ptr)))", "_zval_copy_ctor((&(*(object))))", "_zval_copy_ctor((&(*(return_value))))", "_zval_copy_ctor((&(*(this_ptr))))", "_zval_copy_ctor(((intern)->retval))", "_zval_copy_ctor(((iterator)->retval))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((return_value)))", "_zval_copy_ctor(((this_ptr)))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((return_value))", "_zval_copy_ctor_func((this_ptr))", "_zval_dtor(((object)))", "_zval_dtor(((return_value)))", "_zval_dtor(((this_ptr)))", "_zval_dtor_func((object))", "_zval_dtor_func((return_value))", "_zval_dtor_func((this_ptr))", "_zval_ptr_dtor((&(intern)->array))", "_zval_ptr_dtor((&(intern)->retval))", "_zval_ptr_dtor((&(iterator)->array))", "_zval_ptr_dtor((&(iterator)->retval))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(return_value)))", "_zval_ptr_dtor((&(this_ptr)))", "_zval_ptr_dtor((&*(return_value_ptr)))", "convert_to_boolean((object))", "convert_to_boolean((return_value))", "convert_to_boolean((this_ptr))", "convert_to_long((intern)->retval)", "convert_to_long((iterator)->retval)", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((return_value))", "gc_remove_zval_from_buffer((this_ptr))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((return_value)))", "gc_zval_check_possible_root(((this_ptr)))", "gc_zval_possible_root((object))", "gc_zval_possible_root((return_value))", "gc_zval_possible_root((this_ptr))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((return_value))", "i_zval_ptr_dtor((this_ptr))", "memset((intern), 0, sizeof(spl_array_object))", "memset((iterator), 0, sizeof(spl_array_object))", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(object)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(return_value)))->name)", "php_error_docref0(((void *)0), (1 << 12L), \"Cannot append properties to objects, use %s::offsetSet() instead\", zend_get_class_entry(&(*(this_ptr)))->name)", "rebuild_object_properties(&(intern)->std)", "rebuild_object_properties(&(iterator)->std)", "return_value->type = (-1)", "return_value->type = (0)", "return_value->type = (1)", "return_value->type = (3)", "return_value->type = (5)", "return_value->type = (8)", "return_value->value.obj = spl_array_object_new_ex((intern)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex((iterator)->ce_get_iterator, &iterator, object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(intern), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &(iterator), object, 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (object), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (return_value), 0)", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, (this_ptr), 0)", "spl_array_rewind((intern))", "spl_array_rewind((iterator))", "spl_array_update_pos((intern))", "spl_array_update_pos((iterator))", "spl_hash_verify_pos((intern))", "spl_hash_verify_pos((iterator))", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(return_value)).value.str.val)", "zend_error((1 << 3L), \"Undefined index:  %s\", (*(this_ptr)).value.str.val)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(object)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(return_value)).value.lval)", "zend_error((1 << 3L), \"Undefined offset:  %ld\", (*(this_ptr)).value.lval)", "zend_hash_clean((intern)->debug_info)", "zend_hash_clean((iterator)->debug_info)", "zend_hash_destroy((intern)->debug_info)", "zend_hash_destroy((iterator)->debug_info)", "zend_object_std_dtor(&(intern)->std)", "zend_object_std_dtor(&(iterator)->std)", "zval_add_ref(&(object))", "zval_add_ref(&(return_value))", "zval_add_ref(&(this_ptr))", "zval_addref_p((intern)->array)", "zval_addref_p((iterator)->array)", "zval_addref_p((object))", "zval_addref_p((return_value))", "zval_addref_p((this_ptr))", "zval_delref_p(((object)))", "zval_delref_p(((return_value)))", "zval_delref_p(((this_ptr)))", "zval_delref_p(*((return_value_ptr)))", "zval_set_isref_p((object))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))", "zval_set_isref_p(*((return_value_ptr)))", "zval_set_refcount_p((object), 1)", "zval_set_refcount_p((return_value), 1)", "zval_set_refcount_p((this_ptr), 1)", "zval_unset_isref_p((object))", "zval_unset_isref_p((return_value))", "zval_unset_isref_p((this_ptr))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "exit(1)", "memcpy(&spl_handler_ArrayIterator, &spl_handler_ArrayObject, sizeof(zend_object_handlers))", "memcpy(&spl_handler_ArrayObject, zend_get_std_object_handlers(), sizeof(zend_object_handlers))", "php_error_docref0(((void *)0), (1 << 1L), \"Attempted GLOBALS variable overwrite\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::current(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::next(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::rewind(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and internal position is no longer valid\")", "php_error_docref0(((void *)0), (1 << 3L), \"ArrayIterator::valid(): Array was modified outside object and is no longer an array\")", "php_error_docref0(((void *)0), (1 << 6L), \"Internal compiler error, Class is not child of ArrayObject or ArrayIterator\")", "return_value->type = 5", "return_value->value.obj = spl_array_object_new_ex(intern->ce_get_iterator, &iterator, object, 0)", "spl_ce_ArrayIterator->get_iterator = spl_array_get_iterator", "spl_ce_RecursiveArrayIterator->get_iterator = spl_array_get_iterator", "spl_handler_ArrayObject.clone_obj = spl_array_object_clone", "spl_handler_ArrayObject.count_elements = spl_array_object_count_elements", "spl_handler_ArrayObject.get_debug_info = spl_array_get_debug_info", "spl_handler_ArrayObject.get_properties = spl_array_get_properties", "spl_handler_ArrayObject.get_property_ptr_ptr = spl_array_get_property_ptr_ptr", "spl_handler_ArrayObject.has_dimension = spl_array_has_dimension", "spl_handler_ArrayObject.has_property = spl_array_has_property", "spl_handler_ArrayObject.read_dimension = spl_array_read_dimension", "spl_handler_ArrayObject.read_property = spl_array_read_property", "spl_handler_ArrayObject.unset_dimension = spl_array_unset_dimension", "spl_handler_ArrayObject.unset_property = spl_array_unset_property", "spl_handler_ArrayObject.write_dimension = spl_array_write_dimension", "spl_handler_ArrayObject.write_property = spl_array_write_property", "spl_register_std_class(&spl_ce_ArrayIterator, \"ArrayIterator\", spl_array_object_new, spl_funcs_ArrayIterator)", "spl_register_std_class(&spl_ce_ArrayObject, \"ArrayObject\", spl_array_object_new, spl_funcs_ArrayObject)", "spl_register_sub_class(&spl_ce_RecursiveArrayIterator, spl_ce_ArrayIterator, \"RecursiveArrayIterator\", spl_array_object_new, spl_funcs_RecursiveArrayIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayIterator, 1, spl_ce_SeekableIterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_iterator)", "zend_class_implements(spl_ce_ArrayIterator, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_ArrayObject, 1, spl_ce_Countable)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_aggregate)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_arrayaccess)", "zend_class_implements(spl_ce_ArrayObject, 1, zend_ce_serializable)", "zend_class_implements(spl_ce_RecursiveArrayIterator, 1, spl_ce_RecursiveIterator)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayIterator, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"ARRAY_AS_PROPS\", sizeof (\"ARRAY_AS_PROPS\") - 1, (long)2)", "zend_declare_class_constant_long(spl_ce_ArrayObject, \"STD_PROP_LIST\", sizeof (\"STD_PROP_LIST\") - 1, (long)1)", "zend_declare_class_constant_long(spl_ce_RecursiveArrayIterator, \"CHILD_ARRAYS_ONLY\", sizeof (\"CHILD_ARRAYS_ONLY\") - 1, (long)4)", "zend_error((1 << 0L), \"An iterator cannot be used with foreach by reference\")", "zend_error((1 << 1L), \"Modification of ArrayObject during sorting is prohibited\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_throw_exception(spl_ce_BadMethodCallException, \"Function expects exactly one argument\", 0)", "zend_throw_exception(spl_ce_InvalidArgumentException, \"Passed variable is not an array or object, using empty array instead\", 0)", "zend_throw_exception_ex(spl_ce_UnexpectedValueException, 0, \"Empty serialized string cannot be empty\")", "zval_set_isref_p(return_value)", "zval_set_refcount_p(return_value, 1)", "if (__is_neg(\"\", \"L1234\", 10, &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(return_value->type), sizeof (return_value->type), &(aht), sizeof (aht), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(return_value->refcount__gc), sizeof (return_value->refcount__gc), &(return_value->is_ref__gc), sizeof (return_value->is_ref__gc)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	2,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	3,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	4,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	5,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	6,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	7,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	8,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	9,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	10,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	11,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	12,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	13,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	14,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	15,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	16,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	17,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	18,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	19,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	20,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	21,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	22,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	23,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	24,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	25,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	26,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	27,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	28,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	29,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	30,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	31,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	32,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	33,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	34,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	35,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	36,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	37,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	38,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	39,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	40,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	41,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	42,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	43,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	44,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	45,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	46,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	47,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	48,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	49,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	50,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	51,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	52,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	53,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	54,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	55,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	56,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	57,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	58,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	59,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	60,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	61,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	62,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	63,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	64,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	65,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	66,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	67,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	68,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	69,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	70,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	71,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	72,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	73,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	74,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	75,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	76,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	77,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	78,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	79,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	80,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	81,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	82,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	83,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	84,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	85,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	86,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	87,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	88,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	89,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	90,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	91,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	92,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	93,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	94,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	95,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	96,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	97,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	98,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	99,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	100,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	101,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	102,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	103,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	104,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	105,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	106,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	107,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	108,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	109,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	110,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	111,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	112,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	113,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	114,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	115,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	116,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	117,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	118,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	119,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	120,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	121,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	122,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	123,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	124,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	125,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	126,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	127,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	128,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	129,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	130,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	131,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	132,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	133,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	134,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	135,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	136,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	137,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	138,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	139,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	140,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	141,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	142,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	143,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	144,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	145,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	146,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	147,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	148,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	149,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	150,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	151,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	152,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	153,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	154,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	155,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	156,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	157,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	158,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	159,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	160,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	161,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	162,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	163,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	164,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	165,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	166,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	167,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	168,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	169,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	170,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	171,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	172,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	173,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	174,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	175,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	176,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	177,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	178,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	179,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	180,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	181,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	182,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	183,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	184,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	185,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	186,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	187,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	188,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	189,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	190,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	191,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	192,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	193,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	194,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	195,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	196,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	197,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	198,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	199,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	200,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	201,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	202,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	203,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	204,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	205,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	206,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	207,
									"scores":	[-9.74669978576708, -10.287228828767077, -10.818044688767078, -9.6678452147670768, -9.5410539499670772, -10.481190028767077, -10.518290428767077, -10.260705254767078, -10.791712114967078, -10.791712114967078]
								}]
						}, {
							"switch":	118,
							"types":	[[], [], [1], [], [], [], [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], [], [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], [], [], [180]],
							"begin_line":	1234,
							"begin_column":	2,
							"end_line":	1234,
							"end_column":	28,
							"patch_codes":	["if (!__is_neg(\"\", \"L1234\", 10, &(return_value), sizeof (return_value), &(object), sizeof (object), &(intern), sizeof (intern), &(iterator), sizeof (iterator), &(return_value->type), sizeof (return_value->type), &(aht), sizeof (aht), &(ht), sizeof (ht), &(this_ptr), sizeof (this_ptr), &(return_value->refcount__gc), sizeof (return_value->refcount__gc), &(return_value->is_ref__gc), sizeof (return_value->is_ref__gc)))\n    zval_set_isref_p(return_value);\n", "_array_init(return_value, -1)", "_array_init(return_value, 0)", "_array_init(return_value, 1)", "_array_init(return_value, 3)", "_array_init(return_value, 5)", "_array_init(return_value, 8)", "_object_init_ex(return_value, 0)", "_object_init_ex(return_value, spl_ce_AppendIterator)", "_object_init_ex(return_value, spl_ce_ArrayIterator)", "_object_init_ex(return_value, spl_ce_ArrayObject)", "_object_init_ex(return_value, spl_ce_BadFunctionCallException)", "_object_init_ex(return_value, spl_ce_BadMethodCallException)", "_object_init_ex(return_value, spl_ce_CachingIterator)", "_object_init_ex(return_value, spl_ce_Countable)", "_object_init_ex(return_value, spl_ce_DomainException)", "_object_init_ex(return_value, spl_ce_EmptyIterator)", "_object_init_ex(return_value, spl_ce_FilterIterator)", "_object_init_ex(return_value, spl_ce_InfiniteIterator)", "_object_init_ex(return_value, spl_ce_InvalidArgumentException)", "_object_init_ex(return_value, spl_ce_IteratorIterator)", "_object_init_ex(return_value, spl_ce_LengthException)", "_object_init_ex(return_value, spl_ce_LimitIterator)", "_object_init_ex(return_value, spl_ce_LogicException)", "_object_init_ex(return_value, spl_ce_NoRewindIterator)", "_object_init_ex(return_value, spl_ce_OutOfBoundsException)", "_object_init_ex(return_value, spl_ce_OutOfRangeException)", "_object_init_ex(return_value, spl_ce_OuterIterator)", "_object_init_ex(return_value, spl_ce_OverflowException)", "_object_init_ex(return_value, spl_ce_ParentIterator)", "_object_init_ex(return_value, spl_ce_RangeException)", "_object_init_ex(return_value, spl_ce_RecursiveArrayIterator)", "_object_init_ex(return_value, spl_ce_RecursiveCachingIterator)", "_object_init_ex(return_value, spl_ce_RecursiveFilterIterator)", "_object_init_ex(return_value, spl_ce_RecursiveIterator)", "_object_init_ex(return_value, spl_ce_RecursiveIteratorIterator)", "_object_init_ex(return_value, spl_ce_RecursiveRegexIterator)", "_object_init_ex(return_value, spl_ce_RecursiveTreeIterator)", "_object_init_ex(return_value, spl_ce_RegexIterator)", "_object_init_ex(return_value, spl_ce_RuntimeException)", "_object_init_ex(return_value, spl_ce_SeekableIterator)", "_object_init_ex(return_value, spl_ce_UnderflowException)", "_object_init_ex(return_value, spl_ce_UnexpectedValueException)", "_object_init_ex(return_value, zend_ce_aggregate)", "_object_init_ex(return_value, zend_ce_arrayaccess)", "_object_init_ex(return_value, zend_ce_iterator)", "_object_init_ex(return_value, zend_ce_serializable)", "_object_init_ex(return_value, zend_ce_traversable)", "_object_init_ex(return_value, zend_standard_class_def)", "add_index_null(return_value, -1)", "add_index_null(return_value, 0)", "add_index_null(return_value, 1)", "add_index_null(return_value, 3)", "add_index_null(return_value, 5)", "add_index_null(return_value, 8)", "add_next_index_bool(return_value, -1)", "add_next_index_bool(return_value, 0)", "add_next_index_bool(return_value, 1)", "add_next_index_bool(return_value, 3)", "add_next_index_bool(return_value, 5)", "add_next_index_bool(return_value, 8)", "add_next_index_bool(return_value, ht)", "add_next_index_bool(return_value, le_index_ptr)", "add_next_index_bool(return_value, return_value_used)", "add_next_index_long(return_value, -1)", "add_next_index_long(return_value, 0)", "add_next_index_long(return_value, 1)", "add_next_index_long(return_value, 3)", "add_next_index_long(return_value, 5)", "add_next_index_long(return_value, 8)", "add_next_index_resource(return_value, -1)", "add_next_index_resource(return_value, 0)", "add_next_index_resource(return_value, 1)", "add_next_index_resource(return_value, 3)", "add_next_index_resource(return_value, 5)", "add_next_index_resource(return_value, 8)", "add_next_index_resource(return_value, ht)", "add_next_index_resource(return_value, le_index_ptr)", "add_next_index_resource(return_value, return_value_used)", "add_next_index_zval(return_value, 0)", "add_next_index_zval(return_value, object)", "add_next_index_zval(return_value, return_value)", "add_next_index_zval(return_value, this_ptr)", "bitwise_not_function(return_value, 0)", "bitwise_not_function(return_value, object)", "bitwise_not_function(return_value, return_value)", "bitwise_not_function(return_value, this_ptr)", "boolean_not_function(return_value, 0)", "boolean_not_function(return_value, object)", "boolean_not_function(return_value, return_value)", "boolean_not_function(return_value, this_ptr)", "compile_string(return_value, 0)", "convert_to_long_base(return_value, -1)", "convert_to_long_base(return_value, 0)", "convert_to_long_base(return_value, 1)", "convert_to_long_base(return_value, 3)", "convert_to_long_base(return_value, 5)", "convert_to_long_base(return_value, 8)", "convert_to_long_base(return_value, ht)", "convert_to_long_base(return_value, le_index_ptr)", "convert_to_long_base(return_value, return_value_used)", "php_spl_get_constructor_helper(return_value, 0)", "php_spl_get_constructor_helper(return_value, brk)", "php_spl_get_constructor_helper(return_value, dlclose)", "php_spl_object_hash(return_value, 0)", "spl_array_get_debug_info(return_value, 0)", "spl_array_iterator_append(return_value, 0)", "spl_array_iterator_append(return_value, object)", "spl_array_iterator_append(return_value, return_value)", "spl_array_iterator_append(return_value, this_ptr)", "spl_array_iterator_key(return_value, 0)", "spl_array_iterator_key(return_value, object)", "spl_array_iterator_key(return_value, return_value)", "spl_array_iterator_key(return_value, this_ptr)", "spl_array_object_count_elements(return_value, 0)", "spl_array_unset_dimension(return_value, 0)", "spl_array_unset_dimension(return_value, object)", "spl_array_unset_dimension(return_value, return_value)", "spl_array_unset_dimension(return_value, this_ptr)", "zend_binary_zval_strcasecmp(return_value, 0)", "zend_binary_zval_strcasecmp(return_value, object)", "zend_binary_zval_strcasecmp(return_value, return_value)", "zend_binary_zval_strcasecmp(return_value, this_ptr)", "zend_binary_zval_strcmp(return_value, 0)", "zend_binary_zval_strcmp(return_value, object)", "zend_binary_zval_strcmp(return_value, return_value)", "zend_binary_zval_strcmp(return_value, this_ptr)", "zend_exception_error(return_value, -1)", "zend_exception_error(return_value, 0)", "zend_exception_error(return_value, 1)", "zend_exception_error(return_value, 3)", "zend_exception_error(return_value, 5)", "zend_exception_error(return_value, 8)", "zend_exception_error(return_value, ht)", "zend_exception_error(return_value, le_index_ptr)", "zend_exception_error(return_value, return_value_used)", "zend_exception_set_previous(return_value, 0)", "zend_exception_set_previous(return_value, object)", "zend_exception_set_previous(return_value, return_value)", "zend_exception_set_previous(return_value, this_ptr)", "zend_iterator_unwrap(return_value, 0)", "zend_make_callable(return_value, 0)", "zend_make_callable(return_value, environ)", "zend_object_create_proxy(return_value, 0)", "zend_object_create_proxy(return_value, object)", "zend_object_create_proxy(return_value, return_value)", "zend_object_create_proxy(return_value, this_ptr)", "zend_object_store_set_object(return_value, 0)", "zend_print_zval(return_value, -1)", "zend_print_zval(return_value, 0)", "zend_print_zval(return_value, 1)", "zend_print_zval(return_value, 3)", "zend_print_zval(return_value, 5)", "zend_print_zval(return_value, 8)", "zend_print_zval(return_value, ht)", "zend_print_zval(return_value, le_index_ptr)", "zend_print_zval(return_value, return_value_used)", "zend_print_zval_r(return_value, -1)", "zend_print_zval_r(return_value, 0)", "zend_print_zval_r(return_value, 1)", "zend_print_zval_r(return_value, 3)", "zend_print_zval_r(return_value, 5)", "zend_print_zval_r(return_value, 8)", "zend_print_zval_r(return_value, ht)", "zend_print_zval_r(return_value, le_index_ptr)", "zend_print_zval_r(return_value, return_value_used)", "zend_std_get_debug_info(return_value, 0)", "zval_set_isref_to_p(return_value, -1)", "zval_set_isref_to_p(return_value, 0)", "zval_set_isref_to_p(return_value, 1)", "zval_set_isref_to_p(return_value, 3)", "zval_set_isref_to_p(return_value, 5)", "zval_set_isref_to_p(return_value, 8)", "zval_set_refcount_p(return_value, -1)", "zval_set_refcount_p(return_value, 0)", "zval_set_refcount_p(return_value, 1)", "zval_set_refcount_p(return_value, 3)", "zval_set_refcount_p(return_value, 5)", "zval_set_refcount_p(return_value, 8)", "{\n}\n", "_convert_to_string(return_value)", "_object_init(return_value)", "_zval_copy_ctor(return_value)", "_zval_copy_ctor_func(return_value)", "_zval_dtor(return_value)", "_zval_dtor_func(return_value)", "_zval_dtor_wrapper(return_value)", "_zval_internal_dtor(return_value)", "add_next_index_null(return_value)", "config_zval_dtor(return_value)", "convert_scalar_to_number(return_value)", "convert_to_array(return_value)", "convert_to_boolean(return_value)", "convert_to_double(return_value)", "convert_to_long(return_value)", "convert_to_null(return_value)", "convert_to_object(return_value)", "decrement_function(return_value)", "gc_remove_zval_from_buffer(return_value)", "gc_zobj_possible_root(return_value)", "gc_zval_check_possible_root(return_value)", "gc_zval_possible_root(return_value)", "i_zend_is_true(return_value)", "i_zval_ptr_dtor(return_value)", "increment_function(return_value)", "lex_scan(return_value)", "php_output_get_contents(return_value)", "php_output_get_length(return_value)", "safe_free_zval_ptr_rel(return_value)", "spl_array_get_properties(return_value)", "spl_array_object_clone(return_value)", "spl_offset_convert_to_long(return_value)", "zend_is_true(return_value)", "zend_locale_sprintf_double(return_value)", "zend_object_store_ctor_failed(return_value)", "zend_objects_clone_obj(return_value)", "zend_objects_store_add_ref(return_value)", "zend_objects_store_clone_obj(return_value)", "zend_objects_store_del_ref(return_value)", "zend_objects_store_get_refcount(return_value)", "zend_print_flat_zval_r(return_value)", "zend_print_variable(return_value)", "zend_std_get_constructor(return_value)", "zend_std_get_properties(return_value)", "zend_throw_exception_internal(return_value)", "zend_throw_exception_object(return_value)", "zval_addref_p(return_value)", "zval_delref_p(return_value)", "zval_is_true(return_value)", "zval_isref_p(return_value)", "zval_refcount_p(return_value)", "zval_unset_isref_p(return_value)", "zval_set_isref_p((&aht))", "zval_set_isref_p((&ht))", "zval_set_isref_p((&intern))", "zval_set_isref_p((&iterator))", "zval_set_isref_p((&object))", "zval_set_isref_p((&return_value))", "zval_set_isref_p((&return_value_ptr))", "zval_set_isref_p((&return_value_used))", "zval_set_isref_p((&this_ptr))", "zval_set_isref_p((object))", "zval_set_isref_p((return_value))", "zval_set_isref_p((this_ptr))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.40078049006708, -9.89187519956708, -10.128953644067078, -9.29312187756708, -9.661366503567077, -10.173455353567078, -10.467806153567079, -10.154008453567078, -9.62661436356708, -9.62661436356708]
								}, {
									"case":	2,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	3,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	4,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	5,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	6,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	7,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	8,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	9,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	10,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	11,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	12,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	13,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	14,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	15,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	16,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	17,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	18,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	19,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	20,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	21,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	22,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	23,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	24,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	25,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	26,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	27,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	28,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	29,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	30,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	31,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	32,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	33,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	34,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	35,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	36,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	37,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	38,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	39,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	40,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	41,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	42,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	43,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	44,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	45,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	46,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	47,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	48,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	49,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	50,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	51,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	52,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	53,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	54,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	55,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	56,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	57,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	58,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	59,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	60,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	61,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	62,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	63,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	64,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	65,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	66,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	67,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	68,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	69,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	70,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	71,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	72,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	73,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	74,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	75,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	76,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	77,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	78,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	79,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	80,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	81,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	82,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	83,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	84,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	85,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	86,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	87,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	88,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	89,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	90,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	91,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	92,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	93,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	94,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	95,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	96,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	97,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	98,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	99,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	100,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	101,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	102,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	103,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	104,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	105,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	106,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	107,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	108,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	109,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	110,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	111,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	112,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	113,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	114,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	115,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	116,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	117,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	118,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	119,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	120,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	121,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	122,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	123,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	124,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	125,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	126,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	127,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	128,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	129,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	130,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	131,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	132,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	133,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	134,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	135,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	136,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	137,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	138,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	139,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	140,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	141,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	142,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	143,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	144,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	145,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	146,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	147,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	148,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	149,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	150,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	151,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	152,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	153,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	154,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	155,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	156,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	157,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	158,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	159,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	160,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	161,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	162,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	163,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	164,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	165,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	166,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	167,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	168,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	169,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	170,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	171,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	172,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	173,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	174,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	175,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	176,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	177,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	178,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	179,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	180,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	181,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	182,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	183,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	184,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	185,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	186,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	187,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	188,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	189,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	190,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	191,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	192,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	193,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	194,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	195,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	196,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	197,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	198,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	199,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	200,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	201,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	202,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	203,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	204,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	205,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	206,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	207,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	208,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	209,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	210,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	211,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	212,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	213,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	214,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	215,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	216,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	217,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	218,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	219,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	220,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	221,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	222,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	223,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	224,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	225,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	226,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	227,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	228,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	229,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	230,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	231,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	232,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	233,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	234,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	235,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	236,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	237,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	238,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	239,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	240,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	241,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	242,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	243,
									"scores":	[-7.9929698835670777]
								}, {
									"case":	244,
									"scores":	[-7.9929698835670777]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	1,
			"case":	1,
			"size":	18
		}, {
			"switch":	1,
			"case":	5,
			"size":	18
		}, {
			"switch":	2,
			"case":	113,
			"size":	16
		}, {
			"switch":	3,
			"case":	1,
			"size":	16
		}, {
			"switch":	4,
			"case":	122,
			"size":	28
		}, {
			"switch":	4,
			"case":	123,
			"size":	28
		}, {
			"switch":	4,
			"case":	124,
			"size":	28
		}, {
			"switch":	5,
			"case":	1,
			"size":	28
		}, {
			"switch":	6,
			"case":	121,
			"size":	28
		}, {
			"switch":	6,
			"case":	122,
			"size":	28
		}, {
			"switch":	6,
			"case":	123,
			"size":	28
		}, {
			"switch":	7,
			"case":	138,
			"size":	25
		}, {
			"switch":	7,
			"case":	139,
			"size":	25
		}, {
			"switch":	7,
			"case":	140,
			"size":	25
		}, {
			"switch":	7,
			"case":	141,
			"size":	25
		}, {
			"switch":	8,
			"case":	1,
			"size":	25
		}, {
			"switch":	8,
			"case":	2,
			"size":	25
		}, {
			"switch":	8,
			"case":	3,
			"size":	25
		}, {
			"switch":	9,
			"case":	136,
			"size":	25
		}, {
			"switch":	9,
			"case":	137,
			"size":	25
		}, {
			"switch":	9,
			"case":	138,
			"size":	25
		}, {
			"switch":	9,
			"case":	139,
			"size":	25
		}, {
			"switch":	10,
			"case":	1,
			"size":	25
		}, {
			"switch":	11,
			"case":	1,
			"size":	25
		}, {
			"switch":	12,
			"case":	1,
			"size":	28
		}, {
			"switch":	13,
			"case":	121,
			"size":	16
		}, {
			"switch":	13,
			"case":	122,
			"size":	16
		}, {
			"switch":	13,
			"case":	123,
			"size":	16
		}, {
			"switch":	14,
			"case":	1,
			"size":	16
		}, {
			"switch":	15,
			"case":	120,
			"size":	16
		}, {
			"switch":	15,
			"case":	121,
			"size":	16
		}, {
			"switch":	15,
			"case":	122,
			"size":	16
		}, {
			"switch":	16,
			"case":	1,
			"size":	16
		}, {
			"switch":	17,
			"case":	71,
			"size":	2
		}, {
			"switch":	18,
			"case":	1,
			"size":	2
		}, {
			"switch":	20,
			"case":	1,
			"size":	97
		}, {
			"switch":	20,
			"case":	2,
			"size":	97
		}, {
			"switch":	22,
			"case":	1,
			"size":	41
		}, {
			"switch":	24,
			"case":	1,
			"size":	41
		}, {
			"switch":	26,
			"case":	1,
			"size":	41
		}, {
			"switch":	28,
			"case":	1,
			"size":	41
		}, {
			"switch":	28,
			"case":	2,
			"size":	41
		}, {
			"switch":	28,
			"case":	3,
			"size":	41
		}, {
			"switch":	30,
			"case":	1,
			"size":	28
		}, {
			"switch":	32,
			"case":	1,
			"size":	28
		}, {
			"switch":	34,
			"case":	1,
			"size":	28
		}, {
			"switch":	35,
			"case":	1,
			"size":	41
		}, {
			"switch":	35,
			"case":	2,
			"size":	41
		}, {
			"switch":	36,
			"case":	162,
			"size":	52
		}, {
			"switch":	37,
			"case":	1,
			"size":	52
		}, {
			"switch":	37,
			"case":	2,
			"size":	52
		}, {
			"switch":	37,
			"case":	3,
			"size":	52
		}, {
			"switch":	38,
			"case":	1,
			"size":	52
		}, {
			"switch":	39,
			"case":	163,
			"size":	19
		}, {
			"switch":	40,
			"case":	1,
			"size":	19
		}, {
			"switch":	40,
			"case":	2,
			"size":	19
		}, {
			"switch":	40,
			"case":	3,
			"size":	19
		}, {
			"switch":	40,
			"case":	5,
			"size":	19
		}, {
			"switch":	41,
			"case":	1,
			"size":	19
		}, {
			"switch":	41,
			"case":	2,
			"size":	19
		}, {
			"switch":	42,
			"case":	164,
			"size":	10
		}, {
			"switch":	44,
			"case":	1,
			"size":	27
		}, {
			"switch":	44,
			"case":	14,
			"size":	27
		}, {
			"switch":	45,
			"case":	270,
			"size":	27
		}, {
			"switch":	46,
			"case":	1,
			"size":	27
		}, {
			"switch":	46,
			"case":	2,
			"size":	27
		}, {
			"switch":	46,
			"case":	4,
			"size":	27
		}, {
			"switch":	47,
			"case":	268,
			"size":	105
		}, {
			"switch":	48,
			"case":	1,
			"size":	105
		}, {
			"switch":	49,
			"case":	267,
			"size":	105
		}, {
			"switch":	50,
			"case":	1,
			"size":	105
		}, {
			"switch":	51,
			"case":	1,
			"size":	27
		}, {
			"switch":	51,
			"case":	2,
			"size":	27
		}, {
			"switch":	52,
			"case":	1,
			"size":	10
		}, {
			"switch":	53,
			"case":	112,
			"size":	5
		}, {
			"switch":	54,
			"case":	1,
			"size":	5
		}, {
			"switch":	54,
			"case":	2,
			"size":	5
		}, {
			"switch":	54,
			"case":	3,
			"size":	5
		}, {
			"switch":	55,
			"case":	164,
			"size":	19
		}, {
			"switch":	56,
			"case":	1,
			"size":	19
		}, {
			"switch":	56,
			"case":	2,
			"size":	19
		}, {
			"switch":	56,
			"case":	3,
			"size":	19
		}, {
			"switch":	57,
			"case":	1,
			"size":	19
		}, {
			"switch":	57,
			"case":	2,
			"size":	19
		}, {
			"switch":	58,
			"case":	1,
			"size":	5
		}, {
			"switch":	58,
			"case":	2,
			"size":	5
		}, {
			"switch":	59,
			"case":	112,
			"size":	5
		}, {
			"switch":	60,
			"case":	1,
			"size":	5
		}, {
			"switch":	61,
			"case":	112,
			"size":	5
		}, {
			"switch":	62,
			"case":	1,
			"size":	5
		}, {
			"switch":	62,
			"case":	2,
			"size":	5
		}, {
			"switch":	62,
			"case":	3,
			"size":	5
		}, {
			"switch":	62,
			"case":	7,
			"size":	5
		}, {
			"switch":	63,
			"case":	1,
			"size":	5
		}, {
			"switch":	63,
			"case":	2,
			"size":	5
		}, {
			"switch":	64,
			"case":	112,
			"size":	5
		}, {
			"switch":	65,
			"case":	1,
			"size":	5
		}, {
			"switch":	66,
			"case":	98,
			"size":	3
		}, {
			"switch":	67,
			"case":	1,
			"size":	3
		}, {
			"switch":	68,
			"case":	175,
			"size":	22
		}, {
			"switch":	69,
			"case":	1,
			"size":	22
		}, {
			"switch":	69,
			"case":	2,
			"size":	22
		}, {
			"switch":	69,
			"case":	3,
			"size":	22
		}, {
			"switch":	69,
			"case":	5,
			"size":	22
		}, {
			"switch":	70,
			"case":	1,
			"size":	22
		}, {
			"switch":	70,
			"case":	2,
			"size":	22
		}, {
			"switch":	71,
			"case":	175,
			"size":	9
		}, {
			"switch":	72,
			"case":	286,
			"size":	31
		}, {
			"switch":	73,
			"case":	1,
			"size":	31
		}, {
			"switch":	73,
			"case":	2,
			"size":	31
		}, {
			"switch":	73,
			"case":	3,
			"size":	31
		}, {
			"switch":	74,
			"case":	1,
			"size":	31
		}, {
			"switch":	74,
			"case":	2,
			"size":	31
		}, {
			"switch":	75,
			"case":	289,
			"size":	126
		}, {
			"switch":	76,
			"case":	1,
			"size":	126
		}, {
			"switch":	76,
			"case":	2,
			"size":	126
		}, {
			"switch":	76,
			"case":	3,
			"size":	126
		}, {
			"switch":	77,
			"case":	297,
			"size":	26
		}, {
			"switch":	78,
			"case":	1,
			"size":	26
		}, {
			"switch":	78,
			"case":	2,
			"size":	26
		}, {
			"switch":	78,
			"case":	19,
			"size":	26
		}, {
			"switch":	79,
			"case":	1,
			"size":	26
		}, {
			"switch":	79,
			"case":	2,
			"size":	26
		}, {
			"switch":	80,
			"case":	1,
			"size":	126
		}, {
			"switch":	80,
			"case":	2,
			"size":	126
		}, {
			"switch":	81,
			"case":	285,
			"size":	6
		}, {
			"switch":	82,
			"case":	1,
			"size":	9
		}, {
			"switch":	83,
			"case":	174,
			"size":	19
		}, {
			"switch":	84,
			"case":	1,
			"size":	19
		}, {
			"switch":	85,
			"case":	103,
			"size":	2
		}, {
			"switch":	86,
			"case":	1,
			"size":	2
		}, {
			"switch":	88,
			"case":	1,
			"size":	18
		}, {
			"switch":	88,
			"case":	2,
			"size":	18
		}, {
			"switch":	88,
			"case":	7,
			"size":	18
		}, {
			"switch":	89,
			"case":	107,
			"size":	18
		}, {
			"switch":	89,
			"case":	108,
			"size":	18
		}, {
			"switch":	89,
			"case":	109,
			"size":	18
		}, {
			"switch":	89,
			"case":	110,
			"size":	18
		}, {
			"switch":	89,
			"case":	111,
			"size":	18
		}, {
			"switch":	89,
			"case":	112,
			"size":	18
		}, {
			"switch":	90,
			"case":	1,
			"size":	18
		}, {
			"switch":	90,
			"case":	2,
			"size":	18
		}, {
			"switch":	90,
			"case":	4,
			"size":	18
		}, {
			"switch":	91,
			"case":	107,
			"size":	5
		}, {
			"switch":	91,
			"case":	108,
			"size":	5
		}, {
			"switch":	91,
			"case":	109,
			"size":	5
		}, {
			"switch":	91,
			"case":	110,
			"size":	5
		}, {
			"switch":	91,
			"case":	111,
			"size":	5
		}, {
			"switch":	91,
			"case":	112,
			"size":	5
		}, {
			"switch":	92,
			"case":	1,
			"size":	5
		}, {
			"switch":	93,
			"case":	1,
			"size":	18
		}, {
			"switch":	94,
			"case":	107,
			"size":	5
		}, {
			"switch":	94,
			"case":	108,
			"size":	5
		}, {
			"switch":	94,
			"case":	109,
			"size":	5
		}, {
			"switch":	94,
			"case":	110,
			"size":	5
		}, {
			"switch":	94,
			"case":	111,
			"size":	5
		}, {
			"switch":	94,
			"case":	112,
			"size":	5
		}, {
			"switch":	95,
			"case":	1,
			"size":	5
		}, {
			"switch":	97,
			"case":	1,
			"size":	18
		}, {
			"switch":	97,
			"case":	2,
			"size":	18
		}, {
			"switch":	98,
			"case":	104,
			"size":	18
		}, {
			"switch":	98,
			"case":	105,
			"size":	18
		}, {
			"switch":	98,
			"case":	106,
			"size":	18
		}, {
			"switch":	98,
			"case":	107,
			"size":	18
		}, {
			"switch":	98,
			"case":	108,
			"size":	18
		}, {
			"switch":	99,
			"case":	1,
			"size":	18
		}, {
			"switch":	101,
			"case":	1,
			"size":	22
		}, {
			"switch":	101,
			"case":	2,
			"size":	22
		}, {
			"switch":	102,
			"case":	269,
			"size":	103
		}, {
			"switch":	103,
			"case":	1,
			"size":	108
		}, {
			"switch":	103,
			"case":	2,
			"size":	108
		}, {
			"switch":	103,
			"case":	6,
			"size":	108
		}, {
			"switch":	104,
			"case":	1,
			"size":	103
		}, {
			"switch":	104,
			"case":	2,
			"size":	103
		}, {
			"switch":	105,
			"case":	206,
			"size":	7
		}, {
			"switch":	106,
			"case":	1,
			"size":	7
		}, {
			"switch":	106,
			"case":	2,
			"size":	7
		}, {
			"switch":	106,
			"case":	40,
			"size":	7
		}, {
			"switch":	107,
			"case":	1,
			"size":	7
		}, {
			"switch":	107,
			"case":	2,
			"size":	7
		}, {
			"switch":	108,
			"case":	206,
			"size":	7
		}, {
			"switch":	109,
			"case":	1,
			"size":	7
		}, {
			"switch":	109,
			"case":	2,
			"size":	7
		}, {
			"switch":	109,
			"case":	3,
			"size":	7
		}, {
			"switch":	110,
			"case":	1,
			"size":	7
		}, {
			"switch":	110,
			"case":	2,
			"size":	7
		}, {
			"switch":	111,
			"case":	207,
			"size":	25
		}, {
			"switch":	112,
			"case":	1,
			"size":	25
		}, {
			"switch":	113,
			"case":	208,
			"size":	25
		}, {
			"switch":	114,
			"case":	1,
			"size":	25
		}, {
			"switch":	115,
			"case":	207,
			"size":	25
		}, {
			"switch":	116,
			"case":	1,
			"size":	25
		}, {
			"switch":	117,
			"case":	207,
			"size":	10
		}, {
			"switch":	118,
			"case":	1,
			"size":	10
		}],
	"func_locations":	[{
			"file":	"ext/spl/spl_array.c",
			"functions":	[{
					"function":	"__cmsg_nxthdr",
					"begin":	308,
					"end":	324
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"btowc",
					"begin":	317,
					"end":	320
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"fstat",
					"begin":	462,
					"end":	466
				}, {
					"function":	"fstatat",
					"begin":	469,
					"end":	474
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"lstat",
					"begin":	455,
					"end":	459
				}, {
					"function":	"mbrlen",
					"begin":	328,
					"end":	332
				}, {
					"function":	"mknod",
					"begin":	478,
					"end":	482
				}, {
					"function":	"mknodat",
					"begin":	486,
					"end":	491
				}, {
					"function":	"php_set_error_handling",
					"begin":	292,
					"end":	295
				}, {
					"function":	"php_std_error_handling",
					"begin":	296,
					"end":	296
				}, {
					"function":	"php_varname_check",
					"begin":	115,
					"end":	156
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"smart_str_print_long",
					"begin":	153,
					"end":	157
				}, {
					"function":	"smart_str_print_unsigned",
					"begin":	159,
					"end":	163
				}, {
					"function":	"spl_array_get_debug_info",
					"begin":	726,
					"end":	763
				}, {
					"function":	"spl_array_get_dimension_ptr_ptr",
					"begin":	298,
					"end":	363
				}, {
					"function":	"spl_array_get_hash_table",
					"begin":	79,
					"end":	96
				}, {
					"function":	"spl_array_get_iterator",
					"begin":	1072,
					"end":	1091
				}, {
					"function":	"spl_array_get_properties",
					"begin":	719,
					"end":	724
				}, {
					"function":	"spl_array_get_property_ptr_ptr",
					"begin":	789,
					"end":	798
				}, {
					"function":	"spl_array_has_dimension",
					"begin":	618,
					"end":	621
				}, {
					"function":	"spl_array_has_dimension_ex",
					"begin":	550,
					"end":	616
				}, {
					"function":	"spl_array_has_property",
					"begin":	800,
					"end":	809
				}, {
					"function":	"spl_array_it_dtor",
					"begin":	884,
					"end":	892
				}, {
					"function":	"spl_array_it_get_current_data",
					"begin":	919,
					"end":	932
				}, {
					"function":	"spl_array_it_get_current_key",
					"begin":	935,
					"end":	956
				}, {
					"function":	"spl_array_it_move_forward",
					"begin":	959,
					"end":	980
				}, {
					"function":	"spl_array_it_rewind",
					"begin":	1005,
					"end":	1016
				}, {
					"function":	"spl_array_it_valid",
					"begin":	895,
					"end":	916
				}, {
					"function":	"spl_array_iterator_append",
					"begin":	661,
					"end":	680
				}, {
					"function":	"spl_array_iterator_key",
					"begin":	1463,
					"end":	1491
				}, {
					"function":	"spl_array_method",
					"begin":	1353,
					"end":	1384
				}, {
					"function":	"spl_array_next",
					"begin":	870,
					"end":	876
				}, {
					"function":	"spl_array_next_ex",
					"begin":	860,
					"end":	868
				}, {
					"function":	"spl_array_next_no_verify",
					"begin":	849,
					"end":	858
				}, {
					"function":	"spl_array_object_clone",
					"begin":	280,
					"end":	295
				}, {
					"function":	"spl_array_object_count_elements",
					"begin":	1315,
					"end":	1334
				}, {
					"function":	"spl_array_object_count_elements_helper",
					"begin":	1287,
					"end":	1313
				}, {
					"function":	"spl_array_object_free_storage",
					"begin":	142,
					"end":	157
				}, {
					"function":	"spl_array_object_new",
					"begin":	272,
					"end":	276
				}, {
					"function":	"spl_array_object_new_ex",
					"begin":	163,
					"end":	268
				}, {
					"function":	"spl_array_read_dimension",
					"begin":	411,
					"end":	414
				}, {
					"function":	"spl_array_read_dimension_ex",
					"begin":	365,
					"end":	409
				}, {
					"function":	"spl_array_read_property",
					"begin":	766,
					"end":	775
				}, {
					"function":	"spl_array_rewind",
					"begin":	992,
					"end":	1002
				}, {
					"function":	"spl_array_rewind_ex",
					"begin":	983,
					"end":	990
				}, {
					"function":	"spl_array_set_array",
					"begin":	1020,
					"end":	1059
				}, {
					"function":	"spl_array_set_pos",
					"begin":	108,
					"end":	112
				}, {
					"function":	"spl_array_skip_protected",
					"begin":	824,
					"end":	847
				}, {
					"function":	"spl_array_unset_dimension",
					"begin":	545,
					"end":	548
				}, {
					"function":	"spl_array_unset_dimension_ex",
					"begin":	490,
					"end":	543
				}, {
					"function":	"spl_array_unset_property",
					"begin":	811,
					"end":	822
				}, {
					"function":	"spl_array_update_pos",
					"begin":	100,
					"end":	106
				}, {
					"function":	"spl_array_write_dimension",
					"begin":	485,
					"end":	488
				}, {
					"function":	"spl_array_write_dimension_ex",
					"begin":	416,
					"end":	483
				}, {
					"function":	"spl_array_write_property",
					"begin":	777,
					"end":	787
				}, {
					"function":	"spl_hash_verify_pos",
					"begin":	134,
					"end":	138
				}, {
					"function":	"spl_hash_verify_pos_ex",
					"begin":	114,
					"end":	132
				}, {
					"function":	"spl_instantiate_arg_ex1",
					"begin":	33,
					"end":	39
				}, {
					"function":	"spl_instantiate_arg_ex2",
					"begin":	43,
					"end":	49
				}, {
					"function":	"stat",
					"begin":	448,
					"end":	452
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"wctob",
					"begin":	323,
					"end":	326
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zim_spl_Array___construct",
					"begin":	1097,
					"end":	1129
				}, {
					"function":	"zim_spl_Array_append",
					"begin":	685,
					"end":	693
				}, {
					"function":	"zim_spl_Array_asort",
					"begin":	1395,
					"end":	1395
				}, {
					"function":	"zim_spl_Array_count",
					"begin":	1339,
					"end":	1351
				}, {
					"function":	"zim_spl_Array_current",
					"begin":	1424,
					"end":	1449
				}, {
					"function":	"zim_spl_Array_exchangeArray",
					"begin":	1196,
					"end":	1210
				}, {
					"function":	"zim_spl_Array_getArrayCopy",
					"begin":	710,
					"end":	717
				}, {
					"function":	"zim_spl_Array_getChildren",
					"begin":	1573,
					"end":	1610
				}, {
					"function":	"zim_spl_Array_getFlags",
					"begin":	1165,
					"end":	1175
				}, {
					"function":	"zim_spl_Array_getIterator",
					"begin":	1215,
					"end":	1235
				}, {
					"function":	"zim_spl_Array_getIteratorClass",
					"begin":	1150,
					"end":	1160
				}, {
					"function":	"zim_spl_Array_hasChildren",
					"begin":	1543,
					"end":	1568
				}, {
					"function":	"zim_spl_Array_key",
					"begin":	1454,
					"end":	1461
				}, {
					"function":	"zim_spl_Array_ksort",
					"begin":	1400,
					"end":	1400
				}, {
					"function":	"zim_spl_Array_natcasesort",
					"begin":	1420,
					"end":	1420
				}, {
					"function":	"zim_spl_Array_natsort",
					"begin":	1415,
					"end":	1415
				}, {
					"function":	"zim_spl_Array_next",
					"begin":	1496,
					"end":	1512
				}, {
					"function":	"zim_spl_Array_offsetExists",
					"begin":	626,
					"end":	633
				}, {
					"function":	"zim_spl_Array_offsetGet",
					"begin":	638,
					"end":	646
				}, {
					"function":	"zim_spl_Array_offsetSet",
					"begin":	651,
					"end":	658
				}, {
					"function":	"zim_spl_Array_offsetUnset",
					"begin":	698,
					"end":	705
				}, {
					"function":	"zim_spl_Array_rewind",
					"begin":	1240,
					"end":	1250
				}, {
					"function":	"zim_spl_Array_seek",
					"begin":	1255,
					"end":	1285
				}, {
					"function":	"zim_spl_Array_serialize",
					"begin":	1615,
					"end":	1668
				}, {
					"function":	"zim_spl_Array_setFlags",
					"begin":	1180,
					"end":	1191
				}, {
					"function":	"zim_spl_Array_setIteratorClass",
					"begin":	1134,
					"end":	1145
				}, {
					"function":	"zim_spl_Array_uasort",
					"begin":	1405,
					"end":	1405
				}, {
					"function":	"zim_spl_Array_uksort",
					"begin":	1410,
					"end":	1410
				}, {
					"function":	"zim_spl_Array_unserialize",
					"begin":	1673,
					"end":	1767
				}, {
					"function":	"zim_spl_Array_valid",
					"begin":	1517,
					"end":	1538
				}, {
					"function":	"zm_startup_spl_array",
					"begin":	1878,
					"end":	1925
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}]
		}]
}
