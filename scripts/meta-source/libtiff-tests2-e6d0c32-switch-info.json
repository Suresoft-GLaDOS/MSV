{
	"switch_num":	27,
	"case_num":	[25, 14, 25, 110, 322, 3, 2, 322, 1, 322, 3, 2, 322, 3, 322, 428, 322, 45, 322, 3, 2, 2, 322, 25, 2, 322, 1],
	"switch_cluster":	[[1, 3, 6, 8, 11, 15, 17, 20, 21, 24, 26], [5, 10, 13, 19, 23], [0, 2, 4, 7, 9, 12, 14, 16, 18, 22, 25], []],
	"priority":	[{
			"file":	"tools/ppm2tiff.c",
			"line":	64,
			"primary_score":	1000000,
			"second_score":	2
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	65,
			"primary_score":	1000000,
			"second_score":	1
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	71,
			"primary_score":	999998,
			"second_score":	24
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	72,
			"primary_score":	999998,
			"second_score":	23
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	73,
			"primary_score":	999998,
			"second_score":	22
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	74,
			"primary_score":	999998,
			"second_score":	21
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	75,
			"primary_score":	999998,
			"second_score":	20
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	76,
			"primary_score":	999998,
			"second_score":	19
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	77,
			"primary_score":	999998,
			"second_score":	18
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	78,
			"primary_score":	999998,
			"second_score":	17
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	79,
			"primary_score":	999998,
			"second_score":	16
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	80,
			"primary_score":	999998,
			"second_score":	15
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	81,
			"primary_score":	999998,
			"second_score":	14
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	82,
			"primary_score":	999998,
			"second_score":	13
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	83,
			"primary_score":	999998,
			"second_score":	12
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	85,
			"primary_score":	999998,
			"second_score":	11
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	89,
			"primary_score":	999998,
			"second_score":	10
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	106,
			"primary_score":	999998,
			"second_score":	9
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	115,
			"primary_score":	999998,
			"second_score":	8
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	116,
			"primary_score":	999998,
			"second_score":	7
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	117,
			"primary_score":	999998,
			"second_score":	6
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	118,
			"primary_score":	999998,
			"second_score":	5
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	127,
			"primary_score":	999998,
			"second_score":	4
		}, {
			"file":	"tools/ppm2tiff.c",
			"line":	129,
			"primary_score":	999998,
			"second_score":	3
		}],
	"mutation_info":	[{
			"file":	"tools/ppm2tiff.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"tools/ppm2tiff.c",
			"lines":	[{
					"line":	64,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [25], [], [], [], [], [16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], []],
							"begin_line":	65,
							"begin_column":	0,
							"end_line":	65,
							"end_column":	0,
							"patch_codes":	["BadPPM((file))", "compression = (-2)", "compression = (0)", "compression = (2)", "jpegcolormode = (-2)", "jpegcolormode = (0)", "jpegcolormode = (2)", "predictor = (-2)", "predictor = (0)", "predictor = (2)", "predictor = atoi((file) + 1)", "quality = (-2)", "quality = (0)", "quality = (2)", "quality = atoi((file) + 1)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "jpegcolormode = 0", "usage()", "if (__is_neg(\"\", \"L65\", 1, &(file), sizeof (file)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.9434624327456658]
								}]
						}, {
							"switch":	1,
							"types":	[[], [], [1], [], [], [], [13, 14], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [], [], [], [], [], [], [], [2]],
							"begin_line":	65,
							"begin_column":	2,
							"end_line":	65,
							"end_column":	47,
							"patch_codes":	["if (!__is_neg(\"\", \"L65\", 1, &(file), sizeof (file)))\n    fprintf(stderr, \"%s: Not a PPM file.\\n\", file);\n", "{\n}\n", "TIFFError(stderr, \"%s: Not a PPM file.\\n\", file)", "TIFFWarning(stderr, \"%s: Not a PPM file.\\n\", file)", "_IO_vfprintf(stderr, \"%s: Not a PPM file.\\n\", file)", "execl(stderr, \"%s: Not a PPM file.\\n\", file)", "execle(stderr, \"%s: Not a PPM file.\\n\", file)", "execlp(stderr, \"%s: Not a PPM file.\\n\", file)", "fprintf(stderr, \"%s: Not a PPM file.\\n\", file)", "printf(stderr, \"%s: Not a PPM file.\\n\", file)", "sprintf(stderr, \"%s: Not a PPM file.\\n\", file)", "vfprintf(stderr, \"%s: Not a PPM file.\\n\", file)", "fprintf((&file), \"%s: Not a PPM file.\\n\", file)", "fprintf(stderr, \"%s: Not a PPM file.\\n or the directory does not exist\", file)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.1059070527456658]
								}, {
									"case":	2,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	3,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	4,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	5,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	6,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	7,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	8,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	9,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	10,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	11,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	12,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	13,
									"scores":	[-3.9322257127456655]
								}, {
									"case":	14,
									"scores":	[-3.9322257127456655]
								}]
						}]
				}, {
					"line":	65,
					"switches":	[{
							"switch":	2,
							"types":	[[], [], [], [], [25], [], [], [], [], [16, 17, 18, 19, 20, 21, 22, 23, 24], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [], [], [], [], [], []],
							"begin_line":	66,
							"begin_column":	0,
							"end_line":	66,
							"end_column":	0,
							"patch_codes":	["BadPPM((file))", "compression = (-2)", "compression = (0)", "compression = (2)", "jpegcolormode = (-2)", "jpegcolormode = (0)", "jpegcolormode = (2)", "predictor = (-2)", "predictor = (0)", "predictor = (2)", "predictor = atoi((file) + 1)", "quality = (-2)", "quality = (0)", "quality = (2)", "quality = atoi((file) + 1)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "jpegcolormode = 0", "usage()", "if (__is_neg(\"\", \"L66\", 1, &(file), sizeof (file)))\n    return;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.912023005428146]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-6.095492625428145]
								}]
						}, {
							"switch":	3,
							"types":	[[], [], [1], [], [], [], [108, 109, 110], [], [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], [], [], [62]],
							"begin_line":	66,
							"begin_column":	2,
							"end_line":	66,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L66\", 1, &(file), sizeof (file)))\n    exit(-2);\n", "_IO_putc(-2, 0)", "__tolower_l(-2, 0)", "__toupper_l(-2, 0)", "daemon(-2, -2)", "daemon(-2, 0)", "daemon(-2, 2)", "daemon(-2, jpegcolormode)", "daemon(-2, quality)", "div(-2, -2)", "div(-2, 0)", "div(-2, 2)", "div(-2, jpegcolormode)", "div(-2, quality)", "dup2(-2, -2)", "dup2(-2, 0)", "dup2(-2, 2)", "dup2(-2, jpegcolormode)", "dup2(-2, quality)", "fdopen(-2, 0)", "fpathconf(-2, -2)", "fpathconf(-2, 0)", "fpathconf(-2, 2)", "fpathconf(-2, jpegcolormode)", "fpathconf(-2, quality)", "fputc(-2, 0)", "fputc_unlocked(-2, 0)", "ftruncate(-2, -2)", "ftruncate(-2, 0)", "ftruncate(-2, 2)", "getgroups(-2, 0)", "isalnum_l(-2, 0)", "isalpha_l(-2, 0)", "isblank_l(-2, 0)", "iscntrl_l(-2, 0)", "isdigit_l(-2, 0)", "isgraph_l(-2, 0)", "islower_l(-2, 0)", "isprint_l(-2, 0)", "ispunct_l(-2, 0)", "isspace_l(-2, 0)", "isupper_l(-2, 0)", "isxdigit_l(-2, 0)", "main(-2, 0)", "putc(-2, 0)", "putc_unlocked(-2, 0)", "putw(-2, 0)", "setpgid(-2, -2)", "setpgid(-2, 0)", "setpgid(-2, 2)", "setpgid(-2, jpegcolormode)", "setpgid(-2, quality)", "strerror_l(-2, 0)", "tcsetpgrp(-2, -2)", "tcsetpgrp(-2, 0)", "tcsetpgrp(-2, 2)", "tcsetpgrp(-2, jpegcolormode)", "tcsetpgrp(-2, quality)", "tolower_l(-2, 0)", "toupper_l(-2, 0)", "ungetc(-2, 0)", "{\n}\n", "LogL10toY(-2)", "LogL16toY(-2)", "TIFFGetBitRevTable(-2)", "_Exit(-2)", "_TIFFmalloc(-2)", "__getpgid(-2)", "_exit(-2)", "_tolower(-2)", "_toupper(-2)", "abs(-2)", "close(-2)", "dup(-2)", "exit(-2)", "fchdir(-2)", "fdatasync(-2)", "ffs(-2)", "fsync(-2)", "getpgid(-2)", "getsid(-2)", "isalnum(-2)", "isalpha(-2)", "isascii(-2)", "isatty(-2)", "isblank(-2)", "iscntrl(-2)", "isdigit(-2)", "isgraph(-2)", "islower(-2)", "isprint(-2)", "ispunct(-2)", "isspace(-2)", "isupper(-2)", "isxdigit(-2)", "nice(-2)", "putchar(-2)", "putchar_unlocked(-2)", "quick_exit(-2)", "strerror(-2)", "strsignal(-2)", "sysconf(-2)", "tcgetpgrp(-2)", "toascii(-2)", "tolower(-2)", "toupper(-2)", "ttyname(-2)", "exit(-(0))", "exit(-(file != 0))", "exit(-(file == 0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.6310278344281457]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.912023005428146]
								}, {
									"case":	51,
									"scores":	[-3.912023005428146]
								}, {
									"case":	52,
									"scores":	[-3.912023005428146]
								}, {
									"case":	53,
									"scores":	[-3.912023005428146]
								}, {
									"case":	54,
									"scores":	[-3.912023005428146]
								}, {
									"case":	55,
									"scores":	[-3.912023005428146]
								}, {
									"case":	56,
									"scores":	[-3.912023005428146]
								}, {
									"case":	57,
									"scores":	[-3.912023005428146]
								}, {
									"case":	58,
									"scores":	[-3.912023005428146]
								}, {
									"case":	59,
									"scores":	[-3.912023005428146]
								}, {
									"case":	60,
									"scores":	[-3.912023005428146]
								}, {
									"case":	61,
									"scores":	[-3.912023005428146]
								}, {
									"case":	62,
									"scores":	[-3.912023005428146]
								}, {
									"case":	63,
									"scores":	[-3.912023005428146]
								}, {
									"case":	64,
									"scores":	[-3.912023005428146]
								}, {
									"case":	65,
									"scores":	[-3.912023005428146]
								}, {
									"case":	66,
									"scores":	[-3.912023005428146]
								}, {
									"case":	67,
									"scores":	[-3.912023005428146]
								}, {
									"case":	68,
									"scores":	[-3.912023005428146]
								}, {
									"case":	69,
									"scores":	[-3.912023005428146]
								}, {
									"case":	70,
									"scores":	[-3.912023005428146]
								}, {
									"case":	71,
									"scores":	[-3.912023005428146]
								}, {
									"case":	72,
									"scores":	[-3.912023005428146]
								}, {
									"case":	73,
									"scores":	[-3.912023005428146]
								}, {
									"case":	74,
									"scores":	[-3.912023005428146]
								}, {
									"case":	75,
									"scores":	[-3.912023005428146]
								}, {
									"case":	76,
									"scores":	[-3.912023005428146]
								}, {
									"case":	77,
									"scores":	[-3.912023005428146]
								}, {
									"case":	78,
									"scores":	[-3.912023005428146]
								}, {
									"case":	79,
									"scores":	[-3.912023005428146]
								}, {
									"case":	80,
									"scores":	[-3.912023005428146]
								}, {
									"case":	81,
									"scores":	[-3.912023005428146]
								}, {
									"case":	82,
									"scores":	[-3.912023005428146]
								}, {
									"case":	83,
									"scores":	[-3.912023005428146]
								}, {
									"case":	84,
									"scores":	[-3.912023005428146]
								}, {
									"case":	85,
									"scores":	[-3.912023005428146]
								}, {
									"case":	86,
									"scores":	[-3.912023005428146]
								}, {
									"case":	87,
									"scores":	[-3.912023005428146]
								}, {
									"case":	88,
									"scores":	[-3.912023005428146]
								}, {
									"case":	89,
									"scores":	[-3.912023005428146]
								}, {
									"case":	90,
									"scores":	[-3.912023005428146]
								}, {
									"case":	91,
									"scores":	[-3.912023005428146]
								}, {
									"case":	92,
									"scores":	[-3.912023005428146]
								}, {
									"case":	93,
									"scores":	[-3.912023005428146]
								}, {
									"case":	94,
									"scores":	[-3.912023005428146]
								}, {
									"case":	95,
									"scores":	[-3.912023005428146]
								}, {
									"case":	96,
									"scores":	[-3.912023005428146]
								}, {
									"case":	97,
									"scores":	[-3.912023005428146]
								}, {
									"case":	98,
									"scores":	[-3.912023005428146]
								}, {
									"case":	99,
									"scores":	[-3.912023005428146]
								}, {
									"case":	100,
									"scores":	[-3.912023005428146]
								}, {
									"case":	101,
									"scores":	[-3.912023005428146]
								}, {
									"case":	102,
									"scores":	[-3.912023005428146]
								}, {
									"case":	103,
									"scores":	[-3.912023005428146]
								}, {
									"case":	104,
									"scores":	[-3.912023005428146]
								}, {
									"case":	105,
									"scores":	[-3.912023005428146]
								}, {
									"case":	106,
									"scores":	[-3.912023005428146]
								}, {
									"case":	107,
									"scores":	[-3.912023005428146]
								}, {
									"case":	108,
									"scores":	[-3.912023005428146]
								}, {
									"case":	109,
									"scores":	[-3.912023005428146]
								}, {
									"case":	110,
									"scores":	[-3.912023005428146]
								}]
						}]
				}, {
					"line":	71,
					"switches":	[]
				}, {
					"line":	72,
					"switches":	[]
				}, {
					"line":	73,
					"switches":	[]
				}, {
					"line":	74,
					"switches":	[]
				}, {
					"line":	75,
					"switches":	[]
				}, {
					"line":	76,
					"switches":	[]
				}, {
					"line":	77,
					"switches":	[]
				}, {
					"line":	78,
					"switches":	[]
				}, {
					"line":	79,
					"switches":	[]
				}, {
					"line":	80,
					"switches":	[]
				}, {
					"line":	81,
					"switches":	[]
				}, {
					"line":	82,
					"switches":	[]
				}, {
					"line":	83,
					"switches":	[]
				}, {
					"line":	85,
					"switches":	[{
							"switch":	4,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	86,
							"begin_column":	0,
							"end_line":	86,
							"end_column":	0,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	2,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	3,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	4,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	5,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	6,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	7,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	8,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	9,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	10,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	11,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	12,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	13,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	14,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	15,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	16,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	17,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	18,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	19,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	20,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	21,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	22,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	23,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	24,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	25,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	166,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	167,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	168,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	169,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	170,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	171,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	172,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	173,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	174,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	175,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	176,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	177,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	178,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	179,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	180,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	181,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	182,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	183,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	184,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	185,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	186,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	187,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	188,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	189,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	190,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	191,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	192,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	193,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	194,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	195,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	196,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	197,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	198,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	199,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	200,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	201,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	202,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	203,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	204,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	205,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	206,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	207,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	208,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	209,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	210,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	211,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	212,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	213,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	214,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	215,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	216,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	217,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	218,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	219,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	220,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	221,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	222,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	223,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	224,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	225,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	226,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	227,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	228,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	229,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	230,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	231,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	232,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	233,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	234,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	235,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	236,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	237,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	238,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	239,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	240,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	241,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	242,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	243,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	244,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	245,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	246,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	247,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	248,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	249,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	250,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	251,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	252,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	253,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	254,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	255,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	256,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	257,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	258,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	259,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	260,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	261,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	262,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	263,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	264,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	265,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	266,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	267,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	268,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	269,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	270,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	271,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	272,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	273,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	274,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	275,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	276,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	277,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	278,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	279,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	280,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	281,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	282,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	283,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	284,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	285,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	286,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	287,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	288,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	289,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	290,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	291,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	292,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	293,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	294,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	295,
									"scores":	[-5.07512528760334, -4.60341764760334, -6.42903803460334, -6.28540104760334, -6.76929973460334, -6.19292532260334, -6.64318343460334, -7.52216933460334, -6.25854238760334, -6.25854238760334, -6.76740161760334, -6.76740161760334, -6.25854238760334, -6.25854238760334, -6.25854238760334, -6.22111798760334, -6.76740161760334, -6.76740161760334, -6.25854238760334, -6.26524408760334, -6.25854238760334]
								}, {
									"case":	296,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	297,
									"scores":	[-5.76232928760334, -5.29062164760334, -7.11624203460334, -6.97260504760334, -7.45650373460334, -6.88012932260334, -7.33038743460334, -8.20937333460334, -6.94574638760334, -6.94574638760334, -7.45460561760334, -7.45460561760334, -6.94574638760334, -6.94574638760334, -6.94574638760334, -6.90832198760334, -7.45460561760334, -7.45460561760334, -6.94574638760334, -6.95244808760334, -6.94574638760334]
								}, {
									"case":	298,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	299,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	300,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	301,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	302,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	303,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	304,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	305,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	306,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	307,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	308,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	309,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	310,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	311,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	312,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	313,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	314,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	315,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	316,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	317,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	318,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	319,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	320,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	321,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}, {
									"case":	322,
									"scores":	[-7.78077528760334, -7.30906764760334, -9.13468803460334, -8.99105104760334, -9.47494973460334, -8.89857532260334, -9.34883343460334, -10.227819334603339, -8.96419238760334, -8.96419238760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.96419238760334, -8.96419238760334, -8.92676798760334, -9.47305161760334, -9.47305161760334, -8.96419238760334, -8.97089408760334, -8.96419238760334]
								}]
						}, {
							"switch":	5,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	86,
							"begin_column":	2,
							"end_line":	89,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Too few arguments\\n\", argv[0]);\n    usage();\n}\n", "if ((argc < 2) || __is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Too few arguments\\n\", argv[0]);\n    usage();\n}\n", "if ((argc < 2) && !__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Too few arguments\\n\", argv[0]);\n    usage();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.568890202928146, -4.765062012928146, -5.7455021249281453, -4.5317489129281459, -5.410222724928146, -5.4086406639281464, -5.7988152249281466, -6.9340838249281465, -5.3439680529281457, -5.3439680529281457, -5.8949890329281462, -5.8949890329281462, -5.3439680529281457, -5.3439680529281457, -5.3439680529281457, -6.1469201529281463, -5.8949890329281462, -5.8949890329281462, -5.3439680529281457, -5.6927572529281463, -5.3439680529281457]
								}, {
									"case":	2,
									"scores":	[-3.0674064214281458, -4.2635782314281458, -5.244018343428146, -4.0302651314281457, -4.9087389434281459, -4.9071568824281453, -5.2973314434281455, -6.4326000434281454, -4.8424842714281455, -4.8424842714281455, -5.3935052514281461, -5.3935052514281461, -4.8424842714281455, -4.8424842714281455, -4.8424842714281455, -5.6454363714281461, -5.3935052514281461, -5.3935052514281461, -4.8424842714281455, -5.1912734714281461, -4.8424842714281455]
								}, {
									"case":	3,
									"scores":	[-3.0674064214281458, -4.2635782314281458, -5.244018343428146, -4.0302651314281457, -4.9087389434281459, -4.9071568824281453, -5.2973314434281455, -6.4326000434281454, -4.8424842714281455, -4.8424842714281455, -5.3935052514281461, -5.3935052514281461, -4.8424842714281455, -4.8424842714281455, -4.8424842714281455, -5.6454363714281461, -5.3935052514281461, -5.3935052514281461, -4.8424842714281455, -5.1912734714281461, -4.8424842714281455]
								}]
						}, {
							"switch":	6,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	86,
							"begin_column":	2,
							"end_line":	89,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    if (argc < 2) {\n        fprintf(stderr, \"%s: Too few arguments\\n\", argv[0]);\n        usage();\n    }\n", "if (!__is_neg(\"\", \"L86\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)) && (argc < 2)) {\n    fprintf(stderr, \"%s: Too few arguments\\n\", argv[0]);\n    usage();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.7486696486033408, -4.94484145860334, -5.92528157060334, -4.71152835860334, -5.5900021706033414, -5.58842010960334, -5.97859467060334, -7.11386327060334, -5.52374749860334, -5.52374749860334, -6.07476847860334, -6.07476847860334, -5.52374749860334, -5.52374749860334, -5.52374749860334, -6.32669959860334, -6.07476847860334, -6.07476847860334, -5.52374749860334, -5.87253669860334, -5.52374749860334]
								}, {
									"case":	2,
									"scores":	[-3.7715762546033407, -4.96774806460334, -5.94818817660334, -4.73443496460334, -5.61290877660334, -5.61132671560334, -6.00150127660334, -7.13676987660334, -5.54665410460334, -5.54665410460334, -6.09767508460334, -6.09767508460334, -5.54665410460334, -5.54665410460334, -5.54665410460334, -6.34960620460334, -6.09767508460334, -6.09767508460334, -5.54665410460334, -5.89544330460334, -5.54665410460334]
								}]
						}]
				}, {
					"line":	89,
					"switches":	[{
							"switch":	7,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	90,
							"begin_column":	0,
							"end_line":	90,
							"end_column":	0,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.09384737128582]
								}, {
									"case":	2,
									"scores":	[-4.09384737128582]
								}, {
									"case":	3,
									"scores":	[-4.09384737128582]
								}, {
									"case":	4,
									"scores":	[-4.09384737128582]
								}, {
									"case":	5,
									"scores":	[-4.09384737128582]
								}, {
									"case":	6,
									"scores":	[-4.09384737128582]
								}, {
									"case":	7,
									"scores":	[-4.09384737128582]
								}, {
									"case":	8,
									"scores":	[-4.09384737128582]
								}, {
									"case":	9,
									"scores":	[-4.09384737128582]
								}, {
									"case":	10,
									"scores":	[-4.09384737128582]
								}, {
									"case":	11,
									"scores":	[-4.09384737128582]
								}, {
									"case":	12,
									"scores":	[-4.09384737128582]
								}, {
									"case":	13,
									"scores":	[-4.09384737128582]
								}, {
									"case":	14,
									"scores":	[-4.09384737128582]
								}, {
									"case":	15,
									"scores":	[-4.09384737128582]
								}, {
									"case":	16,
									"scores":	[-4.09384737128582]
								}, {
									"case":	17,
									"scores":	[-4.09384737128582]
								}, {
									"case":	18,
									"scores":	[-4.09384737128582]
								}, {
									"case":	19,
									"scores":	[-4.09384737128582]
								}, {
									"case":	20,
									"scores":	[-4.09384737128582]
								}, {
									"case":	21,
									"scores":	[-4.09384737128582]
								}, {
									"case":	22,
									"scores":	[-4.09384737128582]
								}, {
									"case":	23,
									"scores":	[-4.09384737128582]
								}, {
									"case":	24,
									"scores":	[-4.09384737128582]
								}, {
									"case":	25,
									"scores":	[-4.09384737128582]
								}, {
									"case":	26,
									"scores":	[-4.09384737128582]
								}, {
									"case":	27,
									"scores":	[-4.09384737128582]
								}, {
									"case":	28,
									"scores":	[-4.09384737128582]
								}, {
									"case":	29,
									"scores":	[-4.09384737128582]
								}, {
									"case":	30,
									"scores":	[-4.09384737128582]
								}, {
									"case":	31,
									"scores":	[-4.09384737128582]
								}, {
									"case":	32,
									"scores":	[-4.09384737128582]
								}, {
									"case":	33,
									"scores":	[-4.09384737128582]
								}, {
									"case":	34,
									"scores":	[-4.09384737128582]
								}, {
									"case":	35,
									"scores":	[-4.09384737128582]
								}, {
									"case":	36,
									"scores":	[-4.09384737128582]
								}, {
									"case":	37,
									"scores":	[-4.09384737128582]
								}, {
									"case":	38,
									"scores":	[-4.09384737128582]
								}, {
									"case":	39,
									"scores":	[-4.09384737128582]
								}, {
									"case":	40,
									"scores":	[-4.09384737128582]
								}, {
									"case":	41,
									"scores":	[-4.09384737128582]
								}, {
									"case":	42,
									"scores":	[-4.09384737128582]
								}, {
									"case":	43,
									"scores":	[-4.09384737128582]
								}, {
									"case":	44,
									"scores":	[-4.09384737128582]
								}, {
									"case":	45,
									"scores":	[-4.09384737128582]
								}, {
									"case":	46,
									"scores":	[-4.09384737128582]
								}, {
									"case":	47,
									"scores":	[-4.09384737128582]
								}, {
									"case":	48,
									"scores":	[-4.09384737128582]
								}, {
									"case":	49,
									"scores":	[-4.09384737128582]
								}, {
									"case":	50,
									"scores":	[-4.09384737128582]
								}, {
									"case":	51,
									"scores":	[-4.09384737128582]
								}, {
									"case":	52,
									"scores":	[-4.09384737128582]
								}, {
									"case":	53,
									"scores":	[-4.09384737128582]
								}, {
									"case":	54,
									"scores":	[-4.09384737128582]
								}, {
									"case":	55,
									"scores":	[-4.09384737128582]
								}, {
									"case":	56,
									"scores":	[-4.09384737128582]
								}, {
									"case":	57,
									"scores":	[-4.09384737128582]
								}, {
									"case":	58,
									"scores":	[-4.09384737128582]
								}, {
									"case":	59,
									"scores":	[-4.09384737128582]
								}, {
									"case":	60,
									"scores":	[-4.09384737128582]
								}, {
									"case":	61,
									"scores":	[-4.09384737128582]
								}, {
									"case":	62,
									"scores":	[-4.09384737128582]
								}, {
									"case":	63,
									"scores":	[-4.09384737128582]
								}, {
									"case":	64,
									"scores":	[-4.09384737128582]
								}, {
									"case":	65,
									"scores":	[-4.09384737128582]
								}, {
									"case":	66,
									"scores":	[-4.09384737128582]
								}, {
									"case":	67,
									"scores":	[-4.09384737128582]
								}, {
									"case":	68,
									"scores":	[-4.09384737128582]
								}, {
									"case":	69,
									"scores":	[-4.09384737128582]
								}, {
									"case":	70,
									"scores":	[-4.09384737128582]
								}, {
									"case":	71,
									"scores":	[-4.09384737128582]
								}, {
									"case":	72,
									"scores":	[-4.09384737128582]
								}, {
									"case":	73,
									"scores":	[-4.09384737128582]
								}, {
									"case":	74,
									"scores":	[-4.09384737128582]
								}, {
									"case":	75,
									"scores":	[-4.09384737128582]
								}, {
									"case":	76,
									"scores":	[-4.09384737128582]
								}, {
									"case":	77,
									"scores":	[-4.09384737128582]
								}, {
									"case":	78,
									"scores":	[-4.09384737128582]
								}, {
									"case":	79,
									"scores":	[-4.09384737128582]
								}, {
									"case":	80,
									"scores":	[-4.09384737128582]
								}, {
									"case":	81,
									"scores":	[-4.09384737128582]
								}, {
									"case":	82,
									"scores":	[-4.09384737128582]
								}, {
									"case":	83,
									"scores":	[-4.09384737128582]
								}, {
									"case":	84,
									"scores":	[-4.09384737128582]
								}, {
									"case":	85,
									"scores":	[-4.09384737128582]
								}, {
									"case":	86,
									"scores":	[-4.09384737128582]
								}, {
									"case":	87,
									"scores":	[-4.09384737128582]
								}, {
									"case":	88,
									"scores":	[-4.09384737128582]
								}, {
									"case":	89,
									"scores":	[-4.09384737128582]
								}, {
									"case":	90,
									"scores":	[-4.09384737128582]
								}, {
									"case":	91,
									"scores":	[-4.09384737128582]
								}, {
									"case":	92,
									"scores":	[-4.09384737128582]
								}, {
									"case":	93,
									"scores":	[-4.09384737128582]
								}, {
									"case":	94,
									"scores":	[-4.09384737128582]
								}, {
									"case":	95,
									"scores":	[-4.09384737128582]
								}, {
									"case":	96,
									"scores":	[-4.09384737128582]
								}, {
									"case":	97,
									"scores":	[-4.09384737128582]
								}, {
									"case":	98,
									"scores":	[-4.09384737128582]
								}, {
									"case":	99,
									"scores":	[-4.09384737128582]
								}, {
									"case":	100,
									"scores":	[-4.09384737128582]
								}, {
									"case":	101,
									"scores":	[-4.09384737128582]
								}, {
									"case":	102,
									"scores":	[-4.09384737128582]
								}, {
									"case":	103,
									"scores":	[-4.09384737128582]
								}, {
									"case":	104,
									"scores":	[-4.09384737128582]
								}, {
									"case":	105,
									"scores":	[-4.09384737128582]
								}, {
									"case":	106,
									"scores":	[-4.09384737128582]
								}, {
									"case":	107,
									"scores":	[-4.09384737128582]
								}, {
									"case":	108,
									"scores":	[-4.09384737128582]
								}, {
									"case":	109,
									"scores":	[-4.09384737128582]
								}, {
									"case":	110,
									"scores":	[-4.09384737128582]
								}, {
									"case":	111,
									"scores":	[-4.09384737128582]
								}, {
									"case":	112,
									"scores":	[-4.09384737128582]
								}, {
									"case":	113,
									"scores":	[-4.09384737128582]
								}, {
									"case":	114,
									"scores":	[-4.09384737128582]
								}, {
									"case":	115,
									"scores":	[-4.09384737128582]
								}, {
									"case":	116,
									"scores":	[-4.09384737128582]
								}, {
									"case":	117,
									"scores":	[-4.09384737128582]
								}, {
									"case":	118,
									"scores":	[-4.09384737128582]
								}, {
									"case":	119,
									"scores":	[-4.09384737128582]
								}, {
									"case":	120,
									"scores":	[-4.09384737128582]
								}, {
									"case":	121,
									"scores":	[-4.09384737128582]
								}, {
									"case":	122,
									"scores":	[-4.09384737128582]
								}, {
									"case":	123,
									"scores":	[-4.09384737128582]
								}, {
									"case":	124,
									"scores":	[-4.09384737128582]
								}, {
									"case":	125,
									"scores":	[-4.09384737128582]
								}, {
									"case":	126,
									"scores":	[-4.09384737128582]
								}, {
									"case":	127,
									"scores":	[-4.09384737128582]
								}, {
									"case":	128,
									"scores":	[-4.09384737128582]
								}, {
									"case":	129,
									"scores":	[-4.09384737128582]
								}, {
									"case":	130,
									"scores":	[-4.09384737128582]
								}, {
									"case":	131,
									"scores":	[-4.09384737128582]
								}, {
									"case":	132,
									"scores":	[-4.09384737128582]
								}, {
									"case":	133,
									"scores":	[-4.09384737128582]
								}, {
									"case":	134,
									"scores":	[-4.09384737128582]
								}, {
									"case":	135,
									"scores":	[-4.09384737128582]
								}, {
									"case":	136,
									"scores":	[-4.09384737128582]
								}, {
									"case":	137,
									"scores":	[-4.09384737128582]
								}, {
									"case":	138,
									"scores":	[-4.09384737128582]
								}, {
									"case":	139,
									"scores":	[-4.09384737128582]
								}, {
									"case":	140,
									"scores":	[-4.09384737128582]
								}, {
									"case":	141,
									"scores":	[-4.09384737128582]
								}, {
									"case":	142,
									"scores":	[-4.09384737128582]
								}, {
									"case":	143,
									"scores":	[-4.09384737128582]
								}, {
									"case":	144,
									"scores":	[-4.09384737128582]
								}, {
									"case":	145,
									"scores":	[-4.09384737128582]
								}, {
									"case":	146,
									"scores":	[-4.09384737128582]
								}, {
									"case":	147,
									"scores":	[-4.09384737128582]
								}, {
									"case":	148,
									"scores":	[-4.09384737128582]
								}, {
									"case":	149,
									"scores":	[-4.09384737128582]
								}, {
									"case":	150,
									"scores":	[-4.09384737128582]
								}, {
									"case":	151,
									"scores":	[-4.09384737128582]
								}, {
									"case":	152,
									"scores":	[-4.09384737128582]
								}, {
									"case":	153,
									"scores":	[-4.09384737128582]
								}, {
									"case":	154,
									"scores":	[-4.09384737128582]
								}, {
									"case":	155,
									"scores":	[-4.09384737128582]
								}, {
									"case":	156,
									"scores":	[-4.09384737128582]
								}, {
									"case":	157,
									"scores":	[-4.09384737128582]
								}, {
									"case":	158,
									"scores":	[-4.09384737128582]
								}, {
									"case":	159,
									"scores":	[-4.09384737128582]
								}, {
									"case":	160,
									"scores":	[-4.09384737128582]
								}, {
									"case":	161,
									"scores":	[-4.09384737128582]
								}, {
									"case":	162,
									"scores":	[-4.09384737128582]
								}, {
									"case":	163,
									"scores":	[-4.09384737128582]
								}, {
									"case":	164,
									"scores":	[-4.09384737128582]
								}, {
									"case":	165,
									"scores":	[-4.09384737128582]
								}, {
									"case":	166,
									"scores":	[-4.09384737128582]
								}, {
									"case":	167,
									"scores":	[-4.09384737128582]
								}, {
									"case":	168,
									"scores":	[-4.09384737128582]
								}, {
									"case":	169,
									"scores":	[-4.09384737128582]
								}, {
									"case":	170,
									"scores":	[-4.09384737128582]
								}, {
									"case":	171,
									"scores":	[-4.09384737128582]
								}, {
									"case":	172,
									"scores":	[-4.09384737128582]
								}, {
									"case":	173,
									"scores":	[-4.09384737128582]
								}, {
									"case":	174,
									"scores":	[-4.09384737128582]
								}, {
									"case":	175,
									"scores":	[-4.09384737128582]
								}, {
									"case":	176,
									"scores":	[-4.09384737128582]
								}, {
									"case":	177,
									"scores":	[-4.09384737128582]
								}, {
									"case":	178,
									"scores":	[-4.09384737128582]
								}, {
									"case":	179,
									"scores":	[-4.09384737128582]
								}, {
									"case":	180,
									"scores":	[-4.09384737128582]
								}, {
									"case":	181,
									"scores":	[-4.09384737128582]
								}, {
									"case":	182,
									"scores":	[-4.09384737128582]
								}, {
									"case":	183,
									"scores":	[-4.09384737128582]
								}, {
									"case":	184,
									"scores":	[-4.09384737128582]
								}, {
									"case":	185,
									"scores":	[-4.09384737128582]
								}, {
									"case":	186,
									"scores":	[-4.09384737128582]
								}, {
									"case":	187,
									"scores":	[-4.09384737128582]
								}, {
									"case":	188,
									"scores":	[-4.09384737128582]
								}, {
									"case":	189,
									"scores":	[-4.09384737128582]
								}, {
									"case":	190,
									"scores":	[-4.09384737128582]
								}, {
									"case":	191,
									"scores":	[-4.09384737128582]
								}, {
									"case":	192,
									"scores":	[-4.09384737128582]
								}, {
									"case":	193,
									"scores":	[-4.09384737128582]
								}, {
									"case":	194,
									"scores":	[-4.09384737128582]
								}, {
									"case":	195,
									"scores":	[-4.09384737128582]
								}, {
									"case":	196,
									"scores":	[-4.09384737128582]
								}, {
									"case":	197,
									"scores":	[-4.09384737128582]
								}, {
									"case":	198,
									"scores":	[-4.09384737128582]
								}, {
									"case":	199,
									"scores":	[-4.09384737128582]
								}, {
									"case":	200,
									"scores":	[-4.09384737128582]
								}, {
									"case":	201,
									"scores":	[-4.09384737128582]
								}, {
									"case":	202,
									"scores":	[-4.09384737128582]
								}, {
									"case":	203,
									"scores":	[-4.09384737128582]
								}, {
									"case":	204,
									"scores":	[-4.09384737128582]
								}, {
									"case":	205,
									"scores":	[-4.09384737128582]
								}, {
									"case":	206,
									"scores":	[-4.09384737128582]
								}, {
									"case":	207,
									"scores":	[-4.09384737128582]
								}, {
									"case":	208,
									"scores":	[-4.09384737128582]
								}, {
									"case":	209,
									"scores":	[-4.09384737128582]
								}, {
									"case":	210,
									"scores":	[-4.09384737128582]
								}, {
									"case":	211,
									"scores":	[-4.09384737128582]
								}, {
									"case":	212,
									"scores":	[-4.09384737128582]
								}, {
									"case":	213,
									"scores":	[-4.09384737128582]
								}, {
									"case":	214,
									"scores":	[-4.09384737128582]
								}, {
									"case":	215,
									"scores":	[-4.09384737128582]
								}, {
									"case":	216,
									"scores":	[-4.09384737128582]
								}, {
									"case":	217,
									"scores":	[-4.09384737128582]
								}, {
									"case":	218,
									"scores":	[-4.09384737128582]
								}, {
									"case":	219,
									"scores":	[-4.09384737128582]
								}, {
									"case":	220,
									"scores":	[-4.09384737128582]
								}, {
									"case":	221,
									"scores":	[-4.09384737128582]
								}, {
									"case":	222,
									"scores":	[-4.09384737128582]
								}, {
									"case":	223,
									"scores":	[-4.09384737128582]
								}, {
									"case":	224,
									"scores":	[-4.09384737128582]
								}, {
									"case":	225,
									"scores":	[-4.09384737128582]
								}, {
									"case":	226,
									"scores":	[-4.09384737128582]
								}, {
									"case":	227,
									"scores":	[-4.09384737128582]
								}, {
									"case":	228,
									"scores":	[-4.09384737128582]
								}, {
									"case":	229,
									"scores":	[-4.09384737128582]
								}, {
									"case":	230,
									"scores":	[-4.09384737128582]
								}, {
									"case":	231,
									"scores":	[-4.09384737128582]
								}, {
									"case":	232,
									"scores":	[-4.09384737128582]
								}, {
									"case":	233,
									"scores":	[-4.09384737128582]
								}, {
									"case":	234,
									"scores":	[-4.09384737128582]
								}, {
									"case":	235,
									"scores":	[-4.09384737128582]
								}, {
									"case":	236,
									"scores":	[-4.09384737128582]
								}, {
									"case":	237,
									"scores":	[-4.09384737128582]
								}, {
									"case":	238,
									"scores":	[-4.09384737128582]
								}, {
									"case":	239,
									"scores":	[-4.09384737128582]
								}, {
									"case":	240,
									"scores":	[-4.09384737128582]
								}, {
									"case":	241,
									"scores":	[-4.09384737128582]
								}, {
									"case":	242,
									"scores":	[-4.09384737128582]
								}, {
									"case":	243,
									"scores":	[-4.09384737128582]
								}, {
									"case":	244,
									"scores":	[-4.09384737128582]
								}, {
									"case":	245,
									"scores":	[-4.09384737128582]
								}, {
									"case":	246,
									"scores":	[-4.09384737128582]
								}, {
									"case":	247,
									"scores":	[-4.09384737128582]
								}, {
									"case":	248,
									"scores":	[-4.09384737128582]
								}, {
									"case":	249,
									"scores":	[-4.09384737128582]
								}, {
									"case":	250,
									"scores":	[-4.09384737128582]
								}, {
									"case":	251,
									"scores":	[-4.09384737128582]
								}, {
									"case":	252,
									"scores":	[-4.09384737128582]
								}, {
									"case":	253,
									"scores":	[-4.09384737128582]
								}, {
									"case":	254,
									"scores":	[-4.09384737128582]
								}, {
									"case":	255,
									"scores":	[-4.09384737128582]
								}, {
									"case":	256,
									"scores":	[-4.09384737128582]
								}, {
									"case":	257,
									"scores":	[-4.09384737128582]
								}, {
									"case":	258,
									"scores":	[-4.09384737128582]
								}, {
									"case":	259,
									"scores":	[-4.09384737128582]
								}, {
									"case":	260,
									"scores":	[-4.09384737128582]
								}, {
									"case":	261,
									"scores":	[-4.09384737128582]
								}, {
									"case":	262,
									"scores":	[-4.09384737128582]
								}, {
									"case":	263,
									"scores":	[-4.09384737128582]
								}, {
									"case":	264,
									"scores":	[-4.09384737128582]
								}, {
									"case":	265,
									"scores":	[-4.09384737128582]
								}, {
									"case":	266,
									"scores":	[-4.09384737128582]
								}, {
									"case":	267,
									"scores":	[-4.09384737128582]
								}, {
									"case":	268,
									"scores":	[-4.09384737128582]
								}, {
									"case":	269,
									"scores":	[-4.09384737128582]
								}, {
									"case":	270,
									"scores":	[-4.09384737128582]
								}, {
									"case":	271,
									"scores":	[-4.09384737128582]
								}, {
									"case":	272,
									"scores":	[-4.09384737128582]
								}, {
									"case":	273,
									"scores":	[-4.09384737128582]
								}, {
									"case":	274,
									"scores":	[-4.09384737128582]
								}, {
									"case":	275,
									"scores":	[-4.09384737128582]
								}, {
									"case":	276,
									"scores":	[-4.09384737128582]
								}, {
									"case":	277,
									"scores":	[-4.09384737128582]
								}, {
									"case":	278,
									"scores":	[-4.09384737128582]
								}, {
									"case":	279,
									"scores":	[-4.09384737128582]
								}, {
									"case":	280,
									"scores":	[-4.09384737128582]
								}, {
									"case":	281,
									"scores":	[-4.09384737128582]
								}, {
									"case":	282,
									"scores":	[-4.09384737128582]
								}, {
									"case":	283,
									"scores":	[-4.09384737128582]
								}, {
									"case":	284,
									"scores":	[-4.09384737128582]
								}, {
									"case":	285,
									"scores":	[-4.09384737128582]
								}, {
									"case":	286,
									"scores":	[-4.09384737128582]
								}, {
									"case":	287,
									"scores":	[-4.09384737128582]
								}, {
									"case":	288,
									"scores":	[-4.09384737128582]
								}, {
									"case":	289,
									"scores":	[-4.09384737128582]
								}, {
									"case":	290,
									"scores":	[-4.09384737128582]
								}, {
									"case":	291,
									"scores":	[-4.09384737128582]
								}, {
									"case":	292,
									"scores":	[-4.09384737128582]
								}, {
									"case":	293,
									"scores":	[-4.09384737128582]
								}, {
									"case":	294,
									"scores":	[-4.09384737128582]
								}, {
									"case":	295,
									"scores":	[-4.55096721728582, -5.64820907728582, -6.47617574828582, -4.77698497728582, -6.67008924828582, -6.52279855228582, -6.97305666428582, -7.71922456428582, -6.58841561728582, -6.58841561728582, -7.09727484728582, -7.09727484728582, -6.58841561728582, -6.58841561728582, -6.58841561728582, -6.55099121728582, -7.09727484728582, -7.09727484728582, -6.58841561728582, -6.59511731728582, -6.58841561728582]
								}, {
									"case":	296,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	297,
									"scores":	[-5.23817121728582, -6.33541307728582, -7.16337974828582, -5.46418897728582, -7.35729324828582, -7.21000255228582, -7.66026066428582, -8.40642856428582, -7.2756196172858214, -7.2756196172858214, -7.78447884728582, -7.78447884728582, -7.2756196172858214, -7.2756196172858214, -7.2756196172858214, -7.23819521728582, -7.78447884728582, -7.78447884728582, -7.2756196172858214, -7.28232131728582, -7.2756196172858214]
								}, {
									"case":	298,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	299,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	300,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	301,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	302,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	303,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	304,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	305,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	306,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	307,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	308,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	309,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	310,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	311,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	312,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	313,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	314,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	315,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	316,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	317,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	318,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	319,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	320,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	321,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}, {
									"case":	322,
									"scores":	[-7.2566172172858217, -8.35385907728582, -9.18182574828582, -7.48263497728582, -9.37573924828582, -9.22844855228582, -9.67870666428582, -10.424874564285821, -9.29406561728582, -9.29406561728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.29406561728582, -9.29406561728582, -9.25664121728582, -9.80292484728582, -9.80292484728582, -9.29406561728582, -9.30076731728582, -9.29406561728582]
								}]
						}, {
							"switch":	8,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	90,
							"begin_column":	2,
							"end_line":	105,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L90\", 21, &(argc), sizeof (argc), &(argv), sizeof (argv), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(optind), sizeof (optind), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    while ((c = getopt(argc, argv, \"c:r:R:\")) != -1)\n        switch (c) {\n          case 'c':\n            if (!processCompressOptions(optarg))\n                usage();\n            break;\n          case 'r':\n            rowsperstrip = atoi(optarg);\n            break;\n          case 'R':\n            resolution = atof(optarg);\n            break;\n          case '?':\n            usage();\n        }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.04649728128582, -6.73171593428582, -6.8209177912858214, -5.35709739128582, -6.19730079128582, -5.32428440228582, -6.61845896328582, -7.8272198632858219, -6.16361179128582, -6.16361179128582, -6.71463277128582, -6.71463277128582, -6.16361179128582, -6.16361179128582, -6.16361179128582, -6.96656389128582, -6.71463277128582, -6.71463277128582, -6.16361179128582, -6.51240099128582, -6.16361179128582]
								}]
						}]
				}, {
					"line":	106,
					"switches":	[{
							"switch":	9,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	107,
							"begin_column":	0,
							"end_line":	107,
							"end_column":	0,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	2,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	3,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	4,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	5,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	6,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	7,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	8,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	9,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	10,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	11,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	12,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	13,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	14,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	15,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	16,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	17,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	18,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	19,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	20,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	21,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	22,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	23,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	24,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	25,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	26,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	27,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	28,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	29,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	30,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	31,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	32,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	33,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	34,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	35,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	36,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	37,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	38,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	39,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	40,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	41,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	42,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	43,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	44,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	45,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	46,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	47,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	48,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	49,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	50,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	51,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	52,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	53,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	54,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	55,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	56,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	57,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	58,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	59,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	60,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	61,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	62,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	63,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	64,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	65,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	66,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	67,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	68,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	69,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	70,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	71,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	72,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	73,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	74,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	75,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	76,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	77,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	78,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	79,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	80,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	81,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	82,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	83,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	84,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	85,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	86,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	87,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	88,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	89,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	90,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	91,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	92,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	93,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	94,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	95,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	96,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	97,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	98,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	99,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	100,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	101,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	102,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	103,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	104,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	105,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	106,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	107,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	108,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	109,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	110,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	111,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	112,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	113,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	114,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	115,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	116,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	117,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	118,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	119,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	120,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	121,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	122,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	123,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	124,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	125,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	126,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	127,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	128,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	129,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	130,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	131,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	132,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	133,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	134,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	135,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	136,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	137,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	138,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	139,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	140,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	141,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	142,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	143,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	144,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	145,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	146,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	147,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	148,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	149,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	150,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	151,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	152,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	153,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	154,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	155,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	156,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	157,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	158,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	159,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	160,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	161,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	162,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	163,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	164,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	165,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	166,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	167,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	168,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	169,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	170,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	171,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	172,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	173,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	174,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	175,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	176,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	177,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	178,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	179,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	180,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	181,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	182,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	183,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	184,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	185,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	186,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	187,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	188,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	189,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	190,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	191,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	192,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	193,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	194,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	195,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	196,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	197,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	198,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	199,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	200,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	201,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	202,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	203,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	204,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	205,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	206,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	207,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	208,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	209,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	210,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	211,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	212,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	213,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	214,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	215,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	216,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	217,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	218,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	219,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	220,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	221,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	222,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	223,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	224,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	225,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	226,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	227,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	228,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	229,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	230,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	231,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	232,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	233,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	234,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	235,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	236,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	237,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	238,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	239,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	240,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	241,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	242,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	243,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	244,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	245,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	246,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	247,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	248,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	249,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	250,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	251,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	252,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	253,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	254,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	255,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	256,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	257,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	258,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	259,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	260,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	261,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	262,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	263,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	264,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	265,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	266,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	267,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	268,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	269,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	270,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	271,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	272,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	273,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	274,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	275,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	276,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	277,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	278,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	279,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	280,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	281,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	282,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	283,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	284,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	285,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	286,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	287,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	288,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	289,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	290,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	291,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	292,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	293,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	294,
									"scores":	[-4.0736446639683015]
								}, {
									"case":	295,
									"scores":	[-6.4579956239683014, -6.5101185189683015, -7.2445381439683, -7.1583142839683, -4.789838983968302, -7.5353030309683016, -8.2814709309683, -5.1310655839683017, -7.6688598152123015, -7.6688598152123015, -8.4498152139683, -8.4498152139683, -7.1506619839683019, -7.1506619839683019, -7.1506619839683019, -7.1132375839683, -7.6595212139683024, -7.6595212139683024, -7.1506619839683019, -7.1573636839683017, -7.1506619839683019]
								}, {
									"case":	296,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	297,
									"scores":	[-7.1451996239683, -7.1973225189683, -7.9317421439683, -7.8455182839683015, -5.4770429839683015, -8.2225070309683, -8.9686749309683, -5.8182695839683021, -8.3560638152123, -8.3560638152123, -9.1370192139683, -9.1370192139683, -7.8378659839683014, -7.8378659839683014, -7.8378659839683014, -7.8004415839683015, -8.3467252139683, -8.3467252139683, -7.8378659839683014, -7.8445676839683021, -7.8378659839683014]
								}, {
									"case":	298,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	299,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	300,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	301,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	302,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	303,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	304,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	305,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	306,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	307,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	308,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	309,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	310,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	311,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	312,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	313,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	314,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	315,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	316,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	317,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	318,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	319,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	320,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	321,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}, {
									"case":	322,
									"scores":	[-9.1636456239683, -9.2157685189683, -9.9501881439683, -9.8639642839683, -7.4954889839683023, -10.240953030968303, -10.9871209309683, -7.8367155839683, -10.374509815212303, -10.374509815212303, -11.1554652139683, -11.1554652139683, -9.8563119839683, -9.8563119839683, -9.8563119839683, -9.8188875839683, -10.365171213968303, -10.365171213968303, -9.8563119839683, -9.8630136839683, -9.8563119839683]
								}]
						}, {
							"switch":	10,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	107,
							"begin_column":	2,
							"end_line":	110,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Too many arguments\\n\", argv[0]);\n    usage();\n}\n", "if ((optind + 2 < argc) || __is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Too many arguments\\n\", argv[0]);\n    usage();\n}\n", "if ((optind + 2 < argc) && !__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Too many arguments\\n\", argv[0]);\n    usage();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.6676479919281455, -3.8821600069281454, -4.7456735849281451, -5.4503108909281455, -4.6534527469281457, -5.2341588139281461, -5.1273977139281453, -5.0793307469281466, -5.5056808659281451, -5.5056808659281451, -6.7716706219281457, -6.7716706219281457, -5.4660516419281455, -5.4660516419281455, -5.4660516419281455, -6.2690037419281452, -6.0170726219281452, -6.0170726219281452, -5.4660516419281455, -5.8148408419281452, -5.4660516419281455]
								}, {
									"case":	2,
									"scores":	[-2.5737114121281457, -2.7882234271281452, -3.6517370051281448, -4.3563743111281461, -3.5595161671281459, -4.1402222341281449, -4.033461134128145, -3.9853941671281459, -4.4117442861281457, -4.4117442861281457, -5.6777340421281455, -5.6777340421281455, -4.3721150621281462, -4.3721150621281462, -4.3721150621281462, -5.1750671621281459, -4.9231360421281458, -4.9231360421281458, -4.3721150621281462, -4.7209042621281458, -4.3721150621281462]
								}, {
									"case":	3,
									"scores":	[-2.5737114121281457, -2.7882234271281452, -3.6517370051281448, -4.3563743111281461, -3.5595161671281459, -4.1402222341281449, -4.033461134128145, -3.9853941671281459, -4.4117442861281457, -4.4117442861281457, -5.6777340421281455, -5.6777340421281455, -4.3721150621281462, -4.3721150621281462, -4.3721150621281462, -5.1750671621281459, -4.9231360421281458, -4.9231360421281458, -4.3721150621281462, -4.7209042621281458, -4.3721150621281462]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	107,
							"begin_column":	2,
							"end_line":	110,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    if (optind + 2 < argc) {\n        fprintf(stderr, \"%s: Too many arguments\\n\", argv[0]);\n        usage();\n    }\n", "if (!__is_neg(\"\", \"L107\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(infile), sizeof (infile), &(in), sizeof (in), &(c), sizeof (c), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)) && (optind + 2 < argc)) {\n    fprintf(stderr, \"%s: Too many arguments\\n\", argv[0]);\n    usage();\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.8772408339683015, -4.0917528489683015, -4.9552664269683016, -5.6599037329683, -4.8630455889683, -5.4437516559683026, -5.3369905559683017, -5.2889235889683022, -5.7152737079683, -5.7152737079683, -6.9812634639683, -6.9812634639683, -5.675644483968302, -5.675644483968302, -5.675644483968302, -6.4785965839683017, -6.2266654639683017, -6.2266654639683017, -5.675644483968302, -6.0244336839683017, -5.675644483968302]
								}, {
									"case":	2,
									"scores":	[-3.7621762306683015, -3.9766882456683015, -4.8402018236683, -5.5448391296683015, -4.7479809856683, -5.3286870526683, -5.2219259526683, -5.1738589856683017, -5.6002091046683, -5.6002091046683, -6.8661988606683018, -6.8661988606683018, -5.5605798806683016, -5.5605798806683016, -5.5605798806683016, -6.3635319806683022, -6.1116008606683, -6.1116008606683, -5.5605798806683016, -5.9093690806683021, -5.5605798806683016]
								}]
						}]
				}, {
					"line":	116,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	117,
							"begin_column":	1,
							"end_line":	117,
							"end_column":	1,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	2,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	3,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	4,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	5,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	6,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	7,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	8,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	9,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	10,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	11,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	12,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	13,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	14,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	15,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	16,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	17,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	18,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	19,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	20,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	21,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	22,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	23,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	24,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	25,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	26,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	27,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	28,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	29,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	30,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	31,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	32,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	33,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	34,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	35,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	36,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	37,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	38,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	39,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	40,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	41,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	42,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	43,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	44,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	45,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	46,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	47,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	48,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	49,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	50,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	51,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	52,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	53,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	54,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	55,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	56,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	57,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	58,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	59,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	60,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	61,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	62,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	63,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	64,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	65,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	66,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	67,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	68,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	69,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	70,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	71,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	72,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	73,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	74,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	75,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	76,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	77,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	78,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	79,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	80,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	81,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	82,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	83,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	84,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	85,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	86,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	87,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	88,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	89,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	90,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	91,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	92,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	93,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	94,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	95,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	96,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	97,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	98,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	99,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	100,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	101,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	102,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	103,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	104,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	105,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	106,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	107,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	108,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	109,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	110,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	111,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	112,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	113,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	114,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	115,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	116,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	117,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	118,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	119,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	120,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	121,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	122,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	123,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	124,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	125,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	126,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	127,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	128,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	129,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	130,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	131,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	132,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	133,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	134,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	135,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	136,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	137,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	138,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	139,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	140,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	141,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	142,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	143,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	144,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	145,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	146,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	147,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	148,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	149,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	150,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	151,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	152,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	153,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	154,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	155,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	156,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	157,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	158,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	159,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	160,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	161,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	162,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	163,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	164,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	165,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	166,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	167,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	168,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	169,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	170,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	171,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	172,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	173,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	174,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	175,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	176,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	177,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	178,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	179,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	180,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	181,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	182,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	183,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	184,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	185,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	186,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	187,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	188,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	189,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	190,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	191,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	192,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	193,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	194,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	195,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	196,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	197,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	198,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	199,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	200,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	201,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	202,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	203,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	204,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	205,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	206,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	207,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	208,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	209,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	210,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	211,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	212,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	213,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	214,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	215,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	216,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	217,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	218,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	219,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	220,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	221,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	222,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	223,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	224,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	225,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	226,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	227,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	228,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	229,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	230,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	231,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	232,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	233,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	234,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	235,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	236,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	237,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	238,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	239,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	240,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	241,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	242,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	243,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	244,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	245,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	246,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	247,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	248,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	249,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	250,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	251,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	252,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	253,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	254,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	255,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	256,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	257,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	258,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	259,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	260,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	261,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	262,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	263,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	264,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	265,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	266,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	267,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	268,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	269,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	270,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	271,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	272,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	273,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	274,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	275,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	276,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	277,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	278,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	279,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	280,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	281,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	282,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	283,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	284,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	285,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	286,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	287,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	288,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	289,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	290,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	291,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	292,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	293,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	294,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	295,
									"scores":	[-4.3925742293332624, -5.4733993003332628, -4.7107994073332629, -5.8089281693332619, -6.781468916333262, -5.5178419693332623, -5.5178419693332623, -5.5245436693332621, -5.5178419693332623, -6.0267011993332629, -6.0267011993332629, -5.5178419693332623, -5.5178419693332623, -5.5178419693332623, -5.5178419693332623, -5.4804175693332624, -6.0267011993332629, -6.0267011993332629, -5.5178419693332623, -5.5245436693332621, -5.5178419693332623]
								}, {
									"case":	296,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	297,
									"scores":	[-5.0797782293332627, -6.1606033003332623, -5.3980034073332632, -6.4961321693332623, -7.4686729163332615, -6.2050459693332627, -6.2050459693332627, -6.2117476693332625, -6.2050459693332627, -6.7139051993332632, -6.7139051993332632, -6.2050459693332627, -6.2050459693332627, -6.2050459693332627, -6.2050459693332627, -6.1676215693332628, -6.7139051993332632, -6.7139051993332632, -6.2050459693332627, -6.2117476693332625, -6.2050459693332627]
								}, {
									"case":	298,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	299,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	300,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	301,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	302,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	303,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	304,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	305,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	306,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	307,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	308,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	309,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	310,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	311,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	312,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	313,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	314,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	315,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	316,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	317,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	318,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	319,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	320,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	321,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}, {
									"case":	322,
									"scores":	[-7.0982242293332618, -8.17904930033326, -7.4164494073332623, -8.51457816933326, -9.48711891633326, -8.2234919693332635, -8.2234919693332635, -8.23019366933326, -8.2234919693332635, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.2234919693332635, -8.1860675693332627, -8.73235119933326, -8.73235119933326, -8.2234919693332635, -8.23019366933326, -8.2234919693332635]
								}]
						}, {
							"switch":	15,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	117,
							"begin_column":	3,
							"end_line":	117,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L117\", 21, &(argv), sizeof (argv), &(infile), sizeof (infile), &(optind), sizeof (optind), &(argc), sizeof (argc), &(in), sizeof (in), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    infile = argv[optind++];\n", "{\n}\n", "infile = (&argc)[optind++]", "infile = (&argv)[optind++]", "infile = (&buf)[optind++]", "infile = (&c)[optind++]", "infile = (&h)[optind++]", "infile = (&in)[optind++]", "infile = (&infile)[optind++]", "infile = (&linebytes)[optind++]", "infile = (&optarg)[optind++]", "infile = (&optind)[optind++]", "infile = (&out)[optind++]", "infile = (&photometric)[optind++]", "infile = (&prec)[optind++]", "infile = (&resolution)[optind++]", "infile = (&row)[optind++]", "infile = (&rowsperstrip)[optind++]", "infile = (&spp)[optind++]", "infile = (&w)[optind++]", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "infile = argv[(0 * argc)++]", "infile = argv[(0 * c)++]", "infile = argv[(0 * h)++]", "infile = argv[(0 * linebytes)++]", "infile = argv[(0 * optind)++]", "infile = argv[(0 * photometric)++]", "infile = argv[(0 * prec)++]", "infile = argv[(0 * row)++]", "infile = argv[(0 * rowsperstrip)++]", "infile = argv[(0 * spp)++]", "infile = argv[(0 * w)++]", "infile = argv[(argc != 0)++]", "infile = argv[(argc != c)++]", "infile = argv[(argc != h)++]", "infile = argv[(argc != linebytes)++]", "infile = argv[(argc != optind)++]", "infile = argv[(argc != photometric)++]", "infile = argv[(argc != prec)++]", "infile = argv[(argc != row)++]", "infile = argv[(argc != rowsperstrip)++]", "infile = argv[(argc != spp)++]", "infile = argv[(argc != w)++]", "infile = argv[(argc * c)++]", "infile = argv[(argc * h)++]", "infile = argv[(argc * linebytes)++]", "infile = argv[(argc * optind)++]", "infile = argv[(argc * photometric)++]", "infile = argv[(argc * prec)++]", "infile = argv[(argc * row)++]", "infile = argv[(argc * rowsperstrip)++]", "infile = argv[(argc * spp)++]", "infile = argv[(argc * w)++]", "infile = argv[(argc + 0)++]", "infile = argv[(argc + c)++]", "infile = argv[(argc + h)++]", "infile = argv[(argc + linebytes)++]", "infile = argv[(argc + optind)++]", "infile = argv[(argc + photometric)++]", "infile = argv[(argc + prec)++]", "infile = argv[(argc + row)++]", "infile = argv[(argc + rowsperstrip)++]", "infile = argv[(argc + spp)++]", "infile = argv[(argc + w)++]", "infile = argv[(argc - 0)++]", "infile = argv[(argc - c)++]", "infile = argv[(argc - h)++]", "infile = argv[(argc - linebytes)++]", "infile = argv[(argc - optind)++]", "infile = argv[(argc - photometric)++]", "infile = argv[(argc - prec)++]", "infile = argv[(argc - row)++]", "infile = argv[(argc - rowsperstrip)++]", "infile = argv[(argc - spp)++]", "infile = argv[(argc - w)++]", "infile = argv[(argc == 0)++]", "infile = argv[(argc == c)++]", "infile = argv[(argc == h)++]", "infile = argv[(argc == linebytes)++]", "infile = argv[(argc == optind)++]", "infile = argv[(argc == photometric)++]", "infile = argv[(argc == prec)++]", "infile = argv[(argc == row)++]", "infile = argv[(argc == rowsperstrip)++]", "infile = argv[(argc == spp)++]", "infile = argv[(argc == w)++]", "infile = argv[(argc)++]", "infile = argv[(argv != 0)++]", "infile = argv[(argv == 0)++]", "infile = argv[(buf != 0)++]", "infile = argv[(buf == 0)++]", "infile = argv[(c != 0)++]", "infile = argv[(c != optind)++]", "infile = argv[(c * argc)++]", "infile = argv[(c * h)++]", "infile = argv[(c * linebytes)++]", "infile = argv[(c * optind)++]", "infile = argv[(c * photometric)++]", "infile = argv[(c * prec)++]", "infile = argv[(c * row)++]", "infile = argv[(c * rowsperstrip)++]", "infile = argv[(c * spp)++]", "infile = argv[(c * w)++]", "infile = argv[(c + 0)++]", "infile = argv[(c + optind)++]", "infile = argv[(c - 0)++]", "infile = argv[(c - optind)++]", "infile = argv[(c == 0)++]", "infile = argv[(c == optind)++]", "infile = argv[(c)++]", "infile = argv[(h != 0)++]", "infile = argv[(h != c)++]", "infile = argv[(h != optind)++]", "infile = argv[(h != prec)++]", "infile = argv[(h != row)++]", "infile = argv[(h * argc)++]", "infile = argv[(h * c)++]", "infile = argv[(h * linebytes)++]", "infile = argv[(h * optind)++]", "infile = argv[(h * photometric)++]", "infile = argv[(h * prec)++]", "infile = argv[(h * row)++]", "infile = argv[(h * rowsperstrip)++]", "infile = argv[(h * spp)++]", "infile = argv[(h * w)++]", "infile = argv[(h + 0)++]", "infile = argv[(h + c)++]", "infile = argv[(h + optind)++]", "infile = argv[(h + prec)++]", "infile = argv[(h + row)++]", "infile = argv[(h - 0)++]", "infile = argv[(h - c)++]", "infile = argv[(h - optind)++]", "infile = argv[(h - prec)++]", "infile = argv[(h - row)++]", "infile = argv[(h == 0)++]", "infile = argv[(h == c)++]", "infile = argv[(h == optind)++]", "infile = argv[(h == prec)++]", "infile = argv[(h == row)++]", "infile = argv[(in != 0)++]", "infile = argv[(in == 0)++]", "infile = argv[(infile != 0)++]", "infile = argv[(infile != optarg)++]", "infile = argv[(infile == 0)++]", "infile = argv[(infile == optarg)++]", "infile = argv[(linebytes != 0)++]", "infile = argv[(linebytes != c)++]", "infile = argv[(linebytes != h)++]", "infile = argv[(linebytes != optind)++]", "infile = argv[(linebytes != prec)++]", "infile = argv[(linebytes != row)++]", "infile = argv[(linebytes != spp)++]", "infile = argv[(linebytes != w)++]", "infile = argv[(linebytes * argc)++]", "infile = argv[(linebytes * c)++]", "infile = argv[(linebytes * h)++]", "infile = argv[(linebytes * optind)++]", "infile = argv[(linebytes * photometric)++]", "infile = argv[(linebytes * prec)++]", "infile = argv[(linebytes * row)++]", "infile = argv[(linebytes * rowsperstrip)++]", "infile = argv[(linebytes * spp)++]", "infile = argv[(linebytes * w)++]", "infile = argv[(linebytes + 0)++]", "infile = argv[(linebytes + c)++]", "infile = argv[(linebytes + h)++]", "infile = argv[(linebytes + optind)++]", "infile = argv[(linebytes + prec)++]", "infile = argv[(linebytes + row)++]", "infile = argv[(linebytes + spp)++]", "infile = argv[(linebytes + w)++]", "infile = argv[(linebytes - 0)++]", "infile = argv[(linebytes - c)++]", "infile = argv[(linebytes - h)++]", "infile = argv[(linebytes - optind)++]", "infile = argv[(linebytes - prec)++]", "infile = argv[(linebytes - row)++]", "infile = argv[(linebytes - spp)++]", "infile = argv[(linebytes - w)++]", "infile = argv[(linebytes == 0)++]", "infile = argv[(linebytes == c)++]", "infile = argv[(linebytes == h)++]", "infile = argv[(linebytes == optind)++]", "infile = argv[(linebytes == prec)++]", "infile = argv[(linebytes == row)++]", "infile = argv[(linebytes == spp)++]", "infile = argv[(linebytes == w)++]", "infile = argv[(linebytes)++]", "infile = argv[(optarg != 0)++]", "infile = argv[(optarg == 0)++]", "infile = argv[(optind != 0)++]", "infile = argv[(optind * argc)++]", "infile = argv[(optind * c)++]", "infile = argv[(optind * h)++]", "infile = argv[(optind * linebytes)++]", "infile = argv[(optind * photometric)++]", "infile = argv[(optind * prec)++]", "infile = argv[(optind * row)++]", "infile = argv[(optind * rowsperstrip)++]", "infile = argv[(optind * spp)++]", "infile = argv[(optind * w)++]", "infile = argv[(optind + 0)++]", "infile = argv[(optind - 0)++]", "infile = argv[(optind == 0)++]", "infile = argv[(optind)++]", "infile = argv[(out != 0)++]", "infile = argv[(out == 0)++]", "infile = argv[(photometric != 0)++]", "infile = argv[(photometric != c)++]", "infile = argv[(photometric != h)++]", "infile = argv[(photometric != linebytes)++]", "infile = argv[(photometric != optind)++]", "infile = argv[(photometric != prec)++]", "infile = argv[(photometric != row)++]", "infile = argv[(photometric != rowsperstrip)++]", "infile = argv[(photometric != spp)++]", "infile = argv[(photometric != w)++]", "infile = argv[(photometric * argc)++]", "infile = argv[(photometric * c)++]", "infile = argv[(photometric * h)++]", "infile = argv[(photometric * linebytes)++]", "infile = argv[(photometric * optind)++]", "infile = argv[(photometric * prec)++]", "infile = argv[(photometric * row)++]", "infile = argv[(photometric * rowsperstrip)++]", "infile = argv[(photometric * spp)++]", "infile = argv[(photometric * w)++]", "infile = argv[(photometric + 0)++]", "infile = argv[(photometric + c)++]", "infile = argv[(photometric + h)++]", "infile = argv[(photometric + linebytes)++]", "infile = argv[(photometric + optind)++]", "infile = argv[(photometric + prec)++]", "infile = argv[(photometric + row)++]", "infile = argv[(photometric + rowsperstrip)++]", "infile = argv[(photometric + spp)++]", "infile = argv[(photometric + w)++]", "infile = argv[(photometric - 0)++]", "infile = argv[(photometric - c)++]", "infile = argv[(photometric - h)++]", "infile = argv[(photometric - linebytes)++]", "infile = argv[(photometric - optind)++]", "infile = argv[(photometric - prec)++]", "infile = argv[(photometric - row)++]", "infile = argv[(photometric - rowsperstrip)++]", "infile = argv[(photometric - spp)++]", "infile = argv[(photometric - w)++]", "infile = argv[(photometric == 0)++]", "infile = argv[(photometric == c)++]", "infile = argv[(photometric == h)++]", "infile = argv[(photometric == linebytes)++]", "infile = argv[(photometric == optind)++]", "infile = argv[(photometric == prec)++]", "infile = argv[(photometric == row)++]", "infile = argv[(photometric == rowsperstrip)++]", "infile = argv[(photometric == spp)++]", "infile = argv[(photometric == w)++]", "infile = argv[(prec != 0)++]", "infile = argv[(prec != c)++]", "infile = argv[(prec != optind)++]", "infile = argv[(prec != row)++]", "infile = argv[(prec * argc)++]", "infile = argv[(prec * c)++]", "infile = argv[(prec * h)++]", "infile = argv[(prec * linebytes)++]", "infile = argv[(prec * optind)++]", "infile = argv[(prec * photometric)++]", "infile = argv[(prec * row)++]", "infile = argv[(prec * rowsperstrip)++]", "infile = argv[(prec * spp)++]", "infile = argv[(prec * w)++]", "infile = argv[(prec + 0)++]", "infile = argv[(prec + c)++]", "infile = argv[(prec + optind)++]", "infile = argv[(prec + row)++]", "infile = argv[(prec - 0)++]", "infile = argv[(prec - c)++]", "infile = argv[(prec - optind)++]", "infile = argv[(prec - row)++]", "infile = argv[(prec == 0)++]", "infile = argv[(prec == c)++]", "infile = argv[(prec == optind)++]", "infile = argv[(prec == row)++]", "infile = argv[(resolution != 0)++]", "infile = argv[(resolution == 0)++]", "infile = argv[(row != 0)++]", "infile = argv[(row != c)++]", "infile = argv[(row != optind)++]", "infile = argv[(row * argc)++]", "infile = argv[(row * c)++]", "infile = argv[(row * h)++]", "infile = argv[(row * linebytes)++]", "infile = argv[(row * optind)++]", "infile = argv[(row * photometric)++]", "infile = argv[(row * prec)++]", "infile = argv[(row * rowsperstrip)++]", "infile = argv[(row * spp)++]", "infile = argv[(row * w)++]", "infile = argv[(row + 0)++]", "infile = argv[(row + c)++]", "infile = argv[(row + optind)++]", "infile = argv[(row - 0)++]", "infile = argv[(row - c)++]", "infile = argv[(row - optind)++]", "infile = argv[(row == 0)++]", "infile = argv[(row == c)++]", "infile = argv[(row == optind)++]", "infile = argv[(rowsperstrip != 0)++]", "infile = argv[(rowsperstrip != c)++]", "infile = argv[(rowsperstrip != h)++]", "infile = argv[(rowsperstrip != linebytes)++]", "infile = argv[(rowsperstrip != optind)++]", "infile = argv[(rowsperstrip != prec)++]", "infile = argv[(rowsperstrip != row)++]", "infile = argv[(rowsperstrip != spp)++]", "infile = argv[(rowsperstrip != w)++]", "infile = argv[(rowsperstrip * argc)++]", "infile = argv[(rowsperstrip * c)++]", "infile = argv[(rowsperstrip * h)++]", "infile = argv[(rowsperstrip * linebytes)++]", "infile = argv[(rowsperstrip * optind)++]", "infile = argv[(rowsperstrip * photometric)++]", "infile = argv[(rowsperstrip * prec)++]", "infile = argv[(rowsperstrip * row)++]", "infile = argv[(rowsperstrip * spp)++]", "infile = argv[(rowsperstrip * w)++]", "infile = argv[(rowsperstrip + 0)++]", "infile = argv[(rowsperstrip + c)++]", "infile = argv[(rowsperstrip + h)++]", "infile = argv[(rowsperstrip + linebytes)++]", "infile = argv[(rowsperstrip + optind)++]", "infile = argv[(rowsperstrip + prec)++]", "infile = argv[(rowsperstrip + row)++]", "infile = argv[(rowsperstrip + spp)++]", "infile = argv[(rowsperstrip + w)++]", "infile = argv[(rowsperstrip - 0)++]", "infile = argv[(rowsperstrip - c)++]", "infile = argv[(rowsperstrip - h)++]", "infile = argv[(rowsperstrip - linebytes)++]", "infile = argv[(rowsperstrip - optind)++]", "infile = argv[(rowsperstrip - prec)++]", "infile = argv[(rowsperstrip - row)++]", "infile = argv[(rowsperstrip - spp)++]", "infile = argv[(rowsperstrip - w)++]", "infile = argv[(rowsperstrip == 0)++]", "infile = argv[(rowsperstrip == c)++]", "infile = argv[(rowsperstrip == h)++]", "infile = argv[(rowsperstrip == linebytes)++]", "infile = argv[(rowsperstrip == optind)++]", "infile = argv[(rowsperstrip == prec)++]", "infile = argv[(rowsperstrip == row)++]", "infile = argv[(rowsperstrip == spp)++]", "infile = argv[(rowsperstrip == w)++]", "infile = argv[(spp != 0)++]", "infile = argv[(spp != c)++]", "infile = argv[(spp != h)++]", "infile = argv[(spp != optind)++]", "infile = argv[(spp != prec)++]", "infile = argv[(spp != row)++]", "infile = argv[(spp != w)++]", "infile = argv[(spp * argc)++]", "infile = argv[(spp * c)++]", "infile = argv[(spp * h)++]", "infile = argv[(spp * linebytes)++]", "infile = argv[(spp * optind)++]", "infile = argv[(spp * photometric)++]", "infile = argv[(spp * prec)++]", "infile = argv[(spp * row)++]", "infile = argv[(spp * rowsperstrip)++]", "infile = argv[(spp * w)++]", "infile = argv[(spp + 0)++]", "infile = argv[(spp + c)++]", "infile = argv[(spp + h)++]", "infile = argv[(spp + optind)++]", "infile = argv[(spp + prec)++]", "infile = argv[(spp + row)++]", "infile = argv[(spp + w)++]", "infile = argv[(spp - 0)++]", "infile = argv[(spp - c)++]", "infile = argv[(spp - h)++]", "infile = argv[(spp - optind)++]", "infile = argv[(spp - prec)++]", "infile = argv[(spp - row)++]", "infile = argv[(spp - w)++]", "infile = argv[(spp == 0)++]", "infile = argv[(spp == c)++]", "infile = argv[(spp == h)++]", "infile = argv[(spp == optind)++]", "infile = argv[(spp == prec)++]", "infile = argv[(spp == row)++]", "infile = argv[(spp == w)++]", "infile = argv[(w != 0)++]", "infile = argv[(w != c)++]", "infile = argv[(w != h)++]", "infile = argv[(w != optind)++]", "infile = argv[(w != prec)++]", "infile = argv[(w != row)++]", "infile = argv[(w * argc)++]", "infile = argv[(w * c)++]", "infile = argv[(w * h)++]", "infile = argv[(w * linebytes)++]", "infile = argv[(w * optind)++]", "infile = argv[(w * photometric)++]", "infile = argv[(w * prec)++]", "infile = argv[(w * row)++]", "infile = argv[(w * rowsperstrip)++]", "infile = argv[(w * spp)++]", "infile = argv[(w + 0)++]", "infile = argv[(w + c)++]", "infile = argv[(w + h)++]", "infile = argv[(w + optind)++]", "infile = argv[(w + prec)++]", "infile = argv[(w + row)++]", "infile = argv[(w - 0)++]", "infile = argv[(w - c)++]", "infile = argv[(w - h)++]", "infile = argv[(w - optind)++]", "infile = argv[(w - prec)++]", "infile = argv[(w - row)++]", "infile = argv[(w == 0)++]", "infile = argv[(w == c)++]", "infile = argv[(w == h)++]", "infile = argv[(w == optind)++]", "infile = argv[(w == prec)++]", "infile = argv[(w == row)++]"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.4445825693332628, -3.6418401293332625, -3.5805688693332627, -4.2961149693332628, -5.6093004413332626, -3.9854956693332624, -3.9854956693332624, -4.3342848693332625, -3.9854956693332624, -4.5365166493332625, -4.5365166493332625, -3.9854956693332624, -3.9854956693332624, -3.9854956693332624, -3.9854956693332624, -4.7884477693332625, -4.5365166493332625, -4.5365166493332625, -3.9854956693332624, -4.3342848693332625, -3.9854956693332624]
								}, {
									"case":	2,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	3,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	4,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	5,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	6,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	7,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	8,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	9,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	10,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	11,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	12,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	13,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	14,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	15,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	16,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	17,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	18,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	19,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	20,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	21,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	22,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	23,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	24,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	25,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	26,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	27,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	28,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	29,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	30,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	31,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	32,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	33,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	34,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	35,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	36,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	37,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	38,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	39,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	40,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	41,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	42,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	43,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	44,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	45,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	46,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	47,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	48,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	49,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	50,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	51,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	52,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	53,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	54,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	55,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	56,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	57,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	58,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	59,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	60,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	61,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	62,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	63,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	64,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	65,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	66,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	67,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	68,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	69,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	70,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	71,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	72,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	73,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	74,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	75,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	76,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	77,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	78,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	79,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	80,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	81,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	82,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	83,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	84,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	85,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	86,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	87,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	88,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	89,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	90,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	91,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	92,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	93,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	94,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	95,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	96,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	97,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	98,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	99,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	100,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	101,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	102,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	103,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	104,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	105,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	106,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	107,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	108,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	109,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	110,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	111,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	112,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	113,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	114,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	115,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	116,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	117,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	118,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	119,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	120,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	121,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	122,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	123,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	124,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	125,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	126,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	127,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	128,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	129,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	130,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	131,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	132,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	133,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	134,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	135,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	136,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	137,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	138,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	139,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	140,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	141,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	142,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	143,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	144,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	145,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	146,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	147,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	148,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	149,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	150,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	151,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	152,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	153,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	154,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	155,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	156,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	157,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	158,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	159,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	160,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	161,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	162,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	163,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	164,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	165,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	166,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	167,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	168,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	169,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	170,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	171,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	172,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	173,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	174,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	175,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	176,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	177,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	178,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	179,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	180,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	181,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	182,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	183,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	184,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	185,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	186,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	187,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	188,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	189,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	190,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	191,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	192,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	193,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	194,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	195,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	196,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	197,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	198,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	199,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	200,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	201,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	202,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	203,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	204,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	205,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	206,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	207,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	208,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	209,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	210,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	211,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	212,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	213,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	214,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	215,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	216,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	217,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	218,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	219,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	220,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	221,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	222,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	223,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	224,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	225,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	226,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	227,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	228,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	229,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	230,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	231,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	232,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	233,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	234,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	235,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	236,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	237,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	238,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	239,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	240,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	241,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	242,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	243,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	244,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	245,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	246,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	247,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	248,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	249,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	250,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	251,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	252,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	253,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	254,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	255,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	256,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	257,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	258,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	259,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	260,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	261,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	262,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	263,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	264,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	265,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	266,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	267,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	268,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	269,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	270,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	271,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	272,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	273,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	274,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	275,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	276,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	277,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	278,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	279,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	280,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	281,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	282,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	283,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	284,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	285,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	286,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	287,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	288,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	289,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	290,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	291,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	292,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	293,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	294,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	295,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	296,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	297,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	298,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	299,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	300,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	301,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	302,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	303,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	304,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	305,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	306,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	307,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	308,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	309,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	310,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	311,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	312,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	313,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	314,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	315,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	316,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	317,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	318,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	319,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	320,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	321,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	322,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	323,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	324,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	325,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	326,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	327,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	328,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	329,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	330,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	331,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	332,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	333,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	334,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	335,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	336,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	337,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	338,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	339,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	340,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	341,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	342,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	343,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	344,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	345,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	346,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	347,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	348,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	349,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	350,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	351,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	352,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	353,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	354,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	355,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	356,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	357,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	358,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	359,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	360,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	361,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	362,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	363,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	364,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	365,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	366,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	367,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	368,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	369,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	370,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	371,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	372,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	373,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	374,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	375,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	376,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	377,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	378,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	379,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	380,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	381,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	382,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	383,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	384,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	385,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	386,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	387,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	388,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	389,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	390,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	391,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	392,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	393,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	394,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	395,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	396,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	397,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	398,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	399,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	400,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	401,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	402,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	403,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	404,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	405,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	406,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	407,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	408,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	409,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	410,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	411,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	412,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	413,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	414,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	415,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	416,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	417,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	418,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	419,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	420,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	421,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	422,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	423,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	424,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	425,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	426,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	427,
									"scores":	[-4.0332392493332625]
								}, {
									"case":	428,
									"scores":	[-4.0332392493332625]
								}]
						}]
				}, {
					"line":	117,
					"switches":	[{
							"switch":	16,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	118,
							"begin_column":	1,
							"end_line":	118,
							"end_column":	1,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.013036542015743]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}, {
									"case":	36,
									"scores":	[-4.013036542015743]
								}, {
									"case":	37,
									"scores":	[-4.013036542015743]
								}, {
									"case":	38,
									"scores":	[-4.013036542015743]
								}, {
									"case":	39,
									"scores":	[-4.013036542015743]
								}, {
									"case":	40,
									"scores":	[-4.013036542015743]
								}, {
									"case":	41,
									"scores":	[-4.013036542015743]
								}, {
									"case":	42,
									"scores":	[-4.013036542015743]
								}, {
									"case":	43,
									"scores":	[-4.013036542015743]
								}, {
									"case":	44,
									"scores":	[-4.013036542015743]
								}, {
									"case":	45,
									"scores":	[-4.013036542015743]
								}, {
									"case":	46,
									"scores":	[-4.013036542015743]
								}, {
									"case":	47,
									"scores":	[-4.013036542015743]
								}, {
									"case":	48,
									"scores":	[-4.013036542015743]
								}, {
									"case":	49,
									"scores":	[-4.013036542015743]
								}, {
									"case":	50,
									"scores":	[-4.013036542015743]
								}, {
									"case":	51,
									"scores":	[-4.013036542015743]
								}, {
									"case":	52,
									"scores":	[-4.013036542015743]
								}, {
									"case":	53,
									"scores":	[-4.013036542015743]
								}, {
									"case":	54,
									"scores":	[-4.013036542015743]
								}, {
									"case":	55,
									"scores":	[-4.013036542015743]
								}, {
									"case":	56,
									"scores":	[-4.013036542015743]
								}, {
									"case":	57,
									"scores":	[-4.013036542015743]
								}, {
									"case":	58,
									"scores":	[-4.013036542015743]
								}, {
									"case":	59,
									"scores":	[-4.013036542015743]
								}, {
									"case":	60,
									"scores":	[-4.013036542015743]
								}, {
									"case":	61,
									"scores":	[-4.013036542015743]
								}, {
									"case":	62,
									"scores":	[-4.013036542015743]
								}, {
									"case":	63,
									"scores":	[-4.013036542015743]
								}, {
									"case":	64,
									"scores":	[-4.013036542015743]
								}, {
									"case":	65,
									"scores":	[-4.013036542015743]
								}, {
									"case":	66,
									"scores":	[-4.013036542015743]
								}, {
									"case":	67,
									"scores":	[-4.013036542015743]
								}, {
									"case":	68,
									"scores":	[-4.013036542015743]
								}, {
									"case":	69,
									"scores":	[-4.013036542015743]
								}, {
									"case":	70,
									"scores":	[-4.013036542015743]
								}, {
									"case":	71,
									"scores":	[-4.013036542015743]
								}, {
									"case":	72,
									"scores":	[-4.013036542015743]
								}, {
									"case":	73,
									"scores":	[-4.013036542015743]
								}, {
									"case":	74,
									"scores":	[-4.013036542015743]
								}, {
									"case":	75,
									"scores":	[-4.013036542015743]
								}, {
									"case":	76,
									"scores":	[-4.013036542015743]
								}, {
									"case":	77,
									"scores":	[-4.013036542015743]
								}, {
									"case":	78,
									"scores":	[-4.013036542015743]
								}, {
									"case":	79,
									"scores":	[-4.013036542015743]
								}, {
									"case":	80,
									"scores":	[-4.013036542015743]
								}, {
									"case":	81,
									"scores":	[-4.013036542015743]
								}, {
									"case":	82,
									"scores":	[-4.013036542015743]
								}, {
									"case":	83,
									"scores":	[-4.013036542015743]
								}, {
									"case":	84,
									"scores":	[-4.013036542015743]
								}, {
									"case":	85,
									"scores":	[-4.013036542015743]
								}, {
									"case":	86,
									"scores":	[-4.013036542015743]
								}, {
									"case":	87,
									"scores":	[-4.013036542015743]
								}, {
									"case":	88,
									"scores":	[-4.013036542015743]
								}, {
									"case":	89,
									"scores":	[-4.013036542015743]
								}, {
									"case":	90,
									"scores":	[-4.013036542015743]
								}, {
									"case":	91,
									"scores":	[-4.013036542015743]
								}, {
									"case":	92,
									"scores":	[-4.013036542015743]
								}, {
									"case":	93,
									"scores":	[-4.013036542015743]
								}, {
									"case":	94,
									"scores":	[-4.013036542015743]
								}, {
									"case":	95,
									"scores":	[-4.013036542015743]
								}, {
									"case":	96,
									"scores":	[-4.013036542015743]
								}, {
									"case":	97,
									"scores":	[-4.013036542015743]
								}, {
									"case":	98,
									"scores":	[-4.013036542015743]
								}, {
									"case":	99,
									"scores":	[-4.013036542015743]
								}, {
									"case":	100,
									"scores":	[-4.013036542015743]
								}, {
									"case":	101,
									"scores":	[-4.013036542015743]
								}, {
									"case":	102,
									"scores":	[-4.013036542015743]
								}, {
									"case":	103,
									"scores":	[-4.013036542015743]
								}, {
									"case":	104,
									"scores":	[-4.013036542015743]
								}, {
									"case":	105,
									"scores":	[-4.013036542015743]
								}, {
									"case":	106,
									"scores":	[-4.013036542015743]
								}, {
									"case":	107,
									"scores":	[-4.013036542015743]
								}, {
									"case":	108,
									"scores":	[-4.013036542015743]
								}, {
									"case":	109,
									"scores":	[-4.013036542015743]
								}, {
									"case":	110,
									"scores":	[-4.013036542015743]
								}, {
									"case":	111,
									"scores":	[-4.013036542015743]
								}, {
									"case":	112,
									"scores":	[-4.013036542015743]
								}, {
									"case":	113,
									"scores":	[-4.013036542015743]
								}, {
									"case":	114,
									"scores":	[-4.013036542015743]
								}, {
									"case":	115,
									"scores":	[-4.013036542015743]
								}, {
									"case":	116,
									"scores":	[-4.013036542015743]
								}, {
									"case":	117,
									"scores":	[-4.013036542015743]
								}, {
									"case":	118,
									"scores":	[-4.013036542015743]
								}, {
									"case":	119,
									"scores":	[-4.013036542015743]
								}, {
									"case":	120,
									"scores":	[-4.013036542015743]
								}, {
									"case":	121,
									"scores":	[-4.013036542015743]
								}, {
									"case":	122,
									"scores":	[-4.013036542015743]
								}, {
									"case":	123,
									"scores":	[-4.013036542015743]
								}, {
									"case":	124,
									"scores":	[-4.013036542015743]
								}, {
									"case":	125,
									"scores":	[-4.013036542015743]
								}, {
									"case":	126,
									"scores":	[-4.013036542015743]
								}, {
									"case":	127,
									"scores":	[-4.013036542015743]
								}, {
									"case":	128,
									"scores":	[-4.013036542015743]
								}, {
									"case":	129,
									"scores":	[-4.013036542015743]
								}, {
									"case":	130,
									"scores":	[-4.013036542015743]
								}, {
									"case":	131,
									"scores":	[-4.013036542015743]
								}, {
									"case":	132,
									"scores":	[-4.013036542015743]
								}, {
									"case":	133,
									"scores":	[-4.013036542015743]
								}, {
									"case":	134,
									"scores":	[-4.013036542015743]
								}, {
									"case":	135,
									"scores":	[-4.013036542015743]
								}, {
									"case":	136,
									"scores":	[-4.013036542015743]
								}, {
									"case":	137,
									"scores":	[-4.013036542015743]
								}, {
									"case":	138,
									"scores":	[-4.013036542015743]
								}, {
									"case":	139,
									"scores":	[-4.013036542015743]
								}, {
									"case":	140,
									"scores":	[-4.013036542015743]
								}, {
									"case":	141,
									"scores":	[-4.013036542015743]
								}, {
									"case":	142,
									"scores":	[-4.013036542015743]
								}, {
									"case":	143,
									"scores":	[-4.013036542015743]
								}, {
									"case":	144,
									"scores":	[-4.013036542015743]
								}, {
									"case":	145,
									"scores":	[-4.013036542015743]
								}, {
									"case":	146,
									"scores":	[-4.013036542015743]
								}, {
									"case":	147,
									"scores":	[-4.013036542015743]
								}, {
									"case":	148,
									"scores":	[-4.013036542015743]
								}, {
									"case":	149,
									"scores":	[-4.013036542015743]
								}, {
									"case":	150,
									"scores":	[-4.013036542015743]
								}, {
									"case":	151,
									"scores":	[-4.013036542015743]
								}, {
									"case":	152,
									"scores":	[-4.013036542015743]
								}, {
									"case":	153,
									"scores":	[-4.013036542015743]
								}, {
									"case":	154,
									"scores":	[-4.013036542015743]
								}, {
									"case":	155,
									"scores":	[-4.013036542015743]
								}, {
									"case":	156,
									"scores":	[-4.013036542015743]
								}, {
									"case":	157,
									"scores":	[-4.013036542015743]
								}, {
									"case":	158,
									"scores":	[-4.013036542015743]
								}, {
									"case":	159,
									"scores":	[-4.013036542015743]
								}, {
									"case":	160,
									"scores":	[-4.013036542015743]
								}, {
									"case":	161,
									"scores":	[-4.013036542015743]
								}, {
									"case":	162,
									"scores":	[-4.013036542015743]
								}, {
									"case":	163,
									"scores":	[-4.013036542015743]
								}, {
									"case":	164,
									"scores":	[-4.013036542015743]
								}, {
									"case":	165,
									"scores":	[-4.013036542015743]
								}, {
									"case":	166,
									"scores":	[-4.013036542015743]
								}, {
									"case":	167,
									"scores":	[-4.013036542015743]
								}, {
									"case":	168,
									"scores":	[-4.013036542015743]
								}, {
									"case":	169,
									"scores":	[-4.013036542015743]
								}, {
									"case":	170,
									"scores":	[-4.013036542015743]
								}, {
									"case":	171,
									"scores":	[-4.013036542015743]
								}, {
									"case":	172,
									"scores":	[-4.013036542015743]
								}, {
									"case":	173,
									"scores":	[-4.013036542015743]
								}, {
									"case":	174,
									"scores":	[-4.013036542015743]
								}, {
									"case":	175,
									"scores":	[-4.013036542015743]
								}, {
									"case":	176,
									"scores":	[-4.013036542015743]
								}, {
									"case":	177,
									"scores":	[-4.013036542015743]
								}, {
									"case":	178,
									"scores":	[-4.013036542015743]
								}, {
									"case":	179,
									"scores":	[-4.013036542015743]
								}, {
									"case":	180,
									"scores":	[-4.013036542015743]
								}, {
									"case":	181,
									"scores":	[-4.013036542015743]
								}, {
									"case":	182,
									"scores":	[-4.013036542015743]
								}, {
									"case":	183,
									"scores":	[-4.013036542015743]
								}, {
									"case":	184,
									"scores":	[-4.013036542015743]
								}, {
									"case":	185,
									"scores":	[-4.013036542015743]
								}, {
									"case":	186,
									"scores":	[-4.013036542015743]
								}, {
									"case":	187,
									"scores":	[-4.013036542015743]
								}, {
									"case":	188,
									"scores":	[-4.013036542015743]
								}, {
									"case":	189,
									"scores":	[-4.013036542015743]
								}, {
									"case":	190,
									"scores":	[-4.013036542015743]
								}, {
									"case":	191,
									"scores":	[-4.013036542015743]
								}, {
									"case":	192,
									"scores":	[-4.013036542015743]
								}, {
									"case":	193,
									"scores":	[-4.013036542015743]
								}, {
									"case":	194,
									"scores":	[-4.013036542015743]
								}, {
									"case":	195,
									"scores":	[-4.013036542015743]
								}, {
									"case":	196,
									"scores":	[-4.013036542015743]
								}, {
									"case":	197,
									"scores":	[-4.013036542015743]
								}, {
									"case":	198,
									"scores":	[-4.013036542015743]
								}, {
									"case":	199,
									"scores":	[-4.013036542015743]
								}, {
									"case":	200,
									"scores":	[-4.013036542015743]
								}, {
									"case":	201,
									"scores":	[-4.013036542015743]
								}, {
									"case":	202,
									"scores":	[-4.013036542015743]
								}, {
									"case":	203,
									"scores":	[-4.013036542015743]
								}, {
									"case":	204,
									"scores":	[-4.013036542015743]
								}, {
									"case":	205,
									"scores":	[-4.013036542015743]
								}, {
									"case":	206,
									"scores":	[-4.013036542015743]
								}, {
									"case":	207,
									"scores":	[-4.013036542015743]
								}, {
									"case":	208,
									"scores":	[-4.013036542015743]
								}, {
									"case":	209,
									"scores":	[-4.013036542015743]
								}, {
									"case":	210,
									"scores":	[-4.013036542015743]
								}, {
									"case":	211,
									"scores":	[-4.013036542015743]
								}, {
									"case":	212,
									"scores":	[-4.013036542015743]
								}, {
									"case":	213,
									"scores":	[-4.013036542015743]
								}, {
									"case":	214,
									"scores":	[-4.013036542015743]
								}, {
									"case":	215,
									"scores":	[-4.013036542015743]
								}, {
									"case":	216,
									"scores":	[-4.013036542015743]
								}, {
									"case":	217,
									"scores":	[-4.013036542015743]
								}, {
									"case":	218,
									"scores":	[-4.013036542015743]
								}, {
									"case":	219,
									"scores":	[-4.013036542015743]
								}, {
									"case":	220,
									"scores":	[-4.013036542015743]
								}, {
									"case":	221,
									"scores":	[-4.013036542015743]
								}, {
									"case":	222,
									"scores":	[-4.013036542015743]
								}, {
									"case":	223,
									"scores":	[-4.013036542015743]
								}, {
									"case":	224,
									"scores":	[-4.013036542015743]
								}, {
									"case":	225,
									"scores":	[-4.013036542015743]
								}, {
									"case":	226,
									"scores":	[-4.013036542015743]
								}, {
									"case":	227,
									"scores":	[-4.013036542015743]
								}, {
									"case":	228,
									"scores":	[-4.013036542015743]
								}, {
									"case":	229,
									"scores":	[-4.013036542015743]
								}, {
									"case":	230,
									"scores":	[-4.013036542015743]
								}, {
									"case":	231,
									"scores":	[-4.013036542015743]
								}, {
									"case":	232,
									"scores":	[-4.013036542015743]
								}, {
									"case":	233,
									"scores":	[-4.013036542015743]
								}, {
									"case":	234,
									"scores":	[-4.013036542015743]
								}, {
									"case":	235,
									"scores":	[-4.013036542015743]
								}, {
									"case":	236,
									"scores":	[-4.013036542015743]
								}, {
									"case":	237,
									"scores":	[-4.013036542015743]
								}, {
									"case":	238,
									"scores":	[-4.013036542015743]
								}, {
									"case":	239,
									"scores":	[-4.013036542015743]
								}, {
									"case":	240,
									"scores":	[-4.013036542015743]
								}, {
									"case":	241,
									"scores":	[-4.013036542015743]
								}, {
									"case":	242,
									"scores":	[-4.013036542015743]
								}, {
									"case":	243,
									"scores":	[-4.013036542015743]
								}, {
									"case":	244,
									"scores":	[-4.013036542015743]
								}, {
									"case":	245,
									"scores":	[-4.013036542015743]
								}, {
									"case":	246,
									"scores":	[-4.013036542015743]
								}, {
									"case":	247,
									"scores":	[-4.013036542015743]
								}, {
									"case":	248,
									"scores":	[-4.013036542015743]
								}, {
									"case":	249,
									"scores":	[-4.013036542015743]
								}, {
									"case":	250,
									"scores":	[-4.013036542015743]
								}, {
									"case":	251,
									"scores":	[-4.013036542015743]
								}, {
									"case":	252,
									"scores":	[-4.013036542015743]
								}, {
									"case":	253,
									"scores":	[-4.013036542015743]
								}, {
									"case":	254,
									"scores":	[-4.013036542015743]
								}, {
									"case":	255,
									"scores":	[-4.013036542015743]
								}, {
									"case":	256,
									"scores":	[-4.013036542015743]
								}, {
									"case":	257,
									"scores":	[-4.013036542015743]
								}, {
									"case":	258,
									"scores":	[-4.013036542015743]
								}, {
									"case":	259,
									"scores":	[-4.013036542015743]
								}, {
									"case":	260,
									"scores":	[-4.013036542015743]
								}, {
									"case":	261,
									"scores":	[-4.013036542015743]
								}, {
									"case":	262,
									"scores":	[-4.013036542015743]
								}, {
									"case":	263,
									"scores":	[-4.013036542015743]
								}, {
									"case":	264,
									"scores":	[-4.013036542015743]
								}, {
									"case":	265,
									"scores":	[-4.013036542015743]
								}, {
									"case":	266,
									"scores":	[-4.013036542015743]
								}, {
									"case":	267,
									"scores":	[-4.013036542015743]
								}, {
									"case":	268,
									"scores":	[-4.013036542015743]
								}, {
									"case":	269,
									"scores":	[-4.013036542015743]
								}, {
									"case":	270,
									"scores":	[-4.013036542015743]
								}, {
									"case":	271,
									"scores":	[-4.013036542015743]
								}, {
									"case":	272,
									"scores":	[-4.013036542015743]
								}, {
									"case":	273,
									"scores":	[-4.013036542015743]
								}, {
									"case":	274,
									"scores":	[-4.013036542015743]
								}, {
									"case":	275,
									"scores":	[-4.013036542015743]
								}, {
									"case":	276,
									"scores":	[-4.013036542015743]
								}, {
									"case":	277,
									"scores":	[-4.013036542015743]
								}, {
									"case":	278,
									"scores":	[-4.013036542015743]
								}, {
									"case":	279,
									"scores":	[-4.013036542015743]
								}, {
									"case":	280,
									"scores":	[-4.013036542015743]
								}, {
									"case":	281,
									"scores":	[-4.013036542015743]
								}, {
									"case":	282,
									"scores":	[-4.013036542015743]
								}, {
									"case":	283,
									"scores":	[-4.013036542015743]
								}, {
									"case":	284,
									"scores":	[-4.013036542015743]
								}, {
									"case":	285,
									"scores":	[-4.013036542015743]
								}, {
									"case":	286,
									"scores":	[-4.013036542015743]
								}, {
									"case":	287,
									"scores":	[-4.013036542015743]
								}, {
									"case":	288,
									"scores":	[-4.013036542015743]
								}, {
									"case":	289,
									"scores":	[-4.013036542015743]
								}, {
									"case":	290,
									"scores":	[-4.013036542015743]
								}, {
									"case":	291,
									"scores":	[-4.013036542015743]
								}, {
									"case":	292,
									"scores":	[-4.013036542015743]
								}, {
									"case":	293,
									"scores":	[-4.013036542015743]
								}, {
									"case":	294,
									"scores":	[-4.013036542015743]
								}, {
									"case":	295,
									"scores":	[-6.8599254930157425, -1.8531286220157432, -6.2961931620157419, -4.9955914450157426, -6.3164684620157425, -6.0253822620157429, -6.0253822620157429, -6.0320839620157427, -6.5342414920157434, -6.0253822620157429, -6.5342414920157434, -6.0253822620157429, -6.0253822620157429, -6.0253822620157429, -6.0253822620157429, -5.987957862015743, -6.5342414920157434, -6.5342414920157434, -6.0253822620157429, -6.0320839620157427, -6.0253822620157429]
								}, {
									"case":	296,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	297,
									"scores":	[-7.5471294930157429, -2.5403326220157432, -6.9833971620157422, -5.682795445015743, -7.0036724620157429, -6.7125862620157424, -6.7125862620157424, -6.7192879620157431, -7.2214454920157429, -6.7125862620157424, -7.2214454920157429, -6.7125862620157424, -6.7125862620157424, -6.7125862620157424, -6.7125862620157424, -6.6751618620157434, -7.2214454920157429, -7.2214454920157429, -6.7125862620157424, -6.7192879620157431, -6.7125862620157424]
								}, {
									"case":	298,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	299,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	300,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	301,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	302,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	303,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	304,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	305,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	306,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	307,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	308,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	309,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	310,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	311,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	312,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	313,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	314,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	315,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	316,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	317,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	318,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	319,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	320,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	321,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}, {
									"case":	322,
									"scores":	[-9.5655754930157428, -4.5587786220157431, -9.00184316201574, -7.7012414450157429, -9.0221184620157437, -8.73103226201574, -8.73103226201574, -8.73773396201574, -9.2398914920157438, -8.73103226201574, -9.2398914920157438, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.73103226201574, -8.69360786201574, -9.2398914920157438, -9.2398914920157438, -8.73103226201574, -8.73773396201574, -8.73103226201574]
								}]
						}, {
							"switch":	17,
							"types":	[[], [], [1], [], [], [], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], [], [4, 5], [], [], [], [], [2], [], [], [3]],
							"begin_line":	118,
							"begin_column":	3,
							"end_line":	118,
							"end_column":	33,
							"patch_codes":	["if (!__is_neg(\"\", \"L118\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(rowsperstrip), sizeof (rowsperstrip), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    in = fopen(infile, \"r\");\n", "freopen(infile, \"r\", 0)", "{\n}\n", "in = fopen(infile, \"r\")", "in = popen(infile, \"r\")", "in = (in)", "in = fopen((&argc), \"r\")", "in = fopen((&argv), \"r\")", "in = fopen((&buf), \"r\")", "in = fopen((&c), \"r\")", "in = fopen((&h), \"r\")", "in = fopen((&in), \"r\")", "in = fopen((&infile), \"r\")", "in = fopen((&linebytes), \"r\")", "in = fopen((&optarg), \"r\")", "in = fopen((&optind), \"r\")", "in = fopen((&out), \"r\")", "in = fopen((&photometric), \"r\")", "in = fopen((&prec), \"r\")", "in = fopen((&resolution), \"r\")", "in = fopen((&row), \"r\")", "in = fopen((&rowsperstrip), \"r\")", "in = fopen((&spp), \"r\")", "in = fopen((&w), \"r\")", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "in = fopen(infile, (&argc))", "in = fopen(infile, (&argv))", "in = fopen(infile, (&buf))", "in = fopen(infile, (&c))", "in = fopen(infile, (&h))", "in = fopen(infile, (&in))", "in = fopen(infile, (&infile))", "in = fopen(infile, (&linebytes))", "in = fopen(infile, (&optarg))", "in = fopen(infile, (&optind))", "in = fopen(infile, (&out))", "in = fopen(infile, (&photometric))", "in = fopen(infile, (&prec))", "in = fopen(infile, (&resolution))", "in = fopen(infile, (&row))", "in = fopen(infile, (&rowsperstrip))", "in = fopen(infile, (&spp))", "in = fopen(infile, (&w))", "in = fopen(infile, (0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-5.1314580620157431, -4.0305489670157426, -6.0409129960157433, -5.5055579620157431, -5.8867892620157427, -5.5761699620157437, -5.5761699620157437, -5.9249591620157434, -6.1271909420157433, -5.5761699620157437, -6.1271909420157433, -5.5761699620157437, -5.5761699620157437, -5.5761699620157437, -5.5761699620157437, -6.3791220620157434, -6.1271909420157433, -6.1271909420157433, -5.5761699620157437, -5.9249591620157434, -5.5761699620157437]
								}, {
									"case":	2,
									"scores":	[-4.013036542015743]
								}, {
									"case":	3,
									"scores":	[-4.013036542015743]
								}, {
									"case":	4,
									"scores":	[-4.013036542015743]
								}, {
									"case":	5,
									"scores":	[-4.013036542015743]
								}, {
									"case":	6,
									"scores":	[-4.013036542015743]
								}, {
									"case":	7,
									"scores":	[-4.013036542015743]
								}, {
									"case":	8,
									"scores":	[-4.013036542015743]
								}, {
									"case":	9,
									"scores":	[-4.013036542015743]
								}, {
									"case":	10,
									"scores":	[-4.013036542015743]
								}, {
									"case":	11,
									"scores":	[-4.013036542015743]
								}, {
									"case":	12,
									"scores":	[-4.013036542015743]
								}, {
									"case":	13,
									"scores":	[-4.013036542015743]
								}, {
									"case":	14,
									"scores":	[-4.013036542015743]
								}, {
									"case":	15,
									"scores":	[-4.013036542015743]
								}, {
									"case":	16,
									"scores":	[-4.013036542015743]
								}, {
									"case":	17,
									"scores":	[-4.013036542015743]
								}, {
									"case":	18,
									"scores":	[-4.013036542015743]
								}, {
									"case":	19,
									"scores":	[-4.013036542015743]
								}, {
									"case":	20,
									"scores":	[-4.013036542015743]
								}, {
									"case":	21,
									"scores":	[-4.013036542015743]
								}, {
									"case":	22,
									"scores":	[-4.013036542015743]
								}, {
									"case":	23,
									"scores":	[-4.013036542015743]
								}, {
									"case":	24,
									"scores":	[-4.013036542015743]
								}, {
									"case":	25,
									"scores":	[-4.013036542015743]
								}, {
									"case":	26,
									"scores":	[-4.013036542015743]
								}, {
									"case":	27,
									"scores":	[-4.013036542015743]
								}, {
									"case":	28,
									"scores":	[-4.013036542015743]
								}, {
									"case":	29,
									"scores":	[-4.013036542015743]
								}, {
									"case":	30,
									"scores":	[-4.013036542015743]
								}, {
									"case":	31,
									"scores":	[-4.013036542015743]
								}, {
									"case":	32,
									"scores":	[-4.013036542015743]
								}, {
									"case":	33,
									"scores":	[-4.013036542015743]
								}, {
									"case":	34,
									"scores":	[-4.013036542015743]
								}, {
									"case":	35,
									"scores":	[-4.013036542015743]
								}, {
									"case":	36,
									"scores":	[-4.013036542015743]
								}, {
									"case":	37,
									"scores":	[-4.013036542015743]
								}, {
									"case":	38,
									"scores":	[-4.013036542015743]
								}, {
									"case":	39,
									"scores":	[-4.013036542015743]
								}, {
									"case":	40,
									"scores":	[-4.013036542015743]
								}, {
									"case":	41,
									"scores":	[-4.013036542015743]
								}, {
									"case":	42,
									"scores":	[-4.013036542015743]
								}, {
									"case":	43,
									"scores":	[-4.013036542015743]
								}, {
									"case":	44,
									"scores":	[-4.013036542015743]
								}, {
									"case":	45,
									"scores":	[-4.013036542015743]
								}]
						}]
				}, {
					"line":	118,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	119,
							"begin_column":	1,
							"end_line":	119,
							"end_column":	1,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	2,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	3,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	4,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	5,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	6,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	7,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	8,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	9,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	10,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	11,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	12,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	13,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	14,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	15,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	16,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	17,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	18,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	19,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	20,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	21,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	22,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	23,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	24,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	25,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	26,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	27,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	28,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	29,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	30,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	31,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	32,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	33,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	34,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	35,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	36,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	37,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	38,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	39,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	40,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	41,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	42,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	43,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	44,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	45,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	46,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	47,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	48,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	49,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	50,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	51,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	52,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	53,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	54,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	55,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	56,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	57,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	58,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	59,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	60,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	61,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	62,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	63,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	64,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	65,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	66,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	67,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	68,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	69,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	70,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	71,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	72,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	73,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	74,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	75,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	76,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	77,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	78,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	79,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	80,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	81,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	82,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	83,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	84,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	85,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	86,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	87,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	88,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	89,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	90,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	91,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	92,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	93,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	94,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	95,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	96,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	97,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	98,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	99,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	100,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	101,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	102,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	103,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	104,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	105,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	106,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	107,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	108,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	109,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	110,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	111,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	112,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	113,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	114,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	115,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	116,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	117,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	118,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	119,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	120,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	121,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	122,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	123,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	124,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	125,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	126,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	127,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	128,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	129,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	130,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	131,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	132,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	133,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	134,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	135,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	136,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	137,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	138,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	139,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	140,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	141,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	142,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	143,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	144,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	145,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	146,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	147,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	148,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	149,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	150,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	151,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	152,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	153,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	154,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	155,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	156,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	157,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	158,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	159,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	160,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	161,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	162,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	163,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	164,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	165,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	166,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	167,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	168,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	169,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	170,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	171,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	172,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	173,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	174,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	175,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	176,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	177,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	178,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	179,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	180,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	181,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	182,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	183,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	184,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	185,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	186,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	187,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	188,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	189,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	190,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	191,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	192,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	193,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	194,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	195,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	196,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	197,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	198,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	199,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	200,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	201,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	202,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	203,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	204,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	205,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	206,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	207,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	208,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	209,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	210,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	211,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	212,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	213,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	214,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	215,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	216,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	217,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	218,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	219,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	220,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	221,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	222,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	223,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	224,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	225,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	226,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	227,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	228,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	229,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	230,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	231,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	232,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	233,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	234,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	235,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	236,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	237,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	238,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	239,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	240,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	241,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	242,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	243,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	244,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	245,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	246,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	247,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	248,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	249,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	250,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	251,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	252,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	253,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	254,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	255,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	256,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	257,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	258,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	259,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	260,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	261,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	262,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	263,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	264,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	265,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	266,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	267,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	268,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	269,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	270,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	271,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	272,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	273,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	274,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	275,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	276,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	277,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	278,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	279,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	280,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	281,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	282,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	283,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	284,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	285,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	286,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	287,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	288,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	289,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	290,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	291,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	292,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	293,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	294,
									"scores":	[-3.9928338346982239]
								}, {
									"case":	295,
									"scores":	[-4.2653604546982242, -3.2419551546982239, -6.9364680546982243, -5.6358663376982241, -6.956743354698224, -6.6656571546982244, -6.6656571546982244, -6.6723588546982242, -7.1745163846982241, -7.1745163846982241, -6.6656571546982244, -6.6656571546982244, -6.6656571546982244, -6.6656571546982244, -6.6656571546982244, -6.6282327546982245, -7.1745163846982241, -7.1745163846982241, -6.6656571546982244, -6.6723588546982242, -6.6656571546982244]
								}, {
									"case":	296,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	297,
									"scores":	[-4.9525644546982237, -3.9291591546982243, -7.6236720546982237, -6.3230703376982245, -7.6439473546982235, -7.3528611546982248, -7.3528611546982248, -7.3595628546982237, -7.8617203846982244, -7.8617203846982244, -7.3528611546982248, -7.3528611546982248, -7.3528611546982248, -7.3528611546982248, -7.3528611546982248, -7.315436754698224, -7.8617203846982244, -7.8617203846982244, -7.3528611546982248, -7.3595628546982237, -7.3528611546982248]
								}, {
									"case":	298,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	299,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	300,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	301,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	302,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	303,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	304,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	305,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	306,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	307,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	308,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	309,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	310,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	311,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	312,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	313,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	314,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	315,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	316,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	317,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	318,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	319,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	320,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	321,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}, {
									"case":	322,
									"scores":	[-6.9710104546982237, -5.9476051546982243, -9.6421180546982246, -8.3415163376982235, -9.6623933546982244, -9.3713071546982238, -9.3713071546982238, -9.3780088546982245, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3713071546982238, -9.3338827546982248, -9.8801663846982244, -9.8801663846982244, -9.3713071546982238, -9.3780088546982245, -9.3713071546982238]
								}]
						}, {
							"switch":	19,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	119,
							"begin_column":	3,
							"end_line":	122,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Can not open.\\n\", infile);\n    return (-1);\n}\n", "if ((in == ((void *)0)) || __is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Can not open.\\n\", infile);\n    return (-1);\n}\n", "if ((in == ((void *)0)) && !__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    fprintf(stderr, \"%s: Can not open.\\n\", infile);\n    return (-1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.6874422944281453, -2.5888085434281458, -4.1977831234281453, -3.6624280894281456, -4.0436593894281456, -3.7330400894281457, -3.7330400894281457, -4.0818292894281463, -4.2840610694281462, -4.2840610694281462, -3.7330400894281457, -3.7330400894281457, -3.7330400894281457, -3.7330400894281457, -3.7330400894281457, -4.5359921894281463, -4.2840610694281462, -4.2840610694281462, -3.7330400894281457, -4.0818292894281463, -3.7330400894281457]
								}, {
									"case":	2,
									"scores":	[-2.8330231014281475, -3.7343893504281458, -5.3433639304281462, -4.808008896428146, -5.1892401964281465, -4.8786208964281457, -4.8786208964281457, -5.2274100964281462, -5.4296418764281462, -5.4296418764281462, -4.8786208964281457, -4.8786208964281457, -4.8786208964281457, -4.8786208964281457, -4.8786208964281457, -5.6815729964281463, -5.4296418764281462, -5.4296418764281462, -4.8786208964281457, -5.2274100964281462, -4.8786208964281457]
								}, {
									"case":	3,
									"scores":	[-2.8330231014281475, -3.7343893504281458, -5.3433639304281462, -4.808008896428146, -5.1892401964281465, -4.8786208964281457, -4.8786208964281457, -5.2274100964281462, -5.4296418764281462, -5.4296418764281462, -4.8786208964281457, -4.8786208964281457, -4.8786208964281457, -4.8786208964281457, -4.8786208964281457, -5.6815729964281463, -5.4296418764281462, -5.4296418764281462, -4.8786208964281457, -5.2274100964281462, -4.8786208964281457]
								}]
						}, {
							"switch":	20,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	119,
							"begin_column":	3,
							"end_line":	122,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    if (in == ((void *)0)) {\n        fprintf(stderr, \"%s: Can not open.\\n\", infile);\n        return (-1);\n    }\n", "if (!__is_neg(\"\", \"L119\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(optarg), sizeof (optarg), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(rowsperstrip), sizeof (rowsperstrip), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)) && (in == ((void *)0))) {\n    fprintf(stderr, \"%s: Can not open.\\n\", infile);\n    return (-1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.4380494596982238, -4.3394157086982243, -5.9483902886982243, -5.4130352546982241, -5.7942665546982237, -5.4836472546982247, -5.4836472546982247, -5.8324364546982244, -6.0346682346982234, -6.0346682346982234, -5.4836472546982247, -5.4836472546982247, -5.4836472546982247, -5.4836472546982247, -5.4836472546982247, -6.2865993546982244, -6.0346682346982234, -6.0346682346982234, -5.4836472546982247, -5.8324364546982244, -5.4836472546982247]
								}, {
									"case":	2,
									"scores":	[-4.1881929906982238, -5.0895592396982234, -6.6985338196982234, -6.1631787856982241, -6.5444100856982246, -6.2337907856982238, -6.2337907856982238, -6.5825799856982243, -6.7848117656982243, -6.7848117656982243, -6.2337907856982238, -6.2337907856982238, -6.2337907856982238, -6.2337907856982238, -6.2337907856982238, -7.0367428856982244, -6.7848117656982243, -6.7848117656982243, -6.2337907856982238, -6.5825799856982243, -6.2337907856982238]
								}]
						}]
				}, {
					"line":	115,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	116,
							"begin_column":	0,
							"end_line":	116,
							"end_column":	0,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.053441956650782]
								}, {
									"case":	2,
									"scores":	[-4.053441956650782]
								}, {
									"case":	3,
									"scores":	[-4.053441956650782]
								}, {
									"case":	4,
									"scores":	[-4.053441956650782]
								}, {
									"case":	5,
									"scores":	[-4.053441956650782]
								}, {
									"case":	6,
									"scores":	[-4.053441956650782]
								}, {
									"case":	7,
									"scores":	[-4.053441956650782]
								}, {
									"case":	8,
									"scores":	[-4.053441956650782]
								}, {
									"case":	9,
									"scores":	[-4.053441956650782]
								}, {
									"case":	10,
									"scores":	[-4.053441956650782]
								}, {
									"case":	11,
									"scores":	[-4.053441956650782]
								}, {
									"case":	12,
									"scores":	[-4.053441956650782]
								}, {
									"case":	13,
									"scores":	[-4.053441956650782]
								}, {
									"case":	14,
									"scores":	[-4.053441956650782]
								}, {
									"case":	15,
									"scores":	[-4.053441956650782]
								}, {
									"case":	16,
									"scores":	[-4.053441956650782]
								}, {
									"case":	17,
									"scores":	[-4.053441956650782]
								}, {
									"case":	18,
									"scores":	[-4.053441956650782]
								}, {
									"case":	19,
									"scores":	[-4.053441956650782]
								}, {
									"case":	20,
									"scores":	[-4.053441956650782]
								}, {
									"case":	21,
									"scores":	[-4.053441956650782]
								}, {
									"case":	22,
									"scores":	[-4.053441956650782]
								}, {
									"case":	23,
									"scores":	[-4.053441956650782]
								}, {
									"case":	24,
									"scores":	[-4.053441956650782]
								}, {
									"case":	25,
									"scores":	[-4.053441956650782]
								}, {
									"case":	26,
									"scores":	[-4.053441956650782]
								}, {
									"case":	27,
									"scores":	[-4.053441956650782]
								}, {
									"case":	28,
									"scores":	[-4.053441956650782]
								}, {
									"case":	29,
									"scores":	[-4.053441956650782]
								}, {
									"case":	30,
									"scores":	[-4.053441956650782]
								}, {
									"case":	31,
									"scores":	[-4.053441956650782]
								}, {
									"case":	32,
									"scores":	[-4.053441956650782]
								}, {
									"case":	33,
									"scores":	[-4.053441956650782]
								}, {
									"case":	34,
									"scores":	[-4.053441956650782]
								}, {
									"case":	35,
									"scores":	[-4.053441956650782]
								}, {
									"case":	36,
									"scores":	[-4.053441956650782]
								}, {
									"case":	37,
									"scores":	[-4.053441956650782]
								}, {
									"case":	38,
									"scores":	[-4.053441956650782]
								}, {
									"case":	39,
									"scores":	[-4.053441956650782]
								}, {
									"case":	40,
									"scores":	[-4.053441956650782]
								}, {
									"case":	41,
									"scores":	[-4.053441956650782]
								}, {
									"case":	42,
									"scores":	[-4.053441956650782]
								}, {
									"case":	43,
									"scores":	[-4.053441956650782]
								}, {
									"case":	44,
									"scores":	[-4.053441956650782]
								}, {
									"case":	45,
									"scores":	[-4.053441956650782]
								}, {
									"case":	46,
									"scores":	[-4.053441956650782]
								}, {
									"case":	47,
									"scores":	[-4.053441956650782]
								}, {
									"case":	48,
									"scores":	[-4.053441956650782]
								}, {
									"case":	49,
									"scores":	[-4.053441956650782]
								}, {
									"case":	50,
									"scores":	[-4.053441956650782]
								}, {
									"case":	51,
									"scores":	[-4.053441956650782]
								}, {
									"case":	52,
									"scores":	[-4.053441956650782]
								}, {
									"case":	53,
									"scores":	[-4.053441956650782]
								}, {
									"case":	54,
									"scores":	[-4.053441956650782]
								}, {
									"case":	55,
									"scores":	[-4.053441956650782]
								}, {
									"case":	56,
									"scores":	[-4.053441956650782]
								}, {
									"case":	57,
									"scores":	[-4.053441956650782]
								}, {
									"case":	58,
									"scores":	[-4.053441956650782]
								}, {
									"case":	59,
									"scores":	[-4.053441956650782]
								}, {
									"case":	60,
									"scores":	[-4.053441956650782]
								}, {
									"case":	61,
									"scores":	[-4.053441956650782]
								}, {
									"case":	62,
									"scores":	[-4.053441956650782]
								}, {
									"case":	63,
									"scores":	[-4.053441956650782]
								}, {
									"case":	64,
									"scores":	[-4.053441956650782]
								}, {
									"case":	65,
									"scores":	[-4.053441956650782]
								}, {
									"case":	66,
									"scores":	[-4.053441956650782]
								}, {
									"case":	67,
									"scores":	[-4.053441956650782]
								}, {
									"case":	68,
									"scores":	[-4.053441956650782]
								}, {
									"case":	69,
									"scores":	[-4.053441956650782]
								}, {
									"case":	70,
									"scores":	[-4.053441956650782]
								}, {
									"case":	71,
									"scores":	[-4.053441956650782]
								}, {
									"case":	72,
									"scores":	[-4.053441956650782]
								}, {
									"case":	73,
									"scores":	[-4.053441956650782]
								}, {
									"case":	74,
									"scores":	[-4.053441956650782]
								}, {
									"case":	75,
									"scores":	[-4.053441956650782]
								}, {
									"case":	76,
									"scores":	[-4.053441956650782]
								}, {
									"case":	77,
									"scores":	[-4.053441956650782]
								}, {
									"case":	78,
									"scores":	[-4.053441956650782]
								}, {
									"case":	79,
									"scores":	[-4.053441956650782]
								}, {
									"case":	80,
									"scores":	[-4.053441956650782]
								}, {
									"case":	81,
									"scores":	[-4.053441956650782]
								}, {
									"case":	82,
									"scores":	[-4.053441956650782]
								}, {
									"case":	83,
									"scores":	[-4.053441956650782]
								}, {
									"case":	84,
									"scores":	[-4.053441956650782]
								}, {
									"case":	85,
									"scores":	[-4.053441956650782]
								}, {
									"case":	86,
									"scores":	[-4.053441956650782]
								}, {
									"case":	87,
									"scores":	[-4.053441956650782]
								}, {
									"case":	88,
									"scores":	[-4.053441956650782]
								}, {
									"case":	89,
									"scores":	[-4.053441956650782]
								}, {
									"case":	90,
									"scores":	[-4.053441956650782]
								}, {
									"case":	91,
									"scores":	[-4.053441956650782]
								}, {
									"case":	92,
									"scores":	[-4.053441956650782]
								}, {
									"case":	93,
									"scores":	[-4.053441956650782]
								}, {
									"case":	94,
									"scores":	[-4.053441956650782]
								}, {
									"case":	95,
									"scores":	[-4.053441956650782]
								}, {
									"case":	96,
									"scores":	[-4.053441956650782]
								}, {
									"case":	97,
									"scores":	[-4.053441956650782]
								}, {
									"case":	98,
									"scores":	[-4.053441956650782]
								}, {
									"case":	99,
									"scores":	[-4.053441956650782]
								}, {
									"case":	100,
									"scores":	[-4.053441956650782]
								}, {
									"case":	101,
									"scores":	[-4.053441956650782]
								}, {
									"case":	102,
									"scores":	[-4.053441956650782]
								}, {
									"case":	103,
									"scores":	[-4.053441956650782]
								}, {
									"case":	104,
									"scores":	[-4.053441956650782]
								}, {
									"case":	105,
									"scores":	[-4.053441956650782]
								}, {
									"case":	106,
									"scores":	[-4.053441956650782]
								}, {
									"case":	107,
									"scores":	[-4.053441956650782]
								}, {
									"case":	108,
									"scores":	[-4.053441956650782]
								}, {
									"case":	109,
									"scores":	[-4.053441956650782]
								}, {
									"case":	110,
									"scores":	[-4.053441956650782]
								}, {
									"case":	111,
									"scores":	[-4.053441956650782]
								}, {
									"case":	112,
									"scores":	[-4.053441956650782]
								}, {
									"case":	113,
									"scores":	[-4.053441956650782]
								}, {
									"case":	114,
									"scores":	[-4.053441956650782]
								}, {
									"case":	115,
									"scores":	[-4.053441956650782]
								}, {
									"case":	116,
									"scores":	[-4.053441956650782]
								}, {
									"case":	117,
									"scores":	[-4.053441956650782]
								}, {
									"case":	118,
									"scores":	[-4.053441956650782]
								}, {
									"case":	119,
									"scores":	[-4.053441956650782]
								}, {
									"case":	120,
									"scores":	[-4.053441956650782]
								}, {
									"case":	121,
									"scores":	[-4.053441956650782]
								}, {
									"case":	122,
									"scores":	[-4.053441956650782]
								}, {
									"case":	123,
									"scores":	[-4.053441956650782]
								}, {
									"case":	124,
									"scores":	[-4.053441956650782]
								}, {
									"case":	125,
									"scores":	[-4.053441956650782]
								}, {
									"case":	126,
									"scores":	[-4.053441956650782]
								}, {
									"case":	127,
									"scores":	[-4.053441956650782]
								}, {
									"case":	128,
									"scores":	[-4.053441956650782]
								}, {
									"case":	129,
									"scores":	[-4.053441956650782]
								}, {
									"case":	130,
									"scores":	[-4.053441956650782]
								}, {
									"case":	131,
									"scores":	[-4.053441956650782]
								}, {
									"case":	132,
									"scores":	[-4.053441956650782]
								}, {
									"case":	133,
									"scores":	[-4.053441956650782]
								}, {
									"case":	134,
									"scores":	[-4.053441956650782]
								}, {
									"case":	135,
									"scores":	[-4.053441956650782]
								}, {
									"case":	136,
									"scores":	[-4.053441956650782]
								}, {
									"case":	137,
									"scores":	[-4.053441956650782]
								}, {
									"case":	138,
									"scores":	[-4.053441956650782]
								}, {
									"case":	139,
									"scores":	[-4.053441956650782]
								}, {
									"case":	140,
									"scores":	[-4.053441956650782]
								}, {
									"case":	141,
									"scores":	[-4.053441956650782]
								}, {
									"case":	142,
									"scores":	[-4.053441956650782]
								}, {
									"case":	143,
									"scores":	[-4.053441956650782]
								}, {
									"case":	144,
									"scores":	[-4.053441956650782]
								}, {
									"case":	145,
									"scores":	[-4.053441956650782]
								}, {
									"case":	146,
									"scores":	[-4.053441956650782]
								}, {
									"case":	147,
									"scores":	[-4.053441956650782]
								}, {
									"case":	148,
									"scores":	[-4.053441956650782]
								}, {
									"case":	149,
									"scores":	[-4.053441956650782]
								}, {
									"case":	150,
									"scores":	[-4.053441956650782]
								}, {
									"case":	151,
									"scores":	[-4.053441956650782]
								}, {
									"case":	152,
									"scores":	[-4.053441956650782]
								}, {
									"case":	153,
									"scores":	[-4.053441956650782]
								}, {
									"case":	154,
									"scores":	[-4.053441956650782]
								}, {
									"case":	155,
									"scores":	[-4.053441956650782]
								}, {
									"case":	156,
									"scores":	[-4.053441956650782]
								}, {
									"case":	157,
									"scores":	[-4.053441956650782]
								}, {
									"case":	158,
									"scores":	[-4.053441956650782]
								}, {
									"case":	159,
									"scores":	[-4.053441956650782]
								}, {
									"case":	160,
									"scores":	[-4.053441956650782]
								}, {
									"case":	161,
									"scores":	[-4.053441956650782]
								}, {
									"case":	162,
									"scores":	[-4.053441956650782]
								}, {
									"case":	163,
									"scores":	[-4.053441956650782]
								}, {
									"case":	164,
									"scores":	[-4.053441956650782]
								}, {
									"case":	165,
									"scores":	[-4.053441956650782]
								}, {
									"case":	166,
									"scores":	[-4.053441956650782]
								}, {
									"case":	167,
									"scores":	[-4.053441956650782]
								}, {
									"case":	168,
									"scores":	[-4.053441956650782]
								}, {
									"case":	169,
									"scores":	[-4.053441956650782]
								}, {
									"case":	170,
									"scores":	[-4.053441956650782]
								}, {
									"case":	171,
									"scores":	[-4.053441956650782]
								}, {
									"case":	172,
									"scores":	[-4.053441956650782]
								}, {
									"case":	173,
									"scores":	[-4.053441956650782]
								}, {
									"case":	174,
									"scores":	[-4.053441956650782]
								}, {
									"case":	175,
									"scores":	[-4.053441956650782]
								}, {
									"case":	176,
									"scores":	[-4.053441956650782]
								}, {
									"case":	177,
									"scores":	[-4.053441956650782]
								}, {
									"case":	178,
									"scores":	[-4.053441956650782]
								}, {
									"case":	179,
									"scores":	[-4.053441956650782]
								}, {
									"case":	180,
									"scores":	[-4.053441956650782]
								}, {
									"case":	181,
									"scores":	[-4.053441956650782]
								}, {
									"case":	182,
									"scores":	[-4.053441956650782]
								}, {
									"case":	183,
									"scores":	[-4.053441956650782]
								}, {
									"case":	184,
									"scores":	[-4.053441956650782]
								}, {
									"case":	185,
									"scores":	[-4.053441956650782]
								}, {
									"case":	186,
									"scores":	[-4.053441956650782]
								}, {
									"case":	187,
									"scores":	[-4.053441956650782]
								}, {
									"case":	188,
									"scores":	[-4.053441956650782]
								}, {
									"case":	189,
									"scores":	[-4.053441956650782]
								}, {
									"case":	190,
									"scores":	[-4.053441956650782]
								}, {
									"case":	191,
									"scores":	[-4.053441956650782]
								}, {
									"case":	192,
									"scores":	[-4.053441956650782]
								}, {
									"case":	193,
									"scores":	[-4.053441956650782]
								}, {
									"case":	194,
									"scores":	[-4.053441956650782]
								}, {
									"case":	195,
									"scores":	[-4.053441956650782]
								}, {
									"case":	196,
									"scores":	[-4.053441956650782]
								}, {
									"case":	197,
									"scores":	[-4.053441956650782]
								}, {
									"case":	198,
									"scores":	[-4.053441956650782]
								}, {
									"case":	199,
									"scores":	[-4.053441956650782]
								}, {
									"case":	200,
									"scores":	[-4.053441956650782]
								}, {
									"case":	201,
									"scores":	[-4.053441956650782]
								}, {
									"case":	202,
									"scores":	[-4.053441956650782]
								}, {
									"case":	203,
									"scores":	[-4.053441956650782]
								}, {
									"case":	204,
									"scores":	[-4.053441956650782]
								}, {
									"case":	205,
									"scores":	[-4.053441956650782]
								}, {
									"case":	206,
									"scores":	[-4.053441956650782]
								}, {
									"case":	207,
									"scores":	[-4.053441956650782]
								}, {
									"case":	208,
									"scores":	[-4.053441956650782]
								}, {
									"case":	209,
									"scores":	[-4.053441956650782]
								}, {
									"case":	210,
									"scores":	[-4.053441956650782]
								}, {
									"case":	211,
									"scores":	[-4.053441956650782]
								}, {
									"case":	212,
									"scores":	[-4.053441956650782]
								}, {
									"case":	213,
									"scores":	[-4.053441956650782]
								}, {
									"case":	214,
									"scores":	[-4.053441956650782]
								}, {
									"case":	215,
									"scores":	[-4.053441956650782]
								}, {
									"case":	216,
									"scores":	[-4.053441956650782]
								}, {
									"case":	217,
									"scores":	[-4.053441956650782]
								}, {
									"case":	218,
									"scores":	[-4.053441956650782]
								}, {
									"case":	219,
									"scores":	[-4.053441956650782]
								}, {
									"case":	220,
									"scores":	[-4.053441956650782]
								}, {
									"case":	221,
									"scores":	[-4.053441956650782]
								}, {
									"case":	222,
									"scores":	[-4.053441956650782]
								}, {
									"case":	223,
									"scores":	[-4.053441956650782]
								}, {
									"case":	224,
									"scores":	[-4.053441956650782]
								}, {
									"case":	225,
									"scores":	[-4.053441956650782]
								}, {
									"case":	226,
									"scores":	[-4.053441956650782]
								}, {
									"case":	227,
									"scores":	[-4.053441956650782]
								}, {
									"case":	228,
									"scores":	[-4.053441956650782]
								}, {
									"case":	229,
									"scores":	[-4.053441956650782]
								}, {
									"case":	230,
									"scores":	[-4.053441956650782]
								}, {
									"case":	231,
									"scores":	[-4.053441956650782]
								}, {
									"case":	232,
									"scores":	[-4.053441956650782]
								}, {
									"case":	233,
									"scores":	[-4.053441956650782]
								}, {
									"case":	234,
									"scores":	[-4.053441956650782]
								}, {
									"case":	235,
									"scores":	[-4.053441956650782]
								}, {
									"case":	236,
									"scores":	[-4.053441956650782]
								}, {
									"case":	237,
									"scores":	[-4.053441956650782]
								}, {
									"case":	238,
									"scores":	[-4.053441956650782]
								}, {
									"case":	239,
									"scores":	[-4.053441956650782]
								}, {
									"case":	240,
									"scores":	[-4.053441956650782]
								}, {
									"case":	241,
									"scores":	[-4.053441956650782]
								}, {
									"case":	242,
									"scores":	[-4.053441956650782]
								}, {
									"case":	243,
									"scores":	[-4.053441956650782]
								}, {
									"case":	244,
									"scores":	[-4.053441956650782]
								}, {
									"case":	245,
									"scores":	[-4.053441956650782]
								}, {
									"case":	246,
									"scores":	[-4.053441956650782]
								}, {
									"case":	247,
									"scores":	[-4.053441956650782]
								}, {
									"case":	248,
									"scores":	[-4.053441956650782]
								}, {
									"case":	249,
									"scores":	[-4.053441956650782]
								}, {
									"case":	250,
									"scores":	[-4.053441956650782]
								}, {
									"case":	251,
									"scores":	[-4.053441956650782]
								}, {
									"case":	252,
									"scores":	[-4.053441956650782]
								}, {
									"case":	253,
									"scores":	[-4.053441956650782]
								}, {
									"case":	254,
									"scores":	[-4.053441956650782]
								}, {
									"case":	255,
									"scores":	[-4.053441956650782]
								}, {
									"case":	256,
									"scores":	[-4.053441956650782]
								}, {
									"case":	257,
									"scores":	[-4.053441956650782]
								}, {
									"case":	258,
									"scores":	[-4.053441956650782]
								}, {
									"case":	259,
									"scores":	[-4.053441956650782]
								}, {
									"case":	260,
									"scores":	[-4.053441956650782]
								}, {
									"case":	261,
									"scores":	[-4.053441956650782]
								}, {
									"case":	262,
									"scores":	[-4.053441956650782]
								}, {
									"case":	263,
									"scores":	[-4.053441956650782]
								}, {
									"case":	264,
									"scores":	[-4.053441956650782]
								}, {
									"case":	265,
									"scores":	[-4.053441956650782]
								}, {
									"case":	266,
									"scores":	[-4.053441956650782]
								}, {
									"case":	267,
									"scores":	[-4.053441956650782]
								}, {
									"case":	268,
									"scores":	[-4.053441956650782]
								}, {
									"case":	269,
									"scores":	[-4.053441956650782]
								}, {
									"case":	270,
									"scores":	[-4.053441956650782]
								}, {
									"case":	271,
									"scores":	[-4.053441956650782]
								}, {
									"case":	272,
									"scores":	[-4.053441956650782]
								}, {
									"case":	273,
									"scores":	[-4.053441956650782]
								}, {
									"case":	274,
									"scores":	[-4.053441956650782]
								}, {
									"case":	275,
									"scores":	[-4.053441956650782]
								}, {
									"case":	276,
									"scores":	[-4.053441956650782]
								}, {
									"case":	277,
									"scores":	[-4.053441956650782]
								}, {
									"case":	278,
									"scores":	[-4.053441956650782]
								}, {
									"case":	279,
									"scores":	[-4.053441956650782]
								}, {
									"case":	280,
									"scores":	[-4.053441956650782]
								}, {
									"case":	281,
									"scores":	[-4.053441956650782]
								}, {
									"case":	282,
									"scores":	[-4.053441956650782]
								}, {
									"case":	283,
									"scores":	[-4.053441956650782]
								}, {
									"case":	284,
									"scores":	[-4.053441956650782]
								}, {
									"case":	285,
									"scores":	[-4.053441956650782]
								}, {
									"case":	286,
									"scores":	[-4.053441956650782]
								}, {
									"case":	287,
									"scores":	[-4.053441956650782]
								}, {
									"case":	288,
									"scores":	[-4.053441956650782]
								}, {
									"case":	289,
									"scores":	[-4.053441956650782]
								}, {
									"case":	290,
									"scores":	[-4.053441956650782]
								}, {
									"case":	291,
									"scores":	[-4.053441956650782]
								}, {
									"case":	292,
									"scores":	[-4.053441956650782]
								}, {
									"case":	293,
									"scores":	[-4.053441956650782]
								}, {
									"case":	294,
									"scores":	[-4.053441956650782]
								}, {
									"case":	295,
									"scores":	[-7.51917591665078, -6.3731496146507816, -6.74292872565078, -5.7245902966507813, -7.0392531966507814, -7.6480690968947824, -7.13752356565078, -7.6480690968947824, -4.7690482656507829, -8.4290244956507827, -8.4290244956507827, -6.2785082126507819, -7.1298712656507828, -7.1298712656507828, -7.1298712656507828, -7.092446865650782, -7.6387304956507824, -7.6387304956507824, -7.1298712656507828, -7.1365729656507817, -7.1298712656507828]
								}, {
									"case":	296,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	297,
									"scores":	[-8.20637991665078, -7.0603536146507819, -7.43013272565078, -6.41179429665078, -7.7264571966507818, -8.3352730968947828, -7.8247275656507815, -8.3352730968947828, -5.4562522656507824, -9.11622849565078, -9.11622849565078, -6.9657122126507822, -7.8170752656507823, -7.8170752656507823, -7.8170752656507823, -7.7796508656507815, -8.3259344956507828, -8.3259344956507828, -7.8170752656507823, -7.8237769656507821, -7.8170752656507823]
								}, {
									"case":	298,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	299,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	300,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	301,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	302,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	303,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	304,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	305,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	306,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	307,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	308,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	309,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	310,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	311,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	312,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	313,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	314,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	315,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	316,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	317,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	318,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	319,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	320,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	321,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}, {
									"case":	322,
									"scores":	[-10.224825916650779, -9.07879961465078, -9.44857872565078, -8.43024029665078, -9.74490319665078, -10.353719096894782, -9.84317356565078, -10.353719096894782, -7.4746982656507823, -11.134674495650781, -11.134674495650781, -8.9841582126507831, -9.8355212656507831, -9.8355212656507831, -9.8355212656507831, -9.79809686565078, -10.344380495650782, -10.344380495650782, -9.8355212656507831, -9.84222296565078, -9.8355212656507831]
								}]
						}, {
							"switch":	13,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	116,
							"begin_column":	2,
							"end_line":	126,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    infile = argv[optind++];\n    in = fopen(infile, \"r\");\n    if (in == ((void *)0)) {\n        fprintf(stderr, \"%s: Can not open.\\n\", infile);\n        return (-1);\n    }\n} else {\n    infile = \"<stdin>\";\n    in = stdin;\n}\n", "if ((argc - optind > 1) || __is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    infile = argv[optind++];\n    in = fopen(infile, \"r\");\n    if (in == ((void *)0)) {\n        fprintf(stderr, \"%s: Can not open.\\n\", infile);\n        return (-1);\n    }\n} else {\n    infile = \"<stdin>\";\n    in = stdin;\n}\n", "if ((argc - optind > 1) && !__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row))) {\n    infile = argv[optind++];\n    in = fopen(infile, \"r\");\n    if (in == ((void *)0)) {\n        fprintf(stderr, \"%s: Can not open.\\n\", infile);\n        return (-1);\n    }\n} else {\n    infile = \"<stdin>\";\n    in = stdin;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.488094244728146, -3.2406765557281458, -3.680855294728147, -3.6860902117281467, -2.745534071728148, -3.9901779357281462, -3.9348079607281461, -3.9901779357281462, -3.1379498167281463, -5.2561676917281464, -5.2561676917281464, -4.4244837887281463, -3.9505487117281466, -3.9505487117281466, -3.9505487117281466, -4.7535008117281468, -4.5015696917281467, -4.5015696917281467, -3.9505487117281466, -4.2993379117281467, -3.9505487117281466]
								}, {
									"case":	2,
									"scores":	[-5.2673399108281451, -5.0199222218281463, -5.4601009608281466, -5.4653358778281458, -4.5247797378281458, -5.7694236018281462, -5.7140536268281465, -5.7694236018281462, -4.9171954828281459, -7.0354133578281459, -7.0354133578281459, -6.2037294548281459, -5.7297943778281457, -5.7297943778281457, -5.7297943778281457, -6.5327464778281463, -6.2808153578281463, -6.2808153578281463, -5.7297943778281457, -6.0785835778281463, -5.7297943778281457]
								}, {
									"case":	3,
									"scores":	[-5.2673399108281451, -5.0199222218281463, -5.4601009608281466, -5.4653358778281458, -4.5247797378281458, -5.7694236018281462, -5.7140536268281465, -5.7694236018281462, -4.9171954828281459, -7.0354133578281459, -7.0354133578281459, -6.2037294548281459, -5.7297943778281457, -5.7297943778281457, -5.7297943778281457, -6.5327464778281463, -6.2808153578281463, -6.2808153578281463, -5.7297943778281457, -6.0785835778281463, -5.7297943778281457]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	116,
							"begin_column":	2,
							"end_line":	126,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    if (argc - optind > 1) {\n        infile = argv[optind++];\n        in = fopen(infile, \"r\");\n        if (in == ((void *)0)) {\n            fprintf(stderr, \"%s: Can not open.\\n\", infile);\n            return (-1);\n        }\n    } else {\n        infile = \"<stdin>\";\n        in = stdin;\n    }\n", "if (!__is_neg(\"\", \"L116\", 21, &(argc), sizeof (argc), &(optind), sizeof (optind), &(argv), sizeof (argv), &(infile), sizeof (infile), &(in), sizeof (in), &(spp), sizeof (spp), &(optarg), sizeof (optarg), &(photometric), sizeof (photometric), &(rowsperstrip), sizeof (rowsperstrip), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(c), sizeof (c), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)) && (argc - optind > 1)) {\n    infile = argv[optind++];\n    in = fopen(infile, \"r\");\n    if (in == ((void *)0)) {\n        fprintf(stderr, \"%s: Can not open.\\n\", infile);\n        return (-1);\n    }\n} else {\n    infile = \"<stdin>\";\n    in = stdin;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.8170723096507819, -4.5696546206507822, -5.0098333596507825, -5.0150682766507826, -3.3540831366507824, -5.3191560006507821, -5.2637860256507825, -5.3191560006507821, -4.4669278816507818, -6.5851457566507818, -6.5851457566507818, -5.7534618536507818, -5.2795267766507816, -5.2795267766507816, -5.2795267766507816, -6.0824788766507822, -5.8305477566507822, -5.8305477566507822, -5.2795267766507816, -5.6283159766507822, -5.2795267766507816]
								}, {
									"case":	2,
									"scores":	[-6.05477056805078, -5.8073528790507822, -6.2475316180507825, -6.2527665350507817, -5.3122103950507817, -6.5568542590507821, -6.5014842840507825, -6.5568542590507821, -5.7046261400507827, -7.8228440150507828, -7.8228440150507828, -6.9911601120507818, -6.5172250350507817, -6.5172250350507817, -6.5172250350507817, -7.3201771350507823, -7.0682460150507822, -7.0682460150507822, -6.5172250350507817, -6.8660142350507822, -6.5172250350507817]
								}]
						}]
				}, {
					"line":	127,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	128,
							"begin_column":	0,
							"end_line":	128,
							"end_column":	0,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	2,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	3,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	4,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	5,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	6,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	7,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	8,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	9,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	10,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	11,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	12,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	13,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	14,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	15,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	16,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	17,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	18,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	19,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	20,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	21,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	22,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	23,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	24,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	25,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	26,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	27,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	28,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	29,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	30,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	31,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	32,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	33,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	34,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	35,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	36,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	37,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	38,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	39,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	40,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	41,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	42,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	43,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	44,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	45,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	46,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	47,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	48,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	49,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	50,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	51,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	52,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	53,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	54,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	55,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	56,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	57,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	58,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	59,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	60,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	61,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	62,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	63,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	64,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	65,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	66,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	67,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	68,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	69,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	70,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	71,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	72,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	73,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	74,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	75,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	76,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	77,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	78,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	79,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	80,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	81,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	82,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	83,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	84,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	85,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	86,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	87,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	88,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	89,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	90,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	91,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	92,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	93,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	94,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	95,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	96,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	97,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	98,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	99,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	100,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	101,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	102,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	103,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	104,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	105,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	106,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	107,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	108,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	109,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	110,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	111,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	112,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	113,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	114,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	115,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	116,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	117,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	118,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	119,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	120,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	121,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	122,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	123,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	124,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	125,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	126,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	127,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	128,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	129,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	130,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	131,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	132,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	133,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	134,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	135,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	136,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	137,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	138,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	139,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	140,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	141,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	142,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	143,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	144,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	145,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	146,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	147,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	148,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	149,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	150,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	151,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	152,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	153,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	154,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	155,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	156,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	157,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	158,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	159,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	160,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	161,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	162,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	163,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	164,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	165,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	166,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	167,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	168,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	169,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	170,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	171,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	172,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	173,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	174,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	175,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	176,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	177,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	178,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	179,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	180,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	181,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	182,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	183,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	184,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	185,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	186,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	187,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	188,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	189,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	190,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	191,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	192,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	193,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	194,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	195,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	196,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	197,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	198,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	199,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	200,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	201,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	202,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	203,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	204,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	205,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	206,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	207,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	208,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	209,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	210,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	211,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	212,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	213,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	214,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	215,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	216,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	217,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	218,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	219,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	220,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	221,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	222,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	223,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	224,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	225,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	226,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	227,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	228,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	229,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	230,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	231,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	232,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	233,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	234,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	235,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	236,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	237,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	238,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	239,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	240,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	241,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	242,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	243,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	244,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	245,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	246,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	247,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	248,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	249,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	250,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	251,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	252,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	253,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	254,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	255,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	256,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	257,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	258,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	259,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	260,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	261,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	262,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	263,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	264,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	265,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	266,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	267,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	268,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	269,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	270,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	271,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	272,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	273,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	274,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	275,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	276,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	277,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	278,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	279,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	280,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	281,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	282,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	283,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	284,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	285,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	286,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	287,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	288,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	289,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	290,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	291,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	292,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	293,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	294,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	295,
									"scores":	[-3.2836528843807042, -3.6253584363807043, -7.5672582676247053, -7.5672582676247053, -8.3482136663807047, -8.0851735363807062, -6.6475361953807051, -8.3482136663807047, -8.0163107523807042, -6.1976973833807047, -7.0567127363807041, -4.6882374363807049, -7.7952065463807045, -7.7952065463807045, -7.7952065463807045, -7.011636036380704, -7.5579196663807053, -7.5579196663807053, -7.0490604363807048, -7.0557621363807046, -7.0490604363807048]
								}, {
									"case":	296,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	297,
									"scores":	[-3.9708568843807042, -4.3125624363807047, -8.2544622676247048, -8.2544622676247048, -9.0354176663807042, -8.7723775363807057, -7.3347401953807054, -9.0354176663807042, -8.7035147523807055, -6.8849013833807042, -7.7439167363807044, -5.3754414363807044, -8.482410546380704, -8.482410546380704, -8.482410546380704, -7.6988400363807044, -8.2451236663807048, -8.2451236663807048, -7.7362644363807043, -7.742966136380705, -7.7362644363807043]
								}, {
									"case":	298,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	299,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	300,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	301,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	302,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	303,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	304,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	305,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	306,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	307,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	308,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	309,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	310,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	311,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	312,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	313,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	314,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	315,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	316,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	317,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	318,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	319,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	320,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	321,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}, {
									"case":	322,
									"scores":	[-5.9893028843807041, -6.3310084363807047, -10.272908267624706, -10.272908267624706, -11.053863666380705, -10.790823536380707, -9.3531861953807045, -11.053863666380705, -10.721960752380705, -8.9033473833807051, -9.7623627363807035, -7.3938874363807052, -10.500856546380705, -10.500856546380705, -10.500856546380705, -9.7172860363807043, -10.263569666380706, -10.263569666380706, -9.7547104363807051, -9.761412136380704, -9.7547104363807051]
								}]
						}, {
							"switch":	23,
							"types":	[[25], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], []],
							"begin_line":	128,
							"begin_column":	2,
							"end_line":	129,
							"end_column":	16,
							"patch_codes":	["if (__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    BadPPM(infile);\n", "if ((fgetc(in) != 'P') || __is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    BadPPM(infile);\n", "if (_IO_feof(in) != 'P')\n    BadPPM(infile);\n", "if (_IO_ferror(in) != 'P')\n    BadPPM(infile);\n", "if (_IO_ftrylockfile(in) != 'P')\n    BadPPM(infile);\n", "if (_IO_getc(in) != 'P')\n    BadPPM(infile);\n", "if (_IO_peekc_locked(in) != 'P')\n    BadPPM(infile);\n", "if (__uflow(in) != 'P')\n    BadPPM(infile);\n", "if (__underflow(in) != 'P')\n    BadPPM(infile);\n", "if (fclose(in) != 'P')\n    BadPPM(infile);\n", "if (feof(in) != 'P')\n    BadPPM(infile);\n", "if (feof_unlocked(in) != 'P')\n    BadPPM(infile);\n", "if (ferror(in) != 'P')\n    BadPPM(infile);\n", "if (ferror_unlocked(in) != 'P')\n    BadPPM(infile);\n", "if (fflush(in) != 'P')\n    BadPPM(infile);\n", "if (fflush_unlocked(in) != 'P')\n    BadPPM(infile);\n", "if (fgetc_unlocked(in) != 'P')\n    BadPPM(infile);\n", "if (fileno(in) != 'P')\n    BadPPM(infile);\n", "if (fileno_unlocked(in) != 'P')\n    BadPPM(infile);\n", "if (ftrylockfile(in) != 'P')\n    BadPPM(infile);\n", "if (getc(in) != 'P')\n    BadPPM(infile);\n", "if (getc_unlocked(in) != 'P')\n    BadPPM(infile);\n", "if (getw(in) != 'P')\n    BadPPM(infile);\n", "if (pclose(in) != 'P')\n    BadPPM(infile);\n", "if ((fgetc(in) != 'P') && !__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    BadPPM(infile);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.9143721929281465, -2.579073293928146, -4.4534037639281454, -4.4534037639281454, -2.9194805199281455, -4.5804407229281461, -4.3352429999281457, -2.9194805199281455, -4.2483458889281458, -4.1237476169281457, -3.634071788928146, -2.8372136449281458, -4.4975092399281458, -4.4975092399281458, -4.4975092399281458, -4.4527646399281462, -4.2008335199281461, -4.2008335199281461, -3.649812539928146, -3.9986017399281457, -3.649812539928146]
								}, {
									"case":	2,
									"scores":	[-2.7886423239281468, -2.4533434249281463, -4.3276738949281457, -4.3276738949281457, -2.7937506509281462, -4.4547108539281455, -4.2095131309281459, -2.7937506509281462, -4.1226160199281461, -3.9980177479281456, -3.5083419199281458, -2.711483775928146, -4.3717793709281461, -4.3717793709281461, -4.3717793709281461, -4.3270347709281456, -4.0751036509281455, -4.0751036509281455, -3.5240826709281459, -3.8728718709281456, -3.5240826709281459]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-2.7886423239281468, -2.4533434249281463, -4.3276738949281457, -4.3276738949281457, -2.7937506509281462, -4.4547108539281455, -4.2095131309281459, -2.7937506509281462, -4.1226160199281461, -3.9980177479281456, -3.5083419199281458, -2.711483775928146, -4.3717793709281461, -4.3717793709281461, -4.3717793709281461, -4.3270347709281456, -4.0751036509281455, -4.0751036509281455, -3.5240826709281459, -3.8728718709281456, -3.5240826709281459]
								}]
						}, {
							"switch":	24,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	128,
							"begin_column":	2,
							"end_line":	129,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    if (fgetc(in) != 'P')\n        BadPPM(infile);\n", "if (!__is_neg(\"\", \"L128\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(argv), sizeof (argv), &(optind), sizeof (optind), &(jpegcolormode), sizeof (jpegcolormode), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)) && (fgetc(in) != 'P'))\n    BadPPM(infile);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.4632756003807046, -4.127976701380704, -6.0023071713807044, -6.0023071713807044, -4.4683839273807049, -6.1293441303807041, -5.8841464073807046, -4.4683839273807049, -5.7972492963807039, -5.6726510243807047, -5.1829751963807045, -4.3861170523807047, -6.0464126473807047, -6.0464126473807047, -6.0464126473807047, -6.0016680473807043, -5.7497369273807042, -5.7497369273807042, -5.1987159473807045, -5.5475051473807042, -5.1987159473807045]
								}, {
									"case":	2,
									"scores":	[-3.3574476058807043, -3.0221487068807042, -4.8964791768807041, -4.8964791768807041, -3.3625559328807042, -5.0235161358807048, -4.7783184128807044, -3.3625559328807042, -4.6914213018807045, -4.5668230298807044, -4.0771472018807042, -3.2802890578807045, -4.9405846528807045, -4.9405846528807045, -4.9405846528807045, -4.8958400528807049, -4.6439089328807048, -4.6439089328807048, -4.0928879528807043, -4.4416771528807049, -4.0928879528807043]
								}]
						}]
				}, {
					"line":	129,
					"switches":	[{
							"switch":	25,
							"types":	[[], [], [], [], [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322], [], [], [], [], [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], [], [], [], [], [], []],
							"begin_line":	130,
							"begin_column":	0,
							"end_line":	130,
							"end_column":	0,
							"patch_codes":	["BadPPM((infile))", "BadPPM((optarg))", "TIFFSetField((out), 256, (uint32)w)", "TIFFSetField((out), 257, (uint32)h)", "TIFFSetField((out), 258, 8)", "TIFFSetField((out), 259, compression)", "TIFFSetField((out), 262, photometric)", "TIFFSetField((out), 274, 1)", "TIFFSetField((out), 277, spp)", "TIFFSetField((out), 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField((out), 282, resolution)", "TIFFSetField((out), 283, resolution)", "TIFFSetField((out), 284, 1)", "TIFFSetField((out), 296, 2)", "TIFFSetField((out), 317, predictor)", "TIFFSetField((out), 65538, jpegcolormode)", "TIFFSetField(out, 278, TIFFDefaultStripSize((out), rowsperstrip))", "_TIFFfree((buf))", "buf = (buf)", "c = (-1)", "c = (-4)", "c = (0)", "c = (1)", "c = (2)", "c = (255)", "c = (256)", "c = (257)", "c = (258)", "c = (259)", "c = (262)", "c = (274)", "c = (277)", "c = (278)", "c = (282)", "c = (283)", "c = (284)", "c = (296)", "c = (3)", "c = (317)", "c = (32946)", "c = (4)", "c = (5)", "c = (6)", "c = (65537)", "c = (65538)", "c = (7)", "c = (8)", "c = (argc)", "c = (c)", "c = (linebytes)", "c = (optind)", "c = fgetc((in))", "compression = (-1)", "compression = (-4)", "compression = (0)", "compression = (1)", "compression = (2)", "compression = (255)", "compression = (256)", "compression = (257)", "compression = (258)", "compression = (259)", "compression = (262)", "compression = (274)", "compression = (277)", "compression = (278)", "compression = (282)", "compression = (283)", "compression = (284)", "compression = (296)", "compression = (3)", "compression = (317)", "compression = (32946)", "compression = (4)", "compression = (5)", "compression = (6)", "compression = (65537)", "compression = (65538)", "compression = (7)", "compression = (8)", "compression = (photometric)", "compression = (spp)", "fprintf((in), \"%s: Can not open.\\n\", infile)", "fprintf((in), \"%s: Too few arguments\\n\", argv[0])", "fprintf((in), \"%s: Too many arguments\\n\", argv[0])", "fprintf((in), \"%s: scanline %lu: Read error.\\n\", infile, (unsigned long)row)", "fprintf((in), \"%s\\n\\n\", TIFFGetVersion())", "in = (in)", "in = fopen((infile), \"r\")", "in = fopen((optarg), \"r\")", "infile = (argv)[optind++]", "infile = (infile)", "infile = (optarg)", "jpegcolormode = (-1)", "jpegcolormode = (-4)", "jpegcolormode = (0)", "jpegcolormode = (1)", "jpegcolormode = (2)", "jpegcolormode = (255)", "jpegcolormode = (256)", "jpegcolormode = (257)", "jpegcolormode = (258)", "jpegcolormode = (259)", "jpegcolormode = (262)", "jpegcolormode = (274)", "jpegcolormode = (277)", "jpegcolormode = (278)", "jpegcolormode = (282)", "jpegcolormode = (283)", "jpegcolormode = (284)", "jpegcolormode = (296)", "jpegcolormode = (3)", "jpegcolormode = (317)", "jpegcolormode = (32946)", "jpegcolormode = (4)", "jpegcolormode = (5)", "jpegcolormode = (6)", "jpegcolormode = (65537)", "jpegcolormode = (65538)", "jpegcolormode = (7)", "jpegcolormode = (8)", "jpegcolormode = (argc)", "jpegcolormode = (c)", "jpegcolormode = (linebytes)", "jpegcolormode = (optind)", "linebytes = (-1)", "linebytes = (-4)", "linebytes = (0)", "linebytes = (1)", "linebytes = (2)", "linebytes = (255)", "linebytes = (256)", "linebytes = (257)", "linebytes = (258)", "linebytes = (259)", "linebytes = (262)", "linebytes = (274)", "linebytes = (277)", "linebytes = (278)", "linebytes = (282)", "linebytes = (283)", "linebytes = (284)", "linebytes = (296)", "linebytes = (3)", "linebytes = (317)", "linebytes = (32946)", "linebytes = (4)", "linebytes = (5)", "linebytes = (6)", "linebytes = (65537)", "linebytes = (65538)", "linebytes = (7)", "linebytes = (8)", "linebytes = (argc)", "linebytes = (c)", "linebytes = (linebytes)", "linebytes = (optind)", "out = (out)", "out = TIFFOpen((argv)[optind], \"w\")", "photometric = (-1)", "photometric = (-4)", "photometric = (0)", "photometric = (1)", "photometric = (2)", "photometric = (255)", "photometric = (256)", "photometric = (257)", "photometric = (258)", "photometric = (259)", "photometric = (262)", "photometric = (274)", "photometric = (277)", "photometric = (278)", "photometric = (282)", "photometric = (283)", "photometric = (284)", "photometric = (296)", "photometric = (3)", "photometric = (317)", "photometric = (32946)", "photometric = (4)", "photometric = (5)", "photometric = (6)", "photometric = (65537)", "photometric = (65538)", "photometric = (7)", "photometric = (8)", "photometric = (photometric)", "photometric = (spp)", "predictor = (-1)", "predictor = (-4)", "predictor = (0)", "predictor = (1)", "predictor = (2)", "predictor = (255)", "predictor = (256)", "predictor = (257)", "predictor = (258)", "predictor = (259)", "predictor = (262)", "predictor = (274)", "predictor = (277)", "predictor = (278)", "predictor = (282)", "predictor = (283)", "predictor = (284)", "predictor = (296)", "predictor = (3)", "predictor = (317)", "predictor = (32946)", "predictor = (4)", "predictor = (5)", "predictor = (6)", "predictor = (65537)", "predictor = (65538)", "predictor = (7)", "predictor = (8)", "predictor = (photometric)", "predictor = (spp)", "predictor = atoi((infile) + 1)", "predictor = atoi((optarg) + 1)", "quality = (-1)", "quality = (-4)", "quality = (0)", "quality = (1)", "quality = (2)", "quality = (255)", "quality = (256)", "quality = (257)", "quality = (258)", "quality = (259)", "quality = (262)", "quality = (274)", "quality = (277)", "quality = (278)", "quality = (282)", "quality = (283)", "quality = (284)", "quality = (296)", "quality = (3)", "quality = (317)", "quality = (32946)", "quality = (4)", "quality = (5)", "quality = (6)", "quality = (65537)", "quality = (65538)", "quality = (7)", "quality = (8)", "quality = (argc)", "quality = (c)", "quality = (linebytes)", "quality = (optind)", "quality = atoi((infile) + 1)", "quality = atoi((optarg) + 1)", "ungetc(c, (in))", "(void)TIFFClose(out)", "BadPPM(infile)", "TIFFSetField(out, 256, (uint32)w)", "TIFFSetField(out, 257, (uint32)h)", "TIFFSetField(out, 258, 8)", "TIFFSetField(out, 259, compression)", "TIFFSetField(out, 262, photometric)", "TIFFSetField(out, 274, 1)", "TIFFSetField(out, 277, spp)", "TIFFSetField(out, 278, TIFFDefaultStripSize(out, rowsperstrip))", "TIFFSetField(out, 282, resolution)", "TIFFSetField(out, 283, resolution)", "TIFFSetField(out, 284, 1)", "TIFFSetField(out, 296, 2)", "TIFFSetField(out, 317, predictor)", "TIFFSetField(out, 65538, jpegcolormode)", "_TIFFfree(buf)", "buf = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(out))", "buf = (unsigned char *)_TIFFmalloc(linebytes)", "c = fgetc(in)", "compression = 1", "compression = 32773", "compression = 32946", "compression = 5", "compression = 7", "exit(-1)", "exit(-2)", "in = fopen(infile, \"r\")", "infile = \"<stdin>\"", "infile = argv[optind++]", "jpegcolormode = 0", "linebytes = spp * w", "out = TIFFOpen(argv[optind], \"w\")", "photometric = 1", "photometric = 2", "photometric = 6", "ungetc(c, in)", "usage()", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -1;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return -4;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 0;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 1;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 255;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 256;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 257;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 258;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 259;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 262;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 274;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 277;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 278;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 282;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 283;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 284;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 296;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 2;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 317;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 32946;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 3;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 4;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 5;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65537;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 65538;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 6;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 7;\n", "if (__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    return 8;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.952428420063185]
								}, {
									"case":	2,
									"scores":	[-3.952428420063185]
								}, {
									"case":	3,
									"scores":	[-3.952428420063185]
								}, {
									"case":	4,
									"scores":	[-3.952428420063185]
								}, {
									"case":	5,
									"scores":	[-3.952428420063185]
								}, {
									"case":	6,
									"scores":	[-3.952428420063185]
								}, {
									"case":	7,
									"scores":	[-3.952428420063185]
								}, {
									"case":	8,
									"scores":	[-3.952428420063185]
								}, {
									"case":	9,
									"scores":	[-3.952428420063185]
								}, {
									"case":	10,
									"scores":	[-3.952428420063185]
								}, {
									"case":	11,
									"scores":	[-3.952428420063185]
								}, {
									"case":	12,
									"scores":	[-3.952428420063185]
								}, {
									"case":	13,
									"scores":	[-3.952428420063185]
								}, {
									"case":	14,
									"scores":	[-3.952428420063185]
								}, {
									"case":	15,
									"scores":	[-3.952428420063185]
								}, {
									"case":	16,
									"scores":	[-3.952428420063185]
								}, {
									"case":	17,
									"scores":	[-3.952428420063185]
								}, {
									"case":	18,
									"scores":	[-3.952428420063185]
								}, {
									"case":	19,
									"scores":	[-3.952428420063185]
								}, {
									"case":	20,
									"scores":	[-3.952428420063185]
								}, {
									"case":	21,
									"scores":	[-3.952428420063185]
								}, {
									"case":	22,
									"scores":	[-3.952428420063185]
								}, {
									"case":	23,
									"scores":	[-3.952428420063185]
								}, {
									"case":	24,
									"scores":	[-3.952428420063185]
								}, {
									"case":	25,
									"scores":	[-3.952428420063185]
								}, {
									"case":	26,
									"scores":	[-3.952428420063185]
								}, {
									"case":	27,
									"scores":	[-3.952428420063185]
								}, {
									"case":	28,
									"scores":	[-3.952428420063185]
								}, {
									"case":	29,
									"scores":	[-3.952428420063185]
								}, {
									"case":	30,
									"scores":	[-3.952428420063185]
								}, {
									"case":	31,
									"scores":	[-3.952428420063185]
								}, {
									"case":	32,
									"scores":	[-3.952428420063185]
								}, {
									"case":	33,
									"scores":	[-3.952428420063185]
								}, {
									"case":	34,
									"scores":	[-3.952428420063185]
								}, {
									"case":	35,
									"scores":	[-3.952428420063185]
								}, {
									"case":	36,
									"scores":	[-3.952428420063185]
								}, {
									"case":	37,
									"scores":	[-3.952428420063185]
								}, {
									"case":	38,
									"scores":	[-3.952428420063185]
								}, {
									"case":	39,
									"scores":	[-3.952428420063185]
								}, {
									"case":	40,
									"scores":	[-3.952428420063185]
								}, {
									"case":	41,
									"scores":	[-3.952428420063185]
								}, {
									"case":	42,
									"scores":	[-3.952428420063185]
								}, {
									"case":	43,
									"scores":	[-3.952428420063185]
								}, {
									"case":	44,
									"scores":	[-3.952428420063185]
								}, {
									"case":	45,
									"scores":	[-3.952428420063185]
								}, {
									"case":	46,
									"scores":	[-3.952428420063185]
								}, {
									"case":	47,
									"scores":	[-3.952428420063185]
								}, {
									"case":	48,
									"scores":	[-3.952428420063185]
								}, {
									"case":	49,
									"scores":	[-3.952428420063185]
								}, {
									"case":	50,
									"scores":	[-3.952428420063185]
								}, {
									"case":	51,
									"scores":	[-3.952428420063185]
								}, {
									"case":	52,
									"scores":	[-3.952428420063185]
								}, {
									"case":	53,
									"scores":	[-3.952428420063185]
								}, {
									"case":	54,
									"scores":	[-3.952428420063185]
								}, {
									"case":	55,
									"scores":	[-3.952428420063185]
								}, {
									"case":	56,
									"scores":	[-3.952428420063185]
								}, {
									"case":	57,
									"scores":	[-3.952428420063185]
								}, {
									"case":	58,
									"scores":	[-3.952428420063185]
								}, {
									"case":	59,
									"scores":	[-3.952428420063185]
								}, {
									"case":	60,
									"scores":	[-3.952428420063185]
								}, {
									"case":	61,
									"scores":	[-3.952428420063185]
								}, {
									"case":	62,
									"scores":	[-3.952428420063185]
								}, {
									"case":	63,
									"scores":	[-3.952428420063185]
								}, {
									"case":	64,
									"scores":	[-3.952428420063185]
								}, {
									"case":	65,
									"scores":	[-3.952428420063185]
								}, {
									"case":	66,
									"scores":	[-3.952428420063185]
								}, {
									"case":	67,
									"scores":	[-3.952428420063185]
								}, {
									"case":	68,
									"scores":	[-3.952428420063185]
								}, {
									"case":	69,
									"scores":	[-3.952428420063185]
								}, {
									"case":	70,
									"scores":	[-3.952428420063185]
								}, {
									"case":	71,
									"scores":	[-3.952428420063185]
								}, {
									"case":	72,
									"scores":	[-3.952428420063185]
								}, {
									"case":	73,
									"scores":	[-3.952428420063185]
								}, {
									"case":	74,
									"scores":	[-3.952428420063185]
								}, {
									"case":	75,
									"scores":	[-3.952428420063185]
								}, {
									"case":	76,
									"scores":	[-3.952428420063185]
								}, {
									"case":	77,
									"scores":	[-3.952428420063185]
								}, {
									"case":	78,
									"scores":	[-3.952428420063185]
								}, {
									"case":	79,
									"scores":	[-3.952428420063185]
								}, {
									"case":	80,
									"scores":	[-3.952428420063185]
								}, {
									"case":	81,
									"scores":	[-3.952428420063185]
								}, {
									"case":	82,
									"scores":	[-3.952428420063185]
								}, {
									"case":	83,
									"scores":	[-3.952428420063185]
								}, {
									"case":	84,
									"scores":	[-3.952428420063185]
								}, {
									"case":	85,
									"scores":	[-3.952428420063185]
								}, {
									"case":	86,
									"scores":	[-3.952428420063185]
								}, {
									"case":	87,
									"scores":	[-3.952428420063185]
								}, {
									"case":	88,
									"scores":	[-3.952428420063185]
								}, {
									"case":	89,
									"scores":	[-3.952428420063185]
								}, {
									"case":	90,
									"scores":	[-3.952428420063185]
								}, {
									"case":	91,
									"scores":	[-3.952428420063185]
								}, {
									"case":	92,
									"scores":	[-3.952428420063185]
								}, {
									"case":	93,
									"scores":	[-3.952428420063185]
								}, {
									"case":	94,
									"scores":	[-3.952428420063185]
								}, {
									"case":	95,
									"scores":	[-3.952428420063185]
								}, {
									"case":	96,
									"scores":	[-3.952428420063185]
								}, {
									"case":	97,
									"scores":	[-3.952428420063185]
								}, {
									"case":	98,
									"scores":	[-3.952428420063185]
								}, {
									"case":	99,
									"scores":	[-3.952428420063185]
								}, {
									"case":	100,
									"scores":	[-3.952428420063185]
								}, {
									"case":	101,
									"scores":	[-3.952428420063185]
								}, {
									"case":	102,
									"scores":	[-3.952428420063185]
								}, {
									"case":	103,
									"scores":	[-3.952428420063185]
								}, {
									"case":	104,
									"scores":	[-3.952428420063185]
								}, {
									"case":	105,
									"scores":	[-3.952428420063185]
								}, {
									"case":	106,
									"scores":	[-3.952428420063185]
								}, {
									"case":	107,
									"scores":	[-3.952428420063185]
								}, {
									"case":	108,
									"scores":	[-3.952428420063185]
								}, {
									"case":	109,
									"scores":	[-3.952428420063185]
								}, {
									"case":	110,
									"scores":	[-3.952428420063185]
								}, {
									"case":	111,
									"scores":	[-3.952428420063185]
								}, {
									"case":	112,
									"scores":	[-3.952428420063185]
								}, {
									"case":	113,
									"scores":	[-3.952428420063185]
								}, {
									"case":	114,
									"scores":	[-3.952428420063185]
								}, {
									"case":	115,
									"scores":	[-3.952428420063185]
								}, {
									"case":	116,
									"scores":	[-3.952428420063185]
								}, {
									"case":	117,
									"scores":	[-3.952428420063185]
								}, {
									"case":	118,
									"scores":	[-3.952428420063185]
								}, {
									"case":	119,
									"scores":	[-3.952428420063185]
								}, {
									"case":	120,
									"scores":	[-3.952428420063185]
								}, {
									"case":	121,
									"scores":	[-3.952428420063185]
								}, {
									"case":	122,
									"scores":	[-3.952428420063185]
								}, {
									"case":	123,
									"scores":	[-3.952428420063185]
								}, {
									"case":	124,
									"scores":	[-3.952428420063185]
								}, {
									"case":	125,
									"scores":	[-3.952428420063185]
								}, {
									"case":	126,
									"scores":	[-3.952428420063185]
								}, {
									"case":	127,
									"scores":	[-3.952428420063185]
								}, {
									"case":	128,
									"scores":	[-3.952428420063185]
								}, {
									"case":	129,
									"scores":	[-3.952428420063185]
								}, {
									"case":	130,
									"scores":	[-3.952428420063185]
								}, {
									"case":	131,
									"scores":	[-3.952428420063185]
								}, {
									"case":	132,
									"scores":	[-3.952428420063185]
								}, {
									"case":	133,
									"scores":	[-3.952428420063185]
								}, {
									"case":	134,
									"scores":	[-3.952428420063185]
								}, {
									"case":	135,
									"scores":	[-3.952428420063185]
								}, {
									"case":	136,
									"scores":	[-3.952428420063185]
								}, {
									"case":	137,
									"scores":	[-3.952428420063185]
								}, {
									"case":	138,
									"scores":	[-3.952428420063185]
								}, {
									"case":	139,
									"scores":	[-3.952428420063185]
								}, {
									"case":	140,
									"scores":	[-3.952428420063185]
								}, {
									"case":	141,
									"scores":	[-3.952428420063185]
								}, {
									"case":	142,
									"scores":	[-3.952428420063185]
								}, {
									"case":	143,
									"scores":	[-3.952428420063185]
								}, {
									"case":	144,
									"scores":	[-3.952428420063185]
								}, {
									"case":	145,
									"scores":	[-3.952428420063185]
								}, {
									"case":	146,
									"scores":	[-3.952428420063185]
								}, {
									"case":	147,
									"scores":	[-3.952428420063185]
								}, {
									"case":	148,
									"scores":	[-3.952428420063185]
								}, {
									"case":	149,
									"scores":	[-3.952428420063185]
								}, {
									"case":	150,
									"scores":	[-3.952428420063185]
								}, {
									"case":	151,
									"scores":	[-3.952428420063185]
								}, {
									"case":	152,
									"scores":	[-3.952428420063185]
								}, {
									"case":	153,
									"scores":	[-3.952428420063185]
								}, {
									"case":	154,
									"scores":	[-3.952428420063185]
								}, {
									"case":	155,
									"scores":	[-3.952428420063185]
								}, {
									"case":	156,
									"scores":	[-3.952428420063185]
								}, {
									"case":	157,
									"scores":	[-3.952428420063185]
								}, {
									"case":	158,
									"scores":	[-3.952428420063185]
								}, {
									"case":	159,
									"scores":	[-3.952428420063185]
								}, {
									"case":	160,
									"scores":	[-3.952428420063185]
								}, {
									"case":	161,
									"scores":	[-3.952428420063185]
								}, {
									"case":	162,
									"scores":	[-3.952428420063185]
								}, {
									"case":	163,
									"scores":	[-3.952428420063185]
								}, {
									"case":	164,
									"scores":	[-3.952428420063185]
								}, {
									"case":	165,
									"scores":	[-3.952428420063185]
								}, {
									"case":	166,
									"scores":	[-3.952428420063185]
								}, {
									"case":	167,
									"scores":	[-3.952428420063185]
								}, {
									"case":	168,
									"scores":	[-3.952428420063185]
								}, {
									"case":	169,
									"scores":	[-3.952428420063185]
								}, {
									"case":	170,
									"scores":	[-3.952428420063185]
								}, {
									"case":	171,
									"scores":	[-3.952428420063185]
								}, {
									"case":	172,
									"scores":	[-3.952428420063185]
								}, {
									"case":	173,
									"scores":	[-3.952428420063185]
								}, {
									"case":	174,
									"scores":	[-3.952428420063185]
								}, {
									"case":	175,
									"scores":	[-3.952428420063185]
								}, {
									"case":	176,
									"scores":	[-3.952428420063185]
								}, {
									"case":	177,
									"scores":	[-3.952428420063185]
								}, {
									"case":	178,
									"scores":	[-3.952428420063185]
								}, {
									"case":	179,
									"scores":	[-3.952428420063185]
								}, {
									"case":	180,
									"scores":	[-3.952428420063185]
								}, {
									"case":	181,
									"scores":	[-3.952428420063185]
								}, {
									"case":	182,
									"scores":	[-3.952428420063185]
								}, {
									"case":	183,
									"scores":	[-3.952428420063185]
								}, {
									"case":	184,
									"scores":	[-3.952428420063185]
								}, {
									"case":	185,
									"scores":	[-3.952428420063185]
								}, {
									"case":	186,
									"scores":	[-3.952428420063185]
								}, {
									"case":	187,
									"scores":	[-3.952428420063185]
								}, {
									"case":	188,
									"scores":	[-3.952428420063185]
								}, {
									"case":	189,
									"scores":	[-3.952428420063185]
								}, {
									"case":	190,
									"scores":	[-3.952428420063185]
								}, {
									"case":	191,
									"scores":	[-3.952428420063185]
								}, {
									"case":	192,
									"scores":	[-3.952428420063185]
								}, {
									"case":	193,
									"scores":	[-3.952428420063185]
								}, {
									"case":	194,
									"scores":	[-3.952428420063185]
								}, {
									"case":	195,
									"scores":	[-3.952428420063185]
								}, {
									"case":	196,
									"scores":	[-3.952428420063185]
								}, {
									"case":	197,
									"scores":	[-3.952428420063185]
								}, {
									"case":	198,
									"scores":	[-3.952428420063185]
								}, {
									"case":	199,
									"scores":	[-3.952428420063185]
								}, {
									"case":	200,
									"scores":	[-3.952428420063185]
								}, {
									"case":	201,
									"scores":	[-3.952428420063185]
								}, {
									"case":	202,
									"scores":	[-3.952428420063185]
								}, {
									"case":	203,
									"scores":	[-3.952428420063185]
								}, {
									"case":	204,
									"scores":	[-3.952428420063185]
								}, {
									"case":	205,
									"scores":	[-3.952428420063185]
								}, {
									"case":	206,
									"scores":	[-3.952428420063185]
								}, {
									"case":	207,
									"scores":	[-3.952428420063185]
								}, {
									"case":	208,
									"scores":	[-3.952428420063185]
								}, {
									"case":	209,
									"scores":	[-3.952428420063185]
								}, {
									"case":	210,
									"scores":	[-3.952428420063185]
								}, {
									"case":	211,
									"scores":	[-3.952428420063185]
								}, {
									"case":	212,
									"scores":	[-3.952428420063185]
								}, {
									"case":	213,
									"scores":	[-3.952428420063185]
								}, {
									"case":	214,
									"scores":	[-3.952428420063185]
								}, {
									"case":	215,
									"scores":	[-3.952428420063185]
								}, {
									"case":	216,
									"scores":	[-3.952428420063185]
								}, {
									"case":	217,
									"scores":	[-3.952428420063185]
								}, {
									"case":	218,
									"scores":	[-3.952428420063185]
								}, {
									"case":	219,
									"scores":	[-3.952428420063185]
								}, {
									"case":	220,
									"scores":	[-3.952428420063185]
								}, {
									"case":	221,
									"scores":	[-3.952428420063185]
								}, {
									"case":	222,
									"scores":	[-3.952428420063185]
								}, {
									"case":	223,
									"scores":	[-3.952428420063185]
								}, {
									"case":	224,
									"scores":	[-3.952428420063185]
								}, {
									"case":	225,
									"scores":	[-3.952428420063185]
								}, {
									"case":	226,
									"scores":	[-3.952428420063185]
								}, {
									"case":	227,
									"scores":	[-3.952428420063185]
								}, {
									"case":	228,
									"scores":	[-3.952428420063185]
								}, {
									"case":	229,
									"scores":	[-3.952428420063185]
								}, {
									"case":	230,
									"scores":	[-3.952428420063185]
								}, {
									"case":	231,
									"scores":	[-3.952428420063185]
								}, {
									"case":	232,
									"scores":	[-3.952428420063185]
								}, {
									"case":	233,
									"scores":	[-3.952428420063185]
								}, {
									"case":	234,
									"scores":	[-3.952428420063185]
								}, {
									"case":	235,
									"scores":	[-3.952428420063185]
								}, {
									"case":	236,
									"scores":	[-3.952428420063185]
								}, {
									"case":	237,
									"scores":	[-3.952428420063185]
								}, {
									"case":	238,
									"scores":	[-3.952428420063185]
								}, {
									"case":	239,
									"scores":	[-3.952428420063185]
								}, {
									"case":	240,
									"scores":	[-3.952428420063185]
								}, {
									"case":	241,
									"scores":	[-3.952428420063185]
								}, {
									"case":	242,
									"scores":	[-3.952428420063185]
								}, {
									"case":	243,
									"scores":	[-3.952428420063185]
								}, {
									"case":	244,
									"scores":	[-3.952428420063185]
								}, {
									"case":	245,
									"scores":	[-3.952428420063185]
								}, {
									"case":	246,
									"scores":	[-3.952428420063185]
								}, {
									"case":	247,
									"scores":	[-3.952428420063185]
								}, {
									"case":	248,
									"scores":	[-3.952428420063185]
								}, {
									"case":	249,
									"scores":	[-3.952428420063185]
								}, {
									"case":	250,
									"scores":	[-3.952428420063185]
								}, {
									"case":	251,
									"scores":	[-3.952428420063185]
								}, {
									"case":	252,
									"scores":	[-3.952428420063185]
								}, {
									"case":	253,
									"scores":	[-3.952428420063185]
								}, {
									"case":	254,
									"scores":	[-3.952428420063185]
								}, {
									"case":	255,
									"scores":	[-3.952428420063185]
								}, {
									"case":	256,
									"scores":	[-3.952428420063185]
								}, {
									"case":	257,
									"scores":	[-3.952428420063185]
								}, {
									"case":	258,
									"scores":	[-3.952428420063185]
								}, {
									"case":	259,
									"scores":	[-3.952428420063185]
								}, {
									"case":	260,
									"scores":	[-3.952428420063185]
								}, {
									"case":	261,
									"scores":	[-3.952428420063185]
								}, {
									"case":	262,
									"scores":	[-3.952428420063185]
								}, {
									"case":	263,
									"scores":	[-3.952428420063185]
								}, {
									"case":	264,
									"scores":	[-3.952428420063185]
								}, {
									"case":	265,
									"scores":	[-3.952428420063185]
								}, {
									"case":	266,
									"scores":	[-3.952428420063185]
								}, {
									"case":	267,
									"scores":	[-3.952428420063185]
								}, {
									"case":	268,
									"scores":	[-3.952428420063185]
								}, {
									"case":	269,
									"scores":	[-3.952428420063185]
								}, {
									"case":	270,
									"scores":	[-3.952428420063185]
								}, {
									"case":	271,
									"scores":	[-3.952428420063185]
								}, {
									"case":	272,
									"scores":	[-3.952428420063185]
								}, {
									"case":	273,
									"scores":	[-3.952428420063185]
								}, {
									"case":	274,
									"scores":	[-3.952428420063185]
								}, {
									"case":	275,
									"scores":	[-3.952428420063185]
								}, {
									"case":	276,
									"scores":	[-3.952428420063185]
								}, {
									"case":	277,
									"scores":	[-3.952428420063185]
								}, {
									"case":	278,
									"scores":	[-3.952428420063185]
								}, {
									"case":	279,
									"scores":	[-3.952428420063185]
								}, {
									"case":	280,
									"scores":	[-3.952428420063185]
								}, {
									"case":	281,
									"scores":	[-3.952428420063185]
								}, {
									"case":	282,
									"scores":	[-3.952428420063185]
								}, {
									"case":	283,
									"scores":	[-3.952428420063185]
								}, {
									"case":	284,
									"scores":	[-3.952428420063185]
								}, {
									"case":	285,
									"scores":	[-3.952428420063185]
								}, {
									"case":	286,
									"scores":	[-3.952428420063185]
								}, {
									"case":	287,
									"scores":	[-3.952428420063185]
								}, {
									"case":	288,
									"scores":	[-3.952428420063185]
								}, {
									"case":	289,
									"scores":	[-3.952428420063185]
								}, {
									"case":	290,
									"scores":	[-3.952428420063185]
								}, {
									"case":	291,
									"scores":	[-3.952428420063185]
								}, {
									"case":	292,
									"scores":	[-3.952428420063185]
								}, {
									"case":	293,
									"scores":	[-3.952428420063185]
								}, {
									"case":	294,
									"scores":	[-3.952428420063185]
								}, {
									"case":	295,
									"scores":	[-3.5562947770631848, -3.4739247290631852, -7.3854370643071849, -7.3854370643071849, -7.4044366590631849, -7.4044366590631849, -7.594559629063184, -6.496102488063185, -7.522699845063185, -8.0658600760631849, -6.9043284290631846, -6.8976267290631856, -7.6437728390631854, -7.6437728390631854, -8.4340668390631848, -6.8602023290631848, -7.4064859590631853, -7.4064859590631853, -6.8976267290631856, -6.9043284290631846, -6.8976267290631856]
								}, {
									"case":	296,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	297,
									"scores":	[-4.2434987770631851, -4.1611287290631855, -8.0726410643071844, -8.0726410643071844, -8.0916406590631844, -8.0916406590631844, -8.2817636290631835, -7.1833064880631854, -8.2099038450631845, -8.7530640760631844, -7.5915324290631849, -7.5848307290631851, -8.3309768390631849, -8.3309768390631849, -9.1212708390631843, -7.5474063290631843, -8.0936899590631857, -8.0936899590631857, -7.5848307290631851, -7.5915324290631849, -7.5848307290631851]
								}, {
									"case":	298,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	299,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	300,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	301,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	302,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	303,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	304,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	305,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	306,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	307,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	308,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	309,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	310,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	311,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	312,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	313,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	314,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	315,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	316,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	317,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	318,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	319,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	320,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	321,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}, {
									"case":	322,
									"scores":	[-6.2619447770631851, -6.1795747290631855, -10.091087064307185, -10.091087064307185, -10.110086659063185, -10.110086659063185, -10.300209629063184, -9.2017524880631854, -10.228349845063185, -10.771510076063185, -9.6099784290631849, -9.603276729063186, -10.349422839063186, -10.349422839063186, -11.139716839063185, -9.5658523290631852, -10.112135959063185, -10.112135959063185, -9.603276729063186, -9.6099784290631849, -9.603276729063186]
								}]
						}, {
							"switch":	26,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	130,
							"begin_column":	2,
							"end_line":	144,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L130\", 21, &(in), sizeof (in), &(infile), sizeof (infile), &(spp), sizeof (spp), &(photometric), sizeof (photometric), &(compression), sizeof (compression), &(jpegcolormode), sizeof (jpegcolormode), &(argv), sizeof (argv), &(optind), sizeof (optind), &(argc), sizeof (argc), &(c), sizeof (c), &(optarg), sizeof (optarg), &(rowsperstrip), sizeof (rowsperstrip), &(w), sizeof (w), &(h), sizeof (h), &(prec), sizeof (prec), &(out), sizeof (out), &(quality), sizeof (quality), &(predictor), sizeof (predictor), &(linebytes), sizeof (linebytes), &(buf), sizeof (buf), &(row), sizeof (row)))\n    switch (fgetc(in)) {\n      case '5':\n        spp = 1;\n        photometric = 1;\n        break;\n      case '6':\n        spp = 3;\n        photometric = 2;\n        if (compression == 7 && jpegcolormode == 1)\n            photometric = 6;\n        break;\n      default:\n        BadPPM(infile);\n    }\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.5159700420631843, -4.5755385940631852, -6.410239840063185, -6.410239840063185, -4.1613478200631846, -4.1613478200631846, -6.2592931230631841, -6.3317083000631849, -6.1834631400631848, -3.7842428120631846, -5.9950670400631854, -5.6462778400631848, -6.493974540063185, -6.493974540063185, -7.2485725400631855, -6.4492299400631854, -6.1972988200631853, -6.1972988200631853, -5.6462778400631848, -5.9950670400631854, -5.6462778400631848]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	25,
			"size":	1
		}, {
			"switch":	1,
			"case":	1,
			"size":	1
		}, {
			"switch":	2,
			"case":	25,
			"size":	1
		}, {
			"switch":	3,
			"case":	1,
			"size":	1
		}, {
			"switch":	4,
			"case":	295,
			"size":	21
		}, {
			"switch":	4,
			"case":	296,
			"size":	21
		}, {
			"switch":	4,
			"case":	297,
			"size":	21
		}, {
			"switch":	4,
			"case":	298,
			"size":	21
		}, {
			"switch":	4,
			"case":	299,
			"size":	21
		}, {
			"switch":	4,
			"case":	300,
			"size":	21
		}, {
			"switch":	4,
			"case":	301,
			"size":	21
		}, {
			"switch":	4,
			"case":	302,
			"size":	21
		}, {
			"switch":	4,
			"case":	303,
			"size":	21
		}, {
			"switch":	4,
			"case":	304,
			"size":	21
		}, {
			"switch":	4,
			"case":	305,
			"size":	21
		}, {
			"switch":	4,
			"case":	306,
			"size":	21
		}, {
			"switch":	4,
			"case":	307,
			"size":	21
		}, {
			"switch":	4,
			"case":	308,
			"size":	21
		}, {
			"switch":	4,
			"case":	309,
			"size":	21
		}, {
			"switch":	4,
			"case":	310,
			"size":	21
		}, {
			"switch":	4,
			"case":	311,
			"size":	21
		}, {
			"switch":	4,
			"case":	312,
			"size":	21
		}, {
			"switch":	4,
			"case":	313,
			"size":	21
		}, {
			"switch":	4,
			"case":	314,
			"size":	21
		}, {
			"switch":	4,
			"case":	315,
			"size":	21
		}, {
			"switch":	4,
			"case":	316,
			"size":	21
		}, {
			"switch":	4,
			"case":	317,
			"size":	21
		}, {
			"switch":	4,
			"case":	318,
			"size":	21
		}, {
			"switch":	4,
			"case":	319,
			"size":	21
		}, {
			"switch":	4,
			"case":	320,
			"size":	21
		}, {
			"switch":	4,
			"case":	321,
			"size":	21
		}, {
			"switch":	4,
			"case":	322,
			"size":	21
		}, {
			"switch":	5,
			"case":	1,
			"size":	21
		}, {
			"switch":	5,
			"case":	2,
			"size":	21
		}, {
			"switch":	5,
			"case":	3,
			"size":	21
		}, {
			"switch":	6,
			"case":	1,
			"size":	21
		}, {
			"switch":	6,
			"case":	2,
			"size":	21
		}, {
			"switch":	7,
			"case":	295,
			"size":	21
		}, {
			"switch":	7,
			"case":	296,
			"size":	21
		}, {
			"switch":	7,
			"case":	297,
			"size":	21
		}, {
			"switch":	7,
			"case":	298,
			"size":	21
		}, {
			"switch":	7,
			"case":	299,
			"size":	21
		}, {
			"switch":	7,
			"case":	300,
			"size":	21
		}, {
			"switch":	7,
			"case":	301,
			"size":	21
		}, {
			"switch":	7,
			"case":	302,
			"size":	21
		}, {
			"switch":	7,
			"case":	303,
			"size":	21
		}, {
			"switch":	7,
			"case":	304,
			"size":	21
		}, {
			"switch":	7,
			"case":	305,
			"size":	21
		}, {
			"switch":	7,
			"case":	306,
			"size":	21
		}, {
			"switch":	7,
			"case":	307,
			"size":	21
		}, {
			"switch":	7,
			"case":	308,
			"size":	21
		}, {
			"switch":	7,
			"case":	309,
			"size":	21
		}, {
			"switch":	7,
			"case":	310,
			"size":	21
		}, {
			"switch":	7,
			"case":	311,
			"size":	21
		}, {
			"switch":	7,
			"case":	312,
			"size":	21
		}, {
			"switch":	7,
			"case":	313,
			"size":	21
		}, {
			"switch":	7,
			"case":	314,
			"size":	21
		}, {
			"switch":	7,
			"case":	315,
			"size":	21
		}, {
			"switch":	7,
			"case":	316,
			"size":	21
		}, {
			"switch":	7,
			"case":	317,
			"size":	21
		}, {
			"switch":	7,
			"case":	318,
			"size":	21
		}, {
			"switch":	7,
			"case":	319,
			"size":	21
		}, {
			"switch":	7,
			"case":	320,
			"size":	21
		}, {
			"switch":	7,
			"case":	321,
			"size":	21
		}, {
			"switch":	7,
			"case":	322,
			"size":	21
		}, {
			"switch":	8,
			"case":	1,
			"size":	21
		}, {
			"switch":	9,
			"case":	295,
			"size":	21
		}, {
			"switch":	9,
			"case":	296,
			"size":	21
		}, {
			"switch":	9,
			"case":	297,
			"size":	21
		}, {
			"switch":	9,
			"case":	298,
			"size":	21
		}, {
			"switch":	9,
			"case":	299,
			"size":	21
		}, {
			"switch":	9,
			"case":	300,
			"size":	21
		}, {
			"switch":	9,
			"case":	301,
			"size":	21
		}, {
			"switch":	9,
			"case":	302,
			"size":	21
		}, {
			"switch":	9,
			"case":	303,
			"size":	21
		}, {
			"switch":	9,
			"case":	304,
			"size":	21
		}, {
			"switch":	9,
			"case":	305,
			"size":	21
		}, {
			"switch":	9,
			"case":	306,
			"size":	21
		}, {
			"switch":	9,
			"case":	307,
			"size":	21
		}, {
			"switch":	9,
			"case":	308,
			"size":	21
		}, {
			"switch":	9,
			"case":	309,
			"size":	21
		}, {
			"switch":	9,
			"case":	310,
			"size":	21
		}, {
			"switch":	9,
			"case":	311,
			"size":	21
		}, {
			"switch":	9,
			"case":	312,
			"size":	21
		}, {
			"switch":	9,
			"case":	313,
			"size":	21
		}, {
			"switch":	9,
			"case":	314,
			"size":	21
		}, {
			"switch":	9,
			"case":	315,
			"size":	21
		}, {
			"switch":	9,
			"case":	316,
			"size":	21
		}, {
			"switch":	9,
			"case":	317,
			"size":	21
		}, {
			"switch":	9,
			"case":	318,
			"size":	21
		}, {
			"switch":	9,
			"case":	319,
			"size":	21
		}, {
			"switch":	9,
			"case":	320,
			"size":	21
		}, {
			"switch":	9,
			"case":	321,
			"size":	21
		}, {
			"switch":	9,
			"case":	322,
			"size":	21
		}, {
			"switch":	10,
			"case":	1,
			"size":	21
		}, {
			"switch":	10,
			"case":	2,
			"size":	21
		}, {
			"switch":	10,
			"case":	3,
			"size":	21
		}, {
			"switch":	11,
			"case":	1,
			"size":	21
		}, {
			"switch":	11,
			"case":	2,
			"size":	21
		}, {
			"switch":	12,
			"case":	295,
			"size":	21
		}, {
			"switch":	12,
			"case":	296,
			"size":	21
		}, {
			"switch":	12,
			"case":	297,
			"size":	21
		}, {
			"switch":	12,
			"case":	298,
			"size":	21
		}, {
			"switch":	12,
			"case":	299,
			"size":	21
		}, {
			"switch":	12,
			"case":	300,
			"size":	21
		}, {
			"switch":	12,
			"case":	301,
			"size":	21
		}, {
			"switch":	12,
			"case":	302,
			"size":	21
		}, {
			"switch":	12,
			"case":	303,
			"size":	21
		}, {
			"switch":	12,
			"case":	304,
			"size":	21
		}, {
			"switch":	12,
			"case":	305,
			"size":	21
		}, {
			"switch":	12,
			"case":	306,
			"size":	21
		}, {
			"switch":	12,
			"case":	307,
			"size":	21
		}, {
			"switch":	12,
			"case":	308,
			"size":	21
		}, {
			"switch":	12,
			"case":	309,
			"size":	21
		}, {
			"switch":	12,
			"case":	310,
			"size":	21
		}, {
			"switch":	12,
			"case":	311,
			"size":	21
		}, {
			"switch":	12,
			"case":	312,
			"size":	21
		}, {
			"switch":	12,
			"case":	313,
			"size":	21
		}, {
			"switch":	12,
			"case":	314,
			"size":	21
		}, {
			"switch":	12,
			"case":	315,
			"size":	21
		}, {
			"switch":	12,
			"case":	316,
			"size":	21
		}, {
			"switch":	12,
			"case":	317,
			"size":	21
		}, {
			"switch":	12,
			"case":	318,
			"size":	21
		}, {
			"switch":	12,
			"case":	319,
			"size":	21
		}, {
			"switch":	12,
			"case":	320,
			"size":	21
		}, {
			"switch":	12,
			"case":	321,
			"size":	21
		}, {
			"switch":	12,
			"case":	322,
			"size":	21
		}, {
			"switch":	13,
			"case":	1,
			"size":	21
		}, {
			"switch":	13,
			"case":	2,
			"size":	21
		}, {
			"switch":	13,
			"case":	3,
			"size":	21
		}, {
			"switch":	14,
			"case":	295,
			"size":	21
		}, {
			"switch":	14,
			"case":	296,
			"size":	21
		}, {
			"switch":	14,
			"case":	297,
			"size":	21
		}, {
			"switch":	14,
			"case":	298,
			"size":	21
		}, {
			"switch":	14,
			"case":	299,
			"size":	21
		}, {
			"switch":	14,
			"case":	300,
			"size":	21
		}, {
			"switch":	14,
			"case":	301,
			"size":	21
		}, {
			"switch":	14,
			"case":	302,
			"size":	21
		}, {
			"switch":	14,
			"case":	303,
			"size":	21
		}, {
			"switch":	14,
			"case":	304,
			"size":	21
		}, {
			"switch":	14,
			"case":	305,
			"size":	21
		}, {
			"switch":	14,
			"case":	306,
			"size":	21
		}, {
			"switch":	14,
			"case":	307,
			"size":	21
		}, {
			"switch":	14,
			"case":	308,
			"size":	21
		}, {
			"switch":	14,
			"case":	309,
			"size":	21
		}, {
			"switch":	14,
			"case":	310,
			"size":	21
		}, {
			"switch":	14,
			"case":	311,
			"size":	21
		}, {
			"switch":	14,
			"case":	312,
			"size":	21
		}, {
			"switch":	14,
			"case":	313,
			"size":	21
		}, {
			"switch":	14,
			"case":	314,
			"size":	21
		}, {
			"switch":	14,
			"case":	315,
			"size":	21
		}, {
			"switch":	14,
			"case":	316,
			"size":	21
		}, {
			"switch":	14,
			"case":	317,
			"size":	21
		}, {
			"switch":	14,
			"case":	318,
			"size":	21
		}, {
			"switch":	14,
			"case":	319,
			"size":	21
		}, {
			"switch":	14,
			"case":	320,
			"size":	21
		}, {
			"switch":	14,
			"case":	321,
			"size":	21
		}, {
			"switch":	14,
			"case":	322,
			"size":	21
		}, {
			"switch":	15,
			"case":	1,
			"size":	21
		}, {
			"switch":	16,
			"case":	295,
			"size":	21
		}, {
			"switch":	16,
			"case":	296,
			"size":	21
		}, {
			"switch":	16,
			"case":	297,
			"size":	21
		}, {
			"switch":	16,
			"case":	298,
			"size":	21
		}, {
			"switch":	16,
			"case":	299,
			"size":	21
		}, {
			"switch":	16,
			"case":	300,
			"size":	21
		}, {
			"switch":	16,
			"case":	301,
			"size":	21
		}, {
			"switch":	16,
			"case":	302,
			"size":	21
		}, {
			"switch":	16,
			"case":	303,
			"size":	21
		}, {
			"switch":	16,
			"case":	304,
			"size":	21
		}, {
			"switch":	16,
			"case":	305,
			"size":	21
		}, {
			"switch":	16,
			"case":	306,
			"size":	21
		}, {
			"switch":	16,
			"case":	307,
			"size":	21
		}, {
			"switch":	16,
			"case":	308,
			"size":	21
		}, {
			"switch":	16,
			"case":	309,
			"size":	21
		}, {
			"switch":	16,
			"case":	310,
			"size":	21
		}, {
			"switch":	16,
			"case":	311,
			"size":	21
		}, {
			"switch":	16,
			"case":	312,
			"size":	21
		}, {
			"switch":	16,
			"case":	313,
			"size":	21
		}, {
			"switch":	16,
			"case":	314,
			"size":	21
		}, {
			"switch":	16,
			"case":	315,
			"size":	21
		}, {
			"switch":	16,
			"case":	316,
			"size":	21
		}, {
			"switch":	16,
			"case":	317,
			"size":	21
		}, {
			"switch":	16,
			"case":	318,
			"size":	21
		}, {
			"switch":	16,
			"case":	319,
			"size":	21
		}, {
			"switch":	16,
			"case":	320,
			"size":	21
		}, {
			"switch":	16,
			"case":	321,
			"size":	21
		}, {
			"switch":	16,
			"case":	322,
			"size":	21
		}, {
			"switch":	17,
			"case":	1,
			"size":	21
		}, {
			"switch":	18,
			"case":	295,
			"size":	21
		}, {
			"switch":	18,
			"case":	296,
			"size":	21
		}, {
			"switch":	18,
			"case":	297,
			"size":	21
		}, {
			"switch":	18,
			"case":	298,
			"size":	21
		}, {
			"switch":	18,
			"case":	299,
			"size":	21
		}, {
			"switch":	18,
			"case":	300,
			"size":	21
		}, {
			"switch":	18,
			"case":	301,
			"size":	21
		}, {
			"switch":	18,
			"case":	302,
			"size":	21
		}, {
			"switch":	18,
			"case":	303,
			"size":	21
		}, {
			"switch":	18,
			"case":	304,
			"size":	21
		}, {
			"switch":	18,
			"case":	305,
			"size":	21
		}, {
			"switch":	18,
			"case":	306,
			"size":	21
		}, {
			"switch":	18,
			"case":	307,
			"size":	21
		}, {
			"switch":	18,
			"case":	308,
			"size":	21
		}, {
			"switch":	18,
			"case":	309,
			"size":	21
		}, {
			"switch":	18,
			"case":	310,
			"size":	21
		}, {
			"switch":	18,
			"case":	311,
			"size":	21
		}, {
			"switch":	18,
			"case":	312,
			"size":	21
		}, {
			"switch":	18,
			"case":	313,
			"size":	21
		}, {
			"switch":	18,
			"case":	314,
			"size":	21
		}, {
			"switch":	18,
			"case":	315,
			"size":	21
		}, {
			"switch":	18,
			"case":	316,
			"size":	21
		}, {
			"switch":	18,
			"case":	317,
			"size":	21
		}, {
			"switch":	18,
			"case":	318,
			"size":	21
		}, {
			"switch":	18,
			"case":	319,
			"size":	21
		}, {
			"switch":	18,
			"case":	320,
			"size":	21
		}, {
			"switch":	18,
			"case":	321,
			"size":	21
		}, {
			"switch":	18,
			"case":	322,
			"size":	21
		}, {
			"switch":	19,
			"case":	1,
			"size":	21
		}, {
			"switch":	19,
			"case":	2,
			"size":	21
		}, {
			"switch":	19,
			"case":	3,
			"size":	21
		}, {
			"switch":	20,
			"case":	1,
			"size":	21
		}, {
			"switch":	20,
			"case":	2,
			"size":	21
		}, {
			"switch":	21,
			"case":	1,
			"size":	21
		}, {
			"switch":	21,
			"case":	2,
			"size":	21
		}, {
			"switch":	22,
			"case":	295,
			"size":	21
		}, {
			"switch":	22,
			"case":	296,
			"size":	21
		}, {
			"switch":	22,
			"case":	297,
			"size":	21
		}, {
			"switch":	22,
			"case":	298,
			"size":	21
		}, {
			"switch":	22,
			"case":	299,
			"size":	21
		}, {
			"switch":	22,
			"case":	300,
			"size":	21
		}, {
			"switch":	22,
			"case":	301,
			"size":	21
		}, {
			"switch":	22,
			"case":	302,
			"size":	21
		}, {
			"switch":	22,
			"case":	303,
			"size":	21
		}, {
			"switch":	22,
			"case":	304,
			"size":	21
		}, {
			"switch":	22,
			"case":	305,
			"size":	21
		}, {
			"switch":	22,
			"case":	306,
			"size":	21
		}, {
			"switch":	22,
			"case":	307,
			"size":	21
		}, {
			"switch":	22,
			"case":	308,
			"size":	21
		}, {
			"switch":	22,
			"case":	309,
			"size":	21
		}, {
			"switch":	22,
			"case":	310,
			"size":	21
		}, {
			"switch":	22,
			"case":	311,
			"size":	21
		}, {
			"switch":	22,
			"case":	312,
			"size":	21
		}, {
			"switch":	22,
			"case":	313,
			"size":	21
		}, {
			"switch":	22,
			"case":	314,
			"size":	21
		}, {
			"switch":	22,
			"case":	315,
			"size":	21
		}, {
			"switch":	22,
			"case":	316,
			"size":	21
		}, {
			"switch":	22,
			"case":	317,
			"size":	21
		}, {
			"switch":	22,
			"case":	318,
			"size":	21
		}, {
			"switch":	22,
			"case":	319,
			"size":	21
		}, {
			"switch":	22,
			"case":	320,
			"size":	21
		}, {
			"switch":	22,
			"case":	321,
			"size":	21
		}, {
			"switch":	22,
			"case":	322,
			"size":	21
		}, {
			"switch":	23,
			"case":	1,
			"size":	21
		}, {
			"switch":	23,
			"case":	2,
			"size":	21
		}, {
			"switch":	23,
			"case":	25,
			"size":	21
		}, {
			"switch":	24,
			"case":	1,
			"size":	21
		}, {
			"switch":	24,
			"case":	2,
			"size":	21
		}, {
			"switch":	25,
			"case":	295,
			"size":	21
		}, {
			"switch":	25,
			"case":	296,
			"size":	21
		}, {
			"switch":	25,
			"case":	297,
			"size":	21
		}, {
			"switch":	25,
			"case":	298,
			"size":	21
		}, {
			"switch":	25,
			"case":	299,
			"size":	21
		}, {
			"switch":	25,
			"case":	300,
			"size":	21
		}, {
			"switch":	25,
			"case":	301,
			"size":	21
		}, {
			"switch":	25,
			"case":	302,
			"size":	21
		}, {
			"switch":	25,
			"case":	303,
			"size":	21
		}, {
			"switch":	25,
			"case":	304,
			"size":	21
		}, {
			"switch":	25,
			"case":	305,
			"size":	21
		}, {
			"switch":	25,
			"case":	306,
			"size":	21
		}, {
			"switch":	25,
			"case":	307,
			"size":	21
		}, {
			"switch":	25,
			"case":	308,
			"size":	21
		}, {
			"switch":	25,
			"case":	309,
			"size":	21
		}, {
			"switch":	25,
			"case":	310,
			"size":	21
		}, {
			"switch":	25,
			"case":	311,
			"size":	21
		}, {
			"switch":	25,
			"case":	312,
			"size":	21
		}, {
			"switch":	25,
			"case":	313,
			"size":	21
		}, {
			"switch":	25,
			"case":	314,
			"size":	21
		}, {
			"switch":	25,
			"case":	315,
			"size":	21
		}, {
			"switch":	25,
			"case":	316,
			"size":	21
		}, {
			"switch":	25,
			"case":	317,
			"size":	21
		}, {
			"switch":	25,
			"case":	318,
			"size":	21
		}, {
			"switch":	25,
			"case":	319,
			"size":	21
		}, {
			"switch":	25,
			"case":	320,
			"size":	21
		}, {
			"switch":	25,
			"case":	321,
			"size":	21
		}, {
			"switch":	25,
			"case":	322,
			"size":	21
		}, {
			"switch":	26,
			"case":	1,
			"size":	21
		}],
	"func_locations":	[{
			"file":	"tools/ppm2tiff.c",
			"functions":	[{
					"function":	"BadPPM",
					"begin":	62,
					"end":	67
				}, {
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"main",
					"begin":	69,
					"end":	218
				}, {
					"function":	"processCompressOptions",
					"begin":	220,
					"end":	255
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"tolower",
					"begin":	206,
					"end":	210
				}, {
					"function":	"toupper",
					"begin":	212,
					"end":	216
				}, {
					"function":	"usage",
					"begin":	278,
					"end":	289
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}]
		}]
}
