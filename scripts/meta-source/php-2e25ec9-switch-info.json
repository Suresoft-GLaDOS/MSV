{
	"switch_num":	84,
	"case_num":	[165, 50, 2, 166, 70, 165, 14, 165, 3, 165, 138, 2, 165, 1, 417, 12, 415, 3, 423, 55, 424, 11, 424, 20, 423, 56, 424, 11, 423, 57, 423, 4, 2, 2, 410, 1, 105, 3, 2, 106, 3, 105, 15, 105, 44, 2, 105, 17, 105, 17, 105, 17, 105, 17, 107, 1, 214, 6, 452, 8, 447, 226, 447, 50, 447, 1, 2, 448, 56, 447, 50, 448, 56, 450, 3, 447, 18, 449, 8, 2, 2, 447, 22, 2],
	"switch_cluster":	[[2, 4, 6, 10, 11, 13, 19, 21, 23, 25, 27, 29, 31, 32, 33, 35, 38, 42, 44, 45, 47, 49, 51, 53, 55, 61, 65, 66, 68, 70, 72, 76, 79, 80, 82, 83], [1, 8, 15, 17, 37, 40, 57, 59, 63, 74, 78], [0, 3, 5, 7, 9, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 39, 41, 43, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 67, 69, 71, 73, 75, 77, 81], []],
	"priority":	[{
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	428,
			"primary_score":	999626,
			"second_score":	3110
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	429,
			"primary_score":	999626,
			"second_score":	3108
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	479,
			"primary_score":	999626,
			"second_score":	3111
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	485,
			"primary_score":	999626,
			"second_score":	2
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	575,
			"primary_score":	999626,
			"second_score":	139946
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	576,
			"primary_score":	999626,
			"second_score":	139945
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	578,
			"primary_score":	999626,
			"second_score":	139944
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	579,
			"primary_score":	999626,
			"second_score":	139743
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	580,
			"primary_score":	999626,
			"second_score":	139742
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	583,
			"primary_score":	999626,
			"second_score":	139741
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	590,
			"primary_score":	999626,
			"second_score":	3107
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	592,
			"primary_score":	999626,
			"second_score":	3106
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	593,
			"primary_score":	999626,
			"second_score":	6
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	594,
			"primary_score":	999626,
			"second_score":	5
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	595,
			"primary_score":	999626,
			"second_score":	214
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	596,
			"primary_score":	999626,
			"second_score":	213
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	597,
			"primary_score":	999626,
			"second_score":	212
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	599,
			"primary_score":	999626,
			"second_score":	4
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	601,
			"primary_score":	999626,
			"second_score":	3
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	685,
			"primary_score":	999626,
			"second_score":	141031
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	688,
			"primary_score":	999626,
			"second_score":	141016
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	689,
			"primary_score":	999626,
			"second_score":	141015
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	691,
			"primary_score":	999626,
			"second_score":	141014
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	692,
			"primary_score":	999626,
			"second_score":	121991
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	697,
			"primary_score":	999626,
			"second_score":	121990
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	699,
			"primary_score":	999626,
			"second_score":	121989
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	735,
			"primary_score":	999626,
			"second_score":	141052
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	736,
			"primary_score":	999626,
			"second_score":	141051
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	742,
			"primary_score":	999626,
			"second_score":	141050
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	744,
			"primary_score":	999626,
			"second_score":	141049
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	745,
			"primary_score":	999626,
			"second_score":	141048
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	746,
			"primary_score":	999626,
			"second_score":	141047
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	748,
			"primary_score":	999626,
			"second_score":	141046
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	749,
			"primary_score":	999626,
			"second_score":	141045
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	753,
			"primary_score":	999626,
			"second_score":	141044
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	754,
			"primary_score":	999626,
			"second_score":	141043
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	755,
			"primary_score":	999626,
			"second_score":	141039
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	758,
			"primary_score":	999626,
			"second_score":	141038
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	764,
			"primary_score":	999626,
			"second_score":	141037
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	802,
			"primary_score":	999626,
			"second_score":	141036
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	804,
			"primary_score":	999626,
			"second_score":	141035
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	806,
			"primary_score":	999626,
			"second_score":	141034
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	808,
			"primary_score":	999626,
			"second_score":	141033
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	809,
			"primary_score":	999626,
			"second_score":	142368
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	811,
			"primary_score":	999626,
			"second_score":	141032
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	812,
			"primary_score":	999626,
			"second_score":	121988
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	816,
			"primary_score":	999626,
			"second_score":	121987
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	819,
			"primary_score":	999626,
			"second_score":	121986
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	820,
			"primary_score":	999626,
			"second_score":	121985
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1123,
			"primary_score":	999626,
			"second_score":	142415
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1124,
			"primary_score":	999626,
			"second_score":	142414
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1125,
			"primary_score":	999626,
			"second_score":	142413
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1126,
			"primary_score":	999626,
			"second_score":	142412
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1127,
			"primary_score":	999626,
			"second_score":	142411
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1128,
			"primary_score":	999626,
			"second_score":	142410
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1129,
			"primary_score":	999626,
			"second_score":	142409
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1130,
			"primary_score":	999626,
			"second_score":	142408
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1132,
			"primary_score":	999626,
			"second_score":	142407
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1152,
			"primary_score":	999626,
			"second_score":	142406
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1203,
			"primary_score":	999626,
			"second_score":	142405
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1255,
			"primary_score":	999626,
			"second_score":	142404
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1256,
			"primary_score":	999626,
			"second_score":	142403
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1257,
			"primary_score":	999626,
			"second_score":	142402
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1259,
			"primary_score":	999626,
			"second_score":	139725
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1264,
			"primary_score":	999626,
			"second_score":	139724
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1267,
			"primary_score":	999626,
			"second_score":	139723
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1273,
			"primary_score":	999626,
			"second_score":	139722
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1278,
			"primary_score":	999626,
			"second_score":	139721
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1303,
			"primary_score":	999626,
			"second_score":	139720
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1304,
			"primary_score":	999626,
			"second_score":	139719
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1305,
			"primary_score":	999626,
			"second_score":	139718
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1311,
			"primary_score":	999626,
			"second_score":	139717
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1313,
			"primary_score":	999626,
			"second_score":	139716
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1314,
			"primary_score":	999626,
			"second_score":	139715
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1320,
			"primary_score":	999626,
			"second_score":	139714
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1897,
			"primary_score":	999626,
			"second_score":	122207
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1898,
			"primary_score":	999626,
			"second_score":	122206
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1901,
			"primary_score":	999626,
			"second_score":	122205
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1902,
			"primary_score":	999626,
			"second_score":	122204
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1903,
			"primary_score":	999626,
			"second_score":	122203
		}, {
			"file":	"TSRM/tsrm_virtual_cwd.c",
			"line":	1904,
			"primary_score":	999626,
			"second_score":	122202
		}, {
			"file":	"Zend/zend.c",
			"line":	227,
			"primary_score":	999626,
			"second_score":	119963
		}, {
			"file":	"Zend/zend.c",
			"line":	228,
			"primary_score":	999626,
			"second_score":	119962
		}, {
			"file":	"Zend/zend.c",
			"line":	229,
			"primary_score":	999626,
			"second_score":	119961
		}, {
			"file":	"Zend/zend.c",
			"line":	305,
			"primary_score":	999626,
			"second_score":	119967
		}, {
			"file":	"Zend/zend.c",
			"line":	311,
			"primary_score":	999626,
			"second_score":	119966
		}, {
			"file":	"Zend/zend.c",
			"line":	312,
			"primary_score":	999626,
			"second_score":	119965
		}, {
			"file":	"Zend/zend.c",
			"line":	314,
			"primary_score":	999626,
			"second_score":	119964
		}, {
			"file":	"Zend/zend.c",
			"line":	315,
			"primary_score":	999626,
			"second_score":	119960
		}, {
			"file":	"Zend/zend.c",
			"line":	318,
			"primary_score":	999626,
			"second_score":	119959
		}, {
			"file":	"Zend/zend.c",
			"line":	319,
			"primary_score":	999626,
			"second_score":	119958
		}, {
			"file":	"Zend/zend.c",
			"line":	322,
			"primary_score":	999626,
			"second_score":	119957
		}, {
			"file":	"Zend/zend.c",
			"line":	324,
			"primary_score":	999626,
			"second_score":	121617
		}, {
			"file":	"Zend/zend.c",
			"line":	325,
			"primary_score":	999626,
			"second_score":	121566
		}, {
			"file":	"Zend/zend.c",
			"line":	328,
			"primary_score":	999626,
			"second_score":	121565
		}, {
			"file":	"Zend/zend.c",
			"line":	797,
			"primary_score":	999626,
			"second_score":	103768
		}, {
			"file":	"Zend/zend.c",
			"line":	798,
			"primary_score":	999626,
			"second_score":	103760
		}, {
			"file":	"Zend/zend.c",
			"line":	800,
			"primary_score":	999626,
			"second_score":	47438
		}, {
			"file":	"Zend/zend.c",
			"line":	801,
			"primary_score":	999626,
			"second_score":	47419
		}, {
			"file":	"Zend/zend.c",
			"line":	803,
			"primary_score":	999626,
			"second_score":	14803
		}, {
			"file":	"Zend/zend.c",
			"line":	804,
			"primary_score":	999626,
			"second_score":	14740
		}, {
			"file":	"Zend/zend.c",
			"line":	806,
			"primary_score":	999626,
			"second_score":	14739
		}, {
			"file":	"Zend/zend.c",
			"line":	807,
			"primary_score":	999626,
			"second_score":	14731
		}, {
			"file":	"Zend/zend.c",
			"line":	809,
			"primary_score":	999626,
			"second_score":	14730
		}, {
			"file":	"Zend/zend.c",
			"line":	810,
			"primary_score":	999626,
			"second_score":	14729
		}, {
			"file":	"Zend/zend.c",
			"line":	812,
			"primary_score":	999626,
			"second_score":	14728
		}, {
			"file":	"Zend/zend.c",
			"line":	813,
			"primary_score":	999626,
			"second_score":	6271
		}, {
			"file":	"Zend/zend.c",
			"line":	814,
			"primary_score":	999626,
			"second_score":	6270
		}, {
			"file":	"Zend/zend.c",
			"line":	822,
			"primary_score":	999626,
			"second_score":	6214
		}, {
			"file":	"Zend/zend.c",
			"line":	824,
			"primary_score":	999626,
			"second_score":	6114
		}, {
			"file":	"Zend/zend.c",
			"line":	898,
			"primary_score":	999626,
			"second_score":	119479
		}, {
			"file":	"Zend/zend.c",
			"line":	899,
			"primary_score":	999626,
			"second_score":	119473
		}, {
			"file":	"Zend/zend.c",
			"line":	900,
			"primary_score":	999626,
			"second_score":	119394
		}, {
			"file":	"Zend/zend.c",
			"line":	907,
			"primary_score":	999626,
			"second_score":	118564
		}, {
			"file":	"Zend/zend.c",
			"line":	908,
			"primary_score":	999626,
			"second_score":	118563
		}, {
			"file":	"Zend/zend.c",
			"line":	910,
			"primary_score":	999626,
			"second_score":	118562
		}, {
			"file":	"Zend/zend.c",
			"line":	911,
			"primary_score":	999626,
			"second_score":	118556
		}, {
			"file":	"Zend/zend.c",
			"line":	912,
			"primary_score":	999626,
			"second_score":	118546
		}, {
			"file":	"Zend/zend.c",
			"line":	915,
			"primary_score":	999626,
			"second_score":	118544
		}, {
			"file":	"Zend/zend.c",
			"line":	917,
			"primary_score":	999626,
			"second_score":	113909
		}, {
			"file":	"Zend/zend.c",
			"line":	918,
			"primary_score":	999626,
			"second_score":	113903
		}, {
			"file":	"Zend/zend.c",
			"line":	919,
			"primary_score":	999626,
			"second_score":	113754
		}, {
			"file":	"Zend/zend.c",
			"line":	921,
			"primary_score":	999626,
			"second_score":	113752
		}, {
			"file":	"Zend/zend.c",
			"line":	924,
			"primary_score":	999626,
			"second_score":	113725
		}, {
			"file":	"Zend/zend.c",
			"line":	925,
			"primary_score":	999626,
			"second_score":	113724
		}, {
			"file":	"Zend/zend.c",
			"line":	943,
			"primary_score":	999626,
			"second_score":	113720
		}, {
			"file":	"Zend/zend.c",
			"line":	944,
			"primary_score":	999626,
			"second_score":	113714
		}, {
			"file":	"Zend/zend.c",
			"line":	945,
			"primary_score":	999626,
			"second_score":	113711
		}, {
			"file":	"Zend/zend.c",
			"line":	1200,
			"primary_score":	999626,
			"second_score":	119527
		}, {
			"file":	"Zend/zend.c",
			"line":	1201,
			"primary_score":	999626,
			"second_score":	119526
		}, {
			"file":	"Zend/zend.c",
			"line":	1202,
			"primary_score":	999626,
			"second_score":	119525
		}, {
			"file":	"Zend/zend.c",
			"line":	1205,
			"primary_score":	999626,
			"second_score":	133790
		}, {
			"file":	"Zend/zend.c",
			"line":	1206,
			"primary_score":	999626,
			"second_score":	133789
		}, {
			"file":	"Zend/zend.c",
			"line":	1207,
			"primary_score":	999626,
			"second_score":	133788
		}, {
			"file":	"Zend/zend.c",
			"line":	1209,
			"primary_score":	999626,
			"second_score":	133667
		}, {
			"file":	"Zend/zend.c",
			"line":	1210,
			"primary_score":	999626,
			"second_score":	133588
		}, {
			"file":	"Zend/zend.c",
			"line":	1211,
			"primary_score":	999626,
			"second_score":	133587
		}, {
			"file":	"Zend/zend.c",
			"line":	1212,
			"primary_score":	999626,
			"second_score":	133586
		}, {
			"file":	"Zend/zend.c",
			"line":	1213,
			"primary_score":	999626,
			"second_score":	119903
		}, {
			"file":	"Zend/zend.c",
			"line":	1214,
			"primary_score":	999626,
			"second_score":	119901
		}, {
			"file":	"Zend/zend.c",
			"line":	1239,
			"primary_score":	999626,
			"second_score":	119900
		}, {
			"file":	"Zend/zend.c",
			"line":	1240,
			"primary_score":	999626,
			"second_score":	119546
		}, {
			"file":	"Zend/zend.c",
			"line":	1248,
			"primary_score":	999626,
			"second_score":	119524
		}, {
			"file":	"Zend/zend.c",
			"line":	1249,
			"primary_score":	999626,
			"second_score":	119523
		}, {
			"file":	"Zend/zend.c",
			"line":	1250,
			"primary_score":	999626,
			"second_score":	119522
		}, {
			"file":	"Zend/zend.c",
			"line":	1252,
			"primary_score":	999626,
			"second_score":	119521
		}, {
			"file":	"Zend/zend.c",
			"line":	1282,
			"primary_score":	999626,
			"second_score":	113822
		}, {
			"file":	"Zend/zend.h",
			"line":	379,
			"primary_score":	999626,
			"second_score":	15279
		}, {
			"file":	"Zend/zend.h",
			"line":	383,
			"primary_score":	999626,
			"second_score":	120084
		}, {
			"file":	"Zend/zend.h",
			"line":	387,
			"primary_score":	999626,
			"second_score":	125316
		}, {
			"file":	"Zend/zend.h",
			"line":	391,
			"primary_score":	999626,
			"second_score":	15281
		}, {
			"file":	"Zend/zend.h",
			"line":	395,
			"primary_score":	999626,
			"second_score":	123413
		}, {
			"file":	"Zend/zend.h",
			"line":	399,
			"primary_score":	999626,
			"second_score":	134024
		}, {
			"file":	"Zend/zend.h",
			"line":	403,
			"primary_score":	999626,
			"second_score":	17638
		}, {
			"file":	"Zend/zend_API.c",
			"line":	241,
			"primary_score":	999873,
			"second_score":	4
		}, {
			"file":	"Zend/zend_API.c",
			"line":	242,
			"primary_score":	999873,
			"second_score":	3
		}, {
			"file":	"Zend/zend_API.c",
			"line":	307,
			"primary_score":	999626,
			"second_score":	123102
		}, {
			"file":	"Zend/zend_API.c",
			"line":	308,
			"primary_score":	999626,
			"second_score":	123101
		}, {
			"file":	"Zend/zend_API.c",
			"line":	309,
			"primary_score":	999626,
			"second_score":	123100
		}, {
			"file":	"Zend/zend_API.c",
			"line":	312,
			"primary_score":	999626,
			"second_score":	123099
		}, {
			"file":	"Zend/zend_API.c",
			"line":	313,
			"primary_score":	999626,
			"second_score":	123098
		}, {
			"file":	"Zend/zend_API.c",
			"line":	315,
			"primary_score":	999626,
			"second_score":	123097
		}, {
			"file":	"Zend/zend_API.c",
			"line":	320,
			"primary_score":	999626,
			"second_score":	123096
		}, {
			"file":	"Zend/zend_API.c",
			"line":	325,
			"primary_score":	999626,
			"second_score":	123095
		}, {
			"file":	"Zend/zend_API.c",
			"line":	416,
			"primary_score":	999626,
			"second_score":	121350
		}, {
			"file":	"Zend/zend_API.c",
			"line":	417,
			"primary_score":	999626,
			"second_score":	121349
		}, {
			"file":	"Zend/zend_API.c",
			"line":	418,
			"primary_score":	999626,
			"second_score":	121348
		}, {
			"file":	"Zend/zend_API.c",
			"line":	431,
			"primary_score":	999626,
			"second_score":	122269
		}, {
			"file":	"Zend/zend_API.c",
			"line":	432,
			"primary_score":	999626,
			"second_score":	121346
		}, {
			"file":	"Zend/zend_API.c",
			"line":	438,
			"primary_score":	999626,
			"second_score":	121344
		}, {
			"file":	"Zend/zend_API.c",
			"line":	439,
			"primary_score":	999626,
			"second_score":	121343
		}, {
			"file":	"Zend/zend_API.c",
			"line":	440,
			"primary_score":	999626,
			"second_score":	121342
		}, {
			"file":	"Zend/zend_API.c",
			"line":	453,
			"primary_score":	999626,
			"second_score":	121341
		}, {
			"file":	"Zend/zend_API.c",
			"line":	643,
			"primary_score":	999626,
			"second_score":	123094
		}, {
			"file":	"Zend/zend_API.c",
			"line":	644,
			"primary_score":	999626,
			"second_score":	123093
		}, {
			"file":	"Zend/zend_API.c",
			"line":	647,
			"primary_score":	999626,
			"second_score":	123092
		}, {
			"file":	"Zend/zend_API.c",
			"line":	650,
			"primary_score":	999626,
			"second_score":	123091
		}, {
			"file":	"Zend/zend_API.c",
			"line":	656,
			"primary_score":	999626,
			"second_score":	123090
		}, {
			"file":	"Zend/zend_API.c",
			"line":	658,
			"primary_score":	999626,
			"second_score":	123089
		}, {
			"file":	"Zend/zend_API.c",
			"line":	664,
			"primary_score":	999626,
			"second_score":	123105
		}, {
			"file":	"Zend/zend_API.c",
			"line":	665,
			"primary_score":	999626,
			"second_score":	123104
		}, {
			"file":	"Zend/zend_API.c",
			"line":	667,
			"primary_score":	999626,
			"second_score":	123103
		}, {
			"file":	"Zend/zend_API.c",
			"line":	668,
			"primary_score":	999626,
			"second_score":	123088
		}, {
			"file":	"Zend/zend_API.c",
			"line":	688,
			"primary_score":	999626,
			"second_score":	123087
		}, {
			"file":	"Zend/zend_API.c",
			"line":	694,
			"primary_score":	999626,
			"second_score":	123165
		}, {
			"file":	"Zend/zend_API.c",
			"line":	695,
			"primary_score":	999626,
			"second_score":	123164
		}, {
			"file":	"Zend/zend_API.c",
			"line":	696,
			"primary_score":	999626,
			"second_score":	123163
		}, {
			"file":	"Zend/zend_API.c",
			"line":	697,
			"primary_score":	999626,
			"second_score":	123162
		}, {
			"file":	"Zend/zend_API.c",
			"line":	698,
			"primary_score":	999626,
			"second_score":	123161
		}, {
			"file":	"Zend/zend_API.c",
			"line":	699,
			"primary_score":	999626,
			"second_score":	123160
		}, {
			"file":	"Zend/zend_API.c",
			"line":	700,
			"primary_score":	999626,
			"second_score":	123159
		}, {
			"file":	"Zend/zend_API.c",
			"line":	701,
			"primary_score":	999626,
			"second_score":	123158
		}, {
			"file":	"Zend/zend_API.c",
			"line":	702,
			"primary_score":	999626,
			"second_score":	123157
		}, {
			"file":	"Zend/zend_API.c",
			"line":	703,
			"primary_score":	999626,
			"second_score":	123156
		}, {
			"file":	"Zend/zend_API.c",
			"line":	704,
			"primary_score":	999626,
			"second_score":	123155
		}, {
			"file":	"Zend/zend_API.c",
			"line":	706,
			"primary_score":	999626,
			"second_score":	123154
		}, {
			"file":	"Zend/zend_API.c",
			"line":	707,
			"primary_score":	999626,
			"second_score":	123147
		}, {
			"file":	"Zend/zend_API.c",
			"line":	708,
			"primary_score":	999626,
			"second_score":	123146
		}, {
			"file":	"Zend/zend_API.c",
			"line":	718,
			"primary_score":	999626,
			"second_score":	123145
		}, {
			"file":	"Zend/zend_API.c",
			"line":	722,
			"primary_score":	999626,
			"second_score":	123148
		}, {
			"file":	"Zend/zend_API.c",
			"line":	764,
			"primary_score":	999626,
			"second_score":	123144
		}, {
			"file":	"Zend/zend_API.c",
			"line":	765,
			"primary_score":	999626,
			"second_score":	120754
		}, {
			"file":	"Zend/zend_API.c",
			"line":	768,
			"primary_score":	999626,
			"second_score":	123143
		}, {
			"file":	"Zend/zend_API.c",
			"line":	774,
			"primary_score":	999626,
			"second_score":	123142
		}, {
			"file":	"Zend/zend_API.c",
			"line":	790,
			"primary_score":	999626,
			"second_score":	123141
		}, {
			"file":	"Zend/zend_API.c",
			"line":	792,
			"primary_score":	999626,
			"second_score":	123139
		}, {
			"file":	"Zend/zend_API.c",
			"line":	798,
			"primary_score":	999626,
			"second_score":	123138
		}, {
			"file":	"Zend/zend_API.c",
			"line":	799,
			"primary_score":	999626,
			"second_score":	123137
		}, {
			"file":	"Zend/zend_API.c",
			"line":	800,
			"primary_score":	999626,
			"second_score":	123111
		}, {
			"file":	"Zend/zend_API.c",
			"line":	801,
			"primary_score":	999626,
			"second_score":	123110
		}, {
			"file":	"Zend/zend_API.c",
			"line":	804,
			"primary_score":	999626,
			"second_score":	123109
		}, {
			"file":	"Zend/zend_API.c",
			"line":	834,
			"primary_score":	999626,
			"second_score":	123108
		}, {
			"file":	"Zend/zend_API.c",
			"line":	836,
			"primary_score":	999626,
			"second_score":	123106
		}, {
			"file":	"Zend/zend_API.c",
			"line":	844,
			"primary_score":	999626,
			"second_score":	123086
		}, {
			"file":	"Zend/zend_API.c",
			"line":	847,
			"primary_score":	999626,
			"second_score":	123085
		}, {
			"file":	"Zend/zend_API.c",
			"line":	881,
			"primary_score":	999626,
			"second_score":	123173
		}, {
			"file":	"Zend/zend_API.c",
			"line":	882,
			"primary_score":	999626,
			"second_score":	123172
		}, {
			"file":	"Zend/zend_API.c",
			"line":	884,
			"primary_score":	999626,
			"second_score":	123171
		}, {
			"file":	"Zend/zend_API.c",
			"line":	886,
			"primary_score":	999626,
			"second_score":	123167
		}, {
			"file":	"Zend/zend_API.c",
			"line":	887,
			"primary_score":	999626,
			"second_score":	123166
		}, {
			"file":	"Zend/zend_API.c",
			"line":	888,
			"primary_score":	999626,
			"second_score":	123084
		}, {
			"file":	"Zend/zend_API.c",
			"line":	890,
			"primary_score":	999626,
			"second_score":	123083
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1018,
			"primary_score":	999838,
			"second_score":	1251
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1019,
			"primary_score":	999838,
			"second_score":	1250
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1020,
			"primary_score":	999838,
			"second_score":	1249
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1021,
			"primary_score":	999838,
			"second_score":	1248
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1023,
			"primary_score":	999838,
			"second_score":	1247
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1024,
			"primary_score":	999838,
			"second_score":	1246
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1026,
			"primary_score":	999838,
			"second_score":	1237
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1032,
			"primary_score":	999838,
			"second_score":	1236
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1068,
			"primary_score":	999838,
			"second_score":	1235
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1072,
			"primary_score":	999838,
			"second_score":	1234
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1073,
			"primary_score":	999838,
			"second_score":	1233
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1080,
			"primary_score":	999853,
			"second_score":	1181
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1082,
			"primary_score":	999853,
			"second_score":	1180
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1101,
			"primary_score":	999847,
			"second_score":	1254
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1103,
			"primary_score":	999847,
			"second_score":	1253
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1108,
			"primary_score":	999847,
			"second_score":	1252
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1110,
			"primary_score":	999847,
			"second_score":	1232
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1111,
			"primary_score":	999847,
			"second_score":	1231
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1112,
			"primary_score":	999866,
			"second_score":	1230
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1113,
			"primary_score":	999866,
			"second_score":	1183
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1117,
			"primary_score":	999867,
			"second_score":	1182
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1122,
			"primary_score":	999847,
			"second_score":	1179
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1128,
			"primary_score":	999848,
			"second_score":	1255
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1368,
			"primary_score":	999626,
			"second_score":	123834
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1370,
			"primary_score":	999626,
			"second_score":	123833
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1371,
			"primary_score":	999626,
			"second_score":	123723
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1373,
			"primary_score":	999626,
			"second_score":	123608
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1779,
			"primary_score":	999626,
			"second_score":	103759
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1780,
			"primary_score":	999626,
			"second_score":	103758
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1781,
			"primary_score":	999626,
			"second_score":	103757
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1867,
			"primary_score":	999987,
			"second_score":	11748
		}, {
			"file":	"Zend/zend_API.c",
			"line":	1869,
			"primary_score":	999987,
			"second_score":	11747
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2171,
			"primary_score":	999626,
			"second_score":	50383
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2172,
			"primary_score":	999626,
			"second_score":	50382
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2173,
			"primary_score":	999626,
			"second_score":	50381
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2175,
			"primary_score":	999626,
			"second_score":	50380
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2176,
			"primary_score":	999626,
			"second_score":	50379
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2178,
			"primary_score":	999626,
			"second_score":	50378
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2179,
			"primary_score":	999626,
			"second_score":	47499
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2185,
			"primary_score":	999626,
			"second_score":	47498
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2186,
			"primary_score":	999626,
			"second_score":	47450
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2187,
			"primary_score":	999626,
			"second_score":	47449
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2229,
			"primary_score":	999626,
			"second_score":	50390
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2231,
			"primary_score":	999626,
			"second_score":	50389
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2237,
			"primary_score":	999626,
			"second_score":	50388
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2241,
			"primary_score":	999626,
			"second_score":	53630
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2245,
			"primary_score":	999626,
			"second_score":	50387
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2249,
			"primary_score":	999626,
			"second_score":	52947
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2250,
			"primary_score":	999626,
			"second_score":	54015
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2255,
			"primary_score":	999626,
			"second_score":	50386
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2256,
			"primary_score":	999626,
			"second_score":	50385
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2257,
			"primary_score":	999626,
			"second_score":	50384
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2262,
			"primary_score":	999626,
			"second_score":	47448
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2301,
			"primary_score":	999626,
			"second_score":	119357
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2303,
			"primary_score":	999626,
			"second_score":	119356
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2304,
			"primary_score":	999626,
			"second_score":	119350
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2307,
			"primary_score":	999626,
			"second_score":	119349
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2309,
			"primary_score":	999626,
			"second_score":	119348
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2310,
			"primary_score":	999626,
			"second_score":	118766
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2312,
			"primary_score":	999626,
			"second_score":	118765
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2313,
			"primary_score":	999626,
			"second_score":	118759
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2316,
			"primary_score":	999626,
			"second_score":	118758
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2322,
			"primary_score":	999626,
			"second_score":	114929
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2324,
			"primary_score":	999626,
			"second_score":	114928
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2348,
			"primary_score":	999626,
			"second_score":	113702
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2352,
			"primary_score":	999626,
			"second_score":	113701
		}, {
			"file":	"Zend/zend_API.c",
			"line":	2354,
			"primary_score":	999626,
			"second_score":	113700
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	144,
			"primary_score":	999626,
			"second_score":	3194
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	297,
			"primary_score":	999626,
			"second_score":	3197
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	673,
			"primary_score":	999626,
			"second_score":	113224
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	675,
			"primary_score":	999626,
			"second_score":	113223
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	676,
			"primary_score":	999626,
			"second_score":	113222
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	699,
			"primary_score":	999626,
			"second_score":	113282
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	701,
			"primary_score":	999626,
			"second_score":	113281
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	702,
			"primary_score":	999626,
			"second_score":	113280
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	725,
			"primary_score":	999626,
			"second_score":	113231
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	726,
			"primary_score":	999626,
			"second_score":	113230
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	728,
			"primary_score":	999626,
			"second_score":	113229
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	730,
			"primary_score":	999626,
			"second_score":	113228
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	731,
			"primary_score":	999626,
			"second_score":	113227
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	732,
			"primary_score":	999626,
			"second_score":	113226
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	734,
			"primary_score":	999626,
			"second_score":	113225
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	735,
			"primary_score":	999626,
			"second_score":	113221
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	736,
			"primary_score":	999626,
			"second_score":	113220
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	737,
			"primary_score":	999626,
			"second_score":	113219
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	738,
			"primary_score":	999626,
			"second_score":	113218
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	739,
			"primary_score":	999626,
			"second_score":	113217
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	740,
			"primary_score":	999626,
			"second_score":	113216
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	741,
			"primary_score":	999626,
			"second_score":	113215
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	743,
			"primary_score":	999626,
			"second_score":	117037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	745,
			"primary_score":	999626,
			"second_score":	117036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	746,
			"primary_score":	999626,
			"second_score":	117035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	748,
			"primary_score":	999626,
			"second_score":	117034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	749,
			"primary_score":	999626,
			"second_score":	117033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	750,
			"primary_score":	999626,
			"second_score":	117032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	751,
			"primary_score":	999626,
			"second_score":	117031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	752,
			"primary_score":	999626,
			"second_score":	117030
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	753,
			"primary_score":	999626,
			"second_score":	117029
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	754,
			"primary_score":	999626,
			"second_score":	117028
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	768,
			"primary_score":	999626,
			"second_score":	127571
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	770,
			"primary_score":	999626,
			"second_score":	127570
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	772,
			"primary_score":	999626,
			"second_score":	127569
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	773,
			"primary_score":	999626,
			"second_score":	127568
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	774,
			"primary_score":	999626,
			"second_score":	127567
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	776,
			"primary_score":	999626,
			"second_score":	127566
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	778,
			"primary_score":	999626,
			"second_score":	127565
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	779,
			"primary_score":	999626,
			"second_score":	127564
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	780,
			"primary_score":	999626,
			"second_score":	127563
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	786,
			"primary_score":	999626,
			"second_score":	113268
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	787,
			"primary_score":	999626,
			"second_score":	113267
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	789,
			"primary_score":	999626,
			"second_score":	113266
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	791,
			"primary_score":	999626,
			"second_score":	113265
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	792,
			"primary_score":	999626,
			"second_score":	113264
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	795,
			"primary_score":	999626,
			"second_score":	113263
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	800,
			"primary_score":	999626,
			"second_score":	113262
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	801,
			"primary_score":	999626,
			"second_score":	113261
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	802,
			"primary_score":	999626,
			"second_score":	113260
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	803,
			"primary_score":	999626,
			"second_score":	113259
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	805,
			"primary_score":	999626,
			"second_score":	113255
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	806,
			"primary_score":	999626,
			"second_score":	113253
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	807,
			"primary_score":	999626,
			"second_score":	113252
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	808,
			"primary_score":	999626,
			"second_score":	113251
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	833,
			"primary_score":	999626,
			"second_score":	127360
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	838,
			"primary_score":	999626,
			"second_score":	127359
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	839,
			"primary_score":	999626,
			"second_score":	127358
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	841,
			"primary_score":	999626,
			"second_score":	127357
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	842,
			"primary_score":	999626,
			"second_score":	127356
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	843,
			"primary_score":	999626,
			"second_score":	127355
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	845,
			"primary_score":	999626,
			"second_score":	127354
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	846,
			"primary_score":	999626,
			"second_score":	127353
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	890,
			"primary_score":	999626,
			"second_score":	113606
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	891,
			"primary_score":	999626,
			"second_score":	113605
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	893,
			"primary_score":	999626,
			"second_score":	113604
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	894,
			"primary_score":	999626,
			"second_score":	113603
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	896,
			"primary_score":	999626,
			"second_score":	113602
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	897,
			"primary_score":	999626,
			"second_score":	113601
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	904,
			"primary_score":	999626,
			"second_score":	113600
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	905,
			"primary_score":	999626,
			"second_score":	113599
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	906,
			"primary_score":	999626,
			"second_score":	113346
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	907,
			"primary_score":	999626,
			"second_score":	113345
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	908,
			"primary_score":	999626,
			"second_score":	113344
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	909,
			"primary_score":	999626,
			"second_score":	113343
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	911,
			"primary_score":	999626,
			"second_score":	113342
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	912,
			"primary_score":	999626,
			"second_score":	113341
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1599,
			"primary_score":	999626,
			"second_score":	52582
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1600,
			"primary_score":	999626,
			"second_score":	52581
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1601,
			"primary_score":	999626,
			"second_score":	52580
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1602,
			"primary_score":	999626,
			"second_score":	52579
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1604,
			"primary_score":	999626,
			"second_score":	52578
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1608,
			"primary_score":	999626,
			"second_score":	52577
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1614,
			"primary_score":	999626,
			"second_score":	52576
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1669,
			"primary_score":	999626,
			"second_score":	52575
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1670,
			"primary_score":	999626,
			"second_score":	52574
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1671,
			"primary_score":	999626,
			"second_score":	52573
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1672,
			"primary_score":	999626,
			"second_score":	52572
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1673,
			"primary_score":	999626,
			"second_score":	3201
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1674,
			"primary_score":	999626,
			"second_score":	3200
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1675,
			"primary_score":	999626,
			"second_score":	3199
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1676,
			"primary_score":	999626,
			"second_score":	3198
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1678,
			"primary_score":	999626,
			"second_score":	3196
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1679,
			"primary_score":	999626,
			"second_score":	3195
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1680,
			"primary_score":	999626,
			"second_score":	3193
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1681,
			"primary_score":	999626,
			"second_score":	3192
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1684,
			"primary_score":	999626,
			"second_score":	113612
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1686,
			"primary_score":	999626,
			"second_score":	113611
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1687,
			"primary_score":	999626,
			"second_score":	113610
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1692,
			"primary_score":	999626,
			"second_score":	113609
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1705,
			"primary_score":	999626,
			"second_score":	113608
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1709,
			"primary_score":	999626,
			"second_score":	113607
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1710,
			"primary_score":	999626,
			"second_score":	113340
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1711,
			"primary_score":	999626,
			"second_score":	113339
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1712,
			"primary_score":	999626,
			"second_score":	113338
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1717,
			"primary_score":	999626,
			"second_score":	113337
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1718,
			"primary_score":	999626,
			"second_score":	113336
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1719,
			"primary_score":	999626,
			"second_score":	113335
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1721,
			"primary_score":	999626,
			"second_score":	113334
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1722,
			"primary_score":	999626,
			"second_score":	113333
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1724,
			"primary_score":	999626,
			"second_score":	113332
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1725,
			"primary_score":	999626,
			"second_score":	113331
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1726,
			"primary_score":	999626,
			"second_score":	113327
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1727,
			"primary_score":	999626,
			"second_score":	113321
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1729,
			"primary_score":	999626,
			"second_score":	113303
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1730,
			"primary_score":	999626,
			"second_score":	113302
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1732,
			"primary_score":	999626,
			"second_score":	113207
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1802,
			"primary_score":	999626,
			"second_score":	113292
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1803,
			"primary_score":	999626,
			"second_score":	113291
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1804,
			"primary_score":	999626,
			"second_score":	113287
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1805,
			"primary_score":	999626,
			"second_score":	113286
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1807,
			"primary_score":	999626,
			"second_score":	113285
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1811,
			"primary_score":	999626,
			"second_score":	113284
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1836,
			"primary_score":	999854,
			"second_score":	11019
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1839,
			"primary_score":	999854,
			"second_score":	11018
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1856,
			"primary_score":	999865,
			"second_score":	9426
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1857,
			"primary_score":	999865,
			"second_score":	9425
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1860,
			"primary_score":	999865,
			"second_score":	9424
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1864,
			"primary_score":	999626,
			"second_score":	113283
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1865,
			"primary_score":	999626,
			"second_score":	113279
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1870,
			"primary_score":	999626,
			"second_score":	113278
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1875,
			"primary_score":	999626,
			"second_score":	113301
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1876,
			"primary_score":	999626,
			"second_score":	113300
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1877,
			"primary_score":	999626,
			"second_score":	113299
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1878,
			"primary_score":	999626,
			"second_score":	113298
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1879,
			"primary_score":	999626,
			"second_score":	113297
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1880,
			"primary_score":	999626,
			"second_score":	113296
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1881,
			"primary_score":	999626,
			"second_score":	113295
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1883,
			"primary_score":	999626,
			"second_score":	113294
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1884,
			"primary_score":	999626,
			"second_score":	120056
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1885,
			"primary_score":	999626,
			"second_score":	120055
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1887,
			"primary_score":	999626,
			"second_score":	120054
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1891,
			"primary_score":	999626,
			"second_score":	120053
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1897,
			"primary_score":	999626,
			"second_score":	120052
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1898,
			"primary_score":	999626,
			"second_score":	120051
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1899,
			"primary_score":	999626,
			"second_score":	120050
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1900,
			"primary_score":	999626,
			"second_score":	120049
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1901,
			"primary_score":	999626,
			"second_score":	120048
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1902,
			"primary_score":	999626,
			"second_score":	120047
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1909,
			"primary_score":	999626,
			"second_score":	123022
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1910,
			"primary_score":	999626,
			"second_score":	123021
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1912,
			"primary_score":	999626,
			"second_score":	127376
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1913,
			"primary_score":	999626,
			"second_score":	127372
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1917,
			"primary_score":	999626,
			"second_score":	127371
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1925,
			"primary_score":	999626,
			"second_score":	113293
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1927,
			"primary_score":	999626,
			"second_score":	113277
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	1944,
			"primary_score":	999626,
			"second_score":	113276
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2005,
			"primary_score":	999626,
			"second_score":	113275
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2007,
			"primary_score":	999626,
			"second_score":	113274
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2008,
			"primary_score":	999626,
			"second_score":	113273
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2009,
			"primary_score":	999626,
			"second_score":	113272
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2010,
			"primary_score":	999626,
			"second_score":	113271
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2011,
			"primary_score":	999626,
			"second_score":	113269
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2013,
			"primary_score":	999626,
			"second_score":	113250
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2016,
			"primary_score":	999626,
			"second_score":	113249
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2018,
			"primary_score":	999626,
			"second_score":	113248
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2019,
			"primary_score":	999626,
			"second_score":	127349
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2020,
			"primary_score":	999626,
			"second_score":	127348
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2022,
			"primary_score":	999626,
			"second_score":	113247
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2025,
			"primary_score":	999626,
			"second_score":	113246
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2026,
			"primary_score":	999626,
			"second_score":	113240
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2027,
			"primary_score":	999626,
			"second_score":	113239
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2030,
			"primary_score":	999626,
			"second_score":	113233
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2031,
			"primary_score":	999626,
			"second_score":	113232
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2037,
			"primary_score":	999626,
			"second_score":	113214
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2039,
			"primary_score":	999626,
			"second_score":	113213
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2040,
			"primary_score":	999626,
			"second_score":	113212
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2041,
			"primary_score":	999626,
			"second_score":	113211
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2044,
			"primary_score":	999626,
			"second_score":	113210
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2046,
			"primary_score":	999626,
			"second_score":	113208
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2052,
			"primary_score":	999626,
			"second_score":	113666
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2053,
			"primary_score":	999626,
			"second_score":	113665
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2054,
			"primary_score":	999626,
			"second_score":	113664
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2056,
			"primary_score":	999626,
			"second_score":	113663
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2060,
			"primary_score":	999626,
			"second_score":	113662
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2061,
			"primary_score":	999626,
			"second_score":	113661
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2062,
			"primary_score":	999626,
			"second_score":	113660
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2069,
			"primary_score":	999626,
			"second_score":	113659
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2070,
			"primary_score":	999626,
			"second_score":	113658
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2071,
			"primary_score":	999626,
			"second_score":	113657
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2073,
			"primary_score":	999626,
			"second_score":	113656
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2074,
			"primary_score":	999626,
			"second_score":	113655
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2075,
			"primary_score":	999626,
			"second_score":	113654
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2076,
			"primary_score":	999626,
			"second_score":	113653
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2082,
			"primary_score":	999626,
			"second_score":	113652
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2096,
			"primary_score":	999626,
			"second_score":	113967
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2097,
			"primary_score":	999626,
			"second_score":	113966
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2098,
			"primary_score":	999626,
			"second_score":	113947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2112,
			"primary_score":	999626,
			"second_score":	124947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2113,
			"primary_score":	999626,
			"second_score":	124946
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2114,
			"primary_score":	999626,
			"second_score":	124945
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2115,
			"primary_score":	999626,
			"second_score":	124944
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2116,
			"primary_score":	999626,
			"second_score":	124943
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2118,
			"primary_score":	999626,
			"second_score":	124942
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2119,
			"primary_score":	999626,
			"second_score":	124941
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2121,
			"primary_score":	999626,
			"second_score":	126050
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2122,
			"primary_score":	999626,
			"second_score":	126049
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2123,
			"primary_score":	999626,
			"second_score":	126048
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2124,
			"primary_score":	999626,
			"second_score":	126047
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2126,
			"primary_score":	999626,
			"second_score":	126046
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2130,
			"primary_score":	999626,
			"second_score":	126045
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2131,
			"primary_score":	999626,
			"second_score":	133925
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2133,
			"primary_score":	999626,
			"second_score":	133924
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2134,
			"primary_score":	999626,
			"second_score":	133923
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2136,
			"primary_score":	999626,
			"second_score":	133922
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2137,
			"primary_score":	999626,
			"second_score":	133920
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2138,
			"primary_score":	999626,
			"second_score":	133919
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2139,
			"primary_score":	999626,
			"second_score":	126037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2140,
			"primary_score":	999626,
			"second_score":	126036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2144,
			"primary_score":	999626,
			"second_score":	133918
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2145,
			"primary_score":	999626,
			"second_score":	133912
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2147,
			"primary_score":	999626,
			"second_score":	133911
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2150,
			"primary_score":	999626,
			"second_score":	133905
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2151,
			"primary_score":	999626,
			"second_score":	133890
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2152,
			"primary_score":	999626,
			"second_score":	133889
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2154,
			"primary_score":	999626,
			"second_score":	133887
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2155,
			"primary_score":	999626,
			"second_score":	133886
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2159,
			"primary_score":	999626,
			"second_score":	130912
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2163,
			"primary_score":	999626,
			"second_score":	127043
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2164,
			"primary_score":	999626,
			"second_score":	127042
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2170,
			"primary_score":	999626,
			"second_score":	127041
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2171,
			"primary_score":	999626,
			"second_score":	127040
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2172,
			"primary_score":	999626,
			"second_score":	127039
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2173,
			"primary_score":	999626,
			"second_score":	127038
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2175,
			"primary_score":	999626,
			"second_score":	127037
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2180,
			"primary_score":	999626,
			"second_score":	127036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2183,
			"primary_score":	999626,
			"second_score":	127035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2185,
			"primary_score":	999626,
			"second_score":	127034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2186,
			"primary_score":	999626,
			"second_score":	127033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2188,
			"primary_score":	999626,
			"second_score":	127032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2189,
			"primary_score":	999626,
			"second_score":	127031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2190,
			"primary_score":	999626,
			"second_score":	127030
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2197,
			"primary_score":	999626,
			"second_score":	127029
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2202,
			"primary_score":	999626,
			"second_score":	130911
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2204,
			"primary_score":	999626,
			"second_score":	130910
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2205,
			"primary_score":	999626,
			"second_score":	122496
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2206,
			"primary_score":	999626,
			"second_score":	122495
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2207,
			"primary_score":	999626,
			"second_score":	122493
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2208,
			"primary_score":	999626,
			"second_score":	122492
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2209,
			"primary_score":	999626,
			"second_score":	122491
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2211,
			"primary_score":	999626,
			"second_score":	122490
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2212,
			"primary_score":	999626,
			"second_score":	122488
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2214,
			"primary_score":	999626,
			"second_score":	122469
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2218,
			"primary_score":	999626,
			"second_score":	122468
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2221,
			"primary_score":	999626,
			"second_score":	122467
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2222,
			"primary_score":	999626,
			"second_score":	122461
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2223,
			"primary_score":	999626,
			"second_score":	122460
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2226,
			"primary_score":	999626,
			"second_score":	122454
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2230,
			"primary_score":	999626,
			"second_score":	122453
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2233,
			"primary_score":	999626,
			"second_score":	122435
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2234,
			"primary_score":	999626,
			"second_score":	122434
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2235,
			"primary_score":	999626,
			"second_score":	122433
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2236,
			"primary_score":	999626,
			"second_score":	122432
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2238,
			"primary_score":	999626,
			"second_score":	122431
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2239,
			"primary_score":	999626,
			"second_score":	122429
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2408,
			"primary_score":	999626,
			"second_score":	120067
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2410,
			"primary_score":	999626,
			"second_score":	120066
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2413,
			"primary_score":	999626,
			"second_score":	120065
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2418,
			"primary_score":	999626,
			"second_score":	113669
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2420,
			"primary_score":	999626,
			"second_score":	113668
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2424,
			"primary_score":	999626,
			"second_score":	113667
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2429,
			"primary_score":	999626,
			"second_score":	124950
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2431,
			"primary_score":	999626,
			"second_score":	124949
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2434,
			"primary_score":	999626,
			"second_score":	124948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2469,
			"primary_score":	999626,
			"second_score":	133033
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2470,
			"primary_score":	999626,
			"second_score":	133032
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2472,
			"primary_score":	999626,
			"second_score":	133031
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2478,
			"primary_score":	999626,
			"second_score":	133030
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2482,
			"primary_score":	999626,
			"second_score":	133029
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2517,
			"primary_score":	999626,
			"second_score":	133034
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2527,
			"primary_score":	999626,
			"second_score":	121817
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2538,
			"primary_score":	999626,
			"second_score":	133036
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2540,
			"primary_score":	999626,
			"second_score":	133035
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2541,
			"primary_score":	999626,
			"second_score":	132948
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2544,
			"primary_score":	999626,
			"second_score":	132947
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2545,
			"primary_score":	999626,
			"second_score":	132946
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2550,
			"primary_score":	999626,
			"second_score":	142923
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2551,
			"primary_score":	999626,
			"second_score":	142922
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2553,
			"primary_score":	999626,
			"second_score":	142921
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2554,
			"primary_score":	999626,
			"second_score":	142920
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2555,
			"primary_score":	999626,
			"second_score":	142816
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2558,
			"primary_score":	999626,
			"second_score":	142815
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2559,
			"primary_score":	999626,
			"second_score":	142814
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2564,
			"primary_score":	999626,
			"second_score":	123718
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2566,
			"primary_score":	999626,
			"second_score":	123717
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2567,
			"primary_score":	999626,
			"second_score":	123613
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2570,
			"primary_score":	999626,
			"second_score":	123612
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2571,
			"primary_score":	999626,
			"second_score":	123611
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2572,
			"primary_score":	999626,
			"second_score":	123610
		}, {
			"file":	"Zend/zend_alloc.c",
			"line":	2625,
			"primary_score":	999626,
			"second_score":	52583
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	346,
			"primary_score":	999626,
			"second_score":	124404
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1335,
			"primary_score":	999626,
			"second_score":	121404
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1336,
			"primary_score":	999626,
			"second_score":	121403
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1337,
			"primary_score":	999626,
			"second_score":	121402
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1338,
			"primary_score":	999626,
			"second_score":	121401
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1339,
			"primary_score":	999626,
			"second_score":	121400
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1341,
			"primary_score":	999626,
			"second_score":	121399
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1345,
			"primary_score":	999626,
			"second_score":	121332
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1348,
			"primary_score":	999626,
			"second_score":	121156
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1349,
			"primary_score":	999626,
			"second_score":	121155
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1354,
			"primary_score":	999626,
			"second_score":	121154
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1356,
			"primary_score":	999626,
			"second_score":	121114
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1362,
			"primary_score":	999626,
			"second_score":	121095
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1367,
			"primary_score":	999626,
			"second_score":	121094
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1891,
			"primary_score":	999626,
			"second_score":	123836
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1892,
			"primary_score":	999626,
			"second_score":	123835
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1893,
			"primary_score":	999626,
			"second_score":	123460
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1921,
			"primary_score":	999626,
			"second_score":	133258
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1923,
			"primary_score":	999626,
			"second_score":	133257
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1927,
			"primary_score":	999626,
			"second_score":	133219
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1929,
			"primary_score":	999626,
			"second_score":	133117
		}, {
			"file":	"Zend/zend_builtin_functions.c",
			"line":	1932,
			"primary_score":	999626,
			"second_score":	133116
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	137,
			"primary_score":	999740,
			"second_score":	17461
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	138,
			"primary_score":	999740,
			"second_score":	17460
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	139,
			"primary_score":	999740,
			"second_score":	17459
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	141,
			"primary_score":	999740,
			"second_score":	17458
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	142,
			"primary_score":	999740,
			"second_score":	17457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	143,
			"primary_score":	999740,
			"second_score":	17456
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	149,
			"primary_score":	999740,
			"second_score":	17455
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	152,
			"primary_score":	999740,
			"second_score":	17454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	153,
			"primary_score":	999740,
			"second_score":	17426
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	154,
			"primary_score":	999740,
			"second_score":	17425
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	156,
			"primary_score":	999740,
			"second_score":	17424
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	157,
			"primary_score":	999740,
			"second_score":	17423
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	171,
			"primary_score":	999626,
			"second_score":	143509
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	172,
			"primary_score":	999626,
			"second_score":	143508
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	173,
			"primary_score":	999626,
			"second_score":	143507
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	174,
			"primary_score":	999626,
			"second_score":	143506
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	175,
			"primary_score":	999626,
			"second_score":	143505
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	176,
			"primary_score":	999626,
			"second_score":	143504
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	208,
			"primary_score":	999626,
			"second_score":	133652
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	210,
			"primary_score":	999626,
			"second_score":	133651
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	229,
			"primary_score":	999626,
			"second_score":	113902
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	230,
			"primary_score":	999626,
			"second_score":	113877
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	231,
			"primary_score":	999626,
			"second_score":	113852
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	232,
			"primary_score":	999626,
			"second_score":	113848
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	233,
			"primary_score":	999626,
			"second_score":	113844
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	234,
			"primary_score":	999626,
			"second_score":	113840
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	235,
			"primary_score":	999626,
			"second_score":	113836
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	236,
			"primary_score":	999626,
			"second_score":	113832
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	237,
			"primary_score":	999626,
			"second_score":	113762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	238,
			"primary_score":	999626,
			"second_score":	113758
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	245,
			"primary_score":	999626,
			"second_score":	144364
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	246,
			"primary_score":	999626,
			"second_score":	144363
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	248,
			"primary_score":	999626,
			"second_score":	144362
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	252,
			"primary_score":	999626,
			"second_score":	144246
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	253,
			"primary_score":	999626,
			"second_score":	144136
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	254,
			"primary_score":	999626,
			"second_score":	143763
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	255,
			"primary_score":	999626,
			"second_score":	143762
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	262,
			"primary_score":	999626,
			"second_score":	133806
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	269,
			"primary_score":	999626,
			"second_score":	143535
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	276,
			"primary_score":	999732,
			"second_score":	8391
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	283,
			"primary_score":	999626,
			"second_score":	125153
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	290,
			"primary_score":	999626,
			"second_score":	134812
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	296,
			"primary_score":	999752,
			"second_score":	5047
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	297,
			"primary_score":	999752,
			"second_score":	5046
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	299,
			"primary_score":	999752,
			"second_score":	5035
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	300,
			"primary_score":	999792,
			"second_score":	5034
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	304,
			"primary_score":	999802,
			"second_score":	5033
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	305,
			"primary_score":	999802,
			"second_score":	5012
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	307,
			"primary_score":	999854,
			"second_score":	12521
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	309,
			"primary_score":	999752,
			"second_score":	7625
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	310,
			"primary_score":	999752,
			"second_score":	7624
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	311,
			"primary_score":	999752,
			"second_score":	7623
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	312,
			"primary_score":	999752,
			"second_score":	7622
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	313,
			"primary_score":	999752,
			"second_score":	7621
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	315,
			"primary_score":	999752,
			"second_score":	7514
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	316,
			"primary_score":	999752,
			"second_score":	7508
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	317,
			"primary_score":	999752,
			"second_score":	7507
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	318,
			"primary_score":	999752,
			"second_score":	7506
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	324,
			"primary_score":	999764,
			"second_score":	8216
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	325,
			"primary_score":	999764,
			"second_score":	8209
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	326,
			"primary_score":	999765,
			"second_score":	8208
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	328,
			"primary_score":	999775,
			"second_score":	8218
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	335,
			"primary_score":	999626,
			"second_score":	134032
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	336,
			"primary_score":	999626,
			"second_score":	134031
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	337,
			"primary_score":	999626,
			"second_score":	134030
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	338,
			"primary_score":	999626,
			"second_score":	136676
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	339,
			"primary_score":	999626,
			"second_score":	136675
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	341,
			"primary_score":	999626,
			"second_score":	134029
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	342,
			"primary_score":	999626,
			"second_score":	134869
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	343,
			"primary_score":	999626,
			"second_score":	134868
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	345,
			"primary_score":	999626,
			"second_score":	134867
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	348,
			"primary_score":	999626,
			"second_score":	134028
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	349,
			"primary_score":	999626,
			"second_score":	134027
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	350,
			"primary_score":	999626,
			"second_score":	134025
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	351,
			"primary_score":	999626,
			"second_score":	134023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	352,
			"primary_score":	999626,
			"second_score":	134022
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	353,
			"primary_score":	999626,
			"second_score":	134021
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	359,
			"primary_score":	999910,
			"second_score":	3283
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	360,
			"primary_score":	999910,
			"second_score":	3282
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	361,
			"primary_score":	999910,
			"second_score":	3281
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	362,
			"primary_score":	999910,
			"second_score":	3280
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	364,
			"primary_score":	999910,
			"second_score":	3279
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	370,
			"primary_score":	999910,
			"second_score":	3278
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	373,
			"primary_score":	999910,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	374,
			"primary_score":	999910,
			"second_score":	3221
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	375,
			"primary_score":	999910,
			"second_score":	3214
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	376,
			"primary_score":	999910,
			"second_score":	3161
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	378,
			"primary_score":	999910,
			"second_score":	3158
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	417,
			"primary_score":	999784,
			"second_score":	6335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	418,
			"primary_score":	999784,
			"second_score":	6334
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	419,
			"primary_score":	999784,
			"second_score":	6333
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	420,
			"primary_score":	999784,
			"second_score":	6332
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	421,
			"primary_score":	999784,
			"second_score":	6331
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	423,
			"primary_score":	999784,
			"second_score":	6330
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	429,
			"primary_score":	999784,
			"second_score":	6329
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	432,
			"primary_score":	999784,
			"second_score":	6267
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	436,
			"primary_score":	999784,
			"second_score":	6266
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	437,
			"primary_score":	999784,
			"second_score":	6265
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	439,
			"primary_score":	999784,
			"second_score":	6166
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	440,
			"primary_score":	999784,
			"second_score":	6159
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	441,
			"primary_score":	999784,
			"second_score":	6097
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	443,
			"primary_score":	999784,
			"second_score":	6094
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	445,
			"primary_score":	999784,
			"second_score":	6092
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	546,
			"primary_score":	999626,
			"second_score":	135029
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	548,
			"primary_score":	999626,
			"second_score":	135028
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	632,
			"primary_score":	999727,
			"second_score":	5079
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	633,
			"primary_score":	999727,
			"second_score":	5078
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	634,
			"primary_score":	999727,
			"second_score":	5077
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	636,
			"primary_score":	999727,
			"second_score":	5076
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	637,
			"primary_score":	999727,
			"second_score":	5075
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	640,
			"primary_score":	999727,
			"second_score":	5074
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	645,
			"primary_score":	999767,
			"second_score":	5049
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	646,
			"primary_score":	999767,
			"second_score":	5048
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	647,
			"primary_score":	999767,
			"second_score":	5011
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	648,
			"primary_score":	999767,
			"second_score":	5010
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	649,
			"primary_score":	999767,
			"second_score":	5009
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	653,
			"primary_score":	999877,
			"second_score":	13069
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	654,
			"primary_score":	999877,
			"second_score":	13068
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	655,
			"primary_score":	999877,
			"second_score":	13067
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	660,
			"primary_score":	999877,
			"second_score":	13063
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	661,
			"primary_score":	999877,
			"second_score":	13062
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	662,
			"primary_score":	999877,
			"second_score":	13061
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	663,
			"primary_score":	999877,
			"second_score":	13059
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	664,
			"primary_score":	999877,
			"second_score":	12871
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	665,
			"primary_score":	999877,
			"second_score":	12866
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	666,
			"primary_score":	999877,
			"second_score":	12865
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	668,
			"primary_score":	999877,
			"second_score":	12864
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	669,
			"primary_score":	999878,
			"second_score":	12863
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	670,
			"primary_score":	999878,
			"second_score":	12860
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	675,
			"primary_score":	999877,
			"second_score":	12834
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	676,
			"primary_score":	999877,
			"second_score":	12833
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	677,
			"primary_score":	999877,
			"second_score":	12829
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	685,
			"primary_score":	999727,
			"second_score":	5080
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	841,
			"primary_score":	999626,
			"second_score":	134531
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	843,
			"primary_score":	999626,
			"second_score":	134521
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	844,
			"primary_score":	999626,
			"second_score":	134520
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	845,
			"primary_score":	999626,
			"second_score":	134516
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	851,
			"primary_score":	999819,
			"second_score":	8940
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	853,
			"primary_score":	999819,
			"second_score":	8939
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	857,
			"primary_score":	999821,
			"second_score":	8938
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	860,
			"primary_score":	999819,
			"second_score":	8937
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	875,
			"primary_score":	999825,
			"second_score":	8936
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	884,
			"primary_score":	999804,
			"second_score":	3442
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	888,
			"primary_score":	999930,
			"second_score":	12539
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	890,
			"primary_score":	999804,
			"second_score":	3441
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	897,
			"primary_score":	999808,
			"second_score":	5587
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	898,
			"primary_score":	999808,
			"second_score":	5586
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	900,
			"primary_score":	999808,
			"second_score":	5585
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	927,
			"primary_score":	999808,
			"second_score":	5584
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	929,
			"primary_score":	999808,
			"second_score":	5546
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	930,
			"primary_score":	999808,
			"second_score":	5544
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	932,
			"primary_score":	999808,
			"second_score":	5534
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	933,
			"primary_score":	999813,
			"second_score":	5533
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	989,
			"primary_score":	999809,
			"second_score":	5532
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	990,
			"primary_score":	999809,
			"second_score":	5531
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	991,
			"primary_score":	999809,
			"second_score":	5527
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	992,
			"primary_score":	999809,
			"second_score":	5523
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	993,
			"primary_score":	999809,
			"second_score":	5522
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	994,
			"primary_score":	999809,
			"second_score":	5520
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1000,
			"primary_score":	999967,
			"second_score":	7501
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1002,
			"primary_score":	999967,
			"second_score":	7500
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1003,
			"primary_score":	999975,
			"second_score":	7499
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1017,
			"primary_score":	999967,
			"second_score":	7498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1018,
			"primary_score":	999967,
			"second_score":	7488
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1019,
			"primary_score":	999967,
			"second_score":	7487
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1021,
			"primary_score":	999972,
			"second_score":	7484
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1024,
			"primary_score":	999972,
			"second_score":	7483
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1026,
			"primary_score":	999967,
			"second_score":	7482
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1031,
			"primary_score":	999989,
			"second_score":	7481
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1033,
			"primary_score":	999967,
			"second_score":	7480
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1034,
			"primary_score":	999967,
			"second_score":	7476
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1251,
			"primary_score":	999807,
			"second_score":	5591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1253,
			"primary_score":	999807,
			"second_score":	5590
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1256,
			"primary_score":	999807,
			"second_score":	5589
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1264,
			"primary_score":	999626,
			"second_score":	134715
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1266,
			"primary_score":	999626,
			"second_score":	134714
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1267,
			"primary_score":	999626,
			"second_score":	134707
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1273,
			"primary_score":	999626,
			"second_score":	134621
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1274,
			"primary_score":	999626,
			"second_score":	134620
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1275,
			"primary_score":	999626,
			"second_score":	134619
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1276,
			"primary_score":	999626,
			"second_score":	134618
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1277,
			"primary_score":	999626,
			"second_score":	134617
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1279,
			"primary_score":	999626,
			"second_score":	134616
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1281,
			"primary_score":	999626,
			"second_score":	134612
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1285,
			"primary_score":	999626,
			"second_score":	134611
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1286,
			"primary_score":	999804,
			"second_score":	3444
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1287,
			"primary_score":	999804,
			"second_score":	3443
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1289,
			"primary_score":	999980,
			"second_score":	12538
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1292,
			"primary_score":	999981,
			"second_score":	12537
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1293,
			"primary_score":	999981,
			"second_score":	12536
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1294,
			"primary_score":	999981,
			"second_score":	12535
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1295,
			"primary_score":	999981,
			"second_score":	12508
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1299,
			"primary_score":	999981,
			"second_score":	12507
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1300,
			"primary_score":	999981,
			"second_score":	12506
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1302,
			"primary_score":	999981,
			"second_score":	12505
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1303,
			"primary_score":	999981,
			"second_score":	12504
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1310,
			"primary_score":	999804,
			"second_score":	3440
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1311,
			"primary_score":	999804,
			"second_score":	3421
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1312,
			"primary_score":	999804,
			"second_score":	3420
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1320,
			"primary_score":	999804,
			"second_score":	3419
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1321,
			"primary_score":	999804,
			"second_score":	3409
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1322,
			"primary_score":	999804,
			"second_score":	3408
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1327,
			"primary_score":	999804,
			"second_score":	3407
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1332,
			"primary_score":	999832,
			"second_score":	3406
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1333,
			"primary_score":	999832,
			"second_score":	3405
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1356,
			"primary_score":	999805,
			"second_score":	3404
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1358,
			"primary_score":	999805,
			"second_score":	3403
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1362,
			"primary_score":	999626,
			"second_score":	134610
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1363,
			"primary_score":	999626,
			"second_score":	134606
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1421,
			"primary_score":	999677,
			"second_score":	2635
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1427,
			"primary_score":	999680,
			"second_score":	2634
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1428,
			"primary_score":	999700,
			"second_score":	2633
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1430,
			"primary_score":	999700,
			"second_score":	2632
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1433,
			"primary_score":	999700,
			"second_score":	2631
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1435,
			"primary_score":	999700,
			"second_score":	2630
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1446,
			"primary_score":	999700,
			"second_score":	2629
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1501,
			"primary_score":	999782,
			"second_score":	11101
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1502,
			"primary_score":	999782,
			"second_score":	11100
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1503,
			"primary_score":	999782,
			"second_score":	11099
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1504,
			"primary_score":	999782,
			"second_score":	11098
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1505,
			"primary_score":	999782,
			"second_score":	11097
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1506,
			"primary_score":	999782,
			"second_score":	11096
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1507,
			"primary_score":	999782,
			"second_score":	11095
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1508,
			"primary_score":	999782,
			"second_score":	11094
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1510,
			"primary_score":	999782,
			"second_score":	11093
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1511,
			"primary_score":	999818,
			"second_score":	11092
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1517,
			"primary_score":	999818,
			"second_score":	11091
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1521,
			"primary_score":	999782,
			"second_score":	11090
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1525,
			"primary_score":	999782,
			"second_score":	11089
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1527,
			"primary_score":	999782,
			"second_score":	11088
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1528,
			"primary_score":	999782,
			"second_score":	11087
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1529,
			"primary_score":	999782,
			"second_score":	11086
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1530,
			"primary_score":	999782,
			"second_score":	10909
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1532,
			"primary_score":	999782,
			"second_score":	10908
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1533,
			"primary_score":	999782,
			"second_score":	10907
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1536,
			"primary_score":	999782,
			"second_score":	10906
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1538,
			"primary_score":	999782,
			"second_score":	10905
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1539,
			"primary_score":	999782,
			"second_score":	10904
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1541,
			"primary_score":	999782,
			"second_score":	10903
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1543,
			"primary_score":	999782,
			"second_score":	10901
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1544,
			"primary_score":	999818,
			"second_score":	10900
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1546,
			"primary_score":	999818,
			"second_score":	10745
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1550,
			"primary_score":	999818,
			"second_score":	10590
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1551,
			"primary_score":	999818,
			"second_score":	10564
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1553,
			"primary_score":	999818,
			"second_score":	10557
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1557,
			"primary_score":	999818,
			"second_score":	10556
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1561,
			"primary_score":	999818,
			"second_score":	10555
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1592,
			"primary_score":	999820,
			"second_score":	10554
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1594,
			"primary_score":	999820,
			"second_score":	10553
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1595,
			"primary_score":	999820,
			"second_score":	10552
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1598,
			"primary_score":	999820,
			"second_score":	10475
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1602,
			"primary_score":	999822,
			"second_score":	10474
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1607,
			"primary_score":	999832,
			"second_score":	10473
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1609,
			"primary_score":	999845,
			"second_score":	10472
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1611,
			"primary_score":	999852,
			"second_score":	10471
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1616,
			"primary_score":	999858,
			"second_score":	10470
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1621,
			"primary_score":	999860,
			"second_score":	10469
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1622,
			"primary_score":	999987,
			"second_score":	15174
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1625,
			"primary_score":	999987,
			"second_score":	15173
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1626,
			"primary_score":	999864,
			"second_score":	10468
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1631,
			"primary_score":	999874,
			"second_score":	10467
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1636,
			"primary_score":	999878,
			"second_score":	10466
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1641,
			"primary_score":	999879,
			"second_score":	10465
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1646,
			"primary_score":	999883,
			"second_score":	10464
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1647,
			"primary_score":	999908,
			"second_score":	10463
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1649,
			"primary_score":	999820,
			"second_score":	10462
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1652,
			"primary_score":	999818,
			"second_score":	10460
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1685,
			"primary_score":	999782,
			"second_score":	10458
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1694,
			"primary_score":	999782,
			"second_score":	10457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1696,
			"primary_score":	999782,
			"second_score":	10456
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1698,
			"primary_score":	999782,
			"second_score":	10455
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1699,
			"primary_score":	999782,
			"second_score":	10454
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1700,
			"primary_score":	999782,
			"second_score":	10453
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1702,
			"primary_score":	999782,
			"second_score":	10452
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1704,
			"primary_score":	999782,
			"second_score":	10426
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1706,
			"primary_score":	999782,
			"second_score":	10425
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1708,
			"primary_score":	999782,
			"second_score":	10424
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1709,
			"primary_score":	999782,
			"second_score":	10423
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1711,
			"primary_score":	999782,
			"second_score":	10422
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1715,
			"primary_score":	999782,
			"second_score":	10396
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1763,
			"primary_score":	999784,
			"second_score":	8934
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1764,
			"primary_score":	999784,
			"second_score":	8933
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1766,
			"primary_score":	999784,
			"second_score":	8932
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1767,
			"primary_score":	999784,
			"second_score":	8928
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1769,
			"primary_score":	999784,
			"second_score":	8870
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1770,
			"primary_score":	999784,
			"second_score":	8676
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1772,
			"primary_score":	999784,
			"second_score":	8643
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1773,
			"primary_score":	999820,
			"second_score":	8642
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1785,
			"primary_score":	999790,
			"second_score":	8614
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1786,
			"primary_score":	999790,
			"second_score":	8612
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1790,
			"primary_score":	999790,
			"second_score":	8611
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1791,
			"primary_score":	999790,
			"second_score":	8589
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1797,
			"primary_score":	999899,
			"second_score":	14436
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1798,
			"primary_score":	999899,
			"second_score":	14435
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1799,
			"primary_score":	999899,
			"second_score":	14434
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1801,
			"primary_score":	999899,
			"second_score":	14433
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1810,
			"primary_score":	999899,
			"second_score":	14432
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1813,
			"primary_score":	999899,
			"second_score":	14410
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1814,
			"primary_score":	999899,
			"second_score":	14409
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1815,
			"primary_score":	999899,
			"second_score":	14235
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1816,
			"primary_score":	999899,
			"second_score":	14234
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1817,
			"primary_score":	999899,
			"second_score":	14233
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1827,
			"primary_score":	999899,
			"second_score":	14232
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1828,
			"primary_score":	999899,
			"second_score":	14222
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1829,
			"primary_score":	999899,
			"second_score":	14221
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1830,
			"primary_score":	999899,
			"second_score":	14220
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1831,
			"primary_score":	999899,
			"second_score":	14216
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1832,
			"primary_score":	999899,
			"second_score":	14212
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1835,
			"primary_score":	999906,
			"second_score":	14211
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1836,
			"primary_score":	999906,
			"second_score":	14210
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1838,
			"primary_score":	999899,
			"second_score":	14209
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1839,
			"primary_score":	999899,
			"second_score":	14180
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1840,
			"primary_score":	999899,
			"second_score":	14179
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1841,
			"primary_score":	999899,
			"second_score":	14109
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1842,
			"primary_score":	999899,
			"second_score":	14108
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1843,
			"primary_score":	999899,
			"second_score":	14107
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1844,
			"primary_score":	999899,
			"second_score":	14106
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1845,
			"primary_score":	999899,
			"second_score":	14105
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1846,
			"primary_score":	999899,
			"second_score":	14104
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1848,
			"primary_score":	999899,
			"second_score":	14103
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1917,
			"primary_score":	999626,
			"second_score":	135996
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1918,
			"primary_score":	999626,
			"second_score":	135995
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1919,
			"primary_score":	999626,
			"second_score":	135994
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1921,
			"primary_score":	999626,
			"second_score":	135993
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1923,
			"primary_score":	999626,
			"second_score":	135984
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1933,
			"primary_score":	999626,
			"second_score":	135983
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1934,
			"primary_score":	999626,
			"second_score":	135725
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1941,
			"primary_score":	999626,
			"second_score":	135687
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1942,
			"primary_score":	999626,
			"second_score":	135668
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1944,
			"primary_score":	999626,
			"second_score":	135667
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1945,
			"primary_score":	999626,
			"second_score":	135641
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1946,
			"primary_score":	999626,
			"second_score":	135637
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1952,
			"primary_score":	999934,
			"second_score":	3459
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1953,
			"primary_score":	999934,
			"second_score":	3458
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1954,
			"primary_score":	999934,
			"second_score":	3457
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1956,
			"primary_score":	999934,
			"second_score":	3456
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1957,
			"primary_score":	999934,
			"second_score":	3332
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1959,
			"primary_score":	999934,
			"second_score":	3297
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1960,
			"primary_score":	999934,
			"second_score":	3295
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1962,
			"primary_score":	999934,
			"second_score":	3294
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1967,
			"primary_score":	999935,
			"second_score":	3293
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1968,
			"primary_score":	999936,
			"second_score":	3292
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1969,
			"primary_score":	999938,
			"second_score":	3291
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1971,
			"primary_score":	999938,
			"second_score":	3290
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1972,
			"primary_score":	999938,
			"second_score":	3289
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1975,
			"primary_score":	999938,
			"second_score":	3288
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1976,
			"primary_score":	999938,
			"second_score":	3284
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1978,
			"primary_score":	999938,
			"second_score":	3157
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1980,
			"primary_score":	999936,
			"second_score":	3154
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1981,
			"primary_score":	999936,
			"second_score":	3153
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1982,
			"primary_score":	999936,
			"second_score":	3152
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1996,
			"primary_score":	999935,
			"second_score":	3151
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	1997,
			"primary_score":	999935,
			"second_score":	3125
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2047,
			"primary_score":	999626,
			"second_score":	135992
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2048,
			"primary_score":	999626,
			"second_score":	135991
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2049,
			"primary_score":	999626,
			"second_score":	135990
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2050,
			"primary_score":	999626,
			"second_score":	135989
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2052,
			"primary_score":	999626,
			"second_score":	135988
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2059,
			"primary_score":	999626,
			"second_score":	135987
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2063,
			"primary_score":	999626,
			"second_score":	135986
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2083,
			"primary_score":	999626,
			"second_score":	135985
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2098,
			"primary_score":	999783,
			"second_score":	6345
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2099,
			"primary_score":	999783,
			"second_score":	6344
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2100,
			"primary_score":	999783,
			"second_score":	6343
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2101,
			"primary_score":	999783,
			"second_score":	6342
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2102,
			"primary_score":	999783,
			"second_score":	6341
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2104,
			"primary_score":	999783,
			"second_score":	6340
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2105,
			"primary_score":	999783,
			"second_score":	6339
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2147,
			"primary_score":	999785,
			"second_score":	6338
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2172,
			"primary_score":	999801,
			"second_score":	6372
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2173,
			"primary_score":	999801,
			"second_score":	6371
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2175,
			"primary_score":	999801,
			"second_score":	6370
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2184,
			"primary_score":	999801,
			"second_score":	6369
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2185,
			"primary_score":	999801,
			"second_score":	6367
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2187,
			"primary_score":	999801,
			"second_score":	6357
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2188,
			"primary_score":	999801,
			"second_score":	6356
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2189,
			"primary_score":	999801,
			"second_score":	6355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2190,
			"primary_score":	999801,
			"second_score":	6354
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2191,
			"primary_score":	999801,
			"second_score":	6353
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2192,
			"primary_score":	999804,
			"second_score":	6352
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2194,
			"primary_score":	999804,
			"second_score":	6351
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2195,
			"primary_score":	999804,
			"second_score":	6346
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2205,
			"primary_score":	999806,
			"second_score":	6337
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2206,
			"primary_score":	999806,
			"second_score":	6336
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2208,
			"primary_score":	999806,
			"second_score":	6091
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2213,
			"primary_score":	999801,
			"second_score":	6090
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2214,
			"primary_score":	999801,
			"second_score":	6088
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2215,
			"primary_score":	999801,
			"second_score":	6087
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2216,
			"primary_score":	999801,
			"second_score":	6082
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2315,
			"primary_score":	999626,
			"second_score":	133826
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2319,
			"primary_score":	999626,
			"second_score":	133825
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2320,
			"primary_score":	999784,
			"second_score":	8671
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2322,
			"primary_score":	999784,
			"second_score":	8670
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2323,
			"primary_score":	999784,
			"second_score":	8666
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2324,
			"primary_score":	999784,
			"second_score":	8665
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2414,
			"primary_score":	999626,
			"second_score":	134891
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2416,
			"primary_score":	999626,
			"second_score":	134890
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2423,
			"primary_score":	999626,
			"second_score":	134889
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2424,
			"primary_score":	999626,
			"second_score":	134879
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2425,
			"primary_score":	999626,
			"second_score":	134878
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2426,
			"primary_score":	999626,
			"second_score":	134877
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2427,
			"primary_score":	999626,
			"second_score":	134818
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2428,
			"primary_score":	999626,
			"second_score":	134815
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2430,
			"primary_score":	999805,
			"second_score":	3002
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2431,
			"primary_score":	999805,
			"second_score":	3001
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2435,
			"primary_score":	999626,
			"second_score":	134813
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2436,
			"primary_score":	999626,
			"second_score":	134811
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2437,
			"primary_score":	999626,
			"second_score":	134810
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2438,
			"primary_score":	999626,
			"second_score":	134805
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2440,
			"primary_score":	999626,
			"second_score":	134804
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2441,
			"primary_score":	999626,
			"second_score":	134782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2447,
			"primary_score":	999626,
			"second_score":	135044
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2448,
			"primary_score":	999626,
			"second_score":	135043
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2449,
			"primary_score":	999626,
			"second_score":	135042
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2450,
			"primary_score":	999626,
			"second_score":	135041
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2451,
			"primary_score":	999626,
			"second_score":	135040
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2453,
			"primary_score":	999626,
			"second_score":	135039
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2454,
			"primary_score":	999626,
			"second_score":	135035
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2456,
			"primary_score":	999626,
			"second_score":	135034
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2471,
			"primary_score":	999626,
			"second_score":	135033
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2472,
			"primary_score":	999626,
			"second_score":	135032
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2485,
			"primary_score":	999626,
			"second_score":	135031
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2491,
			"primary_score":	999626,
			"second_score":	135030
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2493,
			"primary_score":	999626,
			"second_score":	135027
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2494,
			"primary_score":	999626,
			"second_score":	135026
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2495,
			"primary_score":	999626,
			"second_score":	136700
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2499,
			"primary_score":	999626,
			"second_score":	135025
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2512,
			"primary_score":	999626,
			"second_score":	135024
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2513,
			"primary_score":	999626,
			"second_score":	135023
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2516,
			"primary_score":	999626,
			"second_score":	134985
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2530,
			"primary_score":	999626,
			"second_score":	134984
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2532,
			"primary_score":	999626,
			"second_score":	134974
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2533,
			"primary_score":	999626,
			"second_score":	134973
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2534,
			"primary_score":	999626,
			"second_score":	134972
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2539,
			"primary_score":	999626,
			"second_score":	136686
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2540,
			"primary_score":	999626,
			"second_score":	136685
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2545,
			"primary_score":	999626,
			"second_score":	134971
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2546,
			"primary_score":	999626,
			"second_score":	134970
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2547,
			"primary_score":	999626,
			"second_score":	134966
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2548,
			"primary_score":	999626,
			"second_score":	134965
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2554,
			"primary_score":	999784,
			"second_score":	8918
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2556,
			"primary_score":	999784,
			"second_score":	8917
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2557,
			"primary_score":	999784,
			"second_score":	8916
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2572,
			"primary_score":	999775,
			"second_score":	8909
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2575,
			"primary_score":	999775,
			"second_score":	8908
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2576,
			"primary_score":	999784,
			"second_score":	8907
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2601,
			"primary_score":	999626,
			"second_score":	134064
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2602,
			"primary_score":	999626,
			"second_score":	134063
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2604,
			"primary_score":	999626,
			"second_score":	134062
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2605,
			"primary_score":	999964,
			"second_score":	12555
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2608,
			"primary_score":	999967,
			"second_score":	12554
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2612,
			"primary_score":	999626,
			"second_score":	134061
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2618,
			"primary_score":	999626,
			"second_score":	134059
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2619,
			"primary_score":	999626,
			"second_score":	134055
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2622,
			"primary_score":	999626,
			"second_score":	134051
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2623,
			"primary_score":	999626,
			"second_score":	134049
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2628,
			"primary_score":	999626,
			"second_score":	134048
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2630,
			"primary_score":	999626,
			"second_score":	134038
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2632,
			"primary_score":	999626,
			"second_score":	134037
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2633,
			"primary_score":	999626,
			"second_score":	134036
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2635,
			"primary_score":	999626,
			"second_score":	134020
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2639,
			"primary_score":	999626,
			"second_score":	119844
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2640,
			"primary_score":	999626,
			"second_score":	119843
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	2643,
			"primary_score":	999626,
			"second_score":	134019
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4138,
			"primary_score":	999791,
			"second_score":	8329
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4139,
			"primary_score":	999791,
			"second_score":	8328
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4141,
			"primary_score":	999791,
			"second_score":	8327
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4142,
			"primary_score":	999805,
			"second_score":	8326
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4143,
			"primary_score":	999805,
			"second_score":	8325
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4148,
			"primary_score":	999791,
			"second_score":	8324
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4152,
			"primary_score":	999791,
			"second_score":	8313
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4154,
			"primary_score":	999791,
			"second_score":	8312
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4155,
			"primary_score":	999791,
			"second_score":	8311
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4167,
			"primary_score":	999791,
			"second_score":	8265
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4168,
			"primary_score":	999816,
			"second_score":	8264
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4170,
			"primary_score":	999791,
			"second_score":	8261
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4225,
			"primary_score":	999765,
			"second_score":	8333
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4226,
			"primary_score":	999765,
			"second_score":	8332
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4228,
			"primary_score":	999765,
			"second_score":	8331
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4232,
			"primary_score":	999765,
			"second_score":	8330
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4243,
			"primary_score":	999805,
			"second_score":	8260
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4244,
			"primary_score":	999805,
			"second_score":	8259
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4290,
			"primary_score":	999776,
			"second_score":	8258
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4291,
			"primary_score":	999776,
			"second_score":	8227
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4292,
			"primary_score":	999776,
			"second_score":	8217
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4293,
			"primary_score":	999776,
			"second_score":	8207
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4570,
			"primary_score":	999769,
			"second_score":	17951
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4571,
			"primary_score":	999769,
			"second_score":	17950
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4572,
			"primary_score":	999769,
			"second_score":	17949
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4573,
			"primary_score":	999769,
			"second_score":	17948
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4574,
			"primary_score":	999769,
			"second_score":	17947
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4575,
			"primary_score":	999769,
			"second_score":	17946
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4577,
			"primary_score":	999769,
			"second_score":	17945
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4582,
			"primary_score":	999769,
			"second_score":	17944
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4584,
			"primary_score":	999770,
			"second_score":	17760
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4590,
			"primary_score":	999770,
			"second_score":	17758
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4595,
			"primary_score":	999770,
			"second_score":	17757
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4607,
			"primary_score":	999770,
			"second_score":	17756
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4617,
			"primary_score":	999770,
			"second_score":	17755
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4618,
			"primary_score":	999770,
			"second_score":	17657
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4619,
			"primary_score":	999770,
			"second_score":	17656
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4620,
			"primary_score":	999770,
			"second_score":	17583
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4622,
			"primary_score":	999770,
			"second_score":	17582
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4623,
			"primary_score":	999770,
			"second_score":	17478
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4624,
			"primary_score":	999770,
			"second_score":	17476
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4625,
			"primary_score":	999770,
			"second_score":	17475
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4627,
			"primary_score":	999770,
			"second_score":	17474
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4644,
			"primary_score":	999770,
			"second_score":	17473
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4645,
			"primary_score":	999770,
			"second_score":	17463
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4646,
			"primary_score":	999770,
			"second_score":	17462
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4647,
			"primary_score":	999770,
			"second_score":	17421
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4648,
			"primary_score":	999770,
			"second_score":	17113
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4650,
			"primary_score":	999770,
			"second_score":	16980
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4652,
			"primary_score":	999770,
			"second_score":	16979
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4656,
			"primary_score":	999771,
			"second_score":	16978
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4659,
			"primary_score":	999770,
			"second_score":	16977
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4660,
			"primary_score":	999770,
			"second_score":	16906
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4662,
			"primary_score":	999770,
			"second_score":	16903
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4663,
			"primary_score":	999770,
			"second_score":	16854
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4665,
			"primary_score":	999770,
			"second_score":	16853
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4666,
			"primary_score":	999770,
			"second_score":	16851
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4667,
			"primary_score":	999770,
			"second_score":	16850
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4669,
			"primary_score":	999770,
			"second_score":	16845
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4690,
			"primary_score":	999787,
			"second_score":	8396
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4692,
			"primary_score":	999787,
			"second_score":	8395
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4698,
			"primary_score":	999788,
			"second_score":	8394
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4704,
			"primary_score":	999788,
			"second_score":	8393
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4711,
			"primary_score":	999789,
			"second_score":	8392
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4716,
			"primary_score":	999789,
			"second_score":	8390
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4729,
			"primary_score":	999789,
			"second_score":	8389
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4731,
			"primary_score":	999796,
			"second_score":	8388
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4732,
			"primary_score":	999797,
			"second_score":	8385
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4740,
			"primary_score":	999790,
			"second_score":	8384
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4746,
			"primary_score":	999790,
			"second_score":	8383
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4935,
			"primary_score":	999881,
			"second_score":	3856
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4936,
			"primary_score":	999881,
			"second_score":	3855
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4938,
			"primary_score":	999881,
			"second_score":	3854
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4940,
			"primary_score":	999881,
			"second_score":	3850
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4941,
			"primary_score":	999904,
			"second_score":	4444
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4944,
			"primary_score":	999932,
			"second_score":	3849
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4945,
			"primary_score":	999934,
			"second_score":	3848
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4946,
			"primary_score":	999934,
			"second_score":	3847
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4948,
			"primary_score":	999934,
			"second_score":	3846
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4982,
			"primary_score":	999899,
			"second_score":	3843
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4992,
			"primary_score":	999899,
			"second_score":	3840
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4993,
			"primary_score":	999899,
			"second_score":	3836
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4994,
			"primary_score":	999899,
			"second_score":	3835
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4995,
			"primary_score":	999899,
			"second_score":	3834
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4996,
			"primary_score":	999899,
			"second_score":	3832
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4997,
			"primary_score":	999899,
			"second_score":	3828
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4998,
			"primary_score":	999899,
			"second_score":	3772
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	4999,
			"primary_score":	999900,
			"second_score":	3771
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5000,
			"primary_score":	999900,
			"second_score":	3768
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5002,
			"primary_score":	999899,
			"second_score":	3765
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5004,
			"primary_score":	999899,
			"second_score":	3760
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5023,
			"primary_score":	999881,
			"second_score":	2900
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5029,
			"primary_score":	999881,
			"second_score":	2799
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5030,
			"primary_score":	999881,
			"second_score":	2798
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5032,
			"primary_score":	999881,
			"second_score":	2797
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5033,
			"primary_score":	999881,
			"second_score":	2793
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5035,
			"primary_score":	999881,
			"second_score":	2792
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5041,
			"primary_score":	999848,
			"second_score":	6054
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5042,
			"primary_score":	999848,
			"second_score":	6053
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5044,
			"primary_score":	999848,
			"second_score":	6052
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5045,
			"primary_score":	999848,
			"second_score":	6050
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5046,
			"primary_score":	999848,
			"second_score":	6040
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5047,
			"primary_score":	999848,
			"second_score":	6039
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5048,
			"primary_score":	999848,
			"second_score":	6038
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5049,
			"primary_score":	999848,
			"second_score":	6036
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5050,
			"primary_score":	999848,
			"second_score":	6032
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5052,
			"primary_score":	999848,
			"second_score":	6031
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5058,
			"primary_score":	999848,
			"second_score":	5744
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5060,
			"primary_score":	999848,
			"second_score":	5743
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5061,
			"primary_score":	999848,
			"second_score":	5695
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5063,
			"primary_score":	999848,
			"second_score":	5687
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5064,
			"primary_score":	999848,
			"second_score":	5685
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5070,
			"primary_score":	999626,
			"second_score":	137592
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5072,
			"primary_score":	999626,
			"second_score":	137591
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5085,
			"primary_score":	999626,
			"second_score":	137590
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5097,
			"primary_score":	999626,
			"second_score":	137563
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5100,
			"primary_score":	999626,
			"second_score":	137562
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5105,
			"primary_score":	999626,
			"second_score":	137561
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5113,
			"primary_score":	999626,
			"second_score":	137593
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5115,
			"primary_score":	999626,
			"second_score":	137560
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5116,
			"primary_score":	999626,
			"second_score":	137559
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5117,
			"primary_score":	999626,
			"second_score":	137533
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5118,
			"primary_score":	999626,
			"second_score":	137532
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5119,
			"primary_score":	999626,
			"second_score":	137531
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5120,
			"primary_score":	999626,
			"second_score":	137497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5121,
			"primary_score":	999626,
			"second_score":	137494
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5129,
			"primary_score":	999626,
			"second_score":	137610
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5130,
			"primary_score":	999626,
			"second_score":	137609
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5131,
			"primary_score":	999626,
			"second_score":	137608
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5132,
			"primary_score":	999626,
			"second_score":	137607
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5133,
			"primary_score":	999626,
			"second_score":	137606
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5135,
			"primary_score":	999626,
			"second_score":	137605
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5182,
			"primary_score":	999626,
			"second_score":	137604
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5203,
			"primary_score":	999626,
			"second_score":	137603
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5205,
			"primary_score":	999626,
			"second_score":	137594
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5206,
			"primary_score":	999626,
			"second_score":	137493
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5582,
			"primary_score":	999997,
			"second_score":	7797
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5583,
			"primary_score":	999997,
			"second_score":	7796
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5584,
			"primary_score":	999997,
			"second_score":	7795
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5586,
			"primary_score":	999997,
			"second_score":	7794
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5587,
			"primary_score":	999997,
			"second_score":	7793
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5592,
			"primary_score":	999997,
			"second_score":	7792
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5593,
			"primary_score":	999997,
			"second_score":	7782
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5594,
			"primary_score":	999997,
			"second_score":	7781
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5595,
			"primary_score":	999997,
			"second_score":	7780
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5596,
			"primary_score":	999997,
			"second_score":	7778
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5597,
			"primary_score":	999997,
			"second_score":	7690
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5598,
			"primary_score":	999997,
			"second_score":	7689
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5600,
			"primary_score":	999997,
			"second_score":	7686
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5601,
			"primary_score":	999997,
			"second_score":	7685
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5602,
			"primary_score":	999997,
			"second_score":	7684
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5604,
			"primary_score":	999997,
			"second_score":	7679
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5605,
			"primary_score":	999997,
			"second_score":	7678
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5607,
			"primary_score":	999997,
			"second_score":	7672
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5609,
			"primary_score":	999997,
			"second_score":	7502
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	5610,
			"primary_score":	999997,
			"second_score":	7472
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6095,
			"primary_score":	999626,
			"second_score":	130182
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6096,
			"primary_score":	999626,
			"second_score":	130180
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6098,
			"primary_score":	999626,
			"second_score":	130179
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6100,
			"primary_score":	999626,
			"second_score":	130169
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6101,
			"primary_score":	999626,
			"second_score":	130168
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6102,
			"primary_score":	999626,
			"second_score":	130164
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6103,
			"primary_score":	999626,
			"second_score":	130163
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6104,
			"primary_score":	999626,
			"second_score":	130162
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6106,
			"primary_score":	999626,
			"second_score":	130157
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6112,
			"primary_score":	999626,
			"second_score":	127355
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6114,
			"primary_score":	999626,
			"second_score":	127345
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6116,
			"primary_score":	999626,
			"second_score":	127343
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6117,
			"primary_score":	999626,
			"second_score":	127342
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6118,
			"primary_score":	999626,
			"second_score":	127341
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6119,
			"primary_score":	999626,
			"second_score":	127339
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6120,
			"primary_score":	999626,
			"second_score":	127335
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6122,
			"primary_score":	999626,
			"second_score":	127334
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6123,
			"primary_score":	999626,
			"second_score":	127329
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6125,
			"primary_score":	999626,
			"second_score":	127327
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6126,
			"primary_score":	999626,
			"second_score":	127317
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6127,
			"primary_score":	999626,
			"second_score":	127316
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6128,
			"primary_score":	999626,
			"second_score":	127315
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6134,
			"primary_score":	999626,
			"second_score":	126925
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6136,
			"primary_score":	999626,
			"second_score":	126915
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6137,
			"primary_score":	999626,
			"second_score":	126914
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6138,
			"primary_score":	999626,
			"second_score":	126910
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6139,
			"primary_score":	999626,
			"second_score":	126812
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6141,
			"primary_score":	999626,
			"second_score":	126811
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6143,
			"primary_score":	999626,
			"second_score":	126809
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6145,
			"primary_score":	999626,
			"second_score":	126804
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6151,
			"primary_score":	999626,
			"second_score":	134291
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6153,
			"primary_score":	999626,
			"second_score":	134290
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6154,
			"primary_score":	999626,
			"second_score":	134289
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6167,
			"primary_score":	999626,
			"second_score":	135640
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6169,
			"primary_score":	999626,
			"second_score":	135639
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6170,
			"primary_score":	999626,
			"second_score":	135638
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6183,
			"primary_score":	999626,
			"second_score":	134780
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6185,
			"primary_score":	999626,
			"second_score":	134779
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6186,
			"primary_score":	999626,
			"second_score":	134778
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6199,
			"primary_score":	999626,
			"second_score":	134223
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6220,
			"primary_score":	999749,
			"second_score":	5050
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6258,
			"primary_score":	999626,
			"second_score":	134155
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6260,
			"primary_score":	999626,
			"second_score":	134154
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6261,
			"primary_score":	999684,
			"second_score":	2305
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6262,
			"primary_score":	999684,
			"second_score":	2304
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6265,
			"primary_score":	999626,
			"second_score":	134153
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6267,
			"primary_score":	999626,
			"second_score":	134152
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6268,
			"primary_score":	999626,
			"second_score":	134129
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6277,
			"primary_score":	999684,
			"second_score":	2464
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6279,
			"primary_score":	999626,
			"second_score":	134311
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6282,
			"primary_score":	999626,
			"second_score":	134310
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6283,
			"primary_score":	999626,
			"second_score":	134309
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6292,
			"primary_score":	999626,
			"second_score":	134128
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6293,
			"primary_score":	999626,
			"second_score":	134125
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6294,
			"primary_score":	999626,
			"second_score":	134124
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6327,
			"primary_score":	999770,
			"second_score":	17511
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6328,
			"primary_score":	999770,
			"second_score":	17510
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6329,
			"primary_score":	999770,
			"second_score":	17509
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6336,
			"primary_score":	999770,
			"second_score":	17505
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6337,
			"primary_score":	999770,
			"second_score":	17504
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6338,
			"primary_score":	999770,
			"second_score":	17503
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6339,
			"primary_score":	999770,
			"second_score":	17502
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6340,
			"primary_score":	999770,
			"second_score":	17501
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6341,
			"primary_score":	999770,
			"second_score":	17500
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6342,
			"primary_score":	999770,
			"second_score":	17499
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6343,
			"primary_score":	999770,
			"second_score":	17498
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6344,
			"primary_score":	999770,
			"second_score":	17497
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6345,
			"primary_score":	999770,
			"second_score":	17496
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6346,
			"primary_score":	999770,
			"second_score":	17495
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6347,
			"primary_score":	999770,
			"second_score":	17494
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6348,
			"primary_score":	999770,
			"second_score":	17493
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6349,
			"primary_score":	999770,
			"second_score":	17492
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6350,
			"primary_score":	999770,
			"second_score":	17491
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6351,
			"primary_score":	999770,
			"second_score":	17490
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6352,
			"primary_score":	999770,
			"second_score":	17489
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6353,
			"primary_score":	999770,
			"second_score":	17488
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6354,
			"primary_score":	999770,
			"second_score":	17487
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6355,
			"primary_score":	999770,
			"second_score":	17486
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6356,
			"primary_score":	999770,
			"second_score":	17485
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6357,
			"primary_score":	999770,
			"second_score":	17484
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6358,
			"primary_score":	999770,
			"second_score":	17483
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6359,
			"primary_score":	999770,
			"second_score":	17482
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6360,
			"primary_score":	999770,
			"second_score":	17481
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6361,
			"primary_score":	999770,
			"second_score":	17480
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6362,
			"primary_score":	999770,
			"second_score":	17479
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6372,
			"primary_score":	999782,
			"second_score":	6350
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6375,
			"primary_score":	999783,
			"second_score":	6349
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6378,
			"primary_score":	999783,
			"second_score":	6348
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6382,
			"primary_score":	999783,
			"second_score":	6347
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6609,
			"primary_score":	999626,
			"second_score":	134199
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6617,
			"primary_score":	999626,
			"second_score":	134107
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6618,
			"primary_score":	999626,
			"second_score":	134106
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6623,
			"primary_score":	999626,
			"second_score":	134105
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6633,
			"primary_score":	999626,
			"second_score":	134109
		}, {
			"file":	"Zend/zend_compile.c",
			"line":	6634,
			"primary_score":	999626,
			"second_score":	134108
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	32,
			"primary_score":	999626,
			"second_score":	6281
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	33,
			"primary_score":	999626,
			"second_score":	114317
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	35,
			"primary_score":	999626,
			"second_score":	6280
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	60,
			"primary_score":	999626,
			"second_score":	114100
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	171,
			"primary_score":	999626,
			"second_score":	114831
		}, {
			"file":	"Zend/zend_constants.c",
			"line":	174,
			"primary_score":	999626,
			"second_score":	114830
		}, {
			"file":	"Zend/zend_exceptions.c",
			"line":	73,
			"primary_score":	999626,
			"second_score":	119902
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	71,
			"primary_score":	999626,
			"second_score":	120087
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	72,
			"primary_score":	999626,
			"second_score":	120085
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	73,
			"primary_score":	999626,
			"second_score":	120083
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	74,
			"primary_score":	999626,
			"second_score":	120081
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	77,
			"primary_score":	999863,
			"second_score":	1423
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	78,
			"primary_score":	999863,
			"second_score":	1422
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	81,
			"primary_score":	999863,
			"second_score":	1420
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	177,
			"primary_score":	999626,
			"second_score":	119971
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	182,
			"primary_score":	999626,
			"second_score":	120089
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	184,
			"primary_score":	999626,
			"second_score":	120088
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	185,
			"primary_score":	999626,
			"second_score":	120080
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	273,
			"primary_score":	999801,
			"second_score":	320
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	275,
			"primary_score":	999801,
			"second_score":	319
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	276,
			"primary_score":	999911,
			"second_score":	318
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	277,
			"primary_score":	999911,
			"second_score":	316
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	278,
			"primary_score":	999911,
			"second_score":	315
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	279,
			"primary_score":	999825,
			"second_score":	1407
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	283,
			"primary_score":	999801,
			"second_score":	314
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	298,
			"primary_score":	999811,
			"second_score":	299
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	300,
			"primary_score":	999811,
			"second_score":	298
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	303,
			"primary_score":	999822,
			"second_score":	297
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	376,
			"primary_score":	999925,
			"second_score":	1428
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	378,
			"primary_score":	999925,
			"second_score":	1427
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	379,
			"primary_score":	999926,
			"second_score":	1426
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	384,
			"primary_score":	999925,
			"second_score":	1418
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	439,
			"primary_score":	999801,
			"second_score":	323
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	441,
			"primary_score":	999801,
			"second_score":	322
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	442,
			"primary_score":	999801,
			"second_score":	321
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	444,
			"primary_score":	999925,
			"second_score":	1140
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	510,
			"primary_score":	999972,
			"second_score":	1393
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	511,
			"primary_score":	999972,
			"second_score":	1392
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	513,
			"primary_score":	999972,
			"second_score":	1391
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	515,
			"primary_score":	999972,
			"second_score":	1390
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	533,
			"primary_score":	1000000,
			"second_score":	1389
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	534,
			"primary_score":	1000000,
			"second_score":	1387
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	535,
			"primary_score":	1000000,
			"second_score":	1386
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	546,
			"primary_score":	1000000,
			"second_score":	1344
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	602,
			"primary_score":	999626,
			"second_score":	123186
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	603,
			"primary_score":	999626,
			"second_score":	123185
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	604,
			"primary_score":	999626,
			"second_score":	123184
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	606,
			"primary_score":	999626,
			"second_score":	123183
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	611,
			"primary_score":	999626,
			"second_score":	123182
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	613,
			"primary_score":	999626,
			"second_score":	123181
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	629,
			"primary_score":	999626,
			"second_score":	123180
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	638,
			"primary_score":	999626,
			"second_score":	123179
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	868,
			"primary_score":	999858,
			"second_score":	1134
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	869,
			"primary_score":	999858,
			"second_score":	1133
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	871,
			"primary_score":	999858,
			"second_score":	1132
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	877,
			"primary_score":	999858,
			"second_score":	1131
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	912,
			"primary_score":	999997,
			"second_score":	1129
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	913,
			"primary_score":	999997,
			"second_score":	1128
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	916,
			"primary_score":	999999,
			"second_score":	1127
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	917,
			"primary_score":	999999,
			"second_score":	1124
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	925,
			"primary_score":	999997,
			"second_score":	1115
		}, {
			"file":	"Zend/zend_execute.c",
			"line":	956,
			"primary_score":	999937,
			"second_score":	1527
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	82,
			"primary_score":	999626,
			"second_score":	120039
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	83,
			"primary_score":	999626,
			"second_score":	120037
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	85,
			"primary_score":	999626,
			"second_score":	120036
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	86,
			"primary_score":	999626,
			"second_score":	121997
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	87,
			"primary_score":	999626,
			"second_score":	120033
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	88,
			"primary_score":	999626,
			"second_score":	120007
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	91,
			"primary_score":	999626,
			"second_score":	123402
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	93,
			"primary_score":	999626,
			"second_score":	123401
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	94,
			"primary_score":	999626,
			"second_score":	123399
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	97,
			"primary_score":	999626,
			"second_score":	123397
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	103,
			"primary_score":	999626,
			"second_score":	121017
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	105,
			"primary_score":	999626,
			"second_score":	121016
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	113,
			"primary_score":	999626,
			"second_score":	121015
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	155,
			"primary_score":	999626,
			"second_score":	121014
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	199,
			"primary_score":	999626,
			"second_score":	114926
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	201,
			"primary_score":	999626,
			"second_score":	114925
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	202,
			"primary_score":	999626,
			"second_score":	114924
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	203,
			"primary_score":	999626,
			"second_score":	114923
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	204,
			"primary_score":	999626,
			"second_score":	114878
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	217,
			"primary_score":	999626,
			"second_score":	123107
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	228,
			"primary_score":	999921,
			"second_score":	413
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	245,
			"primary_score":	999626,
			"second_score":	133579
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	247,
			"primary_score":	999626,
			"second_score":	133578
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	250,
			"primary_score":	999626,
			"second_score":	133577
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	265,
			"primary_score":	999626,
			"second_score":	133576
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	267,
			"primary_score":	999626,
			"second_score":	133574
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	268,
			"primary_score":	999626,
			"second_score":	133573
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	269,
			"primary_score":	999626,
			"second_score":	133572
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	274,
			"primary_score":	999626,
			"second_score":	120101
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	280,
			"primary_score":	999626,
			"second_score":	120100
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	286,
			"primary_score":	999626,
			"second_score":	119911
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	293,
			"primary_score":	999626,
			"second_score":	119910
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	297,
			"primary_score":	999626,
			"second_score":	119909
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	305,
			"primary_score":	999626,
			"second_score":	123323
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	327,
			"primary_score":	999626,
			"second_score":	123322
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	328,
			"primary_score":	999626,
			"second_score":	123321
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	333,
			"primary_score":	999626,
			"second_score":	122008
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	334,
			"primary_score":	999626,
			"second_score":	122007
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	336,
			"primary_score":	999626,
			"second_score":	122006
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	337,
			"primary_score":	999626,
			"second_score":	120137
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	338,
			"primary_score":	999626,
			"second_score":	120136
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	339,
			"primary_score":	999626,
			"second_score":	120135
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	341,
			"primary_score":	999626,
			"second_score":	120102
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	346,
			"primary_score":	999912,
			"second_score":	340
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	347,
			"primary_score":	999912,
			"second_score":	339
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	349,
			"primary_score":	999912,
			"second_score":	338
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	352,
			"primary_score":	999922,
			"second_score":	337
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	367,
			"primary_score":	999626,
			"second_score":	123333
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	369,
			"primary_score":	999626,
			"second_score":	123332
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	371,
			"primary_score":	999626,
			"second_score":	123327
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	372,
			"primary_score":	999626,
			"second_score":	123326
		}, {
			"file":	"Zend/zend_execute.h",
			"line":	373,
			"primary_score":	999626,
			"second_score":	123325
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	107,
			"primary_score":	999626,
			"second_score":	114865
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	119,
			"primary_score":	999626,
			"second_score":	114849
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	203,
			"primary_score":	999626,
			"second_score":	119410
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	206,
			"primary_score":	999626,
			"second_score":	119409
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	213,
			"primary_score":	999626,
			"second_score":	119472
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	214,
			"primary_score":	999626,
			"second_score":	119466
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	215,
			"primary_score":	999626,
			"second_score":	119465
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	216,
			"primary_score":	999626,
			"second_score":	119464
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	217,
			"primary_score":	999626,
			"second_score":	119461
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	219,
			"primary_score":	999626,
			"second_score":	119399
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	223,
			"primary_score":	999626,
			"second_score":	119396
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	229,
			"primary_score":	999626,
			"second_score":	118543
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	246,
			"primary_score":	999626,
			"second_score":	118537
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	247,
			"primary_score":	999626,
			"second_score":	118534
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	248,
			"primary_score":	999626,
			"second_score":	115011
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	250,
			"primary_score":	999626,
			"second_score":	115009
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	251,
			"primary_score":	999626,
			"second_score":	115003
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	254,
			"primary_score":	999626,
			"second_score":	115002
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	261,
			"primary_score":	999626,
			"second_score":	115001
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	268,
			"primary_score":	999626,
			"second_score":	115000
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	269,
			"primary_score":	999626,
			"second_score":	114996
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	270,
			"primary_score":	999626,
			"second_score":	114991
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	271,
			"primary_score":	999626,
			"second_score":	114982
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	272,
			"primary_score":	999626,
			"second_score":	114973
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	274,
			"primary_score":	999626,
			"second_score":	114971
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	284,
			"primary_score":	999626,
			"second_score":	114965
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	288,
			"primary_score":	999626,
			"second_score":	114964
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	289,
			"primary_score":	999626,
			"second_score":	114947
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	290,
			"primary_score":	999626,
			"second_score":	114930
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	293,
			"primary_score":	999626,
			"second_score":	114927
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	295,
			"primary_score":	999626,
			"second_score":	114877
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	298,
			"primary_score":	999626,
			"second_score":	114874
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	302,
			"primary_score":	999626,
			"second_score":	114873
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	303,
			"primary_score":	999626,
			"second_score":	114857
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	306,
			"primary_score":	999626,
			"second_score":	114841
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	311,
			"primary_score":	999626,
			"second_score":	114840
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	313,
			"primary_score":	999626,
			"second_score":	114838
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	314,
			"primary_score":	999626,
			"second_score":	114832
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	315,
			"primary_score":	999626,
			"second_score":	114092
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	317,
			"primary_score":	999626,
			"second_score":	114090
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	322,
			"primary_score":	999626,
			"second_score":	114084
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	324,
			"primary_score":	999626,
			"second_score":	114015
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	325,
			"primary_score":	999626,
			"second_score":	113994
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	326,
			"primary_score":	999626,
			"second_score":	113990
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	327,
			"primary_score":	999626,
			"second_score":	113988
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	328,
			"primary_score":	999626,
			"second_score":	113986
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	329,
			"primary_score":	999626,
			"second_score":	113918
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	333,
			"primary_score":	999626,
			"second_score":	113917
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	335,
			"primary_score":	999626,
			"second_score":	113915
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	337,
			"primary_score":	999626,
			"second_score":	113910
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	397,
			"primary_score":	999626,
			"second_score":	125149
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	398,
			"primary_score":	999626,
			"second_score":	125148
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	407,
			"primary_score":	999626,
			"second_score":	125146
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	411,
			"primary_score":	999626,
			"second_score":	125145
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	412,
			"primary_score":	999626,
			"second_score":	125144
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	430,
			"primary_score":	999626,
			"second_score":	115127
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	431,
			"primary_score":	999626,
			"second_score":	115125
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	432,
			"primary_score":	999626,
			"second_score":	115123
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	434,
			"primary_score":	999626,
			"second_score":	115122
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	435,
			"primary_score":	999626,
			"second_score":	115121
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	436,
			"primary_score":	999626,
			"second_score":	115108
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	437,
			"primary_score":	999626,
			"second_score":	115074
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	440,
			"primary_score":	999626,
			"second_score":	115881
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	442,
			"primary_score":	999626,
			"second_score":	115880
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	443,
			"primary_score":	999626,
			"second_score":	115878
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	446,
			"primary_score":	999626,
			"second_score":	115876
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	456,
			"primary_score":	999626,
			"second_score":	15282
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	457,
			"primary_score":	999626,
			"second_score":	15280
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	458,
			"primary_score":	999626,
			"second_score":	15278
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	459,
			"primary_score":	999626,
			"second_score":	15276
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	460,
			"primary_score":	999626,
			"second_score":	17641
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	461,
			"primary_score":	999626,
			"second_score":	17639
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	753,
			"primary_score":	999918,
			"second_score":	457
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	754,
			"primary_score":	999918,
			"second_score":	456
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	755,
			"primary_score":	999918,
			"second_score":	455
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	756,
			"primary_score":	999918,
			"second_score":	454
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	757,
			"primary_score":	999918,
			"second_score":	453
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	758,
			"primary_score":	999918,
			"second_score":	452
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	759,
			"primary_score":	999918,
			"second_score":	451
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	760,
			"primary_score":	999918,
			"second_score":	450
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	761,
			"primary_score":	999918,
			"second_score":	449
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	762,
			"primary_score":	999918,
			"second_score":	448
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	763,
			"primary_score":	999918,
			"second_score":	447
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	765,
			"primary_score":	999918,
			"second_score":	446
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	767,
			"primary_score":	999918,
			"second_score":	445
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	771,
			"primary_score":	999918,
			"second_score":	444
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	775,
			"primary_score":	999918,
			"second_score":	443
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	784,
			"primary_score":	999918,
			"second_score":	442
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	785,
			"primary_score":	999921,
			"second_score":	441
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	786,
			"primary_score":	999921,
			"second_score":	440
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	787,
			"primary_score":	999921,
			"second_score":	439
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	788,
			"primary_score":	999921,
			"second_score":	438
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	797,
			"primary_score":	999918,
			"second_score":	437
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	826,
			"primary_score":	999920,
			"second_score":	436
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	827,
			"primary_score":	999920,
			"second_score":	435
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	828,
			"primary_score":	999920,
			"second_score":	434
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	829,
			"primary_score":	999920,
			"second_score":	433
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	830,
			"primary_score":	999920,
			"second_score":	432
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	831,
			"primary_score":	999920,
			"second_score":	431
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	836,
			"primary_score":	999920,
			"second_score":	430
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	848,
			"primary_score":	999921,
			"second_score":	429
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	850,
			"primary_score":	999921,
			"second_score":	427
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	851,
			"primary_score":	999944,
			"second_score":	426
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	853,
			"primary_score":	999944,
			"second_score":	425
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	883,
			"primary_score":	999944,
			"second_score":	424
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	890,
			"primary_score":	999944,
			"second_score":	422
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	891,
			"primary_score":	999944,
			"second_score":	421
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	892,
			"primary_score":	999944,
			"second_score":	419
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	898,
			"primary_score":	999944,
			"second_score":	418
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	901,
			"primary_score":	999921,
			"second_score":	416
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	902,
			"primary_score":	999921,
			"second_score":	414
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	904,
			"primary_score":	999921,
			"second_score":	412
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	905,
			"primary_score":	999921,
			"second_score":	411
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	907,
			"primary_score":	999921,
			"second_score":	410
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	909,
			"primary_score":	999921,
			"second_score":	409
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	910,
			"primary_score":	999921,
			"second_score":	408
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	911,
			"primary_score":	999938,
			"second_score":	407
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	916,
			"primary_score":	999921,
			"second_score":	406
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	917,
			"primary_score":	999941,
			"second_score":	405
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	920,
			"primary_score":	999941,
			"second_score":	404
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	922,
			"primary_score":	999941,
			"second_score":	403
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	923,
			"primary_score":	999941,
			"second_score":	401
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	938,
			"primary_score":	999921,
			"second_score":	399
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	939,
			"primary_score":	999921,
			"second_score":	398
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	941,
			"primary_score":	999921,
			"second_score":	397
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	942,
			"primary_score":	999922,
			"second_score":	396
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	943,
			"primary_score":	999922,
			"second_score":	395
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	944,
			"primary_score":	999922,
			"second_score":	394
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	947,
			"primary_score":	999922,
			"second_score":	393
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	950,
			"primary_score":	999922,
			"second_score":	392
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	951,
			"primary_score":	999922,
			"second_score":	391
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	952,
			"primary_score":	999922,
			"second_score":	390
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	953,
			"primary_score":	999922,
			"second_score":	389
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	954,
			"primary_score":	999922,
			"second_score":	388
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	955,
			"primary_score":	999922,
			"second_score":	387
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	956,
			"primary_score":	999922,
			"second_score":	237
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	967,
			"primary_score":	999922,
			"second_score":	236
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	968,
			"primary_score":	999922,
			"second_score":	235
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	969,
			"primary_score":	999922,
			"second_score":	234
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	970,
			"primary_score":	999922,
			"second_score":	233
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1013,
			"primary_score":	999921,
			"second_score":	232
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1015,
			"primary_score":	999921,
			"second_score":	213
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1016,
			"primary_score":	999941,
			"second_score":	212
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1018,
			"primary_score":	999921,
			"second_score":	190
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1019,
			"primary_score":	999921,
			"second_score":	189
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1020,
			"primary_score":	999921,
			"second_score":	188
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1021,
			"primary_score":	999921,
			"second_score":	187
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1023,
			"primary_score":	999921,
			"second_score":	186
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1026,
			"primary_score":	999921,
			"second_score":	185
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1032,
			"primary_score":	999782,
			"second_score":	1322
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1033,
			"primary_score":	999782,
			"second_score":	1321
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1034,
			"primary_score":	999782,
			"second_score":	1320
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1035,
			"primary_score":	999782,
			"second_score":	1319
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1036,
			"primary_score":	999782,
			"second_score":	1318
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1037,
			"primary_score":	999782,
			"second_score":	1317
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1038,
			"primary_score":	999782,
			"second_score":	1316
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1039,
			"primary_score":	999782,
			"second_score":	1315
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1040,
			"primary_score":	999782,
			"second_score":	1314
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1041,
			"primary_score":	999782,
			"second_score":	1313
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1042,
			"primary_score":	999782,
			"second_score":	1312
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1043,
			"primary_score":	999782,
			"second_score":	1311
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1045,
			"primary_score":	999782,
			"second_score":	1310
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1046,
			"primary_score":	999814,
			"second_score":	1309
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1047,
			"primary_score":	999814,
			"second_score":	1308
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1048,
			"primary_score":	999814,
			"second_score":	1307
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1066,
			"primary_score":	999782,
			"second_score":	1306
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1067,
			"primary_score":	999783,
			"second_score":	1295
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1070,
			"primary_score":	999783,
			"second_score":	1294
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1155,
			"primary_score":	999626,
			"second_score":	122091
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1156,
			"primary_score":	999626,
			"second_score":	122090
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1157,
			"primary_score":	999626,
			"second_score":	122089
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1158,
			"primary_score":	999626,
			"second_score":	122088
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1159,
			"primary_score":	999626,
			"second_score":	122087
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1161,
			"primary_score":	999626,
			"second_score":	122086
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1169,
			"primary_score":	999626,
			"second_score":	122085
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1170,
			"primary_score":	999626,
			"second_score":	122084
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1172,
			"primary_score":	999626,
			"second_score":	122083
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1176,
			"primary_score":	999626,
			"second_score":	122082
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1177,
			"primary_score":	999626,
			"second_score":	122081
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1178,
			"primary_score":	999626,
			"second_score":	122080
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1179,
			"primary_score":	999626,
			"second_score":	119593
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1181,
			"primary_score":	999626,
			"second_score":	119592
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1182,
			"primary_score":	999626,
			"second_score":	119591
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1183,
			"primary_score":	999626,
			"second_score":	119590
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1184,
			"primary_score":	999626,
			"second_score":	119589
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1185,
			"primary_score":	999626,
			"second_score":	119588
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1187,
			"primary_score":	999626,
			"second_score":	119587
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1188,
			"primary_score":	999626,
			"second_score":	119586
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1189,
			"primary_score":	999626,
			"second_score":	119585
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1190,
			"primary_score":	999626,
			"second_score":	119584
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1193,
			"primary_score":	999626,
			"second_score":	119583
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1195,
			"primary_score":	999626,
			"second_score":	119582
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1197,
			"primary_score":	999626,
			"second_score":	119214
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1198,
			"primary_score":	999626,
			"second_score":	119213
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1199,
			"primary_score":	999626,
			"second_score":	119212
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1202,
			"primary_score":	999626,
			"second_score":	119211
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1210,
			"primary_score":	999626,
			"second_score":	119180
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1211,
			"primary_score":	999626,
			"second_score":	119179
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1212,
			"primary_score":	999626,
			"second_score":	119178
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1213,
			"primary_score":	999626,
			"second_score":	119177
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1214,
			"primary_score":	999626,
			"second_score":	119088
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1215,
			"primary_score":	999626,
			"second_score":	119069
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1216,
			"primary_score":	999626,
			"second_score":	119068
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1220,
			"primary_score":	999626,
			"second_score":	119067
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1223,
			"primary_score":	999626,
			"second_score":	119066
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1235,
			"primary_score":	999626,
			"second_score":	122093
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1237,
			"primary_score":	999626,
			"second_score":	122092
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1238,
			"primary_score":	999626,
			"second_score":	119065
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1242,
			"primary_score":	999626,
			"second_score":	119064
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1248,
			"primary_score":	999626,
			"second_score":	122094
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1510,
			"primary_score":	999626,
			"second_score":	103787
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1583,
			"primary_score":	999814,
			"second_score":	1325
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1584,
			"primary_score":	999814,
			"second_score":	1324
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1586,
			"primary_score":	999814,
			"second_score":	1323
		}, {
			"file":	"Zend/zend_execute_API.c",
			"line":	1600,
			"primary_score":	999814,
			"second_score":	1293
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	182,
			"primary_score":	999626,
			"second_score":	14738
		}, {
			"file":	"Zend/zend_extensions.c",
			"line":	183,
			"primary_score":	999626,
			"second_score":	14735
		}, {
			"file":	"Zend/zend_float.c",
			"line":	44,
			"primary_score":	999626,
			"second_score":	113914
		}, {
			"file":	"Zend/zend_float.c",
			"line":	45,
			"primary_score":	999626,
			"second_score":	113913
		}, {
			"file":	"Zend/zend_float.c",
			"line":	48,
			"primary_score":	999626,
			"second_score":	113911
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	35,
			"primary_score":	999626,
			"second_score":	3139
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	36,
			"primary_score":	999626,
			"second_score":	3138
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	37,
			"primary_score":	999626,
			"second_score":	3137
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	84,
			"primary_score":	999626,
			"second_score":	3140
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	132,
			"primary_score":	999626,
			"second_score":	115913
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	142,
			"primary_score":	999626,
			"second_score":	115912
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	143,
			"primary_score":	999853,
			"second_score":	199
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	144,
			"primary_score":	999853,
			"second_score":	191
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	147,
			"primary_score":	999626,
			"second_score":	115911
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	149,
			"primary_score":	999626,
			"second_score":	115910
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	150,
			"primary_score":	999626,
			"second_score":	118586
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	152,
			"primary_score":	999626,
			"second_score":	118585
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	153,
			"primary_score":	999626,
			"second_score":	118584
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	155,
			"primary_score":	999626,
			"second_score":	118583
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	156,
			"primary_score":	999626,
			"second_score":	118643
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	157,
			"primary_score":	999626,
			"second_score":	118582
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	158,
			"primary_score":	999626,
			"second_score":	118581
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	159,
			"primary_score":	999626,
			"second_score":	118580
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	176,
			"primary_score":	999626,
			"second_score":	118579
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	177,
			"primary_score":	999626,
			"second_score":	118578
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	178,
			"primary_score":	999626,
			"second_score":	118577
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	179,
			"primary_score":	999626,
			"second_score":	118576
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	181,
			"primary_score":	999626,
			"second_score":	118575
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	183,
			"primary_score":	999626,
			"second_score":	118574
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	184,
			"primary_score":	999626,
			"second_score":	118573
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	186,
			"primary_score":	999626,
			"second_score":	118572
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	187,
			"primary_score":	999626,
			"second_score":	118571
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	188,
			"primary_score":	999626,
			"second_score":	118570
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	195,
			"primary_score":	999853,
			"second_score":	104
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	197,
			"primary_score":	999853,
			"second_score":	103
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	202,
			"primary_score":	999853,
			"second_score":	102
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	204,
			"primary_score":	999853,
			"second_score":	101
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	205,
			"primary_score":	999853,
			"second_score":	100
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	206,
			"primary_score":	999853,
			"second_score":	1076
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	207,
			"primary_score":	999853,
			"second_score":	1075
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	208,
			"primary_score":	999853,
			"second_score":	1074
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	210,
			"primary_score":	999853,
			"second_score":	1073
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	212,
			"primary_score":	999855,
			"second_score":	1072
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	213,
			"primary_score":	999855,
			"second_score":	1071
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	214,
			"primary_score":	999855,
			"second_score":	1070
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	232,
			"primary_score":	999853,
			"second_score":	1069
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	233,
			"primary_score":	999853,
			"second_score":	1068
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	234,
			"primary_score":	999853,
			"second_score":	1067
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	235,
			"primary_score":	999853,
			"second_score":	1066
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	237,
			"primary_score":	999853,
			"second_score":	1065
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	239,
			"primary_score":	999853,
			"second_score":	1064
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	240,
			"primary_score":	999853,
			"second_score":	1063
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	242,
			"primary_score":	999853,
			"second_score":	1062
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	243,
			"primary_score":	999853,
			"second_score":	1061
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	244,
			"primary_score":	999853,
			"second_score":	1060
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	251,
			"primary_score":	999626,
			"second_score":	115119
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	253,
			"primary_score":	999626,
			"second_score":	115118
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	264,
			"primary_score":	999626,
			"second_score":	115117
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	265,
			"primary_score":	999626,
			"second_score":	115116
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	266,
			"primary_score":	999626,
			"second_score":	115110
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	653,
			"primary_score":	999626,
			"second_score":	113723
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	655,
			"primary_score":	999626,
			"second_score":	113722
		}, {
			"file":	"Zend/zend_gc.c",
			"line":	728,
			"primary_score":	999626,
			"second_score":	113721
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	182,
			"primary_score":	999626,
			"second_score":	115875
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	183,
			"primary_score":	999626,
			"second_score":	115914
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	189,
			"primary_score":	999626,
			"second_score":	115115
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	190,
			"primary_score":	999626,
			"second_score":	115114
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	191,
			"primary_score":	999626,
			"second_score":	115113
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	192,
			"primary_score":	999626,
			"second_score":	115112
		}, {
			"file":	"Zend/zend_gc.h",
			"line":	193,
			"primary_score":	999626,
			"second_score":	115111
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	103,
			"primary_score":	999740,
			"second_score":	17112
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	197,
			"primary_score":	999626,
			"second_score":	133787
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	198,
			"primary_score":	999626,
			"second_score":	133786
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	199,
			"primary_score":	999626,
			"second_score":	133785
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	201,
			"primary_score":	999626,
			"second_score":	133784
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	203,
			"primary_score":	999626,
			"second_score":	133783
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	210,
			"primary_score":	999626,
			"second_score":	144128
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	212,
			"primary_score":	999626,
			"second_score":	133780
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	213,
			"primary_score":	999626,
			"second_score":	133673
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	215,
			"primary_score":	999626,
			"second_score":	133672
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	216,
			"primary_score":	999626,
			"second_score":	133671
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	217,
			"primary_score":	999626,
			"second_score":	133670
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	220,
			"primary_score":	999626,
			"second_score":	133668
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	233,
			"primary_score":	999666,
			"second_score":	28696
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	243,
			"primary_score":	999626,
			"second_score":	143902
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	250,
			"primary_score":	999626,
			"second_score":	143901
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	251,
			"primary_score":	999626,
			"second_score":	143797
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	254,
			"primary_score":	999626,
			"second_score":	143796
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	255,
			"primary_score":	999626,
			"second_score":	143795
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	257,
			"primary_score":	999626,
			"second_score":	143794
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	258,
			"primary_score":	999626,
			"second_score":	143793
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	259,
			"primary_score":	999626,
			"second_score":	143788
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	260,
			"primary_score":	999626,
			"second_score":	143787
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	261,
			"primary_score":	999626,
			"second_score":	143783
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	262,
			"primary_score":	999626,
			"second_score":	143782
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	265,
			"primary_score":	999626,
			"second_score":	143781
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	266,
			"primary_score":	999626,
			"second_score":	143779
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	267,
			"primary_score":	999626,
			"second_score":	143770
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	268,
			"primary_score":	999626,
			"second_score":	143769
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	270,
			"primary_score":	999626,
			"second_score":	143767
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	271,
			"primary_score":	999626,
			"second_score":	143766
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	272,
			"primary_score":	999626,
			"second_score":	143764
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	376,
			"primary_score":	999626,
			"second_score":	127204
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	401,
			"primary_score":	999626,
			"second_score":	127203
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	415,
			"primary_score":	999626,
			"second_score":	127085
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	426,
			"primary_score":	999626,
			"second_score":	127066
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	476,
			"primary_score":	999626,
			"second_score":	47497
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	477,
			"primary_score":	999626,
			"second_score":	47496
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	479,
			"primary_score":	999626,
			"second_score":	47495
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	481,
			"primary_score":	999626,
			"second_score":	47494
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	482,
			"primary_score":	999626,
			"second_score":	47493
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	484,
			"primary_score":	999626,
			"second_score":	47477
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	486,
			"primary_score":	999626,
			"second_score":	47476
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	487,
			"primary_score":	999626,
			"second_score":	47475
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	488,
			"primary_score":	999626,
			"second_score":	47474
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	492,
			"primary_score":	999626,
			"second_score":	47473
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	493,
			"primary_score":	999626,
			"second_score":	47471
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	494,
			"primary_score":	999626,
			"second_score":	47470
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	496,
			"primary_score":	999626,
			"second_score":	47521
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	498,
			"primary_score":	999626,
			"second_score":	47469
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	499,
			"primary_score":	999626,
			"second_score":	51848
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	501,
			"primary_score":	999626,
			"second_score":	47468
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	502,
			"primary_score":	999626,
			"second_score":	50435
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	507,
			"primary_score":	999626,
			"second_score":	47466
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	508,
			"primary_score":	999626,
			"second_score":	47465
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	512,
			"primary_score":	999626,
			"second_score":	47464
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	515,
			"primary_score":	999626,
			"second_score":	47462
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	516,
			"primary_score":	999626,
			"second_score":	47461
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	518,
			"primary_score":	999626,
			"second_score":	47457
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	521,
			"primary_score":	999626,
			"second_score":	47455
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	522,
			"primary_score":	999626,
			"second_score":	47454
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	523,
			"primary_score":	999626,
			"second_score":	47452
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	524,
			"primary_score":	999626,
			"second_score":	47451
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	526,
			"primary_score":	999626,
			"second_score":	47526
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	534,
			"primary_score":	999626,
			"second_score":	3133
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	536,
			"primary_score":	999626,
			"second_score":	3132
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	538,
			"primary_score":	999626,
			"second_score":	3131
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	540,
			"primary_score":	999626,
			"second_score":	3130
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	541,
			"primary_score":	999626,
			"second_score":	3129
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	542,
			"primary_score":	999626,
			"second_score":	3122
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	543,
			"primary_score":	999626,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	544,
			"primary_score":	999626,
			"second_score":	3120
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	545,
			"primary_score":	999626,
			"second_score":	3257
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	547,
			"primary_score":	999626,
			"second_score":	3119
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	548,
			"primary_score":	999626,
			"second_score":	3118
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	550,
			"primary_score":	999626,
			"second_score":	3117
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	552,
			"primary_score":	999626,
			"second_score":	3116
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	553,
			"primary_score":	999626,
			"second_score":	3115
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	556,
			"primary_score":	999626,
			"second_score":	3114
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	599,
			"primary_score":	999626,
			"second_score":	3601
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	601,
			"primary_score":	999626,
			"second_score":	3600
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	602,
			"primary_score":	999626,
			"second_score":	3598
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	603,
			"primary_score":	999626,
			"second_score":	3914
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	605,
			"primary_score":	999626,
			"second_score":	3597
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	607,
			"primary_score":	999626,
			"second_score":	3596
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	608,
			"primary_score":	999626,
			"second_score":	3595
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	610,
			"primary_score":	999626,
			"second_score":	3594
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	611,
			"primary_score":	999626,
			"second_score":	53042
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	616,
			"primary_score":	999626,
			"second_score":	3593
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	617,
			"primary_score":	999626,
			"second_score":	52984
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	620,
			"primary_score":	999626,
			"second_score":	3592
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	622,
			"primary_score":	999626,
			"second_score":	3591
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	623,
			"primary_score":	999626,
			"second_score":	3590
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	625,
			"primary_score":	999626,
			"second_score":	50398
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	627,
			"primary_score":	999626,
			"second_score":	3589
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	628,
			"primary_score":	999626,
			"second_score":	3588
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	630,
			"primary_score":	999626,
			"second_score":	3587
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	631,
			"primary_score":	999626,
			"second_score":	3586
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	633,
			"primary_score":	999626,
			"second_score":	3584
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	634,
			"primary_score":	999626,
			"second_score":	50391
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	636,
			"primary_score":	999626,
			"second_score":	3583
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	637,
			"primary_score":	999626,
			"second_score":	3582
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	639,
			"primary_score":	999626,
			"second_score":	3581
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	640,
			"primary_score":	999626,
			"second_score":	3580
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	642,
			"primary_score":	999626,
			"second_score":	3579
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	665,
			"primary_score":	999626,
			"second_score":	103756
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	667,
			"primary_score":	999626,
			"second_score":	103755
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	669,
			"primary_score":	999626,
			"second_score":	103754
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	670,
			"primary_score":	999626,
			"second_score":	103753
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	671,
			"primary_score":	999626,
			"second_score":	50410
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	672,
			"primary_score":	999626,
			"second_score":	47442
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	675,
			"primary_score":	999626,
			"second_score":	47441
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	676,
			"primary_score":	999626,
			"second_score":	47440
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	679,
			"primary_score":	999626,
			"second_score":	47439
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	693,
			"primary_score":	999626,
			"second_score":	119301
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	695,
			"primary_score":	999626,
			"second_score":	119300
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	697,
			"primary_score":	999626,
			"second_score":	119299
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	698,
			"primary_score":	999626,
			"second_score":	119297
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	699,
			"primary_score":	999626,
			"second_score":	119296
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	711,
			"primary_score":	999626,
			"second_score":	119295
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	717,
			"primary_score":	999626,
			"second_score":	6014
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	719,
			"primary_score":	999626,
			"second_score":	6013
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	721,
			"primary_score":	999626,
			"second_score":	6012
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	722,
			"primary_score":	999626,
			"second_score":	6010
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	723,
			"primary_score":	999626,
			"second_score":	6009
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	724,
			"primary_score":	999626,
			"second_score":	3565
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	726,
			"primary_score":	999626,
			"second_score":	3562
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	727,
			"primary_score":	999626,
			"second_score":	3602
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	729,
			"primary_score":	999626,
			"second_score":	3561
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	731,
			"primary_score":	999626,
			"second_score":	3560
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	735,
			"primary_score":	999626,
			"second_score":	3559
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	775,
			"primary_score":	999626,
			"second_score":	114829
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	777,
			"primary_score":	999626,
			"second_score":	114828
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	779,
			"primary_score":	999626,
			"second_score":	119457
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	780,
			"primary_score":	999626,
			"second_score":	114825
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	781,
			"primary_score":	999626,
			"second_score":	114824
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	782,
			"primary_score":	999626,
			"second_score":	114101
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	784,
			"primary_score":	999626,
			"second_score":	114099
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	785,
			"primary_score":	999626,
			"second_score":	114098
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	786,
			"primary_score":	999626,
			"second_score":	114097
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	787,
			"primary_score":	999626,
			"second_score":	114338
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	789,
			"primary_score":	999626,
			"second_score":	114096
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	790,
			"primary_score":	999626,
			"second_score":	114095
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	793,
			"primary_score":	999626,
			"second_score":	119403
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	898,
			"primary_score":	999626,
			"second_score":	97863
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	899,
			"primary_score":	999626,
			"second_score":	97862
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	900,
			"primary_score":	999626,
			"second_score":	97861
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	902,
			"primary_score":	999626,
			"second_score":	97860
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	904,
			"primary_score":	999626,
			"second_score":	97859
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	905,
			"primary_score":	999626,
			"second_score":	97845
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	907,
			"primary_score":	999626,
			"second_score":	97844
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	908,
			"primary_score":	999626,
			"second_score":	97843
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	909,
			"primary_score":	999626,
			"second_score":	97840
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	911,
			"primary_score":	999626,
			"second_score":	97839
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	912,
			"primary_score":	999626,
			"second_score":	97838
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	914,
			"primary_score":	999626,
			"second_score":	97841
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	916,
			"primary_score":	999626,
			"second_score":	138643
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	997,
			"primary_score":	999626,
			"second_score":	114273
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	998,
			"primary_score":	999626,
			"second_score":	114272
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1000,
			"primary_score":	999626,
			"second_score":	114271
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1002,
			"primary_score":	999626,
			"second_score":	114270
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1004,
			"primary_score":	999626,
			"second_score":	114269
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1005,
			"primary_score":	999626,
			"second_score":	114268
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1006,
			"primary_score":	999626,
			"second_score":	114267
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1007,
			"primary_score":	999626,
			"second_score":	114266
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1008,
			"primary_score":	999626,
			"second_score":	114265
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1038,
			"primary_score":	999626,
			"second_score":	119401
		}, {
			"file":	"Zend/zend_hash.c",
			"line":	1040,
			"primary_score":	999626,
			"second_score":	119400
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	263,
			"primary_score":	999626,
			"second_score":	47492
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	266,
			"primary_score":	999626,
			"second_score":	47491
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	267,
			"primary_score":	999626,
			"second_score":	47490
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	268,
			"primary_score":	999626,
			"second_score":	47489
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	269,
			"primary_score":	999626,
			"second_score":	47488
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	270,
			"primary_score":	999626,
			"second_score":	47487
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	271,
			"primary_score":	999626,
			"second_score":	47486
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	272,
			"primary_score":	999626,
			"second_score":	47485
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	273,
			"primary_score":	999626,
			"second_score":	47484
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	274,
			"primary_score":	999626,
			"second_score":	47483
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	276,
			"primary_score":	999626,
			"second_score":	47482
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	278,
			"primary_score":	999626,
			"second_score":	48941
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	279,
			"primary_score":	999626,
			"second_score":	47696
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	280,
			"primary_score":	999626,
			"second_score":	47695
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	281,
			"primary_score":	999626,
			"second_score":	47694
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	282,
			"primary_score":	999626,
			"second_score":	47481
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	283,
			"primary_score":	999626,
			"second_score":	47480
		}, {
			"file":	"Zend/zend_hash.h",
			"line":	287,
			"primary_score":	999626,
			"second_score":	47478
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	39,
			"primary_score":	999626,
			"second_score":	3564
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	40,
			"primary_score":	999626,
			"second_score":	3604
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	42,
			"primary_score":	999626,
			"second_score":	3563
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	105,
			"primary_score":	999626,
			"second_score":	3243
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	106,
			"primary_score":	999626,
			"second_score":	3216
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	107,
			"primary_score":	999626,
			"second_score":	3215
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	121,
			"primary_score":	999626,
			"second_score":	113713
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	127,
			"primary_score":	999626,
			"second_score":	113712
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	226,
			"primary_score":	999626,
			"second_score":	6015
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	384,
			"primary_score":	999626,
			"second_score":	97866
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	385,
			"primary_score":	999626,
			"second_score":	97865
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	387,
			"primary_score":	999626,
			"second_score":	97864
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	388,
			"primary_score":	999626,
			"second_score":	97837
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	392,
			"primary_score":	999626,
			"second_score":	97836
		}, {
			"file":	"Zend/zend_ini.c",
			"line":	395,
			"primary_score":	999626,
			"second_score":	97835
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	36,
			"primary_score":	999943,
			"second_score":	491
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	37,
			"primary_score":	999943,
			"second_score":	490
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	38,
			"primary_score":	999943,
			"second_score":	489
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	39,
			"primary_score":	999943,
			"second_score":	488
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	40,
			"primary_score":	999943,
			"second_score":	487
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	42,
			"primary_score":	999943,
			"second_score":	486
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	44,
			"primary_score":	999943,
			"second_score":	485
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	45,
			"primary_score":	999943,
			"second_score":	484
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	47,
			"primary_score":	999943,
			"second_score":	483
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	49,
			"primary_score":	999943,
			"second_score":	482
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	50,
			"primary_score":	999943,
			"second_score":	481
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	51,
			"primary_score":	999943,
			"second_score":	480
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	52,
			"primary_score":	999943,
			"second_score":	479
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	53,
			"primary_score":	999943,
			"second_score":	478
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	54,
			"primary_score":	999943,
			"second_score":	477
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	55,
			"primary_score":	999943,
			"second_score":	476
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	57,
			"primary_score":	999943,
			"second_score":	475
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	64,
			"primary_score":	999943,
			"second_score":	474
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	66,
			"primary_score":	999943,
			"second_score":	473
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	67,
			"primary_score":	999943,
			"second_score":	472
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	70,
			"primary_score":	999943,
			"second_score":	471
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	71,
			"primary_score":	999943,
			"second_score":	470
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	75,
			"primary_score":	999943,
			"second_score":	469
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	84,
			"primary_score":	999956,
			"second_score":	468
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	86,
			"primary_score":	999943,
			"second_score":	467
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	87,
			"primary_score":	999943,
			"second_score":	466
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	88,
			"primary_score":	999945,
			"second_score":	465
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	96,
			"primary_score":	999943,
			"second_score":	459
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	97,
			"primary_score":	999943,
			"second_score":	458
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	99,
			"primary_score":	999943,
			"second_score":	184
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	108,
			"primary_score":	999943,
			"second_score":	183
		}, {
			"file":	"Zend/zend_interfaces.c",
			"line":	114,
			"primary_score":	999957,
			"second_score":	182
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3151,
			"primary_score":	999626,
			"second_score":	134073
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3153,
			"primary_score":	999626,
			"second_score":	134072
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3155,
			"primary_score":	999626,
			"second_score":	134071
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3157,
			"primary_score":	999626,
			"second_score":	134070
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3214,
			"primary_score":	999626,
			"second_score":	143502
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3217,
			"primary_score":	999626,
			"second_score":	143501
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3220,
			"primary_score":	999626,
			"second_score":	143500
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3222,
			"primary_score":	999626,
			"second_score":	143499
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3223,
			"primary_score":	999626,
			"second_score":	143498
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3224,
			"primary_score":	999626,
			"second_score":	143497
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3226,
			"primary_score":	999626,
			"second_score":	143496
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3228,
			"primary_score":	999626,
			"second_score":	143495
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3231,
			"primary_score":	999626,
			"second_score":	143494
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3232,
			"primary_score":	999626,
			"second_score":	143493
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3233,
			"primary_score":	999626,
			"second_score":	143492
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3245,
			"primary_score":	999626,
			"second_score":	143491
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3246,
			"primary_score":	999626,
			"second_score":	143490
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3247,
			"primary_score":	999626,
			"second_score":	143489
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3250,
			"primary_score":	999626,
			"second_score":	143488
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3251,
			"primary_score":	999626,
			"second_score":	143487
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3252,
			"primary_score":	999626,
			"second_score":	143486
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3258,
			"primary_score":	999626,
			"second_score":	143485
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3262,
			"primary_score":	999626,
			"second_score":	143484
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3267,
			"primary_score":	999626,
			"second_score":	143483
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3269,
			"primary_score":	999626,
			"second_score":	143482
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3271,
			"primary_score":	999626,
			"second_score":	143481
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3272,
			"primary_score":	999626,
			"second_score":	143480
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3273,
			"primary_score":	999626,
			"second_score":	143479
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3274,
			"primary_score":	999626,
			"second_score":	143478
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3281,
			"primary_score":	999626,
			"second_score":	143477
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3282,
			"primary_score":	999626,
			"second_score":	143476
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3284,
			"primary_score":	999626,
			"second_score":	143475
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3294,
			"primary_score":	999626,
			"second_score":	134093
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3297,
			"primary_score":	999626,
			"second_score":	134092
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3362,
			"primary_score":	999626,
			"second_score":	134091
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3364,
			"primary_score":	999626,
			"second_score":	134090
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3376,
			"primary_score":	999626,
			"second_score":	134089
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3377,
			"primary_score":	999626,
			"second_score":	134182
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3382,
			"primary_score":	999626,
			"second_score":	134088
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3384,
			"primary_score":	999626,
			"second_score":	134157
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3385,
			"primary_score":	999626,
			"second_score":	134156
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3388,
			"primary_score":	999626,
			"second_score":	134087
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3390,
			"primary_score":	999626,
			"second_score":	134086
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3391,
			"primary_score":	999626,
			"second_score":	134085
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3395,
			"primary_score":	999626,
			"second_score":	134270
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3396,
			"primary_score":	999626,
			"second_score":	134269
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3401,
			"primary_score":	999626,
			"second_score":	134084
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3402,
			"primary_score":	999626,
			"second_score":	134083
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3403,
			"primary_score":	999626,
			"second_score":	134298
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3404,
			"primary_score":	999626,
			"second_score":	134082
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3405,
			"primary_score":	999626,
			"second_score":	134081
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3407,
			"primary_score":	999626,
			"second_score":	134116
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3409,
			"primary_score":	999626,
			"second_score":	134115
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3410,
			"primary_score":	999626,
			"second_score":	134114
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3413,
			"primary_score":	999626,
			"second_score":	134080
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3414,
			"primary_score":	999626,
			"second_score":	134079
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3418,
			"primary_score":	999626,
			"second_score":	134263
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3422,
			"primary_score":	999626,
			"second_score":	134262
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3425,
			"primary_score":	999626,
			"second_score":	134261
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3426,
			"primary_score":	999626,
			"second_score":	134260
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3428,
			"primary_score":	999626,
			"second_score":	134259
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3429,
			"primary_score":	999626,
			"second_score":	134258
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3431,
			"primary_score":	999626,
			"second_score":	134257
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3439,
			"primary_score":	999626,
			"second_score":	134181
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3441,
			"primary_score":	999626,
			"second_score":	134180
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3459,
			"primary_score":	999626,
			"second_score":	134113
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3462,
			"primary_score":	999626,
			"second_score":	134112
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3463,
			"primary_score":	999626,
			"second_score":	134111
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3467,
			"primary_score":	999626,
			"second_score":	134110
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3468,
			"primary_score":	999626,
			"second_score":	134104
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3472,
			"primary_score":	999626,
			"second_score":	134292
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3473,
			"primary_score":	999626,
			"second_score":	134288
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3477,
			"primary_score":	999626,
			"second_score":	134176
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3478,
			"primary_score":	999626,
			"second_score":	134174
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3482,
			"primary_score":	999626,
			"second_score":	136079
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3483,
			"primary_score":	999626,
			"second_score":	136078
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3492,
			"primary_score":	999626,
			"second_score":	134200
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3493,
			"primary_score":	999626,
			"second_score":	134198
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3502,
			"primary_score":	999791,
			"second_score":	8336
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3503,
			"primary_score":	999791,
			"second_score":	8200
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3577,
			"primary_score":	999805,
			"second_score":	9859
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3578,
			"primary_score":	999805,
			"second_score":	9855
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3582,
			"primary_score":	999806,
			"second_score":	9163
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3583,
			"primary_score":	999806,
			"second_score":	9161
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3592,
			"primary_score":	999626,
			"second_score":	134224
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3593,
			"primary_score":	999626,
			"second_score":	134222
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3722,
			"primary_score":	999964,
			"second_score":	12559
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3723,
			"primary_score":	999964,
			"second_score":	12410
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3732,
			"primary_score":	999679,
			"second_score":	2636
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3733,
			"primary_score":	999679,
			"second_score":	2628
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3862,
			"primary_score":	999790,
			"second_score":	8360
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3863,
			"primary_score":	999790,
			"second_score":	8358
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3867,
			"primary_score":	999783,
			"second_score":	11146
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3868,
			"primary_score":	999783,
			"second_score":	11145
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3887,
			"primary_score":	999775,
			"second_score":	17952
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3888,
			"primary_score":	999776,
			"second_score":	16844
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3892,
			"primary_score":	999791,
			"second_score":	8397
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3893,
			"primary_score":	999794,
			"second_score":	8382
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3907,
			"primary_score":	999778,
			"second_score":	18578
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3908,
			"primary_score":	999778,
			"second_score":	18576
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3927,
			"primary_score":	999777,
			"second_score":	17975
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	3928,
			"primary_score":	999777,
			"second_score":	17974
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4047,
			"primary_score":	999909,
			"second_score":	14439
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4048,
			"primary_score":	999909,
			"second_score":	14102
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4087,
			"primary_score":	999906,
			"second_score":	14522
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4088,
			"primary_score":	999906,
			"second_score":	14521
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4142,
			"primary_score":	999626,
			"second_score":	134936
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4143,
			"primary_score":	999626,
			"second_score":	134935
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4147,
			"primary_score":	999626,
			"second_score":	135575
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4148,
			"primary_score":	999626,
			"second_score":	135574
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4152,
			"primary_score":	999626,
			"second_score":	136717
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4153,
			"primary_score":	999626,
			"second_score":	136491
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4157,
			"primary_score":	999626,
			"second_score":	133340
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4158,
			"primary_score":	999626,
			"second_score":	133258
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4167,
			"primary_score":	999626,
			"second_score":	129215
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4168,
			"primary_score":	999626,
			"second_score":	129101
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4172,
			"primary_score":	999626,
			"second_score":	135046
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4173,
			"primary_score":	999626,
			"second_score":	134964
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4187,
			"primary_score":	999997,
			"second_score":	7798
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4188,
			"primary_score":	999997,
			"second_score":	7471
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4192,
			"primary_score":	999997,
			"second_score":	7821
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4193,
			"primary_score":	999997,
			"second_score":	7820
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4232,
			"primary_score":	999818,
			"second_score":	11102
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4233,
			"primary_score":	999818,
			"second_score":	10395
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4237,
			"primary_score":	999820,
			"second_score":	8935
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4238,
			"primary_score":	999826,
			"second_score":	8567
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4317,
			"primary_score":	999824,
			"second_score":	8964
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4318,
			"primary_score":	999824,
			"second_score":	8963
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4337,
			"primary_score":	999888,
			"second_score":	11328
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4338,
			"primary_score":	999888,
			"second_score":	11326
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4342,
			"primary_score":	999840,
			"second_score":	11459
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4343,
			"primary_score":	999840,
			"second_score":	11458
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4352,
			"primary_score":	999896,
			"second_score":	11482
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4353,
			"primary_score":	999896,
			"second_score":	11481
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4412,
			"primary_score":	999626,
			"second_score":	126651
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4413,
			"primary_score":	999626,
			"second_score":	126634
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4417,
			"primary_score":	999626,
			"second_score":	142830
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4418,
			"primary_score":	999626,
			"second_score":	142618
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4457,
			"primary_score":	999810,
			"second_score":	5592
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4458,
			"primary_score":	999810,
			"second_score":	5515
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4477,
			"primary_score":	999848,
			"second_score":	6059
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4478,
			"primary_score":	999848,
			"second_score":	5894
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4482,
			"primary_score":	999848,
			"second_score":	5745
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4483,
			"primary_score":	999848,
			"second_score":	5676
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4732,
			"primary_score":	999626,
			"second_score":	126736
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4733,
			"primary_score":	999626,
			"second_score":	126735
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4737,
			"primary_score":	999626,
			"second_score":	130183
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4738,
			"primary_score":	999626,
			"second_score":	130155
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4742,
			"primary_score":	999626,
			"second_score":	127356
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4743,
			"primary_score":	999626,
			"second_score":	127314
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4747,
			"primary_score":	999626,
			"second_score":	126926
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4748,
			"primary_score":	999626,
			"second_score":	126802
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4827,
			"primary_score":	999626,
			"second_score":	136781
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4828,
			"primary_score":	999626,
			"second_score":	136780
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4867,
			"primary_score":	999780,
			"second_score":	11283
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4868,
			"primary_score":	999780,
			"second_score":	11282
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4892,
			"primary_score":	999626,
			"second_score":	135997
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4893,
			"primary_score":	999626,
			"second_score":	135636
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4897,
			"primary_score":	999626,
			"second_score":	134892
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4898,
			"primary_score":	999626,
			"second_score":	134777
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4977,
			"primary_score":	999810,
			"second_score":	6402
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	4978,
			"primary_score":	999810,
			"second_score":	6401
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5007,
			"primary_score":	999848,
			"second_score":	6373
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5008,
			"primary_score":	999848,
			"second_score":	6081
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5077,
			"primary_score":	999924,
			"second_score":	5768
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5078,
			"primary_score":	999924,
			"second_score":	5767
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5092,
			"primary_score":	999626,
			"second_score":	136827
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5093,
			"primary_score":	999626,
			"second_score":	136826
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5197,
			"primary_score":	999626,
			"second_score":	137611
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5198,
			"primary_score":	999626,
			"second_score":	137492
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5212,
			"primary_score":	999626,
			"second_score":	136804
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5213,
			"primary_score":	999626,
			"second_score":	136803
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5257,
			"primary_score":	999626,
			"second_score":	134561
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5258,
			"primary_score":	999626,
			"second_score":	134560
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5262,
			"primary_score":	999626,
			"second_score":	126713
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5263,
			"primary_score":	999626,
			"second_score":	126712
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5267,
			"primary_score":	999626,
			"second_score":	134622
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5268,
			"primary_score":	999626,
			"second_score":	134583
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5284,
			"primary_score":	999881,
			"second_score":	4846
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5285,
			"primary_score":	999881,
			"second_score":	4649
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5289,
			"primary_score":	999881,
			"second_score":	4154
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5290,
			"primary_score":	999881,
			"second_score":	4127
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5294,
			"primary_score":	999882,
			"second_score":	2800
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5295,
			"primary_score":	999882,
			"second_score":	2769
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5299,
			"primary_score":	999626,
			"second_score":	134651
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5300,
			"primary_score":	999626,
			"second_score":	134650
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5304,
			"primary_score":	999991,
			"second_score":	2829
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5305,
			"primary_score":	999991,
			"second_score":	2828
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5309,
			"primary_score":	999882,
			"second_score":	4076
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5310,
			"primary_score":	999882,
			"second_score":	4075
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5314,
			"primary_score":	999991,
			"second_score":	3560
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5315,
			"primary_score":	999991,
			"second_score":	3533
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5319,
			"primary_score":	999991,
			"second_score":	2852
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5320,
			"primary_score":	999991,
			"second_score":	2851
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5334,
			"primary_score":	999934,
			"second_score":	3490
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5335,
			"primary_score":	999935,
			"second_score":	3121
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5339,
			"primary_score":	999935,
			"second_score":	3016
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5340,
			"primary_score":	999935,
			"second_score":	2964
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5344,
			"primary_score":	999936,
			"second_score":	2903
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5345,
			"primary_score":	999936,
			"second_score":	2874
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5354,
			"primary_score":	999926,
			"second_score":	4099
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5355,
			"primary_score":	999926,
			"second_score":	4098
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5399,
			"primary_score":	999729,
			"second_score":	4890
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5400,
			"primary_score":	999729,
			"second_score":	4889
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5409,
			"primary_score":	999626,
			"second_score":	134716
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5410,
			"primary_score":	999626,
			"second_score":	134679
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5414,
			"primary_score":	999740,
			"second_score":	4914
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5415,
			"primary_score":	999740,
			"second_score":	4912
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5439,
			"primary_score":	999729,
			"second_score":	5116
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5440,
			"primary_score":	999729,
			"second_score":	5008
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5444,
			"primary_score":	999729,
			"second_score":	5139
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5445,
			"primary_score":	999729,
			"second_score":	5138
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5464,
			"primary_score":	999881,
			"second_score":	3583
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5465,
			"primary_score":	999881,
			"second_score":	3582
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5489,
			"primary_score":	999881,
			"second_score":	3888
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5490,
			"primary_score":	999881,
			"second_score":	3649
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5494,
			"primary_score":	999881,
			"second_score":	3911
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5495,
			"primary_score":	999881,
			"second_score":	3910
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5717,
			"primary_score":	999626,
			"second_score":	134103
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5719,
			"primary_score":	999626,
			"second_score":	134102
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5720,
			"primary_score":	999626,
			"second_score":	134101
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5721,
			"primary_score":	999626,
			"second_score":	134100
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5723,
			"primary_score":	999626,
			"second_score":	134099
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5730,
			"primary_score":	999626,
			"second_score":	134098
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5732,
			"primary_score":	999626,
			"second_score":	134097
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5733,
			"primary_score":	999626,
			"second_score":	134096
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5734,
			"primary_score":	999626,
			"second_score":	134213
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5736,
			"primary_score":	999626,
			"second_score":	134095
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5738,
			"primary_score":	999626,
			"second_score":	134094
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5882,
			"primary_score":	999626,
			"second_score":	134078
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5907,
			"primary_score":	999626,
			"second_score":	134077
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5908,
			"primary_score":	999626,
			"second_score":	134076
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5909,
			"primary_score":	999626,
			"second_score":	134075
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5911,
			"primary_score":	999626,
			"second_score":	134074
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5913,
			"primary_score":	999626,
			"second_score":	134069
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5916,
			"primary_score":	999626,
			"second_score":	134068
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5920,
			"primary_score":	999626,
			"second_score":	134067
		}, {
			"file":	"Zend/zend_language_parser.c",
			"line":	5923,
			"primary_score":	999626,
			"second_score":	134066
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	154,
			"primary_score":	999712,
			"second_score":	4222
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	155,
			"primary_score":	999712,
			"second_score":	4196
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	162,
			"primary_score":	999724,
			"second_score":	4004
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	163,
			"primary_score":	999724,
			"second_score":	4003
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	164,
			"primary_score":	999724,
			"second_score":	3999
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	165,
			"primary_score":	999724,
			"second_score":	3998
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	170,
			"primary_score":	999626,
			"second_score":	144371
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	171,
			"primary_score":	999626,
			"second_score":	144370
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	172,
			"primary_score":	999626,
			"second_score":	144369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	173,
			"primary_score":	999626,
			"second_score":	121713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	188,
			"primary_score":	999626,
			"second_score":	118555
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	192,
			"primary_score":	999626,
			"second_score":	118554
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	193,
			"primary_score":	999626,
			"second_score":	118550
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	224,
			"primary_score":	999626,
			"second_score":	133821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	225,
			"primary_score":	999626,
			"second_score":	133820
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	226,
			"primary_score":	999626,
			"second_score":	133819
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	227,
			"primary_score":	999626,
			"second_score":	133818
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	228,
			"primary_score":	999626,
			"second_score":	133817
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	229,
			"primary_score":	999626,
			"second_score":	133816
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	231,
			"primary_score":	999626,
			"second_score":	133815
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	232,
			"primary_score":	999626,
			"second_score":	133811
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	234,
			"primary_score":	999626,
			"second_score":	133810
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	235,
			"primary_score":	999626,
			"second_score":	133809
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	236,
			"primary_score":	999626,
			"second_score":	133808
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	237,
			"primary_score":	999626,
			"second_score":	133807
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	239,
			"primary_score":	999626,
			"second_score":	133805
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	243,
			"primary_score":	999626,
			"second_score":	133804
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	244,
			"primary_score":	999626,
			"second_score":	133803
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	245,
			"primary_score":	999626,
			"second_score":	133802
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	246,
			"primary_score":	999626,
			"second_score":	133801
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	247,
			"primary_score":	999626,
			"second_score":	133800
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	248,
			"primary_score":	999626,
			"second_score":	133799
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	249,
			"primary_score":	999626,
			"second_score":	133798
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	251,
			"primary_score":	999626,
			"second_score":	133797
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	260,
			"primary_score":	999626,
			"second_score":	133666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	262,
			"primary_score":	999626,
			"second_score":	133590
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	263,
			"primary_score":	999626,
			"second_score":	133589
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	486,
			"primary_score":	999626,
			"second_score":	144498
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	487,
			"primary_score":	999626,
			"second_score":	144386
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	488,
			"primary_score":	999626,
			"second_score":	144385
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	489,
			"primary_score":	999626,
			"second_score":	144380
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	490,
			"primary_score":	999626,
			"second_score":	144379
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	491,
			"primary_score":	999626,
			"second_score":	144378
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	495,
			"primary_score":	999626,
			"second_score":	144377
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	496,
			"primary_score":	999626,
			"second_score":	144376
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	498,
			"primary_score":	999626,
			"second_score":	144375
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	499,
			"primary_score":	999626,
			"second_score":	144374
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	515,
			"primary_score":	999626,
			"second_score":	144373
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	516,
			"primary_score":	999626,
			"second_score":	144372
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	521,
			"primary_score":	999626,
			"second_score":	144368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	523,
			"primary_score":	999626,
			"second_score":	144367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	524,
			"primary_score":	999626,
			"second_score":	144366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	529,
			"primary_score":	999626,
			"second_score":	144365
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	531,
			"primary_score":	999626,
			"second_score":	143761
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	532,
			"primary_score":	999626,
			"second_score":	143760
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	533,
			"primary_score":	999626,
			"second_score":	143759
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	538,
			"primary_score":	999626,
			"second_score":	143758
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	539,
			"primary_score":	999626,
			"second_score":	143757
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	574,
			"primary_score":	999626,
			"second_score":	143756
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	575,
			"primary_score":	999626,
			"second_score":	143512
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	576,
			"primary_score":	999626,
			"second_score":	143511
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	577,
			"primary_score":	999626,
			"second_score":	143510
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	578,
			"primary_score":	999626,
			"second_score":	143503
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	579,
			"primary_score":	999626,
			"second_score":	134065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	580,
			"primary_score":	999626,
			"second_score":	134018
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	581,
			"primary_score":	999626,
			"second_score":	134017
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	584,
			"primary_score":	999626,
			"second_score":	134016
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	587,
			"primary_score":	999626,
			"second_score":	134015
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	588,
			"primary_score":	999626,
			"second_score":	134014
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	589,
			"primary_score":	999626,
			"second_score":	134013
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	590,
			"primary_score":	999626,
			"second_score":	134012
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	591,
			"primary_score":	999626,
			"second_score":	133827
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	597,
			"primary_score":	999626,
			"second_score":	133822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	598,
			"primary_score":	999626,
			"second_score":	133796
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	645,
			"primary_score":	999626,
			"second_score":	121821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	646,
			"primary_score":	999626,
			"second_score":	121820
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	649,
			"primary_score":	999626,
			"second_score":	121819
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	654,
			"primary_score":	999626,
			"second_score":	121818
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	657,
			"primary_score":	999626,
			"second_score":	121723
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	659,
			"primary_score":	999626,
			"second_score":	121722
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	660,
			"primary_score":	999626,
			"second_score":	121721
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	662,
			"primary_score":	999626,
			"second_score":	121720
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	663,
			"primary_score":	999626,
			"second_score":	121719
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	665,
			"primary_score":	999626,
			"second_score":	121718
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	682,
			"primary_score":	999626,
			"second_score":	121717
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	684,
			"primary_score":	999626,
			"second_score":	121712
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	685,
			"primary_score":	999626,
			"second_score":	121276
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	686,
			"primary_score":	999626,
			"second_score":	121275
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	687,
			"primary_score":	999626,
			"second_score":	121274
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	715,
			"primary_score":	999626,
			"second_score":	122079
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	716,
			"primary_score":	999626,
			"second_score":	122078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	717,
			"primary_score":	999626,
			"second_score":	121974
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	718,
			"primary_score":	999626,
			"second_score":	121973
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	719,
			"primary_score":	999626,
			"second_score":	121972
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	720,
			"primary_score":	999626,
			"second_score":	121971
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	721,
			"primary_score":	999626,
			"second_score":	121970
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	723,
			"primary_score":	999626,
			"second_score":	121969
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	728,
			"primary_score":	999626,
			"second_score":	121968
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	730,
			"primary_score":	999626,
			"second_score":	121967
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	731,
			"primary_score":	999626,
			"second_score":	121966
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	732,
			"primary_score":	999626,
			"second_score":	121850
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	733,
			"primary_score":	999626,
			"second_score":	121848
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	735,
			"primary_score":	999626,
			"second_score":	121847
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	736,
			"primary_score":	999626,
			"second_score":	121822
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	740,
			"primary_score":	999626,
			"second_score":	121273
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	742,
			"primary_score":	999626,
			"second_score":	121272
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	743,
			"primary_score":	999626,
			"second_score":	121271
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	744,
			"primary_score":	999626,
			"second_score":	121027
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	745,
			"primary_score":	999626,
			"second_score":	121026
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	746,
			"primary_score":	999626,
			"second_score":	121025
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	747,
			"primary_score":	999626,
			"second_score":	121018
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	748,
			"primary_score":	999626,
			"second_score":	121017
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	750,
			"primary_score":	999626,
			"second_score":	119875
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	755,
			"primary_score":	999626,
			"second_score":	119874
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	760,
			"primary_score":	999626,
			"second_score":	119873
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	761,
			"primary_score":	999626,
			"second_score":	119825
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	762,
			"primary_score":	999626,
			"second_score":	119824
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	763,
			"primary_score":	999626,
			"second_score":	119653
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	764,
			"primary_score":	999626,
			"second_score":	119648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	767,
			"primary_score":	999626,
			"second_score":	119647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	768,
			"primary_score":	999626,
			"second_score":	119621
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	769,
			"primary_score":	999626,
			"second_score":	119595
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	770,
			"primary_score":	999626,
			"second_score":	119594
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	867,
			"primary_score":	999626,
			"second_score":	136987
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	868,
			"primary_score":	999626,
			"second_score":	136986
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	870,
			"primary_score":	999626,
			"second_score":	136985
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	873,
			"primary_score":	999626,
			"second_score":	136869
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	874,
			"primary_score":	999626,
			"second_score":	136868
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	875,
			"primary_score":	999626,
			"second_score":	136867
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	876,
			"primary_score":	999626,
			"second_score":	136866
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	877,
			"primary_score":	999626,
			"second_score":	129737
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	878,
			"primary_score":	999626,
			"second_score":	129736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	883,
			"primary_score":	999626,
			"second_score":	129735
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	886,
			"primary_score":	999626,
			"second_score":	129734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	887,
			"primary_score":	999626,
			"second_score":	129733
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	958,
			"primary_score":	999626,
			"second_score":	136865
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	961,
			"primary_score":	999626,
			"second_score":	136864
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	962,
			"primary_score":	999626,
			"second_score":	132608
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	964,
			"primary_score":	999626,
			"second_score":	136863
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	966,
			"primary_score":	999626,
			"second_score":	136862
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	967,
			"primary_score":	999626,
			"second_score":	136861
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	979,
			"primary_score":	999626,
			"second_score":	134151
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	982,
			"primary_score":	999626,
			"second_score":	134150
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	987,
			"primary_score":	999626,
			"second_score":	134149
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	988,
			"primary_score":	999626,
			"second_score":	134148
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	989,
			"primary_score":	999626,
			"second_score":	134147
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	990,
			"primary_score":	999626,
			"second_score":	134337
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	991,
			"primary_score":	999626,
			"second_score":	134336
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	992,
			"primary_score":	999626,
			"second_score":	134335
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	994,
			"primary_score":	999881,
			"second_score":	4024
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1008,
			"primary_score":	999626,
			"second_score":	134146
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1015,
			"primary_score":	999626,
			"second_score":	134145
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1016,
			"primary_score":	999626,
			"second_score":	134144
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1029,
			"primary_score":	999626,
			"second_score":	134143
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1064,
			"primary_score":	999626,
			"second_score":	134142
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1065,
			"primary_score":	999626,
			"second_score":	134141
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1066,
			"primary_score":	999626,
			"second_score":	134138
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1067,
			"primary_score":	999626,
			"second_score":	134137
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1068,
			"primary_score":	999626,
			"second_score":	143427
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1069,
			"primary_score":	999626,
			"second_score":	143426
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1070,
			"primary_score":	999626,
			"second_score":	143425
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1071,
			"primary_score":	999626,
			"second_score":	143424
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1072,
			"primary_score":	999626,
			"second_score":	143423
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1073,
			"primary_score":	999626,
			"second_score":	143422
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1083,
			"primary_score":	999626,
			"second_score":	134133
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1085,
			"primary_score":	999626,
			"second_score":	134132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1086,
			"primary_score":	999626,
			"second_score":	134131
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1087,
			"primary_score":	999626,
			"second_score":	134130
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1147,
			"primary_score":	999626,
			"second_score":	134135
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1148,
			"primary_score":	999626,
			"second_score":	134134
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1151,
			"primary_score":	999626,
			"second_score":	143420
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1152,
			"primary_score":	999626,
			"second_score":	143419
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1153,
			"primary_score":	999626,
			"second_score":	143418
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1156,
			"primary_score":	999626,
			"second_score":	143417
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1157,
			"primary_score":	999626,
			"second_score":	143416
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1456,
			"primary_score":	999626,
			"second_score":	143414
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1457,
			"primary_score":	999626,
			"second_score":	143413
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1458,
			"primary_score":	999626,
			"second_score":	143412
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1459,
			"primary_score":	999626,
			"second_score":	143411
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1461,
			"primary_score":	999626,
			"second_score":	143410
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1462,
			"primary_score":	999626,
			"second_score":	143409
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1463,
			"primary_score":	999626,
			"second_score":	143408
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1464,
			"primary_score":	999626,
			"second_score":	143407
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1466,
			"primary_score":	999626,
			"second_score":	143406
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1467,
			"primary_score":	999626,
			"second_score":	143405
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1468,
			"primary_score":	999651,
			"second_score":	18700
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1469,
			"primary_score":	999651,
			"second_score":	18699
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1471,
			"primary_score":	999626,
			"second_score":	143404
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1472,
			"primary_score":	999626,
			"second_score":	143403
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1474,
			"primary_score":	999626,
			"second_score":	143402
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1476,
			"primary_score":	999626,
			"second_score":	143401
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1477,
			"primary_score":	999626,
			"second_score":	143400
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1479,
			"primary_score":	999626,
			"second_score":	143399
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1481,
			"primary_score":	999626,
			"second_score":	143398
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1482,
			"primary_score":	999626,
			"second_score":	143397
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1483,
			"primary_score":	999626,
			"second_score":	143396
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1484,
			"primary_score":	999626,
			"second_score":	143395
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1485,
			"primary_score":	999648,
			"second_score":	18688
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1486,
			"primary_score":	999626,
			"second_score":	143391
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	1487,
			"primary_score":	999626,
			"second_score":	143390
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2210,
			"primary_score":	999626,
			"second_score":	134334
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2244,
			"primary_score":	999626,
			"second_score":	134333
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2245,
			"primary_score":	999626,
			"second_score":	134332
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2246,
			"primary_score":	999626,
			"second_score":	134329
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2247,
			"primary_score":	999626,
			"second_score":	134328
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2248,
			"primary_score":	999626,
			"second_score":	134327
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2366,
			"primary_score":	999626,
			"second_score":	143371
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2367,
			"primary_score":	999626,
			"second_score":	143370
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2368,
			"primary_score":	999626,
			"second_score":	143369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2385,
			"primary_score":	999626,
			"second_score":	136228
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2387,
			"primary_score":	999626,
			"second_score":	136227
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2388,
			"primary_score":	999626,
			"second_score":	136226
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2389,
			"primary_score":	999626,
			"second_score":	136113
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2390,
			"primary_score":	999626,
			"second_score":	136112
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2417,
			"primary_score":	999626,
			"second_score":	132065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2418,
			"primary_score":	999626,
			"second_score":	132064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2429,
			"primary_score":	999626,
			"second_score":	132063
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2434,
			"primary_score":	999626,
			"second_score":	132062
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2438,
			"primary_score":	999626,
			"second_score":	132061
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2445,
			"primary_score":	999753,
			"second_score":	18666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2446,
			"primary_score":	999753,
			"second_score":	18665
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2456,
			"primary_score":	999753,
			"second_score":	18664
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2460,
			"primary_score":	999773,
			"second_score":	18662
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2467,
			"primary_score":	999626,
			"second_score":	135216
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2468,
			"primary_score":	999626,
			"second_score":	135215
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2469,
			"primary_score":	999626,
			"second_score":	135214
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2473,
			"primary_score":	999901,
			"second_score":	6615
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2474,
			"primary_score":	999901,
			"second_score":	6614
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2479,
			"primary_score":	999902,
			"second_score":	6613
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2480,
			"primary_score":	999926,
			"second_score":	6611
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2544,
			"primary_score":	999626,
			"second_score":	130315
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2545,
			"primary_score":	999626,
			"second_score":	130314
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2555,
			"primary_score":	999626,
			"second_score":	130313
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2559,
			"primary_score":	999626,
			"second_score":	130312
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2566,
			"primary_score":	999918,
			"second_score":	11207
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2567,
			"primary_score":	999918,
			"second_score":	11206
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2568,
			"primary_score":	999918,
			"second_score":	11205
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2569,
			"primary_score":	999954,
			"second_score":	11204
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2574,
			"primary_score":	999967,
			"second_score":	11203
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2575,
			"primary_score":	999970,
			"second_score":	11202
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2604,
			"primary_score":	999626,
			"second_score":	136395
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2605,
			"primary_score":	999626,
			"second_score":	136394
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2610,
			"primary_score":	999626,
			"second_score":	136393
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2611,
			"primary_score":	999626,
			"second_score":	136392
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2612,
			"primary_score":	999996,
			"second_score":	8083
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2620,
			"primary_score":	999626,
			"second_score":	129005
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2621,
			"primary_score":	999626,
			"second_score":	129004
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2622,
			"primary_score":	999626,
			"second_score":	137821
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2623,
			"primary_score":	999626,
			"second_score":	137820
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2626,
			"primary_score":	999626,
			"second_score":	129003
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2627,
			"primary_score":	999626,
			"second_score":	129002
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2630,
			"primary_score":	999895,
			"second_score":	11538
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2636,
			"primary_score":	999872,
			"second_score":	4232
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2637,
			"primary_score":	999872,
			"second_score":	4231
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2640,
			"primary_score":	999880,
			"second_score":	4230
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2641,
			"primary_score":	999881,
			"second_score":	4228
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2645,
			"primary_score":	999626,
			"second_score":	134736
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2647,
			"primary_score":	999626,
			"second_score":	134735
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2648,
			"primary_score":	999626,
			"second_score":	134734
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2653,
			"primary_score":	999626,
			"second_score":	134362
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2654,
			"primary_score":	999626,
			"second_score":	134361
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2655,
			"primary_score":	999626,
			"second_score":	134360
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2658,
			"primary_score":	999626,
			"second_score":	134355
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2660,
			"primary_score":	999626,
			"second_score":	134354
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2661,
			"primary_score":	999626,
			"second_score":	134353
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2662,
			"primary_score":	999626,
			"second_score":	134352
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2663,
			"primary_score":	999626,
			"second_score":	134351
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2664,
			"primary_score":	999635,
			"second_score":	2501
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2665,
			"primary_score":	999626,
			"second_score":	134345
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2670,
			"primary_score":	999626,
			"second_score":	127578
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2671,
			"primary_score":	999626,
			"second_score":	127577
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2672,
			"primary_score":	999626,
			"second_score":	127576
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2685,
			"primary_score":	999828,
			"second_score":	6715
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2686,
			"primary_score":	999828,
			"second_score":	6714
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2696,
			"primary_score":	999829,
			"second_score":	6713
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2700,
			"primary_score":	999848,
			"second_score":	6711
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2713,
			"primary_score":	999626,
			"second_score":	136039
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2714,
			"primary_score":	999626,
			"second_score":	136038
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2715,
			"primary_score":	999626,
			"second_score":	136037
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2716,
			"primary_score":	999626,
			"second_score":	136036
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2717,
			"primary_score":	999626,
			"second_score":	136035
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2722,
			"primary_score":	999626,
			"second_score":	136034
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2738,
			"primary_score":	999626,
			"second_score":	132138
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2739,
			"primary_score":	999626,
			"second_score":	132137
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2744,
			"primary_score":	999626,
			"second_score":	132136
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2745,
			"primary_score":	999626,
			"second_score":	132135
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2746,
			"primary_score":	999626,
			"second_score":	132134
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2749,
			"primary_score":	999626,
			"second_score":	135056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2750,
			"primary_score":	999626,
			"second_score":	135055
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2751,
			"primary_score":	999626,
			"second_score":	135054
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2782,
			"primary_score":	999888,
			"second_score":	16317
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2783,
			"primary_score":	999888,
			"second_score":	16316
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2787,
			"primary_score":	999764,
			"second_score":	6888
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2788,
			"primary_score":	999770,
			"second_score":	6886
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2910,
			"primary_score":	999708,
			"second_score":	5293
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2911,
			"primary_score":	999708,
			"second_score":	5292
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2917,
			"primary_score":	999751,
			"second_score":	5291
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2918,
			"primary_score":	999751,
			"second_score":	5290
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2924,
			"primary_score":	999626,
			"second_score":	134738
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2925,
			"primary_score":	999626,
			"second_score":	134737
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2928,
			"primary_score":	999626,
			"second_score":	134326
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2929,
			"primary_score":	999626,
			"second_score":	134325
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2930,
			"primary_score":	999626,
			"second_score":	130588
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2933,
			"primary_score":	999722,
			"second_score":	10129
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2934,
			"primary_score":	999722,
			"second_score":	10128
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2935,
			"primary_score":	999722,
			"second_score":	10127
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2937,
			"primary_score":	999722,
			"second_score":	10126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2938,
			"primary_score":	999722,
			"second_score":	10125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2939,
			"primary_score":	999722,
			"second_score":	10097
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2944,
			"primary_score":	999731,
			"second_score":	8470
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2945,
			"primary_score":	999731,
			"second_score":	8469
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2946,
			"primary_score":	999731,
			"second_score":	8468
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2948,
			"primary_score":	999731,
			"second_score":	8467
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2949,
			"primary_score":	999731,
			"second_score":	8466
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2950,
			"primary_score":	999731,
			"second_score":	8462
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2951,
			"primary_score":	999731,
			"second_score":	8459
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	2953,
			"primary_score":	999731,
			"second_score":	8430
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3019,
			"primary_score":	999626,
			"second_score":	139420
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3020,
			"primary_score":	999626,
			"second_score":	139419
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3064,
			"primary_score":	999626,
			"second_score":	131555
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3065,
			"primary_score":	999626,
			"second_score":	131554
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3067,
			"primary_score":	999626,
			"second_score":	131553
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3069,
			"primary_score":	999626,
			"second_score":	131552
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3070,
			"primary_score":	999626,
			"second_score":	131551
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3071,
			"primary_score":	999626,
			"second_score":	131550
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3072,
			"primary_score":	999626,
			"second_score":	131549
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3074,
			"primary_score":	999626,
			"second_score":	131548
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3075,
			"primary_score":	999626,
			"second_score":	131484
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3076,
			"primary_score":	999626,
			"second_score":	131483
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3077,
			"primary_score":	999626,
			"second_score":	131482
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3078,
			"primary_score":	999626,
			"second_score":	131481
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3080,
			"primary_score":	999626,
			"second_score":	131480
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3081,
			"primary_score":	999626,
			"second_score":	131485
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3094,
			"primary_score":	999626,
			"second_score":	131479
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3095,
			"primary_score":	999626,
			"second_score":	131369
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3096,
			"primary_score":	999626,
			"second_score":	131368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3099,
			"primary_score":	999626,
			"second_score":	131367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3100,
			"primary_score":	999626,
			"second_score":	131366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3101,
			"primary_score":	999626,
			"second_score":	131365
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3102,
			"primary_score":	999626,
			"second_score":	131284
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3117,
			"primary_score":	999626,
			"second_score":	131283
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3120,
			"primary_score":	999626,
			"second_score":	131282
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3123,
			"primary_score":	999626,
			"second_score":	131281
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3125,
			"primary_score":	999626,
			"second_score":	131280
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3127,
			"primary_score":	999626,
			"second_score":	131279
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3134,
			"primary_score":	999626,
			"second_score":	131278
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3139,
			"primary_score":	999626,
			"second_score":	136996
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3140,
			"primary_score":	999626,
			"second_score":	136995
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3142,
			"primary_score":	999626,
			"second_score":	136994
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3144,
			"primary_score":	999626,
			"second_score":	136993
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3145,
			"primary_score":	999626,
			"second_score":	136992
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3147,
			"primary_score":	999626,
			"second_score":	136991
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3148,
			"primary_score":	999626,
			"second_score":	136989
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3151,
			"primary_score":	999626,
			"second_score":	136988
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3152,
			"primary_score":	999626,
			"second_score":	136860
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3165,
			"primary_score":	999626,
			"second_score":	129781
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3168,
			"primary_score":	999626,
			"second_score":	129780
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3198,
			"primary_score":	999626,
			"second_score":	119945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3199,
			"primary_score":	999626,
			"second_score":	119944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3200,
			"primary_score":	999626,
			"second_score":	119943
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3202,
			"primary_score":	999626,
			"second_score":	119942
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3203,
			"primary_score":	999626,
			"second_score":	119941
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3204,
			"primary_score":	999626,
			"second_score":	119940
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3213,
			"primary_score":	999626,
			"second_score":	136236
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3214,
			"primary_score":	999626,
			"second_score":	136235
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3215,
			"primary_score":	999626,
			"second_score":	136232
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3216,
			"primary_score":	999626,
			"second_score":	136231
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3218,
			"primary_score":	999626,
			"second_score":	136230
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3219,
			"primary_score":	999626,
			"second_score":	136237
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3221,
			"primary_score":	999626,
			"second_score":	136229
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3274,
			"primary_score":	999626,
			"second_score":	132122
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3275,
			"primary_score":	999626,
			"second_score":	132121
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3276,
			"primary_score":	999626,
			"second_score":	132120
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3277,
			"primary_score":	999626,
			"second_score":	132119
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3280,
			"primary_score":	999626,
			"second_score":	132118
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3352,
			"primary_score":	999626,
			"second_score":	134323
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3353,
			"primary_score":	999687,
			"second_score":	2475
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3354,
			"primary_score":	999626,
			"second_score":	134321
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3355,
			"primary_score":	999626,
			"second_score":	134320
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3357,
			"primary_score":	999626,
			"second_score":	134319
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3359,
			"primary_score":	999626,
			"second_score":	134318
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3360,
			"primary_score":	999626,
			"second_score":	134317
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3361,
			"primary_score":	999626,
			"second_score":	134316
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3362,
			"primary_score":	999626,
			"second_score":	134315
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3363,
			"primary_score":	999626,
			"second_score":	134314
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3364,
			"primary_score":	999626,
			"second_score":	134313
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3369,
			"primary_score":	999684,
			"second_score":	2474
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3370,
			"primary_score":	999684,
			"second_score":	2473
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3378,
			"primary_score":	999708,
			"second_score":	5248
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3379,
			"primary_score":	999708,
			"second_score":	5247
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3380,
			"primary_score":	999708,
			"second_score":	5244
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3381,
			"primary_score":	999708,
			"second_score":	5243
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3382,
			"primary_score":	999708,
			"second_score":	5242
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3383,
			"primary_score":	999708,
			"second_score":	5241
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3384,
			"primary_score":	999974,
			"second_score":	5249
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3386,
			"primary_score":	999904,
			"second_score":	7889
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3390,
			"primary_score":	999825,
			"second_score":	5261
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3393,
			"primary_score":	999832,
			"second_score":	5259
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3397,
			"primary_score":	999712,
			"second_score":	5239
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3399,
			"primary_score":	999708,
			"second_score":	5238
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3401,
			"primary_score":	999708,
			"second_score":	5237
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3402,
			"primary_score":	999708,
			"second_score":	5236
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3403,
			"primary_score":	999708,
			"second_score":	5205
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	3404,
			"primary_score":	999708,
			"second_score":	5204
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4229,
			"primary_score":	999888,
			"second_score":	16314
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4230,
			"primary_score":	999888,
			"second_score":	16313
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4231,
			"primary_score":	999888,
			"second_score":	16312
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4758,
			"primary_score":	999626,
			"second_score":	132133
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4791,
			"primary_score":	999626,
			"second_score":	132132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4792,
			"primary_score":	999626,
			"second_score":	132131
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4797,
			"primary_score":	999626,
			"second_score":	132130
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4801,
			"primary_score":	999626,
			"second_score":	132129
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4802,
			"primary_score":	999626,
			"second_score":	132128
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4803,
			"primary_score":	999626,
			"second_score":	132127
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4889,
			"primary_score":	999626,
			"second_score":	132126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4890,
			"primary_score":	999626,
			"second_score":	132125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4891,
			"primary_score":	999626,
			"second_score":	132124
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	4892,
			"primary_score":	999626,
			"second_score":	132123
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5316,
			"primary_score":	999848,
			"second_score":	6710
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5317,
			"primary_score":	999848,
			"second_score":	6709
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5318,
			"primary_score":	999848,
			"second_score":	6708
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5429,
			"primary_score":	999848,
			"second_score":	6706
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5430,
			"primary_score":	999848,
			"second_score":	6705
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5433,
			"primary_score":	999848,
			"second_score":	6704
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5434,
			"primary_score":	999848,
			"second_score":	6703
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5436,
			"primary_score":	999848,
			"second_score":	6702
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5437,
			"primary_score":	999848,
			"second_score":	6701
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5495,
			"primary_score":	999694,
			"second_score":	8130
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5496,
			"primary_score":	999694,
			"second_score":	8129
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5497,
			"primary_score":	999694,
			"second_score":	8126
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5498,
			"primary_score":	999694,
			"second_score":	8125
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5500,
			"primary_score":	999626,
			"second_score":	134359
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5501,
			"primary_score":	999703,
			"second_score":	8133
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5502,
			"primary_score":	999708,
			"second_score":	8132
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5505,
			"primary_score":	999626,
			"second_score":	134358
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5506,
			"primary_score":	999896,
			"second_score":	9086
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5507,
			"primary_score":	999626,
			"second_score":	134356
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5531,
			"primary_score":	999881,
			"second_score":	4227
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5532,
			"primary_score":	999881,
			"second_score":	4226
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5533,
			"primary_score":	999881,
			"second_score":	4225
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5535,
			"primary_score":	999881,
			"second_score":	4224
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5536,
			"primary_score":	999881,
			"second_score":	4223
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5537,
			"primary_score":	999881,
			"second_score":	4195
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5558,
			"primary_score":	999895,
			"second_score":	11536
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5559,
			"primary_score":	999895,
			"second_score":	11535
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5560,
			"primary_score":	999895,
			"second_score":	11534
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5561,
			"primary_score":	999895,
			"second_score":	11533
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5563,
			"primary_score":	999895,
			"second_score":	11532
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5564,
			"primary_score":	999895,
			"second_score":	11531
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5565,
			"primary_score":	999895,
			"second_score":	11530
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5566,
			"primary_score":	999895,
			"second_score":	11529
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5568,
			"primary_score":	999895,
			"second_score":	11528
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5569,
			"primary_score":	999895,
			"second_score":	11527
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5570,
			"primary_score":	999895,
			"second_score":	11526
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5571,
			"primary_score":	999895,
			"second_score":	11525
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5573,
			"primary_score":	999895,
			"second_score":	11524
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5574,
			"primary_score":	999895,
			"second_score":	11523
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5575,
			"primary_score":	999895,
			"second_score":	11522
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5576,
			"primary_score":	999895,
			"second_score":	11521
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5578,
			"primary_score":	999895,
			"second_score":	11520
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5579,
			"primary_score":	999895,
			"second_score":	11519
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5582,
			"primary_score":	999895,
			"second_score":	11518
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5583,
			"primary_score":	999895,
			"second_score":	11517
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5585,
			"primary_score":	999895,
			"second_score":	11516
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5586,
			"primary_score":	999895,
			"second_score":	11515
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5697,
			"primary_score":	999996,
			"second_score":	8082
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5698,
			"primary_score":	999996,
			"second_score":	8081
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5699,
			"primary_score":	999996,
			"second_score":	8080
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5726,
			"primary_score":	999996,
			"second_score":	8078
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5727,
			"primary_score":	999996,
			"second_score":	8077
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5728,
			"primary_score":	999996,
			"second_score":	8076
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5729,
			"primary_score":	999996,
			"second_score":	8075
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5731,
			"primary_score":	999996,
			"second_score":	8074
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5732,
			"primary_score":	999996,
			"second_score":	8073
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5733,
			"primary_score":	999996,
			"second_score":	8072
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5734,
			"primary_score":	999996,
			"second_score":	8071
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5736,
			"primary_score":	999996,
			"second_score":	8070
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5737,
			"primary_score":	999996,
			"second_score":	8069
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5738,
			"primary_score":	999996,
			"second_score":	8068
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5739,
			"primary_score":	999996,
			"second_score":	8067
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5741,
			"primary_score":	999996,
			"second_score":	8066
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5742,
			"primary_score":	999996,
			"second_score":	8065
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5745,
			"primary_score":	999997,
			"second_score":	8064
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5746,
			"primary_score":	999997,
			"second_score":	8063
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5748,
			"primary_score":	999997,
			"second_score":	8062
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	5749,
			"primary_score":	999997,
			"second_score":	8061
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6064,
			"primary_score":	999626,
			"second_score":	130310
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6065,
			"primary_score":	999626,
			"second_score":	130309
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6070,
			"primary_score":	999626,
			"second_score":	130308
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6074,
			"primary_score":	999626,
			"second_score":	130307
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6119,
			"primary_score":	999626,
			"second_score":	130305
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6120,
			"primary_score":	999626,
			"second_score":	130304
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6121,
			"primary_score":	999626,
			"second_score":	130303
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6861,
			"primary_score":	999626,
			"second_score":	135212
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6862,
			"primary_score":	999626,
			"second_score":	135211
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6872,
			"primary_score":	999626,
			"second_score":	135210
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6873,
			"primary_score":	999626,
			"second_score":	135209
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6877,
			"primary_score":	999942,
			"second_score":	13687
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6878,
			"primary_score":	999942,
			"second_score":	13686
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6879,
			"primary_score":	999943,
			"second_score":	13685
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6882,
			"primary_score":	999943,
			"second_score":	13684
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6883,
			"primary_score":	999943,
			"second_score":	13683
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6884,
			"primary_score":	999943,
			"second_score":	13682
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6885,
			"primary_score":	999943,
			"second_score":	13681
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6895,
			"primary_score":	999626,
			"second_score":	135207
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6896,
			"primary_score":	999626,
			"second_score":	135206
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	6897,
			"primary_score":	999626,
			"second_score":	135205
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7008,
			"primary_score":	999626,
			"second_score":	135203
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7009,
			"primary_score":	999626,
			"second_score":	135202
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7010,
			"primary_score":	999626,
			"second_score":	135201
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7011,
			"primary_score":	999626,
			"second_score":	135200
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7170,
			"primary_score":	999943,
			"second_score":	13679
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7171,
			"primary_score":	999943,
			"second_score":	13678
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7172,
			"primary_score":	999943,
			"second_score":	13677
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7173,
			"primary_score":	999943,
			"second_score":	13676
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7175,
			"primary_score":	999943,
			"second_score":	13675
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7176,
			"primary_score":	999943,
			"second_score":	13674
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7177,
			"primary_score":	999943,
			"second_score":	13673
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7178,
			"primary_score":	999943,
			"second_score":	13672
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7180,
			"primary_score":	999943,
			"second_score":	13671
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7181,
			"primary_score":	999943,
			"second_score":	13670
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7184,
			"primary_score":	999943,
			"second_score":	13669
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7185,
			"primary_score":	999943,
			"second_score":	13668
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7187,
			"primary_score":	999943,
			"second_score":	13667
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7188,
			"primary_score":	999943,
			"second_score":	13666
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7206,
			"primary_score":	999773,
			"second_score":	18661
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7207,
			"primary_score":	999773,
			"second_score":	18660
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7212,
			"primary_score":	999773,
			"second_score":	18659
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7213,
			"primary_score":	999773,
			"second_score":	18658
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7214,
			"primary_score":	999773,
			"second_score":	18657
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7291,
			"primary_score":	999773,
			"second_score":	18656
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7292,
			"primary_score":	999773,
			"second_score":	18655
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7293,
			"primary_score":	999773,
			"second_score":	18654
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7320,
			"primary_score":	999773,
			"second_score":	18652
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7321,
			"primary_score":	999773,
			"second_score":	18651
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7322,
			"primary_score":	999773,
			"second_score":	18650
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7323,
			"primary_score":	999773,
			"second_score":	18649
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7325,
			"primary_score":	999773,
			"second_score":	18648
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7326,
			"primary_score":	999773,
			"second_score":	18647
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7329,
			"primary_score":	999774,
			"second_score":	18646
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7330,
			"primary_score":	999774,
			"second_score":	18645
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7332,
			"primary_score":	999774,
			"second_score":	18644
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7333,
			"primary_score":	999774,
			"second_score":	18643
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7398,
			"primary_score":	999626,
			"second_score":	132059
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7399,
			"primary_score":	999626,
			"second_score":	132058
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7400,
			"primary_score":	999626,
			"second_score":	132057
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7401,
			"primary_score":	999626,
			"second_score":	132056
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7403,
			"primary_score":	999626,
			"second_score":	132055
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7404,
			"primary_score":	999626,
			"second_score":	132054
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7405,
			"primary_score":	999626,
			"second_score":	132053
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7406,
			"primary_score":	999626,
			"second_score":	132052
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7408,
			"primary_score":	999626,
			"second_score":	132051
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7409,
			"primary_score":	999626,
			"second_score":	132050
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7410,
			"primary_score":	999626,
			"second_score":	132049
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7411,
			"primary_score":	999626,
			"second_score":	132048
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7413,
			"primary_score":	999626,
			"second_score":	132047
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7414,
			"primary_score":	999626,
			"second_score":	132046
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7415,
			"primary_score":	999626,
			"second_score":	132045
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7416,
			"primary_score":	999626,
			"second_score":	132044
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7418,
			"primary_score":	999626,
			"second_score":	132043
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7419,
			"primary_score":	999626,
			"second_score":	132042
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7420,
			"primary_score":	999626,
			"second_score":	132041
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7421,
			"primary_score":	999626,
			"second_score":	132040
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7423,
			"primary_score":	999626,
			"second_score":	132039
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7424,
			"primary_score":	999626,
			"second_score":	132038
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7425,
			"primary_score":	999626,
			"second_score":	132037
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7426,
			"primary_score":	999626,
			"second_score":	132036
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7428,
			"primary_score":	999626,
			"second_score":	132035
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7429,
			"primary_score":	999626,
			"second_score":	132034
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7430,
			"primary_score":	999626,
			"second_score":	132033
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7432,
			"primary_score":	999780,
			"second_score":	11351
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7433,
			"primary_score":	999780,
			"second_score":	11350
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7435,
			"primary_score":	999780,
			"second_score":	11349
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7436,
			"primary_score":	999780,
			"second_score":	11348
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7677,
			"primary_score":	999626,
			"second_score":	143368
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7678,
			"primary_score":	999626,
			"second_score":	143367
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	7679,
			"primary_score":	999626,
			"second_score":	143366
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8085,
			"primary_score":	999626,
			"second_score":	143364
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8086,
			"primary_score":	999626,
			"second_score":	143363
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8087,
			"primary_score":	999626,
			"second_score":	143362
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8088,
			"primary_score":	999626,
			"second_score":	143361
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8090,
			"primary_score":	999626,
			"second_score":	143360
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8091,
			"primary_score":	999626,
			"second_score":	143359
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8094,
			"primary_score":	999626,
			"second_score":	143358
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8095,
			"primary_score":	999626,
			"second_score":	143357
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8097,
			"primary_score":	999626,
			"second_score":	143356
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8098,
			"primary_score":	999626,
			"second_score":	143355
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8105,
			"primary_score":	999881,
			"second_score":	4023
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8139,
			"primary_score":	999881,
			"second_score":	4022
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8140,
			"primary_score":	999881,
			"second_score":	4021
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8141,
			"primary_score":	999881,
			"second_score":	4018
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8142,
			"primary_score":	999881,
			"second_score":	4017
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8153,
			"primary_score":	999881,
			"second_score":	4016
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8159,
			"primary_score":	999886,
			"second_score":	4015
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8160,
			"primary_score":	999887,
			"second_score":	4013
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8198,
			"primary_score":	999881,
			"second_score":	4012
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8199,
			"primary_score":	999881,
			"second_score":	4011
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8200,
			"primary_score":	999881,
			"second_score":	4010
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8203,
			"primary_score":	999881,
			"second_score":	4007
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8205,
			"primary_score":	999881,
			"second_score":	4006
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8206,
			"primary_score":	999881,
			"second_score":	4005
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8207,
			"primary_score":	999881,
			"second_score":	3976
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8208,
			"primary_score":	999881,
			"second_score":	3945
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8209,
			"primary_score":	999881,
			"second_score":	3944
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8223,
			"primary_score":	999881,
			"second_score":	4009
		}, {
			"file":	"Zend/zend_language_scanner.c",
			"line":	8226,
			"primary_score":	999881,
			"second_score":	4008
		}, {
			"file":	"Zend/zend_list.c",
			"line":	52,
			"primary_score":	999626,
			"second_score":	114311
		}, {
			"file":	"Zend/zend_list.c",
			"line":	54,
			"primary_score":	999626,
			"second_score":	114310
		}, {
			"file":	"Zend/zend_list.c",
			"line":	56,
			"primary_score":	999626,
			"second_score":	114300
		}, {
			"file":	"Zend/zend_list.c",
			"line":	57,
			"primary_score":	999626,
			"second_score":	114299
		}, {
			"file":	"Zend/zend_list.c",
			"line":	170,
			"primary_score":	999626,
			"second_score":	114277
		}, {
			"file":	"Zend/zend_list.c",
			"line":	171,
			"primary_score":	999626,
			"second_score":	114276
		}, {
			"file":	"Zend/zend_list.c",
			"line":	172,
			"primary_score":	999626,
			"second_score":	114275
		}, {
			"file":	"Zend/zend_list.c",
			"line":	174,
			"primary_score":	999626,
			"second_score":	114274
		}, {
			"file":	"Zend/zend_list.c",
			"line":	175,
			"primary_score":	999626,
			"second_score":	114264
		}, {
			"file":	"Zend/zend_list.c",
			"line":	183,
			"primary_score":	999626,
			"second_score":	114263
		}, {
			"file":	"Zend/zend_list.c",
			"line":	185,
			"primary_score":	999626,
			"second_score":	114155
		}, {
			"file":	"Zend/zend_list.c",
			"line":	239,
			"primary_score":	999626,
			"second_score":	103767
		}, {
			"file":	"Zend/zend_list.c",
			"line":	347,
			"primary_score":	999626,
			"second_score":	6213
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	39,
			"primary_score":	999626,
			"second_score":	144497
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	41,
			"primary_score":	999626,
			"second_score":	144393
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	42,
			"primary_score":	999626,
			"second_score":	144392
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	43,
			"primary_score":	999626,
			"second_score":	144391
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	44,
			"primary_score":	999904,
			"second_score":	3653
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	46,
			"primary_score":	999626,
			"second_score":	144390
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	48,
			"primary_score":	999626,
			"second_score":	144389
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	49,
			"primary_score":	999626,
			"second_score":	144388
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	51,
			"primary_score":	999626,
			"second_score":	144387
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	93,
			"primary_score":	999626,
			"second_score":	133665
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	94,
			"primary_score":	999626,
			"second_score":	133664
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	96,
			"primary_score":	999626,
			"second_score":	133663
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	97,
			"primary_score":	999626,
			"second_score":	133662
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	98,
			"primary_score":	999626,
			"second_score":	133661
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	99,
			"primary_score":	999626,
			"second_score":	133658
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	100,
			"primary_score":	999626,
			"second_score":	133591
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	109,
			"primary_score":	999626,
			"second_score":	3144
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	111,
			"primary_score":	999626,
			"second_score":	3143
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	112,
			"primary_score":	999736,
			"second_score":	3377
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	113,
			"primary_score":	999736,
			"second_score":	3376
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	116,
			"primary_score":	999736,
			"second_score":	3375
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	117,
			"primary_score":	999736,
			"second_score":	3356
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	120,
			"primary_score":	999626,
			"second_score":	3142
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	126,
			"primary_score":	999626,
			"second_score":	119501
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	127,
			"primary_score":	999626,
			"second_score":	119497
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	190,
			"primary_score":	999626,
			"second_score":	49529
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	192,
			"primary_score":	999626,
			"second_score":	49528
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	233,
			"primary_score":	999626,
			"second_score":	119549
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	235,
			"primary_score":	999626,
			"second_score":	119548
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	275,
			"primary_score":	999626,
			"second_score":	144384
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	277,
			"primary_score":	999626,
			"second_score":	144383
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	278,
			"primary_score":	999626,
			"second_score":	144382
		}, {
			"file":	"Zend/zend_llist.c",
			"line":	279,
			"primary_score":	999626,
			"second_score":	144381
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	114,
			"primary_score":	999988,
			"second_score":	600
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	115,
			"primary_score":	999988,
			"second_score":	599
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	123,
			"primary_score":	999988,
			"second_score":	593
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	125,
			"primary_score":	999988,
			"second_score":	492
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	127,
			"primary_score":	999988,
			"second_score":	181
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	129,
			"primary_score":	999988,
			"second_score":	146
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	130,
			"primary_score":	999988,
			"second_score":	145
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	133,
			"primary_score":	999988,
			"second_score":	143
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	239,
			"primary_score":	999916,
			"second_score":	1009
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	240,
			"primary_score":	999916,
			"second_score":	1008
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	241,
			"primary_score":	999916,
			"second_score":	1007
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	242,
			"primary_score":	999916,
			"second_score":	1006
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	244,
			"primary_score":	999916,
			"second_score":	1005
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	248,
			"primary_score":	999916,
			"second_score":	1004
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	258,
			"primary_score":	999916,
			"second_score":	1003
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	259,
			"primary_score":	999916,
			"second_score":	1002
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	260,
			"primary_score":	999916,
			"second_score":	1001
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	287,
			"primary_score":	999958,
			"second_score":	992
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	296,
			"primary_score":	999965,
			"second_score":	991
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	310,
			"primary_score":	999971,
			"second_score":	990
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	311,
			"primary_score":	999971,
			"second_score":	989
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	312,
			"primary_score":	999971,
			"second_score":	988
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	313,
			"primary_score":	999971,
			"second_score":	987
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	314,
			"primary_score":	999971,
			"second_score":	986
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	315,
			"primary_score":	999971,
			"second_score":	985
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	316,
			"primary_score":	999971,
			"second_score":	984
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	318,
			"primary_score":	999970,
			"second_score":	983
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	355,
			"primary_score":	999984,
			"second_score":	979
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	356,
			"primary_score":	999984,
			"second_score":	978
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	358,
			"primary_score":	999984,
			"second_score":	977
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	364,
			"primary_score":	999984,
			"second_score":	976
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	365,
			"primary_score":	999984,
			"second_score":	975
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	366,
			"primary_score":	999984,
			"second_score":	894
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	370,
			"primary_score":	999984,
			"second_score":	876
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	371,
			"primary_score":	999984,
			"second_score":	875
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	372,
			"primary_score":	999984,
			"second_score":	874
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	373,
			"primary_score":	999984,
			"second_score":	873
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	374,
			"primary_score":	999984,
			"second_score":	872
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	380,
			"primary_score":	999947,
			"second_score":	1019
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	381,
			"primary_score":	999947,
			"second_score":	1018
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	382,
			"primary_score":	999947,
			"second_score":	1017
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	383,
			"primary_score":	999947,
			"second_score":	1016
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	384,
			"primary_score":	999947,
			"second_score":	1015
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	385,
			"primary_score":	999947,
			"second_score":	1014
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	387,
			"primary_score":	999947,
			"second_score":	1013
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	388,
			"primary_score":	999947,
			"second_score":	1012
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	390,
			"primary_score":	999947,
			"second_score":	1011
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	405,
			"primary_score":	999947,
			"second_score":	1010
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	407,
			"primary_score":	999948,
			"second_score":	982
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	415,
			"primary_score":	999983,
			"second_score":	981
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	417,
			"primary_score":	999983,
			"second_score":	980
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	421,
			"primary_score":	999988,
			"second_score":	654
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	422,
			"primary_score":	999988,
			"second_score":	652
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	423,
			"primary_score":	1000000,
			"second_score":	650
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	425,
			"primary_score":	999988,
			"second_score":	602
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	426,
			"primary_score":	999988,
			"second_score":	601
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	427,
			"primary_score":	999988,
			"second_score":	142
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	429,
			"primary_score":	999988,
			"second_score":	141
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	430,
			"primary_score":	999988,
			"second_score":	140
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	431,
			"primary_score":	999988,
			"second_score":	139
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	449,
			"primary_score":	999988,
			"second_score":	137
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	466,
			"primary_score":	999948,
			"second_score":	79
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	471,
			"primary_score":	999948,
			"second_score":	78
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1251,
			"primary_score":	999854,
			"second_score":	1174
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1252,
			"primary_score":	999854,
			"second_score":	1173
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1254,
			"primary_score":	999854,
			"second_score":	1172
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1282,
			"primary_score":	999854,
			"second_score":	1171
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1431,
			"primary_score":	999873,
			"second_score":	2
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1432,
			"primary_score":	999873,
			"second_score":	1
		}, {
			"file":	"Zend/zend_object_handlers.c",
			"line":	1434,
			"primary_score":	999873,
			"second_score":	460
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	143,
			"primary_score":	999855,
			"second_score":	1229
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	145,
			"primary_score":	999855,
			"second_score":	1228
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	146,
			"primary_score":	999855,
			"second_score":	1206
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	147,
			"primary_score":	999855,
			"second_score":	1205
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	148,
			"primary_score":	999855,
			"second_score":	1204
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	149,
			"primary_score":	999855,
			"second_score":	1203
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	150,
			"primary_score":	999855,
			"second_score":	1202
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	151,
			"primary_score":	999855,
			"second_score":	1185
		}, {
			"file":	"Zend/zend_objects.c",
			"line":	152,
			"primary_score":	999855,
			"second_score":	1184
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	41,
			"primary_score":	999626,
			"second_score":	113985
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	42,
			"primary_score":	999626,
			"second_score":	113919
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	47,
			"primary_score":	999626,
			"second_score":	119398
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	49,
			"primary_score":	999626,
			"second_score":	119397
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	82,
			"primary_score":	999626,
			"second_score":	114876
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	84,
			"primary_score":	999626,
			"second_score":	114875
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	104,
			"primary_score":	999847,
			"second_score":	1201
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	105,
			"primary_score":	999847,
			"second_score":	1200
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	107,
			"primary_score":	999847,
			"second_score":	1199
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	111,
			"primary_score":	999847,
			"second_score":	1198
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	115,
			"primary_score":	999847,
			"second_score":	1197
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	117,
			"primary_score":	999847,
			"second_score":	1196
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	118,
			"primary_score":	999847,
			"second_score":	1195
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	119,
			"primary_score":	999847,
			"second_score":	1194
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	121,
			"primary_score":	999847,
			"second_score":	1193
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	122,
			"primary_score":	999847,
			"second_score":	1192
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	123,
			"primary_score":	999847,
			"second_score":	1191
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	124,
			"primary_score":	999847,
			"second_score":	1190
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	125,
			"primary_score":	999847,
			"second_score":	1189
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	126,
			"primary_score":	999847,
			"second_score":	1188
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	127,
			"primary_score":	999847,
			"second_score":	1187
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	132,
			"primary_score":	999847,
			"second_score":	1186
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	144,
			"primary_score":	999959,
			"second_score":	605
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	146,
			"primary_score":	999959,
			"second_score":	604
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	167,
			"primary_score":	999853,
			"second_score":	122
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	169,
			"primary_score":	999853,
			"second_score":	121
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	171,
			"primary_score":	999853,
			"second_score":	120
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	172,
			"primary_score":	999853,
			"second_score":	118
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	173,
			"primary_score":	999853,
			"second_score":	109
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	175,
			"primary_score":	999959,
			"second_score":	105
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	183,
			"primary_score":	999853,
			"second_score":	117
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	184,
			"primary_score":	999853,
			"second_score":	116
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	186,
			"primary_score":	999853,
			"second_score":	115
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	190,
			"primary_score":	999853,
			"second_score":	114
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	196,
			"primary_score":	999853,
			"second_score":	113
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	197,
			"primary_score":	999853,
			"second_score":	112
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	230,
			"primary_score":	999853,
			"second_score":	111
		}, {
			"file":	"Zend/zend_objects_API.c",
			"line":	239,
			"primary_score":	999853,
			"second_score":	110
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	48,
			"primary_score":	999626,
			"second_score":	143645
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	53,
			"primary_score":	999626,
			"second_score":	143755
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	55,
			"primary_score":	999626,
			"second_score":	143754
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	62,
			"primary_score":	999626,
			"second_score":	143753
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	63,
			"primary_score":	999626,
			"second_score":	143649
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	64,
			"primary_score":	999626,
			"second_score":	143648
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	65,
			"primary_score":	999626,
			"second_score":	143647
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	66,
			"primary_score":	999626,
			"second_score":	143646
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	68,
			"primary_score":	999626,
			"second_score":	143540
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	69,
			"primary_score":	999626,
			"second_score":	143539
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	71,
			"primary_score":	999626,
			"second_score":	143538
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	73,
			"primary_score":	999626,
			"second_score":	143537
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	74,
			"primary_score":	999626,
			"second_score":	143536
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	75,
			"primary_score":	999626,
			"second_score":	143534
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	76,
			"primary_score":	999626,
			"second_score":	143533
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	78,
			"primary_score":	999626,
			"second_score":	143532
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	79,
			"primary_score":	999626,
			"second_score":	143531
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	80,
			"primary_score":	999626,
			"second_score":	143530
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	82,
			"primary_score":	999626,
			"second_score":	143529
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	84,
			"primary_score":	999626,
			"second_score":	143528
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	85,
			"primary_score":	999626,
			"second_score":	143527
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	86,
			"primary_score":	999626,
			"second_score":	143526
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	88,
			"primary_score":	999626,
			"second_score":	143525
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	89,
			"primary_score":	999626,
			"second_score":	143524
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	91,
			"primary_score":	999626,
			"second_score":	143523
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	93,
			"primary_score":	999626,
			"second_score":	143522
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	95,
			"primary_score":	999626,
			"second_score":	143521
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	97,
			"primary_score":	999626,
			"second_score":	143520
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	98,
			"primary_score":	999626,
			"second_score":	143519
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	100,
			"primary_score":	999626,
			"second_score":	143518
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	101,
			"primary_score":	999626,
			"second_score":	143517
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	103,
			"primary_score":	999626,
			"second_score":	143516
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	105,
			"primary_score":	999626,
			"second_score":	143515
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	136,
			"primary_score":	999626,
			"second_score":	114956
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	140,
			"primary_score":	999626,
			"second_score":	114955
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	197,
			"primary_score":	999626,
			"second_score":	114939
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	201,
			"primary_score":	999626,
			"second_score":	114938
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	266,
			"primary_score":	999626,
			"second_score":	15261
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	268,
			"primary_score":	999626,
			"second_score":	15260
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	269,
			"primary_score":	999790,
			"second_score":	8234
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	271,
			"primary_score":	999626,
			"second_score":	15259
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	312,
			"primary_score":	999626,
			"second_score":	19041
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	314,
			"primary_score":	999626,
			"second_score":	19040
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	315,
			"primary_score":	999626,
			"second_score":	18977
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	316,
			"primary_score":	999626,
			"second_score":	18976
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	319,
			"primary_score":	999626,
			"second_score":	18968
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	321,
			"primary_score":	999626,
			"second_score":	15258
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	329,
			"primary_score":	999626,
			"second_score":	15257
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	330,
			"primary_score":	999626,
			"second_score":	15249
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	333,
			"primary_score":	999626,
			"second_score":	15248
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	334,
			"primary_score":	999626,
			"second_score":	14819
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	335,
			"primary_score":	999626,
			"second_score":	14811
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	336,
			"primary_score":	999626,
			"second_score":	16315
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	338,
			"primary_score":	999626,
			"second_score":	14810
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	339,
			"primary_score":	999626,
			"second_score":	14809
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	350,
			"primary_score":	999626,
			"second_score":	119899
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	351,
			"primary_score":	999626,
			"second_score":	119898
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	352,
			"primary_score":	999626,
			"second_score":	119897
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	354,
			"primary_score":	999626,
			"second_score":	119896
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	359,
			"primary_score":	999626,
			"second_score":	119895
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	360,
			"primary_score":	999626,
			"second_score":	119894
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	363,
			"primary_score":	999626,
			"second_score":	119875
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	367,
			"primary_score":	999626,
			"second_score":	119874
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	369,
			"primary_score":	999626,
			"second_score":	119855
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	378,
			"primary_score":	999626,
			"second_score":	119854
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	379,
			"primary_score":	999626,
			"second_score":	119853
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	380,
			"primary_score":	999626,
			"second_score":	119852
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	381,
			"primary_score":	999626,
			"second_score":	119675
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	382,
			"primary_score":	999626,
			"second_score":	119672
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	384,
			"primary_score":	999626,
			"second_score":	119671
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	386,
			"primary_score":	999626,
			"second_score":	119606
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	388,
			"primary_score":	999626,
			"second_score":	119555
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	391,
			"primary_score":	999626,
			"second_score":	119554
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	394,
			"primary_score":	999626,
			"second_score":	119553
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	397,
			"primary_score":	999626,
			"second_score":	119552
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	400,
			"primary_score":	999626,
			"second_score":	119551
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	401,
			"primary_score":	999626,
			"second_score":	119550
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	403,
			"primary_score":	999626,
			"second_score":	119547
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	416,
			"primary_score":	999626,
			"second_score":	134042
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	417,
			"primary_score":	999626,
			"second_score":	134041
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	418,
			"primary_score":	999626,
			"second_score":	134040
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	423,
			"primary_score":	999626,
			"second_score":	134047
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	424,
			"primary_score":	999626,
			"second_score":	134046
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	426,
			"primary_score":	999626,
			"second_score":	134045
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	437,
			"primary_score":	999626,
			"second_score":	134044
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	439,
			"primary_score":	999626,
			"second_score":	134043
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	441,
			"primary_score":	999626,
			"second_score":	134039
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	446,
			"primary_score":	999626,
			"second_score":	134050
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	488,
			"primary_score":	999626,
			"second_score":	134011
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	490,
			"primary_score":	999626,
			"second_score":	134010
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	493,
			"primary_score":	999626,
			"second_score":	134009
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	496,
			"primary_score":	999626,
			"second_score":	134008
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	497,
			"primary_score":	999626,
			"second_score":	134007
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	500,
			"primary_score":	999626,
			"second_score":	134004
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	501,
			"primary_score":	999758,
			"second_score":	2153
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	502,
			"primary_score":	999758,
			"second_score":	2097
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	504,
			"primary_score":	999626,
			"second_score":	134003
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	505,
			"primary_score":	999626,
			"second_score":	134002
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	506,
			"primary_score":	999626,
			"second_score":	133943
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	508,
			"primary_score":	999626,
			"second_score":	133942
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	509,
			"primary_score":	999626,
			"second_score":	133941
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	510,
			"primary_score":	999626,
			"second_score":	133885
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	513,
			"primary_score":	999626,
			"second_score":	133884
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	514,
			"primary_score":	999626,
			"second_score":	133883
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	515,
			"primary_score":	999626,
			"second_score":	133882
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	516,
			"primary_score":	999626,
			"second_score":	133838
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	517,
			"primary_score":	999626,
			"second_score":	133837
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	519,
			"primary_score":	999626,
			"second_score":	133836
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	520,
			"primary_score":	999721,
			"second_score":	1905
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	522,
			"primary_score":	999626,
			"second_score":	133835
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	530,
			"primary_score":	999626,
			"second_score":	125720
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	537,
			"primary_score":	999626,
			"second_score":	125781
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	539,
			"primary_score":	999626,
			"second_score":	133834
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	540,
			"primary_score":	999626,
			"second_score":	133830
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	543,
			"primary_score":	999626,
			"second_score":	133829
		}, {
			"file":	"Zend/zend_opcode.c",
			"line":	544,
			"primary_score":	999626,
			"second_score":	133828
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	543,
			"primary_score":	999626,
			"second_score":	120310
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	544,
			"primary_score":	999626,
			"second_score":	120309
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	546,
			"primary_score":	999626,
			"second_score":	120308
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	558,
			"primary_score":	999626,
			"second_score":	120307
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	559,
			"primary_score":	999626,
			"second_score":	120279
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	561,
			"primary_score":	999626,
			"second_score":	120278
		}, {
			"file":	"Zend/zend_operators.c",
			"line":	608,
			"primary_score":	999626,
			"second_score":	120277
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	78,
			"primary_score":	999626,
			"second_score":	113987
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	79,
			"primary_score":	999626,
			"second_score":	114013
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	86,
			"primary_score":	999626,
			"second_score":	114980
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	88,
			"primary_score":	999626,
			"second_score":	114979
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	96,
			"primary_score":	999626,
			"second_score":	114981
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	97,
			"primary_score":	999626,
			"second_score":	114978
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	98,
			"primary_score":	999626,
			"second_score":	114977
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	100,
			"primary_score":	999626,
			"second_score":	114976
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	104,
			"primary_score":	999626,
			"second_score":	114975
		}, {
			"file":	"Zend/zend_ptr_stack.c",
			"line":	105,
			"primary_score":	999626,
			"second_score":	114974
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	62,
			"primary_score":	999626,
			"second_score":	133455
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	64,
			"primary_score":	999626,
			"second_score":	123363
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	65,
			"primary_score":	999626,
			"second_score":	123362
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	66,
			"primary_score":	999626,
			"second_score":	123361
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	67,
			"primary_score":	999626,
			"second_score":	123360
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	87,
			"primary_score":	999626,
			"second_score":	123331
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	88,
			"primary_score":	999626,
			"second_score":	123330
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	89,
			"primary_score":	999626,
			"second_score":	123329
		}, {
			"file":	"Zend/zend_ptr_stack.h",
			"line":	90,
			"primary_score":	999626,
			"second_score":	123328
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	27,
			"primary_score":	999626,
			"second_score":	114995
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	28,
			"primary_score":	999626,
			"second_score":	114994
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	29,
			"primary_score":	999626,
			"second_score":	114993
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	30,
			"primary_score":	999626,
			"second_score":	114992
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	50,
			"primary_score":	999626,
			"second_score":	134615
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	51,
			"primary_score":	999626,
			"second_score":	134614
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	52,
			"primary_score":	999626,
			"second_score":	134613
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	62,
			"primary_score":	999626,
			"second_score":	134605
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	63,
			"primary_score":	999626,
			"second_score":	134604
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	65,
			"primary_score":	999626,
			"second_score":	134585
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	83,
			"primary_score":	999626,
			"second_score":	133824
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	84,
			"primary_score":	999626,
			"second_score":	133823
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	86,
			"primary_score":	999731,
			"second_score":	8460
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	93,
			"primary_score":	999626,
			"second_score":	113757
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	95,
			"primary_score":	999626,
			"second_score":	113756
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	103,
			"primary_score":	999626,
			"second_score":	113755
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	121,
			"primary_score":	999626,
			"second_score":	134054
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	123,
			"primary_score":	999626,
			"second_score":	134053
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	126,
			"primary_score":	999784,
			"second_score":	8910
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	127,
			"primary_score":	999784,
			"second_score":	8906
		}, {
			"file":	"Zend/zend_stack.c",
			"line":	130,
			"primary_score":	999626,
			"second_score":	134052
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	46,
			"primary_score":	999626,
			"second_score":	133638
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	47,
			"primary_score":	999626,
			"second_score":	133637
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	67,
			"primary_score":	999626,
			"second_score":	133647
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	68,
			"primary_score":	999626,
			"second_score":	133646
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	74,
			"primary_score":	999626,
			"second_score":	133645
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	75,
			"primary_score":	999626,
			"second_score":	133644
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	76,
			"primary_score":	999626,
			"second_score":	133643
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	77,
			"primary_score":	999626,
			"second_score":	133642
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	78,
			"primary_score":	999626,
			"second_score":	133641
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	83,
			"primary_score":	999626,
			"second_score":	133648
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	84,
			"primary_score":	999626,
			"second_score":	133640
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	85,
			"primary_score":	999626,
			"second_score":	133639
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	105,
			"primary_score":	999626,
			"second_score":	144523
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	109,
			"primary_score":	999626,
			"second_score":	144522
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	209,
			"primary_score":	999626,
			"second_score":	144521
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	213,
			"primary_score":	999626,
			"second_score":	144520
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	214,
			"primary_score":	999626,
			"second_score":	144519
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	216,
			"primary_score":	999626,
			"second_score":	144518
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	218,
			"primary_score":	999626,
			"second_score":	144517
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	222,
			"primary_score":	999626,
			"second_score":	144516
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	223,
			"primary_score":	999626,
			"second_score":	144515
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	224,
			"primary_score":	999626,
			"second_score":	144514
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	225,
			"primary_score":	999626,
			"second_score":	144513
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	227,
			"primary_score":	999626,
			"second_score":	144512
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	228,
			"primary_score":	999626,
			"second_score":	144511
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	229,
			"primary_score":	999626,
			"second_score":	144510
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	231,
			"primary_score":	999626,
			"second_score":	144509
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	232,
			"primary_score":	999626,
			"second_score":	144508
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	234,
			"primary_score":	999626,
			"second_score":	144507
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	275,
			"primary_score":	999626,
			"second_score":	144506
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	276,
			"primary_score":	999626,
			"second_score":	144505
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	277,
			"primary_score":	999626,
			"second_score":	144504
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	278,
			"primary_score":	999626,
			"second_score":	144503
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	279,
			"primary_score":	999626,
			"second_score":	144502
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	281,
			"primary_score":	999626,
			"second_score":	144501
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	282,
			"primary_score":	999626,
			"second_score":	144500
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	284,
			"primary_score":	999626,
			"second_score":	144499
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	289,
			"primary_score":	999626,
			"second_score":	133650
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	299,
			"primary_score":	999626,
			"second_score":	133649
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	301,
			"primary_score":	999626,
			"second_score":	133636
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	302,
			"primary_score":	999626,
			"second_score":	133635
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	309,
			"primary_score":	999626,
			"second_score":	133634
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	310,
			"primary_score":	999626,
			"second_score":	133633
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	311,
			"primary_score":	999626,
			"second_score":	133614
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	313,
			"primary_score":	999626,
			"second_score":	133613
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	322,
			"primary_score":	999626,
			"second_score":	133660
		}, {
			"file":	"Zend/zend_stream.c",
			"line":	325,
			"primary_score":	999626,
			"second_score":	133659
		}, {
			"file":	"Zend/zend_string.c",
			"line":	77,
			"primary_score":	999626,
			"second_score":	6113
		}, {
			"file":	"Zend/zend_string.c",
			"line":	78,
			"primary_score":	999626,
			"second_score":	6112
		}, {
			"file":	"Zend/zend_string.c",
			"line":	85,
			"primary_score":	999626,
			"second_score":	134866
		}, {
			"file":	"Zend/zend_string.c",
			"line":	86,
			"primary_score":	999626,
			"second_score":	134865
		}, {
			"file":	"Zend/zend_string.c",
			"line":	87,
			"primary_score":	999626,
			"second_score":	134864
		}, {
			"file":	"Zend/zend_string.c",
			"line":	89,
			"primary_score":	999626,
			"second_score":	134863
		}, {
			"file":	"Zend/zend_string.c",
			"line":	90,
			"primary_score":	999890,
			"second_score":	3266
		}, {
			"file":	"Zend/zend_string.c",
			"line":	93,
			"primary_score":	999626,
			"second_score":	134862
		}, {
			"file":	"Zend/zend_string.c",
			"line":	94,
			"primary_score":	999626,
			"second_score":	134852
		}, {
			"file":	"Zend/zend_string.c",
			"line":	95,
			"primary_score":	999626,
			"second_score":	134851
		}, {
			"file":	"Zend/zend_string.c",
			"line":	96,
			"primary_score":	999626,
			"second_score":	134850
		}, {
			"file":	"Zend/zend_string.c",
			"line":	97,
			"primary_score":	999626,
			"second_score":	134849
		}, {
			"file":	"Zend/zend_string.c",
			"line":	105,
			"primary_score":	999626,
			"second_score":	135470
		}, {
			"file":	"Zend/zend_string.c",
			"line":	108,
			"primary_score":	999626,
			"second_score":	136548
		}, {
			"file":	"Zend/zend_string.c",
			"line":	114,
			"primary_score":	999626,
			"second_score":	136547
		}, {
			"file":	"Zend/zend_string.c",
			"line":	115,
			"primary_score":	999626,
			"second_score":	136546
		}, {
			"file":	"Zend/zend_string.c",
			"line":	121,
			"primary_score":	999626,
			"second_score":	136545
		}, {
			"file":	"Zend/zend_string.c",
			"line":	122,
			"primary_score":	999626,
			"second_score":	136544
		}, {
			"file":	"Zend/zend_string.c",
			"line":	123,
			"primary_score":	999626,
			"second_score":	136543
		}, {
			"file":	"Zend/zend_string.c",
			"line":	124,
			"primary_score":	999626,
			"second_score":	136542
		}, {
			"file":	"Zend/zend_string.c",
			"line":	126,
			"primary_score":	999626,
			"second_score":	136523
		}, {
			"file":	"Zend/zend_string.c",
			"line":	127,
			"primary_score":	999626,
			"second_score":	136522
		}, {
			"file":	"Zend/zend_string.c",
			"line":	128,
			"primary_score":	999626,
			"second_score":	136521
		}, {
			"file":	"Zend/zend_string.c",
			"line":	129,
			"primary_score":	999626,
			"second_score":	136520
		}, {
			"file":	"Zend/zend_string.c",
			"line":	131,
			"primary_score":	999626,
			"second_score":	136519
		}, {
			"file":	"Zend/zend_string.c",
			"line":	132,
			"primary_score":	999626,
			"second_score":	136518
		}, {
			"file":	"Zend/zend_string.c",
			"line":	133,
			"primary_score":	999626,
			"second_score":	136517
		}, {
			"file":	"Zend/zend_string.c",
			"line":	134,
			"primary_score":	999626,
			"second_score":	136516
		}, {
			"file":	"Zend/zend_string.c",
			"line":	137,
			"primary_score":	999626,
			"second_score":	136515
		}, {
			"file":	"Zend/zend_string.c",
			"line":	139,
			"primary_score":	999626,
			"second_score":	136513
		}, {
			"file":	"Zend/zend_string.c",
			"line":	140,
			"primary_score":	999626,
			"second_score":	136512
		}, {
			"file":	"Zend/zend_string.c",
			"line":	141,
			"primary_score":	999626,
			"second_score":	136511
		}, {
			"file":	"Zend/zend_string.c",
			"line":	142,
			"primary_score":	999626,
			"second_score":	136510
		}, {
			"file":	"Zend/zend_string.c",
			"line":	143,
			"primary_score":	999626,
			"second_score":	136509
		}, {
			"file":	"Zend/zend_string.c",
			"line":	145,
			"primary_score":	999626,
			"second_score":	136508
		}, {
			"file":	"Zend/zend_string.c",
			"line":	149,
			"primary_score":	999626,
			"second_score":	136507
		}, {
			"file":	"Zend/zend_string.c",
			"line":	151,
			"primary_score":	999626,
			"second_score":	136506
		}, {
			"file":	"Zend/zend_string.c",
			"line":	153,
			"primary_score":	999626,
			"second_score":	136504
		}, {
			"file":	"Zend/zend_string.c",
			"line":	155,
			"primary_score":	999626,
			"second_score":	136503
		}, {
			"file":	"Zend/zend_string.c",
			"line":	174,
			"primary_score":	999626,
			"second_score":	136502
		}, {
			"file":	"Zend/zend_string.c",
			"line":	188,
			"primary_score":	999626,
			"second_score":	113203
		}, {
			"file":	"Zend/zend_string.c",
			"line":	189,
			"primary_score":	999626,
			"second_score":	113202
		}, {
			"file":	"Zend/zend_string.c",
			"line":	192,
			"primary_score":	999626,
			"second_score":	113201
		}, {
			"file":	"Zend/zend_string.c",
			"line":	199,
			"primary_score":	999626,
			"second_score":	113200
		}, {
			"file":	"Zend/zend_string.c",
			"line":	200,
			"primary_score":	999626,
			"second_score":	103799
		}, {
			"file":	"Zend/zend_string.c",
			"line":	201,
			"primary_score":	999626,
			"second_score":	103798
		}, {
			"file":	"Zend/zend_string.c",
			"line":	202,
			"primary_score":	999626,
			"second_score":	110377
		}, {
			"file":	"Zend/zend_string.c",
			"line":	203,
			"primary_score":	999626,
			"second_score":	110376
		}, {
			"file":	"Zend/zend_string.c",
			"line":	204,
			"primary_score":	999626,
			"second_score":	110375
		}, {
			"file":	"Zend/zend_string.c",
			"line":	208,
			"primary_score":	999626,
			"second_score":	110374
		}, {
			"file":	"Zend/zend_string.c",
			"line":	209,
			"primary_score":	999626,
			"second_score":	104886
		}, {
			"file":	"Zend/zend_string.c",
			"line":	211,
			"primary_score":	999626,
			"second_score":	110373
		}, {
			"file":	"Zend/zend_string.c",
			"line":	213,
			"primary_score":	999626,
			"second_score":	110372
		}, {
			"file":	"Zend/zend_string.c",
			"line":	215,
			"primary_score":	999626,
			"second_score":	103797
		}, {
			"file":	"Zend/zend_string.c",
			"line":	216,
			"primary_score":	999626,
			"second_score":	103796
		}, {
			"file":	"Zend/zend_string.c",
			"line":	218,
			"primary_score":	999626,
			"second_score":	103795
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	459,
			"primary_score":	999626,
			"second_score":	6269
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	467,
			"primary_score":	999626,
			"second_score":	6215
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1379,
			"primary_score":	999626,
			"second_score":	6268
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1380,
			"primary_score":	999626,
			"second_score":	6267
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1382,
			"primary_score":	999626,
			"second_score":	6266
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1383,
			"primary_score":	999626,
			"second_score":	6265
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1384,
			"primary_score":	999626,
			"second_score":	6219
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1385,
			"primary_score":	999626,
			"second_score":	6218
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1389,
			"primary_score":	999626,
			"second_score":	6217
		}, {
			"file":	"Zend/zend_strtod.c",
			"line":	1391,
			"primary_score":	999626,
			"second_score":	6216
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	32,
			"primary_score":	999626,
			"second_score":	114314
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	37,
			"primary_score":	999626,
			"second_score":	115633
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	38,
			"primary_score":	999626,
			"second_score":	115612
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	41,
			"primary_score":	999626,
			"second_score":	115104
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	43,
			"primary_score":	999626,
			"second_score":	115103
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	44,
			"primary_score":	999626,
			"second_score":	115102
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	45,
			"primary_score":	999626,
			"second_score":	115094
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	48,
			"primary_score":	999626,
			"second_score":	115075
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	51,
			"primary_score":	999853,
			"second_score":	124
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	53,
			"primary_score":	999853,
			"second_score":	123
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	55,
			"primary_score":	999853,
			"second_score":	99
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	58,
			"primary_score":	999626,
			"second_score":	114313
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	61,
			"primary_score":	999626,
			"second_score":	114312
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	63,
			"primary_score":	999626,
			"second_score":	114111
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	77,
			"primary_score":	999626,
			"second_score":	15277
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	81,
			"primary_score":	999626,
			"second_score":	19018
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	82,
			"primary_score":	999626,
			"second_score":	19015
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	107,
			"primary_score":	999626,
			"second_score":	133471
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	121,
			"primary_score":	999626,
			"second_score":	133470
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	124,
			"primary_score":	999626,
			"second_score":	133469
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	143,
			"primary_score":	999959,
			"second_score":	607
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	144,
			"primary_score":	999959,
			"second_score":	606
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	146,
			"primary_score":	999959,
			"second_score":	603
		}, {
			"file":	"Zend/zend_variables.c",
			"line":	153,
			"primary_score":	999626,
			"second_score":	119968
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	32,
			"primary_score":	999626,
			"second_score":	114316
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	33,
			"primary_score":	999626,
			"second_score":	115742
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	35,
			"primary_score":	999626,
			"second_score":	114315
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	42,
			"primary_score":	999626,
			"second_score":	133473
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	43,
			"primary_score":	999626,
			"second_score":	119232
		}, {
			"file":	"Zend/zend_variables.h",
			"line":	45,
			"primary_score":	999626,
			"second_score":	133472
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	345,
			"primary_score":	999626,
			"second_score":	133585
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	346,
			"primary_score":	999626,
			"second_score":	133584
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	347,
			"primary_score":	999626,
			"second_score":	133583
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	350,
			"primary_score":	999626,
			"second_score":	133582
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	354,
			"primary_score":	999626,
			"second_score":	133581
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	356,
			"primary_score":	999626,
			"second_score":	133580
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	363,
			"primary_score":	999626,
			"second_score":	133571
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	364,
			"primary_score":	999626,
			"second_score":	133570
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	365,
			"primary_score":	999626,
			"second_score":	133569
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	366,
			"primary_score":	999626,
			"second_score":	133568
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	367,
			"primary_score":	999626,
			"second_score":	133567
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	368,
			"primary_score":	999626,
			"second_score":	133566
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	369,
			"primary_score":	999626,
			"second_score":	133565
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	370,
			"primary_score":	999626,
			"second_score":	133564
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	371,
			"primary_score":	999626,
			"second_score":	133563
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	372,
			"primary_score":	999626,
			"second_score":	133562
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	373,
			"primary_score":	999626,
			"second_score":	133561
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	374,
			"primary_score":	999626,
			"second_score":	133560
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	375,
			"primary_score":	999626,
			"second_score":	133559
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	377,
			"primary_score":	999626,
			"second_score":	133558
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	379,
			"primary_score":	999626,
			"second_score":	133557
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	380,
			"primary_score":	999626,
			"second_score":	133556
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	383,
			"primary_score":	999626,
			"second_score":	133523
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	384,
			"primary_score":	999982,
			"second_score":	356
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	385,
			"primary_score":	999982,
			"second_score":	354
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	386,
			"primary_score":	999982,
			"second_score":	353
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	387,
			"primary_score":	999982,
			"second_score":	352
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	395,
			"primary_score":	999626,
			"second_score":	133522
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	396,
			"primary_score":	999626,
			"second_score":	133521
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	397,
			"primary_score":	999626,
			"second_score":	133520
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	399,
			"primary_score":	999626,
			"second_score":	133519
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	400,
			"primary_score":	999626,
			"second_score":	133518
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	402,
			"primary_score":	999626,
			"second_score":	133517
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	403,
			"primary_score":	999626,
			"second_score":	119927
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	410,
			"primary_score":	999626,
			"second_score":	119926
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	411,
			"primary_score":	999626,
			"second_score":	119905
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	414,
			"primary_score":	999626,
			"second_score":	119904
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	431,
			"primary_score":	999626,
			"second_score":	119982
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	436,
			"primary_score":	999626,
			"second_score":	119981
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	437,
			"primary_score":	999626,
			"second_score":	119980
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	458,
			"primary_score":	999626,
			"second_score":	119918
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	459,
			"primary_score":	999626,
			"second_score":	119917
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	461,
			"primary_score":	999626,
			"second_score":	119916
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	462,
			"primary_score":	999626,
			"second_score":	119915
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	463,
			"primary_score":	999626,
			"second_score":	119914
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	464,
			"primary_score":	999848,
			"second_score":	282
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	465,
			"primary_score":	999848,
			"second_score":	281
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	466,
			"primary_score":	999848,
			"second_score":	280
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	467,
			"primary_score":	999895,
			"second_score":	269
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	468,
			"primary_score":	999907,
			"second_score":	268
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	470,
			"primary_score":	999895,
			"second_score":	248
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	474,
			"primary_score":	999626,
			"second_score":	119913
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	476,
			"primary_score":	999626,
			"second_score":	119912
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	478,
			"primary_score":	999626,
			"second_score":	119908
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	481,
			"primary_score":	999626,
			"second_score":	119907
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	566,
			"primary_score":	999626,
			"second_score":	119906
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	571,
			"primary_score":	999626,
			"second_score":	123341
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	572,
			"primary_score":	999626,
			"second_score":	123340
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	573,
			"primary_score":	999626,
			"second_score":	123339
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	575,
			"primary_score":	999626,
			"second_score":	123338
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	576,
			"primary_score":	999626,
			"second_score":	123337
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	589,
			"primary_score":	999626,
			"second_score":	123336
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	603,
			"primary_score":	999626,
			"second_score":	123335
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	613,
			"primary_score":	999626,
			"second_score":	123334
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	614,
			"primary_score":	999626,
			"second_score":	123324
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	615,
			"primary_score":	999626,
			"second_score":	123320
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	617,
			"primary_score":	999626,
			"second_score":	123319
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	618,
			"primary_score":	999626,
			"second_score":	123318
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	620,
			"primary_score":	999626,
			"second_score":	123317
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	621,
			"primary_score":	999626,
			"second_score":	123207
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	622,
			"primary_score":	999626,
			"second_score":	123204
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	623,
			"primary_score":	999626,
			"second_score":	123203
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	625,
			"primary_score":	999626,
			"second_score":	123202
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	626,
			"primary_score":	999626,
			"second_score":	123201
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	627,
			"primary_score":	999626,
			"second_score":	123200
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	628,
			"primary_score":	999626,
			"second_score":	123199
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	630,
			"primary_score":	999626,
			"second_score":	123198
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	631,
			"primary_score":	999626,
			"second_score":	123187
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	632,
			"primary_score":	999626,
			"second_score":	123178
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	636,
			"primary_score":	999626,
			"second_score":	123177
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	638,
			"primary_score":	999626,
			"second_score":	123176
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	643,
			"primary_score":	999626,
			"second_score":	122015
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	709,
			"primary_score":	999626,
			"second_score":	122014
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	710,
			"primary_score":	999626,
			"second_score":	122013
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	712,
			"primary_score":	999626,
			"second_score":	122012
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	729,
			"primary_score":	999626,
			"second_score":	122011
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	730,
			"primary_score":	999626,
			"second_score":	122010
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	732,
			"primary_score":	999626,
			"second_score":	122009
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	734,
			"primary_score":	999626,
			"second_score":	120099
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	742,
			"primary_score":	999626,
			"second_score":	120098
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	753,
			"primary_score":	999920,
			"second_score":	343
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	754,
			"primary_score":	999920,
			"second_score":	342
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	755,
			"primary_score":	999920,
			"second_score":	341
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	757,
			"primary_score":	999920,
			"second_score":	336
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	758,
			"primary_score":	999920,
			"second_score":	335
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	779,
			"primary_score":	999924,
			"second_score":	334
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	781,
			"primary_score":	999924,
			"second_score":	333
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	782,
			"primary_score":	999926,
			"second_score":	324
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	783,
			"primary_score":	999926,
			"second_score":	313
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	784,
			"primary_score":	999926,
			"second_score":	311
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	785,
			"primary_score":	999926,
			"second_score":	310
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	788,
			"primary_score":	999923,
			"second_score":	308
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	789,
			"primary_score":	999923,
			"second_score":	307
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	794,
			"primary_score":	999851,
			"second_score":	1285
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	795,
			"primary_score":	999851,
			"second_score":	1284
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	796,
			"primary_score":	999851,
			"second_score":	1283
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	798,
			"primary_score":	999851,
			"second_score":	1282
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	799,
			"primary_score":	999851,
			"second_score":	1281
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	808,
			"primary_score":	999854,
			"second_score":	1280
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	809,
			"primary_score":	999854,
			"second_score":	1256
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	810,
			"primary_score":	999854,
			"second_score":	1178
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	812,
			"primary_score":	999854,
			"second_score":	1175
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	814,
			"primary_score":	999854,
			"second_score":	1170
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	815,
			"primary_score":	999890,
			"second_score":	1169
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	816,
			"primary_score":	999891,
			"second_score":	1168
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	820,
			"primary_score":	999890,
			"second_score":	1164
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	984,
			"primary_score":	999797,
			"second_score":	1544
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1151,
			"primary_score":	999850,
			"second_score":	1333
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1153,
			"primary_score":	999850,
			"second_score":	1332
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1154,
			"primary_score":	999850,
			"second_score":	1331
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1155,
			"primary_score":	999850,
			"second_score":	1330
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1161,
			"primary_score":	999850,
			"second_score":	1329
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1163,
			"primary_score":	999850,
			"second_score":	1328
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1164,
			"primary_score":	999850,
			"second_score":	1327
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1167,
			"primary_score":	999850,
			"second_score":	1326
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1168,
			"primary_score":	999850,
			"second_score":	1292
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1178,
			"primary_score":	999850,
			"second_score":	1290
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1179,
			"primary_score":	999850,
			"second_score":	1289
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1731,
			"primary_score":	999626,
			"second_score":	121634
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1733,
			"primary_score":	999626,
			"second_score":	121633
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1734,
			"primary_score":	999626,
			"second_score":	121632
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1736,
			"primary_score":	999626,
			"second_score":	121631
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1737,
			"primary_score":	999626,
			"second_score":	121630
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1739,
			"primary_score":	999626,
			"second_score":	121629
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1746,
			"primary_score":	999626,
			"second_score":	121628
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1749,
			"primary_score":	999626,
			"second_score":	121564
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1750,
			"primary_score":	999626,
			"second_score":	121563
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1919,
			"primary_score":	999626,
			"second_score":	123367
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1921,
			"primary_score":	999626,
			"second_score":	123366
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1923,
			"primary_score":	999626,
			"second_score":	123365
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1925,
			"primary_score":	999626,
			"second_score":	123359
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1927,
			"primary_score":	999626,
			"second_score":	123358
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1931,
			"primary_score":	999626,
			"second_score":	123345
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1933,
			"primary_score":	999626,
			"second_score":	123343
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1935,
			"primary_score":	999626,
			"second_score":	123342
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1940,
			"primary_score":	999626,
			"second_score":	119925
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1941,
			"primary_score":	999626,
			"second_score":	119924
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1944,
			"primary_score":	999626,
			"second_score":	119923
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1945,
			"primary_score":	999626,
			"second_score":	119922
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1947,
			"primary_score":	999626,
			"second_score":	119921
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1948,
			"primary_score":	999626,
			"second_score":	119920
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1951,
			"primary_score":	999626,
			"second_score":	119269
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1952,
			"primary_score":	999626,
			"second_score":	119268
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1954,
			"primary_score":	999626,
			"second_score":	119267
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1956,
			"primary_score":	999626,
			"second_score":	119266
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1957,
			"primary_score":	999626,
			"second_score":	119242
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1958,
			"primary_score":	999626,
			"second_score":	119234
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1959,
			"primary_score":	999626,
			"second_score":	119231
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	1978,
			"primary_score":	999626,
			"second_score":	119919
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2077,
			"primary_score":	999626,
			"second_score":	133514
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2079,
			"primary_score":	999626,
			"second_score":	133513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2080,
			"primary_score":	999626,
			"second_score":	133512
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2084,
			"primary_score":	999626,
			"second_score":	133511
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2085,
			"primary_score":	999626,
			"second_score":	133510
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2086,
			"primary_score":	999626,
			"second_score":	133509
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2089,
			"primary_score":	999626,
			"second_score":	133508
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2091,
			"primary_score":	999626,
			"second_score":	133507
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2092,
			"primary_score":	999626,
			"second_score":	133483
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2093,
			"primary_score":	999626,
			"second_score":	133475
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2094,
			"primary_score":	999626,
			"second_score":	133474
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2096,
			"primary_score":	999626,
			"second_score":	133468
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2099,
			"primary_score":	999626,
			"second_score":	133464
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	2100,
			"primary_score":	999626,
			"second_score":	133463
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4876,
			"primary_score":	999938,
			"second_score":	1539
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4877,
			"primary_score":	999938,
			"second_score":	1538
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4878,
			"primary_score":	999938,
			"second_score":	1537
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4879,
			"primary_score":	999938,
			"second_score":	1536
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4880,
			"primary_score":	999938,
			"second_score":	1535
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4881,
			"primary_score":	999938,
			"second_score":	1534
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4882,
			"primary_score":	999938,
			"second_score":	1533
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4884,
			"primary_score":	999938,
			"second_score":	1532
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4885,
			"primary_score":	999938,
			"second_score":	1531
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4887,
			"primary_score":	999938,
			"second_score":	1530
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4896,
			"primary_score":	999938,
			"second_score":	1529
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4912,
			"primary_score":	999938,
			"second_score":	1528
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4919,
			"primary_score":	999938,
			"second_score":	1526
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4920,
			"primary_score":	999938,
			"second_score":	1525
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4927,
			"primary_score":	999938,
			"second_score":	1524
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4928,
			"primary_score":	999997,
			"second_score":	1515
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4941,
			"primary_score":	999999,
			"second_score":	1513
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4942,
			"primary_score":	999999,
			"second_score":	1448
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4946,
			"primary_score":	999938,
			"second_score":	1447
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4962,
			"primary_score":	999997,
			"second_score":	1446
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4967,
			"primary_score":	999938,
			"second_score":	1445
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4970,
			"primary_score":	999938,
			"second_score":	1444
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4973,
			"primary_score":	999938,
			"second_score":	1443
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4974,
			"primary_score":	999938,
			"second_score":	1441
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4992,
			"primary_score":	999987,
			"second_score":	1440
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4994,
			"primary_score":	999938,
			"second_score":	1439
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	4995,
			"primary_score":	999938,
			"second_score":	1438
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	5005,
			"primary_score":	999988,
			"second_score":	1540
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6005,
			"primary_score":	999626,
			"second_score":	119977
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6006,
			"primary_score":	999626,
			"second_score":	119976
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6007,
			"primary_score":	999626,
			"second_score":	119975
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6008,
			"primary_score":	999626,
			"second_score":	119974
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6010,
			"primary_score":	999626,
			"second_score":	119973
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6011,
			"primary_score":	999626,
			"second_score":	119972
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6013,
			"primary_score":	999626,
			"second_score":	119970
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6020,
			"primary_score":	999626,
			"second_score":	119969
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6023,
			"primary_score":	999626,
			"second_score":	119956
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6024,
			"primary_score":	999626,
			"second_score":	119930
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	6025,
			"primary_score":	999626,
			"second_score":	119929
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10190,
			"primary_score":	999626,
			"second_score":	121774
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10191,
			"primary_score":	999626,
			"second_score":	121773
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10192,
			"primary_score":	999626,
			"second_score":	121772
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10193,
			"primary_score":	999626,
			"second_score":	121771
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10195,
			"primary_score":	999626,
			"second_score":	121770
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10196,
			"primary_score":	999626,
			"second_score":	121769
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10198,
			"primary_score":	999626,
			"second_score":	121758
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10205,
			"primary_score":	999626,
			"second_score":	121757
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10208,
			"primary_score":	999626,
			"second_score":	121693
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10209,
			"primary_score":	999626,
			"second_score":	121639
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10210,
			"primary_score":	999626,
			"second_score":	121638
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10223,
			"primary_score":	999626,
			"second_score":	121035
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10224,
			"primary_score":	999626,
			"second_score":	121034
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10225,
			"primary_score":	999626,
			"second_score":	121033
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10226,
			"primary_score":	999626,
			"second_score":	121032
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10228,
			"primary_score":	999626,
			"second_score":	121031
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10229,
			"primary_score":	999626,
			"second_score":	121030
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10231,
			"primary_score":	999626,
			"second_score":	121019
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10234,
			"primary_score":	999626,
			"second_score":	121018
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10235,
			"primary_score":	999626,
			"second_score":	121013
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10236,
			"primary_score":	999626,
			"second_score":	120982
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10240,
			"primary_score":	999626,
			"second_score":	120981
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10248,
			"primary_score":	999626,
			"second_score":	120980
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10531,
			"primary_score":	999626,
			"second_score":	123429
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10532,
			"primary_score":	999626,
			"second_score":	123428
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10533,
			"primary_score":	999626,
			"second_score":	123427
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10534,
			"primary_score":	999626,
			"second_score":	123426
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10536,
			"primary_score":	999626,
			"second_score":	123415
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10540,
			"primary_score":	999626,
			"second_score":	123414
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10549,
			"primary_score":	999626,
			"second_score":	123412
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10550,
			"primary_score":	999626,
			"second_score":	123410
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10551,
			"primary_score":	999626,
			"second_score":	123406
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10553,
			"primary_score":	999626,
			"second_score":	123372
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10554,
			"primary_score":	999626,
			"second_score":	123371
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10559,
			"primary_score":	999626,
			"second_score":	123436
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10560,
			"primary_score":	999626,
			"second_score":	123435
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10561,
			"primary_score":	999626,
			"second_score":	123434
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10563,
			"primary_score":	999626,
			"second_score":	123433
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10564,
			"primary_score":	999626,
			"second_score":	123432
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10565,
			"primary_score":	999626,
			"second_score":	123431
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	10566,
			"primary_score":	999626,
			"second_score":	123430
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11273,
			"primary_score":	999626,
			"second_score":	120094
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11274,
			"primary_score":	999626,
			"second_score":	120093
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11275,
			"primary_score":	999626,
			"second_score":	120092
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11277,
			"primary_score":	999626,
			"second_score":	120091
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11278,
			"primary_score":	999626,
			"second_score":	120090
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11280,
			"primary_score":	999626,
			"second_score":	120079
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11281,
			"primary_score":	999626,
			"second_score":	120076
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11282,
			"primary_score":	999626,
			"second_score":	120075
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11284,
			"primary_score":	999626,
			"second_score":	120041
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11285,
			"primary_score":	999626,
			"second_score":	119987
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	11286,
			"primary_score":	999626,
			"second_score":	119986
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12785,
			"primary_score":	999996,
			"second_score":	65
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12786,
			"primary_score":	999996,
			"second_score":	64
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12787,
			"primary_score":	999996,
			"second_score":	63
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12788,
			"primary_score":	999996,
			"second_score":	62
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12789,
			"primary_score":	999996,
			"second_score":	61
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12791,
			"primary_score":	999996,
			"second_score":	60
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12792,
			"primary_score":	999996,
			"second_score":	59
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12794,
			"primary_score":	999996,
			"second_score":	21
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12796,
			"primary_score":	999996,
			"second_score":	20
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12801,
			"primary_score":	999996,
			"second_score":	19
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12802,
			"primary_score":	999996,
			"second_score":	18
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12804,
			"primary_score":	999996,
			"second_score":	17
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12806,
			"primary_score":	999996,
			"second_score":	6
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	12808,
			"primary_score":	999996,
			"second_score":	5
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26083,
			"primary_score":	999990,
			"second_score":	303
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26084,
			"primary_score":	999990,
			"second_score":	302
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26087,
			"primary_score":	999990,
			"second_score":	301
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26088,
			"primary_score":	999990,
			"second_score":	300
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26090,
			"primary_score":	999990,
			"second_score":	296
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26094,
			"primary_score":	999990,
			"second_score":	295
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26095,
			"primary_score":	999990,
			"second_score":	294
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26103,
			"primary_score":	999993,
			"second_score":	292
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26110,
			"primary_score":	999994,
			"second_score":	291
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26111,
			"primary_score":	999994,
			"second_score":	290
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	26121,
			"primary_score":	999990,
			"second_score":	288
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27903,
			"primary_score":	999980,
			"second_score":	1032
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27905,
			"primary_score":	999980,
			"second_score":	1031
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27907,
			"primary_score":	999980,
			"second_score":	1030
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27909,
			"primary_score":	999980,
			"second_score":	1029
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27910,
			"primary_score":	999980,
			"second_score":	1028
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27911,
			"primary_score":	999980,
			"second_score":	1024
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27913,
			"primary_score":	999980,
			"second_score":	1023
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27920,
			"primary_score":	999981,
			"second_score":	1022
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27922,
			"primary_score":	999981,
			"second_score":	1021
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27927,
			"primary_score":	999981,
			"second_score":	1020
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27929,
			"primary_score":	999982,
			"second_score":	77
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27930,
			"primary_score":	999982,
			"second_score":	75
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27932,
			"primary_score":	999982,
			"second_score":	71
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27939,
			"primary_score":	999981,
			"second_score":	70
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27940,
			"primary_score":	999981,
			"second_score":	69
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	27945,
			"primary_score":	999980,
			"second_score":	1033
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32112,
			"primary_score":	999862,
			"second_score":	1159
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32113,
			"primary_score":	999862,
			"second_score":	1158
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32114,
			"primary_score":	999862,
			"second_score":	1157
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32115,
			"primary_score":	999862,
			"second_score":	1156
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32117,
			"primary_score":	999862,
			"second_score":	1155
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32118,
			"primary_score":	999862,
			"second_score":	1154
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32119,
			"primary_score":	999862,
			"second_score":	1143
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32121,
			"primary_score":	999862,
			"second_score":	1139
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32135,
			"primary_score":	999862,
			"second_score":	1138
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32144,
			"primary_score":	999862,
			"second_score":	1137
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32146,
			"primary_score":	999862,
			"second_score":	1136
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32149,
			"primary_score":	999862,
			"second_score":	1135
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32151,
			"primary_score":	999862,
			"second_score":	1114
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32158,
			"primary_score":	999879,
			"second_score":	1112
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32160,
			"primary_score":	999862,
			"second_score":	1038
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32161,
			"primary_score":	999862,
			"second_score":	1037
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32166,
			"primary_score":	999984,
			"second_score":	1434
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32167,
			"primary_score":	999984,
			"second_score":	1433
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32168,
			"primary_score":	999984,
			"second_score":	1432
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32169,
			"primary_score":	999984,
			"second_score":	1431
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32171,
			"primary_score":	999984,
			"second_score":	1430
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32172,
			"primary_score":	999984,
			"second_score":	1429
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32174,
			"primary_score":	999984,
			"second_score":	1417
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32188,
			"primary_score":	999986,
			"second_score":	1415
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32191,
			"primary_score":	999986,
			"second_score":	1414
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32195,
			"primary_score":	999986,
			"second_score":	1413
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32196,
			"primary_score":	999986,
			"second_score":	1395
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32200,
			"primary_score":	999986,
			"second_score":	1394
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32202,
			"primary_score":	999986,
			"second_score":	1342
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32206,
			"primary_score":	999986,
			"second_score":	1341
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32211,
			"primary_score":	999986,
			"second_score":	1340
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32213,
			"primary_score":	999986,
			"second_score":	1338
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	32214,
			"primary_score":	999986,
			"second_score":	1337
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39418,
			"primary_score":	999626,
			"second_score":	133832
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39437,
			"primary_score":	999626,
			"second_score":	133831
		}, {
			"file":	"Zend/zend_vm_execute.h",
			"line":	39442,
			"primary_score":	999626,
			"second_score":	133833
		}, {
			"file":	"ext/date/php_date.c",
			"line":	626,
			"primary_score":	999626,
			"second_score":	118764
		}, {
			"file":	"ext/date/php_date.c",
			"line":	629,
			"primary_score":	999626,
			"second_score":	118763
		}, {
			"file":	"ext/date/php_date.c",
			"line":	630,
			"primary_score":	999626,
			"second_score":	118762
		}, {
			"file":	"ext/date/php_date.c",
			"line":	635,
			"primary_score":	999626,
			"second_score":	118761
		}, {
			"file":	"ext/date/php_date.c",
			"line":	640,
			"primary_score":	999626,
			"second_score":	118760
		}, {
			"file":	"ext/date/php_date.c",
			"line":	789,
			"primary_score":	999626,
			"second_score":	53629
		}, {
			"file":	"ext/date/php_date.c",
			"line":	791,
			"primary_score":	999626,
			"second_score":	52950
		}, {
			"file":	"ext/date/php_date.c",
			"line":	795,
			"primary_score":	999626,
			"second_score":	52949
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	910,
			"primary_score":	999626,
			"second_score":	58693
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	911,
			"primary_score":	999626,
			"second_score":	58678
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	912,
			"primary_score":	999626,
			"second_score":	58663
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	913,
			"primary_score":	999626,
			"second_score":	58648
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	914,
			"primary_score":	999626,
			"second_score":	58429
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	915,
			"primary_score":	999626,
			"second_score":	58324
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	916,
			"primary_score":	999626,
			"second_score":	58267
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	917,
			"primary_score":	999626,
			"second_score":	58252
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	918,
			"primary_score":	999626,
			"second_score":	58237
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	919,
			"primary_score":	999626,
			"second_score":	58120
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	920,
			"primary_score":	999626,
			"second_score":	57985
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	921,
			"primary_score":	999626,
			"second_score":	57868
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	922,
			"primary_score":	999626,
			"second_score":	57745
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	923,
			"primary_score":	999626,
			"second_score":	57724
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	924,
			"primary_score":	999626,
			"second_score":	57679
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	925,
			"primary_score":	999626,
			"second_score":	57640
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	926,
			"primary_score":	999626,
			"second_score":	57499
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	927,
			"primary_score":	999626,
			"second_score":	57382
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	928,
			"primary_score":	999626,
			"second_score":	57241
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	930,
			"primary_score":	999626,
			"second_score":	57124
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	932,
			"primary_score":	999626,
			"second_score":	57109
		}, {
			"file":	"ext/dom/php_dom.c",
			"line":	939,
			"primary_score":	999626,
			"second_score":	56956
		}, {
			"file":	"ext/ereg/ereg.c",
			"line":	230,
			"primary_score":	999626,
			"second_score":	54014
		}, {
			"file":	"ext/filter/filter.c",
			"line":	287,
			"primary_score":	999626,
			"second_score":	60101
		}, {
			"file":	"ext/filter/filter.c",
			"line":	289,
			"primary_score":	999626,
			"second_score":	59460
		}, {
			"file":	"ext/filter/filter.c",
			"line":	303,
			"primary_score":	999626,
			"second_score":	119257
		}, {
			"file":	"ext/filter/filter.c",
			"line":	304,
			"primary_score":	999626,
			"second_score":	119256
		}, {
			"file":	"ext/filter/filter.c",
			"line":	305,
			"primary_score":	999626,
			"second_score":	119255
		}, {
			"file":	"ext/filter/filter.c",
			"line":	306,
			"primary_score":	999626,
			"second_score":	119254
		}, {
			"file":	"ext/filter/filter.c",
			"line":	307,
			"primary_score":	999626,
			"second_score":	118786
		}, {
			"file":	"ext/filter/filter.c",
			"line":	308,
			"primary_score":	999626,
			"second_score":	118785
		}, {
			"file":	"ext/filter/filter.c",
			"line":	309,
			"primary_score":	999626,
			"second_score":	118784
		}, {
			"file":	"ext/hash/hash.c",
			"line":	889,
			"primary_score":	999626,
			"second_score":	60980
		}, {
			"file":	"ext/hash/hash.c",
			"line":	891,
			"primary_score":	999626,
			"second_score":	60701
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	289,
			"primary_score":	999626,
			"second_score":	62307
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	290,
			"primary_score":	999626,
			"second_score":	62256
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	291,
			"primary_score":	999626,
			"second_score":	61573
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2852,
			"primary_score":	999626,
			"second_score":	62306
		}, {
			"file":	"ext/iconv/iconv.c",
			"line":	2856,
			"primary_score":	999626,
			"second_score":	62257
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	581,
			"primary_score":	999626,
			"second_score":	54458
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	583,
			"primary_score":	999626,
			"second_score":	54457
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	585,
			"primary_score":	999626,
			"second_score":	54456
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	586,
			"primary_score":	999626,
			"second_score":	54455
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	587,
			"primary_score":	999626,
			"second_score":	54436
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	683,
			"primary_score":	999626,
			"second_score":	54460
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	690,
			"primary_score":	999626,
			"second_score":	54459
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	692,
			"primary_score":	999626,
			"second_score":	54435
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	699,
			"primary_score":	999626,
			"second_score":	118780
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	700,
			"primary_score":	999626,
			"second_score":	118779
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	701,
			"primary_score":	999626,
			"second_score":	118778
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	703,
			"primary_score":	999626,
			"second_score":	118777
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	704,
			"primary_score":	999626,
			"second_score":	118776
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	707,
			"primary_score":	999626,
			"second_score":	118775
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	711,
			"primary_score":	999626,
			"second_score":	118774
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	712,
			"primary_score":	999626,
			"second_score":	118770
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	717,
			"primary_score":	999626,
			"second_score":	118769
		}, {
			"file":	"ext/libxml/libxml.c",
			"line":	719,
			"primary_score":	999626,
			"second_score":	118768
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	113,
			"primary_score":	999626,
			"second_score":	54980
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	163,
			"primary_score":	999626,
			"second_score":	55608
		}, {
			"file":	"ext/pcre/php_pcre.c",
			"line":	165,
			"primary_score":	999626,
			"second_score":	54984
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	199,
			"primary_score":	999626,
			"second_score":	64826
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	203,
			"primary_score":	999626,
			"second_score":	64807
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	389,
			"primary_score":	999626,
			"second_score":	64727
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	390,
			"primary_score":	999626,
			"second_score":	64718
		}, {
			"file":	"ext/pdo/pdo.c",
			"line":	391,
			"primary_score":	999626,
			"second_score":	63378
		}, {
			"file":	"ext/pdo/pdo_sqlstate.c",
			"line":	309,
			"primary_score":	999626,
			"second_score":	64717
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	87,
			"primary_score":	999626,
			"second_score":	64827
		}, {
			"file":	"ext/pdo_sqlite/pdo_sqlite.c",
			"line":	88,
			"primary_score":	999626,
			"second_score":	64769
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1102,
			"primary_score":	999626,
			"second_score":	99156
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1104,
			"primary_score":	999626,
			"second_score":	99155
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1105,
			"primary_score":	999626,
			"second_score":	99130
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1106,
			"primary_score":	999626,
			"second_score":	99093
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1107,
			"primary_score":	999626,
			"second_score":	99066
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1108,
			"primary_score":	999626,
			"second_score":	99040
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1109,
			"primary_score":	999626,
			"second_score":	99013
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1110,
			"primary_score":	999626,
			"second_score":	98982
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1111,
			"primary_score":	999626,
			"second_score":	98953
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1112,
			"primary_score":	999626,
			"second_score":	98924
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1113,
			"primary_score":	999626,
			"second_score":	98896
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1114,
			"primary_score":	999626,
			"second_score":	98867
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1115,
			"primary_score":	999626,
			"second_score":	98838
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1116,
			"primary_score":	999626,
			"second_score":	98809
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1117,
			"primary_score":	999626,
			"second_score":	98780
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1118,
			"primary_score":	999626,
			"second_score":	98751
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1119,
			"primary_score":	999626,
			"second_score":	98723
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1120,
			"primary_score":	999626,
			"second_score":	98692
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1121,
			"primary_score":	999626,
			"second_score":	98661
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1122,
			"primary_score":	999626,
			"second_score":	98628
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1123,
			"primary_score":	999626,
			"second_score":	98603
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1124,
			"primary_score":	999626,
			"second_score":	98579
		}, {
			"file":	"ext/phar/func_interceptors.c",
			"line":	1125,
			"primary_score":	999626,
			"second_score":	98549
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3394,
			"primary_score":	999626,
			"second_score":	133795
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3396,
			"primary_score":	999626,
			"second_score":	133793
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3400,
			"primary_score":	999626,
			"second_score":	133792
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3404,
			"primary_score":	999626,
			"second_score":	133791
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3527,
			"primary_score":	999626,
			"second_score":	98541
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3557,
			"primary_score":	999626,
			"second_score":	99194
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3559,
			"primary_score":	999626,
			"second_score":	99157
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3561,
			"primary_score":	999626,
			"second_score":	98548
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3562,
			"primary_score":	999626,
			"second_score":	98547
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3570,
			"primary_score":	999626,
			"second_score":	98546
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3575,
			"primary_score":	999626,
			"second_score":	98545
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3617,
			"primary_score":	999626,
			"second_score":	119345
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3619,
			"primary_score":	999626,
			"second_score":	119344
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3621,
			"primary_score":	999626,
			"second_score":	119343
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3657,
			"primary_score":	999626,
			"second_score":	119342
		}, {
			"file":	"ext/phar/phar.c",
			"line":	3658,
			"primary_score":	999626,
			"second_score":	119341
		}, {
			"file":	"ext/session/session.c",
			"line":	93,
			"primary_score":	999626,
			"second_score":	119278
		}, {
			"file":	"ext/session/session.c",
			"line":	98,
			"primary_score":	999626,
			"second_score":	119277
		}, {
			"file":	"ext/session/session.c",
			"line":	103,
			"primary_score":	999626,
			"second_score":	119276
		}, {
			"file":	"ext/session/session.c",
			"line":	1441,
			"primary_score":	999626,
			"second_score":	119280
		}, {
			"file":	"ext/session/session.c",
			"line":	1958,
			"primary_score":	999626,
			"second_score":	119282
		}, {
			"file":	"ext/session/session.c",
			"line":	1960,
			"primary_score":	999626,
			"second_score":	119281
		}, {
			"file":	"ext/session/session.c",
			"line":	1961,
			"primary_score":	999626,
			"second_score":	119279
		}, {
			"file":	"ext/session/session.c",
			"line":	1964,
			"primary_score":	999626,
			"second_score":	119275
		}, {
			"file":	"ext/session/session.c",
			"line":	1965,
			"primary_score":	999626,
			"second_score":	119269
		}, {
			"file":	"ext/session/session.c",
			"line":	1971,
			"primary_score":	999626,
			"second_score":	119268
		}, {
			"file":	"ext/session/session.c",
			"line":	2013,
			"primary_score":	999626,
			"second_score":	67286
		}, {
			"file":	"ext/session/session.c",
			"line":	2019,
			"primary_score":	999626,
			"second_score":	65854
		}, {
			"file":	"ext/session/session.c",
			"line":	2020,
			"primary_score":	999626,
			"second_score":	65853
		}, {
			"file":	"ext/session/session.c",
			"line":	2022,
			"primary_score":	999626,
			"second_score":	65852
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2600,
			"primary_score":	999626,
			"second_score":	98253
		}, {
			"file":	"ext/simplexml/simplexml.c",
			"line":	2601,
			"primary_score":	999626,
			"second_score":	98252
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1018,
			"primary_score":	999626,
			"second_score":	119264
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1023,
			"primary_score":	999626,
			"second_score":	119263
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1028,
			"primary_score":	999626,
			"second_score":	119262
		}, {
			"file":	"ext/spl/php_spl.c",
			"line":	1031,
			"primary_score":	999626,
			"second_score":	119261
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2140,
			"primary_score":	999626,
			"second_score":	56252
		}, {
			"file":	"ext/sqlite3/sqlite3.c",
			"line":	2142,
			"primary_score":	999626,
			"second_score":	55643
		}, {
			"file":	"ext/standard/array.c",
			"line":	138,
			"primary_score":	999626,
			"second_score":	97831
		}, {
			"file":	"ext/standard/assert.c",
			"line":	114,
			"primary_score":	999626,
			"second_score":	97829
		}, {
			"file":	"ext/standard/assert.c",
			"line":	118,
			"primary_score":	999626,
			"second_score":	97828
		}, {
			"file":	"ext/standard/assert.c",
			"line":	124,
			"primary_score":	999626,
			"second_score":	119316
		}, {
			"file":	"ext/standard/assert.c",
			"line":	129,
			"primary_score":	999626,
			"second_score":	119315
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3470,
			"primary_score":	999626,
			"second_score":	98025
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3471,
			"primary_score":	999626,
			"second_score":	98024
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3472,
			"primary_score":	999626,
			"second_score":	97985
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3645,
			"primary_score":	999626,
			"second_score":	98029
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3653,
			"primary_score":	999626,
			"second_score":	98026
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3659,
			"primary_score":	999626,
			"second_score":	97984
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3661,
			"primary_score":	999626,
			"second_score":	97943
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3662,
			"primary_score":	999626,
			"second_score":	97905
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3665,
			"primary_score":	999626,
			"second_score":	97868
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3666,
			"primary_score":	999626,
			"second_score":	97832
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3667,
			"primary_score":	999626,
			"second_score":	97830
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3668,
			"primary_score":	999626,
			"second_score":	97827
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3669,
			"primary_score":	999626,
			"second_score":	96750
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3670,
			"primary_score":	999626,
			"second_score":	96747
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3675,
			"primary_score":	999626,
			"second_score":	96425
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3678,
			"primary_score":	999626,
			"second_score":	96422
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3726,
			"primary_score":	999626,
			"second_score":	119337
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3729,
			"primary_score":	999626,
			"second_score":	119336
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3730,
			"primary_score":	999626,
			"second_score":	119335
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3732,
			"primary_score":	999626,
			"second_score":	119334
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3735,
			"primary_score":	999626,
			"second_score":	119326
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3741,
			"primary_score":	999626,
			"second_score":	119325
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3746,
			"primary_score":	999626,
			"second_score":	119324
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3747,
			"primary_score":	999626,
			"second_score":	119322
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3752,
			"primary_score":	999626,
			"second_score":	119321
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3758,
			"primary_score":	999626,
			"second_score":	119317
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3759,
			"primary_score":	999626,
			"second_score":	119314
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3760,
			"primary_score":	999626,
			"second_score":	119303
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3765,
			"primary_score":	999626,
			"second_score":	119292
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3771,
			"primary_score":	999626,
			"second_score":	119291
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3773,
			"primary_score":	999626,
			"second_score":	119288
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3774,
			"primary_score":	999626,
			"second_score":	119287
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	3775,
			"primary_score":	999626,
			"second_score":	119286
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4526,
			"primary_score":	999626,
			"second_score":	122630
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4527,
			"primary_score":	999626,
			"second_score":	122629
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4528,
			"primary_score":	999626,
			"second_score":	122628
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4530,
			"primary_score":	999626,
			"second_score":	122627
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4534,
			"primary_score":	999626,
			"second_score":	122560
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4536,
			"primary_score":	999626,
			"second_score":	122529
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	4545,
			"primary_score":	999626,
			"second_score":	122528
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5006,
			"primary_score":	999626,
			"second_score":	119489
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5018,
			"primary_score":	999626,
			"second_score":	118755
		}, {
			"file":	"ext/standard/basic_functions.c",
			"line":	5024,
			"primary_score":	999626,
			"second_score":	118754
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	234,
			"primary_score":	999626,
			"second_score":	97867
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	235,
			"primary_score":	999626,
			"second_score":	97834
		}, {
			"file":	"ext/standard/browscap.c",
			"line":	238,
			"primary_score":	999626,
			"second_score":	97833
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	130,
			"primary_score":	999626,
			"second_score":	96424
		}, {
			"file":	"ext/standard/crypt.c",
			"line":	133,
			"primary_score":	999626,
			"second_score":	96423
		}, {
			"file":	"ext/standard/file.c",
			"line":	318,
			"primary_score":	999626,
			"second_score":	96749
		}, {
			"file":	"ext/standard/file.c",
			"line":	320,
			"primary_score":	999626,
			"second_score":	96748
		}, {
			"file":	"ext/standard/file.c",
			"line":	2342,
			"primary_score":	999626,
			"second_score":	122324
		}, {
			"file":	"ext/standard/file.c",
			"line":	2343,
			"primary_score":	999626,
			"second_score":	122323
		}, {
			"file":	"ext/standard/file.c",
			"line":	2344,
			"primary_score":	999626,
			"second_score":	122322
		}, {
			"file":	"ext/standard/file.c",
			"line":	2346,
			"primary_score":	999626,
			"second_score":	122321
		}, {
			"file":	"ext/standard/file.c",
			"line":	2350,
			"primary_score":	999626,
			"second_score":	122211
		}, {
			"file":	"ext/standard/file.c",
			"line":	2351,
			"primary_score":	999626,
			"second_score":	121966
		}, {
			"file":	"ext/standard/file.c",
			"line":	2360,
			"primary_score":	999626,
			"second_score":	121962
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	110,
			"primary_score":	999626,
			"second_score":	119320
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	114,
			"primary_score":	999626,
			"second_score":	119319
		}, {
			"file":	"ext/standard/filestat.c",
			"line":	118,
			"primary_score":	999626,
			"second_score":	119318
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2148,
			"primary_score":	999626,
			"second_score":	96746
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2150,
			"primary_score":	999626,
			"second_score":	96745
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2151,
			"primary_score":	999626,
			"second_score":	96466
		}, {
			"file":	"ext/standard/filters.c",
			"line":	2153,
			"primary_score":	999626,
			"second_score":	96426
		}, {
			"file":	"ext/standard/head.c",
			"line":	68,
			"primary_score":	999626,
			"second_score":	125256
		}, {
			"file":	"ext/standard/head.c",
			"line":	71,
			"primary_score":	999626,
			"second_score":	125155
		}, {
			"file":	"ext/standard/info.c",
			"line":	527,
			"primary_score":	999626,
			"second_score":	123852
		}, {
			"file":	"ext/standard/info.c",
			"line":	528,
			"primary_score":	999626,
			"second_score":	123851
		}, {
			"file":	"ext/standard/info.c",
			"line":	577,
			"primary_score":	999626,
			"second_score":	123850
		}, {
			"file":	"ext/standard/info.c",
			"line":	578,
			"primary_score":	999626,
			"second_score":	123849
		}, {
			"file":	"ext/standard/info.c",
			"line":	605,
			"primary_score":	999626,
			"second_score":	123848
		}, {
			"file":	"ext/standard/info.c",
			"line":	607,
			"primary_score":	999626,
			"second_score":	123847
		}, {
			"file":	"ext/standard/info.c",
			"line":	609,
			"primary_score":	999626,
			"second_score":	123846
		}, {
			"file":	"ext/standard/info.c",
			"line":	611,
			"primary_score":	999626,
			"second_score":	123845
		}, {
			"file":	"ext/standard/info.c",
			"line":	613,
			"primary_score":	999626,
			"second_score":	123844
		}, {
			"file":	"ext/standard/info.c",
			"line":	616,
			"primary_score":	999626,
			"second_score":	123843
		}, {
			"file":	"ext/standard/info.c",
			"line":	619,
			"primary_score":	999626,
			"second_score":	123136
		}, {
			"file":	"ext/standard/info.c",
			"line":	627,
			"primary_score":	999626,
			"second_score":	123135
		}, {
			"file":	"ext/standard/info.c",
			"line":	1153,
			"primary_score":	999626,
			"second_score":	124801
		}, {
			"file":	"ext/standard/info.c",
			"line":	1154,
			"primary_score":	999626,
			"second_score":	124800
		}, {
			"file":	"ext/standard/info.c",
			"line":	1156,
			"primary_score":	999626,
			"second_score":	124799
		}, {
			"file":	"ext/standard/info.c",
			"line":	1160,
			"primary_score":	999626,
			"second_score":	124761
		}, {
			"file":	"ext/standard/info.c",
			"line":	1161,
			"primary_score":	999626,
			"second_score":	124760
		}, {
			"file":	"ext/standard/info.c",
			"line":	1280,
			"primary_score":	999626,
			"second_score":	123895
		}, {
			"file":	"ext/standard/info.c",
			"line":	1281,
			"primary_score":	999626,
			"second_score":	123894
		}, {
			"file":	"ext/standard/info.c",
			"line":	1283,
			"primary_score":	999626,
			"second_score":	123893
		}, {
			"file":	"ext/standard/info.c",
			"line":	1286,
			"primary_score":	999626,
			"second_score":	123855
		}, {
			"file":	"ext/standard/info.c",
			"line":	1295,
			"primary_score":	999626,
			"second_score":	120776
		}, {
			"file":	"ext/standard/info.c",
			"line":	1299,
			"primary_score":	999626,
			"second_score":	120743
		}, {
			"file":	"ext/standard/info.c",
			"line":	1302,
			"primary_score":	999626,
			"second_score":	120742
		}, {
			"file":	"ext/standard/string.c",
			"line":	1058,
			"primary_score":	999626,
			"second_score":	123074
		}, {
			"file":	"ext/standard/string.c",
			"line":	1059,
			"primary_score":	999626,
			"second_score":	123073
		}, {
			"file":	"ext/standard/string.c",
			"line":	1060,
			"primary_score":	999626,
			"second_score":	123072
		}, {
			"file":	"ext/standard/string.c",
			"line":	1061,
			"primary_score":	999626,
			"second_score":	123071
		}, {
			"file":	"ext/standard/string.c",
			"line":	1062,
			"primary_score":	999626,
			"second_score":	123070
		}, {
			"file":	"ext/standard/string.c",
			"line":	1063,
			"primary_score":	999626,
			"second_score":	123069
		}, {
			"file":	"ext/standard/string.c",
			"line":	1065,
			"primary_score":	999626,
			"second_score":	123068
		}, {
			"file":	"ext/standard/string.c",
			"line":	1067,
			"primary_score":	999626,
			"second_score":	123065
		}, {
			"file":	"ext/standard/string.c",
			"line":	1071,
			"primary_score":	999626,
			"second_score":	123064
		}, {
			"file":	"ext/standard/string.c",
			"line":	1073,
			"primary_score":	999626,
			"second_score":	123060
		}, {
			"file":	"ext/standard/string.c",
			"line":	1074,
			"primary_score":	999626,
			"second_score":	122051
		}, {
			"file":	"ext/standard/string.c",
			"line":	1076,
			"primary_score":	999626,
			"second_score":	123048
		}, {
			"file":	"ext/standard/string.c",
			"line":	1077,
			"primary_score":	999626,
			"second_score":	122042
		}, {
			"file":	"ext/standard/string.c",
			"line":	1124,
			"primary_score":	999626,
			"second_score":	122041
		}, {
			"file":	"ext/standard/string.c",
			"line":	1125,
			"primary_score":	999626,
			"second_score":	122072
		}, {
			"file":	"ext/standard/string.c",
			"line":	1127,
			"primary_score":	999626,
			"second_score":	122040
		}, {
			"file":	"ext/standard/string.c",
			"line":	1129,
			"primary_score":	999626,
			"second_score":	122029
		}, {
			"file":	"ext/standard/string.c",
			"line":	1131,
			"primary_score":	999626,
			"second_score":	122026
		}, {
			"file":	"ext/standard/string.c",
			"line":	1132,
			"primary_score":	999626,
			"second_score":	122025
		}, {
			"file":	"ext/standard/string.c",
			"line":	1144,
			"primary_score":	999626,
			"second_score":	123175
		}, {
			"file":	"ext/standard/string.c",
			"line":	1146,
			"primary_score":	999626,
			"second_score":	123174
		}, {
			"file":	"ext/standard/string.c",
			"line":	1150,
			"primary_score":	999626,
			"second_score":	123082
		}, {
			"file":	"ext/standard/string.c",
			"line":	1163,
			"primary_score":	999626,
			"second_score":	123081
		}, {
			"file":	"ext/standard/string.c",
			"line":	1167,
			"primary_score":	999626,
			"second_score":	123080
		}, {
			"file":	"ext/standard/string.c",
			"line":	1168,
			"primary_score":	999626,
			"second_score":	123079
		}, {
			"file":	"ext/standard/string.c",
			"line":	1169,
			"primary_score":	999626,
			"second_score":	123078
		}, {
			"file":	"ext/standard/string.c",
			"line":	1170,
			"primary_score":	999626,
			"second_score":	123076
		}, {
			"file":	"ext/standard/string.c",
			"line":	1177,
			"primary_score":	999626,
			"second_score":	123075
		}, {
			"file":	"ext/standard/string.c",
			"line":	1179,
			"primary_score":	999626,
			"second_score":	122016
		}, {
			"file":	"ext/standard/string.c",
			"line":	3536,
			"primary_score":	999626,
			"second_score":	120322
		}, {
			"file":	"ext/standard/string.c",
			"line":	3539,
			"primary_score":	999626,
			"second_score":	120321
		}, {
			"file":	"ext/standard/string.c",
			"line":	3540,
			"primary_score":	999626,
			"second_score":	120320
		}, {
			"file":	"ext/standard/string.c",
			"line":	3543,
			"primary_score":	999626,
			"second_score":	120319
		}, {
			"file":	"ext/standard/string.c",
			"line":	3544,
			"primary_score":	999626,
			"second_score":	120274
		}, {
			"file":	"ext/standard/string.c",
			"line":	3545,
			"primary_score":	999626,
			"second_score":	120273
		}, {
			"file":	"ext/standard/string.c",
			"line":	3546,
			"primary_score":	999626,
			"second_score":	120272
		}, {
			"file":	"ext/standard/string.c",
			"line":	3547,
			"primary_score":	999626,
			"second_score":	120238
		}, {
			"file":	"ext/standard/string.c",
			"line":	3647,
			"primary_score":	999626,
			"second_score":	120467
		}, {
			"file":	"ext/standard/string.c",
			"line":	3648,
			"primary_score":	999626,
			"second_score":	120466
		}, {
			"file":	"ext/standard/string.c",
			"line":	3649,
			"primary_score":	999626,
			"second_score":	120465
		}, {
			"file":	"ext/standard/string.c",
			"line":	3650,
			"primary_score":	999626,
			"second_score":	120464
		}, {
			"file":	"ext/standard/string.c",
			"line":	3651,
			"primary_score":	999626,
			"second_score":	120463
		}, {
			"file":	"ext/standard/string.c",
			"line":	3652,
			"primary_score":	999626,
			"second_score":	120462
		}, {
			"file":	"ext/standard/string.c",
			"line":	3653,
			"primary_score":	999626,
			"second_score":	120461
		}, {
			"file":	"ext/standard/string.c",
			"line":	3655,
			"primary_score":	999626,
			"second_score":	120460
		}, {
			"file":	"ext/standard/string.c",
			"line":	3659,
			"primary_score":	999626,
			"second_score":	120338
		}, {
			"file":	"ext/standard/string.c",
			"line":	3660,
			"primary_score":	999626,
			"second_score":	120335
		}, {
			"file":	"ext/standard/string.c",
			"line":	3661,
			"primary_score":	999626,
			"second_score":	120332
		}, {
			"file":	"ext/standard/string.c",
			"line":	3664,
			"primary_score":	999626,
			"second_score":	120329
		}, {
			"file":	"ext/standard/string.c",
			"line":	3665,
			"primary_score":	999626,
			"second_score":	120328
		}, {
			"file":	"ext/standard/string.c",
			"line":	3666,
			"primary_score":	999626,
			"second_score":	120326
		}, {
			"file":	"ext/standard/string.c",
			"line":	3672,
			"primary_score":	999626,
			"second_score":	120324
		}, {
			"file":	"ext/standard/string.c",
			"line":	3703,
			"primary_score":	999626,
			"second_score":	120323
		}, {
			"file":	"ext/standard/string.c",
			"line":	3705,
			"primary_score":	999626,
			"second_score":	120237
		}, {
			"file":	"ext/standard/string.c",
			"line":	3716,
			"primary_score":	999626,
			"second_score":	120468
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	121,
			"primary_score":	999626,
			"second_score":	98028
		}, {
			"file":	"ext/standard/syslog.c",
			"line":	125,
			"primary_score":	999626,
			"second_score":	98027
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1083,
			"primary_score":	999626,
			"second_score":	97826
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1085,
			"primary_score":	999626,
			"second_score":	96751
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1097,
			"primary_score":	999626,
			"second_score":	119313
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1102,
			"primary_score":	999626,
			"second_score":	119312
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1103,
			"primary_score":	999626,
			"second_score":	119308
		}, {
			"file":	"ext/standard/url_scanner_ex.c",
			"line":	1105,
			"primary_score":	999626,
			"second_score":	119304
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	129,
			"primary_score":	999626,
			"second_score":	119290
		}, {
			"file":	"ext/standard/user_filters.c",
			"line":	135,
			"primary_score":	999626,
			"second_score":	119289
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1378,
			"primary_score":	999626,
			"second_score":	101039
		}, {
			"file":	"ext/xmlreader/php_xmlreader.c",
			"line":	1379,
			"primary_score":	999626,
			"second_score":	100946
		}, {
			"file":	"ext/xmlwriter/php_xmlwriter.c",
			"line":	1972,
			"primary_score":	999626,
			"second_score":	103729
		}, {
			"file":	"main/SAPI.c",
			"line":	69,
			"primary_score":	999626,
			"second_score":	3134
		}, {
			"file":	"main/SAPI.c",
			"line":	104,
			"primary_score":	999626,
			"second_score":	3135
		}, {
			"file":	"main/SAPI.c",
			"line":	107,
			"primary_score":	999626,
			"second_score":	3113
		}, {
			"file":	"main/SAPI.c",
			"line":	109,
			"primary_score":	999626,
			"second_score":	3112
		}, {
			"file":	"main/SAPI.c",
			"line":	119,
			"primary_score":	999626,
			"second_score":	125185
		}, {
			"file":	"main/SAPI.c",
			"line":	286,
			"primary_score":	999626,
			"second_score":	125248
		}, {
			"file":	"main/SAPI.c",
			"line":	287,
			"primary_score":	999626,
			"second_score":	125247
		}, {
			"file":	"main/SAPI.c",
			"line":	289,
			"primary_score":	999626,
			"second_score":	125246
		}, {
			"file":	"main/SAPI.c",
			"line":	290,
			"primary_score":	999626,
			"second_score":	125245
		}, {
			"file":	"main/SAPI.c",
			"line":	291,
			"primary_score":	999626,
			"second_score":	125244
		}, {
			"file":	"main/SAPI.c",
			"line":	296,
			"primary_score":	999626,
			"second_score":	125243
		}, {
			"file":	"main/SAPI.c",
			"line":	297,
			"primary_score":	999626,
			"second_score":	125242
		}, {
			"file":	"main/SAPI.c",
			"line":	298,
			"primary_score":	999626,
			"second_score":	125241
		}, {
			"file":	"main/SAPI.c",
			"line":	304,
			"primary_score":	999626,
			"second_score":	125240
		}, {
			"file":	"main/SAPI.c",
			"line":	316,
			"primary_score":	999626,
			"second_score":	125239
		}, {
			"file":	"main/SAPI.c",
			"line":	317,
			"primary_score":	999626,
			"second_score":	125238
		}, {
			"file":	"main/SAPI.c",
			"line":	318,
			"primary_score":	999626,
			"second_score":	125216
		}, {
			"file":	"main/SAPI.c",
			"line":	320,
			"primary_score":	999626,
			"second_score":	125215
		}, {
			"file":	"main/SAPI.c",
			"line":	482,
			"primary_score":	999626,
			"second_score":	113649
		}, {
			"file":	"main/SAPI.c",
			"line":	490,
			"primary_score":	999626,
			"second_score":	113690
		}, {
			"file":	"main/SAPI.c",
			"line":	491,
			"primary_score":	999626,
			"second_score":	113686
		}, {
			"file":	"main/SAPI.c",
			"line":	494,
			"primary_score":	999626,
			"second_score":	113685
		}, {
			"file":	"main/SAPI.c",
			"line":	496,
			"primary_score":	999626,
			"second_score":	113684
		}, {
			"file":	"main/SAPI.c",
			"line":	507,
			"primary_score":	999626,
			"second_score":	113683
		}, {
			"file":	"main/SAPI.c",
			"line":	510,
			"primary_score":	999626,
			"second_score":	113682
		}, {
			"file":	"main/SAPI.c",
			"line":	513,
			"primary_score":	999626,
			"second_score":	113681
		}, {
			"file":	"main/SAPI.c",
			"line":	516,
			"primary_score":	999626,
			"second_score":	113680
		}, {
			"file":	"main/SAPI.c",
			"line":	519,
			"primary_score":	999626,
			"second_score":	113679
		}, {
			"file":	"main/SAPI.c",
			"line":	522,
			"primary_score":	999626,
			"second_score":	113678
		}, {
			"file":	"main/SAPI.c",
			"line":	525,
			"primary_score":	999626,
			"second_score":	113677
		}, {
			"file":	"main/SAPI.c",
			"line":	526,
			"primary_score":	999626,
			"second_score":	113676
		}, {
			"file":	"main/SAPI.c",
			"line":	528,
			"primary_score":	999626,
			"second_score":	113672
		}, {
			"file":	"main/SAPI.c",
			"line":	531,
			"primary_score":	999626,
			"second_score":	113671
		}, {
			"file":	"main/SAPI.c",
			"line":	532,
			"primary_score":	999626,
			"second_score":	113670
		}, {
			"file":	"main/SAPI.c",
			"line":	533,
			"primary_score":	999626,
			"second_score":	113651
		}, {
			"file":	"main/SAPI.c",
			"line":	535,
			"primary_score":	999626,
			"second_score":	113650
		}, {
			"file":	"main/SAPI.c",
			"line":	536,
			"primary_score":	999626,
			"second_score":	113648
		}, {
			"file":	"main/SAPI.c",
			"line":	537,
			"primary_score":	999626,
			"second_score":	113647
		}, {
			"file":	"main/SAPI.c",
			"line":	538,
			"primary_score":	999626,
			"second_score":	113646
		}, {
			"file":	"main/SAPI.c",
			"line":	539,
			"primary_score":	999626,
			"second_score":	113645
		}, {
			"file":	"main/SAPI.c",
			"line":	608,
			"primary_score":	999626,
			"second_score":	125188
		}, {
			"file":	"main/SAPI.c",
			"line":	623,
			"primary_score":	999626,
			"second_score":	125186
		}, {
			"file":	"main/SAPI.c",
			"line":	812,
			"primary_score":	999626,
			"second_score":	119365
		}, {
			"file":	"main/SAPI.c",
			"line":	813,
			"primary_score":	999626,
			"second_score":	119364
		}, {
			"file":	"main/SAPI.c",
			"line":	815,
			"primary_score":	999626,
			"second_score":	119363
		}, {
			"file":	"main/SAPI.c",
			"line":	816,
			"primary_score":	999626,
			"second_score":	119362
		}, {
			"file":	"main/SAPI.c",
			"line":	822,
			"primary_score":	999626,
			"second_score":	125252
		}, {
			"file":	"main/SAPI.c",
			"line":	823,
			"primary_score":	999626,
			"second_score":	125251
		}, {
			"file":	"main/SAPI.c",
			"line":	824,
			"primary_score":	999626,
			"second_score":	125250
		}, {
			"file":	"main/SAPI.c",
			"line":	826,
			"primary_score":	999626,
			"second_score":	125249
		}, {
			"file":	"main/SAPI.c",
			"line":	827,
			"primary_score":	999626,
			"second_score":	125214
		}, {
			"file":	"main/SAPI.c",
			"line":	828,
			"primary_score":	999626,
			"second_score":	125213
		}, {
			"file":	"main/SAPI.c",
			"line":	829,
			"primary_score":	999626,
			"second_score":	125191
		}, {
			"file":	"main/SAPI.c",
			"line":	830,
			"primary_score":	999626,
			"second_score":	125190
		}, {
			"file":	"main/SAPI.c",
			"line":	831,
			"primary_score":	999626,
			"second_score":	125189
		}, {
			"file":	"main/SAPI.c",
			"line":	832,
			"primary_score":	999626,
			"second_score":	125166
		}, {
			"file":	"main/SAPI.c",
			"line":	835,
			"primary_score":	999626,
			"second_score":	125165
		}, {
			"file":	"main/SAPI.c",
			"line":	840,
			"primary_score":	999626,
			"second_score":	125164
		}, {
			"file":	"main/SAPI.c",
			"line":	842,
			"primary_score":	999626,
			"second_score":	125163
		}, {
			"file":	"main/SAPI.c",
			"line":	843,
			"primary_score":	999626,
			"second_score":	125162
		}, {
			"file":	"main/SAPI.c",
			"line":	848,
			"primary_score":	999626,
			"second_score":	125160
		}, {
			"file":	"main/SAPI.c",
			"line":	851,
			"primary_score":	999626,
			"second_score":	125159
		}, {
			"file":	"main/SAPI.c",
			"line":	882,
			"primary_score":	999626,
			"second_score":	125158
		}, {
			"file":	"main/SAPI.c",
			"line":	884,
			"primary_score":	999626,
			"second_score":	125156
		}, {
			"file":	"main/SAPI.c",
			"line":	953,
			"primary_score":	999626,
			"second_score":	103773
		}, {
			"file":	"main/SAPI.c",
			"line":	954,
			"primary_score":	999626,
			"second_score":	103772
		}, {
			"file":	"main/SAPI.c",
			"line":	955,
			"primary_score":	999626,
			"second_score":	103770
		}, {
			"file":	"main/main.c",
			"line":	1601,
			"primary_score":	999626,
			"second_score":	119508
		}, {
			"file":	"main/main.c",
			"line":	1602,
			"primary_score":	999626,
			"second_score":	119507
		}, {
			"file":	"main/main.c",
			"line":	1604,
			"primary_score":	999626,
			"second_score":	119506
		}, {
			"file":	"main/main.c",
			"line":	1609,
			"primary_score":	999626,
			"second_score":	119505
		}, {
			"file":	"main/main.c",
			"line":	1610,
			"primary_score":	999626,
			"second_score":	119504
		}, {
			"file":	"main/main.c",
			"line":	1612,
			"primary_score":	999626,
			"second_score":	119503
		}, {
			"file":	"main/main.c",
			"line":	1615,
			"primary_score":	999626,
			"second_score":	119496
		}, {
			"file":	"main/main.c",
			"line":	1616,
			"primary_score":	999626,
			"second_score":	119490
		}, {
			"file":	"main/main.c",
			"line":	1617,
			"primary_score":	999626,
			"second_score":	119488
		}, {
			"file":	"main/main.c",
			"line":	1620,
			"primary_score":	999626,
			"second_score":	119486
		}, {
			"file":	"main/main.c",
			"line":	1621,
			"primary_score":	999626,
			"second_score":	119480
		}, {
			"file":	"main/main.c",
			"line":	1622,
			"primary_score":	999626,
			"second_score":	119392
		}, {
			"file":	"main/main.c",
			"line":	1625,
			"primary_score":	999626,
			"second_score":	119390
		}, {
			"file":	"main/main.c",
			"line":	1626,
			"primary_score":	999626,
			"second_score":	119384
		}, {
			"file":	"main/main.c",
			"line":	1628,
			"primary_score":	999626,
			"second_score":	119383
		}, {
			"file":	"main/main.c",
			"line":	1634,
			"primary_score":	999626,
			"second_score":	119382
		}, {
			"file":	"main/main.c",
			"line":	1637,
			"primary_score":	999626,
			"second_score":	119381
		}, {
			"file":	"main/main.c",
			"line":	1639,
			"primary_score":	999626,
			"second_score":	119379
		}, {
			"file":	"main/main.c",
			"line":	1640,
			"primary_score":	999626,
			"second_score":	119374
		}, {
			"file":	"main/main.c",
			"line":	1643,
			"primary_score":	999626,
			"second_score":	119372
		}, {
			"file":	"main/main.c",
			"line":	1644,
			"primary_score":	999626,
			"second_score":	119366
		}, {
			"file":	"main/main.c",
			"line":	1645,
			"primary_score":	999626,
			"second_score":	119361
		}, {
			"file":	"main/main.c",
			"line":	1648,
			"primary_score":	999626,
			"second_score":	119359
		}, {
			"file":	"main/main.c",
			"line":	1649,
			"primary_score":	999626,
			"second_score":	119358
		}, {
			"file":	"main/main.c",
			"line":	1650,
			"primary_score":	999626,
			"second_score":	118756
		}, {
			"file":	"main/main.c",
			"line":	1654,
			"primary_score":	999626,
			"second_score":	118753
		}, {
			"file":	"main/main.c",
			"line":	1655,
			"primary_score":	999626,
			"second_score":	118747
		}, {
			"file":	"main/main.c",
			"line":	1657,
			"primary_score":	999626,
			"second_score":	118746
		}, {
			"file":	"main/main.c",
			"line":	1658,
			"primary_score":	999626,
			"second_score":	118604
		}, {
			"file":	"main/main.c",
			"line":	1659,
			"primary_score":	999626,
			"second_score":	118603
		}, {
			"file":	"main/main.c",
			"line":	1662,
			"primary_score":	999626,
			"second_score":	118569
		}, {
			"file":	"main/main.c",
			"line":	1665,
			"primary_score":	999626,
			"second_score":	118567
		}, {
			"file":	"main/main.c",
			"line":	1669,
			"primary_score":	999626,
			"second_score":	118566
		}, {
			"file":	"main/main.c",
			"line":	1675,
			"primary_score":	999626,
			"second_score":	118565
		}, {
			"file":	"main/main.c",
			"line":	1678,
			"primary_score":	999626,
			"second_score":	113709
		}, {
			"file":	"main/main.c",
			"line":	1679,
			"primary_score":	999626,
			"second_score":	113703
		}, {
			"file":	"main/main.c",
			"line":	1680,
			"primary_score":	999626,
			"second_score":	113699
		}, {
			"file":	"main/main.c",
			"line":	1683,
			"primary_score":	999626,
			"second_score":	113697
		}, {
			"file":	"main/main.c",
			"line":	1684,
			"primary_score":	999626,
			"second_score":	113691
		}, {
			"file":	"main/main.c",
			"line":	1685,
			"primary_score":	999626,
			"second_score":	113644
		}, {
			"file":	"main/main.c",
			"line":	1688,
			"primary_score":	999626,
			"second_score":	113642
		}, {
			"file":	"main/main.c",
			"line":	1689,
			"primary_score":	999626,
			"second_score":	113636
		}, {
			"file":	"main/main.c",
			"line":	1690,
			"primary_score":	999626,
			"second_score":	113633
		}, {
			"file":	"main/main.c",
			"line":	1693,
			"primary_score":	999626,
			"second_score":	113631
		}, {
			"file":	"main/main.c",
			"line":	1694,
			"primary_score":	999626,
			"second_score":	113625
		}, {
			"file":	"main/main.c",
			"line":	1695,
			"primary_score":	999626,
			"second_score":	113206
		}, {
			"file":	"main/main.c",
			"line":	1696,
			"primary_score":	999626,
			"second_score":	113204
		}, {
			"file":	"main/main.c",
			"line":	1699,
			"primary_score":	999626,
			"second_score":	103794
		}, {
			"file":	"main/main.c",
			"line":	1700,
			"primary_score":	999626,
			"second_score":	103788
		}, {
			"file":	"main/main.c",
			"line":	1701,
			"primary_score":	999626,
			"second_score":	103786
		}, {
			"file":	"main/main.c",
			"line":	1734,
			"primary_score":	999626,
			"second_score":	121616
		}, {
			"file":	"main/main.c",
			"line":	1735,
			"primary_score":	999626,
			"second_score":	121615
		}, {
			"file":	"main/main.c",
			"line":	1755,
			"primary_score":	999626,
			"second_score":	3150
		}, {
			"file":	"main/main.c",
			"line":	1758,
			"primary_score":	999626,
			"second_score":	3149
		}, {
			"file":	"main/main.c",
			"line":	1761,
			"primary_score":	999626,
			"second_score":	3148
		}, {
			"file":	"main/main.c",
			"line":	1764,
			"primary_score":	999626,
			"second_score":	3147
		}, {
			"file":	"main/main.c",
			"line":	1768,
			"primary_score":	999626,
			"second_score":	3146
		}, {
			"file":	"main/main.c",
			"line":	2200,
			"primary_score":	999626,
			"second_score":	103777
		}, {
			"file":	"main/main.c",
			"line":	2202,
			"primary_score":	999626,
			"second_score":	103776
		}, {
			"file":	"main/main.c",
			"line":	2204,
			"primary_score":	999626,
			"second_score":	103775
		}, {
			"file":	"main/main.c",
			"line":	2217,
			"primary_score":	999626,
			"second_score":	103774
		}, {
			"file":	"main/main.c",
			"line":	2219,
			"primary_score":	999626,
			"second_score":	103769
		}, {
			"file":	"main/main.c",
			"line":	2222,
			"primary_score":	999626,
			"second_score":	6111
		}, {
			"file":	"main/main.c",
			"line":	2224,
			"primary_score":	999626,
			"second_score":	6045
		}, {
			"file":	"main/main.c",
			"line":	2225,
			"primary_score":	999626,
			"second_score":	6016
		}, {
			"file":	"main/main.c",
			"line":	2228,
			"primary_score":	999626,
			"second_score":	3557
		}, {
			"file":	"main/main.c",
			"line":	2231,
			"primary_score":	999626,
			"second_score":	3244
		}, {
			"file":	"main/main.c",
			"line":	2232,
			"primary_score":	999626,
			"second_score":	3214
		}, {
			"file":	"main/main.c",
			"line":	2237,
			"primary_score":	999626,
			"second_score":	3191
		}, {
			"file":	"main/main.c",
			"line":	2238,
			"primary_score":	999626,
			"second_score":	3154
		}, {
			"file":	"main/main.c",
			"line":	2240,
			"primary_score":	999626,
			"second_score":	3152
		}, {
			"file":	"main/main.c",
			"line":	2243,
			"primary_score":	999626,
			"second_score":	3151
		}, {
			"file":	"main/main.c",
			"line":	2244,
			"primary_score":	999626,
			"second_score":	3141
		}, {
			"file":	"main/main.c",
			"line":	2348,
			"primary_score":	999626,
			"second_score":	119520
		}, {
			"file":	"main/main.c",
			"line":	2356,
			"primary_score":	999626,
			"second_score":	119518
		}, {
			"file":	"main/main.c",
			"line":	2359,
			"primary_score":	999626,
			"second_score":	119517
		}, {
			"file":	"main/main.c",
			"line":	2361,
			"primary_score":	999626,
			"second_score":	119515
		}, {
			"file":	"main/output.c",
			"line":	103,
			"primary_score":	999626,
			"second_score":	3190
		}, {
			"file":	"main/output.c",
			"line":	104,
			"primary_score":	999626,
			"second_score":	3176
		}, {
			"file":	"main/output.c",
			"line":	105,
			"primary_score":	999626,
			"second_score":	3162
		}, {
			"file":	"main/output.c",
			"line":	129,
			"primary_score":	999626,
			"second_score":	119378
		}, {
			"file":	"main/output.c",
			"line":	131,
			"primary_score":	999626,
			"second_score":	119377
		}, {
			"file":	"main/output.c",
			"line":	132,
			"primary_score":	999626,
			"second_score":	119376
		}, {
			"file":	"main/output.c",
			"line":	135,
			"primary_score":	999626,
			"second_score":	119375
		}, {
			"file":	"main/output.c",
			"line":	198,
			"primary_score":	999626,
			"second_score":	121614
		}, {
			"file":	"main/output.c",
			"line":	201,
			"primary_score":	999626,
			"second_score":	121613
		}, {
			"file":	"main/output.c",
			"line":	202,
			"primary_score":	999626,
			"second_score":	121567
		}, {
			"file":	"main/output.c",
			"line":	281,
			"primary_score":	999626,
			"second_score":	119380
		}, {
			"file":	"main/output.c",
			"line":	697,
			"primary_score":	999626,
			"second_score":	121608
		}, {
			"file":	"main/output.c",
			"line":	703,
			"primary_score":	999626,
			"second_score":	121607
		}, {
			"file":	"main/output.c",
			"line":	711,
			"primary_score":	999626,
			"second_score":	121605
		}, {
			"file":	"main/output.c",
			"line":	715,
			"primary_score":	999626,
			"second_score":	121604
		}, {
			"file":	"main/output.c",
			"line":	716,
			"primary_score":	999626,
			"second_score":	121603
		}, {
			"file":	"main/output.c",
			"line":	717,
			"primary_score":	999626,
			"second_score":	121602
		}, {
			"file":	"main/output.c",
			"line":	719,
			"primary_score":	999626,
			"second_score":	121601
		}, {
			"file":	"main/output.c",
			"line":	785,
			"primary_score":	999626,
			"second_score":	121569
		}, {
			"file":	"main/output.c",
			"line":	789,
			"primary_score":	999626,
			"second_score":	121568
		}, {
			"file":	"main/output.c",
			"line":	975,
			"primary_score":	999626,
			"second_score":	121612
		}, {
			"file":	"main/output.c",
			"line":	976,
			"primary_score":	999626,
			"second_score":	121611
		}, {
			"file":	"main/output.c",
			"line":	977,
			"primary_score":	999626,
			"second_score":	121610
		}, {
			"file":	"main/output.c",
			"line":	979,
			"primary_score":	999626,
			"second_score":	121609
		}, {
			"file":	"main/output.c",
			"line":	983,
			"primary_score":	999626,
			"second_score":	121606
		}, {
			"file":	"main/output.c",
			"line":	990,
			"primary_score":	999626,
			"second_score":	121600
		}, {
			"file":	"main/output.c",
			"line":	1002,
			"primary_score":	999626,
			"second_score":	121599
		}, {
			"file":	"main/output.c",
			"line":	1003,
			"primary_score":	999626,
			"second_score":	121598
		}, {
			"file":	"main/output.c",
			"line":	1006,
			"primary_score":	999626,
			"second_score":	121597
		}, {
			"file":	"main/output.c",
			"line":	1010,
			"primary_score":	999626,
			"second_score":	121596
		}, {
			"file":	"main/output.c",
			"line":	1011,
			"primary_score":	999626,
			"second_score":	125154
		}, {
			"file":	"main/output.c",
			"line":	1014,
			"primary_score":	999626,
			"second_score":	125152
		}, {
			"file":	"main/output.c",
			"line":	1015,
			"primary_score":	999626,
			"second_score":	125150
		}, {
			"file":	"main/output.c",
			"line":	1016,
			"primary_score":	999626,
			"second_score":	125147
		}, {
			"file":	"main/output.c",
			"line":	1022,
			"primary_score":	999626,
			"second_score":	121595
		}, {
			"file":	"main/output.c",
			"line":	1023,
			"primary_score":	999626,
			"second_score":	121577
		}, {
			"file":	"main/output.c",
			"line":	1024,
			"primary_score":	999626,
			"second_score":	121576
		}, {
			"file":	"main/output.c",
			"line":	1026,
			"primary_score":	999626,
			"second_score":	121571
		}, {
			"file":	"main/output.c",
			"line":	1028,
			"primary_score":	999626,
			"second_score":	121570
		}, {
			"file":	"main/php_ini.c",
			"line":	729,
			"primary_score":	999626,
			"second_score":	3556
		}, {
			"file":	"main/php_ini.c",
			"line":	730,
			"primary_score":	999626,
			"second_score":	3247
		}, {
			"file":	"main/php_ini.c",
			"line":	734,
			"primary_score":	999626,
			"second_score":	3246
		}, {
			"file":	"main/php_ini.c",
			"line":	738,
			"primary_score":	999626,
			"second_score":	3245
		}, {
			"file":	"main/php_logos.c",
			"line":	67,
			"primary_score":	999626,
			"second_score":	6044
		}, {
			"file":	"main/php_logos.c",
			"line":	68,
			"primary_score":	999626,
			"second_score":	6017
		}, {
			"file":	"main/php_open_temporary_file.c",
			"line":	183,
			"primary_score":	999626,
			"second_score":	3153
		}, {
			"file":	"main/php_ticks.c",
			"line":	32,
			"primary_score":	999626,
			"second_score":	119502
		}, {
			"file":	"main/php_ticks.c",
			"line":	37,
			"primary_score":	999626,
			"second_score":	3145
		}, {
			"file":	"main/streams/filter.c",
			"line":	54,
			"primary_score":	999626,
			"second_score":	62305
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	371,
			"primary_score":	999626,
			"second_score":	114236
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	372,
			"primary_score":	999626,
			"second_score":	114235
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	374,
			"primary_score":	999626,
			"second_score":	114234
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	377,
			"primary_score":	999626,
			"second_score":	114233
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	392,
			"primary_score":	999626,
			"second_score":	114232
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	393,
			"primary_score":	999626,
			"second_score":	114231
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	394,
			"primary_score":	999626,
			"second_score":	114230
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	404,
			"primary_score":	999626,
			"second_score":	114229
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	405,
			"primary_score":	999626,
			"second_score":	114228
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	413,
			"primary_score":	999626,
			"second_score":	114227
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	425,
			"primary_score":	999626,
			"second_score":	114226
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	427,
			"primary_score":	999626,
			"second_score":	114207
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	432,
			"primary_score":	999626,
			"second_score":	114246
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	434,
			"primary_score":	999626,
			"second_score":	114245
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	441,
			"primary_score":	999626,
			"second_score":	114244
		}, {
			"file":	"main/streams/plain_wrapper.c",
			"line":	442,
			"primary_score":	999626,
			"second_score":	114243
		}, {
			"file":	"main/streams/streams.c",
			"line":	104,
			"primary_score":	999626,
			"second_score":	119302
		}, {
			"file":	"main/streams/streams.c",
			"line":	105,
			"primary_score":	999626,
			"second_score":	119293
		}, {
			"file":	"main/streams/streams.c",
			"line":	333,
			"primary_score":	999626,
			"second_score":	114260
		}, {
			"file":	"main/streams/streams.c",
			"line":	334,
			"primary_score":	999626,
			"second_score":	114259
		}, {
			"file":	"main/streams/streams.c",
			"line":	335,
			"primary_score":	999626,
			"second_score":	114258
		}, {
			"file":	"main/streams/streams.c",
			"line":	336,
			"primary_score":	999626,
			"second_score":	114257
		}, {
			"file":	"main/streams/streams.c",
			"line":	338,
			"primary_score":	999626,
			"second_score":	114256
		}, {
			"file":	"main/streams/streams.c",
			"line":	351,
			"primary_score":	999626,
			"second_score":	114255
		}, {
			"file":	"main/streams/streams.c",
			"line":	360,
			"primary_score":	999626,
			"second_score":	114254
		}, {
			"file":	"main/streams/streams.c",
			"line":	364,
			"primary_score":	999626,
			"second_score":	114253
		}, {
			"file":	"main/streams/streams.c",
			"line":	382,
			"primary_score":	999626,
			"second_score":	114252
		}, {
			"file":	"main/streams/streams.c",
			"line":	402,
			"primary_score":	999626,
			"second_score":	114251
		}, {
			"file":	"main/streams/streams.c",
			"line":	405,
			"primary_score":	999626,
			"second_score":	114241
		}, {
			"file":	"main/streams/streams.c",
			"line":	415,
			"primary_score":	999626,
			"second_score":	114240
		}, {
			"file":	"main/streams/streams.c",
			"line":	419,
			"primary_score":	999626,
			"second_score":	114239
		}, {
			"file":	"main/streams/streams.c",
			"line":	420,
			"primary_score":	999626,
			"second_score":	114238
		}, {
			"file":	"main/streams/streams.c",
			"line":	432,
			"primary_score":	999626,
			"second_score":	114237
		}, {
			"file":	"main/streams/streams.c",
			"line":	433,
			"primary_score":	999626,
			"second_score":	114206
		}, {
			"file":	"main/streams/streams.c",
			"line":	436,
			"primary_score":	999626,
			"second_score":	114205
		}, {
			"file":	"main/streams/streams.c",
			"line":	443,
			"primary_score":	999626,
			"second_score":	114204
		}, {
			"file":	"main/streams/streams.c",
			"line":	444,
			"primary_score":	999626,
			"second_score":	114203
		}, {
			"file":	"main/streams/streams.c",
			"line":	447,
			"primary_score":	999626,
			"second_score":	114202
		}, {
			"file":	"main/streams/streams.c",
			"line":	451,
			"primary_score":	999626,
			"second_score":	114201
		}, {
			"file":	"main/streams/streams.c",
			"line":	456,
			"primary_score":	999626,
			"second_score":	114200
		}, {
			"file":	"main/streams/streams.c",
			"line":	461,
			"primary_score":	999626,
			"second_score":	114199
		}, {
			"file":	"main/streams/streams.c",
			"line":	466,
			"primary_score":	999626,
			"second_score":	114198
		}, {
			"file":	"main/streams/streams.c",
			"line":	498,
			"primary_score":	999626,
			"second_score":	114197
		}, {
			"file":	"main/streams/streams.c",
			"line":	499,
			"primary_score":	999626,
			"second_score":	114196
		}, {
			"file":	"main/streams/streams.c",
			"line":	500,
			"primary_score":	999626,
			"second_score":	114177
		}, {
			"file":	"main/streams/streams.c",
			"line":	503,
			"primary_score":	999626,
			"second_score":	114176
		}, {
			"file":	"main/streams/streams.c",
			"line":	507,
			"primary_score":	999626,
			"second_score":	114157
		}, {
			"file":	"main/streams/streams.c",
			"line":	511,
			"primary_score":	999626,
			"second_score":	114156
		}, {
			"file":	"main/streams/streams.c",
			"line":	1123,
			"primary_score":	999626,
			"second_score":	114250
		}, {
			"file":	"main/streams/streams.c",
			"line":	1125,
			"primary_score":	999626,
			"second_score":	114249
		}, {
			"file":	"main/streams/streams.c",
			"line":	1129,
			"primary_score":	999626,
			"second_score":	114248
		}, {
			"file":	"main/streams/streams.c",
			"line":	1130,
			"primary_score":	999626,
			"second_score":	114247
		}, {
			"file":	"main/streams/streams.c",
			"line":	1133,
			"primary_score":	999626,
			"second_score":	114242
		}, {
			"file":	"main/streams/streams.c",
			"line":	1507,
			"primary_score":	999626,
			"second_score":	114262
		}, {
			"file":	"main/streams/streams.c",
			"line":	1509,
			"primary_score":	999626,
			"second_score":	114261
		}, {
			"file":	"main/streams/streams.c",
			"line":	1520,
			"primary_score":	999626,
			"second_score":	113635
		}, {
			"file":	"main/streams/streams.c",
			"line":	1526,
			"primary_score":	999626,
			"second_score":	113634
		}, {
			"file":	"main/streams/streams.c",
			"line":	1562,
			"primary_score":	999626,
			"second_score":	6110
		}, {
			"file":	"main/streams/streams.c",
			"line":	1563,
			"primary_score":	999626,
			"second_score":	6086
		}, {
			"file":	"main/streams/streams.c",
			"line":	1564,
			"primary_score":	999626,
			"second_score":	6076
		}, {
			"file":	"main/streams/streams.c",
			"line":	1565,
			"primary_score":	999626,
			"second_score":	6046
		}, {
			"file":	"main/streams/streams.c",
			"line":	1601,
			"primary_score":	999626,
			"second_score":	97904
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	255,
			"primary_score":	999626,
			"second_score":	121587
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	260,
			"primary_score":	999626,
			"second_score":	121586
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	269,
			"primary_score":	999626,
			"second_score":	121585
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	270,
			"primary_score":	999626,
			"second_score":	121584
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	273,
			"primary_score":	999626,
			"second_score":	121583
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	277,
			"primary_score":	999626,
			"second_score":	121582
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	287,
			"primary_score":	999626,
			"second_score":	121594
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	288,
			"primary_score":	999626,
			"second_score":	121593
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	289,
			"primary_score":	999626,
			"second_score":	121592
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	291,
			"primary_score":	999626,
			"second_score":	121591
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	295,
			"primary_score":	999626,
			"second_score":	121590
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	303,
			"primary_score":	999626,
			"second_score":	121589
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	305,
			"primary_score":	999626,
			"second_score":	121588
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	306,
			"primary_score":	999626,
			"second_score":	121581
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	312,
			"primary_score":	999626,
			"second_score":	121580
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	313,
			"primary_score":	999626,
			"second_score":	121579
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	316,
			"primary_score":	999626,
			"second_score":	121578
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	325,
			"primary_score":	999626,
			"second_score":	103771
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	378,
			"primary_score":	999626,
			"second_score":	113675
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	379,
			"primary_score":	999626,
			"second_score":	113674
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	383,
			"primary_score":	999626,
			"second_score":	113673
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	395,
			"primary_score":	999626,
			"second_score":	125187
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	403,
			"primary_score":	999626,
			"second_score":	125161
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	916,
			"primary_score":	999669,
			"second_score":	49877
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	920,
			"primary_score":	999669,
			"second_score":	49876
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	921,
			"primary_score":	999669,
			"second_score":	49875
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1137,
			"primary_score":	999626,
			"second_score":	119514
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1140,
			"primary_score":	999626,
			"second_score":	119513
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1177,
			"primary_score":	999626,
			"second_score":	122095
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1180,
			"primary_score":	999626,
			"second_score":	119063
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1319,
			"primary_score":	999626,
			"second_score":	119512
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1321,
			"primary_score":	999626,
			"second_score":	119510
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1323,
			"primary_score":	999626,
			"second_score":	119509
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1325,
			"primary_score":	999626,
			"second_score":	103784
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1326,
			"primary_score":	999626,
			"second_score":	103783
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1328,
			"primary_score":	999626,
			"second_score":	103782
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1332,
			"primary_score":	999626,
			"second_score":	103781
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1333,
			"primary_score":	999626,
			"second_score":	103780
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1336,
			"primary_score":	999626,
			"second_score":	103779
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1337,
			"primary_score":	999626,
			"second_score":	103778
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1339,
			"primary_score":	999626,
			"second_score":	3136
		}, {
			"file":	"sapi/cli/php_cli.c",
			"line":	1344,
			"primary_score":	999626,
			"second_score":	1
		}],
	"mutation_info":	[{
			"file":	"Zend/zend_object_handlers.c",
			"functions":	[]
		}],
	"rules":	[{
			"file_name":	"Zend/zend_object_handlers.c",
			"lines":	[{
					"line":	114,
					"switches":	[]
				}, {
					"line":	115,
					"switches":	[]
				}, {
					"line":	123,
					"switches":	[{
							"switch":	0,
							"types":	[[], [], [], [], [165], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	124,
							"begin_column":	0,
							"end_line":	124,
							"end_column":	0,
							"patch_codes":	["memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(retval)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(retval)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((retval)))", "_efree(((member)))", "_efree(((object)))", "_efree(((retval)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((retval)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(retval)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((retval))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((retval))", "zend_call_method(&(member), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(object), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(retval), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (ce), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(ce)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(member), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(object), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(retval), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (member), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (object), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (retval), ((void *)0))", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((retval))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((retval))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((retval), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((retval))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "_zval_copy_ctor((member))", "_zval_ptr_dtor((&member))", "exit(1)", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zval_addref_p(member)", "zval_delref_p(retval)", "if (__is_neg(\"\", \"L124\", 4, &(member), sizeof (member), &(object), sizeof (object), &(retval), sizeof (retval), &(ce), sizeof (ce)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	2,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	3,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	4,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	5,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	6,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	7,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	8,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	9,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	10,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	11,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	12,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	13,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	14,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	15,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	16,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	17,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	18,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	19,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	20,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	21,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	22,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	23,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	24,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	25,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	26,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	27,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	28,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	29,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	30,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	31,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	32,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	33,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	34,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	35,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	36,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	37,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	38,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	39,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	40,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	41,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	42,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	43,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	44,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	45,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	46,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	47,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	48,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	49,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	50,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	51,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	52,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	53,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	54,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	55,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	56,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	57,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	58,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	59,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	60,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	61,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	62,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	63,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	64,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	65,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	66,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	67,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	104,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	105,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	106,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	107,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	108,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	109,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	110,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	111,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	112,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	113,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	114,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	115,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	116,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	117,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	118,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	119,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	120,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	121,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	122,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	123,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	124,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	125,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	126,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	127,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	128,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	129,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	130,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	131,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	132,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	133,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	134,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	135,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	136,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	137,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	138,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	139,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	140,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	141,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	142,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	143,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	144,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	145,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	146,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	147,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	148,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	149,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	150,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	151,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	152,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	153,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	154,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	155,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	156,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	157,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	158,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	159,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	160,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	161,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	162,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	163,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	164,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	165,
									"scores":	[-10.143496203250949, -11.22011778035095, -10.858297740350949, -11.350679640250949]
								}]
						}, {
							"switch":	1,
							"types":	[[50], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], []],
							"begin_line":	124,
							"begin_column":	2,
							"end_line":	124,
							"end_column":	28,
							"patch_codes":	["if (__is_neg(\"\", \"L124\", 4, &(member), sizeof (member), &(object), sizeof (object), &(retval), sizeof (retval), &(ce), sizeof (ce))) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if ((zval_isref_p(member)) || __is_neg(\"\", \"L124\", 4, &(member), sizeof (member), &(object), sizeof (object), &(retval), sizeof (retval), &(ce), sizeof (ce))) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (_convert_to_string(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (_object_init(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (_zval_copy_ctor(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (_zval_copy_ctor_func(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (_zval_dtor(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (_zval_dtor_func(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (_zval_dtor_wrapper(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (_zval_internal_dtor(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (add_next_index_null(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (convert_scalar_to_number(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (convert_to_array(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (convert_to_boolean(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (convert_to_double(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (convert_to_long(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (convert_to_null(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (convert_to_object(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (decrement_function(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (gc_remove_zval_from_buffer(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (gc_zobj_possible_root(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (gc_zval_check_possible_root(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (gc_zval_possible_root(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (i_zend_is_true(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (i_zval_ptr_dtor(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (increment_function(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (lex_scan(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (safe_free_zval_ptr_rel(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_get_closure_invoke_method(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_get_closure_method_def(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_get_closure_this_ptr(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_is_true(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_locale_sprintf_double(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_object_store_ctor_failed(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_objects_clone_obj(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_objects_store_add_ref(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_objects_store_clone_obj(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_objects_store_del_ref(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_objects_store_get_refcount(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_print_flat_zval_r(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_print_variable(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_std_get_constructor(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zend_std_get_properties(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zval_addref_p(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zval_delref_p(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zval_is_true(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zval_refcount_p(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zval_set_isref_p(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if (zval_unset_isref_p(member)) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n", "if ((zval_isref_p(member)) && !__is_neg(\"\", \"L124\", 4, &(member), sizeof (member), &(object), sizeof (object), &(retval), sizeof (retval), &(ce), sizeof (ce))) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.95206535025095, -7.9835214407509483, -7.52839313025095, -7.61955196715095]
								}, {
									"case":	2,
									"scores":	[-7.2763044851509484, -8.30776057565095, -7.8526322651509481, -7.9437911020509482]
								}, {
									"case":	3,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	4,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	5,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	6,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	7,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	8,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	9,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	10,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	11,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	12,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	13,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	14,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	15,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	16,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	17,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	18,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	19,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	20,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	21,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	22,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	23,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	24,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	25,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	26,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	27,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	28,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	29,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	30,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	31,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	32,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	33,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	34,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	35,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	36,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	37,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	38,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	39,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	40,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	41,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	42,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	43,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	44,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	45,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	46,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	47,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	48,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	49,
									"scores":	[-6.8212128591509487]
								}, {
									"case":	50,
									"scores":	[-7.2763044851509484, -8.30776057565095, -7.8526322651509481, -7.9437911020509482]
								}]
						}, {
							"switch":	2,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	124,
							"begin_column":	2,
							"end_line":	124,
							"end_column":	28,
							"patch_codes":	["if (!__is_neg(\"\", \"L124\", 4, &(member), sizeof (member), &(object), sizeof (object), &(retval), sizeof (retval), &(ce), sizeof (ce)))\n    if (zval_isref_p(member)) {\n        zval *original_var = member;\n        do {\n            (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n        } while (0);\n        do {\n            do {\n                (member)->value = (original_var)->value;\n                (*member).type = (*original_var).type;\n            } while (0);\n            zval_set_refcount_p(member, 1);\n            zval_unset_isref_p(member);\n        } while (0);\n        _zval_copy_ctor((member));\n    } else {\n        zval_addref_p(member);\n    }\n", "if (!__is_neg(\"\", \"L124\", 4, &(member), sizeof (member), &(object), sizeof (object), &(retval), sizeof (retval), &(ce), sizeof (ce)) && (zval_isref_p(member))) {\n    zval *original_var = member;\n    do {\n        (member) = (zval *)_emalloc((sizeof(zval_gc_info)));\n        ((zval_gc_info *)(member))->u.buffered = ((void *)0);\n    } while (0);\n    do {\n        do {\n            (member)->value = (original_var)->value;\n            (*member).type = (*original_var).type;\n        } while (0);\n        zval_set_refcount_p(member, 1);\n        zval_unset_isref_p(member);\n    } while (0);\n    _zval_copy_ctor((member));\n} else {\n    zval_addref_p(member);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.12368295915095, -10.155139049650948, -9.70001073915095, -9.79116957605095]
								}, {
									"case":	2,
									"scores":	[-8.18519832515095, -9.21665441565095, -8.76152610515095, -8.85268494205095]
								}]
						}]
				}, {
					"line":	125,
					"switches":	[{
							"switch":	3,
							"types":	[[], [], [], [], [166], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], [], [], [], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165], [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [], [], [], [], [], []],
							"begin_line":	126,
							"begin_column":	0,
							"end_line":	126,
							"end_column":	0,
							"patch_codes":	["memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(ce, 0, sizeof (*(ce)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(retval)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(retval)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((retval)))", "_efree(((member)))", "_efree(((object)))", "_efree(((retval)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((retval)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(retval)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((retval))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((retval))", "zend_call_method(&(member), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(object), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(retval), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (ce), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(ce)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(member), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(object), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(retval), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (member), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (object), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (retval), ((void *)0))", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((retval))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((retval))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((retval), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((retval))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "_zval_copy_ctor((member))", "_zval_ptr_dtor((&member))", "exit(1)", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zval_addref_p(member)", "zval_delref_p(retval)", "if (__is_neg(\"\", \"L126\", 39, &(object), sizeof (object), &(member), sizeof (member), &(retval), sizeof (retval), &(ce), sizeof (ce), &(ce->__get), sizeof (ce->__get), &(ce->type), sizeof (ce->type), &(ce->name), sizeof (ce->name), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.74040202988087]
								}, {
									"case":	2,
									"scores":	[-6.74040202988087]
								}, {
									"case":	3,
									"scores":	[-6.74040202988087]
								}, {
									"case":	4,
									"scores":	[-6.74040202988087]
								}, {
									"case":	5,
									"scores":	[-6.74040202988087]
								}, {
									"case":	6,
									"scores":	[-6.74040202988087]
								}, {
									"case":	7,
									"scores":	[-6.74040202988087]
								}, {
									"case":	8,
									"scores":	[-6.74040202988087]
								}, {
									"case":	9,
									"scores":	[-6.74040202988087]
								}, {
									"case":	10,
									"scores":	[-6.74040202988087]
								}, {
									"case":	11,
									"scores":	[-6.74040202988087]
								}, {
									"case":	12,
									"scores":	[-6.74040202988087]
								}, {
									"case":	13,
									"scores":	[-6.74040202988087]
								}, {
									"case":	14,
									"scores":	[-6.74040202988087]
								}, {
									"case":	15,
									"scores":	[-6.74040202988087]
								}, {
									"case":	16,
									"scores":	[-6.74040202988087]
								}, {
									"case":	17,
									"scores":	[-6.74040202988087]
								}, {
									"case":	18,
									"scores":	[-6.74040202988087]
								}, {
									"case":	19,
									"scores":	[-6.74040202988087]
								}, {
									"case":	20,
									"scores":	[-6.74040202988087]
								}, {
									"case":	21,
									"scores":	[-6.74040202988087]
								}, {
									"case":	22,
									"scores":	[-6.74040202988087]
								}, {
									"case":	23,
									"scores":	[-6.74040202988087]
								}, {
									"case":	24,
									"scores":	[-6.74040202988087]
								}, {
									"case":	25,
									"scores":	[-6.74040202988087]
								}, {
									"case":	26,
									"scores":	[-6.74040202988087]
								}, {
									"case":	27,
									"scores":	[-6.74040202988087]
								}, {
									"case":	28,
									"scores":	[-6.74040202988087]
								}, {
									"case":	29,
									"scores":	[-6.74040202988087]
								}, {
									"case":	30,
									"scores":	[-6.74040202988087]
								}, {
									"case":	31,
									"scores":	[-6.74040202988087]
								}, {
									"case":	32,
									"scores":	[-6.74040202988087]
								}, {
									"case":	33,
									"scores":	[-6.74040202988087]
								}, {
									"case":	34,
									"scores":	[-6.74040202988087]
								}, {
									"case":	35,
									"scores":	[-6.74040202988087]
								}, {
									"case":	36,
									"scores":	[-6.74040202988087]
								}, {
									"case":	37,
									"scores":	[-6.74040202988087]
								}, {
									"case":	38,
									"scores":	[-6.74040202988087]
								}, {
									"case":	39,
									"scores":	[-6.74040202988087]
								}, {
									"case":	40,
									"scores":	[-6.74040202988087]
								}, {
									"case":	41,
									"scores":	[-6.74040202988087]
								}, {
									"case":	42,
									"scores":	[-6.74040202988087]
								}, {
									"case":	43,
									"scores":	[-6.74040202988087]
								}, {
									"case":	44,
									"scores":	[-6.74040202988087]
								}, {
									"case":	45,
									"scores":	[-6.74040202988087]
								}, {
									"case":	46,
									"scores":	[-6.74040202988087]
								}, {
									"case":	47,
									"scores":	[-6.74040202988087]
								}, {
									"case":	48,
									"scores":	[-6.74040202988087]
								}, {
									"case":	49,
									"scores":	[-6.74040202988087]
								}, {
									"case":	50,
									"scores":	[-6.74040202988087]
								}, {
									"case":	51,
									"scores":	[-6.74040202988087]
								}, {
									"case":	52,
									"scores":	[-6.74040202988087]
								}, {
									"case":	53,
									"scores":	[-6.74040202988087]
								}, {
									"case":	54,
									"scores":	[-6.74040202988087]
								}, {
									"case":	55,
									"scores":	[-6.74040202988087]
								}, {
									"case":	56,
									"scores":	[-6.74040202988087]
								}, {
									"case":	57,
									"scores":	[-6.74040202988087]
								}, {
									"case":	58,
									"scores":	[-6.74040202988087]
								}, {
									"case":	59,
									"scores":	[-6.74040202988087]
								}, {
									"case":	60,
									"scores":	[-6.74040202988087]
								}, {
									"case":	61,
									"scores":	[-6.74040202988087]
								}, {
									"case":	62,
									"scores":	[-6.74040202988087]
								}, {
									"case":	63,
									"scores":	[-6.74040202988087]
								}, {
									"case":	64,
									"scores":	[-6.74040202988087]
								}, {
									"case":	65,
									"scores":	[-6.74040202988087]
								}, {
									"case":	66,
									"scores":	[-6.74040202988087]
								}, {
									"case":	67,
									"scores":	[-6.74040202988087]
								}, {
									"case":	68,
									"scores":	[-6.74040202988087]
								}, {
									"case":	69,
									"scores":	[-6.74040202988087]
								}, {
									"case":	70,
									"scores":	[-6.74040202988087]
								}, {
									"case":	71,
									"scores":	[-6.74040202988087]
								}, {
									"case":	72,
									"scores":	[-6.74040202988087]
								}, {
									"case":	73,
									"scores":	[-6.74040202988087]
								}, {
									"case":	74,
									"scores":	[-6.74040202988087]
								}, {
									"case":	75,
									"scores":	[-6.74040202988087]
								}, {
									"case":	76,
									"scores":	[-6.74040202988087]
								}, {
									"case":	77,
									"scores":	[-6.74040202988087]
								}, {
									"case":	78,
									"scores":	[-6.74040202988087]
								}, {
									"case":	79,
									"scores":	[-6.74040202988087]
								}, {
									"case":	80,
									"scores":	[-6.74040202988087]
								}, {
									"case":	81,
									"scores":	[-6.74040202988087]
								}, {
									"case":	82,
									"scores":	[-6.74040202988087]
								}, {
									"case":	83,
									"scores":	[-6.74040202988087]
								}, {
									"case":	84,
									"scores":	[-6.74040202988087]
								}, {
									"case":	85,
									"scores":	[-6.74040202988087]
								}, {
									"case":	86,
									"scores":	[-6.74040202988087]
								}, {
									"case":	87,
									"scores":	[-6.74040202988087]
								}, {
									"case":	88,
									"scores":	[-6.74040202988087]
								}, {
									"case":	89,
									"scores":	[-6.74040202988087]
								}, {
									"case":	90,
									"scores":	[-6.74040202988087]
								}, {
									"case":	91,
									"scores":	[-6.74040202988087]
								}, {
									"case":	92,
									"scores":	[-6.74040202988087]
								}, {
									"case":	93,
									"scores":	[-6.74040202988087]
								}, {
									"case":	94,
									"scores":	[-6.74040202988087]
								}, {
									"case":	95,
									"scores":	[-6.74040202988087]
								}, {
									"case":	96,
									"scores":	[-6.74040202988087]
								}, {
									"case":	97,
									"scores":	[-6.74040202988087]
								}, {
									"case":	98,
									"scores":	[-6.74040202988087]
								}, {
									"case":	99,
									"scores":	[-6.74040202988087]
								}, {
									"case":	100,
									"scores":	[-6.74040202988087]
								}, {
									"case":	101,
									"scores":	[-6.74040202988087]
								}, {
									"case":	102,
									"scores":	[-6.74040202988087]
								}, {
									"case":	103,
									"scores":	[-6.74040202988087]
								}, {
									"case":	104,
									"scores":	[-6.74040202988087]
								}, {
									"case":	105,
									"scores":	[-6.74040202988087]
								}, {
									"case":	106,
									"scores":	[-6.74040202988087]
								}, {
									"case":	107,
									"scores":	[-6.74040202988087]
								}, {
									"case":	108,
									"scores":	[-6.74040202988087]
								}, {
									"case":	109,
									"scores":	[-6.74040202988087]
								}, {
									"case":	110,
									"scores":	[-6.74040202988087]
								}, {
									"case":	111,
									"scores":	[-6.74040202988087]
								}, {
									"case":	112,
									"scores":	[-6.74040202988087]
								}, {
									"case":	113,
									"scores":	[-6.74040202988087]
								}, {
									"case":	114,
									"scores":	[-6.74040202988087]
								}, {
									"case":	115,
									"scores":	[-6.74040202988087]
								}, {
									"case":	116,
									"scores":	[-6.74040202988087]
								}, {
									"case":	117,
									"scores":	[-6.74040202988087]
								}, {
									"case":	118,
									"scores":	[-6.74040202988087]
								}, {
									"case":	119,
									"scores":	[-6.74040202988087]
								}, {
									"case":	120,
									"scores":	[-6.74040202988087]
								}, {
									"case":	121,
									"scores":	[-6.74040202988087]
								}, {
									"case":	122,
									"scores":	[-6.74040202988087]
								}, {
									"case":	123,
									"scores":	[-6.74040202988087]
								}, {
									"case":	124,
									"scores":	[-6.74040202988087]
								}, {
									"case":	125,
									"scores":	[-6.74040202988087]
								}, {
									"case":	126,
									"scores":	[-6.74040202988087]
								}, {
									"case":	127,
									"scores":	[-6.74040202988087]
								}, {
									"case":	128,
									"scores":	[-6.74040202988087]
								}, {
									"case":	129,
									"scores":	[-6.74040202988087]
								}, {
									"case":	130,
									"scores":	[-6.74040202988087]
								}, {
									"case":	131,
									"scores":	[-6.74040202988087]
								}, {
									"case":	132,
									"scores":	[-6.74040202988087]
								}, {
									"case":	133,
									"scores":	[-6.74040202988087]
								}, {
									"case":	134,
									"scores":	[-6.74040202988087]
								}, {
									"case":	135,
									"scores":	[-6.74040202988087]
								}, {
									"case":	136,
									"scores":	[-6.74040202988087]
								}, {
									"case":	137,
									"scores":	[-6.74040202988087]
								}, {
									"case":	138,
									"scores":	[-6.74040202988087]
								}, {
									"case":	139,
									"scores":	[-6.74040202988087]
								}, {
									"case":	140,
									"scores":	[-6.74040202988087]
								}, {
									"case":	141,
									"scores":	[-6.74040202988087]
								}, {
									"case":	142,
									"scores":	[-6.74040202988087]
								}, {
									"case":	143,
									"scores":	[-6.74040202988087]
								}, {
									"case":	144,
									"scores":	[-6.74040202988087]
								}, {
									"case":	145,
									"scores":	[-6.74040202988087]
								}, {
									"case":	146,
									"scores":	[-6.74040202988087]
								}, {
									"case":	147,
									"scores":	[-6.74040202988087]
								}, {
									"case":	148,
									"scores":	[-6.74040202988087]
								}, {
									"case":	149,
									"scores":	[-6.74040202988087]
								}, {
									"case":	150,
									"scores":	[-6.74040202988087]
								}, {
									"case":	151,
									"scores":	[-6.74040202988087]
								}, {
									"case":	152,
									"scores":	[-6.74040202988087]
								}, {
									"case":	153,
									"scores":	[-6.74040202988087]
								}, {
									"case":	154,
									"scores":	[-6.74040202988087]
								}, {
									"case":	155,
									"scores":	[-6.74040202988087]
								}, {
									"case":	156,
									"scores":	[-6.74040202988087]
								}, {
									"case":	157,
									"scores":	[-6.74040202988087]
								}, {
									"case":	158,
									"scores":	[-6.74040202988087]
								}, {
									"case":	159,
									"scores":	[-6.74040202988087]
								}, {
									"case":	160,
									"scores":	[-6.74040202988087]
								}, {
									"case":	161,
									"scores":	[-6.74040202988087]
								}, {
									"case":	162,
									"scores":	[-6.74040202988087]
								}, {
									"case":	163,
									"scores":	[-6.74040202988087]
								}, {
									"case":	164,
									"scores":	[-6.74040202988087]
								}, {
									"case":	165,
									"scores":	[-6.74040202988087]
								}, {
									"case":	166,
									"scores":	[-11.007543971080871, -8.57609134208087, -10.70829509008087, -10.81753742298087, -11.424720308280868, -10.969787861280871, -11.180676978280868, -10.468852861280869, -11.21582677508087, -10.969787861280871, -10.969787861280871, -11.180676978280868, -11.180676978280868, -11.180676978280868, -10.969787861280871, -10.969787861280871, -11.180676978280868, -11.180676978280868, -11.180676978280868, -11.180676978280868, -11.180676978280868, -11.180676978280868, -11.180676978280868, -11.180676978280868, -11.180676978280868, -11.180676978280868, -11.180676978280868, -10.969787861280871, -10.969787861280871, -10.969787861280871, -10.969787861280871, -10.969787861280871, -10.969787861280871, -11.180676978280868, -10.969787861280871, -11.180676978280868, -10.969787861280871, -11.180676978280868, -11.180676978280868]
								}]
						}, {
							"switch":	4,
							"types":	[[], [], [1], [], [], [], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], [], [3], [], [], [], [], [], [], [], [2]],
							"begin_line":	126,
							"begin_column":	2,
							"end_line":	126,
							"end_column":	93,
							"patch_codes":	["if (!__is_neg(\"\", \"L126\", 39, &(object), sizeof (object), &(member), sizeof (member), &(retval), sizeof (retval), &(ce), sizeof (ce), &(ce->__get), sizeof (ce->__get), &(ce->type), sizeof (ce->type), &(ce->name), sizeof (ce->name), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences)))\n    zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0));\n", "{\n}\n", "printf(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(&ce), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(&member), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(&object), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(&retval), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(member), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(object), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(retval), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (&ce), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (&member), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (&object), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (&retval), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (ce), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(&ce)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(&member)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(&object)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(&retval)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(ce)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (ce != 0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (ce == 0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (member != 0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (member != retval), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (member == 0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (member == retval), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (object != 0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (object != member), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (object != retval), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (object == 0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (object == member), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (object == retval), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (retval != 0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - (retval == 0), &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(&ce), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(&member), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(&object), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(&retval), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(member), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(object), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(retval), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (ce != 0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (ce == 0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (member != 0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (member != retval), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (member == 0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (member == retval), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (object != 0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (object != member), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (object != retval), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (object == 0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (object == member), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (object == retval), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (retval != 0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, (retval == 0), member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (&ce), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (&member), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (&object), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (&retval), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (member), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (object), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (retval), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, (&ce), sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, (&member), sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, (&object), sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, (&retval), sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, (0), sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.75322120038087, -7.42404327638087, -7.20656390488087, -7.14737448988087, -7.53430959988087, -7.52040049988087, -7.98966049988087, -7.19838946988087, -8.27828859988087, -7.52040049988087, -7.52040049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.52040049988087, -7.52040049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.98966049988087, -7.52040049988087, -7.52040049988087, -7.52040049988087, -7.52040049988087, -7.52040049988087, -7.52040049988087, -7.98966049988087, -7.52040049988087, -7.98966049988087, -7.52040049988087, -7.98966049988087, -7.98966049988087]
								}, {
									"case":	2,
									"scores":	[-6.74040202988087]
								}, {
									"case":	3,
									"scores":	[-6.74040202988087]
								}, {
									"case":	4,
									"scores":	[-6.74040202988087]
								}, {
									"case":	5,
									"scores":	[-6.74040202988087]
								}, {
									"case":	6,
									"scores":	[-6.74040202988087]
								}, {
									"case":	7,
									"scores":	[-6.74040202988087]
								}, {
									"case":	8,
									"scores":	[-6.74040202988087]
								}, {
									"case":	9,
									"scores":	[-6.74040202988087]
								}, {
									"case":	10,
									"scores":	[-6.74040202988087]
								}, {
									"case":	11,
									"scores":	[-6.74040202988087]
								}, {
									"case":	12,
									"scores":	[-6.74040202988087]
								}, {
									"case":	13,
									"scores":	[-6.74040202988087]
								}, {
									"case":	14,
									"scores":	[-6.74040202988087]
								}, {
									"case":	15,
									"scores":	[-6.74040202988087]
								}, {
									"case":	16,
									"scores":	[-6.74040202988087]
								}, {
									"case":	17,
									"scores":	[-6.74040202988087]
								}, {
									"case":	18,
									"scores":	[-6.74040202988087]
								}, {
									"case":	19,
									"scores":	[-6.74040202988087]
								}, {
									"case":	20,
									"scores":	[-6.74040202988087]
								}, {
									"case":	21,
									"scores":	[-6.74040202988087]
								}, {
									"case":	22,
									"scores":	[-6.74040202988087]
								}, {
									"case":	23,
									"scores":	[-6.74040202988087]
								}, {
									"case":	24,
									"scores":	[-6.74040202988087]
								}, {
									"case":	25,
									"scores":	[-6.74040202988087]
								}, {
									"case":	26,
									"scores":	[-6.74040202988087]
								}, {
									"case":	27,
									"scores":	[-6.74040202988087]
								}, {
									"case":	28,
									"scores":	[-6.74040202988087]
								}, {
									"case":	29,
									"scores":	[-6.74040202988087]
								}, {
									"case":	30,
									"scores":	[-6.74040202988087]
								}, {
									"case":	31,
									"scores":	[-6.74040202988087]
								}, {
									"case":	32,
									"scores":	[-6.74040202988087]
								}, {
									"case":	33,
									"scores":	[-6.74040202988087]
								}, {
									"case":	34,
									"scores":	[-6.74040202988087]
								}, {
									"case":	35,
									"scores":	[-6.74040202988087]
								}, {
									"case":	36,
									"scores":	[-6.74040202988087]
								}, {
									"case":	37,
									"scores":	[-6.74040202988087]
								}, {
									"case":	38,
									"scores":	[-6.74040202988087]
								}, {
									"case":	39,
									"scores":	[-6.74040202988087]
								}, {
									"case":	40,
									"scores":	[-6.74040202988087]
								}, {
									"case":	41,
									"scores":	[-6.74040202988087]
								}, {
									"case":	42,
									"scores":	[-6.74040202988087]
								}, {
									"case":	43,
									"scores":	[-6.74040202988087]
								}, {
									"case":	44,
									"scores":	[-6.74040202988087]
								}, {
									"case":	45,
									"scores":	[-6.74040202988087]
								}, {
									"case":	46,
									"scores":	[-6.74040202988087]
								}, {
									"case":	47,
									"scores":	[-6.74040202988087]
								}, {
									"case":	48,
									"scores":	[-6.74040202988087]
								}, {
									"case":	49,
									"scores":	[-6.74040202988087]
								}, {
									"case":	50,
									"scores":	[-6.74040202988087]
								}, {
									"case":	51,
									"scores":	[-6.74040202988087]
								}, {
									"case":	52,
									"scores":	[-6.74040202988087]
								}, {
									"case":	53,
									"scores":	[-6.74040202988087]
								}, {
									"case":	54,
									"scores":	[-6.74040202988087]
								}, {
									"case":	55,
									"scores":	[-6.74040202988087]
								}, {
									"case":	56,
									"scores":	[-6.74040202988087]
								}, {
									"case":	57,
									"scores":	[-6.74040202988087]
								}, {
									"case":	58,
									"scores":	[-6.74040202988087]
								}, {
									"case":	59,
									"scores":	[-6.74040202988087]
								}, {
									"case":	60,
									"scores":	[-6.74040202988087]
								}, {
									"case":	61,
									"scores":	[-6.74040202988087]
								}, {
									"case":	62,
									"scores":	[-6.74040202988087]
								}, {
									"case":	63,
									"scores":	[-6.74040202988087]
								}, {
									"case":	64,
									"scores":	[-6.74040202988087]
								}, {
									"case":	65,
									"scores":	[-6.74040202988087]
								}, {
									"case":	66,
									"scores":	[-6.74040202988087]
								}, {
									"case":	67,
									"scores":	[-6.74040202988087]
								}, {
									"case":	68,
									"scores":	[-6.74040202988087]
								}, {
									"case":	69,
									"scores":	[-6.74040202988087]
								}, {
									"case":	70,
									"scores":	[-6.74040202988087]
								}]
						}]
				}, {
					"line":	127,
					"switches":	[{
							"switch":	5,
							"types":	[[], [], [], [], [165], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	128,
							"begin_column":	0,
							"end_line":	128,
							"end_column":	0,
							"patch_codes":	["memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(retval)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(retval)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((retval)))", "_efree(((member)))", "_efree(((object)))", "_efree(((retval)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((retval)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(retval)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((retval))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((retval))", "zend_call_method(&(member), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(object), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(retval), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (ce), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(ce)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(member), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(object), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(retval), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (member), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (object), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (retval), ((void *)0))", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((retval))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((retval))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((retval), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((retval))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "_zval_copy_ctor((member))", "_zval_ptr_dtor((&member))", "exit(1)", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zval_addref_p(member)", "zval_delref_p(retval)", "if (__is_neg(\"\", \"L128\", 4, &(member), sizeof (member), &(object), sizeof (object), &(retval), sizeof (retval), &(ce), sizeof (ce)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.72019932256335]
								}, {
									"case":	2,
									"scores":	[-6.72019932256335]
								}, {
									"case":	3,
									"scores":	[-6.72019932256335]
								}, {
									"case":	4,
									"scores":	[-6.72019932256335]
								}, {
									"case":	5,
									"scores":	[-6.72019932256335]
								}, {
									"case":	6,
									"scores":	[-6.72019932256335]
								}, {
									"case":	7,
									"scores":	[-6.72019932256335]
								}, {
									"case":	8,
									"scores":	[-6.72019932256335]
								}, {
									"case":	9,
									"scores":	[-6.72019932256335]
								}, {
									"case":	10,
									"scores":	[-6.72019932256335]
								}, {
									"case":	11,
									"scores":	[-6.72019932256335]
								}, {
									"case":	12,
									"scores":	[-6.72019932256335]
								}, {
									"case":	13,
									"scores":	[-6.72019932256335]
								}, {
									"case":	14,
									"scores":	[-6.72019932256335]
								}, {
									"case":	15,
									"scores":	[-6.72019932256335]
								}, {
									"case":	16,
									"scores":	[-6.72019932256335]
								}, {
									"case":	17,
									"scores":	[-6.72019932256335]
								}, {
									"case":	18,
									"scores":	[-6.72019932256335]
								}, {
									"case":	19,
									"scores":	[-6.72019932256335]
								}, {
									"case":	20,
									"scores":	[-6.72019932256335]
								}, {
									"case":	21,
									"scores":	[-6.72019932256335]
								}, {
									"case":	22,
									"scores":	[-6.72019932256335]
								}, {
									"case":	23,
									"scores":	[-6.72019932256335]
								}, {
									"case":	24,
									"scores":	[-6.72019932256335]
								}, {
									"case":	25,
									"scores":	[-6.72019932256335]
								}, {
									"case":	26,
									"scores":	[-6.72019932256335]
								}, {
									"case":	27,
									"scores":	[-6.72019932256335]
								}, {
									"case":	28,
									"scores":	[-6.72019932256335]
								}, {
									"case":	29,
									"scores":	[-6.72019932256335]
								}, {
									"case":	30,
									"scores":	[-6.72019932256335]
								}, {
									"case":	31,
									"scores":	[-6.72019932256335]
								}, {
									"case":	32,
									"scores":	[-6.72019932256335]
								}, {
									"case":	33,
									"scores":	[-6.72019932256335]
								}, {
									"case":	34,
									"scores":	[-6.72019932256335]
								}, {
									"case":	35,
									"scores":	[-6.72019932256335]
								}, {
									"case":	36,
									"scores":	[-6.72019932256335]
								}, {
									"case":	37,
									"scores":	[-6.72019932256335]
								}, {
									"case":	38,
									"scores":	[-6.72019932256335]
								}, {
									"case":	39,
									"scores":	[-6.72019932256335]
								}, {
									"case":	40,
									"scores":	[-6.72019932256335]
								}, {
									"case":	41,
									"scores":	[-6.72019932256335]
								}, {
									"case":	42,
									"scores":	[-6.72019932256335]
								}, {
									"case":	43,
									"scores":	[-6.72019932256335]
								}, {
									"case":	44,
									"scores":	[-6.72019932256335]
								}, {
									"case":	45,
									"scores":	[-6.72019932256335]
								}, {
									"case":	46,
									"scores":	[-6.72019932256335]
								}, {
									"case":	47,
									"scores":	[-6.72019932256335]
								}, {
									"case":	48,
									"scores":	[-6.72019932256335]
								}, {
									"case":	49,
									"scores":	[-6.72019932256335]
								}, {
									"case":	50,
									"scores":	[-6.72019932256335]
								}, {
									"case":	51,
									"scores":	[-6.72019932256335]
								}, {
									"case":	52,
									"scores":	[-6.72019932256335]
								}, {
									"case":	53,
									"scores":	[-6.72019932256335]
								}, {
									"case":	54,
									"scores":	[-6.72019932256335]
								}, {
									"case":	55,
									"scores":	[-6.72019932256335]
								}, {
									"case":	56,
									"scores":	[-6.72019932256335]
								}, {
									"case":	57,
									"scores":	[-6.72019932256335]
								}, {
									"case":	58,
									"scores":	[-6.72019932256335]
								}, {
									"case":	59,
									"scores":	[-6.72019932256335]
								}, {
									"case":	60,
									"scores":	[-6.72019932256335]
								}, {
									"case":	61,
									"scores":	[-6.72019932256335]
								}, {
									"case":	62,
									"scores":	[-6.72019932256335]
								}, {
									"case":	63,
									"scores":	[-6.72019932256335]
								}, {
									"case":	64,
									"scores":	[-6.72019932256335]
								}, {
									"case":	65,
									"scores":	[-6.72019932256335]
								}, {
									"case":	66,
									"scores":	[-6.72019932256335]
								}, {
									"case":	67,
									"scores":	[-6.72019932256335]
								}, {
									"case":	68,
									"scores":	[-6.72019932256335]
								}, {
									"case":	69,
									"scores":	[-6.72019932256335]
								}, {
									"case":	70,
									"scores":	[-6.72019932256335]
								}, {
									"case":	71,
									"scores":	[-6.72019932256335]
								}, {
									"case":	72,
									"scores":	[-6.72019932256335]
								}, {
									"case":	73,
									"scores":	[-6.72019932256335]
								}, {
									"case":	74,
									"scores":	[-6.72019932256335]
								}, {
									"case":	75,
									"scores":	[-6.72019932256335]
								}, {
									"case":	76,
									"scores":	[-6.72019932256335]
								}, {
									"case":	77,
									"scores":	[-6.72019932256335]
								}, {
									"case":	78,
									"scores":	[-6.72019932256335]
								}, {
									"case":	79,
									"scores":	[-6.72019932256335]
								}, {
									"case":	80,
									"scores":	[-6.72019932256335]
								}, {
									"case":	81,
									"scores":	[-6.72019932256335]
								}, {
									"case":	82,
									"scores":	[-6.72019932256335]
								}, {
									"case":	83,
									"scores":	[-6.72019932256335]
								}, {
									"case":	84,
									"scores":	[-6.72019932256335]
								}, {
									"case":	85,
									"scores":	[-6.72019932256335]
								}, {
									"case":	86,
									"scores":	[-6.72019932256335]
								}, {
									"case":	87,
									"scores":	[-6.72019932256335]
								}, {
									"case":	88,
									"scores":	[-6.72019932256335]
								}, {
									"case":	89,
									"scores":	[-6.72019932256335]
								}, {
									"case":	90,
									"scores":	[-6.72019932256335]
								}, {
									"case":	91,
									"scores":	[-6.72019932256335]
								}, {
									"case":	92,
									"scores":	[-6.72019932256335]
								}, {
									"case":	93,
									"scores":	[-6.72019932256335]
								}, {
									"case":	94,
									"scores":	[-6.72019932256335]
								}, {
									"case":	95,
									"scores":	[-6.72019932256335]
								}, {
									"case":	96,
									"scores":	[-6.72019932256335]
								}, {
									"case":	97,
									"scores":	[-6.72019932256335]
								}, {
									"case":	98,
									"scores":	[-6.72019932256335]
								}, {
									"case":	99,
									"scores":	[-6.72019932256335]
								}, {
									"case":	100,
									"scores":	[-6.72019932256335]
								}, {
									"case":	101,
									"scores":	[-6.72019932256335]
								}, {
									"case":	102,
									"scores":	[-6.72019932256335]
								}, {
									"case":	103,
									"scores":	[-6.72019932256335]
								}, {
									"case":	104,
									"scores":	[-6.72019932256335]
								}, {
									"case":	105,
									"scores":	[-6.72019932256335]
								}, {
									"case":	106,
									"scores":	[-6.72019932256335]
								}, {
									"case":	107,
									"scores":	[-6.72019932256335]
								}, {
									"case":	108,
									"scores":	[-6.72019932256335]
								}, {
									"case":	109,
									"scores":	[-6.72019932256335]
								}, {
									"case":	110,
									"scores":	[-6.72019932256335]
								}, {
									"case":	111,
									"scores":	[-6.72019932256335]
								}, {
									"case":	112,
									"scores":	[-6.72019932256335]
								}, {
									"case":	113,
									"scores":	[-6.72019932256335]
								}, {
									"case":	114,
									"scores":	[-6.72019932256335]
								}, {
									"case":	115,
									"scores":	[-6.72019932256335]
								}, {
									"case":	116,
									"scores":	[-6.72019932256335]
								}, {
									"case":	117,
									"scores":	[-6.72019932256335]
								}, {
									"case":	118,
									"scores":	[-6.72019932256335]
								}, {
									"case":	119,
									"scores":	[-6.72019932256335]
								}, {
									"case":	120,
									"scores":	[-6.72019932256335]
								}, {
									"case":	121,
									"scores":	[-6.72019932256335]
								}, {
									"case":	122,
									"scores":	[-6.72019932256335]
								}, {
									"case":	123,
									"scores":	[-6.72019932256335]
								}, {
									"case":	124,
									"scores":	[-6.72019932256335]
								}, {
									"case":	125,
									"scores":	[-6.72019932256335]
								}, {
									"case":	126,
									"scores":	[-6.72019932256335]
								}, {
									"case":	127,
									"scores":	[-6.72019932256335]
								}, {
									"case":	128,
									"scores":	[-6.72019932256335]
								}, {
									"case":	129,
									"scores":	[-6.72019932256335]
								}, {
									"case":	130,
									"scores":	[-6.72019932256335]
								}, {
									"case":	131,
									"scores":	[-6.72019932256335]
								}, {
									"case":	132,
									"scores":	[-6.72019932256335]
								}, {
									"case":	133,
									"scores":	[-6.72019932256335]
								}, {
									"case":	134,
									"scores":	[-6.72019932256335]
								}, {
									"case":	135,
									"scores":	[-6.72019932256335]
								}, {
									"case":	136,
									"scores":	[-6.72019932256335]
								}, {
									"case":	137,
									"scores":	[-6.72019932256335]
								}, {
									"case":	138,
									"scores":	[-6.72019932256335]
								}, {
									"case":	139,
									"scores":	[-6.72019932256335]
								}, {
									"case":	140,
									"scores":	[-6.72019932256335]
								}, {
									"case":	141,
									"scores":	[-6.72019932256335]
								}, {
									"case":	142,
									"scores":	[-6.72019932256335]
								}, {
									"case":	143,
									"scores":	[-6.72019932256335]
								}, {
									"case":	144,
									"scores":	[-6.72019932256335]
								}, {
									"case":	145,
									"scores":	[-6.72019932256335]
								}, {
									"case":	146,
									"scores":	[-6.72019932256335]
								}, {
									"case":	147,
									"scores":	[-6.72019932256335]
								}, {
									"case":	148,
									"scores":	[-6.72019932256335]
								}, {
									"case":	149,
									"scores":	[-6.72019932256335]
								}, {
									"case":	150,
									"scores":	[-6.72019932256335]
								}, {
									"case":	151,
									"scores":	[-6.72019932256335]
								}, {
									"case":	152,
									"scores":	[-6.72019932256335]
								}, {
									"case":	153,
									"scores":	[-6.72019932256335]
								}, {
									"case":	154,
									"scores":	[-6.72019932256335]
								}, {
									"case":	155,
									"scores":	[-6.72019932256335]
								}, {
									"case":	156,
									"scores":	[-6.72019932256335]
								}, {
									"case":	157,
									"scores":	[-6.72019932256335]
								}, {
									"case":	158,
									"scores":	[-6.72019932256335]
								}, {
									"case":	159,
									"scores":	[-6.72019932256335]
								}, {
									"case":	160,
									"scores":	[-6.72019932256335]
								}, {
									"case":	161,
									"scores":	[-6.72019932256335]
								}, {
									"case":	162,
									"scores":	[-6.72019932256335]
								}, {
									"case":	163,
									"scores":	[-6.72019932256335]
								}, {
									"case":	164,
									"scores":	[-6.72019932256335]
								}, {
									"case":	165,
									"scores":	[-9.31166002376335, -9.97538603376335, -10.278588792763351, -10.835347773763351]
								}]
						}, {
							"switch":	6,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	128,
							"begin_column":	2,
							"end_line":	128,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L128\", 4, &(member), sizeof (member), &(object), sizeof (object), &(retval), sizeof (retval), &(ce), sizeof (ce)))\n    _zval_ptr_dtor((&member));\n", "zval_update_constant((&member), 0)", "zval_update_constant_inline_change((&member), 0)", "zval_update_constant_no_inline_change((&member), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&member))", "zval_add_ref((&member))", "_zval_ptr_dtor((&(&ce)))", "_zval_ptr_dtor((&(&member)))", "_zval_ptr_dtor((&(&object)))", "_zval_ptr_dtor((&(&retval)))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(retval)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.50478655906335, -9.31407120656335, -8.21475612156335, -9.54646351906335]
								}, {
									"case":	2,
									"scores":	[-6.72019932256335]
								}, {
									"case":	3,
									"scores":	[-6.72019932256335]
								}, {
									"case":	4,
									"scores":	[-6.72019932256335]
								}, {
									"case":	5,
									"scores":	[-6.72019932256335]
								}, {
									"case":	6,
									"scores":	[-6.72019932256335]
								}, {
									"case":	7,
									"scores":	[-6.72019932256335]
								}, {
									"case":	8,
									"scores":	[-6.72019932256335]
								}, {
									"case":	9,
									"scores":	[-6.72019932256335]
								}, {
									"case":	10,
									"scores":	[-6.72019932256335]
								}, {
									"case":	11,
									"scores":	[-6.72019932256335]
								}, {
									"case":	12,
									"scores":	[-6.72019932256335]
								}, {
									"case":	13,
									"scores":	[-6.72019932256335]
								}, {
									"case":	14,
									"scores":	[-6.72019932256335]
								}]
						}]
				}, {
					"line":	130,
					"switches":	[{
							"switch":	9,
							"types":	[[], [], [], [], [165], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	131,
							"begin_column":	1,
							"end_line":	131,
							"end_column":	1,
							"patch_codes":	["memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(retval)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(retval)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((retval)))", "_efree(((member)))", "_efree(((object)))", "_efree(((retval)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((retval)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(retval)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((retval))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((retval))", "zend_call_method(&(member), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(object), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(retval), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (ce), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(ce)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(member), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(object), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(retval), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (member), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (object), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (retval), ((void *)0))", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((retval))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((retval))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((retval), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((retval))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "_zval_copy_ctor((member))", "_zval_ptr_dtor((&member))", "exit(1)", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zval_addref_p(member)", "zval_delref_p(retval)", "if (__is_neg(\"\", \"L131\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	2,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	3,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	4,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	5,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	6,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	7,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	8,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	9,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	10,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	11,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	12,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	13,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	14,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	15,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	16,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	17,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	18,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	19,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	20,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	21,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	22,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	23,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	24,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	25,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	26,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	27,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	28,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	29,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	30,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	31,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	32,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	33,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	34,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	35,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	36,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	37,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	38,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	39,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	40,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	41,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	42,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	43,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	44,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	45,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	46,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	47,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	48,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	49,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	50,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	51,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	52,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	53,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	54,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	55,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	56,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	57,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	58,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	59,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	60,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	61,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	62,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	63,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	64,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	65,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	66,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	67,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	68,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	69,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	70,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	71,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	72,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	73,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	74,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	75,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	76,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	77,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	78,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	79,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	80,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	81,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	82,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	83,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	84,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	85,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	86,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	87,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	88,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	89,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	90,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	91,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	92,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	93,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	94,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	95,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	96,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	97,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	98,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	99,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	100,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	101,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	102,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	103,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	104,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	105,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	106,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	107,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	108,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	109,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	110,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	111,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	112,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	113,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	114,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	115,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	116,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	117,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	118,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	119,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	120,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	121,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	122,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	123,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	124,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	125,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	126,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	127,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	128,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	129,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	130,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	131,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	132,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	133,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	134,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	135,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	136,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	137,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	138,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	139,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	140,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	141,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	142,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	143,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	144,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	145,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	146,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	147,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	148,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	149,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	150,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	151,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	152,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	153,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	154,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	155,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	156,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	157,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	158,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	159,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	160,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	161,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	162,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	163,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	164,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	165,
									"scores":	[-7.3994956101283123, -8.29190397912831, -8.29190397912831, -8.25480357912831]
								}]
						}, {
							"switch":	10,
							"types":	[[], [], [1], [], [], [], [132, 133, 134, 135, 136, 137, 138], [], [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], [], [], [84]],
							"begin_line":	131,
							"begin_column":	3,
							"end_line":	131,
							"end_column":	20,
							"patch_codes":	["if (!__is_neg(\"\", \"L131\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce)))\n    zval_delref_p(retval);\n", "_array_init(retval, 0)", "_array_init(retval, 1)", "_object_init_ex(retval, 0)", "_object_init_ex(retval, ce)", "_object_init_ex(retval, zend_ce_aggregate)", "_object_init_ex(retval, zend_ce_arrayaccess)", "_object_init_ex(retval, zend_ce_closure)", "_object_init_ex(retval, zend_ce_iterator)", "_object_init_ex(retval, zend_ce_serializable)", "_object_init_ex(retval, zend_ce_traversable)", "add_index_null(retval, 0)", "add_index_null(retval, 1)", "add_next_index_bool(retval, 0)", "add_next_index_bool(retval, 1)", "add_next_index_bool(retval, le_index_ptr)", "add_next_index_long(retval, 0)", "add_next_index_long(retval, 1)", "add_next_index_resource(retval, 0)", "add_next_index_resource(retval, 1)", "add_next_index_resource(retval, le_index_ptr)", "add_next_index_zval(retval, 0)", "add_next_index_zval(retval, member)", "add_next_index_zval(retval, object)", "add_next_index_zval(retval, retval)", "bitwise_not_function(retval, 0)", "bitwise_not_function(retval, member)", "bitwise_not_function(retval, object)", "bitwise_not_function(retval, retval)", "boolean_not_function(retval, 0)", "boolean_not_function(retval, member)", "boolean_not_function(retval, object)", "boolean_not_function(retval, retval)", "compile_string(retval, 0)", "convert_to_long_base(retval, 0)", "convert_to_long_base(retval, 1)", "convert_to_long_base(retval, le_index_ptr)", "zend_binary_zval_strcasecmp(retval, 0)", "zend_binary_zval_strcasecmp(retval, member)", "zend_binary_zval_strcasecmp(retval, object)", "zend_binary_zval_strcasecmp(retval, retval)", "zend_binary_zval_strcmp(retval, 0)", "zend_binary_zval_strcmp(retval, member)", "zend_binary_zval_strcmp(retval, object)", "zend_binary_zval_strcmp(retval, retval)", "zend_iterator_unwrap(retval, 0)", "zend_make_callable(retval, 0)", "zend_object_create_proxy(retval, 0)", "zend_object_create_proxy(retval, member)", "zend_object_create_proxy(retval, object)", "zend_object_create_proxy(retval, retval)", "zend_object_store_set_object(retval, 0)", "zend_print_zval(retval, 0)", "zend_print_zval(retval, 1)", "zend_print_zval(retval, le_index_ptr)", "zend_print_zval_r(retval, 0)", "zend_print_zval_r(retval, 1)", "zend_print_zval_r(retval, le_index_ptr)", "zend_std_call_getter(retval, 0)", "zend_std_call_getter(retval, member)", "zend_std_call_getter(retval, object)", "zend_std_call_getter(retval, retval)", "zend_std_call_issetter(retval, 0)", "zend_std_call_issetter(retval, member)", "zend_std_call_issetter(retval, object)", "zend_std_call_issetter(retval, retval)", "zend_std_call_unsetter(retval, 0)", "zend_std_call_unsetter(retval, member)", "zend_std_call_unsetter(retval, object)", "zend_std_call_unsetter(retval, retval)", "zend_std_compare_objects(retval, 0)", "zend_std_compare_objects(retval, member)", "zend_std_compare_objects(retval, object)", "zend_std_compare_objects(retval, retval)", "zend_std_get_debug_info(retval, 0)", "zend_std_unset_dimension(retval, 0)", "zend_std_unset_dimension(retval, member)", "zend_std_unset_dimension(retval, object)", "zend_std_unset_dimension(retval, retval)", "zval_set_isref_to_p(retval, 0)", "zval_set_isref_to_p(retval, 1)", "zval_set_refcount_p(retval, 0)", "zval_set_refcount_p(retval, 1)", "{\n}\n", "_convert_to_string(retval)", "_object_init(retval)", "_zval_copy_ctor(retval)", "_zval_copy_ctor_func(retval)", "_zval_dtor(retval)", "_zval_dtor_func(retval)", "_zval_dtor_wrapper(retval)", "_zval_internal_dtor(retval)", "add_next_index_null(retval)", "convert_scalar_to_number(retval)", "convert_to_array(retval)", "convert_to_boolean(retval)", "convert_to_double(retval)", "convert_to_long(retval)", "convert_to_null(retval)", "convert_to_object(retval)", "decrement_function(retval)", "gc_remove_zval_from_buffer(retval)", "gc_zobj_possible_root(retval)", "gc_zval_check_possible_root(retval)", "gc_zval_possible_root(retval)", "i_zend_is_true(retval)", "i_zval_ptr_dtor(retval)", "increment_function(retval)", "lex_scan(retval)", "safe_free_zval_ptr_rel(retval)", "zend_get_closure_invoke_method(retval)", "zend_get_closure_method_def(retval)", "zend_get_closure_this_ptr(retval)", "zend_is_true(retval)", "zend_locale_sprintf_double(retval)", "zend_object_store_ctor_failed(retval)", "zend_objects_clone_obj(retval)", "zend_objects_store_add_ref(retval)", "zend_objects_store_clone_obj(retval)", "zend_objects_store_del_ref(retval)", "zend_objects_store_get_refcount(retval)", "zend_print_flat_zval_r(retval)", "zend_print_variable(retval)", "zend_std_get_constructor(retval)", "zend_std_get_properties(retval)", "zval_addref_p(retval)", "zval_is_true(retval)", "zval_isref_p(retval)", "zval_refcount_p(retval)", "zval_set_isref_p(retval)", "zval_unset_isref_p(retval)", "zval_delref_p((&ce))", "zval_delref_p((&member))", "zval_delref_p((&object))", "zval_delref_p((&retval))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((retval))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1350400779283119, -8.1428261779283133, -8.1428261779283133, -7.8484753779283123]
								}, {
									"case":	2,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	3,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	4,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	5,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	6,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	7,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	8,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	9,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	10,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	11,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	12,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	13,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	14,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	15,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	16,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	17,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	18,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	19,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	20,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	21,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	22,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	23,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	24,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	25,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	26,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	27,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	28,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	29,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	30,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	31,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	32,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	33,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	34,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	35,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	36,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	37,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	38,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	39,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	40,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	41,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	42,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	43,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	44,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	45,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	46,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	47,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	48,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	49,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	50,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	51,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	52,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	53,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	54,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	55,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	56,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	57,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	58,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	59,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	60,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	61,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	62,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	63,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	64,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	65,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	66,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	67,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	68,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	69,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	70,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	71,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	72,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	73,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	74,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	75,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	76,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	77,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	78,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	79,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	80,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	81,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	82,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	83,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	84,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	85,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	86,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	87,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	88,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	89,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	90,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	91,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	92,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	93,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	94,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	95,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	96,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	97,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	98,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	99,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	100,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	101,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	102,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	103,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	104,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	105,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	106,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	107,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	108,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	109,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	110,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	111,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	112,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	113,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	114,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	115,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	116,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	117,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	118,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	119,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	120,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	121,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	122,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	123,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	124,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	125,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	126,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	127,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	128,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	129,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	130,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	131,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	132,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	133,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	134,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	135,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	136,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	137,
									"scores":	[-6.6797939079283122]
								}, {
									"case":	138,
									"scores":	[-6.6797939079283122]
								}]
						}]
				}, {
					"line":	129,
					"switches":	[{
							"switch":	7,
							"types":	[[], [], [], [], [165], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	130,
							"begin_column":	0,
							"end_line":	130,
							"end_column":	0,
							"patch_codes":	["memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(retval)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(retval)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((retval)))", "_efree(((member)))", "_efree(((object)))", "_efree(((retval)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((retval)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(retval)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((retval))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((retval))", "zend_call_method(&(member), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(object), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(retval), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (ce), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(ce)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(member), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(object), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(retval), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (member), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (object), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (retval), ((void *)0))", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((retval))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((retval))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((retval), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((retval))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "_zval_copy_ctor((member))", "_zval_ptr_dtor((&member))", "exit(1)", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zval_addref_p(member)", "zval_delref_p(retval)", "if (__is_neg(\"\", \"L130\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	2,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	3,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	4,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	5,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	6,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	7,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	8,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	9,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	10,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	11,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	12,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	13,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	14,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	15,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	16,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	17,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	18,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	19,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	20,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	21,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	22,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	23,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	24,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	25,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	26,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	27,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	28,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	29,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	30,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	31,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	32,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	33,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	34,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	35,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	36,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	37,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	38,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	39,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	40,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	41,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	42,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	43,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	44,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	45,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	46,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	47,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	48,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	49,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	50,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	51,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	52,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	53,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	54,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	55,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	56,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	57,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	58,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	59,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	60,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	61,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	62,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	63,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	64,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	65,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	66,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	67,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	68,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	69,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	70,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	71,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	72,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	73,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	74,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	75,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	76,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	77,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	78,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	79,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	80,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	81,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	82,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	83,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	84,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	85,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	86,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	87,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	88,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	89,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	90,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	91,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	92,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	93,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	94,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	95,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	96,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	97,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	98,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	99,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	100,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	101,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	102,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	103,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	104,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	105,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	106,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	107,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	108,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	109,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	110,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	111,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	112,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	113,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	114,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	115,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	116,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	117,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	118,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	119,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	120,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	121,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	122,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	123,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	124,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	125,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	126,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	127,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	128,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	129,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	130,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	131,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	132,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	133,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	134,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	135,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	136,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	137,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	138,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	139,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	140,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	141,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	142,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	143,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	144,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	145,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	146,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	147,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	148,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	149,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	150,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	151,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	152,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	153,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	154,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	155,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	156,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	157,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	158,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	159,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	160,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	161,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	162,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	163,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	164,
									"scores":	[-6.6999966152458317]
								}, {
									"case":	165,
									"scores":	[-9.49477960204583, -10.197015305045833, -10.192567465045832, -11.052529205045833]
								}]
						}, {
							"switch":	8,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	130,
							"begin_column":	2,
							"end_line":	132,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L130\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce))) {\n    zval_delref_p(retval);\n}\n", "if ((retval) || __is_neg(\"\", \"L130\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce))) {\n    zval_delref_p(retval);\n}\n", "if ((retval) && !__is_neg(\"\", \"L130\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce))) {\n    zval_delref_p(retval);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.215181754428146, -3.3515871984281462, -3.3468781524281459, -3.5792704649281459]
								}, {
									"case":	2,
									"scores":	[-3.9778986244281453, -5.1143040684281456, -5.1095950224281461, -5.3419873349281461]
								}, {
									"case":	3,
									"scores":	[-3.9778986244281453, -5.1143040684281456, -5.1095950224281461, -5.3419873349281461]
								}]
						}, {
							"switch":	11,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	130,
							"begin_column":	2,
							"end_line":	132,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L130\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce)))\n    if (retval) {\n        zval_delref_p(retval);\n    }\n", "if (!__is_neg(\"\", \"L130\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce)) && (retval)) {\n    zval_delref_p(retval);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.06645031124583, -9.20285575524583, -9.1981467092458331, -9.43053902174583]
								}, {
									"case":	2,
									"scores":	[-7.9526363112458318, -9.08904175524583, -9.08433270924583, -9.31672502174583]
								}]
						}]
				}, {
					"line":	133,
					"switches":	[{
							"switch":	12,
							"types":	[[], [], [], [], [165], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], [], [], [], [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], [], [], [], [], [], []],
							"begin_line":	134,
							"begin_column":	0,
							"end_line":	134,
							"end_column":	0,
							"patch_codes":	["memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(retval)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(retval)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((retval)))", "_efree(((member)))", "_efree(((object)))", "_efree(((retval)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((retval))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((retval)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((retval))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(retval)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((retval))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((retval))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((retval)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((retval))", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((retval))", "zend_call_method(&(member), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(object), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&(retval), ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, (ce), &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &(ce)->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(member), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(object), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &(retval), 1, member, ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (member), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (object), ((void *)0))", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, (retval), ((void *)0))", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((retval))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((retval))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((retval), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((retval))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "_zval_copy_ctor((member))", "_zval_ptr_dtor((&member))", "exit(1)", "zend_call_method(&object, ce, &ce->__get, \"__get\", sizeof (\"__get\") - 1, &retval, 1, member, ((void *)0))", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zval_addref_p(member)", "zval_delref_p(retval)", "if (__is_neg(\"\", \"L134\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	2,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	3,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	4,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	5,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	6,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	7,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	8,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	9,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	10,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	11,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	12,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	13,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	14,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	15,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	16,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	17,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	18,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	19,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	20,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	21,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	22,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	23,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	24,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	25,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	26,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	27,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	28,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	29,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	30,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	31,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	32,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	33,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	34,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	35,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	36,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	37,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	38,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	39,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	40,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	41,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	42,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	43,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	44,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	45,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	46,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	47,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	48,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	49,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	50,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	51,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	52,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	53,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	54,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	55,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	56,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	57,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	58,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	59,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	60,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	61,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	62,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	63,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	64,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	65,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	66,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	67,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	68,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	69,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	70,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	71,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	72,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	73,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	74,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	75,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	76,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	77,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	78,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	79,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	80,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	81,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	82,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	83,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	84,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	85,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	86,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	87,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	88,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	89,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	90,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	91,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	92,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	93,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	94,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	95,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	96,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	97,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	98,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	99,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	100,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	101,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	102,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	103,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	104,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	105,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	106,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	107,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	108,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	109,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	110,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	111,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	112,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	113,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	114,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	115,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	116,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	117,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	118,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	119,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	120,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	121,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	122,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	123,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	124,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	125,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	126,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	127,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	128,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	129,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	130,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	131,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	132,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	133,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	134,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	135,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	136,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	137,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	138,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	139,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	140,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	141,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	142,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	143,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	144,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	145,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	146,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	147,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	148,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	149,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	150,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	151,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	152,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	153,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	154,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	155,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	156,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	157,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	158,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	159,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	160,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	161,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	162,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	163,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	164,
									"scores":	[-6.6595912006107927]
								}, {
									"case":	165,
									"scores":	[-8.81645870341079, -8.65751789041079, -8.6530700504107934, -9.51303179041079]
								}]
						}, {
							"switch":	13,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	134,
							"begin_column":	2,
							"end_line":	134,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L134\", 4, &(retval), sizeof (retval), &(member), sizeof (member), &(object), sizeof (object), &(ce), sizeof (ce)))\n    return retval;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.2579127366107929, -8.55146934061079, -8.5467602946107935, -8.77915260711079]
								}]
						}]
				}, {
					"line":	310,
					"switches":	[{
							"switch":	18,
							"types":	[[], [], [], [], [423], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], [], [], [], [402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], [], [], [], [], [], []],
							"begin_line":	311,
							"begin_column":	1,
							"end_line":	311,
							"end_column":	1,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&(executor_globals.std_property_info), 0, sizeof (*(&(executor_globals.std_property_info))))", "memset(&(executor_globals.std_property_info).ce, 0, sizeof (*(&(executor_globals.std_property_info).ce)))", "memset(&(executor_globals.std_property_info).doc_comment, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment)))", "memset(&(executor_globals.std_property_info).doc_comment_len, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment_len)))", "memset(&(executor_globals.std_property_info).flags, 0, sizeof (*(&(executor_globals.std_property_info).flags)))", "memset(&(executor_globals.std_property_info).h, 0, sizeof (*(&(executor_globals.std_property_info).h)))", "memset(&(executor_globals.std_property_info).name, 0, sizeof (*(&(executor_globals.std_property_info).name)))", "memset(&(executor_globals.std_property_info).name_length, 0, sizeof (*(&(executor_globals.std_property_info).name_length)))", "memset(&(executor_globals.std_property_info).offset, 0, sizeof (*(&(executor_globals.std_property_info).offset)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset((executor_globals.std_property_info).ce, 0, sizeof (*((executor_globals.std_property_info).ce)))", "memset((executor_globals.std_property_info).doc_comment, 0, sizeof (*((executor_globals.std_property_info).doc_comment)))", "memset((executor_globals.std_property_info).name, 0, sizeof (*((executor_globals.std_property_info).name)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L311\", 119, &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(member), sizeof (member), &((*member).value.str.val), sizeof ((*member).value.str.val), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((*member).value.str.len), sizeof ((*member).value.str.len), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(ce), sizeof (ce), &(key), sizeof (key), &(property_info), sizeof (property_info), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	2,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	3,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	4,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	5,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	6,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	7,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	8,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	9,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	10,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	11,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	12,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	13,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	14,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	15,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	16,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	17,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	18,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	19,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	20,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	21,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	22,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	23,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	24,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	25,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	26,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	27,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	28,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	29,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	30,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	31,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	32,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	33,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	34,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	35,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	36,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	37,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	38,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	39,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	40,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	41,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	42,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	43,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	44,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	45,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	46,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	47,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	48,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	49,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	50,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	51,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	52,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	53,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	54,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	55,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	56,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	57,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	58,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	59,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	60,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	61,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	62,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	63,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	64,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	65,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	66,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	67,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	68,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	69,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	70,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	71,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	72,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	73,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	74,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	75,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	76,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	77,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	78,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	79,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	80,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	81,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	82,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	83,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	84,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	85,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	86,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	87,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	88,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	89,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	90,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	91,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	92,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	93,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	94,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	95,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	96,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	97,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	98,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	99,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	100,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	101,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	102,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	103,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	104,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	105,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	106,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	107,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	108,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	109,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	110,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	111,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	112,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	113,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	114,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	115,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	116,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	117,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	118,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	119,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	120,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	121,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	122,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	123,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	124,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	125,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	126,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	127,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	128,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	129,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	130,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	131,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	132,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	133,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	134,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	135,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	136,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	137,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	138,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	139,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	140,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	141,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	142,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	143,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	144,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	145,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	146,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	147,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	148,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	149,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	150,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	151,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	152,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	153,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	154,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	155,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	156,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	157,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	158,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	159,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	160,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	161,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	162,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	163,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	164,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	165,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	166,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	167,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	168,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	169,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	170,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	171,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	172,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	173,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	174,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	175,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	176,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	177,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	178,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	179,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	180,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	181,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	182,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	183,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	184,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	185,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	186,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	187,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	188,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	189,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	190,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	191,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	192,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	193,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	194,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	195,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	196,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	197,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	198,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	199,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	200,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	201,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	202,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	203,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	204,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	205,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	206,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	207,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	208,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	209,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	210,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	211,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	212,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	213,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	214,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	215,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	216,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	217,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	218,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	219,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	220,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	221,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	222,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	223,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	224,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	225,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	226,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	227,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	228,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	229,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	230,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	231,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	232,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	233,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	234,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	235,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	236,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	237,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	238,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	239,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	240,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	241,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	242,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	243,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	244,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	245,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	246,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	247,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	248,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	249,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	250,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	251,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	252,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	253,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	254,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	255,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	256,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	257,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	258,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	259,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	260,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	261,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	262,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	263,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	264,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	265,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	266,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	267,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	268,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	269,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	270,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	271,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	272,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	273,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	274,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	275,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	276,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	277,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	278,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	279,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	280,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	281,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	282,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	283,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	284,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	285,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	286,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	287,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	288,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	289,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	290,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	291,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	292,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	293,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	294,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	295,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	296,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	297,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	298,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	299,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	300,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	301,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	302,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	303,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	304,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	305,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	306,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	307,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	308,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	309,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	310,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	311,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	312,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	313,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	314,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	315,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	316,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	317,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	318,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	319,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	320,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	321,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	322,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	323,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	324,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	325,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	326,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	327,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	328,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	329,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	330,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	331,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	332,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	333,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	334,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	335,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	336,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	337,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	338,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	339,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	340,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	341,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	342,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	343,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	344,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	345,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	346,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	347,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	348,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	349,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	350,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	351,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	352,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	353,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	354,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	355,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	356,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	357,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	358,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	359,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	360,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	361,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	362,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	363,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	364,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	365,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	366,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	367,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	368,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	369,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	370,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	371,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	372,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	373,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	374,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	375,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	376,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	377,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	378,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	379,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	380,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	381,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	382,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	383,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	384,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	385,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	386,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	387,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	388,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	389,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	390,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	391,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	392,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	393,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	394,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	395,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	396,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	397,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	398,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	399,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	400,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	401,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	402,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	403,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	404,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	405,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	406,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	407,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	408,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	409,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	410,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	411,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	412,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	413,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	414,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	415,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	416,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	417,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	418,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	419,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	420,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	421,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	422,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	423,
									"scores":	[-11.361137085220413, -11.674533582020414, -11.292738385220414, -11.804376905220415, -10.580914268220415, -11.092552788220415, -10.267703094220414, -11.593487788220415, -11.351464582020414, -11.093879408020413, -11.056779008020413, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.624886268220415, -10.346905494220415, -10.810740094220414, -11.056779008020413, -11.870925182020414, -11.870925182020414, -11.624886268220415, -11.624886268220415, -11.624886268220415, -11.835775385220416, -11.123951268220415, -11.835775385220416, -11.870925182020414, -11.870925182020414, -11.835775385220416, -11.835775385220416, -11.835775385220416, -11.870925182020414, -11.835775385220416, -11.624886268220415, -11.624886268220415, -11.624886268220415, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.624886268220415, -11.624886268220415, -11.624886268220415, -11.870925182020414, -11.835775385220416, -11.624886268220415, -11.624886268220415, -11.870925182020414, -11.624886268220415, -11.870925182020414, -11.870925182020414, -11.624886268220415, -11.870925182020414, -11.624886268220415, -11.624886268220415, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.624886268220415, -11.870925182020414, -11.835775385220416, -11.624886268220415, -11.624886268220415, -11.835775385220416, -11.123951268220415, -11.624886268220415, -11.624886268220415, -11.835775385220416, -11.123951268220415, -11.870925182020414, -11.835775385220416, -11.870925182020414, -11.870925182020414, -11.835775385220416, -11.835775385220416, -11.835775385220416, -11.870925182020414, -11.835775385220416, -11.624886268220415, -11.624886268220415, -11.624886268220415, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.624886268220415, -11.624886268220415, -11.624886268220415, -11.870925182020414, -11.835775385220416, -11.624886268220415, -11.624886268220415, -11.870925182020414, -11.624886268220415, -11.870925182020414, -11.870925182020414, -11.624886268220415, -11.870925182020414, -11.624886268220415, -11.624886268220415, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.870925182020414, -11.624886268220415, -11.870925182020414, -11.835775385220416, -11.624886268220415]
								}]
						}, {
							"switch":	19,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	311,
							"begin_column":	3,
							"end_line":	311,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L311\", 119, &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(member), sizeof (member), &((*member).value.str.val), sizeof ((*member).value.str.val), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((*member).value.str.len), sizeof ((*member).value.str.len), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(ce), sizeof (ce), &(key), sizeof (key), &(property_info), sizeof (property_info), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce)))\n    (executor_globals.std_property_info).flags = 256;\n", "{\n}\n", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0 * denied_access)", "(executor_globals.std_property_info).flags = (0 * h)", "(executor_globals.std_property_info).flags = (0 * silent)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).flags = (ce != 0)", "(executor_globals.std_property_info).flags = (ce == 0)", "(executor_globals.std_property_info).flags = (denied_access != 0)", "(executor_globals.std_property_info).flags = (denied_access != h)", "(executor_globals.std_property_info).flags = (denied_access * h)", "(executor_globals.std_property_info).flags = (denied_access * silent)", "(executor_globals.std_property_info).flags = (denied_access + 0)", "(executor_globals.std_property_info).flags = (denied_access + h)", "(executor_globals.std_property_info).flags = (denied_access - 0)", "(executor_globals.std_property_info).flags = (denied_access - h)", "(executor_globals.std_property_info).flags = (denied_access == 0)", "(executor_globals.std_property_info).flags = (denied_access == h)", "(executor_globals.std_property_info).flags = (h != 0)", "(executor_globals.std_property_info).flags = (h * denied_access)", "(executor_globals.std_property_info).flags = (h * silent)", "(executor_globals.std_property_info).flags = (h + 0)", "(executor_globals.std_property_info).flags = (h - 0)", "(executor_globals.std_property_info).flags = (h == 0)", "(executor_globals.std_property_info).flags = (key != 0)", "(executor_globals.std_property_info).flags = (key == 0)", "(executor_globals.std_property_info).flags = (member != 0)", "(executor_globals.std_property_info).flags = (member == 0)", "(executor_globals.std_property_info).flags = (property_info != 0)", "(executor_globals.std_property_info).flags = (property_info != scope_property_info)", "(executor_globals.std_property_info).flags = (property_info == 0)", "(executor_globals.std_property_info).flags = (property_info == scope_property_info)", "(executor_globals.std_property_info).flags = (scope_property_info != 0)", "(executor_globals.std_property_info).flags = (scope_property_info == 0)", "(executor_globals.std_property_info).flags = (silent != 0)", "(executor_globals.std_property_info).flags = (silent != denied_access)", "(executor_globals.std_property_info).flags = (silent != h)", "(executor_globals.std_property_info).flags = (silent * denied_access)", "(executor_globals.std_property_info).flags = (silent * h)", "(executor_globals.std_property_info).flags = (silent + 0)", "(executor_globals.std_property_info).flags = (silent + denied_access)", "(executor_globals.std_property_info).flags = (silent + h)", "(executor_globals.std_property_info).flags = (silent - 0)", "(executor_globals.std_property_info).flags = (silent - denied_access)", "(executor_globals.std_property_info).flags = (silent - h)", "(executor_globals.std_property_info).flags = (silent == 0)", "(executor_globals.std_property_info).flags = (silent == denied_access)", "(executor_globals.std_property_info).flags = (silent == h)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.334140899220415, -9.2716975282204146, -9.4129889382204137, -9.7605083192204134, -9.1166268982204137, -9.1022947682204141, -8.9137931182204149, -9.4243057982204146, -10.315300478220415, -10.398604168220414, -10.084806468220414, -9.7904556682204138, -10.315300478220415, -10.315300478220415, -9.5574123782204143, -9.0049073382204146, -9.032567568220415, -9.7904556682204138, -10.315300478220415, -10.315300478220415, -10.026672378220415, -10.315300478220415, -10.315300478220415, -10.026672378220415, -10.026672378220415, -10.026672378220415, -10.315300478220415, -10.026672378220415, -9.5574123782204143, -9.5574123782204143, -9.5574123782204143, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -9.5574123782204143, -9.5574123782204143, -9.5574123782204143, -10.315300478220415, -10.026672378220415, -9.5574123782204143, -9.5574123782204143, -10.315300478220415, -9.5574123782204143, -10.315300478220415, -10.315300478220415, -9.5574123782204143, -10.315300478220415, -9.5574123782204143, -9.5574123782204143, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -9.5574123782204143, -10.315300478220415, -10.026672378220415, -9.5574123782204143, -9.5574123782204143, -9.5574123782204143, -9.5574123782204143, -10.026672378220415, -9.2354013482204138, -10.026672378220415, -10.315300478220415, -10.315300478220415, -10.026672378220415, -10.026672378220415, -10.026672378220415, -10.315300478220415, -10.026672378220415, -9.5574123782204143, -9.5574123782204143, -9.5574123782204143, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -9.5574123782204143, -9.5574123782204143, -9.5574123782204143, -10.315300478220415, -10.026672378220415, -9.5574123782204143, -9.5574123782204143, -10.315300478220415, -9.5574123782204143, -10.315300478220415, -10.315300478220415, -9.5574123782204143, -10.315300478220415, -9.5574123782204143, -9.5574123782204143, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -10.315300478220415, -9.5574123782204143, -10.315300478220415, -10.026672378220415, -9.5574123782204143, -9.5574123782204143, -10.026672378220415, -9.2354013482204138, -9.5574123782204143, -9.5574123782204143, -10.026672378220415, -9.2354013482204138, -10.315300478220415]
								}, {
									"case":	2,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	3,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	4,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	5,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	6,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	7,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	8,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	9,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	10,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	11,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	12,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	13,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	14,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	15,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	16,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	17,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	18,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	19,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	20,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	21,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	22,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	23,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	24,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	25,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	26,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	27,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	28,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	29,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	30,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	31,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	32,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	33,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	34,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	35,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	36,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	37,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	38,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	39,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	40,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	41,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	42,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	43,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	44,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	45,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	46,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	47,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	48,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	49,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	50,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	51,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	52,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	53,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	54,
									"scores":	[-8.8616862982204143]
								}, {
									"case":	55,
									"scores":	[-8.8616862982204143]
								}]
						}]
				}, {
					"line":	311,
					"switches":	[{
							"switch":	20,
							"types":	[[], [], [], [], [424], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [], [], [], [403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], [312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [], [], [], [], [], []],
							"begin_line":	312,
							"begin_column":	1,
							"end_line":	312,
							"end_column":	1,
							"patch_codes":	["memset(&(*member), 0, sizeof (*(&(*member))))", "memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&(executor_globals.std_property_info), 0, sizeof (*(&(executor_globals.std_property_info))))", "memset(&(executor_globals.std_property_info).ce, 0, sizeof (*(&(executor_globals.std_property_info).ce)))", "memset(&(executor_globals.std_property_info).doc_comment, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment)))", "memset(&(executor_globals.std_property_info).doc_comment_len, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment_len)))", "memset(&(executor_globals.std_property_info).flags, 0, sizeof (*(&(executor_globals.std_property_info).flags)))", "memset(&(executor_globals.std_property_info).h, 0, sizeof (*(&(executor_globals.std_property_info).h)))", "memset(&(executor_globals.std_property_info).name, 0, sizeof (*(&(executor_globals.std_property_info).name)))", "memset(&(executor_globals.std_property_info).name_length, 0, sizeof (*(&(executor_globals.std_property_info).name_length)))", "memset(&(executor_globals.std_property_info).offset, 0, sizeof (*(&(executor_globals.std_property_info).offset)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset((executor_globals.std_property_info).ce, 0, sizeof (*((executor_globals.std_property_info).ce)))", "memset((executor_globals.std_property_info).doc_comment, 0, sizeof (*((executor_globals.std_property_info).doc_comment)))", "memset((executor_globals.std_property_info).name, 0, sizeof (*((executor_globals.std_property_info).name)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L312\", 119, &(member), sizeof (member), &((*member).value.str.val), sizeof ((*member).value.str.val), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((*member).value.str.len), sizeof ((*member).value.str.len), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(ce), sizeof (ce), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(key), sizeof (key), &(property_info), sizeof (property_info), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	2,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	3,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	4,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	5,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	6,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	7,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	8,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	9,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	10,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	11,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	12,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	13,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	14,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	15,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	16,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	17,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	18,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	19,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	20,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	21,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	22,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	23,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	24,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	25,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	26,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	27,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	28,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	29,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	30,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	31,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	32,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	33,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	34,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	35,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	36,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	37,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	38,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	39,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	40,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	41,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	42,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	43,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	44,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	45,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	46,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	47,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	48,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	49,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	50,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	51,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	52,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	53,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	54,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	55,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	56,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	57,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	58,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	59,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	60,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	61,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	62,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	63,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	64,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	65,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	66,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	67,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	68,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	69,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	70,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	71,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	72,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	73,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	74,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	75,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	76,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	77,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	78,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	79,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	80,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	81,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	82,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	83,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	84,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	85,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	86,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	87,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	88,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	89,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	90,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	91,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	92,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	93,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	94,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	95,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	96,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	97,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	98,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	99,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	100,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	101,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	102,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	103,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	104,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	105,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	106,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	107,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	108,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	109,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	110,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	111,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	112,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	113,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	114,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	115,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	116,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	117,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	118,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	119,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	120,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	121,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	122,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	123,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	124,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	125,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	126,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	127,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	128,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	129,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	130,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	131,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	132,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	133,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	134,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	135,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	136,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	137,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	138,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	139,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	140,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	141,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	142,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	143,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	144,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	145,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	146,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	147,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	148,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	149,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	150,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	151,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	152,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	153,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	154,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	155,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	156,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	157,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	158,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	159,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	160,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	161,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	162,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	163,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	164,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	165,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	166,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	167,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	168,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	169,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	170,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	171,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	172,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	173,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	174,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	175,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	176,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	177,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	178,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	179,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	180,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	181,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	182,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	183,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	184,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	185,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	186,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	187,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	188,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	189,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	190,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	191,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	192,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	193,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	194,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	195,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	196,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	197,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	198,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	199,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	200,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	201,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	202,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	203,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	204,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	205,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	206,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	207,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	208,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	209,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	210,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	211,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	212,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	213,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	214,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	215,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	216,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	217,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	218,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	219,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	220,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	221,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	222,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	223,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	224,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	225,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	226,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	227,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	228,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	229,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	230,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	231,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	232,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	233,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	234,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	235,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	236,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	237,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	238,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	239,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	240,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	241,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	242,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	243,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	244,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	245,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	246,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	247,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	248,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	249,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	250,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	251,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	252,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	253,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	254,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	255,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	256,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	257,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	258,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	259,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	260,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	261,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	262,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	263,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	264,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	265,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	266,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	267,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	268,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	269,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	270,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	271,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	272,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	273,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	274,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	275,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	276,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	277,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	278,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	279,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	280,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	281,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	282,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	283,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	284,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	285,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	286,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	287,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	288,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	289,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	290,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	291,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	292,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	293,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	294,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	295,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	296,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	297,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	298,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	299,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	300,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	301,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	302,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	303,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	304,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	305,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	306,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	307,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	308,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	309,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	310,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	311,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	312,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	313,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	314,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	315,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	316,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	317,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	318,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	319,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	320,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	321,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	322,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	323,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	324,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	325,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	326,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	327,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	328,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	329,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	330,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	331,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	332,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	333,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	334,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	335,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	336,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	337,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	338,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	339,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	340,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	341,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	342,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	343,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	344,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	345,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	346,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	347,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	348,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	349,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	350,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	351,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	352,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	353,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	354,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	355,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	356,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	357,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	358,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	359,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	360,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	361,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	362,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	363,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	364,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	365,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	366,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	367,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	368,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	369,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	370,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	371,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	372,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	373,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	374,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	375,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	376,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	377,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	378,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	379,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	380,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	381,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	382,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	383,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	384,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	385,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	386,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	387,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	388,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	389,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	390,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	391,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	392,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	393,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	394,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	395,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	396,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	397,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	398,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	399,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	400,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	401,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	402,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	403,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	404,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	405,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	406,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	407,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	408,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	409,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	410,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	411,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	412,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	413,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	414,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	415,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	416,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	417,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	418,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	419,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	420,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	421,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	422,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	423,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	424,
									"scores":	[-10.744251674702895, -10.706358677902895, -11.532799918902894, -11.167965560902894, -10.961279395902894, -11.679604080902894, -10.854754386902894, -12.180539080902895, -11.395478874702896, -12.426577994702894, -12.211937560902895, -11.680930700702895, -11.643830300702895, -12.457976474702894, -12.457976474702894, -10.933956786902893, -11.397791386902894, -11.643830300702895, -12.457976474702894, -12.457976474702894, -12.211937560902895, -12.211937560902895, -12.211937560902895, -12.422826677902894, -11.711002560902894, -12.422826677902894, -12.457976474702894, -12.457976474702894, -12.422826677902894, -12.422826677902894, -12.422826677902894, -12.457976474702894, -12.422826677902894, -12.211937560902895, -12.211937560902895, -12.211937560902895, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.211937560902895, -12.211937560902895, -12.211937560902895, -12.457976474702894, -12.422826677902894, -12.211937560902895, -12.211937560902895, -12.457976474702894, -12.211937560902895, -12.457976474702894, -12.457976474702894, -12.211937560902895, -12.457976474702894, -12.211937560902895, -12.211937560902895, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.211937560902895, -12.457976474702894, -12.422826677902894, -12.211937560902895, -12.211937560902895, -12.422826677902894, -11.711002560902894, -12.211937560902895, -12.211937560902895, -12.422826677902894, -11.711002560902894, -12.457976474702894, -12.422826677902894, -12.457976474702894, -12.457976474702894, -12.422826677902894, -12.422826677902894, -12.422826677902894, -12.457976474702894, -12.422826677902894, -12.211937560902895, -12.211937560902895, -12.211937560902895, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.211937560902895, -12.211937560902895, -12.211937560902895, -12.457976474702894, -12.422826677902894, -12.211937560902895, -12.211937560902895, -12.457976474702894, -12.211937560902895, -12.457976474702894, -12.457976474702894, -12.211937560902895, -12.457976474702894, -12.211937560902895, -12.211937560902895, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.457976474702894, -12.211937560902895, -12.457976474702894, -12.422826677902894, -12.211937560902895]
								}]
						}, {
							"switch":	21,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	312,
							"begin_column":	3,
							"end_line":	312,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L312\", 119, &(member), sizeof (member), &((*member).value.str.val), sizeof ((*member).value.str.val), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((*member).value.str.len), sizeof ((*member).value.str.len), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(ce), sizeof (ce), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(key), sizeof (key), &(property_info), sizeof (property_info), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table)))\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n", "{\n}\n", "(executor_globals.std_property_info).name = (*(&ce)).value.str.val", "(executor_globals.std_property_info).name = (*(&denied_access)).value.str.val", "(executor_globals.std_property_info).name = (*(&h)).value.str.val", "(executor_globals.std_property_info).name = (*(&key)).value.str.val", "(executor_globals.std_property_info).name = (*(&member)).value.str.val", "(executor_globals.std_property_info).name = (*(&property_info)).value.str.val", "(executor_globals.std_property_info).name = (*(&scope_property_info)).value.str.val", "(executor_globals.std_property_info).name = (*(&silent)).value.str.val", "(executor_globals.std_property_info).name = (*(member)).value.str.val"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.7327098209028957, -9.9927756809028949, -10.354627191902894, -9.0827302009028941, -10.053176810902894, -9.4302495819028955, -9.3748054109028942, -9.8853180909028957, -10.740842010902895, -10.643206190902895, -10.018424670902895, -10.776312770902894, -10.545818760902895, -10.251467960902895, -10.776312770902894, -9.4659196309028957, -9.4935798609028943, -10.251467960902895, -10.776312770902894, -10.776312770902894, -10.487684670902894, -10.018424670902895, -10.018424670902895, -10.018424670902895, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.018424670902895, -10.018424670902895, -10.018424670902895, -10.776312770902894, -10.487684670902894, -10.018424670902895, -10.018424670902895, -10.776312770902894, -10.018424670902895, -10.776312770902894, -10.776312770902894, -10.018424670902895, -10.776312770902894, -10.018424670902895, -10.018424670902895, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.018424670902895, -10.776312770902894, -10.487684670902894, -10.018424670902895, -10.018424670902895, -10.018424670902895, -10.018424670902895, -10.487684670902894, -9.6964136409028949, -10.487684670902894, -10.776312770902894, -10.776312770902894, -10.487684670902894, -10.487684670902894, -10.487684670902894, -10.776312770902894, -10.487684670902894, -10.018424670902895, -10.018424670902895, -10.018424670902895, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.018424670902895, -10.018424670902895, -10.018424670902895, -10.776312770902894, -10.487684670902894, -10.018424670902895, -10.018424670902895, -10.776312770902894, -10.018424670902895, -10.776312770902894, -10.776312770902894, -10.018424670902895, -10.776312770902894, -10.018424670902895, -10.018424670902895, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.776312770902894, -10.018424670902895, -10.776312770902894, -10.487684670902894, -10.018424670902895, -10.018424670902895, -10.487684670902894, -9.6964136409028949, -10.018424670902895, -10.018424670902895, -10.487684670902894, -9.6964136409028949, -10.776312770902894, -10.487684670902894, -10.776312770902894, -10.776312770902894, -10.487684670902894, -10.487684670902894, -10.487684670902894, -10.776312770902894]
								}, {
									"case":	2,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	3,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	4,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	5,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	6,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	7,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	8,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	9,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	10,
									"scores":	[-8.8414835909028948]
								}, {
									"case":	11,
									"scores":	[-8.8414835909028948]
								}]
						}]
				}, {
					"line":	312,
					"switches":	[{
							"switch":	22,
							"types":	[[], [], [], [], [424], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [], [], [], [403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], [312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [], [], [], [], [], []],
							"begin_line":	313,
							"begin_column":	1,
							"end_line":	313,
							"end_column":	1,
							"patch_codes":	["memset(&(*member), 0, sizeof (*(&(*member))))", "memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&(executor_globals.std_property_info), 0, sizeof (*(&(executor_globals.std_property_info))))", "memset(&(executor_globals.std_property_info).ce, 0, sizeof (*(&(executor_globals.std_property_info).ce)))", "memset(&(executor_globals.std_property_info).doc_comment, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment)))", "memset(&(executor_globals.std_property_info).doc_comment_len, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment_len)))", "memset(&(executor_globals.std_property_info).flags, 0, sizeof (*(&(executor_globals.std_property_info).flags)))", "memset(&(executor_globals.std_property_info).h, 0, sizeof (*(&(executor_globals.std_property_info).h)))", "memset(&(executor_globals.std_property_info).name, 0, sizeof (*(&(executor_globals.std_property_info).name)))", "memset(&(executor_globals.std_property_info).name_length, 0, sizeof (*(&(executor_globals.std_property_info).name_length)))", "memset(&(executor_globals.std_property_info).offset, 0, sizeof (*(&(executor_globals.std_property_info).offset)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset((executor_globals.std_property_info).ce, 0, sizeof (*((executor_globals.std_property_info).ce)))", "memset((executor_globals.std_property_info).doc_comment, 0, sizeof (*((executor_globals.std_property_info).doc_comment)))", "memset((executor_globals.std_property_info).name, 0, sizeof (*((executor_globals.std_property_info).name)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L313\", 119, &(member), sizeof (member), &((*member).value.str.len), sizeof ((*member).value.str.len), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &(h), sizeof (h), &((*member).value.str.val), sizeof ((*member).value.str.val), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(ce), sizeof (ce), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(property_info), sizeof (property_info), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	2,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	3,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	4,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	5,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	6,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	7,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	8,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	9,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	10,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	11,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	12,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	13,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	14,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	15,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	16,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	17,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	18,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	19,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	20,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	21,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	22,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	23,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	24,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	25,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	26,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	27,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	28,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	29,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	30,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	31,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	32,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	33,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	34,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	35,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	36,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	37,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	38,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	39,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	40,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	41,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	42,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	43,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	44,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	45,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	46,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	47,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	48,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	49,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	50,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	51,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	52,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	53,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	54,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	55,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	56,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	57,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	58,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	59,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	60,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	61,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	62,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	63,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	64,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	65,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	66,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	67,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	68,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	69,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	70,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	71,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	72,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	73,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	74,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	75,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	76,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	77,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	78,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	79,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	80,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	81,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	82,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	83,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	84,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	85,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	86,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	87,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	88,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	89,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	90,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	91,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	92,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	93,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	94,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	95,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	96,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	97,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	98,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	99,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	100,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	101,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	102,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	103,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	104,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	105,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	106,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	107,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	108,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	109,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	110,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	111,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	112,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	113,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	114,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	115,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	116,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	117,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	118,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	119,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	120,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	121,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	122,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	123,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	124,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	125,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	126,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	127,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	128,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	129,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	130,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	131,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	132,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	133,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	134,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	135,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	136,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	137,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	138,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	139,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	140,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	141,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	142,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	143,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	144,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	145,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	146,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	147,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	148,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	149,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	150,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	151,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	152,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	153,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	154,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	155,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	156,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	157,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	158,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	159,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	160,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	161,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	162,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	163,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	164,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	165,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	166,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	167,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	168,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	169,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	170,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	171,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	172,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	173,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	174,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	175,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	176,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	177,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	178,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	179,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	180,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	181,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	182,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	183,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	184,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	185,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	186,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	187,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	188,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	189,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	190,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	191,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	192,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	193,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	194,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	195,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	196,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	197,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	198,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	199,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	200,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	201,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	202,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	203,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	204,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	205,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	206,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	207,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	208,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	209,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	210,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	211,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	212,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	213,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	214,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	215,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	216,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	217,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	218,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	219,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	220,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	221,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	222,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	223,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	224,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	225,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	226,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	227,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	228,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	229,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	230,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	231,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	232,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	233,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	234,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	235,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	236,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	237,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	238,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	239,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	240,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	241,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	242,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	243,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	244,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	245,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	246,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	247,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	248,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	249,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	250,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	251,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	252,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	253,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	254,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	255,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	256,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	257,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	258,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	259,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	260,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	261,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	262,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	263,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	264,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	265,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	266,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	267,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	268,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	269,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	270,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	271,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	272,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	273,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	274,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	275,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	276,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	277,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	278,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	279,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	280,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	281,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	282,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	283,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	284,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	285,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	286,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	287,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	288,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	289,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	290,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	291,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	292,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	293,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	294,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	295,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	296,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	297,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	298,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	299,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	300,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	301,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	302,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	303,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	304,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	305,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	306,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	307,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	308,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	309,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	310,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	311,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	312,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	313,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	314,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	315,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	316,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	317,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	318,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	319,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	320,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	321,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	322,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	323,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	324,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	325,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	326,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	327,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	328,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	329,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	330,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	331,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	332,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	333,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	334,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	335,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	336,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	337,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	338,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	339,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	340,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	341,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	342,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	343,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	344,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	345,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	346,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	347,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	348,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	349,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	350,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	351,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	352,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	353,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	354,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	355,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	356,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	357,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	358,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	359,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	360,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	361,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	362,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	363,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	364,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	365,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	366,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	367,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	368,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	369,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	370,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	371,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	372,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	373,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	374,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	375,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	376,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	377,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	378,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	379,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	380,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	381,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	382,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	383,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	384,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	385,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	386,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	387,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	388,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	389,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	390,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	391,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	392,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	393,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	394,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	395,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	396,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	397,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	398,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	399,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	400,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	401,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	402,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	403,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	404,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	405,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	406,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	407,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	408,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	409,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	410,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	411,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	412,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	413,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	414,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	415,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	416,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	417,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	418,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	419,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	420,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	421,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	422,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	423,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	424,
									"scores":	[-10.819027087385376, -9.974331853585376, -10.800773094585375, -10.834551679585374, -12.188548690585375, -10.597792490585375, -12.160336373585375, -11.375276167385376, -10.941076688585374, -12.406375287385375, -12.289714846585376, -11.623627593385375, -11.660727993385375, -12.437773767385375, -12.437773767385375, -10.913754079585374, -11.377588679585374, -11.623627593385375, -12.437773767385375, -12.437773767385375, -12.191734853585375, -12.191734853585375, -12.191734853585375, -12.402623970585374, -11.690799853585375, -12.402623970585374, -12.437773767385375, -12.437773767385375, -12.402623970585374, -12.402623970585374, -12.402623970585374, -12.437773767385375, -12.402623970585374, -12.191734853585375, -12.191734853585375, -12.191734853585375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.191734853585375, -12.191734853585375, -12.191734853585375, -12.437773767385375, -12.402623970585374, -12.191734853585375, -12.191734853585375, -12.437773767385375, -12.191734853585375, -12.437773767385375, -12.437773767385375, -12.191734853585375, -12.437773767385375, -12.191734853585375, -12.191734853585375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.191734853585375, -12.437773767385375, -12.402623970585374, -12.191734853585375, -12.191734853585375, -12.402623970585374, -11.690799853585375, -12.191734853585375, -12.191734853585375, -12.402623970585374, -11.690799853585375, -12.437773767385375, -12.402623970585374, -12.437773767385375, -12.437773767385375, -12.402623970585374, -12.402623970585374, -12.402623970585374, -12.437773767385375, -12.402623970585374, -12.191734853585375, -12.191734853585375, -12.191734853585375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.191734853585375, -12.191734853585375, -12.191734853585375, -12.437773767385375, -12.402623970585374, -12.191734853585375, -12.191734853585375, -12.437773767385375, -12.191734853585375, -12.437773767385375, -12.437773767385375, -12.191734853585375, -12.437773767385375, -12.191734853585375, -12.191734853585375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.437773767385375, -12.191734853585375, -12.437773767385375, -12.402623970585374, -12.191734853585375]
								}]
						}, {
							"switch":	23,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	313,
							"begin_column":	3,
							"end_line":	313,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L313\", 119, &(member), sizeof (member), &((*member).value.str.len), sizeof ((*member).value.str.len), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &(h), sizeof (h), &((*member).value.str.val), sizeof ((*member).value.str.val), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(ce), sizeof (ce), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(property_info), sizeof (property_info), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception)))\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n", "{\n}\n", "(executor_globals.std_property_info).name_length = (*(&ce)).value.str.len", "(executor_globals.std_property_info).name_length = (*(&denied_access)).value.str.len", "(executor_globals.std_property_info).name_length = (*(&h)).value.str.len", "(executor_globals.std_property_info).name_length = (*(&key)).value.str.len", "(executor_globals.std_property_info).name_length = (*(&member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(&property_info)).value.str.len", "(executor_globals.std_property_info).name_length = (*(&scope_property_info)).value.str.len", "(executor_globals.std_property_info).name_length = (*(&silent)).value.str.len", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.852059474085376, -9.1813019435853747, -9.5431534545853758, -8.8596937135853757, -10.096918963585376, -9.586805103585375, -9.7320579045853748, -10.720639303585376, -10.032974103585374, -10.623003483585375, -9.9947407075853754, -10.231265253585375, -10.525616053585376, -10.756110063585375, -10.756110063585375, -9.4457169235853762, -9.4733771535853748, -10.231265253585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -9.998221963585376, -10.756110063585375, -10.467481963585374, -9.998221963585376, -9.998221963585376, -9.998221963585376, -9.998221963585376, -10.467481963585374, -9.6762109335853754, -10.467481963585374, -10.756110063585375, -10.756110063585375, -10.467481963585374, -10.467481963585374, -10.467481963585374, -10.756110063585375, -10.467481963585374, -9.998221963585376, -9.998221963585376, -9.998221963585376, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -9.998221963585376, -9.998221963585376, -9.998221963585376, -10.756110063585375, -10.467481963585374, -9.998221963585376, -9.998221963585376, -10.756110063585375, -9.998221963585376, -10.756110063585375, -10.756110063585375, -9.998221963585376, -10.756110063585375, -9.998221963585376, -9.998221963585376, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -9.998221963585376, -10.756110063585375, -10.467481963585374, -9.998221963585376, -9.998221963585376, -10.467481963585374, -9.6762109335853754, -9.998221963585376, -9.998221963585376, -10.467481963585374, -9.6762109335853754, -10.756110063585375, -10.467481963585374, -10.756110063585375, -10.756110063585375, -10.467481963585374, -10.467481963585374, -10.467481963585374, -10.756110063585375, -10.467481963585374, -9.998221963585376, -9.998221963585376, -9.998221963585376, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -9.998221963585376, -9.998221963585376, -9.998221963585376, -10.756110063585375, -10.467481963585374, -9.998221963585376, -9.998221963585376, -10.756110063585375, -9.998221963585376, -10.756110063585375, -10.756110063585375, -9.998221963585376, -10.756110063585375, -9.998221963585376, -9.998221963585376, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375, -10.756110063585375]
								}, {
									"case":	2,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	3,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	4,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	5,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	6,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	7,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	8,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	9,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	10,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	11,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	12,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	13,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	14,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	15,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	16,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	17,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	18,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	19,
									"scores":	[-8.8212808835853753]
								}, {
									"case":	20,
									"scores":	[-8.8212808835853753]
								}]
						}]
				}, {
					"line":	313,
					"switches":	[{
							"switch":	24,
							"types":	[[], [], [], [], [423], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], [], [], [], [402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], [], [], [], [], [], []],
							"begin_line":	314,
							"begin_column":	1,
							"end_line":	314,
							"end_column":	1,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&(executor_globals.std_property_info), 0, sizeof (*(&(executor_globals.std_property_info))))", "memset(&(executor_globals.std_property_info).ce, 0, sizeof (*(&(executor_globals.std_property_info).ce)))", "memset(&(executor_globals.std_property_info).doc_comment, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment)))", "memset(&(executor_globals.std_property_info).doc_comment_len, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment_len)))", "memset(&(executor_globals.std_property_info).flags, 0, sizeof (*(&(executor_globals.std_property_info).flags)))", "memset(&(executor_globals.std_property_info).h, 0, sizeof (*(&(executor_globals.std_property_info).h)))", "memset(&(executor_globals.std_property_info).name, 0, sizeof (*(&(executor_globals.std_property_info).name)))", "memset(&(executor_globals.std_property_info).name_length, 0, sizeof (*(&(executor_globals.std_property_info).name_length)))", "memset(&(executor_globals.std_property_info).offset, 0, sizeof (*(&(executor_globals.std_property_info).offset)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset((executor_globals.std_property_info).ce, 0, sizeof (*((executor_globals.std_property_info).ce)))", "memset((executor_globals.std_property_info).doc_comment, 0, sizeof (*((executor_globals.std_property_info).doc_comment)))", "memset((executor_globals.std_property_info).name, 0, sizeof (*((executor_globals.std_property_info).name)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L314\", 154, &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(ce), sizeof (ce), &(member), sizeof (member), &((*member).value.str.len), sizeof ((*member).value.str.len), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &((*member).value.str.val), sizeof ((*member).value.str.val), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(property_info), sizeof (property_info), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(key), sizeof (key), &(ce->name), sizeof (ce->name), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	2,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	3,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	4,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	5,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	6,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	7,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	8,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	9,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	10,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	11,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	12,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	13,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	14,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	15,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	16,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	17,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	18,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	19,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	20,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	21,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	22,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	23,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	24,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	25,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	26,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	27,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	28,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	29,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	30,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	31,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	32,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	33,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	34,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	35,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	36,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	37,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	38,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	39,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	40,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	41,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	42,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	43,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	44,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	45,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	46,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	47,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	48,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	49,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	50,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	51,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	52,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	53,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	54,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	55,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	56,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	57,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	58,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	59,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	60,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	61,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	62,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	63,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	64,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	65,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	66,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	67,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	68,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	69,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	70,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	71,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	72,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	73,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	74,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	75,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	76,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	77,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	78,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	79,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	80,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	81,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	82,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	83,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	84,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	85,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	86,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	87,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	88,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	89,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	90,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	91,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	92,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	93,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	94,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	95,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	96,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	97,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	98,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	99,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	100,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	101,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	102,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	103,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	104,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	105,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	106,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	107,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	108,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	109,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	110,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	111,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	112,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	113,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	114,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	115,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	116,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	117,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	118,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	119,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	120,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	121,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	122,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	123,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	124,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	125,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	126,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	127,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	128,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	129,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	130,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	131,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	132,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	133,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	134,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	135,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	136,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	137,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	138,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	139,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	140,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	141,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	142,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	143,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	144,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	145,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	146,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	147,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	148,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	149,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	150,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	151,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	152,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	153,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	154,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	155,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	156,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	157,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	158,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	159,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	160,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	161,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	162,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	163,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	164,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	165,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	166,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	167,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	168,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	169,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	170,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	171,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	172,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	173,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	174,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	175,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	176,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	177,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	178,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	179,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	180,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	181,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	182,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	183,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	184,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	185,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	186,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	187,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	188,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	189,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	190,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	191,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	192,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	193,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	194,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	195,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	196,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	197,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	198,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	199,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	200,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	201,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	202,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	203,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	204,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	205,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	206,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	207,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	208,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	209,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	210,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	211,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	212,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	213,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	214,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	215,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	216,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	217,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	218,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	219,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	220,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	221,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	222,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	223,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	224,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	225,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	226,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	227,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	228,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	229,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	230,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	231,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	232,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	233,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	234,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	235,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	236,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	237,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	238,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	239,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	240,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	241,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	242,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	243,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	244,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	245,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	246,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	247,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	248,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	249,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	250,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	251,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	252,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	253,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	254,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	255,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	256,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	257,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	258,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	259,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	260,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	261,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	262,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	263,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	264,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	265,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	266,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	267,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	268,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	269,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	270,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	271,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	272,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	273,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	274,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	275,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	276,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	277,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	278,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	279,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	280,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	281,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	282,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	283,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	284,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	285,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	286,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	287,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	288,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	289,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	290,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	291,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	292,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	293,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	294,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	295,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	296,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	297,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	298,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	299,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	300,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	301,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	302,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	303,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	304,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	305,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	306,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	307,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	308,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	309,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	310,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	311,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	312,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	313,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	314,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	315,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	316,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	317,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	318,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	319,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	320,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	321,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	322,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	323,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	324,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	325,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	326,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	327,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	328,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	329,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	330,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	331,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	332,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	333,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	334,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	335,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	336,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	337,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	338,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	339,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	340,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	341,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	342,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	343,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	344,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	345,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	346,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	347,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	348,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	349,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	350,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	351,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	352,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	353,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	354,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	355,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	356,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	357,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	358,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	359,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	360,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	361,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	362,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	363,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	364,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	365,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	366,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	367,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	368,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	369,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	370,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	371,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	372,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	373,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	374,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	375,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	376,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	377,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	378,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	379,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	380,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	381,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	382,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	383,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	384,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	385,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	386,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	387,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	388,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	389,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	390,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	391,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	392,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	393,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	394,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	395,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	396,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	397,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	398,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	399,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	400,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	401,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	402,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	403,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	404,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	405,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	406,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	407,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	408,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	409,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	410,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	411,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	412,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	413,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	414,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	415,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	416,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	417,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	418,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	419,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	420,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	421,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	422,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	423,
									"scores":	[-9.6409179722678555, -11.281505387267856, -11.355073460067857, -11.993088580067855, -11.456521866267856, -9.8657656662678548, -12.386172580067855, -12.168345983267855, -10.577589783267856, -12.269512139267857, -11.572026406067856, -10.920873981267855, -11.640525286067856, -12.417571060067855, -12.417571060067855, -12.382421263267855, -10.893551372267854, -11.357385972267855, -11.603424886067856, -12.417571060067855, -12.417571060067855, -12.171532146267856, -11.670597146267855, -12.417571060067855, -12.171532146267856, -12.171532146267856, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.171532146267856, -12.171532146267856, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.382421263267855, -12.171532146267856, -12.382421263267855, -12.171532146267856, -12.382421263267855, -12.382421263267855, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.382421263267855, -11.670597146267855, -12.382421263267855, -12.417571060067855, -12.417571060067855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.417571060067855, -12.382421263267855, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.417571060067855, -12.382421263267855, -12.171532146267856, -12.171532146267856, -12.417571060067855, -12.171532146267856, -12.417571060067855, -12.417571060067855, -12.171532146267856, -12.417571060067855, -12.171532146267856, -12.171532146267856, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.171532146267856, -12.417571060067855, -12.382421263267855, -12.171532146267856, -12.171532146267856, -12.382421263267855, -11.670597146267855, -12.171532146267856, -12.171532146267856, -12.382421263267855, -11.670597146267855, -12.417571060067855, -12.382421263267855, -12.417571060067855, -12.417571060067855, -12.382421263267855, -12.382421263267855, -12.382421263267855, -12.417571060067855, -12.382421263267855, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.171532146267856, -12.171532146267856, -12.171532146267856, -12.417571060067855, -12.382421263267855, -12.171532146267856, -12.171532146267856, -12.417571060067855, -12.171532146267856, -12.417571060067855, -12.417571060067855, -12.171532146267856, -12.417571060067855, -12.171532146267856, -12.171532146267856, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.417571060067855, -12.171532146267856, -12.417571060067855, -12.382421263267855, -12.171532146267856]
								}]
						}, {
							"switch":	25,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	314,
							"begin_column":	3,
							"end_line":	314,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L314\", 154, &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(ce), sizeof (ce), &(member), sizeof (member), &((*member).value.str.len), sizeof ((*member).value.str.len), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &((*member).value.str.val), sizeof ((*member).value.str.val), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(property_info), sizeof (property_info), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(ce->name), sizeof (ce->name), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception)))\n    (executor_globals.std_property_info).h = h;\n", "{\n}\n", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0 * denied_access)", "(executor_globals.std_property_info).h = (0 * h)", "(executor_globals.std_property_info).h = (0 * silent)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (ce != 0)", "(executor_globals.std_property_info).h = (ce == 0)", "(executor_globals.std_property_info).h = (denied_access != 0)", "(executor_globals.std_property_info).h = (denied_access != h)", "(executor_globals.std_property_info).h = (denied_access * h)", "(executor_globals.std_property_info).h = (denied_access * silent)", "(executor_globals.std_property_info).h = (denied_access + 0)", "(executor_globals.std_property_info).h = (denied_access + h)", "(executor_globals.std_property_info).h = (denied_access - 0)", "(executor_globals.std_property_info).h = (denied_access - h)", "(executor_globals.std_property_info).h = (denied_access == 0)", "(executor_globals.std_property_info).h = (denied_access == h)", "(executor_globals.std_property_info).h = (h != 0)", "(executor_globals.std_property_info).h = (h * denied_access)", "(executor_globals.std_property_info).h = (h * silent)", "(executor_globals.std_property_info).h = (h + 0)", "(executor_globals.std_property_info).h = (h - 0)", "(executor_globals.std_property_info).h = (h == 0)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).h = (key != 0)", "(executor_globals.std_property_info).h = (key == 0)", "(executor_globals.std_property_info).h = (member != 0)", "(executor_globals.std_property_info).h = (member == 0)", "(executor_globals.std_property_info).h = (property_info != 0)", "(executor_globals.std_property_info).h = (property_info != scope_property_info)", "(executor_globals.std_property_info).h = (property_info == 0)", "(executor_globals.std_property_info).h = (property_info == scope_property_info)", "(executor_globals.std_property_info).h = (scope_property_info != 0)", "(executor_globals.std_property_info).h = (scope_property_info == 0)", "(executor_globals.std_property_info).h = (silent != 0)", "(executor_globals.std_property_info).h = (silent != denied_access)", "(executor_globals.std_property_info).h = (silent != h)", "(executor_globals.std_property_info).h = (silent * denied_access)", "(executor_globals.std_property_info).h = (silent * h)", "(executor_globals.std_property_info).h = (silent + 0)", "(executor_globals.std_property_info).h = (silent + denied_access)", "(executor_globals.std_property_info).h = (silent + h)", "(executor_globals.std_property_info).h = (silent - 0)", "(executor_globals.std_property_info).h = (silent - denied_access)", "(executor_globals.std_property_info).h = (silent - h)", "(executor_globals.std_property_info).h = (silent == 0)", "(executor_globals.std_property_info).h = (silent == denied_access)", "(executor_globals.std_property_info).h = (silent == h)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.9582654562678563, -9.844961777267855, -10.205527606267855, -10.525151756767857, -9.2854452262678553, -8.7753313662678565, -10.469743297267856, -10.076716256267856, -9.5666023962678555, -9.9745380002678559, -10.077955966267856, -10.012771396267855, -10.505413346267856, -10.735907356267855, -10.735907356267855, -10.447279256267855, -9.4255142162678567, -9.4531744462678553, -10.211062546267856, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -9.9780192562678565, -10.735907356267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -9.6560082262678559, -10.735907356267855, -9.9780192562678565, -9.9780192562678565, -10.447279256267855, -10.447279256267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -10.447279256267855, -9.9780192562678565, -10.447279256267855, -9.9780192562678565, -10.447279256267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -10.447279256267855, -9.6560082262678559, -10.447279256267855, -10.735907356267855, -10.735907356267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.735907356267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -10.735907356267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -10.735907356267855, -9.9780192562678565, -10.735907356267855, -10.735907356267855, -9.9780192562678565, -10.735907356267855, -9.9780192562678565, -9.9780192562678565, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -9.9780192562678565, -10.735907356267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -10.447279256267855, -9.6560082262678559, -9.9780192562678565, -9.9780192562678565, -10.447279256267855, -9.6560082262678559, -10.735907356267855, -10.447279256267855, -10.735907356267855, -10.735907356267855, -10.447279256267855, -10.447279256267855, -10.447279256267855, -10.735907356267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -9.9780192562678565, -9.9780192562678565, -9.9780192562678565, -10.735907356267855, -10.447279256267855, -9.9780192562678565, -9.9780192562678565, -10.735907356267855, -9.9780192562678565, -10.735907356267855, -10.735907356267855, -9.9780192562678565, -10.735907356267855, -9.9780192562678565, -9.9780192562678565, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855, -10.735907356267855]
								}, {
									"case":	2,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	3,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	4,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	5,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	6,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	7,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	8,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	9,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	10,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	11,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	12,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	13,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	14,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	15,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	16,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	17,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	18,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	19,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	20,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	21,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	22,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	23,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	24,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	25,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	26,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	27,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	28,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	29,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	30,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	31,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	32,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	33,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	34,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	35,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	36,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	37,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	38,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	39,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	40,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	41,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	42,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	43,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	44,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	45,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	46,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	47,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	48,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	49,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	50,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	51,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	52,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	53,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	54,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	55,
									"scores":	[-8.8010781762678558]
								}, {
									"case":	56,
									"scores":	[-8.8010781762678558]
								}]
						}]
				}, {
					"line":	314,
					"switches":	[{
							"switch":	26,
							"types":	[[], [], [], [], [424], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], [], [], [], [403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], [312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], [], [], [], [], [], []],
							"begin_line":	315,
							"begin_column":	1,
							"end_line":	315,
							"end_column":	1,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&(executor_globals.std_property_info), 0, sizeof (*(&(executor_globals.std_property_info))))", "memset(&(executor_globals.std_property_info).ce, 0, sizeof (*(&(executor_globals.std_property_info).ce)))", "memset(&(executor_globals.std_property_info).doc_comment, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment)))", "memset(&(executor_globals.std_property_info).doc_comment_len, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment_len)))", "memset(&(executor_globals.std_property_info).flags, 0, sizeof (*(&(executor_globals.std_property_info).flags)))", "memset(&(executor_globals.std_property_info).h, 0, sizeof (*(&(executor_globals.std_property_info).h)))", "memset(&(executor_globals.std_property_info).name, 0, sizeof (*(&(executor_globals.std_property_info).name)))", "memset(&(executor_globals.std_property_info).name_length, 0, sizeof (*(&(executor_globals.std_property_info).name_length)))", "memset(&(executor_globals.std_property_info).offset, 0, sizeof (*(&(executor_globals.std_property_info).offset)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset((executor_globals.std_property_info).ce, 0, sizeof (*((executor_globals.std_property_info).ce)))", "memset((executor_globals.std_property_info).doc_comment, 0, sizeof (*((executor_globals.std_property_info).doc_comment)))", "memset((executor_globals.std_property_info).name, 0, sizeof (*((executor_globals.std_property_info).name)))", "memset(ce, 0, sizeof (*(ce)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L315\", 149, &(ce), sizeof (ce), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(member), sizeof (member), &(property_info), sizeof (property_info), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(ce->name), sizeof (ce->name), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.78087546895034]
								}, {
									"case":	2,
									"scores":	[-8.78087546895034]
								}, {
									"case":	3,
									"scores":	[-8.78087546895034]
								}, {
									"case":	4,
									"scores":	[-8.78087546895034]
								}, {
									"case":	5,
									"scores":	[-8.78087546895034]
								}, {
									"case":	6,
									"scores":	[-8.78087546895034]
								}, {
									"case":	7,
									"scores":	[-8.78087546895034]
								}, {
									"case":	8,
									"scores":	[-8.78087546895034]
								}, {
									"case":	9,
									"scores":	[-8.78087546895034]
								}, {
									"case":	10,
									"scores":	[-8.78087546895034]
								}, {
									"case":	11,
									"scores":	[-8.78087546895034]
								}, {
									"case":	12,
									"scores":	[-8.78087546895034]
								}, {
									"case":	13,
									"scores":	[-8.78087546895034]
								}, {
									"case":	14,
									"scores":	[-8.78087546895034]
								}, {
									"case":	15,
									"scores":	[-8.78087546895034]
								}, {
									"case":	16,
									"scores":	[-8.78087546895034]
								}, {
									"case":	17,
									"scores":	[-8.78087546895034]
								}, {
									"case":	18,
									"scores":	[-8.78087546895034]
								}, {
									"case":	19,
									"scores":	[-8.78087546895034]
								}, {
									"case":	20,
									"scores":	[-8.78087546895034]
								}, {
									"case":	21,
									"scores":	[-8.78087546895034]
								}, {
									"case":	22,
									"scores":	[-8.78087546895034]
								}, {
									"case":	23,
									"scores":	[-8.78087546895034]
								}, {
									"case":	24,
									"scores":	[-8.78087546895034]
								}, {
									"case":	25,
									"scores":	[-8.78087546895034]
								}, {
									"case":	26,
									"scores":	[-8.78087546895034]
								}, {
									"case":	27,
									"scores":	[-8.78087546895034]
								}, {
									"case":	28,
									"scores":	[-8.78087546895034]
								}, {
									"case":	29,
									"scores":	[-8.78087546895034]
								}, {
									"case":	30,
									"scores":	[-8.78087546895034]
								}, {
									"case":	31,
									"scores":	[-8.78087546895034]
								}, {
									"case":	32,
									"scores":	[-8.78087546895034]
								}, {
									"case":	33,
									"scores":	[-8.78087546895034]
								}, {
									"case":	34,
									"scores":	[-8.78087546895034]
								}, {
									"case":	35,
									"scores":	[-8.78087546895034]
								}, {
									"case":	36,
									"scores":	[-8.78087546895034]
								}, {
									"case":	37,
									"scores":	[-8.78087546895034]
								}, {
									"case":	38,
									"scores":	[-8.78087546895034]
								}, {
									"case":	39,
									"scores":	[-8.78087546895034]
								}, {
									"case":	40,
									"scores":	[-8.78087546895034]
								}, {
									"case":	41,
									"scores":	[-8.78087546895034]
								}, {
									"case":	42,
									"scores":	[-8.78087546895034]
								}, {
									"case":	43,
									"scores":	[-8.78087546895034]
								}, {
									"case":	44,
									"scores":	[-8.78087546895034]
								}, {
									"case":	45,
									"scores":	[-8.78087546895034]
								}, {
									"case":	46,
									"scores":	[-8.78087546895034]
								}, {
									"case":	47,
									"scores":	[-8.78087546895034]
								}, {
									"case":	48,
									"scores":	[-8.78087546895034]
								}, {
									"case":	49,
									"scores":	[-8.78087546895034]
								}, {
									"case":	50,
									"scores":	[-8.78087546895034]
								}, {
									"case":	51,
									"scores":	[-8.78087546895034]
								}, {
									"case":	52,
									"scores":	[-8.78087546895034]
								}, {
									"case":	53,
									"scores":	[-8.78087546895034]
								}, {
									"case":	54,
									"scores":	[-8.78087546895034]
								}, {
									"case":	55,
									"scores":	[-8.78087546895034]
								}, {
									"case":	56,
									"scores":	[-8.78087546895034]
								}, {
									"case":	57,
									"scores":	[-8.78087546895034]
								}, {
									"case":	58,
									"scores":	[-8.78087546895034]
								}, {
									"case":	59,
									"scores":	[-8.78087546895034]
								}, {
									"case":	60,
									"scores":	[-8.78087546895034]
								}, {
									"case":	61,
									"scores":	[-8.78087546895034]
								}, {
									"case":	62,
									"scores":	[-8.78087546895034]
								}, {
									"case":	63,
									"scores":	[-8.78087546895034]
								}, {
									"case":	64,
									"scores":	[-8.78087546895034]
								}, {
									"case":	65,
									"scores":	[-8.78087546895034]
								}, {
									"case":	66,
									"scores":	[-8.78087546895034]
								}, {
									"case":	67,
									"scores":	[-8.78087546895034]
								}, {
									"case":	68,
									"scores":	[-8.78087546895034]
								}, {
									"case":	69,
									"scores":	[-8.78087546895034]
								}, {
									"case":	70,
									"scores":	[-8.78087546895034]
								}, {
									"case":	71,
									"scores":	[-8.78087546895034]
								}, {
									"case":	72,
									"scores":	[-8.78087546895034]
								}, {
									"case":	73,
									"scores":	[-8.78087546895034]
								}, {
									"case":	74,
									"scores":	[-8.78087546895034]
								}, {
									"case":	75,
									"scores":	[-8.78087546895034]
								}, {
									"case":	76,
									"scores":	[-8.78087546895034]
								}, {
									"case":	77,
									"scores":	[-8.78087546895034]
								}, {
									"case":	78,
									"scores":	[-8.78087546895034]
								}, {
									"case":	79,
									"scores":	[-8.78087546895034]
								}, {
									"case":	80,
									"scores":	[-8.78087546895034]
								}, {
									"case":	81,
									"scores":	[-8.78087546895034]
								}, {
									"case":	82,
									"scores":	[-8.78087546895034]
								}, {
									"case":	83,
									"scores":	[-8.78087546895034]
								}, {
									"case":	84,
									"scores":	[-8.78087546895034]
								}, {
									"case":	85,
									"scores":	[-8.78087546895034]
								}, {
									"case":	86,
									"scores":	[-8.78087546895034]
								}, {
									"case":	87,
									"scores":	[-8.78087546895034]
								}, {
									"case":	88,
									"scores":	[-8.78087546895034]
								}, {
									"case":	89,
									"scores":	[-8.78087546895034]
								}, {
									"case":	90,
									"scores":	[-8.78087546895034]
								}, {
									"case":	91,
									"scores":	[-8.78087546895034]
								}, {
									"case":	92,
									"scores":	[-8.78087546895034]
								}, {
									"case":	93,
									"scores":	[-8.78087546895034]
								}, {
									"case":	94,
									"scores":	[-8.78087546895034]
								}, {
									"case":	95,
									"scores":	[-8.78087546895034]
								}, {
									"case":	96,
									"scores":	[-8.78087546895034]
								}, {
									"case":	97,
									"scores":	[-8.78087546895034]
								}, {
									"case":	98,
									"scores":	[-8.78087546895034]
								}, {
									"case":	99,
									"scores":	[-8.78087546895034]
								}, {
									"case":	100,
									"scores":	[-8.78087546895034]
								}, {
									"case":	101,
									"scores":	[-8.78087546895034]
								}, {
									"case":	102,
									"scores":	[-8.78087546895034]
								}, {
									"case":	103,
									"scores":	[-8.78087546895034]
								}, {
									"case":	104,
									"scores":	[-8.78087546895034]
								}, {
									"case":	105,
									"scores":	[-8.78087546895034]
								}, {
									"case":	106,
									"scores":	[-8.78087546895034]
								}, {
									"case":	107,
									"scores":	[-8.78087546895034]
								}, {
									"case":	108,
									"scores":	[-8.78087546895034]
								}, {
									"case":	109,
									"scores":	[-8.78087546895034]
								}, {
									"case":	110,
									"scores":	[-8.78087546895034]
								}, {
									"case":	111,
									"scores":	[-8.78087546895034]
								}, {
									"case":	112,
									"scores":	[-8.78087546895034]
								}, {
									"case":	113,
									"scores":	[-8.78087546895034]
								}, {
									"case":	114,
									"scores":	[-8.78087546895034]
								}, {
									"case":	115,
									"scores":	[-8.78087546895034]
								}, {
									"case":	116,
									"scores":	[-8.78087546895034]
								}, {
									"case":	117,
									"scores":	[-8.78087546895034]
								}, {
									"case":	118,
									"scores":	[-8.78087546895034]
								}, {
									"case":	119,
									"scores":	[-8.78087546895034]
								}, {
									"case":	120,
									"scores":	[-8.78087546895034]
								}, {
									"case":	121,
									"scores":	[-8.78087546895034]
								}, {
									"case":	122,
									"scores":	[-8.78087546895034]
								}, {
									"case":	123,
									"scores":	[-8.78087546895034]
								}, {
									"case":	124,
									"scores":	[-8.78087546895034]
								}, {
									"case":	125,
									"scores":	[-8.78087546895034]
								}, {
									"case":	126,
									"scores":	[-8.78087546895034]
								}, {
									"case":	127,
									"scores":	[-8.78087546895034]
								}, {
									"case":	128,
									"scores":	[-8.78087546895034]
								}, {
									"case":	129,
									"scores":	[-8.78087546895034]
								}, {
									"case":	130,
									"scores":	[-8.78087546895034]
								}, {
									"case":	131,
									"scores":	[-8.78087546895034]
								}, {
									"case":	132,
									"scores":	[-8.78087546895034]
								}, {
									"case":	133,
									"scores":	[-8.78087546895034]
								}, {
									"case":	134,
									"scores":	[-8.78087546895034]
								}, {
									"case":	135,
									"scores":	[-8.78087546895034]
								}, {
									"case":	136,
									"scores":	[-8.78087546895034]
								}, {
									"case":	137,
									"scores":	[-8.78087546895034]
								}, {
									"case":	138,
									"scores":	[-8.78087546895034]
								}, {
									"case":	139,
									"scores":	[-8.78087546895034]
								}, {
									"case":	140,
									"scores":	[-8.78087546895034]
								}, {
									"case":	141,
									"scores":	[-8.78087546895034]
								}, {
									"case":	142,
									"scores":	[-8.78087546895034]
								}, {
									"case":	143,
									"scores":	[-8.78087546895034]
								}, {
									"case":	144,
									"scores":	[-8.78087546895034]
								}, {
									"case":	145,
									"scores":	[-8.78087546895034]
								}, {
									"case":	146,
									"scores":	[-8.78087546895034]
								}, {
									"case":	147,
									"scores":	[-8.78087546895034]
								}, {
									"case":	148,
									"scores":	[-8.78087546895034]
								}, {
									"case":	149,
									"scores":	[-8.78087546895034]
								}, {
									"case":	150,
									"scores":	[-8.78087546895034]
								}, {
									"case":	151,
									"scores":	[-8.78087546895034]
								}, {
									"case":	152,
									"scores":	[-8.78087546895034]
								}, {
									"case":	153,
									"scores":	[-8.78087546895034]
								}, {
									"case":	154,
									"scores":	[-8.78087546895034]
								}, {
									"case":	155,
									"scores":	[-8.78087546895034]
								}, {
									"case":	156,
									"scores":	[-8.78087546895034]
								}, {
									"case":	157,
									"scores":	[-8.78087546895034]
								}, {
									"case":	158,
									"scores":	[-8.78087546895034]
								}, {
									"case":	159,
									"scores":	[-8.78087546895034]
								}, {
									"case":	160,
									"scores":	[-8.78087546895034]
								}, {
									"case":	161,
									"scores":	[-8.78087546895034]
								}, {
									"case":	162,
									"scores":	[-8.78087546895034]
								}, {
									"case":	163,
									"scores":	[-8.78087546895034]
								}, {
									"case":	164,
									"scores":	[-8.78087546895034]
								}, {
									"case":	165,
									"scores":	[-8.78087546895034]
								}, {
									"case":	166,
									"scores":	[-8.78087546895034]
								}, {
									"case":	167,
									"scores":	[-8.78087546895034]
								}, {
									"case":	168,
									"scores":	[-8.78087546895034]
								}, {
									"case":	169,
									"scores":	[-8.78087546895034]
								}, {
									"case":	170,
									"scores":	[-8.78087546895034]
								}, {
									"case":	171,
									"scores":	[-8.78087546895034]
								}, {
									"case":	172,
									"scores":	[-8.78087546895034]
								}, {
									"case":	173,
									"scores":	[-8.78087546895034]
								}, {
									"case":	174,
									"scores":	[-8.78087546895034]
								}, {
									"case":	175,
									"scores":	[-8.78087546895034]
								}, {
									"case":	176,
									"scores":	[-8.78087546895034]
								}, {
									"case":	177,
									"scores":	[-8.78087546895034]
								}, {
									"case":	178,
									"scores":	[-8.78087546895034]
								}, {
									"case":	179,
									"scores":	[-8.78087546895034]
								}, {
									"case":	180,
									"scores":	[-8.78087546895034]
								}, {
									"case":	181,
									"scores":	[-8.78087546895034]
								}, {
									"case":	182,
									"scores":	[-8.78087546895034]
								}, {
									"case":	183,
									"scores":	[-8.78087546895034]
								}, {
									"case":	184,
									"scores":	[-8.78087546895034]
								}, {
									"case":	185,
									"scores":	[-8.78087546895034]
								}, {
									"case":	186,
									"scores":	[-8.78087546895034]
								}, {
									"case":	187,
									"scores":	[-8.78087546895034]
								}, {
									"case":	188,
									"scores":	[-8.78087546895034]
								}, {
									"case":	189,
									"scores":	[-8.78087546895034]
								}, {
									"case":	190,
									"scores":	[-8.78087546895034]
								}, {
									"case":	191,
									"scores":	[-8.78087546895034]
								}, {
									"case":	192,
									"scores":	[-8.78087546895034]
								}, {
									"case":	193,
									"scores":	[-8.78087546895034]
								}, {
									"case":	194,
									"scores":	[-8.78087546895034]
								}, {
									"case":	195,
									"scores":	[-8.78087546895034]
								}, {
									"case":	196,
									"scores":	[-8.78087546895034]
								}, {
									"case":	197,
									"scores":	[-8.78087546895034]
								}, {
									"case":	198,
									"scores":	[-8.78087546895034]
								}, {
									"case":	199,
									"scores":	[-8.78087546895034]
								}, {
									"case":	200,
									"scores":	[-8.78087546895034]
								}, {
									"case":	201,
									"scores":	[-8.78087546895034]
								}, {
									"case":	202,
									"scores":	[-8.78087546895034]
								}, {
									"case":	203,
									"scores":	[-8.78087546895034]
								}, {
									"case":	204,
									"scores":	[-8.78087546895034]
								}, {
									"case":	205,
									"scores":	[-8.78087546895034]
								}, {
									"case":	206,
									"scores":	[-8.78087546895034]
								}, {
									"case":	207,
									"scores":	[-8.78087546895034]
								}, {
									"case":	208,
									"scores":	[-8.78087546895034]
								}, {
									"case":	209,
									"scores":	[-8.78087546895034]
								}, {
									"case":	210,
									"scores":	[-8.78087546895034]
								}, {
									"case":	211,
									"scores":	[-8.78087546895034]
								}, {
									"case":	212,
									"scores":	[-8.78087546895034]
								}, {
									"case":	213,
									"scores":	[-8.78087546895034]
								}, {
									"case":	214,
									"scores":	[-8.78087546895034]
								}, {
									"case":	215,
									"scores":	[-8.78087546895034]
								}, {
									"case":	216,
									"scores":	[-8.78087546895034]
								}, {
									"case":	217,
									"scores":	[-8.78087546895034]
								}, {
									"case":	218,
									"scores":	[-8.78087546895034]
								}, {
									"case":	219,
									"scores":	[-8.78087546895034]
								}, {
									"case":	220,
									"scores":	[-8.78087546895034]
								}, {
									"case":	221,
									"scores":	[-8.78087546895034]
								}, {
									"case":	222,
									"scores":	[-8.78087546895034]
								}, {
									"case":	223,
									"scores":	[-8.78087546895034]
								}, {
									"case":	224,
									"scores":	[-8.78087546895034]
								}, {
									"case":	225,
									"scores":	[-8.78087546895034]
								}, {
									"case":	226,
									"scores":	[-8.78087546895034]
								}, {
									"case":	227,
									"scores":	[-8.78087546895034]
								}, {
									"case":	228,
									"scores":	[-8.78087546895034]
								}, {
									"case":	229,
									"scores":	[-8.78087546895034]
								}, {
									"case":	230,
									"scores":	[-8.78087546895034]
								}, {
									"case":	231,
									"scores":	[-8.78087546895034]
								}, {
									"case":	232,
									"scores":	[-8.78087546895034]
								}, {
									"case":	233,
									"scores":	[-8.78087546895034]
								}, {
									"case":	234,
									"scores":	[-8.78087546895034]
								}, {
									"case":	235,
									"scores":	[-8.78087546895034]
								}, {
									"case":	236,
									"scores":	[-8.78087546895034]
								}, {
									"case":	237,
									"scores":	[-8.78087546895034]
								}, {
									"case":	238,
									"scores":	[-8.78087546895034]
								}, {
									"case":	239,
									"scores":	[-8.78087546895034]
								}, {
									"case":	240,
									"scores":	[-8.78087546895034]
								}, {
									"case":	241,
									"scores":	[-8.78087546895034]
								}, {
									"case":	242,
									"scores":	[-8.78087546895034]
								}, {
									"case":	243,
									"scores":	[-8.78087546895034]
								}, {
									"case":	244,
									"scores":	[-8.78087546895034]
								}, {
									"case":	245,
									"scores":	[-8.78087546895034]
								}, {
									"case":	246,
									"scores":	[-8.78087546895034]
								}, {
									"case":	247,
									"scores":	[-8.78087546895034]
								}, {
									"case":	248,
									"scores":	[-8.78087546895034]
								}, {
									"case":	249,
									"scores":	[-8.78087546895034]
								}, {
									"case":	250,
									"scores":	[-8.78087546895034]
								}, {
									"case":	251,
									"scores":	[-8.78087546895034]
								}, {
									"case":	252,
									"scores":	[-8.78087546895034]
								}, {
									"case":	253,
									"scores":	[-8.78087546895034]
								}, {
									"case":	254,
									"scores":	[-8.78087546895034]
								}, {
									"case":	255,
									"scores":	[-8.78087546895034]
								}, {
									"case":	256,
									"scores":	[-8.78087546895034]
								}, {
									"case":	257,
									"scores":	[-8.78087546895034]
								}, {
									"case":	258,
									"scores":	[-8.78087546895034]
								}, {
									"case":	259,
									"scores":	[-8.78087546895034]
								}, {
									"case":	260,
									"scores":	[-8.78087546895034]
								}, {
									"case":	261,
									"scores":	[-8.78087546895034]
								}, {
									"case":	262,
									"scores":	[-8.78087546895034]
								}, {
									"case":	263,
									"scores":	[-8.78087546895034]
								}, {
									"case":	264,
									"scores":	[-8.78087546895034]
								}, {
									"case":	265,
									"scores":	[-8.78087546895034]
								}, {
									"case":	266,
									"scores":	[-8.78087546895034]
								}, {
									"case":	267,
									"scores":	[-8.78087546895034]
								}, {
									"case":	268,
									"scores":	[-8.78087546895034]
								}, {
									"case":	269,
									"scores":	[-8.78087546895034]
								}, {
									"case":	270,
									"scores":	[-8.78087546895034]
								}, {
									"case":	271,
									"scores":	[-8.78087546895034]
								}, {
									"case":	272,
									"scores":	[-8.78087546895034]
								}, {
									"case":	273,
									"scores":	[-8.78087546895034]
								}, {
									"case":	274,
									"scores":	[-8.78087546895034]
								}, {
									"case":	275,
									"scores":	[-8.78087546895034]
								}, {
									"case":	276,
									"scores":	[-8.78087546895034]
								}, {
									"case":	277,
									"scores":	[-8.78087546895034]
								}, {
									"case":	278,
									"scores":	[-8.78087546895034]
								}, {
									"case":	279,
									"scores":	[-8.78087546895034]
								}, {
									"case":	280,
									"scores":	[-8.78087546895034]
								}, {
									"case":	281,
									"scores":	[-8.78087546895034]
								}, {
									"case":	282,
									"scores":	[-8.78087546895034]
								}, {
									"case":	283,
									"scores":	[-8.78087546895034]
								}, {
									"case":	284,
									"scores":	[-8.78087546895034]
								}, {
									"case":	285,
									"scores":	[-8.78087546895034]
								}, {
									"case":	286,
									"scores":	[-8.78087546895034]
								}, {
									"case":	287,
									"scores":	[-8.78087546895034]
								}, {
									"case":	288,
									"scores":	[-8.78087546895034]
								}, {
									"case":	289,
									"scores":	[-8.78087546895034]
								}, {
									"case":	290,
									"scores":	[-8.78087546895034]
								}, {
									"case":	291,
									"scores":	[-8.78087546895034]
								}, {
									"case":	292,
									"scores":	[-8.78087546895034]
								}, {
									"case":	293,
									"scores":	[-8.78087546895034]
								}, {
									"case":	294,
									"scores":	[-8.78087546895034]
								}, {
									"case":	295,
									"scores":	[-8.78087546895034]
								}, {
									"case":	296,
									"scores":	[-8.78087546895034]
								}, {
									"case":	297,
									"scores":	[-8.78087546895034]
								}, {
									"case":	298,
									"scores":	[-8.78087546895034]
								}, {
									"case":	299,
									"scores":	[-8.78087546895034]
								}, {
									"case":	300,
									"scores":	[-8.78087546895034]
								}, {
									"case":	301,
									"scores":	[-8.78087546895034]
								}, {
									"case":	302,
									"scores":	[-8.78087546895034]
								}, {
									"case":	303,
									"scores":	[-8.78087546895034]
								}, {
									"case":	304,
									"scores":	[-8.78087546895034]
								}, {
									"case":	305,
									"scores":	[-8.78087546895034]
								}, {
									"case":	306,
									"scores":	[-8.78087546895034]
								}, {
									"case":	307,
									"scores":	[-8.78087546895034]
								}, {
									"case":	308,
									"scores":	[-8.78087546895034]
								}, {
									"case":	309,
									"scores":	[-8.78087546895034]
								}, {
									"case":	310,
									"scores":	[-8.78087546895034]
								}, {
									"case":	311,
									"scores":	[-8.78087546895034]
								}, {
									"case":	312,
									"scores":	[-8.78087546895034]
								}, {
									"case":	313,
									"scores":	[-8.78087546895034]
								}, {
									"case":	314,
									"scores":	[-8.78087546895034]
								}, {
									"case":	315,
									"scores":	[-8.78087546895034]
								}, {
									"case":	316,
									"scores":	[-8.78087546895034]
								}, {
									"case":	317,
									"scores":	[-8.78087546895034]
								}, {
									"case":	318,
									"scores":	[-8.78087546895034]
								}, {
									"case":	319,
									"scores":	[-8.78087546895034]
								}, {
									"case":	320,
									"scores":	[-8.78087546895034]
								}, {
									"case":	321,
									"scores":	[-8.78087546895034]
								}, {
									"case":	322,
									"scores":	[-8.78087546895034]
								}, {
									"case":	323,
									"scores":	[-8.78087546895034]
								}, {
									"case":	324,
									"scores":	[-8.78087546895034]
								}, {
									"case":	325,
									"scores":	[-8.78087546895034]
								}, {
									"case":	326,
									"scores":	[-8.78087546895034]
								}, {
									"case":	327,
									"scores":	[-8.78087546895034]
								}, {
									"case":	328,
									"scores":	[-8.78087546895034]
								}, {
									"case":	329,
									"scores":	[-8.78087546895034]
								}, {
									"case":	330,
									"scores":	[-8.78087546895034]
								}, {
									"case":	331,
									"scores":	[-8.78087546895034]
								}, {
									"case":	332,
									"scores":	[-8.78087546895034]
								}, {
									"case":	333,
									"scores":	[-8.78087546895034]
								}, {
									"case":	334,
									"scores":	[-8.78087546895034]
								}, {
									"case":	335,
									"scores":	[-8.78087546895034]
								}, {
									"case":	336,
									"scores":	[-8.78087546895034]
								}, {
									"case":	337,
									"scores":	[-8.78087546895034]
								}, {
									"case":	338,
									"scores":	[-8.78087546895034]
								}, {
									"case":	339,
									"scores":	[-8.78087546895034]
								}, {
									"case":	340,
									"scores":	[-8.78087546895034]
								}, {
									"case":	341,
									"scores":	[-8.78087546895034]
								}, {
									"case":	342,
									"scores":	[-8.78087546895034]
								}, {
									"case":	343,
									"scores":	[-8.78087546895034]
								}, {
									"case":	344,
									"scores":	[-8.78087546895034]
								}, {
									"case":	345,
									"scores":	[-8.78087546895034]
								}, {
									"case":	346,
									"scores":	[-8.78087546895034]
								}, {
									"case":	347,
									"scores":	[-8.78087546895034]
								}, {
									"case":	348,
									"scores":	[-8.78087546895034]
								}, {
									"case":	349,
									"scores":	[-8.78087546895034]
								}, {
									"case":	350,
									"scores":	[-8.78087546895034]
								}, {
									"case":	351,
									"scores":	[-8.78087546895034]
								}, {
									"case":	352,
									"scores":	[-8.78087546895034]
								}, {
									"case":	353,
									"scores":	[-8.78087546895034]
								}, {
									"case":	354,
									"scores":	[-8.78087546895034]
								}, {
									"case":	355,
									"scores":	[-8.78087546895034]
								}, {
									"case":	356,
									"scores":	[-8.78087546895034]
								}, {
									"case":	357,
									"scores":	[-8.78087546895034]
								}, {
									"case":	358,
									"scores":	[-8.78087546895034]
								}, {
									"case":	359,
									"scores":	[-8.78087546895034]
								}, {
									"case":	360,
									"scores":	[-8.78087546895034]
								}, {
									"case":	361,
									"scores":	[-8.78087546895034]
								}, {
									"case":	362,
									"scores":	[-8.78087546895034]
								}, {
									"case":	363,
									"scores":	[-8.78087546895034]
								}, {
									"case":	364,
									"scores":	[-8.78087546895034]
								}, {
									"case":	365,
									"scores":	[-8.78087546895034]
								}, {
									"case":	366,
									"scores":	[-8.78087546895034]
								}, {
									"case":	367,
									"scores":	[-8.78087546895034]
								}, {
									"case":	368,
									"scores":	[-8.78087546895034]
								}, {
									"case":	369,
									"scores":	[-8.78087546895034]
								}, {
									"case":	370,
									"scores":	[-8.78087546895034]
								}, {
									"case":	371,
									"scores":	[-8.78087546895034]
								}, {
									"case":	372,
									"scores":	[-8.78087546895034]
								}, {
									"case":	373,
									"scores":	[-8.78087546895034]
								}, {
									"case":	374,
									"scores":	[-8.78087546895034]
								}, {
									"case":	375,
									"scores":	[-8.78087546895034]
								}, {
									"case":	376,
									"scores":	[-8.78087546895034]
								}, {
									"case":	377,
									"scores":	[-8.78087546895034]
								}, {
									"case":	378,
									"scores":	[-8.78087546895034]
								}, {
									"case":	379,
									"scores":	[-8.78087546895034]
								}, {
									"case":	380,
									"scores":	[-8.78087546895034]
								}, {
									"case":	381,
									"scores":	[-8.78087546895034]
								}, {
									"case":	382,
									"scores":	[-8.78087546895034]
								}, {
									"case":	383,
									"scores":	[-8.78087546895034]
								}, {
									"case":	384,
									"scores":	[-8.78087546895034]
								}, {
									"case":	385,
									"scores":	[-8.78087546895034]
								}, {
									"case":	386,
									"scores":	[-8.78087546895034]
								}, {
									"case":	387,
									"scores":	[-8.78087546895034]
								}, {
									"case":	388,
									"scores":	[-8.78087546895034]
								}, {
									"case":	389,
									"scores":	[-8.78087546895034]
								}, {
									"case":	390,
									"scores":	[-8.78087546895034]
								}, {
									"case":	391,
									"scores":	[-8.78087546895034]
								}, {
									"case":	392,
									"scores":	[-8.78087546895034]
								}, {
									"case":	393,
									"scores":	[-8.78087546895034]
								}, {
									"case":	394,
									"scores":	[-8.78087546895034]
								}, {
									"case":	395,
									"scores":	[-8.78087546895034]
								}, {
									"case":	396,
									"scores":	[-8.78087546895034]
								}, {
									"case":	397,
									"scores":	[-8.78087546895034]
								}, {
									"case":	398,
									"scores":	[-8.78087546895034]
								}, {
									"case":	399,
									"scores":	[-8.78087546895034]
								}, {
									"case":	400,
									"scores":	[-8.78087546895034]
								}, {
									"case":	401,
									"scores":	[-8.78087546895034]
								}, {
									"case":	402,
									"scores":	[-8.78087546895034]
								}, {
									"case":	403,
									"scores":	[-8.78087546895034]
								}, {
									"case":	404,
									"scores":	[-8.78087546895034]
								}, {
									"case":	405,
									"scores":	[-8.78087546895034]
								}, {
									"case":	406,
									"scores":	[-8.78087546895034]
								}, {
									"case":	407,
									"scores":	[-8.78087546895034]
								}, {
									"case":	408,
									"scores":	[-8.78087546895034]
								}, {
									"case":	409,
									"scores":	[-8.78087546895034]
								}, {
									"case":	410,
									"scores":	[-8.78087546895034]
								}, {
									"case":	411,
									"scores":	[-8.78087546895034]
								}, {
									"case":	412,
									"scores":	[-8.78087546895034]
								}, {
									"case":	413,
									"scores":	[-8.78087546895034]
								}, {
									"case":	414,
									"scores":	[-8.78087546895034]
								}, {
									"case":	415,
									"scores":	[-8.78087546895034]
								}, {
									"case":	416,
									"scores":	[-8.78087546895034]
								}, {
									"case":	417,
									"scores":	[-8.78087546895034]
								}, {
									"case":	418,
									"scores":	[-8.78087546895034]
								}, {
									"case":	419,
									"scores":	[-8.78087546895034]
								}, {
									"case":	420,
									"scores":	[-8.78087546895034]
								}, {
									"case":	421,
									"scores":	[-8.78087546895034]
								}, {
									"case":	422,
									"scores":	[-8.78087546895034]
								}, {
									"case":	423,
									"scores":	[-8.78087546895034]
								}, {
									"case":	424,
									"scores":	[-10.161439752750338, -11.507341593750338, -11.123107984950337, -10.346497958950337, -12.249309431950339, -11.972885872750339, -11.551823698750336, -9.8455629589503371, -10.557387075950338, -12.151329438950338, -11.620322578750338, -12.397368352750338, -12.397368352750338, -12.362218555950339, -10.873348664950338, -11.337183264950337, -11.583222178750336, -12.397368352750338, -12.397368352750338, -12.151329438950338, -11.650394438950338, -12.397368352750338, -12.151329438950338, -12.151329438950338, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.151329438950338, -12.151329438950338, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.151329438950338, -12.151329438950338, -12.151329438950338, -12.151329438950338, -12.151329438950338, -12.151329438950338, -12.362218555950339, -12.151329438950338, -12.362218555950339, -12.151329438950338, -12.362218555950339, -12.362218555950339, -12.362218555950339, -11.650394438950338, -12.362218555950339, -12.397368352750338, -12.397368352750338, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.397368352750338, -12.362218555950339, -12.151329438950338, -12.151329438950338, -12.151329438950338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.151329438950338, -12.151329438950338, -12.151329438950338, -12.397368352750338, -12.362218555950339, -12.151329438950338, -12.151329438950338, -12.397368352750338, -12.151329438950338, -12.397368352750338, -12.397368352750338, -12.151329438950338, -12.397368352750338, -12.151329438950338, -12.151329438950338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.151329438950338, -12.397368352750338, -12.362218555950339, -12.151329438950338, -12.151329438950338, -12.362218555950339, -11.650394438950338, -12.151329438950338, -12.151329438950338, -12.362218555950339, -11.650394438950338, -12.397368352750338, -12.362218555950339, -12.397368352750338, -12.397368352750338, -12.362218555950339, -12.362218555950339, -12.362218555950339, -12.397368352750338, -12.362218555950339, -12.151329438950338, -12.151329438950338, -12.151329438950338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.151329438950338, -12.151329438950338, -12.151329438950338, -12.397368352750338, -12.362218555950339, -12.151329438950338, -12.151329438950338, -12.397368352750338, -12.151329438950338, -12.397368352750338, -12.397368352750338, -12.151329438950338, -12.397368352750338, -12.151329438950338, -12.151329438950338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.397368352750338, -12.151329438950338, -12.397368352750338, -12.362218555950339, -12.151329438950338]
								}]
						}, {
							"switch":	27,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	315,
							"begin_column":	3,
							"end_line":	315,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L315\", 149, &(ce), sizeof (ce), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(member), sizeof (member), &(property_info), sizeof (property_info), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(ce->name), sizeof (ce->name), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    (executor_globals.std_property_info).ce = ce;\n", "{\n}\n", "(executor_globals.std_property_info).ce = (&ce)", "(executor_globals.std_property_info).ce = (&denied_access)", "(executor_globals.std_property_info).ce = (&h)", "(executor_globals.std_property_info).ce = (&key)", "(executor_globals.std_property_info).ce = (&member)", "(executor_globals.std_property_info).ce = (&property_info)", "(executor_globals.std_property_info).ce = (&scope_property_info)", "(executor_globals.std_property_info).ce = (&silent)", "(executor_globals.std_property_info).ce = (ce)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.304099348950338, -10.582647169950338, -9.06240873895034, -9.07713968895034, -10.731063813950339, -10.504949049450339, -10.057753258950338, -8.75512865895034, -9.54639968895034, -9.95781654895034, -10.485210638950338, -10.715704648950338, -10.715704648950338, -10.427076548950339, -9.40531150895034, -9.43297173895034, -10.190859838950338, -10.715704648950338, -10.715704648950338, -9.95781654895034, -9.63580551895034, -10.715704648950338, -9.95781654895034, -9.95781654895034, -10.427076548950339, -10.427076548950339, -10.427076548950339, -9.95781654895034, -9.95781654895034, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.427076548950339, -9.95781654895034, -9.95781654895034, -9.95781654895034, -9.95781654895034, -9.95781654895034, -9.95781654895034, -10.427076548950339, -9.95781654895034, -10.427076548950339, -9.95781654895034, -10.427076548950339, -10.427076548950339, -10.427076548950339, -9.63580551895034, -10.427076548950339, -10.715704648950338, -10.715704648950338, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.715704648950338, -10.427076548950339, -9.95781654895034, -9.95781654895034, -9.95781654895034, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -9.95781654895034, -9.95781654895034, -9.95781654895034, -10.715704648950338, -10.427076548950339, -9.95781654895034, -9.95781654895034, -10.715704648950338, -9.95781654895034, -10.715704648950338, -10.715704648950338, -9.95781654895034, -10.715704648950338, -9.95781654895034, -9.95781654895034, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -9.95781654895034, -10.715704648950338, -10.427076548950339, -9.95781654895034, -9.95781654895034, -10.427076548950339, -9.63580551895034, -9.95781654895034, -9.95781654895034, -10.427076548950339, -9.63580551895034, -10.715704648950338, -10.427076548950339, -10.715704648950338, -10.715704648950338, -10.427076548950339, -10.427076548950339, -10.427076548950339, -10.715704648950338, -10.427076548950339, -9.95781654895034, -9.95781654895034, -9.95781654895034, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -9.95781654895034, -9.95781654895034, -9.95781654895034, -10.715704648950338, -10.427076548950339, -9.95781654895034, -9.95781654895034, -10.715704648950338, -9.95781654895034, -10.715704648950338, -10.715704648950338, -9.95781654895034, -10.715704648950338, -9.95781654895034, -9.95781654895034, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -10.715704648950338, -9.95781654895034, -10.715704648950338, -10.427076548950339, -9.95781654895034]
								}, {
									"case":	2,
									"scores":	[-8.78087546895034]
								}, {
									"case":	3,
									"scores":	[-8.78087546895034]
								}, {
									"case":	4,
									"scores":	[-8.78087546895034]
								}, {
									"case":	5,
									"scores":	[-8.78087546895034]
								}, {
									"case":	6,
									"scores":	[-8.78087546895034]
								}, {
									"case":	7,
									"scores":	[-8.78087546895034]
								}, {
									"case":	8,
									"scores":	[-8.78087546895034]
								}, {
									"case":	9,
									"scores":	[-8.78087546895034]
								}, {
									"case":	10,
									"scores":	[-8.78087546895034]
								}, {
									"case":	11,
									"scores":	[-8.78087546895034]
								}]
						}]
				}, {
					"line":	315,
					"switches":	[{
							"switch":	28,
							"types":	[[], [], [], [], [423], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], [], [], [], [402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], [], [], [], [], [], []],
							"begin_line":	316,
							"begin_column":	1,
							"end_line":	316,
							"end_column":	1,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&(executor_globals.std_property_info), 0, sizeof (*(&(executor_globals.std_property_info))))", "memset(&(executor_globals.std_property_info).ce, 0, sizeof (*(&(executor_globals.std_property_info).ce)))", "memset(&(executor_globals.std_property_info).doc_comment, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment)))", "memset(&(executor_globals.std_property_info).doc_comment_len, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment_len)))", "memset(&(executor_globals.std_property_info).flags, 0, sizeof (*(&(executor_globals.std_property_info).flags)))", "memset(&(executor_globals.std_property_info).h, 0, sizeof (*(&(executor_globals.std_property_info).h)))", "memset(&(executor_globals.std_property_info).name, 0, sizeof (*(&(executor_globals.std_property_info).name)))", "memset(&(executor_globals.std_property_info).name_length, 0, sizeof (*(&(executor_globals.std_property_info).name_length)))", "memset(&(executor_globals.std_property_info).offset, 0, sizeof (*(&(executor_globals.std_property_info).offset)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset((executor_globals.std_property_info).ce, 0, sizeof (*((executor_globals.std_property_info).ce)))", "memset((executor_globals.std_property_info).doc_comment, 0, sizeof (*((executor_globals.std_property_info).doc_comment)))", "memset((executor_globals.std_property_info).name, 0, sizeof (*((executor_globals.std_property_info).name)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L316\", 149, &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(ce), sizeof (ce), &(property_info), sizeof (property_info), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(member), sizeof (member), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(ce->name), sizeof (ce->name), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.76067276163282]
								}, {
									"case":	2,
									"scores":	[-8.76067276163282]
								}, {
									"case":	3,
									"scores":	[-8.76067276163282]
								}, {
									"case":	4,
									"scores":	[-8.76067276163282]
								}, {
									"case":	5,
									"scores":	[-8.76067276163282]
								}, {
									"case":	6,
									"scores":	[-8.76067276163282]
								}, {
									"case":	7,
									"scores":	[-8.76067276163282]
								}, {
									"case":	8,
									"scores":	[-8.76067276163282]
								}, {
									"case":	9,
									"scores":	[-8.76067276163282]
								}, {
									"case":	10,
									"scores":	[-8.76067276163282]
								}, {
									"case":	11,
									"scores":	[-8.76067276163282]
								}, {
									"case":	12,
									"scores":	[-8.76067276163282]
								}, {
									"case":	13,
									"scores":	[-8.76067276163282]
								}, {
									"case":	14,
									"scores":	[-8.76067276163282]
								}, {
									"case":	15,
									"scores":	[-8.76067276163282]
								}, {
									"case":	16,
									"scores":	[-8.76067276163282]
								}, {
									"case":	17,
									"scores":	[-8.76067276163282]
								}, {
									"case":	18,
									"scores":	[-8.76067276163282]
								}, {
									"case":	19,
									"scores":	[-8.76067276163282]
								}, {
									"case":	20,
									"scores":	[-8.76067276163282]
								}, {
									"case":	21,
									"scores":	[-8.76067276163282]
								}, {
									"case":	22,
									"scores":	[-8.76067276163282]
								}, {
									"case":	23,
									"scores":	[-8.76067276163282]
								}, {
									"case":	24,
									"scores":	[-8.76067276163282]
								}, {
									"case":	25,
									"scores":	[-8.76067276163282]
								}, {
									"case":	26,
									"scores":	[-8.76067276163282]
								}, {
									"case":	27,
									"scores":	[-8.76067276163282]
								}, {
									"case":	28,
									"scores":	[-8.76067276163282]
								}, {
									"case":	29,
									"scores":	[-8.76067276163282]
								}, {
									"case":	30,
									"scores":	[-8.76067276163282]
								}, {
									"case":	31,
									"scores":	[-8.76067276163282]
								}, {
									"case":	32,
									"scores":	[-8.76067276163282]
								}, {
									"case":	33,
									"scores":	[-8.76067276163282]
								}, {
									"case":	34,
									"scores":	[-8.76067276163282]
								}, {
									"case":	35,
									"scores":	[-8.76067276163282]
								}, {
									"case":	36,
									"scores":	[-8.76067276163282]
								}, {
									"case":	37,
									"scores":	[-8.76067276163282]
								}, {
									"case":	38,
									"scores":	[-8.76067276163282]
								}, {
									"case":	39,
									"scores":	[-8.76067276163282]
								}, {
									"case":	40,
									"scores":	[-8.76067276163282]
								}, {
									"case":	41,
									"scores":	[-8.76067276163282]
								}, {
									"case":	42,
									"scores":	[-8.76067276163282]
								}, {
									"case":	43,
									"scores":	[-8.76067276163282]
								}, {
									"case":	44,
									"scores":	[-8.76067276163282]
								}, {
									"case":	45,
									"scores":	[-8.76067276163282]
								}, {
									"case":	46,
									"scores":	[-8.76067276163282]
								}, {
									"case":	47,
									"scores":	[-8.76067276163282]
								}, {
									"case":	48,
									"scores":	[-8.76067276163282]
								}, {
									"case":	49,
									"scores":	[-8.76067276163282]
								}, {
									"case":	50,
									"scores":	[-8.76067276163282]
								}, {
									"case":	51,
									"scores":	[-8.76067276163282]
								}, {
									"case":	52,
									"scores":	[-8.76067276163282]
								}, {
									"case":	53,
									"scores":	[-8.76067276163282]
								}, {
									"case":	54,
									"scores":	[-8.76067276163282]
								}, {
									"case":	55,
									"scores":	[-8.76067276163282]
								}, {
									"case":	56,
									"scores":	[-8.76067276163282]
								}, {
									"case":	57,
									"scores":	[-8.76067276163282]
								}, {
									"case":	58,
									"scores":	[-8.76067276163282]
								}, {
									"case":	59,
									"scores":	[-8.76067276163282]
								}, {
									"case":	60,
									"scores":	[-8.76067276163282]
								}, {
									"case":	61,
									"scores":	[-8.76067276163282]
								}, {
									"case":	62,
									"scores":	[-8.76067276163282]
								}, {
									"case":	63,
									"scores":	[-8.76067276163282]
								}, {
									"case":	64,
									"scores":	[-8.76067276163282]
								}, {
									"case":	65,
									"scores":	[-8.76067276163282]
								}, {
									"case":	66,
									"scores":	[-8.76067276163282]
								}, {
									"case":	67,
									"scores":	[-8.76067276163282]
								}, {
									"case":	68,
									"scores":	[-8.76067276163282]
								}, {
									"case":	69,
									"scores":	[-8.76067276163282]
								}, {
									"case":	70,
									"scores":	[-8.76067276163282]
								}, {
									"case":	71,
									"scores":	[-8.76067276163282]
								}, {
									"case":	72,
									"scores":	[-8.76067276163282]
								}, {
									"case":	73,
									"scores":	[-8.76067276163282]
								}, {
									"case":	74,
									"scores":	[-8.76067276163282]
								}, {
									"case":	75,
									"scores":	[-8.76067276163282]
								}, {
									"case":	76,
									"scores":	[-8.76067276163282]
								}, {
									"case":	77,
									"scores":	[-8.76067276163282]
								}, {
									"case":	78,
									"scores":	[-8.76067276163282]
								}, {
									"case":	79,
									"scores":	[-8.76067276163282]
								}, {
									"case":	80,
									"scores":	[-8.76067276163282]
								}, {
									"case":	81,
									"scores":	[-8.76067276163282]
								}, {
									"case":	82,
									"scores":	[-8.76067276163282]
								}, {
									"case":	83,
									"scores":	[-8.76067276163282]
								}, {
									"case":	84,
									"scores":	[-8.76067276163282]
								}, {
									"case":	85,
									"scores":	[-8.76067276163282]
								}, {
									"case":	86,
									"scores":	[-8.76067276163282]
								}, {
									"case":	87,
									"scores":	[-8.76067276163282]
								}, {
									"case":	88,
									"scores":	[-8.76067276163282]
								}, {
									"case":	89,
									"scores":	[-8.76067276163282]
								}, {
									"case":	90,
									"scores":	[-8.76067276163282]
								}, {
									"case":	91,
									"scores":	[-8.76067276163282]
								}, {
									"case":	92,
									"scores":	[-8.76067276163282]
								}, {
									"case":	93,
									"scores":	[-8.76067276163282]
								}, {
									"case":	94,
									"scores":	[-8.76067276163282]
								}, {
									"case":	95,
									"scores":	[-8.76067276163282]
								}, {
									"case":	96,
									"scores":	[-8.76067276163282]
								}, {
									"case":	97,
									"scores":	[-8.76067276163282]
								}, {
									"case":	98,
									"scores":	[-8.76067276163282]
								}, {
									"case":	99,
									"scores":	[-8.76067276163282]
								}, {
									"case":	100,
									"scores":	[-8.76067276163282]
								}, {
									"case":	101,
									"scores":	[-8.76067276163282]
								}, {
									"case":	102,
									"scores":	[-8.76067276163282]
								}, {
									"case":	103,
									"scores":	[-8.76067276163282]
								}, {
									"case":	104,
									"scores":	[-8.76067276163282]
								}, {
									"case":	105,
									"scores":	[-8.76067276163282]
								}, {
									"case":	106,
									"scores":	[-8.76067276163282]
								}, {
									"case":	107,
									"scores":	[-8.76067276163282]
								}, {
									"case":	108,
									"scores":	[-8.76067276163282]
								}, {
									"case":	109,
									"scores":	[-8.76067276163282]
								}, {
									"case":	110,
									"scores":	[-8.76067276163282]
								}, {
									"case":	111,
									"scores":	[-8.76067276163282]
								}, {
									"case":	112,
									"scores":	[-8.76067276163282]
								}, {
									"case":	113,
									"scores":	[-8.76067276163282]
								}, {
									"case":	114,
									"scores":	[-8.76067276163282]
								}, {
									"case":	115,
									"scores":	[-8.76067276163282]
								}, {
									"case":	116,
									"scores":	[-8.76067276163282]
								}, {
									"case":	117,
									"scores":	[-8.76067276163282]
								}, {
									"case":	118,
									"scores":	[-8.76067276163282]
								}, {
									"case":	119,
									"scores":	[-8.76067276163282]
								}, {
									"case":	120,
									"scores":	[-8.76067276163282]
								}, {
									"case":	121,
									"scores":	[-8.76067276163282]
								}, {
									"case":	122,
									"scores":	[-8.76067276163282]
								}, {
									"case":	123,
									"scores":	[-8.76067276163282]
								}, {
									"case":	124,
									"scores":	[-8.76067276163282]
								}, {
									"case":	125,
									"scores":	[-8.76067276163282]
								}, {
									"case":	126,
									"scores":	[-8.76067276163282]
								}, {
									"case":	127,
									"scores":	[-8.76067276163282]
								}, {
									"case":	128,
									"scores":	[-8.76067276163282]
								}, {
									"case":	129,
									"scores":	[-8.76067276163282]
								}, {
									"case":	130,
									"scores":	[-8.76067276163282]
								}, {
									"case":	131,
									"scores":	[-8.76067276163282]
								}, {
									"case":	132,
									"scores":	[-8.76067276163282]
								}, {
									"case":	133,
									"scores":	[-8.76067276163282]
								}, {
									"case":	134,
									"scores":	[-8.76067276163282]
								}, {
									"case":	135,
									"scores":	[-8.76067276163282]
								}, {
									"case":	136,
									"scores":	[-8.76067276163282]
								}, {
									"case":	137,
									"scores":	[-8.76067276163282]
								}, {
									"case":	138,
									"scores":	[-8.76067276163282]
								}, {
									"case":	139,
									"scores":	[-8.76067276163282]
								}, {
									"case":	140,
									"scores":	[-8.76067276163282]
								}, {
									"case":	141,
									"scores":	[-8.76067276163282]
								}, {
									"case":	142,
									"scores":	[-8.76067276163282]
								}, {
									"case":	143,
									"scores":	[-8.76067276163282]
								}, {
									"case":	144,
									"scores":	[-8.76067276163282]
								}, {
									"case":	145,
									"scores":	[-8.76067276163282]
								}, {
									"case":	146,
									"scores":	[-8.76067276163282]
								}, {
									"case":	147,
									"scores":	[-8.76067276163282]
								}, {
									"case":	148,
									"scores":	[-8.76067276163282]
								}, {
									"case":	149,
									"scores":	[-8.76067276163282]
								}, {
									"case":	150,
									"scores":	[-8.76067276163282]
								}, {
									"case":	151,
									"scores":	[-8.76067276163282]
								}, {
									"case":	152,
									"scores":	[-8.76067276163282]
								}, {
									"case":	153,
									"scores":	[-8.76067276163282]
								}, {
									"case":	154,
									"scores":	[-8.76067276163282]
								}, {
									"case":	155,
									"scores":	[-8.76067276163282]
								}, {
									"case":	156,
									"scores":	[-8.76067276163282]
								}, {
									"case":	157,
									"scores":	[-8.76067276163282]
								}, {
									"case":	158,
									"scores":	[-8.76067276163282]
								}, {
									"case":	159,
									"scores":	[-8.76067276163282]
								}, {
									"case":	160,
									"scores":	[-8.76067276163282]
								}, {
									"case":	161,
									"scores":	[-8.76067276163282]
								}, {
									"case":	162,
									"scores":	[-8.76067276163282]
								}, {
									"case":	163,
									"scores":	[-8.76067276163282]
								}, {
									"case":	164,
									"scores":	[-8.76067276163282]
								}, {
									"case":	165,
									"scores":	[-8.76067276163282]
								}, {
									"case":	166,
									"scores":	[-8.76067276163282]
								}, {
									"case":	167,
									"scores":	[-8.76067276163282]
								}, {
									"case":	168,
									"scores":	[-8.76067276163282]
								}, {
									"case":	169,
									"scores":	[-8.76067276163282]
								}, {
									"case":	170,
									"scores":	[-8.76067276163282]
								}, {
									"case":	171,
									"scores":	[-8.76067276163282]
								}, {
									"case":	172,
									"scores":	[-8.76067276163282]
								}, {
									"case":	173,
									"scores":	[-8.76067276163282]
								}, {
									"case":	174,
									"scores":	[-8.76067276163282]
								}, {
									"case":	175,
									"scores":	[-8.76067276163282]
								}, {
									"case":	176,
									"scores":	[-8.76067276163282]
								}, {
									"case":	177,
									"scores":	[-8.76067276163282]
								}, {
									"case":	178,
									"scores":	[-8.76067276163282]
								}, {
									"case":	179,
									"scores":	[-8.76067276163282]
								}, {
									"case":	180,
									"scores":	[-8.76067276163282]
								}, {
									"case":	181,
									"scores":	[-8.76067276163282]
								}, {
									"case":	182,
									"scores":	[-8.76067276163282]
								}, {
									"case":	183,
									"scores":	[-8.76067276163282]
								}, {
									"case":	184,
									"scores":	[-8.76067276163282]
								}, {
									"case":	185,
									"scores":	[-8.76067276163282]
								}, {
									"case":	186,
									"scores":	[-8.76067276163282]
								}, {
									"case":	187,
									"scores":	[-8.76067276163282]
								}, {
									"case":	188,
									"scores":	[-8.76067276163282]
								}, {
									"case":	189,
									"scores":	[-8.76067276163282]
								}, {
									"case":	190,
									"scores":	[-8.76067276163282]
								}, {
									"case":	191,
									"scores":	[-8.76067276163282]
								}, {
									"case":	192,
									"scores":	[-8.76067276163282]
								}, {
									"case":	193,
									"scores":	[-8.76067276163282]
								}, {
									"case":	194,
									"scores":	[-8.76067276163282]
								}, {
									"case":	195,
									"scores":	[-8.76067276163282]
								}, {
									"case":	196,
									"scores":	[-8.76067276163282]
								}, {
									"case":	197,
									"scores":	[-8.76067276163282]
								}, {
									"case":	198,
									"scores":	[-8.76067276163282]
								}, {
									"case":	199,
									"scores":	[-8.76067276163282]
								}, {
									"case":	200,
									"scores":	[-8.76067276163282]
								}, {
									"case":	201,
									"scores":	[-8.76067276163282]
								}, {
									"case":	202,
									"scores":	[-8.76067276163282]
								}, {
									"case":	203,
									"scores":	[-8.76067276163282]
								}, {
									"case":	204,
									"scores":	[-8.76067276163282]
								}, {
									"case":	205,
									"scores":	[-8.76067276163282]
								}, {
									"case":	206,
									"scores":	[-8.76067276163282]
								}, {
									"case":	207,
									"scores":	[-8.76067276163282]
								}, {
									"case":	208,
									"scores":	[-8.76067276163282]
								}, {
									"case":	209,
									"scores":	[-8.76067276163282]
								}, {
									"case":	210,
									"scores":	[-8.76067276163282]
								}, {
									"case":	211,
									"scores":	[-8.76067276163282]
								}, {
									"case":	212,
									"scores":	[-8.76067276163282]
								}, {
									"case":	213,
									"scores":	[-8.76067276163282]
								}, {
									"case":	214,
									"scores":	[-8.76067276163282]
								}, {
									"case":	215,
									"scores":	[-8.76067276163282]
								}, {
									"case":	216,
									"scores":	[-8.76067276163282]
								}, {
									"case":	217,
									"scores":	[-8.76067276163282]
								}, {
									"case":	218,
									"scores":	[-8.76067276163282]
								}, {
									"case":	219,
									"scores":	[-8.76067276163282]
								}, {
									"case":	220,
									"scores":	[-8.76067276163282]
								}, {
									"case":	221,
									"scores":	[-8.76067276163282]
								}, {
									"case":	222,
									"scores":	[-8.76067276163282]
								}, {
									"case":	223,
									"scores":	[-8.76067276163282]
								}, {
									"case":	224,
									"scores":	[-8.76067276163282]
								}, {
									"case":	225,
									"scores":	[-8.76067276163282]
								}, {
									"case":	226,
									"scores":	[-8.76067276163282]
								}, {
									"case":	227,
									"scores":	[-8.76067276163282]
								}, {
									"case":	228,
									"scores":	[-8.76067276163282]
								}, {
									"case":	229,
									"scores":	[-8.76067276163282]
								}, {
									"case":	230,
									"scores":	[-8.76067276163282]
								}, {
									"case":	231,
									"scores":	[-8.76067276163282]
								}, {
									"case":	232,
									"scores":	[-8.76067276163282]
								}, {
									"case":	233,
									"scores":	[-8.76067276163282]
								}, {
									"case":	234,
									"scores":	[-8.76067276163282]
								}, {
									"case":	235,
									"scores":	[-8.76067276163282]
								}, {
									"case":	236,
									"scores":	[-8.76067276163282]
								}, {
									"case":	237,
									"scores":	[-8.76067276163282]
								}, {
									"case":	238,
									"scores":	[-8.76067276163282]
								}, {
									"case":	239,
									"scores":	[-8.76067276163282]
								}, {
									"case":	240,
									"scores":	[-8.76067276163282]
								}, {
									"case":	241,
									"scores":	[-8.76067276163282]
								}, {
									"case":	242,
									"scores":	[-8.76067276163282]
								}, {
									"case":	243,
									"scores":	[-8.76067276163282]
								}, {
									"case":	244,
									"scores":	[-8.76067276163282]
								}, {
									"case":	245,
									"scores":	[-8.76067276163282]
								}, {
									"case":	246,
									"scores":	[-8.76067276163282]
								}, {
									"case":	247,
									"scores":	[-8.76067276163282]
								}, {
									"case":	248,
									"scores":	[-8.76067276163282]
								}, {
									"case":	249,
									"scores":	[-8.76067276163282]
								}, {
									"case":	250,
									"scores":	[-8.76067276163282]
								}, {
									"case":	251,
									"scores":	[-8.76067276163282]
								}, {
									"case":	252,
									"scores":	[-8.76067276163282]
								}, {
									"case":	253,
									"scores":	[-8.76067276163282]
								}, {
									"case":	254,
									"scores":	[-8.76067276163282]
								}, {
									"case":	255,
									"scores":	[-8.76067276163282]
								}, {
									"case":	256,
									"scores":	[-8.76067276163282]
								}, {
									"case":	257,
									"scores":	[-8.76067276163282]
								}, {
									"case":	258,
									"scores":	[-8.76067276163282]
								}, {
									"case":	259,
									"scores":	[-8.76067276163282]
								}, {
									"case":	260,
									"scores":	[-8.76067276163282]
								}, {
									"case":	261,
									"scores":	[-8.76067276163282]
								}, {
									"case":	262,
									"scores":	[-8.76067276163282]
								}, {
									"case":	263,
									"scores":	[-8.76067276163282]
								}, {
									"case":	264,
									"scores":	[-8.76067276163282]
								}, {
									"case":	265,
									"scores":	[-8.76067276163282]
								}, {
									"case":	266,
									"scores":	[-8.76067276163282]
								}, {
									"case":	267,
									"scores":	[-8.76067276163282]
								}, {
									"case":	268,
									"scores":	[-8.76067276163282]
								}, {
									"case":	269,
									"scores":	[-8.76067276163282]
								}, {
									"case":	270,
									"scores":	[-8.76067276163282]
								}, {
									"case":	271,
									"scores":	[-8.76067276163282]
								}, {
									"case":	272,
									"scores":	[-8.76067276163282]
								}, {
									"case":	273,
									"scores":	[-8.76067276163282]
								}, {
									"case":	274,
									"scores":	[-8.76067276163282]
								}, {
									"case":	275,
									"scores":	[-8.76067276163282]
								}, {
									"case":	276,
									"scores":	[-8.76067276163282]
								}, {
									"case":	277,
									"scores":	[-8.76067276163282]
								}, {
									"case":	278,
									"scores":	[-8.76067276163282]
								}, {
									"case":	279,
									"scores":	[-8.76067276163282]
								}, {
									"case":	280,
									"scores":	[-8.76067276163282]
								}, {
									"case":	281,
									"scores":	[-8.76067276163282]
								}, {
									"case":	282,
									"scores":	[-8.76067276163282]
								}, {
									"case":	283,
									"scores":	[-8.76067276163282]
								}, {
									"case":	284,
									"scores":	[-8.76067276163282]
								}, {
									"case":	285,
									"scores":	[-8.76067276163282]
								}, {
									"case":	286,
									"scores":	[-8.76067276163282]
								}, {
									"case":	287,
									"scores":	[-8.76067276163282]
								}, {
									"case":	288,
									"scores":	[-8.76067276163282]
								}, {
									"case":	289,
									"scores":	[-8.76067276163282]
								}, {
									"case":	290,
									"scores":	[-8.76067276163282]
								}, {
									"case":	291,
									"scores":	[-8.76067276163282]
								}, {
									"case":	292,
									"scores":	[-8.76067276163282]
								}, {
									"case":	293,
									"scores":	[-8.76067276163282]
								}, {
									"case":	294,
									"scores":	[-8.76067276163282]
								}, {
									"case":	295,
									"scores":	[-8.76067276163282]
								}, {
									"case":	296,
									"scores":	[-8.76067276163282]
								}, {
									"case":	297,
									"scores":	[-8.76067276163282]
								}, {
									"case":	298,
									"scores":	[-8.76067276163282]
								}, {
									"case":	299,
									"scores":	[-8.76067276163282]
								}, {
									"case":	300,
									"scores":	[-8.76067276163282]
								}, {
									"case":	301,
									"scores":	[-8.76067276163282]
								}, {
									"case":	302,
									"scores":	[-8.76067276163282]
								}, {
									"case":	303,
									"scores":	[-8.76067276163282]
								}, {
									"case":	304,
									"scores":	[-8.76067276163282]
								}, {
									"case":	305,
									"scores":	[-8.76067276163282]
								}, {
									"case":	306,
									"scores":	[-8.76067276163282]
								}, {
									"case":	307,
									"scores":	[-8.76067276163282]
								}, {
									"case":	308,
									"scores":	[-8.76067276163282]
								}, {
									"case":	309,
									"scores":	[-8.76067276163282]
								}, {
									"case":	310,
									"scores":	[-8.76067276163282]
								}, {
									"case":	311,
									"scores":	[-8.76067276163282]
								}, {
									"case":	312,
									"scores":	[-8.76067276163282]
								}, {
									"case":	313,
									"scores":	[-8.76067276163282]
								}, {
									"case":	314,
									"scores":	[-8.76067276163282]
								}, {
									"case":	315,
									"scores":	[-8.76067276163282]
								}, {
									"case":	316,
									"scores":	[-8.76067276163282]
								}, {
									"case":	317,
									"scores":	[-8.76067276163282]
								}, {
									"case":	318,
									"scores":	[-8.76067276163282]
								}, {
									"case":	319,
									"scores":	[-8.76067276163282]
								}, {
									"case":	320,
									"scores":	[-8.76067276163282]
								}, {
									"case":	321,
									"scores":	[-8.76067276163282]
								}, {
									"case":	322,
									"scores":	[-8.76067276163282]
								}, {
									"case":	323,
									"scores":	[-8.76067276163282]
								}, {
									"case":	324,
									"scores":	[-8.76067276163282]
								}, {
									"case":	325,
									"scores":	[-8.76067276163282]
								}, {
									"case":	326,
									"scores":	[-8.76067276163282]
								}, {
									"case":	327,
									"scores":	[-8.76067276163282]
								}, {
									"case":	328,
									"scores":	[-8.76067276163282]
								}, {
									"case":	329,
									"scores":	[-8.76067276163282]
								}, {
									"case":	330,
									"scores":	[-8.76067276163282]
								}, {
									"case":	331,
									"scores":	[-8.76067276163282]
								}, {
									"case":	332,
									"scores":	[-8.76067276163282]
								}, {
									"case":	333,
									"scores":	[-8.76067276163282]
								}, {
									"case":	334,
									"scores":	[-8.76067276163282]
								}, {
									"case":	335,
									"scores":	[-8.76067276163282]
								}, {
									"case":	336,
									"scores":	[-8.76067276163282]
								}, {
									"case":	337,
									"scores":	[-8.76067276163282]
								}, {
									"case":	338,
									"scores":	[-8.76067276163282]
								}, {
									"case":	339,
									"scores":	[-8.76067276163282]
								}, {
									"case":	340,
									"scores":	[-8.76067276163282]
								}, {
									"case":	341,
									"scores":	[-8.76067276163282]
								}, {
									"case":	342,
									"scores":	[-8.76067276163282]
								}, {
									"case":	343,
									"scores":	[-8.76067276163282]
								}, {
									"case":	344,
									"scores":	[-8.76067276163282]
								}, {
									"case":	345,
									"scores":	[-8.76067276163282]
								}, {
									"case":	346,
									"scores":	[-8.76067276163282]
								}, {
									"case":	347,
									"scores":	[-8.76067276163282]
								}, {
									"case":	348,
									"scores":	[-8.76067276163282]
								}, {
									"case":	349,
									"scores":	[-8.76067276163282]
								}, {
									"case":	350,
									"scores":	[-8.76067276163282]
								}, {
									"case":	351,
									"scores":	[-8.76067276163282]
								}, {
									"case":	352,
									"scores":	[-8.76067276163282]
								}, {
									"case":	353,
									"scores":	[-8.76067276163282]
								}, {
									"case":	354,
									"scores":	[-8.76067276163282]
								}, {
									"case":	355,
									"scores":	[-8.76067276163282]
								}, {
									"case":	356,
									"scores":	[-8.76067276163282]
								}, {
									"case":	357,
									"scores":	[-8.76067276163282]
								}, {
									"case":	358,
									"scores":	[-8.76067276163282]
								}, {
									"case":	359,
									"scores":	[-8.76067276163282]
								}, {
									"case":	360,
									"scores":	[-8.76067276163282]
								}, {
									"case":	361,
									"scores":	[-8.76067276163282]
								}, {
									"case":	362,
									"scores":	[-8.76067276163282]
								}, {
									"case":	363,
									"scores":	[-8.76067276163282]
								}, {
									"case":	364,
									"scores":	[-8.76067276163282]
								}, {
									"case":	365,
									"scores":	[-8.76067276163282]
								}, {
									"case":	366,
									"scores":	[-8.76067276163282]
								}, {
									"case":	367,
									"scores":	[-8.76067276163282]
								}, {
									"case":	368,
									"scores":	[-8.76067276163282]
								}, {
									"case":	369,
									"scores":	[-8.76067276163282]
								}, {
									"case":	370,
									"scores":	[-8.76067276163282]
								}, {
									"case":	371,
									"scores":	[-8.76067276163282]
								}, {
									"case":	372,
									"scores":	[-8.76067276163282]
								}, {
									"case":	373,
									"scores":	[-8.76067276163282]
								}, {
									"case":	374,
									"scores":	[-8.76067276163282]
								}, {
									"case":	375,
									"scores":	[-8.76067276163282]
								}, {
									"case":	376,
									"scores":	[-8.76067276163282]
								}, {
									"case":	377,
									"scores":	[-8.76067276163282]
								}, {
									"case":	378,
									"scores":	[-8.76067276163282]
								}, {
									"case":	379,
									"scores":	[-8.76067276163282]
								}, {
									"case":	380,
									"scores":	[-8.76067276163282]
								}, {
									"case":	381,
									"scores":	[-8.76067276163282]
								}, {
									"case":	382,
									"scores":	[-8.76067276163282]
								}, {
									"case":	383,
									"scores":	[-8.76067276163282]
								}, {
									"case":	384,
									"scores":	[-8.76067276163282]
								}, {
									"case":	385,
									"scores":	[-8.76067276163282]
								}, {
									"case":	386,
									"scores":	[-8.76067276163282]
								}, {
									"case":	387,
									"scores":	[-8.76067276163282]
								}, {
									"case":	388,
									"scores":	[-8.76067276163282]
								}, {
									"case":	389,
									"scores":	[-8.76067276163282]
								}, {
									"case":	390,
									"scores":	[-8.76067276163282]
								}, {
									"case":	391,
									"scores":	[-8.76067276163282]
								}, {
									"case":	392,
									"scores":	[-8.76067276163282]
								}, {
									"case":	393,
									"scores":	[-8.76067276163282]
								}, {
									"case":	394,
									"scores":	[-8.76067276163282]
								}, {
									"case":	395,
									"scores":	[-8.76067276163282]
								}, {
									"case":	396,
									"scores":	[-8.76067276163282]
								}, {
									"case":	397,
									"scores":	[-8.76067276163282]
								}, {
									"case":	398,
									"scores":	[-8.76067276163282]
								}, {
									"case":	399,
									"scores":	[-8.76067276163282]
								}, {
									"case":	400,
									"scores":	[-8.76067276163282]
								}, {
									"case":	401,
									"scores":	[-8.76067276163282]
								}, {
									"case":	402,
									"scores":	[-8.76067276163282]
								}, {
									"case":	403,
									"scores":	[-8.76067276163282]
								}, {
									"case":	404,
									"scores":	[-8.76067276163282]
								}, {
									"case":	405,
									"scores":	[-8.76067276163282]
								}, {
									"case":	406,
									"scores":	[-8.76067276163282]
								}, {
									"case":	407,
									"scores":	[-8.76067276163282]
								}, {
									"case":	408,
									"scores":	[-8.76067276163282]
								}, {
									"case":	409,
									"scores":	[-8.76067276163282]
								}, {
									"case":	410,
									"scores":	[-8.76067276163282]
								}, {
									"case":	411,
									"scores":	[-8.76067276163282]
								}, {
									"case":	412,
									"scores":	[-8.76067276163282]
								}, {
									"case":	413,
									"scores":	[-8.76067276163282]
								}, {
									"case":	414,
									"scores":	[-8.76067276163282]
								}, {
									"case":	415,
									"scores":	[-8.76067276163282]
								}, {
									"case":	416,
									"scores":	[-8.76067276163282]
								}, {
									"case":	417,
									"scores":	[-8.76067276163282]
								}, {
									"case":	418,
									"scores":	[-8.76067276163282]
								}, {
									"case":	419,
									"scores":	[-8.76067276163282]
								}, {
									"case":	420,
									"scores":	[-8.76067276163282]
								}, {
									"case":	421,
									"scores":	[-8.76067276163282]
								}, {
									"case":	422,
									"scores":	[-8.76067276163282]
								}, {
									"case":	423,
									"scores":	[-11.867377548632819, -11.643629765432818, -11.531620991432817, -10.572334165432817, -11.102905277632818, -10.326295251632818, -11.95268316543282, -9.82536025163282, -12.342015848632819, -12.131126731632818, -11.600119871432819, -12.377165645432818, -12.377165645432818, -12.342015848632819, -10.853145957632819, -11.316980557632817, -11.563019471432817, -12.377165645432818, -12.377165645432818, -12.131126731632818, -11.630191731632818, -12.377165645432818, -12.131126731632818, -12.131126731632818, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.131126731632818, -12.131126731632818, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.131126731632818, -12.131126731632818, -12.131126731632818, -12.131126731632818, -12.131126731632818, -12.131126731632818, -12.342015848632819, -12.131126731632818, -12.342015848632819, -12.131126731632818, -12.342015848632819, -12.342015848632819, -12.342015848632819, -11.630191731632818, -12.342015848632819, -12.377165645432818, -12.377165645432818, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.377165645432818, -12.342015848632819, -12.131126731632818, -12.131126731632818, -12.131126731632818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.131126731632818, -12.131126731632818, -12.131126731632818, -12.377165645432818, -12.342015848632819, -12.131126731632818, -12.131126731632818, -12.377165645432818, -12.131126731632818, -12.377165645432818, -12.377165645432818, -12.131126731632818, -12.377165645432818, -12.131126731632818, -12.131126731632818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.131126731632818, -12.377165645432818, -12.342015848632819, -12.131126731632818, -12.131126731632818, -12.342015848632819, -11.630191731632818, -12.131126731632818, -12.131126731632818, -12.342015848632819, -11.630191731632818, -12.377165645432818, -12.342015848632819, -12.377165645432818, -12.377165645432818, -12.342015848632819, -12.342015848632819, -12.342015848632819, -12.377165645432818, -12.342015848632819, -12.131126731632818, -12.131126731632818, -12.131126731632818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.131126731632818, -12.131126731632818, -12.131126731632818, -12.377165645432818, -12.342015848632819, -12.131126731632818, -12.131126731632818, -12.377165645432818, -12.131126731632818, -12.377165645432818, -12.377165645432818, -12.131126731632818, -12.377165645432818, -12.131126731632818, -12.131126731632818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.377165645432818, -12.131126731632818, -12.377165645432818, -12.342015848632819, -12.131126731632818]
								}]
						}, {
							"switch":	29,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	316,
							"begin_column":	3,
							"end_line":	316,
							"end_column":	23,
							"patch_codes":	["if (!__is_neg(\"\", \"L316\", 149, &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(ce), sizeof (ce), &(property_info), sizeof (property_info), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(member), sizeof (member), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(ce->name), sizeof (ce->name), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce)))\n    (executor_globals.std_property_info).offset = -1;\n", "{\n}\n", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = -(0 * denied_access)", "(executor_globals.std_property_info).offset = -(0 * h)", "(executor_globals.std_property_info).offset = -(0 * silent)", "(executor_globals.std_property_info).offset = -(0)", "(executor_globals.std_property_info).offset = -(ce != 0)", "(executor_globals.std_property_info).offset = -(ce == 0)", "(executor_globals.std_property_info).offset = -(denied_access != 0)", "(executor_globals.std_property_info).offset = -(denied_access != h)", "(executor_globals.std_property_info).offset = -(denied_access * h)", "(executor_globals.std_property_info).offset = -(denied_access * silent)", "(executor_globals.std_property_info).offset = -(denied_access + 0)", "(executor_globals.std_property_info).offset = -(denied_access + h)", "(executor_globals.std_property_info).offset = -(denied_access - 0)", "(executor_globals.std_property_info).offset = -(denied_access - h)", "(executor_globals.std_property_info).offset = -(denied_access == 0)", "(executor_globals.std_property_info).offset = -(denied_access == h)", "(executor_globals.std_property_info).offset = -(h != 0)", "(executor_globals.std_property_info).offset = -(h * denied_access)", "(executor_globals.std_property_info).offset = -(h * silent)", "(executor_globals.std_property_info).offset = -(h + 0)", "(executor_globals.std_property_info).offset = -(h - 0)", "(executor_globals.std_property_info).offset = -(h == 0)", "(executor_globals.std_property_info).offset = -(key != 0)", "(executor_globals.std_property_info).offset = -(key == 0)", "(executor_globals.std_property_info).offset = -(member != 0)", "(executor_globals.std_property_info).offset = -(member == 0)", "(executor_globals.std_property_info).offset = -(property_info != 0)", "(executor_globals.std_property_info).offset = -(property_info != scope_property_info)", "(executor_globals.std_property_info).offset = -(property_info == 0)", "(executor_globals.std_property_info).offset = -(property_info == scope_property_info)", "(executor_globals.std_property_info).offset = -(scope_property_info != 0)", "(executor_globals.std_property_info).offset = -(scope_property_info == 0)", "(executor_globals.std_property_info).offset = -(silent != 0)", "(executor_globals.std_property_info).offset = -(silent != denied_access)", "(executor_globals.std_property_info).offset = -(silent != h)", "(executor_globals.std_property_info).offset = -(silent * denied_access)", "(executor_globals.std_property_info).offset = -(silent * h)", "(executor_globals.std_property_info).offset = -(silent + 0)", "(executor_globals.std_property_info).offset = -(silent + denied_access)", "(executor_globals.std_property_info).offset = -(silent + h)", "(executor_globals.std_property_info).offset = -(silent - 0)", "(executor_globals.std_property_info).offset = -(silent - denied_access)", "(executor_globals.std_property_info).offset = -(silent - h)", "(executor_globals.std_property_info).offset = -(silent == 0)", "(executor_globals.std_property_info).offset = -(silent == denied_access)", "(executor_globals.std_property_info).offset = -(silent == h)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.714342362632818, -10.408242631632818, -9.90449307263282, -9.81482508163282, -9.04220603163282, -9.05693698163282, -10.484746342132819, -8.73492595163282, -10.406873841632819, -9.93761384163282, -10.695501941632818, -10.465007931632819, -10.695501941632818, -10.406873841632819, -9.38510880163282, -9.41276903163282, -10.170657131632819, -10.695501941632818, -10.695501941632818, -10.406873841632819, -10.695501941632818, -10.695501941632818, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.695501941632818, -10.406873841632819, -9.93761384163282, -9.93761384163282, -9.93761384163282, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -9.93761384163282, -9.93761384163282, -9.93761384163282, -10.695501941632818, -10.406873841632819, -9.93761384163282, -9.93761384163282, -10.695501941632818, -9.93761384163282, -10.695501941632818, -10.695501941632818, -9.93761384163282, -10.695501941632818, -9.93761384163282, -9.93761384163282, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -9.93761384163282, -10.695501941632818, -10.406873841632819, -9.93761384163282, -9.93761384163282, -9.61560281163282, -10.695501941632818, -9.93761384163282, -9.93761384163282, -10.406873841632819, -10.406873841632819, -10.406873841632819, -9.93761384163282, -9.93761384163282, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.406873841632819, -9.93761384163282, -9.93761384163282, -9.93761384163282, -9.93761384163282, -9.93761384163282, -9.93761384163282, -10.406873841632819, -9.93761384163282, -10.406873841632819, -9.93761384163282, -10.406873841632819, -10.406873841632819, -10.406873841632819, -9.61560281163282, -10.406873841632819, -10.695501941632818, -10.695501941632818, -10.406873841632819, -10.406873841632819, -10.406873841632819, -10.695501941632818, -10.406873841632819, -9.93761384163282, -9.93761384163282, -9.93761384163282, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -9.93761384163282, -9.93761384163282, -9.93761384163282, -10.695501941632818, -10.406873841632819, -9.93761384163282, -9.93761384163282, -10.695501941632818, -9.93761384163282, -10.695501941632818, -10.695501941632818, -9.93761384163282, -10.695501941632818, -9.93761384163282, -9.93761384163282, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -10.695501941632818, -9.93761384163282, -10.695501941632818, -10.406873841632819, -9.93761384163282, -9.93761384163282, -10.406873841632819, -9.61560281163282, -9.93761384163282, -9.93761384163282, -10.406873841632819, -9.61560281163282, -10.695501941632818]
								}, {
									"case":	2,
									"scores":	[-8.76067276163282]
								}, {
									"case":	3,
									"scores":	[-8.76067276163282]
								}, {
									"case":	4,
									"scores":	[-8.76067276163282]
								}, {
									"case":	5,
									"scores":	[-8.76067276163282]
								}, {
									"case":	6,
									"scores":	[-8.76067276163282]
								}, {
									"case":	7,
									"scores":	[-8.76067276163282]
								}, {
									"case":	8,
									"scores":	[-8.76067276163282]
								}, {
									"case":	9,
									"scores":	[-8.76067276163282]
								}, {
									"case":	10,
									"scores":	[-8.76067276163282]
								}, {
									"case":	11,
									"scores":	[-8.76067276163282]
								}, {
									"case":	12,
									"scores":	[-8.76067276163282]
								}, {
									"case":	13,
									"scores":	[-8.76067276163282]
								}, {
									"case":	14,
									"scores":	[-8.76067276163282]
								}, {
									"case":	15,
									"scores":	[-8.76067276163282]
								}, {
									"case":	16,
									"scores":	[-8.76067276163282]
								}, {
									"case":	17,
									"scores":	[-8.76067276163282]
								}, {
									"case":	18,
									"scores":	[-8.76067276163282]
								}, {
									"case":	19,
									"scores":	[-8.76067276163282]
								}, {
									"case":	20,
									"scores":	[-8.76067276163282]
								}, {
									"case":	21,
									"scores":	[-8.76067276163282]
								}, {
									"case":	22,
									"scores":	[-8.76067276163282]
								}, {
									"case":	23,
									"scores":	[-8.76067276163282]
								}, {
									"case":	24,
									"scores":	[-8.76067276163282]
								}, {
									"case":	25,
									"scores":	[-8.76067276163282]
								}, {
									"case":	26,
									"scores":	[-8.76067276163282]
								}, {
									"case":	27,
									"scores":	[-8.76067276163282]
								}, {
									"case":	28,
									"scores":	[-8.76067276163282]
								}, {
									"case":	29,
									"scores":	[-8.76067276163282]
								}, {
									"case":	30,
									"scores":	[-8.76067276163282]
								}, {
									"case":	31,
									"scores":	[-8.76067276163282]
								}, {
									"case":	32,
									"scores":	[-8.76067276163282]
								}, {
									"case":	33,
									"scores":	[-8.76067276163282]
								}, {
									"case":	34,
									"scores":	[-8.76067276163282]
								}, {
									"case":	35,
									"scores":	[-8.76067276163282]
								}, {
									"case":	36,
									"scores":	[-8.76067276163282]
								}, {
									"case":	37,
									"scores":	[-8.76067276163282]
								}, {
									"case":	38,
									"scores":	[-8.76067276163282]
								}, {
									"case":	39,
									"scores":	[-8.76067276163282]
								}, {
									"case":	40,
									"scores":	[-8.76067276163282]
								}, {
									"case":	41,
									"scores":	[-8.76067276163282]
								}, {
									"case":	42,
									"scores":	[-8.76067276163282]
								}, {
									"case":	43,
									"scores":	[-8.76067276163282]
								}, {
									"case":	44,
									"scores":	[-8.76067276163282]
								}, {
									"case":	45,
									"scores":	[-8.76067276163282]
								}, {
									"case":	46,
									"scores":	[-8.76067276163282]
								}, {
									"case":	47,
									"scores":	[-8.76067276163282]
								}, {
									"case":	48,
									"scores":	[-8.76067276163282]
								}, {
									"case":	49,
									"scores":	[-8.76067276163282]
								}, {
									"case":	50,
									"scores":	[-8.76067276163282]
								}, {
									"case":	51,
									"scores":	[-8.76067276163282]
								}, {
									"case":	52,
									"scores":	[-8.76067276163282]
								}, {
									"case":	53,
									"scores":	[-8.76067276163282]
								}, {
									"case":	54,
									"scores":	[-8.76067276163282]
								}, {
									"case":	55,
									"scores":	[-8.76067276163282]
								}, {
									"case":	56,
									"scores":	[-8.76067276163282]
								}, {
									"case":	57,
									"scores":	[-8.76067276163282]
								}]
						}]
				}, {
					"line":	316,
					"switches":	[{
							"switch":	30,
							"types":	[[], [], [], [], [423], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], [], [], [], [402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], [], [], [], [], [], []],
							"begin_line":	317,
							"begin_column":	1,
							"end_line":	317,
							"end_column":	1,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&(executor_globals.std_property_info), 0, sizeof (*(&(executor_globals.std_property_info))))", "memset(&(executor_globals.std_property_info).ce, 0, sizeof (*(&(executor_globals.std_property_info).ce)))", "memset(&(executor_globals.std_property_info).doc_comment, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment)))", "memset(&(executor_globals.std_property_info).doc_comment_len, 0, sizeof (*(&(executor_globals.std_property_info).doc_comment_len)))", "memset(&(executor_globals.std_property_info).flags, 0, sizeof (*(&(executor_globals.std_property_info).flags)))", "memset(&(executor_globals.std_property_info).h, 0, sizeof (*(&(executor_globals.std_property_info).h)))", "memset(&(executor_globals.std_property_info).name, 0, sizeof (*(&(executor_globals.std_property_info).name)))", "memset(&(executor_globals.std_property_info).name_length, 0, sizeof (*(&(executor_globals.std_property_info).name_length)))", "memset(&(executor_globals.std_property_info).offset, 0, sizeof (*(&(executor_globals.std_property_info).offset)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset((executor_globals.std_property_info).ce, 0, sizeof (*((executor_globals.std_property_info).ce)))", "memset((executor_globals.std_property_info).doc_comment, 0, sizeof (*((executor_globals.std_property_info).doc_comment)))", "memset((executor_globals.std_property_info).name, 0, sizeof (*((executor_globals.std_property_info).name)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L317\", 114, &(property_info), sizeof (property_info), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(ce), sizeof (ce), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(member), sizeof (member), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.7404700543153]
								}, {
									"case":	2,
									"scores":	[-8.7404700543153]
								}, {
									"case":	3,
									"scores":	[-8.7404700543153]
								}, {
									"case":	4,
									"scores":	[-8.7404700543153]
								}, {
									"case":	5,
									"scores":	[-8.7404700543153]
								}, {
									"case":	6,
									"scores":	[-8.7404700543153]
								}, {
									"case":	7,
									"scores":	[-8.7404700543153]
								}, {
									"case":	8,
									"scores":	[-8.7404700543153]
								}, {
									"case":	9,
									"scores":	[-8.7404700543153]
								}, {
									"case":	10,
									"scores":	[-8.7404700543153]
								}, {
									"case":	11,
									"scores":	[-8.7404700543153]
								}, {
									"case":	12,
									"scores":	[-8.7404700543153]
								}, {
									"case":	13,
									"scores":	[-8.7404700543153]
								}, {
									"case":	14,
									"scores":	[-8.7404700543153]
								}, {
									"case":	15,
									"scores":	[-8.7404700543153]
								}, {
									"case":	16,
									"scores":	[-8.7404700543153]
								}, {
									"case":	17,
									"scores":	[-8.7404700543153]
								}, {
									"case":	18,
									"scores":	[-8.7404700543153]
								}, {
									"case":	19,
									"scores":	[-8.7404700543153]
								}, {
									"case":	20,
									"scores":	[-8.7404700543153]
								}, {
									"case":	21,
									"scores":	[-8.7404700543153]
								}, {
									"case":	22,
									"scores":	[-8.7404700543153]
								}, {
									"case":	23,
									"scores":	[-8.7404700543153]
								}, {
									"case":	24,
									"scores":	[-8.7404700543153]
								}, {
									"case":	25,
									"scores":	[-8.7404700543153]
								}, {
									"case":	26,
									"scores":	[-8.7404700543153]
								}, {
									"case":	27,
									"scores":	[-8.7404700543153]
								}, {
									"case":	28,
									"scores":	[-8.7404700543153]
								}, {
									"case":	29,
									"scores":	[-8.7404700543153]
								}, {
									"case":	30,
									"scores":	[-8.7404700543153]
								}, {
									"case":	31,
									"scores":	[-8.7404700543153]
								}, {
									"case":	32,
									"scores":	[-8.7404700543153]
								}, {
									"case":	33,
									"scores":	[-8.7404700543153]
								}, {
									"case":	34,
									"scores":	[-8.7404700543153]
								}, {
									"case":	35,
									"scores":	[-8.7404700543153]
								}, {
									"case":	36,
									"scores":	[-8.7404700543153]
								}, {
									"case":	37,
									"scores":	[-8.7404700543153]
								}, {
									"case":	38,
									"scores":	[-8.7404700543153]
								}, {
									"case":	39,
									"scores":	[-8.7404700543153]
								}, {
									"case":	40,
									"scores":	[-8.7404700543153]
								}, {
									"case":	41,
									"scores":	[-8.7404700543153]
								}, {
									"case":	42,
									"scores":	[-8.7404700543153]
								}, {
									"case":	43,
									"scores":	[-8.7404700543153]
								}, {
									"case":	44,
									"scores":	[-8.7404700543153]
								}, {
									"case":	45,
									"scores":	[-8.7404700543153]
								}, {
									"case":	46,
									"scores":	[-8.7404700543153]
								}, {
									"case":	47,
									"scores":	[-8.7404700543153]
								}, {
									"case":	48,
									"scores":	[-8.7404700543153]
								}, {
									"case":	49,
									"scores":	[-8.7404700543153]
								}, {
									"case":	50,
									"scores":	[-8.7404700543153]
								}, {
									"case":	51,
									"scores":	[-8.7404700543153]
								}, {
									"case":	52,
									"scores":	[-8.7404700543153]
								}, {
									"case":	53,
									"scores":	[-8.7404700543153]
								}, {
									"case":	54,
									"scores":	[-8.7404700543153]
								}, {
									"case":	55,
									"scores":	[-8.7404700543153]
								}, {
									"case":	56,
									"scores":	[-8.7404700543153]
								}, {
									"case":	57,
									"scores":	[-8.7404700543153]
								}, {
									"case":	58,
									"scores":	[-8.7404700543153]
								}, {
									"case":	59,
									"scores":	[-8.7404700543153]
								}, {
									"case":	60,
									"scores":	[-8.7404700543153]
								}, {
									"case":	61,
									"scores":	[-8.7404700543153]
								}, {
									"case":	62,
									"scores":	[-8.7404700543153]
								}, {
									"case":	63,
									"scores":	[-8.7404700543153]
								}, {
									"case":	64,
									"scores":	[-8.7404700543153]
								}, {
									"case":	65,
									"scores":	[-8.7404700543153]
								}, {
									"case":	66,
									"scores":	[-8.7404700543153]
								}, {
									"case":	67,
									"scores":	[-8.7404700543153]
								}, {
									"case":	68,
									"scores":	[-8.7404700543153]
								}, {
									"case":	69,
									"scores":	[-8.7404700543153]
								}, {
									"case":	70,
									"scores":	[-8.7404700543153]
								}, {
									"case":	71,
									"scores":	[-8.7404700543153]
								}, {
									"case":	72,
									"scores":	[-8.7404700543153]
								}, {
									"case":	73,
									"scores":	[-8.7404700543153]
								}, {
									"case":	74,
									"scores":	[-8.7404700543153]
								}, {
									"case":	75,
									"scores":	[-8.7404700543153]
								}, {
									"case":	76,
									"scores":	[-8.7404700543153]
								}, {
									"case":	77,
									"scores":	[-8.7404700543153]
								}, {
									"case":	78,
									"scores":	[-8.7404700543153]
								}, {
									"case":	79,
									"scores":	[-8.7404700543153]
								}, {
									"case":	80,
									"scores":	[-8.7404700543153]
								}, {
									"case":	81,
									"scores":	[-8.7404700543153]
								}, {
									"case":	82,
									"scores":	[-8.7404700543153]
								}, {
									"case":	83,
									"scores":	[-8.7404700543153]
								}, {
									"case":	84,
									"scores":	[-8.7404700543153]
								}, {
									"case":	85,
									"scores":	[-8.7404700543153]
								}, {
									"case":	86,
									"scores":	[-8.7404700543153]
								}, {
									"case":	87,
									"scores":	[-8.7404700543153]
								}, {
									"case":	88,
									"scores":	[-8.7404700543153]
								}, {
									"case":	89,
									"scores":	[-8.7404700543153]
								}, {
									"case":	90,
									"scores":	[-8.7404700543153]
								}, {
									"case":	91,
									"scores":	[-8.7404700543153]
								}, {
									"case":	92,
									"scores":	[-8.7404700543153]
								}, {
									"case":	93,
									"scores":	[-8.7404700543153]
								}, {
									"case":	94,
									"scores":	[-8.7404700543153]
								}, {
									"case":	95,
									"scores":	[-8.7404700543153]
								}, {
									"case":	96,
									"scores":	[-8.7404700543153]
								}, {
									"case":	97,
									"scores":	[-8.7404700543153]
								}, {
									"case":	98,
									"scores":	[-8.7404700543153]
								}, {
									"case":	99,
									"scores":	[-8.7404700543153]
								}, {
									"case":	100,
									"scores":	[-8.7404700543153]
								}, {
									"case":	101,
									"scores":	[-8.7404700543153]
								}, {
									"case":	102,
									"scores":	[-8.7404700543153]
								}, {
									"case":	103,
									"scores":	[-8.7404700543153]
								}, {
									"case":	104,
									"scores":	[-8.7404700543153]
								}, {
									"case":	105,
									"scores":	[-8.7404700543153]
								}, {
									"case":	106,
									"scores":	[-8.7404700543153]
								}, {
									"case":	107,
									"scores":	[-8.7404700543153]
								}, {
									"case":	108,
									"scores":	[-8.7404700543153]
								}, {
									"case":	109,
									"scores":	[-8.7404700543153]
								}, {
									"case":	110,
									"scores":	[-8.7404700543153]
								}, {
									"case":	111,
									"scores":	[-8.7404700543153]
								}, {
									"case":	112,
									"scores":	[-8.7404700543153]
								}, {
									"case":	113,
									"scores":	[-8.7404700543153]
								}, {
									"case":	114,
									"scores":	[-8.7404700543153]
								}, {
									"case":	115,
									"scores":	[-8.7404700543153]
								}, {
									"case":	116,
									"scores":	[-8.7404700543153]
								}, {
									"case":	117,
									"scores":	[-8.7404700543153]
								}, {
									"case":	118,
									"scores":	[-8.7404700543153]
								}, {
									"case":	119,
									"scores":	[-8.7404700543153]
								}, {
									"case":	120,
									"scores":	[-8.7404700543153]
								}, {
									"case":	121,
									"scores":	[-8.7404700543153]
								}, {
									"case":	122,
									"scores":	[-8.7404700543153]
								}, {
									"case":	123,
									"scores":	[-8.7404700543153]
								}, {
									"case":	124,
									"scores":	[-8.7404700543153]
								}, {
									"case":	125,
									"scores":	[-8.7404700543153]
								}, {
									"case":	126,
									"scores":	[-8.7404700543153]
								}, {
									"case":	127,
									"scores":	[-8.7404700543153]
								}, {
									"case":	128,
									"scores":	[-8.7404700543153]
								}, {
									"case":	129,
									"scores":	[-8.7404700543153]
								}, {
									"case":	130,
									"scores":	[-8.7404700543153]
								}, {
									"case":	131,
									"scores":	[-8.7404700543153]
								}, {
									"case":	132,
									"scores":	[-8.7404700543153]
								}, {
									"case":	133,
									"scores":	[-8.7404700543153]
								}, {
									"case":	134,
									"scores":	[-8.7404700543153]
								}, {
									"case":	135,
									"scores":	[-8.7404700543153]
								}, {
									"case":	136,
									"scores":	[-8.7404700543153]
								}, {
									"case":	137,
									"scores":	[-8.7404700543153]
								}, {
									"case":	138,
									"scores":	[-8.7404700543153]
								}, {
									"case":	139,
									"scores":	[-8.7404700543153]
								}, {
									"case":	140,
									"scores":	[-8.7404700543153]
								}, {
									"case":	141,
									"scores":	[-8.7404700543153]
								}, {
									"case":	142,
									"scores":	[-8.7404700543153]
								}, {
									"case":	143,
									"scores":	[-8.7404700543153]
								}, {
									"case":	144,
									"scores":	[-8.7404700543153]
								}, {
									"case":	145,
									"scores":	[-8.7404700543153]
								}, {
									"case":	146,
									"scores":	[-8.7404700543153]
								}, {
									"case":	147,
									"scores":	[-8.7404700543153]
								}, {
									"case":	148,
									"scores":	[-8.7404700543153]
								}, {
									"case":	149,
									"scores":	[-8.7404700543153]
								}, {
									"case":	150,
									"scores":	[-8.7404700543153]
								}, {
									"case":	151,
									"scores":	[-8.7404700543153]
								}, {
									"case":	152,
									"scores":	[-8.7404700543153]
								}, {
									"case":	153,
									"scores":	[-8.7404700543153]
								}, {
									"case":	154,
									"scores":	[-8.7404700543153]
								}, {
									"case":	155,
									"scores":	[-8.7404700543153]
								}, {
									"case":	156,
									"scores":	[-8.7404700543153]
								}, {
									"case":	157,
									"scores":	[-8.7404700543153]
								}, {
									"case":	158,
									"scores":	[-8.7404700543153]
								}, {
									"case":	159,
									"scores":	[-8.7404700543153]
								}, {
									"case":	160,
									"scores":	[-8.7404700543153]
								}, {
									"case":	161,
									"scores":	[-8.7404700543153]
								}, {
									"case":	162,
									"scores":	[-8.7404700543153]
								}, {
									"case":	163,
									"scores":	[-8.7404700543153]
								}, {
									"case":	164,
									"scores":	[-8.7404700543153]
								}, {
									"case":	165,
									"scores":	[-8.7404700543153]
								}, {
									"case":	166,
									"scores":	[-8.7404700543153]
								}, {
									"case":	167,
									"scores":	[-8.7404700543153]
								}, {
									"case":	168,
									"scores":	[-8.7404700543153]
								}, {
									"case":	169,
									"scores":	[-8.7404700543153]
								}, {
									"case":	170,
									"scores":	[-8.7404700543153]
								}, {
									"case":	171,
									"scores":	[-8.7404700543153]
								}, {
									"case":	172,
									"scores":	[-8.7404700543153]
								}, {
									"case":	173,
									"scores":	[-8.7404700543153]
								}, {
									"case":	174,
									"scores":	[-8.7404700543153]
								}, {
									"case":	175,
									"scores":	[-8.7404700543153]
								}, {
									"case":	176,
									"scores":	[-8.7404700543153]
								}, {
									"case":	177,
									"scores":	[-8.7404700543153]
								}, {
									"case":	178,
									"scores":	[-8.7404700543153]
								}, {
									"case":	179,
									"scores":	[-8.7404700543153]
								}, {
									"case":	180,
									"scores":	[-8.7404700543153]
								}, {
									"case":	181,
									"scores":	[-8.7404700543153]
								}, {
									"case":	182,
									"scores":	[-8.7404700543153]
								}, {
									"case":	183,
									"scores":	[-8.7404700543153]
								}, {
									"case":	184,
									"scores":	[-8.7404700543153]
								}, {
									"case":	185,
									"scores":	[-8.7404700543153]
								}, {
									"case":	186,
									"scores":	[-8.7404700543153]
								}, {
									"case":	187,
									"scores":	[-8.7404700543153]
								}, {
									"case":	188,
									"scores":	[-8.7404700543153]
								}, {
									"case":	189,
									"scores":	[-8.7404700543153]
								}, {
									"case":	190,
									"scores":	[-8.7404700543153]
								}, {
									"case":	191,
									"scores":	[-8.7404700543153]
								}, {
									"case":	192,
									"scores":	[-8.7404700543153]
								}, {
									"case":	193,
									"scores":	[-8.7404700543153]
								}, {
									"case":	194,
									"scores":	[-8.7404700543153]
								}, {
									"case":	195,
									"scores":	[-8.7404700543153]
								}, {
									"case":	196,
									"scores":	[-8.7404700543153]
								}, {
									"case":	197,
									"scores":	[-8.7404700543153]
								}, {
									"case":	198,
									"scores":	[-8.7404700543153]
								}, {
									"case":	199,
									"scores":	[-8.7404700543153]
								}, {
									"case":	200,
									"scores":	[-8.7404700543153]
								}, {
									"case":	201,
									"scores":	[-8.7404700543153]
								}, {
									"case":	202,
									"scores":	[-8.7404700543153]
								}, {
									"case":	203,
									"scores":	[-8.7404700543153]
								}, {
									"case":	204,
									"scores":	[-8.7404700543153]
								}, {
									"case":	205,
									"scores":	[-8.7404700543153]
								}, {
									"case":	206,
									"scores":	[-8.7404700543153]
								}, {
									"case":	207,
									"scores":	[-8.7404700543153]
								}, {
									"case":	208,
									"scores":	[-8.7404700543153]
								}, {
									"case":	209,
									"scores":	[-8.7404700543153]
								}, {
									"case":	210,
									"scores":	[-8.7404700543153]
								}, {
									"case":	211,
									"scores":	[-8.7404700543153]
								}, {
									"case":	212,
									"scores":	[-8.7404700543153]
								}, {
									"case":	213,
									"scores":	[-8.7404700543153]
								}, {
									"case":	214,
									"scores":	[-8.7404700543153]
								}, {
									"case":	215,
									"scores":	[-8.7404700543153]
								}, {
									"case":	216,
									"scores":	[-8.7404700543153]
								}, {
									"case":	217,
									"scores":	[-8.7404700543153]
								}, {
									"case":	218,
									"scores":	[-8.7404700543153]
								}, {
									"case":	219,
									"scores":	[-8.7404700543153]
								}, {
									"case":	220,
									"scores":	[-8.7404700543153]
								}, {
									"case":	221,
									"scores":	[-8.7404700543153]
								}, {
									"case":	222,
									"scores":	[-8.7404700543153]
								}, {
									"case":	223,
									"scores":	[-8.7404700543153]
								}, {
									"case":	224,
									"scores":	[-8.7404700543153]
								}, {
									"case":	225,
									"scores":	[-8.7404700543153]
								}, {
									"case":	226,
									"scores":	[-8.7404700543153]
								}, {
									"case":	227,
									"scores":	[-8.7404700543153]
								}, {
									"case":	228,
									"scores":	[-8.7404700543153]
								}, {
									"case":	229,
									"scores":	[-8.7404700543153]
								}, {
									"case":	230,
									"scores":	[-8.7404700543153]
								}, {
									"case":	231,
									"scores":	[-8.7404700543153]
								}, {
									"case":	232,
									"scores":	[-8.7404700543153]
								}, {
									"case":	233,
									"scores":	[-8.7404700543153]
								}, {
									"case":	234,
									"scores":	[-8.7404700543153]
								}, {
									"case":	235,
									"scores":	[-8.7404700543153]
								}, {
									"case":	236,
									"scores":	[-8.7404700543153]
								}, {
									"case":	237,
									"scores":	[-8.7404700543153]
								}, {
									"case":	238,
									"scores":	[-8.7404700543153]
								}, {
									"case":	239,
									"scores":	[-8.7404700543153]
								}, {
									"case":	240,
									"scores":	[-8.7404700543153]
								}, {
									"case":	241,
									"scores":	[-8.7404700543153]
								}, {
									"case":	242,
									"scores":	[-8.7404700543153]
								}, {
									"case":	243,
									"scores":	[-8.7404700543153]
								}, {
									"case":	244,
									"scores":	[-8.7404700543153]
								}, {
									"case":	245,
									"scores":	[-8.7404700543153]
								}, {
									"case":	246,
									"scores":	[-8.7404700543153]
								}, {
									"case":	247,
									"scores":	[-8.7404700543153]
								}, {
									"case":	248,
									"scores":	[-8.7404700543153]
								}, {
									"case":	249,
									"scores":	[-8.7404700543153]
								}, {
									"case":	250,
									"scores":	[-8.7404700543153]
								}, {
									"case":	251,
									"scores":	[-8.7404700543153]
								}, {
									"case":	252,
									"scores":	[-8.7404700543153]
								}, {
									"case":	253,
									"scores":	[-8.7404700543153]
								}, {
									"case":	254,
									"scores":	[-8.7404700543153]
								}, {
									"case":	255,
									"scores":	[-8.7404700543153]
								}, {
									"case":	256,
									"scores":	[-8.7404700543153]
								}, {
									"case":	257,
									"scores":	[-8.7404700543153]
								}, {
									"case":	258,
									"scores":	[-8.7404700543153]
								}, {
									"case":	259,
									"scores":	[-8.7404700543153]
								}, {
									"case":	260,
									"scores":	[-8.7404700543153]
								}, {
									"case":	261,
									"scores":	[-8.7404700543153]
								}, {
									"case":	262,
									"scores":	[-8.7404700543153]
								}, {
									"case":	263,
									"scores":	[-8.7404700543153]
								}, {
									"case":	264,
									"scores":	[-8.7404700543153]
								}, {
									"case":	265,
									"scores":	[-8.7404700543153]
								}, {
									"case":	266,
									"scores":	[-8.7404700543153]
								}, {
									"case":	267,
									"scores":	[-8.7404700543153]
								}, {
									"case":	268,
									"scores":	[-8.7404700543153]
								}, {
									"case":	269,
									"scores":	[-8.7404700543153]
								}, {
									"case":	270,
									"scores":	[-8.7404700543153]
								}, {
									"case":	271,
									"scores":	[-8.7404700543153]
								}, {
									"case":	272,
									"scores":	[-8.7404700543153]
								}, {
									"case":	273,
									"scores":	[-8.7404700543153]
								}, {
									"case":	274,
									"scores":	[-8.7404700543153]
								}, {
									"case":	275,
									"scores":	[-8.7404700543153]
								}, {
									"case":	276,
									"scores":	[-8.7404700543153]
								}, {
									"case":	277,
									"scores":	[-8.7404700543153]
								}, {
									"case":	278,
									"scores":	[-8.7404700543153]
								}, {
									"case":	279,
									"scores":	[-8.7404700543153]
								}, {
									"case":	280,
									"scores":	[-8.7404700543153]
								}, {
									"case":	281,
									"scores":	[-8.7404700543153]
								}, {
									"case":	282,
									"scores":	[-8.7404700543153]
								}, {
									"case":	283,
									"scores":	[-8.7404700543153]
								}, {
									"case":	284,
									"scores":	[-8.7404700543153]
								}, {
									"case":	285,
									"scores":	[-8.7404700543153]
								}, {
									"case":	286,
									"scores":	[-8.7404700543153]
								}, {
									"case":	287,
									"scores":	[-8.7404700543153]
								}, {
									"case":	288,
									"scores":	[-8.7404700543153]
								}, {
									"case":	289,
									"scores":	[-8.7404700543153]
								}, {
									"case":	290,
									"scores":	[-8.7404700543153]
								}, {
									"case":	291,
									"scores":	[-8.7404700543153]
								}, {
									"case":	292,
									"scores":	[-8.7404700543153]
								}, {
									"case":	293,
									"scores":	[-8.7404700543153]
								}, {
									"case":	294,
									"scores":	[-8.7404700543153]
								}, {
									"case":	295,
									"scores":	[-8.7404700543153]
								}, {
									"case":	296,
									"scores":	[-8.7404700543153]
								}, {
									"case":	297,
									"scores":	[-8.7404700543153]
								}, {
									"case":	298,
									"scores":	[-8.7404700543153]
								}, {
									"case":	299,
									"scores":	[-8.7404700543153]
								}, {
									"case":	300,
									"scores":	[-8.7404700543153]
								}, {
									"case":	301,
									"scores":	[-8.7404700543153]
								}, {
									"case":	302,
									"scores":	[-8.7404700543153]
								}, {
									"case":	303,
									"scores":	[-8.7404700543153]
								}, {
									"case":	304,
									"scores":	[-8.7404700543153]
								}, {
									"case":	305,
									"scores":	[-8.7404700543153]
								}, {
									"case":	306,
									"scores":	[-8.7404700543153]
								}, {
									"case":	307,
									"scores":	[-8.7404700543153]
								}, {
									"case":	308,
									"scores":	[-8.7404700543153]
								}, {
									"case":	309,
									"scores":	[-8.7404700543153]
								}, {
									"case":	310,
									"scores":	[-8.7404700543153]
								}, {
									"case":	311,
									"scores":	[-8.7404700543153]
								}, {
									"case":	312,
									"scores":	[-8.7404700543153]
								}, {
									"case":	313,
									"scores":	[-8.7404700543153]
								}, {
									"case":	314,
									"scores":	[-8.7404700543153]
								}, {
									"case":	315,
									"scores":	[-8.7404700543153]
								}, {
									"case":	316,
									"scores":	[-8.7404700543153]
								}, {
									"case":	317,
									"scores":	[-8.7404700543153]
								}, {
									"case":	318,
									"scores":	[-8.7404700543153]
								}, {
									"case":	319,
									"scores":	[-8.7404700543153]
								}, {
									"case":	320,
									"scores":	[-8.7404700543153]
								}, {
									"case":	321,
									"scores":	[-8.7404700543153]
								}, {
									"case":	322,
									"scores":	[-8.7404700543153]
								}, {
									"case":	323,
									"scores":	[-8.7404700543153]
								}, {
									"case":	324,
									"scores":	[-8.7404700543153]
								}, {
									"case":	325,
									"scores":	[-8.7404700543153]
								}, {
									"case":	326,
									"scores":	[-8.7404700543153]
								}, {
									"case":	327,
									"scores":	[-8.7404700543153]
								}, {
									"case":	328,
									"scores":	[-8.7404700543153]
								}, {
									"case":	329,
									"scores":	[-8.7404700543153]
								}, {
									"case":	330,
									"scores":	[-8.7404700543153]
								}, {
									"case":	331,
									"scores":	[-8.7404700543153]
								}, {
									"case":	332,
									"scores":	[-8.7404700543153]
								}, {
									"case":	333,
									"scores":	[-8.7404700543153]
								}, {
									"case":	334,
									"scores":	[-8.7404700543153]
								}, {
									"case":	335,
									"scores":	[-8.7404700543153]
								}, {
									"case":	336,
									"scores":	[-8.7404700543153]
								}, {
									"case":	337,
									"scores":	[-8.7404700543153]
								}, {
									"case":	338,
									"scores":	[-8.7404700543153]
								}, {
									"case":	339,
									"scores":	[-8.7404700543153]
								}, {
									"case":	340,
									"scores":	[-8.7404700543153]
								}, {
									"case":	341,
									"scores":	[-8.7404700543153]
								}, {
									"case":	342,
									"scores":	[-8.7404700543153]
								}, {
									"case":	343,
									"scores":	[-8.7404700543153]
								}, {
									"case":	344,
									"scores":	[-8.7404700543153]
								}, {
									"case":	345,
									"scores":	[-8.7404700543153]
								}, {
									"case":	346,
									"scores":	[-8.7404700543153]
								}, {
									"case":	347,
									"scores":	[-8.7404700543153]
								}, {
									"case":	348,
									"scores":	[-8.7404700543153]
								}, {
									"case":	349,
									"scores":	[-8.7404700543153]
								}, {
									"case":	350,
									"scores":	[-8.7404700543153]
								}, {
									"case":	351,
									"scores":	[-8.7404700543153]
								}, {
									"case":	352,
									"scores":	[-8.7404700543153]
								}, {
									"case":	353,
									"scores":	[-8.7404700543153]
								}, {
									"case":	354,
									"scores":	[-8.7404700543153]
								}, {
									"case":	355,
									"scores":	[-8.7404700543153]
								}, {
									"case":	356,
									"scores":	[-8.7404700543153]
								}, {
									"case":	357,
									"scores":	[-8.7404700543153]
								}, {
									"case":	358,
									"scores":	[-8.7404700543153]
								}, {
									"case":	359,
									"scores":	[-8.7404700543153]
								}, {
									"case":	360,
									"scores":	[-8.7404700543153]
								}, {
									"case":	361,
									"scores":	[-8.7404700543153]
								}, {
									"case":	362,
									"scores":	[-8.7404700543153]
								}, {
									"case":	363,
									"scores":	[-8.7404700543153]
								}, {
									"case":	364,
									"scores":	[-8.7404700543153]
								}, {
									"case":	365,
									"scores":	[-8.7404700543153]
								}, {
									"case":	366,
									"scores":	[-8.7404700543153]
								}, {
									"case":	367,
									"scores":	[-8.7404700543153]
								}, {
									"case":	368,
									"scores":	[-8.7404700543153]
								}, {
									"case":	369,
									"scores":	[-8.7404700543153]
								}, {
									"case":	370,
									"scores":	[-8.7404700543153]
								}, {
									"case":	371,
									"scores":	[-8.7404700543153]
								}, {
									"case":	372,
									"scores":	[-8.7404700543153]
								}, {
									"case":	373,
									"scores":	[-8.7404700543153]
								}, {
									"case":	374,
									"scores":	[-8.7404700543153]
								}, {
									"case":	375,
									"scores":	[-8.7404700543153]
								}, {
									"case":	376,
									"scores":	[-8.7404700543153]
								}, {
									"case":	377,
									"scores":	[-8.7404700543153]
								}, {
									"case":	378,
									"scores":	[-8.7404700543153]
								}, {
									"case":	379,
									"scores":	[-8.7404700543153]
								}, {
									"case":	380,
									"scores":	[-8.7404700543153]
								}, {
									"case":	381,
									"scores":	[-8.7404700543153]
								}, {
									"case":	382,
									"scores":	[-8.7404700543153]
								}, {
									"case":	383,
									"scores":	[-8.7404700543153]
								}, {
									"case":	384,
									"scores":	[-8.7404700543153]
								}, {
									"case":	385,
									"scores":	[-8.7404700543153]
								}, {
									"case":	386,
									"scores":	[-8.7404700543153]
								}, {
									"case":	387,
									"scores":	[-8.7404700543153]
								}, {
									"case":	388,
									"scores":	[-8.7404700543153]
								}, {
									"case":	389,
									"scores":	[-8.7404700543153]
								}, {
									"case":	390,
									"scores":	[-8.7404700543153]
								}, {
									"case":	391,
									"scores":	[-8.7404700543153]
								}, {
									"case":	392,
									"scores":	[-8.7404700543153]
								}, {
									"case":	393,
									"scores":	[-8.7404700543153]
								}, {
									"case":	394,
									"scores":	[-8.7404700543153]
								}, {
									"case":	395,
									"scores":	[-8.7404700543153]
								}, {
									"case":	396,
									"scores":	[-8.7404700543153]
								}, {
									"case":	397,
									"scores":	[-8.7404700543153]
								}, {
									"case":	398,
									"scores":	[-8.7404700543153]
								}, {
									"case":	399,
									"scores":	[-8.7404700543153]
								}, {
									"case":	400,
									"scores":	[-8.7404700543153]
								}, {
									"case":	401,
									"scores":	[-8.7404700543153]
								}, {
									"case":	402,
									"scores":	[-8.7404700543153]
								}, {
									"case":	403,
									"scores":	[-8.7404700543153]
								}, {
									"case":	404,
									"scores":	[-8.7404700543153]
								}, {
									"case":	405,
									"scores":	[-8.7404700543153]
								}, {
									"case":	406,
									"scores":	[-8.7404700543153]
								}, {
									"case":	407,
									"scores":	[-8.7404700543153]
								}, {
									"case":	408,
									"scores":	[-8.7404700543153]
								}, {
									"case":	409,
									"scores":	[-8.7404700543153]
								}, {
									"case":	410,
									"scores":	[-8.7404700543153]
								}, {
									"case":	411,
									"scores":	[-8.7404700543153]
								}, {
									"case":	412,
									"scores":	[-8.7404700543153]
								}, {
									"case":	413,
									"scores":	[-8.7404700543153]
								}, {
									"case":	414,
									"scores":	[-8.7404700543153]
								}, {
									"case":	415,
									"scores":	[-8.7404700543153]
								}, {
									"case":	416,
									"scores":	[-8.7404700543153]
								}, {
									"case":	417,
									"scores":	[-8.7404700543153]
								}, {
									"case":	418,
									"scores":	[-8.7404700543153]
								}, {
									"case":	419,
									"scores":	[-8.7404700543153]
								}, {
									"case":	420,
									"scores":	[-8.7404700543153]
								}, {
									"case":	421,
									"scores":	[-8.7404700543153]
								}, {
									"case":	422,
									"scores":	[-8.7404700543153]
								}, {
									"case":	423,
									"scores":	[-10.6527900051153, -10.8602658593153, -11.6234270581153, -10.5521314581153, -11.0827025703153, -10.3060925443153, -11.8375023381153, -11.6099890243153, -12.3218131413153, -12.1109240243153, -11.5799171641153, -12.3569629381153, -12.3569629381153, -10.8329432503153, -11.2967778503153, -11.5428167641153, -12.3569629381153, -12.3569629381153, -12.3218131413153, -11.6099890243153, -12.3218131413153, -12.3569629381153, -12.3569629381153, -12.3218131413153, -12.3218131413153, -12.3218131413153, -12.3569629381153, -12.3218131413153, -12.1109240243153, -12.1109240243153, -12.1109240243153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.1109240243153, -12.1109240243153, -12.1109240243153, -12.3569629381153, -12.3218131413153, -12.1109240243153, -12.1109240243153, -12.3569629381153, -12.1109240243153, -12.3569629381153, -12.3569629381153, -12.1109240243153, -12.3569629381153, -12.1109240243153, -12.1109240243153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.1109240243153, -12.3569629381153, -12.3218131413153, -12.1109240243153, -12.1109240243153, -12.3218131413153, -11.6099890243153, -12.1109240243153, -12.1109240243153, -12.3218131413153, -11.6099890243153, -12.3569629381153, -12.3218131413153, -12.3569629381153, -12.3569629381153, -12.3218131413153, -12.3218131413153, -12.3218131413153, -12.3569629381153, -12.3218131413153, -12.1109240243153, -12.1109240243153, -12.1109240243153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.1109240243153, -12.1109240243153, -12.1109240243153, -12.3569629381153, -12.3218131413153, -12.1109240243153, -12.1109240243153, -12.3569629381153, -12.1109240243153, -12.3569629381153, -12.3569629381153, -12.1109240243153, -12.3569629381153, -12.1109240243153, -12.1109240243153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.3569629381153, -12.1109240243153, -12.3569629381153, -12.3218131413153, -12.1109240243153]
								}]
						}, {
							"switch":	31,
							"types":	[[], [], [1], [], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	317,
							"begin_column":	3,
							"end_line":	317,
							"end_column":	20,
							"patch_codes":	["if (!__is_neg(\"\", \"L317\", 114, &(property_info), sizeof (property_info), &((executor_globals.std_property_info).offset), sizeof ((executor_globals.std_property_info).offset), &(ce), sizeof (ce), &((executor_globals.std_property_info).ce), sizeof ((executor_globals.std_property_info).ce), &(h), sizeof (h), &((executor_globals.std_property_info).h), sizeof ((executor_globals.std_property_info).h), &(member), sizeof (member), &((executor_globals.std_property_info).name_length), sizeof ((executor_globals.std_property_info).name_length), &((executor_globals.std_property_info).name), sizeof ((executor_globals.std_property_info).name), &((executor_globals.std_property_info).flags), sizeof ((executor_globals.std_property_info).flags), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &((executor_globals.std_property_info).doc_comment), sizeof ((executor_globals.std_property_info).doc_comment), &((executor_globals.std_property_info).doc_comment_len), sizeof ((executor_globals.std_property_info).doc_comment_len), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &(executor_globals.std_property_info.flags), sizeof (executor_globals.std_property_info.flags), &(executor_globals.std_property_info.name), sizeof (executor_globals.std_property_info.name), &(executor_globals.std_property_info.name_length), sizeof (executor_globals.std_property_info.name_length), &(executor_globals.std_property_info.h), sizeof (executor_globals.std_property_info.h), &(executor_globals.std_property_info.offset), sizeof (executor_globals.std_property_info.offset), &(executor_globals.std_property_info.doc_comment), sizeof (executor_globals.std_property_info.doc_comment), &(executor_globals.std_property_info.doc_comment_len), sizeof (executor_globals.std_property_info.doc_comment_len), &(executor_globals.std_property_info.ce), sizeof (executor_globals.std_property_info.ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    property_info = &(executor_globals.std_property_info);\n", "{\n}\n", "property_info = (property_info)", "property_info = (scope_property_info)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.2757119453153, -10.2104782743153, -10.6463549243153, -10.0529373743153, -9.2803183243153, -9.2950492743153, -11.0169179243153, -9.8537151043153, -10.6449861343153, -10.1757261343153, -10.7031202243153, -10.9336142343153, -10.9336142343153, -9.6232210943153, -9.6508813243153, -10.4087694243153, -10.9336142343153, -10.9336142343153, -10.6449861343153, -9.8537151043153, -10.6449861343153, -10.9336142343153, -10.9336142343153, -10.6449861343153, -10.6449861343153, -10.6449861343153, -10.9336142343153, -10.6449861343153, -10.1757261343153, -10.1757261343153, -10.1757261343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.1757261343153, -10.1757261343153, -10.1757261343153, -10.9336142343153, -10.6449861343153, -10.1757261343153, -10.1757261343153, -10.9336142343153, -10.1757261343153, -10.9336142343153, -10.9336142343153, -10.1757261343153, -10.9336142343153, -10.1757261343153, -10.1757261343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.1757261343153, -10.9336142343153, -10.6449861343153, -10.1757261343153, -10.1757261343153, -10.6449861343153, -9.8537151043153, -10.1757261343153, -10.1757261343153, -10.6449861343153, -9.8537151043153, -10.9336142343153, -10.6449861343153, -10.9336142343153, -10.9336142343153, -10.6449861343153, -10.6449861343153, -10.6449861343153, -10.9336142343153, -10.6449861343153, -10.1757261343153, -10.1757261343153, -10.1757261343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.1757261343153, -10.1757261343153, -10.1757261343153, -10.9336142343153, -10.6449861343153, -10.1757261343153, -10.1757261343153, -10.9336142343153, -10.1757261343153, -10.9336142343153, -10.9336142343153, -10.1757261343153, -10.9336142343153, -10.1757261343153, -10.1757261343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.9336142343153, -10.1757261343153, -10.9336142343153, -10.6449861343153, -10.1757261343153]
								}, {
									"case":	2,
									"scores":	[-8.7404700543153]
								}, {
									"case":	3,
									"scores":	[-8.7404700543153]
								}, {
									"case":	4,
									"scores":	[-8.7404700543153]
								}]
						}]
				}, {
					"line":	296,
					"switches":	[{
							"switch":	16,
							"types":	[[], [], [], [], [415], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], [], [], [], [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414], [303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], [], [], [], [], [], []],
							"begin_line":	297,
							"begin_column":	7,
							"end_line":	297,
							"end_column":	7,
							"patch_codes":	["memset(&(*member), 0, sizeof (*(&(*member))))", "memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array), 0, sizeof (*((executor_globals.active_op_array))))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset(ce, 0, sizeof (*(ce)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(key, 0, sizeof (*(key)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L297\", 16, &(property_info), sizeof (property_info), &(scope_property_info), sizeof (scope_property_info), &(denied_access), sizeof (denied_access), &(ce), sizeof (ce), &(silent), sizeof (silent), &(key), sizeof (key), &(member), sizeof (member), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(h), sizeof (h), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	2,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	3,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	4,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	5,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	6,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	7,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	8,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	9,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	10,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	11,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	12,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	13,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	14,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	15,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	16,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	17,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	18,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	19,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	20,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	21,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	22,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	23,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	24,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	25,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	26,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	27,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	28,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	29,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	30,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	31,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	32,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	33,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	34,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	35,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	36,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	37,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	38,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	39,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	40,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	41,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	42,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	43,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	44,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	45,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	46,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	47,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	48,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	49,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	50,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	51,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	52,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	53,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	54,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	55,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	56,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	57,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	58,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	59,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	60,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	61,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	62,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	63,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	64,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	65,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	66,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	67,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	68,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	69,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	70,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	71,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	72,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	73,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	74,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	75,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	76,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	77,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	78,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	79,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	80,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	81,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	82,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	83,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	84,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	85,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	86,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	87,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	88,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	89,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	90,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	91,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	92,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	93,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	94,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	95,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	96,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	97,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	98,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	99,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	100,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	101,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	102,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	103,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	104,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	105,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	106,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	107,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	108,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	109,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	110,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	111,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	112,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	113,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	114,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	115,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	116,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	117,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	118,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	119,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	120,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	121,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	122,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	123,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	124,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	125,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	126,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	127,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	128,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	129,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	130,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	131,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	132,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	133,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	134,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	135,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	136,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	137,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	138,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	139,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	140,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	141,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	142,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	143,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	144,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	145,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	146,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	147,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	148,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	149,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	150,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	151,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	152,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	153,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	154,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	155,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	156,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	157,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	158,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	159,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	160,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	161,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	162,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	163,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	164,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	165,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	166,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	167,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	168,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	169,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	170,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	171,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	172,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	173,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	174,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	175,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	176,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	177,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	178,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	179,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	180,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	181,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	182,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	183,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	184,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	185,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	186,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	187,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	188,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	189,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	190,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	191,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	192,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	193,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	194,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	195,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	196,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	197,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	198,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	199,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	200,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	201,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	202,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	203,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	204,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	205,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	206,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	207,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	208,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	209,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	210,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	211,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	212,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	213,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	214,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	215,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	216,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	217,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	218,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	219,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	220,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	221,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	222,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	223,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	224,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	225,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	226,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	227,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	228,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	229,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	230,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	231,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	232,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	233,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	234,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	235,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	236,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	237,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	238,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	239,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	240,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	241,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	242,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	243,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	244,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	245,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	246,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	247,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	248,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	249,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	250,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	251,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	252,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	253,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	254,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	255,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	256,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	257,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	258,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	259,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	260,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	261,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	262,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	263,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	264,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	265,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	266,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	267,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	268,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	269,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	270,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	271,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	272,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	273,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	274,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	275,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	276,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	277,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	278,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	279,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	280,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	281,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	282,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	283,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	284,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	285,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	286,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	287,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	288,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	289,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	290,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	291,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	292,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	293,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	294,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	295,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	296,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	297,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	298,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	299,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	300,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	301,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	302,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	303,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	304,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	305,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	306,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	307,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	308,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	309,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	310,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	311,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	312,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	313,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	314,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	315,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	316,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	317,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	318,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	319,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	320,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	321,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	322,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	323,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	324,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	325,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	326,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	327,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	328,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	329,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	330,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	331,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	332,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	333,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	334,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	335,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	336,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	337,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	338,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	339,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	340,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	341,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	342,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	343,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	344,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	345,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	346,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	347,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	348,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	349,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	350,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	351,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	352,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	353,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	354,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	355,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	356,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	357,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	358,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	359,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	360,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	361,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	362,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	363,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	364,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	365,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	366,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	367,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	368,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	369,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	370,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	371,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	372,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	373,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	374,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	375,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	376,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	377,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	378,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	379,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	380,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	381,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	382,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	383,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	384,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	385,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	386,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	387,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	388,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	389,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	390,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	391,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	392,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	393,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	394,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	395,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	396,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	397,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	398,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	399,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	400,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	401,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	402,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	403,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	404,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	405,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	406,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	407,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	408,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	409,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	410,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	411,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	412,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	413,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	414,
									"scores":	[-9.2253350299357653]
								}, {
									"case":	415,
									"scores":	[-12.916013149635766, -12.670048739735766, -12.255675823935764, -12.384257482635768, -11.960175225935764, -12.261845930635765, -11.635296491735765, -13.238155999935765, -10.707541825935765, -13.449045116935764, -12.737220999935765, -13.238155999935765, -13.238155999935765, -13.449045116935764, -12.737220999935765, -13.484194913735765]
								}]
						}, {
							"switch":	17,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	297,
							"begin_column":	9,
							"end_line":	318,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L297\", 16, &(property_info), sizeof (property_info), &(scope_property_info), sizeof (scope_property_info), &(denied_access), sizeof (denied_access), &(ce), sizeof (ce), &(silent), sizeof (silent), &(key), sizeof (key), &(member), sizeof (member), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(h), sizeof (h), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce))) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((property_info) || __is_neg(\"\", \"L297\", 16, &(property_info), sizeof (property_info), &(scope_property_info), sizeof (scope_property_info), &(denied_access), sizeof (denied_access), &(ce), sizeof (ce), &(silent), sizeof (silent), &(key), sizeof (key), &(member), sizeof (member), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(h), sizeof (h), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce))) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((property_info) && !__is_neg(\"\", \"L297\", 16, &(property_info), sizeof (property_info), &(scope_property_info), sizeof (scope_property_info), &(denied_access), sizeof (denied_access), &(ce), sizeof (ce), &(silent), sizeof (silent), &(key), sizeof (key), &(member), sizeof (member), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(h), sizeof (h), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce))) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-0.97352068552814552, -1.6153151645281461, 1.88266593547186, -1.2198176745281457, -0.829766834528145, -1.5221229745281457, 0.085934325471854756, -1.3822718745281457, -0.36251807452814466, -1.8515318745281455, -1.0602608445281456, -1.3822718745281457, -1.3822718745281457, -1.8515318745281455, -1.0602608445281456, -2.1401599745281459]
								}, {
									"case":	2,
									"scores":	[-4.4126269964281457, -5.0544214754281462, -1.5564403754281453, -4.6589239854281459, -4.2688731454281461, -4.9612292854281463, -3.3531719854281459, -4.8213781854281459, -3.8016243854281457, -5.2906381854281461, -4.4993671554281462, -4.8213781854281459, -4.8213781854281459, -5.2906381854281461, -4.4993671554281462, -5.5792662854281456]
								}, {
									"case":	3,
									"scores":	[-4.4126269964281457, -5.0544214754281462, -1.5564403754281453, -4.6589239854281459, -4.2688731454281461, -4.9612292854281463, -3.3531719854281459, -4.8213781854281459, -3.8016243854281457, -5.2906381854281461, -4.4993671554281462, -4.8213781854281459, -4.8213781854281459, -5.2906381854281461, -4.4993671554281462, -5.5792662854281456]
								}]
						}, {
							"switch":	32,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	297,
							"begin_column":	9,
							"end_line":	318,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L297\", 16, &(property_info), sizeof (property_info), &(scope_property_info), sizeof (scope_property_info), &(denied_access), sizeof (denied_access), &(ce), sizeof (ce), &(silent), sizeof (silent), &(key), sizeof (key), &(member), sizeof (member), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(h), sizeof (h), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce)))\n    if (property_info) {\n        if (__builtin_expect(denied_access != 0, 0)) {\n            if (!silent) {\n                zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n            }\n            return ((void *)0);\n        } else {\n            if (key) {\n                do {\n                    (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                    (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n                } while (0);\n            }\n        }\n    } else {\n        (executor_globals.std_property_info).flags = 256;\n        (executor_globals.std_property_info).name = (*member).value.str.val;\n        (executor_globals.std_property_info).name_length = (*member).value.str.len;\n        (executor_globals.std_property_info).h = h;\n        (executor_globals.std_property_info).ce = ce;\n        (executor_globals.std_property_info).offset = -1;\n        property_info = &(executor_globals.std_property_info);\n    }\n", "if (!__is_neg(\"\", \"L297\", 16, &(property_info), sizeof (property_info), &(scope_property_info), sizeof (scope_property_info), &(denied_access), sizeof (denied_access), &(ce), sizeof (ce), &(silent), sizeof (silent), &(key), sizeof (key), &(member), sizeof (member), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(h), sizeof (h), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce)) && (property_info)) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-11.219103920935765, -11.860898399935765, -8.3629172999357646, -11.465400909935765, -11.075350069935766, -11.767706209935765, -10.159648909935765, -11.627855109935766, -10.608101309935765, -12.097115109935766, -11.305844079935765, -11.627855109935766, -11.627855109935766, -12.097115109935766, -11.305844079935765, -12.385743209935764]
								}, {
									"case":	2,
									"scores":	[-11.022184920935764, -11.663979399935766, -8.1659982999357652, -11.268481909935765, -10.878431069935765, -11.570787209935766, -9.9627299099357653, -11.430936109935764, -10.411182309935764, -11.900196109935765, -11.108925079935766, -11.430936109935764, -11.430936109935764, -11.900196109935765, -11.108925079935766, -12.188824209935765]
								}]
						}]
				}, {
					"line":	287,
					"switches":	[{
							"switch":	14,
							"types":	[[], [], [], [], [417], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], [], [], [], [396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395], [], [], [], [], [], []],
							"begin_line":	288,
							"begin_column":	0,
							"end_line":	288,
							"end_column":	0,
							"patch_codes":	["memset(&(*member), 0, sizeof (*(&(*member))))", "memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array), 0, sizeof (*((executor_globals.active_op_array))))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope), 0, sizeof (*((executor_globals.scope))))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset(ce, 0, sizeof (*(ce)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(key, 0, sizeof (*(key)))", "memset(scope_property_info, 0, sizeof (*(scope_property_info)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L288\", 168, &(ce), sizeof (ce), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(member), sizeof (member), &(scope_property_info), sizeof (scope_property_info), &(h), sizeof (h), &(denied_access), sizeof (denied_access), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(property_info), sizeof (property_info), &(silent), sizeof (silent), &(ce->name), sizeof (ce->name), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((executor_globals.scope)->type), sizeof ((executor_globals.scope)->type), &((executor_globals.scope)->name), sizeof ((executor_globals.scope)->name), &((executor_globals.scope)->name_length), sizeof ((executor_globals.scope)->name_length), &((executor_globals.scope)->parent), sizeof ((executor_globals.scope)->parent), &((executor_globals.scope)->refcount), sizeof ((executor_globals.scope)->refcount), &((executor_globals.scope)->ce_flags), sizeof ((executor_globals.scope)->ce_flags), &((executor_globals.scope)->default_properties_table), sizeof ((executor_globals.scope)->default_properties_table), &((executor_globals.scope)->default_static_members_table), sizeof ((executor_globals.scope)->default_static_members_table), &((executor_globals.scope)->static_members_table), sizeof ((executor_globals.scope)->static_members_table), &((executor_globals.scope)->default_properties_count), sizeof ((executor_globals.scope)->default_properties_count), &((executor_globals.scope)->default_static_members_count), sizeof ((executor_globals.scope)->default_static_members_count), &((executor_globals.scope)->constructor), sizeof ((executor_globals.scope)->constructor), &((executor_globals.scope)->destructor), sizeof ((executor_globals.scope)->destructor), &((executor_globals.scope)->clone), sizeof ((executor_globals.scope)->clone), &((executor_globals.scope)->__get), sizeof ((executor_globals.scope)->__get), &((executor_globals.scope)->__set), sizeof ((executor_globals.scope)->__set), &((executor_globals.scope)->__unset), sizeof ((executor_globals.scope)->__unset), &((executor_globals.scope)->__isset), sizeof ((executor_globals.scope)->__isset), &((executor_globals.scope)->__call), sizeof ((executor_globals.scope)->__call), &((executor_globals.scope)->__callstatic), sizeof ((executor_globals.scope)->__callstatic), &((executor_globals.scope)->__tostring), sizeof ((executor_globals.scope)->__tostring), &((executor_globals.scope)->serialize_func), sizeof ((executor_globals.scope)->serialize_func), &((executor_globals.scope)->unserialize_func), sizeof ((executor_globals.scope)->unserialize_func), &((executor_globals.scope)->create_object), sizeof ((executor_globals.scope)->create_object), &((executor_globals.scope)->get_iterator), sizeof ((executor_globals.scope)->get_iterator), &((executor_globals.scope)->interface_gets_implemented), sizeof ((executor_globals.scope)->interface_gets_implemented), &((executor_globals.scope)->get_static_method), sizeof ((executor_globals.scope)->get_static_method), &((executor_globals.scope)->serialize), sizeof ((executor_globals.scope)->serialize), &((executor_globals.scope)->unserialize), sizeof ((executor_globals.scope)->unserialize), &((executor_globals.scope)->interfaces), sizeof ((executor_globals.scope)->interfaces), &((executor_globals.scope)->num_interfaces), sizeof ((executor_globals.scope)->num_interfaces), &((executor_globals.scope)->traits), sizeof ((executor_globals.scope)->traits), &((executor_globals.scope)->num_traits), sizeof ((executor_globals.scope)->num_traits), &((executor_globals.scope)->trait_aliases), sizeof ((executor_globals.scope)->trait_aliases), &((executor_globals.scope)->trait_precedences), sizeof ((executor_globals.scope)->trait_precedences), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.42736210311096]
								}, {
									"case":	2,
									"scores":	[-9.42736210311096]
								}, {
									"case":	3,
									"scores":	[-9.42736210311096]
								}, {
									"case":	4,
									"scores":	[-9.42736210311096]
								}, {
									"case":	5,
									"scores":	[-9.42736210311096]
								}, {
									"case":	6,
									"scores":	[-9.42736210311096]
								}, {
									"case":	7,
									"scores":	[-9.42736210311096]
								}, {
									"case":	8,
									"scores":	[-9.42736210311096]
								}, {
									"case":	9,
									"scores":	[-9.42736210311096]
								}, {
									"case":	10,
									"scores":	[-9.42736210311096]
								}, {
									"case":	11,
									"scores":	[-9.42736210311096]
								}, {
									"case":	12,
									"scores":	[-9.42736210311096]
								}, {
									"case":	13,
									"scores":	[-9.42736210311096]
								}, {
									"case":	14,
									"scores":	[-9.42736210311096]
								}, {
									"case":	15,
									"scores":	[-9.42736210311096]
								}, {
									"case":	16,
									"scores":	[-9.42736210311096]
								}, {
									"case":	17,
									"scores":	[-9.42736210311096]
								}, {
									"case":	18,
									"scores":	[-9.42736210311096]
								}, {
									"case":	19,
									"scores":	[-9.42736210311096]
								}, {
									"case":	20,
									"scores":	[-9.42736210311096]
								}, {
									"case":	21,
									"scores":	[-9.42736210311096]
								}, {
									"case":	22,
									"scores":	[-9.42736210311096]
								}, {
									"case":	23,
									"scores":	[-9.42736210311096]
								}, {
									"case":	24,
									"scores":	[-9.42736210311096]
								}, {
									"case":	25,
									"scores":	[-9.42736210311096]
								}, {
									"case":	26,
									"scores":	[-9.42736210311096]
								}, {
									"case":	27,
									"scores":	[-9.42736210311096]
								}, {
									"case":	28,
									"scores":	[-9.42736210311096]
								}, {
									"case":	29,
									"scores":	[-9.42736210311096]
								}, {
									"case":	30,
									"scores":	[-9.42736210311096]
								}, {
									"case":	31,
									"scores":	[-9.42736210311096]
								}, {
									"case":	32,
									"scores":	[-9.42736210311096]
								}, {
									"case":	33,
									"scores":	[-9.42736210311096]
								}, {
									"case":	34,
									"scores":	[-9.42736210311096]
								}, {
									"case":	35,
									"scores":	[-9.42736210311096]
								}, {
									"case":	36,
									"scores":	[-9.42736210311096]
								}, {
									"case":	37,
									"scores":	[-9.42736210311096]
								}, {
									"case":	38,
									"scores":	[-9.42736210311096]
								}, {
									"case":	39,
									"scores":	[-9.42736210311096]
								}, {
									"case":	40,
									"scores":	[-9.42736210311096]
								}, {
									"case":	41,
									"scores":	[-9.42736210311096]
								}, {
									"case":	42,
									"scores":	[-9.42736210311096]
								}, {
									"case":	43,
									"scores":	[-9.42736210311096]
								}, {
									"case":	44,
									"scores":	[-9.42736210311096]
								}, {
									"case":	45,
									"scores":	[-9.42736210311096]
								}, {
									"case":	46,
									"scores":	[-9.42736210311096]
								}, {
									"case":	47,
									"scores":	[-9.42736210311096]
								}, {
									"case":	48,
									"scores":	[-9.42736210311096]
								}, {
									"case":	49,
									"scores":	[-9.42736210311096]
								}, {
									"case":	50,
									"scores":	[-9.42736210311096]
								}, {
									"case":	51,
									"scores":	[-9.42736210311096]
								}, {
									"case":	52,
									"scores":	[-9.42736210311096]
								}, {
									"case":	53,
									"scores":	[-9.42736210311096]
								}, {
									"case":	54,
									"scores":	[-9.42736210311096]
								}, {
									"case":	55,
									"scores":	[-9.42736210311096]
								}, {
									"case":	56,
									"scores":	[-9.42736210311096]
								}, {
									"case":	57,
									"scores":	[-9.42736210311096]
								}, {
									"case":	58,
									"scores":	[-9.42736210311096]
								}, {
									"case":	59,
									"scores":	[-9.42736210311096]
								}, {
									"case":	60,
									"scores":	[-9.42736210311096]
								}, {
									"case":	61,
									"scores":	[-9.42736210311096]
								}, {
									"case":	62,
									"scores":	[-9.42736210311096]
								}, {
									"case":	63,
									"scores":	[-9.42736210311096]
								}, {
									"case":	64,
									"scores":	[-9.42736210311096]
								}, {
									"case":	65,
									"scores":	[-9.42736210311096]
								}, {
									"case":	66,
									"scores":	[-9.42736210311096]
								}, {
									"case":	67,
									"scores":	[-9.42736210311096]
								}, {
									"case":	68,
									"scores":	[-9.42736210311096]
								}, {
									"case":	69,
									"scores":	[-9.42736210311096]
								}, {
									"case":	70,
									"scores":	[-9.42736210311096]
								}, {
									"case":	71,
									"scores":	[-9.42736210311096]
								}, {
									"case":	72,
									"scores":	[-9.42736210311096]
								}, {
									"case":	73,
									"scores":	[-9.42736210311096]
								}, {
									"case":	74,
									"scores":	[-9.42736210311096]
								}, {
									"case":	75,
									"scores":	[-9.42736210311096]
								}, {
									"case":	76,
									"scores":	[-9.42736210311096]
								}, {
									"case":	77,
									"scores":	[-9.42736210311096]
								}, {
									"case":	78,
									"scores":	[-9.42736210311096]
								}, {
									"case":	79,
									"scores":	[-9.42736210311096]
								}, {
									"case":	80,
									"scores":	[-9.42736210311096]
								}, {
									"case":	81,
									"scores":	[-9.42736210311096]
								}, {
									"case":	82,
									"scores":	[-9.42736210311096]
								}, {
									"case":	83,
									"scores":	[-9.42736210311096]
								}, {
									"case":	84,
									"scores":	[-9.42736210311096]
								}, {
									"case":	85,
									"scores":	[-9.42736210311096]
								}, {
									"case":	86,
									"scores":	[-9.42736210311096]
								}, {
									"case":	87,
									"scores":	[-9.42736210311096]
								}, {
									"case":	88,
									"scores":	[-9.42736210311096]
								}, {
									"case":	89,
									"scores":	[-9.42736210311096]
								}, {
									"case":	90,
									"scores":	[-9.42736210311096]
								}, {
									"case":	91,
									"scores":	[-9.42736210311096]
								}, {
									"case":	92,
									"scores":	[-9.42736210311096]
								}, {
									"case":	93,
									"scores":	[-9.42736210311096]
								}, {
									"case":	94,
									"scores":	[-9.42736210311096]
								}, {
									"case":	95,
									"scores":	[-9.42736210311096]
								}, {
									"case":	96,
									"scores":	[-9.42736210311096]
								}, {
									"case":	97,
									"scores":	[-9.42736210311096]
								}, {
									"case":	98,
									"scores":	[-9.42736210311096]
								}, {
									"case":	99,
									"scores":	[-9.42736210311096]
								}, {
									"case":	100,
									"scores":	[-9.42736210311096]
								}, {
									"case":	101,
									"scores":	[-9.42736210311096]
								}, {
									"case":	102,
									"scores":	[-9.42736210311096]
								}, {
									"case":	103,
									"scores":	[-9.42736210311096]
								}, {
									"case":	104,
									"scores":	[-9.42736210311096]
								}, {
									"case":	105,
									"scores":	[-9.42736210311096]
								}, {
									"case":	106,
									"scores":	[-9.42736210311096]
								}, {
									"case":	107,
									"scores":	[-9.42736210311096]
								}, {
									"case":	108,
									"scores":	[-9.42736210311096]
								}, {
									"case":	109,
									"scores":	[-9.42736210311096]
								}, {
									"case":	110,
									"scores":	[-9.42736210311096]
								}, {
									"case":	111,
									"scores":	[-9.42736210311096]
								}, {
									"case":	112,
									"scores":	[-9.42736210311096]
								}, {
									"case":	113,
									"scores":	[-9.42736210311096]
								}, {
									"case":	114,
									"scores":	[-9.42736210311096]
								}, {
									"case":	115,
									"scores":	[-9.42736210311096]
								}, {
									"case":	116,
									"scores":	[-9.42736210311096]
								}, {
									"case":	117,
									"scores":	[-9.42736210311096]
								}, {
									"case":	118,
									"scores":	[-9.42736210311096]
								}, {
									"case":	119,
									"scores":	[-9.42736210311096]
								}, {
									"case":	120,
									"scores":	[-9.42736210311096]
								}, {
									"case":	121,
									"scores":	[-9.42736210311096]
								}, {
									"case":	122,
									"scores":	[-9.42736210311096]
								}, {
									"case":	123,
									"scores":	[-9.42736210311096]
								}, {
									"case":	124,
									"scores":	[-9.42736210311096]
								}, {
									"case":	125,
									"scores":	[-9.42736210311096]
								}, {
									"case":	126,
									"scores":	[-9.42736210311096]
								}, {
									"case":	127,
									"scores":	[-9.42736210311096]
								}, {
									"case":	128,
									"scores":	[-9.42736210311096]
								}, {
									"case":	129,
									"scores":	[-9.42736210311096]
								}, {
									"case":	130,
									"scores":	[-9.42736210311096]
								}, {
									"case":	131,
									"scores":	[-9.42736210311096]
								}, {
									"case":	132,
									"scores":	[-9.42736210311096]
								}, {
									"case":	133,
									"scores":	[-9.42736210311096]
								}, {
									"case":	134,
									"scores":	[-9.42736210311096]
								}, {
									"case":	135,
									"scores":	[-9.42736210311096]
								}, {
									"case":	136,
									"scores":	[-9.42736210311096]
								}, {
									"case":	137,
									"scores":	[-9.42736210311096]
								}, {
									"case":	138,
									"scores":	[-9.42736210311096]
								}, {
									"case":	139,
									"scores":	[-9.42736210311096]
								}, {
									"case":	140,
									"scores":	[-9.42736210311096]
								}, {
									"case":	141,
									"scores":	[-9.42736210311096]
								}, {
									"case":	142,
									"scores":	[-9.42736210311096]
								}, {
									"case":	143,
									"scores":	[-9.42736210311096]
								}, {
									"case":	144,
									"scores":	[-9.42736210311096]
								}, {
									"case":	145,
									"scores":	[-9.42736210311096]
								}, {
									"case":	146,
									"scores":	[-9.42736210311096]
								}, {
									"case":	147,
									"scores":	[-9.42736210311096]
								}, {
									"case":	148,
									"scores":	[-9.42736210311096]
								}, {
									"case":	149,
									"scores":	[-9.42736210311096]
								}, {
									"case":	150,
									"scores":	[-9.42736210311096]
								}, {
									"case":	151,
									"scores":	[-9.42736210311096]
								}, {
									"case":	152,
									"scores":	[-9.42736210311096]
								}, {
									"case":	153,
									"scores":	[-9.42736210311096]
								}, {
									"case":	154,
									"scores":	[-9.42736210311096]
								}, {
									"case":	155,
									"scores":	[-9.42736210311096]
								}, {
									"case":	156,
									"scores":	[-9.42736210311096]
								}, {
									"case":	157,
									"scores":	[-9.42736210311096]
								}, {
									"case":	158,
									"scores":	[-9.42736210311096]
								}, {
									"case":	159,
									"scores":	[-9.42736210311096]
								}, {
									"case":	160,
									"scores":	[-9.42736210311096]
								}, {
									"case":	161,
									"scores":	[-9.42736210311096]
								}, {
									"case":	162,
									"scores":	[-9.42736210311096]
								}, {
									"case":	163,
									"scores":	[-9.42736210311096]
								}, {
									"case":	164,
									"scores":	[-9.42736210311096]
								}, {
									"case":	165,
									"scores":	[-9.42736210311096]
								}, {
									"case":	166,
									"scores":	[-9.42736210311096]
								}, {
									"case":	167,
									"scores":	[-9.42736210311096]
								}, {
									"case":	168,
									"scores":	[-9.42736210311096]
								}, {
									"case":	169,
									"scores":	[-9.42736210311096]
								}, {
									"case":	170,
									"scores":	[-9.42736210311096]
								}, {
									"case":	171,
									"scores":	[-9.42736210311096]
								}, {
									"case":	172,
									"scores":	[-9.42736210311096]
								}, {
									"case":	173,
									"scores":	[-9.42736210311096]
								}, {
									"case":	174,
									"scores":	[-9.42736210311096]
								}, {
									"case":	175,
									"scores":	[-9.42736210311096]
								}, {
									"case":	176,
									"scores":	[-9.42736210311096]
								}, {
									"case":	177,
									"scores":	[-9.42736210311096]
								}, {
									"case":	178,
									"scores":	[-9.42736210311096]
								}, {
									"case":	179,
									"scores":	[-9.42736210311096]
								}, {
									"case":	180,
									"scores":	[-9.42736210311096]
								}, {
									"case":	181,
									"scores":	[-9.42736210311096]
								}, {
									"case":	182,
									"scores":	[-9.42736210311096]
								}, {
									"case":	183,
									"scores":	[-9.42736210311096]
								}, {
									"case":	184,
									"scores":	[-9.42736210311096]
								}, {
									"case":	185,
									"scores":	[-9.42736210311096]
								}, {
									"case":	186,
									"scores":	[-9.42736210311096]
								}, {
									"case":	187,
									"scores":	[-9.42736210311096]
								}, {
									"case":	188,
									"scores":	[-9.42736210311096]
								}, {
									"case":	189,
									"scores":	[-9.42736210311096]
								}, {
									"case":	190,
									"scores":	[-9.42736210311096]
								}, {
									"case":	191,
									"scores":	[-9.42736210311096]
								}, {
									"case":	192,
									"scores":	[-9.42736210311096]
								}, {
									"case":	193,
									"scores":	[-9.42736210311096]
								}, {
									"case":	194,
									"scores":	[-9.42736210311096]
								}, {
									"case":	195,
									"scores":	[-9.42736210311096]
								}, {
									"case":	196,
									"scores":	[-9.42736210311096]
								}, {
									"case":	197,
									"scores":	[-9.42736210311096]
								}, {
									"case":	198,
									"scores":	[-9.42736210311096]
								}, {
									"case":	199,
									"scores":	[-9.42736210311096]
								}, {
									"case":	200,
									"scores":	[-9.42736210311096]
								}, {
									"case":	201,
									"scores":	[-9.42736210311096]
								}, {
									"case":	202,
									"scores":	[-9.42736210311096]
								}, {
									"case":	203,
									"scores":	[-9.42736210311096]
								}, {
									"case":	204,
									"scores":	[-9.42736210311096]
								}, {
									"case":	205,
									"scores":	[-9.42736210311096]
								}, {
									"case":	206,
									"scores":	[-9.42736210311096]
								}, {
									"case":	207,
									"scores":	[-9.42736210311096]
								}, {
									"case":	208,
									"scores":	[-9.42736210311096]
								}, {
									"case":	209,
									"scores":	[-9.42736210311096]
								}, {
									"case":	210,
									"scores":	[-9.42736210311096]
								}, {
									"case":	211,
									"scores":	[-9.42736210311096]
								}, {
									"case":	212,
									"scores":	[-9.42736210311096]
								}, {
									"case":	213,
									"scores":	[-9.42736210311096]
								}, {
									"case":	214,
									"scores":	[-9.42736210311096]
								}, {
									"case":	215,
									"scores":	[-9.42736210311096]
								}, {
									"case":	216,
									"scores":	[-9.42736210311096]
								}, {
									"case":	217,
									"scores":	[-9.42736210311096]
								}, {
									"case":	218,
									"scores":	[-9.42736210311096]
								}, {
									"case":	219,
									"scores":	[-9.42736210311096]
								}, {
									"case":	220,
									"scores":	[-9.42736210311096]
								}, {
									"case":	221,
									"scores":	[-9.42736210311096]
								}, {
									"case":	222,
									"scores":	[-9.42736210311096]
								}, {
									"case":	223,
									"scores":	[-9.42736210311096]
								}, {
									"case":	224,
									"scores":	[-9.42736210311096]
								}, {
									"case":	225,
									"scores":	[-9.42736210311096]
								}, {
									"case":	226,
									"scores":	[-9.42736210311096]
								}, {
									"case":	227,
									"scores":	[-9.42736210311096]
								}, {
									"case":	228,
									"scores":	[-9.42736210311096]
								}, {
									"case":	229,
									"scores":	[-9.42736210311096]
								}, {
									"case":	230,
									"scores":	[-9.42736210311096]
								}, {
									"case":	231,
									"scores":	[-9.42736210311096]
								}, {
									"case":	232,
									"scores":	[-9.42736210311096]
								}, {
									"case":	233,
									"scores":	[-9.42736210311096]
								}, {
									"case":	234,
									"scores":	[-9.42736210311096]
								}, {
									"case":	235,
									"scores":	[-9.42736210311096]
								}, {
									"case":	236,
									"scores":	[-9.42736210311096]
								}, {
									"case":	237,
									"scores":	[-9.42736210311096]
								}, {
									"case":	238,
									"scores":	[-9.42736210311096]
								}, {
									"case":	239,
									"scores":	[-9.42736210311096]
								}, {
									"case":	240,
									"scores":	[-9.42736210311096]
								}, {
									"case":	241,
									"scores":	[-9.42736210311096]
								}, {
									"case":	242,
									"scores":	[-9.42736210311096]
								}, {
									"case":	243,
									"scores":	[-9.42736210311096]
								}, {
									"case":	244,
									"scores":	[-9.42736210311096]
								}, {
									"case":	245,
									"scores":	[-9.42736210311096]
								}, {
									"case":	246,
									"scores":	[-9.42736210311096]
								}, {
									"case":	247,
									"scores":	[-9.42736210311096]
								}, {
									"case":	248,
									"scores":	[-9.42736210311096]
								}, {
									"case":	249,
									"scores":	[-9.42736210311096]
								}, {
									"case":	250,
									"scores":	[-9.42736210311096]
								}, {
									"case":	251,
									"scores":	[-9.42736210311096]
								}, {
									"case":	252,
									"scores":	[-9.42736210311096]
								}, {
									"case":	253,
									"scores":	[-9.42736210311096]
								}, {
									"case":	254,
									"scores":	[-9.42736210311096]
								}, {
									"case":	255,
									"scores":	[-9.42736210311096]
								}, {
									"case":	256,
									"scores":	[-9.42736210311096]
								}, {
									"case":	257,
									"scores":	[-9.42736210311096]
								}, {
									"case":	258,
									"scores":	[-9.42736210311096]
								}, {
									"case":	259,
									"scores":	[-9.42736210311096]
								}, {
									"case":	260,
									"scores":	[-9.42736210311096]
								}, {
									"case":	261,
									"scores":	[-9.42736210311096]
								}, {
									"case":	262,
									"scores":	[-9.42736210311096]
								}, {
									"case":	263,
									"scores":	[-9.42736210311096]
								}, {
									"case":	264,
									"scores":	[-9.42736210311096]
								}, {
									"case":	265,
									"scores":	[-9.42736210311096]
								}, {
									"case":	266,
									"scores":	[-9.42736210311096]
								}, {
									"case":	267,
									"scores":	[-9.42736210311096]
								}, {
									"case":	268,
									"scores":	[-9.42736210311096]
								}, {
									"case":	269,
									"scores":	[-9.42736210311096]
								}, {
									"case":	270,
									"scores":	[-9.42736210311096]
								}, {
									"case":	271,
									"scores":	[-9.42736210311096]
								}, {
									"case":	272,
									"scores":	[-9.42736210311096]
								}, {
									"case":	273,
									"scores":	[-9.42736210311096]
								}, {
									"case":	274,
									"scores":	[-9.42736210311096]
								}, {
									"case":	275,
									"scores":	[-9.42736210311096]
								}, {
									"case":	276,
									"scores":	[-9.42736210311096]
								}, {
									"case":	277,
									"scores":	[-9.42736210311096]
								}, {
									"case":	278,
									"scores":	[-9.42736210311096]
								}, {
									"case":	279,
									"scores":	[-9.42736210311096]
								}, {
									"case":	280,
									"scores":	[-9.42736210311096]
								}, {
									"case":	281,
									"scores":	[-9.42736210311096]
								}, {
									"case":	282,
									"scores":	[-9.42736210311096]
								}, {
									"case":	283,
									"scores":	[-9.42736210311096]
								}, {
									"case":	284,
									"scores":	[-9.42736210311096]
								}, {
									"case":	285,
									"scores":	[-9.42736210311096]
								}, {
									"case":	286,
									"scores":	[-9.42736210311096]
								}, {
									"case":	287,
									"scores":	[-9.42736210311096]
								}, {
									"case":	288,
									"scores":	[-9.42736210311096]
								}, {
									"case":	289,
									"scores":	[-9.42736210311096]
								}, {
									"case":	290,
									"scores":	[-9.42736210311096]
								}, {
									"case":	291,
									"scores":	[-9.42736210311096]
								}, {
									"case":	292,
									"scores":	[-9.42736210311096]
								}, {
									"case":	293,
									"scores":	[-9.42736210311096]
								}, {
									"case":	294,
									"scores":	[-9.42736210311096]
								}, {
									"case":	295,
									"scores":	[-9.42736210311096]
								}, {
									"case":	296,
									"scores":	[-9.42736210311096]
								}, {
									"case":	297,
									"scores":	[-9.42736210311096]
								}, {
									"case":	298,
									"scores":	[-9.42736210311096]
								}, {
									"case":	299,
									"scores":	[-9.42736210311096]
								}, {
									"case":	300,
									"scores":	[-9.42736210311096]
								}, {
									"case":	301,
									"scores":	[-9.42736210311096]
								}, {
									"case":	302,
									"scores":	[-9.42736210311096]
								}, {
									"case":	303,
									"scores":	[-9.42736210311096]
								}, {
									"case":	304,
									"scores":	[-9.42736210311096]
								}, {
									"case":	305,
									"scores":	[-9.42736210311096]
								}, {
									"case":	306,
									"scores":	[-9.42736210311096]
								}, {
									"case":	307,
									"scores":	[-9.42736210311096]
								}, {
									"case":	308,
									"scores":	[-9.42736210311096]
								}, {
									"case":	309,
									"scores":	[-9.42736210311096]
								}, {
									"case":	310,
									"scores":	[-9.42736210311096]
								}, {
									"case":	311,
									"scores":	[-9.42736210311096]
								}, {
									"case":	312,
									"scores":	[-9.42736210311096]
								}, {
									"case":	313,
									"scores":	[-9.42736210311096]
								}, {
									"case":	314,
									"scores":	[-9.42736210311096]
								}, {
									"case":	315,
									"scores":	[-9.42736210311096]
								}, {
									"case":	316,
									"scores":	[-9.42736210311096]
								}, {
									"case":	317,
									"scores":	[-9.42736210311096]
								}, {
									"case":	318,
									"scores":	[-9.42736210311096]
								}, {
									"case":	319,
									"scores":	[-9.42736210311096]
								}, {
									"case":	320,
									"scores":	[-9.42736210311096]
								}, {
									"case":	321,
									"scores":	[-9.42736210311096]
								}, {
									"case":	322,
									"scores":	[-9.42736210311096]
								}, {
									"case":	323,
									"scores":	[-9.42736210311096]
								}, {
									"case":	324,
									"scores":	[-9.42736210311096]
								}, {
									"case":	325,
									"scores":	[-9.42736210311096]
								}, {
									"case":	326,
									"scores":	[-9.42736210311096]
								}, {
									"case":	327,
									"scores":	[-9.42736210311096]
								}, {
									"case":	328,
									"scores":	[-9.42736210311096]
								}, {
									"case":	329,
									"scores":	[-9.42736210311096]
								}, {
									"case":	330,
									"scores":	[-9.42736210311096]
								}, {
									"case":	331,
									"scores":	[-9.42736210311096]
								}, {
									"case":	332,
									"scores":	[-9.42736210311096]
								}, {
									"case":	333,
									"scores":	[-9.42736210311096]
								}, {
									"case":	334,
									"scores":	[-9.42736210311096]
								}, {
									"case":	335,
									"scores":	[-9.42736210311096]
								}, {
									"case":	336,
									"scores":	[-9.42736210311096]
								}, {
									"case":	337,
									"scores":	[-9.42736210311096]
								}, {
									"case":	338,
									"scores":	[-9.42736210311096]
								}, {
									"case":	339,
									"scores":	[-9.42736210311096]
								}, {
									"case":	340,
									"scores":	[-9.42736210311096]
								}, {
									"case":	341,
									"scores":	[-9.42736210311096]
								}, {
									"case":	342,
									"scores":	[-9.42736210311096]
								}, {
									"case":	343,
									"scores":	[-9.42736210311096]
								}, {
									"case":	344,
									"scores":	[-9.42736210311096]
								}, {
									"case":	345,
									"scores":	[-9.42736210311096]
								}, {
									"case":	346,
									"scores":	[-9.42736210311096]
								}, {
									"case":	347,
									"scores":	[-9.42736210311096]
								}, {
									"case":	348,
									"scores":	[-9.42736210311096]
								}, {
									"case":	349,
									"scores":	[-9.42736210311096]
								}, {
									"case":	350,
									"scores":	[-9.42736210311096]
								}, {
									"case":	351,
									"scores":	[-9.42736210311096]
								}, {
									"case":	352,
									"scores":	[-9.42736210311096]
								}, {
									"case":	353,
									"scores":	[-9.42736210311096]
								}, {
									"case":	354,
									"scores":	[-9.42736210311096]
								}, {
									"case":	355,
									"scores":	[-9.42736210311096]
								}, {
									"case":	356,
									"scores":	[-9.42736210311096]
								}, {
									"case":	357,
									"scores":	[-9.42736210311096]
								}, {
									"case":	358,
									"scores":	[-9.42736210311096]
								}, {
									"case":	359,
									"scores":	[-9.42736210311096]
								}, {
									"case":	360,
									"scores":	[-9.42736210311096]
								}, {
									"case":	361,
									"scores":	[-9.42736210311096]
								}, {
									"case":	362,
									"scores":	[-9.42736210311096]
								}, {
									"case":	363,
									"scores":	[-9.42736210311096]
								}, {
									"case":	364,
									"scores":	[-9.42736210311096]
								}, {
									"case":	365,
									"scores":	[-9.42736210311096]
								}, {
									"case":	366,
									"scores":	[-9.42736210311096]
								}, {
									"case":	367,
									"scores":	[-9.42736210311096]
								}, {
									"case":	368,
									"scores":	[-9.42736210311096]
								}, {
									"case":	369,
									"scores":	[-9.42736210311096]
								}, {
									"case":	370,
									"scores":	[-9.42736210311096]
								}, {
									"case":	371,
									"scores":	[-9.42736210311096]
								}, {
									"case":	372,
									"scores":	[-9.42736210311096]
								}, {
									"case":	373,
									"scores":	[-9.42736210311096]
								}, {
									"case":	374,
									"scores":	[-9.42736210311096]
								}, {
									"case":	375,
									"scores":	[-9.42736210311096]
								}, {
									"case":	376,
									"scores":	[-9.42736210311096]
								}, {
									"case":	377,
									"scores":	[-9.42736210311096]
								}, {
									"case":	378,
									"scores":	[-9.42736210311096]
								}, {
									"case":	379,
									"scores":	[-9.42736210311096]
								}, {
									"case":	380,
									"scores":	[-9.42736210311096]
								}, {
									"case":	381,
									"scores":	[-9.42736210311096]
								}, {
									"case":	382,
									"scores":	[-9.42736210311096]
								}, {
									"case":	383,
									"scores":	[-9.42736210311096]
								}, {
									"case":	384,
									"scores":	[-9.42736210311096]
								}, {
									"case":	385,
									"scores":	[-9.42736210311096]
								}, {
									"case":	386,
									"scores":	[-9.42736210311096]
								}, {
									"case":	387,
									"scores":	[-9.42736210311096]
								}, {
									"case":	388,
									"scores":	[-9.42736210311096]
								}, {
									"case":	389,
									"scores":	[-9.42736210311096]
								}, {
									"case":	390,
									"scores":	[-9.42736210311096]
								}, {
									"case":	391,
									"scores":	[-9.42736210311096]
								}, {
									"case":	392,
									"scores":	[-9.42736210311096]
								}, {
									"case":	393,
									"scores":	[-9.42736210311096]
								}, {
									"case":	394,
									"scores":	[-9.42736210311096]
								}, {
									"case":	395,
									"scores":	[-9.42736210311096]
								}, {
									"case":	396,
									"scores":	[-9.42736210311096]
								}, {
									"case":	397,
									"scores":	[-9.42736210311096]
								}, {
									"case":	398,
									"scores":	[-9.42736210311096]
								}, {
									"case":	399,
									"scores":	[-9.42736210311096]
								}, {
									"case":	400,
									"scores":	[-9.42736210311096]
								}, {
									"case":	401,
									"scores":	[-9.42736210311096]
								}, {
									"case":	402,
									"scores":	[-9.42736210311096]
								}, {
									"case":	403,
									"scores":	[-9.42736210311096]
								}, {
									"case":	404,
									"scores":	[-9.42736210311096]
								}, {
									"case":	405,
									"scores":	[-9.42736210311096]
								}, {
									"case":	406,
									"scores":	[-9.42736210311096]
								}, {
									"case":	407,
									"scores":	[-9.42736210311096]
								}, {
									"case":	408,
									"scores":	[-9.42736210311096]
								}, {
									"case":	409,
									"scores":	[-9.42736210311096]
								}, {
									"case":	410,
									"scores":	[-9.42736210311096]
								}, {
									"case":	411,
									"scores":	[-9.42736210311096]
								}, {
									"case":	412,
									"scores":	[-9.42736210311096]
								}, {
									"case":	413,
									"scores":	[-9.42736210311096]
								}, {
									"case":	414,
									"scores":	[-9.42736210311096]
								}, {
									"case":	415,
									"scores":	[-9.42736210311096]
								}, {
									"case":	416,
									"scores":	[-9.42736210311096]
								}, {
									"case":	417,
									"scores":	[-13.562192328810958, -15.456818428810958, -15.456818428810958, -13.335867924910961, -14.25475714681096, -9.65744353011096, -12.594944732110958, -14.17296142381096, -14.95000719781096, -14.95000719781096, -13.093827007810958, -13.550102299110961, -14.203778301110958, -14.828083073110959, -14.327148073110958, -15.07412198691096, -14.828083073110959, -14.828083073110959, -15.038972190110957, -15.038972190110957, -15.038972190110957, -14.828083073110959, -14.828083073110959, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -14.828083073110959, -14.828083073110959, -14.828083073110959, -14.828083073110959, -14.828083073110959, -14.828083073110959, -15.038972190110957, -14.828083073110959, -15.038972190110957, -14.828083073110959, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.07412198691096, -15.07412198691096, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.07412198691096, -15.038972190110957, -14.828083073110959, -14.828083073110959, -14.828083073110959, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -14.828083073110959, -14.828083073110959, -14.828083073110959, -15.07412198691096, -15.038972190110957, -14.828083073110959, -14.828083073110959, -15.07412198691096, -14.828083073110959, -15.07412198691096, -15.07412198691096, -14.828083073110959, -15.07412198691096, -14.828083073110959, -14.828083073110959, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -14.828083073110959, -15.07412198691096, -15.038972190110957, -14.828083073110959, -14.828083073110959, -15.038972190110957, -14.327148073110958, -15.07412198691096, -14.828083073110959, -14.828083073110959, -15.038972190110957, -15.038972190110957, -15.038972190110957, -14.828083073110959, -14.828083073110959, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.038972190110957, -14.828083073110959, -14.828083073110959, -14.828083073110959, -14.828083073110959, -14.828083073110959, -14.828083073110959, -15.038972190110957, -14.828083073110959, -15.038972190110957, -14.828083073110959, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.07412198691096, -15.07412198691096, -15.038972190110957, -15.038972190110957, -15.038972190110957, -15.07412198691096, -15.038972190110957, -14.828083073110959, -14.828083073110959, -14.828083073110959, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -14.828083073110959, -14.828083073110959, -14.828083073110959, -15.07412198691096, -15.038972190110957, -14.828083073110959, -14.828083073110959, -15.07412198691096, -14.828083073110959, -15.07412198691096, -15.07412198691096, -14.828083073110959, -15.07412198691096, -14.828083073110959, -14.828083073110959, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -15.07412198691096, -14.828083073110959, -15.07412198691096, -15.038972190110957, -14.828083073110959]
								}]
						}, {
							"switch":	15,
							"types":	[[12], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [9, 10, 11], [], [4, 5, 6, 7, 8]],
							"begin_line":	288,
							"begin_column":	2,
							"end_line":	318,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L288\", 160, &(scope_property_info), sizeof (scope_property_info), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(member), sizeof (member), &(key), sizeof (key), &(h), sizeof (h), &(executor_globals.scope), sizeof (executor_globals.scope), &((*member).value.str.val), sizeof ((*member).value.str.val), &((*member).value.str.len), sizeof ((*member).value.str.len), &(executor_globals.scope), sizeof (executor_globals.scope), &(ce), sizeof (ce), &(key->cache_slot), sizeof (key->cache_slot), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(property_info), sizeof (property_info), &(denied_access), sizeof (denied_access), &(silent), sizeof (silent), &(key->hash_value), sizeof (key->hash_value), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((executor_globals.scope)->type), sizeof ((executor_globals.scope)->type), &((executor_globals.scope)->name), sizeof ((executor_globals.scope)->name), &((executor_globals.scope)->name_length), sizeof ((executor_globals.scope)->name_length), &((executor_globals.scope)->parent), sizeof ((executor_globals.scope)->parent), &((executor_globals.scope)->refcount), sizeof ((executor_globals.scope)->refcount), &((executor_globals.scope)->ce_flags), sizeof ((executor_globals.scope)->ce_flags), &((executor_globals.scope)->default_properties_table), sizeof ((executor_globals.scope)->default_properties_table), &((executor_globals.scope)->default_static_members_table), sizeof ((executor_globals.scope)->default_static_members_table), &((executor_globals.scope)->static_members_table), sizeof ((executor_globals.scope)->static_members_table), &((executor_globals.scope)->default_properties_count), sizeof ((executor_globals.scope)->default_properties_count), &((executor_globals.scope)->default_static_members_count), sizeof ((executor_globals.scope)->default_static_members_count), &((executor_globals.scope)->constructor), sizeof ((executor_globals.scope)->constructor), &((executor_globals.scope)->destructor), sizeof ((executor_globals.scope)->destructor), &((executor_globals.scope)->clone), sizeof ((executor_globals.scope)->clone), &((executor_globals.scope)->__get), sizeof ((executor_globals.scope)->__get), &((executor_globals.scope)->__set), sizeof ((executor_globals.scope)->__set), &((executor_globals.scope)->__unset), sizeof ((executor_globals.scope)->__unset), &((executor_globals.scope)->__isset), sizeof ((executor_globals.scope)->__isset), &((executor_globals.scope)->__call), sizeof ((executor_globals.scope)->__call), &((executor_globals.scope)->__callstatic), sizeof ((executor_globals.scope)->__callstatic), &((executor_globals.scope)->__tostring), sizeof ((executor_globals.scope)->__tostring), &((executor_globals.scope)->serialize_func), sizeof ((executor_globals.scope)->serialize_func), &((executor_globals.scope)->unserialize_func), sizeof ((executor_globals.scope)->unserialize_func), &((executor_globals.scope)->create_object), sizeof ((executor_globals.scope)->create_object), &((executor_globals.scope)->get_iterator), sizeof ((executor_globals.scope)->get_iterator), &((executor_globals.scope)->interface_gets_implemented), sizeof ((executor_globals.scope)->interface_gets_implemented), &((executor_globals.scope)->get_static_method), sizeof ((executor_globals.scope)->get_static_method), &((executor_globals.scope)->serialize), sizeof ((executor_globals.scope)->serialize), &((executor_globals.scope)->unserialize), sizeof ((executor_globals.scope)->unserialize), &((executor_globals.scope)->interfaces), sizeof ((executor_globals.scope)->interfaces), &((executor_globals.scope)->num_interfaces), sizeof ((executor_globals.scope)->num_interfaces), &((executor_globals.scope)->traits), sizeof ((executor_globals.scope)->traits), &((executor_globals.scope)->num_traits), sizeof ((executor_globals.scope)->num_traits), &((executor_globals.scope)->trait_aliases), sizeof ((executor_globals.scope)->trait_aliases), &((executor_globals.scope)->trait_precedences), sizeof ((executor_globals.scope)->trait_precedences), &((executor_globals.scope)->properties_info.nTableSize), sizeof ((executor_globals.scope)->properties_info.nTableSize), &((executor_globals.scope)->properties_info.nTableMask), sizeof ((executor_globals.scope)->properties_info.nTableMask), &((executor_globals.scope)->properties_info.nNumOfElements), sizeof ((executor_globals.scope)->properties_info.nNumOfElements), &((executor_globals.scope)->properties_info.nNextFreeElement), sizeof ((executor_globals.scope)->properties_info.nNextFreeElement), &((executor_globals.scope)->properties_info.pInternalPointer), sizeof ((executor_globals.scope)->properties_info.pInternalPointer), &((executor_globals.scope)->properties_info.pListHead), sizeof ((executor_globals.scope)->properties_info.pListHead), &((executor_globals.scope)->properties_info.pListTail), sizeof ((executor_globals.scope)->properties_info.pListTail), &((executor_globals.scope)->properties_info.arBuckets), sizeof ((executor_globals.scope)->properties_info.arBuckets), &((executor_globals.scope)->properties_info.pDestructor), sizeof ((executor_globals.scope)->properties_info.pDestructor), &((executor_globals.scope)->properties_info.persistent), sizeof ((executor_globals.scope)->properties_info.persistent), &((executor_globals.scope)->properties_info.nApplyCount), sizeof ((executor_globals.scope)->properties_info.nApplyCount), &((executor_globals.scope)->properties_info.bApplyProtection), sizeof ((executor_globals.scope)->properties_info.bApplyProtection), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0) || __is_neg(\"\", \"L288\", 160, &(scope_property_info), sizeof (scope_property_info), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(member), sizeof (member), &(key), sizeof (key), &(h), sizeof (h), &(executor_globals.scope), sizeof (executor_globals.scope), &((*member).value.str.val), sizeof ((*member).value.str.val), &((*member).value.str.len), sizeof ((*member).value.str.len), &(executor_globals.scope), sizeof (executor_globals.scope), &(ce), sizeof (ce), &(key->cache_slot), sizeof (key->cache_slot), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(property_info), sizeof (property_info), &(denied_access), sizeof (denied_access), &(silent), sizeof (silent), &(key->hash_value), sizeof (key->hash_value), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((executor_globals.scope)->type), sizeof ((executor_globals.scope)->type), &((executor_globals.scope)->name), sizeof ((executor_globals.scope)->name), &((executor_globals.scope)->name_length), sizeof ((executor_globals.scope)->name_length), &((executor_globals.scope)->parent), sizeof ((executor_globals.scope)->parent), &((executor_globals.scope)->refcount), sizeof ((executor_globals.scope)->refcount), &((executor_globals.scope)->ce_flags), sizeof ((executor_globals.scope)->ce_flags), &((executor_globals.scope)->default_properties_table), sizeof ((executor_globals.scope)->default_properties_table), &((executor_globals.scope)->default_static_members_table), sizeof ((executor_globals.scope)->default_static_members_table), &((executor_globals.scope)->static_members_table), sizeof ((executor_globals.scope)->static_members_table), &((executor_globals.scope)->default_properties_count), sizeof ((executor_globals.scope)->default_properties_count), &((executor_globals.scope)->default_static_members_count), sizeof ((executor_globals.scope)->default_static_members_count), &((executor_globals.scope)->constructor), sizeof ((executor_globals.scope)->constructor), &((executor_globals.scope)->destructor), sizeof ((executor_globals.scope)->destructor), &((executor_globals.scope)->clone), sizeof ((executor_globals.scope)->clone), &((executor_globals.scope)->__get), sizeof ((executor_globals.scope)->__get), &((executor_globals.scope)->__set), sizeof ((executor_globals.scope)->__set), &((executor_globals.scope)->__unset), sizeof ((executor_globals.scope)->__unset), &((executor_globals.scope)->__isset), sizeof ((executor_globals.scope)->__isset), &((executor_globals.scope)->__call), sizeof ((executor_globals.scope)->__call), &((executor_globals.scope)->__callstatic), sizeof ((executor_globals.scope)->__callstatic), &((executor_globals.scope)->__tostring), sizeof ((executor_globals.scope)->__tostring), &((executor_globals.scope)->serialize_func), sizeof ((executor_globals.scope)->serialize_func), &((executor_globals.scope)->unserialize_func), sizeof ((executor_globals.scope)->unserialize_func), &((executor_globals.scope)->create_object), sizeof ((executor_globals.scope)->create_object), &((executor_globals.scope)->get_iterator), sizeof ((executor_globals.scope)->get_iterator), &((executor_globals.scope)->interface_gets_implemented), sizeof ((executor_globals.scope)->interface_gets_implemented), &((executor_globals.scope)->get_static_method), sizeof ((executor_globals.scope)->get_static_method), &((executor_globals.scope)->serialize), sizeof ((executor_globals.scope)->serialize), &((executor_globals.scope)->unserialize), sizeof ((executor_globals.scope)->unserialize), &((executor_globals.scope)->interfaces), sizeof ((executor_globals.scope)->interfaces), &((executor_globals.scope)->num_interfaces), sizeof ((executor_globals.scope)->num_interfaces), &((executor_globals.scope)->traits), sizeof ((executor_globals.scope)->traits), &((executor_globals.scope)->num_traits), sizeof ((executor_globals.scope)->num_traits), &((executor_globals.scope)->trait_aliases), sizeof ((executor_globals.scope)->trait_aliases), &((executor_globals.scope)->trait_precedences), sizeof ((executor_globals.scope)->trait_precedences), &((executor_globals.scope)->properties_info.nTableSize), sizeof ((executor_globals.scope)->properties_info.nTableSize), &((executor_globals.scope)->properties_info.nTableMask), sizeof ((executor_globals.scope)->properties_info.nTableMask), &((executor_globals.scope)->properties_info.nNumOfElements), sizeof ((executor_globals.scope)->properties_info.nNumOfElements), &((executor_globals.scope)->properties_info.nNextFreeElement), sizeof ((executor_globals.scope)->properties_info.nNextFreeElement), &((executor_globals.scope)->properties_info.pInternalPointer), sizeof ((executor_globals.scope)->properties_info.pInternalPointer), &((executor_globals.scope)->properties_info.pListHead), sizeof ((executor_globals.scope)->properties_info.pListHead), &((executor_globals.scope)->properties_info.pListTail), sizeof ((executor_globals.scope)->properties_info.pListTail), &((executor_globals.scope)->properties_info.arBuckets), sizeof ((executor_globals.scope)->properties_info.arBuckets), &((executor_globals.scope)->properties_info.pDestructor), sizeof ((executor_globals.scope)->properties_info.pDestructor), &((executor_globals.scope)->properties_info.persistent), sizeof ((executor_globals.scope)->properties_info.persistent), &((executor_globals.scope)->properties_info.nApplyCount), sizeof ((executor_globals.scope)->properties_info.nApplyCount), &((executor_globals.scope)->properties_info.bApplyProtection), sizeof ((executor_globals.scope)->properties_info.bApplyProtection), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) && scope_property_info->flags & 1024) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if (((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) || __is_neg(\"\", \"L288\", 160, &(scope_property_info), sizeof (scope_property_info), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(member), sizeof (member), &(key), sizeof (key), &(h), sizeof (h), &(executor_globals.scope), sizeof (executor_globals.scope), &((*member).value.str.val), sizeof ((*member).value.str.val), &((*member).value.str.len), sizeof ((*member).value.str.len), &(executor_globals.scope), sizeof (executor_globals.scope), &(ce), sizeof (ce), &(key->cache_slot), sizeof (key->cache_slot), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(property_info), sizeof (property_info), &(denied_access), sizeof (denied_access), &(silent), sizeof (silent), &(key->hash_value), sizeof (key->hash_value), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((executor_globals.scope)->type), sizeof ((executor_globals.scope)->type), &((executor_globals.scope)->name), sizeof ((executor_globals.scope)->name), &((executor_globals.scope)->name_length), sizeof ((executor_globals.scope)->name_length), &((executor_globals.scope)->parent), sizeof ((executor_globals.scope)->parent), &((executor_globals.scope)->refcount), sizeof ((executor_globals.scope)->refcount), &((executor_globals.scope)->ce_flags), sizeof ((executor_globals.scope)->ce_flags), &((executor_globals.scope)->default_properties_table), sizeof ((executor_globals.scope)->default_properties_table), &((executor_globals.scope)->default_static_members_table), sizeof ((executor_globals.scope)->default_static_members_table), &((executor_globals.scope)->static_members_table), sizeof ((executor_globals.scope)->static_members_table), &((executor_globals.scope)->default_properties_count), sizeof ((executor_globals.scope)->default_properties_count), &((executor_globals.scope)->default_static_members_count), sizeof ((executor_globals.scope)->default_static_members_count), &((executor_globals.scope)->constructor), sizeof ((executor_globals.scope)->constructor), &((executor_globals.scope)->destructor), sizeof ((executor_globals.scope)->destructor), &((executor_globals.scope)->clone), sizeof ((executor_globals.scope)->clone), &((executor_globals.scope)->__get), sizeof ((executor_globals.scope)->__get), &((executor_globals.scope)->__set), sizeof ((executor_globals.scope)->__set), &((executor_globals.scope)->__unset), sizeof ((executor_globals.scope)->__unset), &((executor_globals.scope)->__isset), sizeof ((executor_globals.scope)->__isset), &((executor_globals.scope)->__call), sizeof ((executor_globals.scope)->__call), &((executor_globals.scope)->__callstatic), sizeof ((executor_globals.scope)->__callstatic), &((executor_globals.scope)->__tostring), sizeof ((executor_globals.scope)->__tostring), &((executor_globals.scope)->serialize_func), sizeof ((executor_globals.scope)->serialize_func), &((executor_globals.scope)->unserialize_func), sizeof ((executor_globals.scope)->unserialize_func), &((executor_globals.scope)->create_object), sizeof ((executor_globals.scope)->create_object), &((executor_globals.scope)->get_iterator), sizeof ((executor_globals.scope)->get_iterator), &((executor_globals.scope)->interface_gets_implemented), sizeof ((executor_globals.scope)->interface_gets_implemented), &((executor_globals.scope)->get_static_method), sizeof ((executor_globals.scope)->get_static_method), &((executor_globals.scope)->serialize), sizeof ((executor_globals.scope)->serialize), &((executor_globals.scope)->unserialize), sizeof ((executor_globals.scope)->unserialize), &((executor_globals.scope)->interfaces), sizeof ((executor_globals.scope)->interfaces), &((executor_globals.scope)->num_interfaces), sizeof ((executor_globals.scope)->num_interfaces), &((executor_globals.scope)->traits), sizeof ((executor_globals.scope)->traits), &((executor_globals.scope)->num_traits), sizeof ((executor_globals.scope)->num_traits), &((executor_globals.scope)->trait_aliases), sizeof ((executor_globals.scope)->trait_aliases), &((executor_globals.scope)->trait_precedences), sizeof ((executor_globals.scope)->trait_precedences), &((executor_globals.scope)->properties_info.nTableSize), sizeof ((executor_globals.scope)->properties_info.nTableSize), &((executor_globals.scope)->properties_info.nTableMask), sizeof ((executor_globals.scope)->properties_info.nTableMask), &((executor_globals.scope)->properties_info.nNumOfElements), sizeof ((executor_globals.scope)->properties_info.nNumOfElements), &((executor_globals.scope)->properties_info.nNextFreeElement), sizeof ((executor_globals.scope)->properties_info.nNextFreeElement), &((executor_globals.scope)->properties_info.pInternalPointer), sizeof ((executor_globals.scope)->properties_info.pInternalPointer), &((executor_globals.scope)->properties_info.pListHead), sizeof ((executor_globals.scope)->properties_info.pListHead), &((executor_globals.scope)->properties_info.pListTail), sizeof ((executor_globals.scope)->properties_info.pListTail), &((executor_globals.scope)->properties_info.arBuckets), sizeof ((executor_globals.scope)->properties_info.arBuckets), &((executor_globals.scope)->properties_info.pDestructor), sizeof ((executor_globals.scope)->properties_info.pDestructor), &((executor_globals.scope)->properties_info.persistent), sizeof ((executor_globals.scope)->properties_info.persistent), &((executor_globals.scope)->properties_info.nApplyCount), sizeof ((executor_globals.scope)->properties_info.nApplyCount), &((executor_globals.scope)->properties_info.bApplyProtection), sizeof ((executor_globals.scope)->properties_info.bApplyProtection), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && scope_property_info->flags & 1024) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((executor_globals.scope) != ce && (executor_globals.scope) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((executor_globals.scope) != ce && is_derived_class(ce, (executor_globals.scope)) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && fprintf(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && printf(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if ((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && sprintf(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n", "if (((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) && !__is_neg(\"\", \"L288\", 160, &(scope_property_info), sizeof (scope_property_info), &(scope_property_info->flags), sizeof (scope_property_info->flags), &(member), sizeof (member), &(key), sizeof (key), &(h), sizeof (h), &(executor_globals.scope), sizeof (executor_globals.scope), &((*member).value.str.val), sizeof ((*member).value.str.val), &((*member).value.str.len), sizeof ((*member).value.str.len), &(executor_globals.scope), sizeof (executor_globals.scope), &(ce), sizeof (ce), &(key->cache_slot), sizeof (key->cache_slot), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(property_info), sizeof (property_info), &(denied_access), sizeof (denied_access), &(silent), sizeof (silent), &(key->hash_value), sizeof (key->hash_value), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((executor_globals.scope)->type), sizeof ((executor_globals.scope)->type), &((executor_globals.scope)->name), sizeof ((executor_globals.scope)->name), &((executor_globals.scope)->name_length), sizeof ((executor_globals.scope)->name_length), &((executor_globals.scope)->parent), sizeof ((executor_globals.scope)->parent), &((executor_globals.scope)->refcount), sizeof ((executor_globals.scope)->refcount), &((executor_globals.scope)->ce_flags), sizeof ((executor_globals.scope)->ce_flags), &((executor_globals.scope)->default_properties_table), sizeof ((executor_globals.scope)->default_properties_table), &((executor_globals.scope)->default_static_members_table), sizeof ((executor_globals.scope)->default_static_members_table), &((executor_globals.scope)->static_members_table), sizeof ((executor_globals.scope)->static_members_table), &((executor_globals.scope)->default_properties_count), sizeof ((executor_globals.scope)->default_properties_count), &((executor_globals.scope)->default_static_members_count), sizeof ((executor_globals.scope)->default_static_members_count), &((executor_globals.scope)->constructor), sizeof ((executor_globals.scope)->constructor), &((executor_globals.scope)->destructor), sizeof ((executor_globals.scope)->destructor), &((executor_globals.scope)->clone), sizeof ((executor_globals.scope)->clone), &((executor_globals.scope)->__get), sizeof ((executor_globals.scope)->__get), &((executor_globals.scope)->__set), sizeof ((executor_globals.scope)->__set), &((executor_globals.scope)->__unset), sizeof ((executor_globals.scope)->__unset), &((executor_globals.scope)->__isset), sizeof ((executor_globals.scope)->__isset), &((executor_globals.scope)->__call), sizeof ((executor_globals.scope)->__call), &((executor_globals.scope)->__callstatic), sizeof ((executor_globals.scope)->__callstatic), &((executor_globals.scope)->__tostring), sizeof ((executor_globals.scope)->__tostring), &((executor_globals.scope)->serialize_func), sizeof ((executor_globals.scope)->serialize_func), &((executor_globals.scope)->unserialize_func), sizeof ((executor_globals.scope)->unserialize_func), &((executor_globals.scope)->create_object), sizeof ((executor_globals.scope)->create_object), &((executor_globals.scope)->get_iterator), sizeof ((executor_globals.scope)->get_iterator), &((executor_globals.scope)->interface_gets_implemented), sizeof ((executor_globals.scope)->interface_gets_implemented), &((executor_globals.scope)->get_static_method), sizeof ((executor_globals.scope)->get_static_method), &((executor_globals.scope)->serialize), sizeof ((executor_globals.scope)->serialize), &((executor_globals.scope)->unserialize), sizeof ((executor_globals.scope)->unserialize), &((executor_globals.scope)->interfaces), sizeof ((executor_globals.scope)->interfaces), &((executor_globals.scope)->num_interfaces), sizeof ((executor_globals.scope)->num_interfaces), &((executor_globals.scope)->traits), sizeof ((executor_globals.scope)->traits), &((executor_globals.scope)->num_traits), sizeof ((executor_globals.scope)->num_traits), &((executor_globals.scope)->trait_aliases), sizeof ((executor_globals.scope)->trait_aliases), &((executor_globals.scope)->trait_precedences), sizeof ((executor_globals.scope)->trait_precedences), &((executor_globals.scope)->properties_info.nTableSize), sizeof ((executor_globals.scope)->properties_info.nTableSize), &((executor_globals.scope)->properties_info.nTableMask), sizeof ((executor_globals.scope)->properties_info.nTableMask), &((executor_globals.scope)->properties_info.nNumOfElements), sizeof ((executor_globals.scope)->properties_info.nNumOfElements), &((executor_globals.scope)->properties_info.nNextFreeElement), sizeof ((executor_globals.scope)->properties_info.nNextFreeElement), &((executor_globals.scope)->properties_info.pInternalPointer), sizeof ((executor_globals.scope)->properties_info.pInternalPointer), &((executor_globals.scope)->properties_info.pListHead), sizeof ((executor_globals.scope)->properties_info.pListHead), &((executor_globals.scope)->properties_info.pListTail), sizeof ((executor_globals.scope)->properties_info.pListTail), &((executor_globals.scope)->properties_info.arBuckets), sizeof ((executor_globals.scope)->properties_info.arBuckets), &((executor_globals.scope)->properties_info.pDestructor), sizeof ((executor_globals.scope)->properties_info.pDestructor), &((executor_globals.scope)->properties_info.persistent), sizeof ((executor_globals.scope)->properties_info.persistent), &((executor_globals.scope)->properties_info.nApplyCount), sizeof ((executor_globals.scope)->properties_info.nApplyCount), &((executor_globals.scope)->properties_info.bApplyProtection), sizeof ((executor_globals.scope)->properties_info.bApplyProtection), &((*member).refcount__gc), sizeof ((*member).refcount__gc), &((*member).type), sizeof ((*member).type), &((*member).is_ref__gc), sizeof ((*member).is_ref__gc), &(scope_property_info->name), sizeof (scope_property_info->name), &(scope_property_info->name_length), sizeof (scope_property_info->name_length), &(scope_property_info->h), sizeof (scope_property_info->h), &(scope_property_info->offset), sizeof (scope_property_info->offset), &(scope_property_info->doc_comment), sizeof (scope_property_info->doc_comment), &(scope_property_info->doc_comment_len), sizeof (scope_property_info->doc_comment_len), &(scope_property_info->ce), sizeof (scope_property_info->ce), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw))) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9417804094741431, -4.5508368134741435, -2.8728451239741433, -4.5619124039741479, -2.0259536994741447, -2.5786656134741412, -3.5301723694741436, -2.145962525474145, -2.5786656134741412, -2.1272676499741441, -3.0526965554741459, -4.7924064139741471, -4.7924064139741471, -3.1856819079741445, -1.3206511434741426, -3.9983317734741441, -4.1802738134741455, -5.0200968134741437, -5.3087249134741441, -5.3087249134741441, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.3087249134741441, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -4.5508368134741435, -5.3087249134741441, -5.3087249134741441, -4.5508368134741435, -5.3087249134741441, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -4.5508368134741435, -5.3087249134741441, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -5.0200968134741437, -4.2288257834741438, -5.3087249134741441, -4.5508368134741435, -4.5508368134741435, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -5.0200968134741437, -4.5508368134741435, -5.0200968134741437, -4.5508368134741435, -5.0200968134741437, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -5.0200968134741437, -4.2288257834741438, -4.5508368134741435, -4.5508368134741435, -5.0200968134741437, -4.2288257834741438, -5.3087249134741441, -5.0200968134741437, -5.3087249134741441, -5.3087249134741441, -5.0200968134741437, -5.0200968134741437, -5.0200968134741437, -5.3087249134741441, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -4.5508368134741435, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -5.0200968134741437, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -4.5508368134741435, -5.3087249134741441, -5.3087249134741441, -4.5508368134741435, -5.3087249134741441, -4.5508368134741435, -4.5508368134741435, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -5.3087249134741441, -4.5508368134741435, -5.3087249134741441, -5.0200968134741437, -4.5508368134741435]
								}, {
									"case":	2,
									"scores":	[-6.8155684150741447, -7.4246248190741468, -5.7466331295741444, -7.4357004095741459, -4.8997417050741445, -5.4524536190741433, -6.4039603750741456, -5.0197505310741439, -5.4524536190741433, -5.0010556555741434, -5.9264845610741439, -7.6661944195741469, -7.6661944195741469, -6.0594699135741443, -4.1944391490741424, -6.8721197790741453, -7.0540618190741462, -7.8938848190741453, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.4246248190741468, -7.8938848190741453, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -8.1825129190741457, -7.8938848190741453, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468]
								}, {
									"case":	3,
									"scores":	[-6.8155684150741447, -7.4246248190741468, -5.7466331295741444, -7.4357004095741459, -4.8997417050741445, -5.4524536190741433, -6.4039603750741456, -5.0197505310741439, -5.4524536190741433, -5.0010556555741434, -5.9264845610741439, -7.6661944195741469, -7.6661944195741469, -6.0594699135741443, -4.1944391490741424, -6.8721197790741453, -7.0540618190741462, -7.8938848190741453, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.4246248190741468, -7.8938848190741453, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -8.1825129190741457, -7.8938848190741453, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-6.8155684150741447, -7.4246248190741468, -5.7466331295741444, -7.4357004095741459, -4.8997417050741445, -5.4524536190741433, -6.4039603750741456, -5.0197505310741439, -5.4524536190741433, -5.0010556555741434, -5.9264845610741439, -7.6661944195741469, -7.6661944195741469, -6.0594699135741443, -4.1944391490741424, -6.8721197790741453, -7.0540618190741462, -7.8938848190741453, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.4246248190741468, -7.8938848190741453, -7.4246248190741468, -7.8938848190741453, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -7.4246248190741468, -7.4246248190741468, -7.8938848190741453, -7.1026137890741463, -8.1825129190741457, -7.8938848190741453, -8.1825129190741457, -8.1825129190741457, -7.8938848190741453, -7.8938848190741453, -7.8938848190741453, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.4246248190741468, -7.4246248190741468, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -8.1825129190741457, -7.4246248190741468, -8.1825129190741457, -7.8938848190741453, -7.4246248190741468]
								}]
						}, {
							"switch":	33,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	288,
							"begin_column":	2,
							"end_line":	318,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L288\", 168, &(ce), sizeof (ce), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(member), sizeof (member), &(scope_property_info), sizeof (scope_property_info), &(h), sizeof (h), &(denied_access), sizeof (denied_access), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(property_info), sizeof (property_info), &(silent), sizeof (silent), &(ce->name), sizeof (ce->name), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((executor_globals.scope)->type), sizeof ((executor_globals.scope)->type), &((executor_globals.scope)->name), sizeof ((executor_globals.scope)->name), &((executor_globals.scope)->name_length), sizeof ((executor_globals.scope)->name_length), &((executor_globals.scope)->parent), sizeof ((executor_globals.scope)->parent), &((executor_globals.scope)->refcount), sizeof ((executor_globals.scope)->refcount), &((executor_globals.scope)->ce_flags), sizeof ((executor_globals.scope)->ce_flags), &((executor_globals.scope)->default_properties_table), sizeof ((executor_globals.scope)->default_properties_table), &((executor_globals.scope)->default_static_members_table), sizeof ((executor_globals.scope)->default_static_members_table), &((executor_globals.scope)->static_members_table), sizeof ((executor_globals.scope)->static_members_table), &((executor_globals.scope)->default_properties_count), sizeof ((executor_globals.scope)->default_properties_count), &((executor_globals.scope)->default_static_members_count), sizeof ((executor_globals.scope)->default_static_members_count), &((executor_globals.scope)->constructor), sizeof ((executor_globals.scope)->constructor), &((executor_globals.scope)->destructor), sizeof ((executor_globals.scope)->destructor), &((executor_globals.scope)->clone), sizeof ((executor_globals.scope)->clone), &((executor_globals.scope)->__get), sizeof ((executor_globals.scope)->__get), &((executor_globals.scope)->__set), sizeof ((executor_globals.scope)->__set), &((executor_globals.scope)->__unset), sizeof ((executor_globals.scope)->__unset), &((executor_globals.scope)->__isset), sizeof ((executor_globals.scope)->__isset), &((executor_globals.scope)->__call), sizeof ((executor_globals.scope)->__call), &((executor_globals.scope)->__callstatic), sizeof ((executor_globals.scope)->__callstatic), &((executor_globals.scope)->__tostring), sizeof ((executor_globals.scope)->__tostring), &((executor_globals.scope)->serialize_func), sizeof ((executor_globals.scope)->serialize_func), &((executor_globals.scope)->unserialize_func), sizeof ((executor_globals.scope)->unserialize_func), &((executor_globals.scope)->create_object), sizeof ((executor_globals.scope)->create_object), &((executor_globals.scope)->get_iterator), sizeof ((executor_globals.scope)->get_iterator), &((executor_globals.scope)->interface_gets_implemented), sizeof ((executor_globals.scope)->interface_gets_implemented), &((executor_globals.scope)->get_static_method), sizeof ((executor_globals.scope)->get_static_method), &((executor_globals.scope)->serialize), sizeof ((executor_globals.scope)->serialize), &((executor_globals.scope)->unserialize), sizeof ((executor_globals.scope)->unserialize), &((executor_globals.scope)->interfaces), sizeof ((executor_globals.scope)->interfaces), &((executor_globals.scope)->num_interfaces), sizeof ((executor_globals.scope)->num_interfaces), &((executor_globals.scope)->traits), sizeof ((executor_globals.scope)->traits), &((executor_globals.scope)->num_traits), sizeof ((executor_globals.scope)->num_traits), &((executor_globals.scope)->trait_aliases), sizeof ((executor_globals.scope)->trait_aliases), &((executor_globals.scope)->trait_precedences), sizeof ((executor_globals.scope)->trait_precedences), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)))\n    if ((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024) {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n            } while (0);\n        }\n        return scope_property_info;\n    } else if (property_info) {\n        if (__builtin_expect(denied_access != 0, 0)) {\n            if (!silent) {\n                zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n            }\n            return ((void *)0);\n        } else {\n            if (key) {\n                do {\n                    (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                    (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n                } while (0);\n            }\n        }\n    } else {\n        (executor_globals.std_property_info).flags = 256;\n        (executor_globals.std_property_info).name = (*member).value.str.val;\n        (executor_globals.std_property_info).name_length = (*member).value.str.len;\n        (executor_globals.std_property_info).h = h;\n        (executor_globals.std_property_info).ce = ce;\n        (executor_globals.std_property_info).offset = -1;\n        property_info = &(executor_globals.std_property_info);\n    }\n", "if (!__is_neg(\"\", \"L288\", 168, &(ce), sizeof (ce), &(executor_globals.scope), sizeof (executor_globals.scope), &(executor_globals.scope), sizeof (executor_globals.scope), &(member), sizeof (member), &(scope_property_info), sizeof (scope_property_info), &(h), sizeof (h), &(denied_access), sizeof (denied_access), &(key), sizeof (key), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(executor_globals.active_op_array), sizeof (executor_globals.active_op_array), &(property_info), sizeof (property_info), &(silent), sizeof (silent), &(ce->name), sizeof (ce->name), &(ce->type), sizeof (ce->type), &(ce->name_length), sizeof (ce->name_length), &(ce->parent), sizeof (ce->parent), &(ce->refcount), sizeof (ce->refcount), &(ce->ce_flags), sizeof (ce->ce_flags), &(ce->default_properties_table), sizeof (ce->default_properties_table), &(ce->default_static_members_table), sizeof (ce->default_static_members_table), &(ce->static_members_table), sizeof (ce->static_members_table), &(ce->default_properties_count), sizeof (ce->default_properties_count), &(ce->default_static_members_count), sizeof (ce->default_static_members_count), &(ce->constructor), sizeof (ce->constructor), &(ce->destructor), sizeof (ce->destructor), &(ce->clone), sizeof (ce->clone), &(ce->__get), sizeof (ce->__get), &(ce->__set), sizeof (ce->__set), &(ce->__unset), sizeof (ce->__unset), &(ce->__isset), sizeof (ce->__isset), &(ce->__call), sizeof (ce->__call), &(ce->__callstatic), sizeof (ce->__callstatic), &(ce->__tostring), sizeof (ce->__tostring), &(ce->serialize_func), sizeof (ce->serialize_func), &(ce->unserialize_func), sizeof (ce->unserialize_func), &(ce->create_object), sizeof (ce->create_object), &(ce->get_iterator), sizeof (ce->get_iterator), &(ce->interface_gets_implemented), sizeof (ce->interface_gets_implemented), &(ce->get_static_method), sizeof (ce->get_static_method), &(ce->serialize), sizeof (ce->serialize), &(ce->unserialize), sizeof (ce->unserialize), &(ce->interfaces), sizeof (ce->interfaces), &(ce->num_interfaces), sizeof (ce->num_interfaces), &(ce->traits), sizeof (ce->traits), &(ce->num_traits), sizeof (ce->num_traits), &(ce->trait_aliases), sizeof (ce->trait_aliases), &(ce->trait_precedences), sizeof (ce->trait_precedences), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw), &((executor_globals.scope)->type), sizeof ((executor_globals.scope)->type), &((executor_globals.scope)->name), sizeof ((executor_globals.scope)->name), &((executor_globals.scope)->name_length), sizeof ((executor_globals.scope)->name_length), &((executor_globals.scope)->parent), sizeof ((executor_globals.scope)->parent), &((executor_globals.scope)->refcount), sizeof ((executor_globals.scope)->refcount), &((executor_globals.scope)->ce_flags), sizeof ((executor_globals.scope)->ce_flags), &((executor_globals.scope)->default_properties_table), sizeof ((executor_globals.scope)->default_properties_table), &((executor_globals.scope)->default_static_members_table), sizeof ((executor_globals.scope)->default_static_members_table), &((executor_globals.scope)->static_members_table), sizeof ((executor_globals.scope)->static_members_table), &((executor_globals.scope)->default_properties_count), sizeof ((executor_globals.scope)->default_properties_count), &((executor_globals.scope)->default_static_members_count), sizeof ((executor_globals.scope)->default_static_members_count), &((executor_globals.scope)->constructor), sizeof ((executor_globals.scope)->constructor), &((executor_globals.scope)->destructor), sizeof ((executor_globals.scope)->destructor), &((executor_globals.scope)->clone), sizeof ((executor_globals.scope)->clone), &((executor_globals.scope)->__get), sizeof ((executor_globals.scope)->__get), &((executor_globals.scope)->__set), sizeof ((executor_globals.scope)->__set), &((executor_globals.scope)->__unset), sizeof ((executor_globals.scope)->__unset), &((executor_globals.scope)->__isset), sizeof ((executor_globals.scope)->__isset), &((executor_globals.scope)->__call), sizeof ((executor_globals.scope)->__call), &((executor_globals.scope)->__callstatic), sizeof ((executor_globals.scope)->__callstatic), &((executor_globals.scope)->__tostring), sizeof ((executor_globals.scope)->__tostring), &((executor_globals.scope)->serialize_func), sizeof ((executor_globals.scope)->serialize_func), &((executor_globals.scope)->unserialize_func), sizeof ((executor_globals.scope)->unserialize_func), &((executor_globals.scope)->create_object), sizeof ((executor_globals.scope)->create_object), &((executor_globals.scope)->get_iterator), sizeof ((executor_globals.scope)->get_iterator), &((executor_globals.scope)->interface_gets_implemented), sizeof ((executor_globals.scope)->interface_gets_implemented), &((executor_globals.scope)->get_static_method), sizeof ((executor_globals.scope)->get_static_method), &((executor_globals.scope)->serialize), sizeof ((executor_globals.scope)->serialize), &((executor_globals.scope)->unserialize), sizeof ((executor_globals.scope)->unserialize), &((executor_globals.scope)->interfaces), sizeof ((executor_globals.scope)->interfaces), &((executor_globals.scope)->num_interfaces), sizeof ((executor_globals.scope)->num_interfaces), &((executor_globals.scope)->traits), sizeof ((executor_globals.scope)->traits), &((executor_globals.scope)->num_traits), sizeof ((executor_globals.scope)->num_traits), &((executor_globals.scope)->trait_aliases), sizeof ((executor_globals.scope)->trait_aliases), &((executor_globals.scope)->trait_precedences), sizeof ((executor_globals.scope)->trait_precedences), &(executor_globals.return_value_ptr_ptr), sizeof (executor_globals.return_value_ptr_ptr), &(executor_globals.uninitialized_zval_ptr), sizeof (executor_globals.uninitialized_zval_ptr), &(executor_globals.error_zval_ptr), sizeof (executor_globals.error_zval_ptr), &(executor_globals.symtable_cache_limit), sizeof (executor_globals.symtable_cache_limit), &(executor_globals.symtable_cache_ptr), sizeof (executor_globals.symtable_cache_ptr), &(executor_globals.opline_ptr), sizeof (executor_globals.opline_ptr), &(executor_globals.active_symbol_table), sizeof (executor_globals.active_symbol_table), &(executor_globals.bailout), sizeof (executor_globals.bailout), &(executor_globals.error_reporting), sizeof (executor_globals.error_reporting), &(executor_globals.orig_error_reporting), sizeof (executor_globals.orig_error_reporting), &(executor_globals.exit_status), sizeof (executor_globals.exit_status), &(executor_globals.function_table), sizeof (executor_globals.function_table), &(executor_globals.class_table), sizeof (executor_globals.class_table), &(executor_globals.zend_constants), sizeof (executor_globals.zend_constants), &(executor_globals.called_scope), sizeof (executor_globals.called_scope), &(executor_globals.This), sizeof (executor_globals.This), &(executor_globals.precision), sizeof (executor_globals.precision), &(executor_globals.ticks_count), sizeof (executor_globals.ticks_count), &(executor_globals.in_execution), sizeof (executor_globals.in_execution), &(executor_globals.in_autoload), sizeof (executor_globals.in_autoload), &(executor_globals.autoload_func), sizeof (executor_globals.autoload_func), &(executor_globals.full_tables_cleanup), sizeof (executor_globals.full_tables_cleanup), &(executor_globals.no_extensions), sizeof (executor_globals.no_extensions), &(executor_globals.argument_stack), sizeof (executor_globals.argument_stack), &(executor_globals.user_error_handler_error_reporting), sizeof (executor_globals.user_error_handler_error_reporting), &(executor_globals.user_error_handler), sizeof (executor_globals.user_error_handler), &(executor_globals.user_exception_handler), sizeof (executor_globals.user_exception_handler), &(executor_globals.error_handling), sizeof (executor_globals.error_handling), &(executor_globals.exception_class), sizeof (executor_globals.exception_class), &(executor_globals.timeout_seconds), sizeof (executor_globals.timeout_seconds), &(executor_globals.lambda_count), sizeof (executor_globals.lambda_count), &(executor_globals.ini_directives), sizeof (executor_globals.ini_directives), &(executor_globals.modified_ini_directives), sizeof (executor_globals.modified_ini_directives), &(executor_globals.error_reporting_ini_entry), sizeof (executor_globals.error_reporting_ini_entry), &(executor_globals.exception), sizeof (executor_globals.exception), &(executor_globals.prev_exception), sizeof (executor_globals.prev_exception), &(executor_globals.opline_before_exception), sizeof (executor_globals.opline_before_exception), &(executor_globals.current_execute_data), sizeof (executor_globals.current_execute_data), &(executor_globals.current_module), sizeof (executor_globals.current_module), &(executor_globals.active), sizeof (executor_globals.active), &(executor_globals.start_op), sizeof (executor_globals.start_op), &(executor_globals.saved_fpu_cw_ptr), sizeof (executor_globals.saved_fpu_cw_ptr), &(executor_globals.saved_fpu_cw), sizeof (executor_globals.saved_fpu_cw)) && ((executor_globals.scope) != ce && (executor_globals.scope) && is_derived_class(ce, (executor_globals.scope)) && zend_hash_quick_find(&(executor_globals.scope)->properties_info, (*member).value.str.val, (*member).value.str.len + 1, h, (void **)&scope_property_info) == 0 && scope_property_info->flags & 1024)) {\n    if (key) {\n        do {\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n            (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (scope_property_info);\n        } while (0);\n    }\n    return scope_property_info;\n} else if (property_info) {\n    if (__builtin_expect(denied_access != 0, 0)) {\n        if (!silent) {\n            zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val);\n        }\n        return ((void *)0);\n    } else {\n        if (key) {\n            do {\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot)] = (ce);\n                (executor_globals.active_op_array)->run_time_cache[(key->cache_slot) + 1] = (property_info);\n            } while (0);\n        }\n    }\n} else {\n    (executor_globals.std_property_info).flags = 256;\n    (executor_globals.std_property_info).name = (*member).value.str.val;\n    (executor_globals.std_property_info).name_length = (*member).value.str.len;\n    (executor_globals.std_property_info).h = h;\n    (executor_globals.std_property_info).ce = ce;\n    (executor_globals.std_property_info).offset = -1;\n    property_info = &(executor_globals.std_property_info);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.81060761961096, -10.262005583110961, -10.262005583110961, -10.55618509361096, -11.62512037911096, -9.70929366911096, -9.00399111311096, -12.24525237361096, -12.475746383610961, -12.475746383610961, -10.869816073610961, -11.681671743110961, -12.078984329110961, -12.234176783110961, -11.91216575311096, -12.99206488311096, -12.234176783110961, -12.234176783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.703436783110961, -12.234176783110961, -12.703436783110961, -12.234176783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.99206488311096, -12.99206488311096, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.99206488311096, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.99206488311096, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.99206488311096, -12.234176783110961, -12.99206488311096, -12.99206488311096, -12.234176783110961, -12.99206488311096, -12.234176783110961, -12.234176783110961, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.234176783110961, -12.99206488311096, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.703436783110961, -11.91216575311096, -12.99206488311096, -12.234176783110961, -12.234176783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.703436783110961, -12.234176783110961, -12.703436783110961, -12.234176783110961, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.99206488311096, -12.99206488311096, -12.703436783110961, -12.703436783110961, -12.703436783110961, -12.99206488311096, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.234176783110961, -12.234176783110961, -12.234176783110961, -12.99206488311096, -12.703436783110961, -12.234176783110961, -12.234176783110961, -12.99206488311096, -12.234176783110961, -12.99206488311096, -12.99206488311096, -12.234176783110961, -12.99206488311096, -12.234176783110961, -12.234176783110961, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.99206488311096, -12.234176783110961, -12.99206488311096, -12.703436783110961, -12.234176783110961]
								}, {
									"case":	2,
									"scores":	[-11.799853453256958, -12.251251416756958, -12.251251416756958, -12.545430927256961, -13.614366212756959, -11.698539502756962, -10.99323694675696, -14.234498207256959, -14.46499221725696, -14.46499221725696, -12.858267711256961, -13.67091757675696, -14.06823016275696, -14.22342261675696, -13.901411586756959, -14.981310716756958, -14.22342261675696, -14.22342261675696, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.692682616756958, -14.22342261675696, -14.692682616756958, -14.22342261675696, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.981310716756958, -14.981310716756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.981310716756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.981310716756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.981310716756958, -14.22342261675696, -14.981310716756958, -14.981310716756958, -14.22342261675696, -14.981310716756958, -14.22342261675696, -14.22342261675696, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.22342261675696, -14.981310716756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.692682616756958, -13.901411586756959, -14.981310716756958, -14.22342261675696, -14.22342261675696, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.692682616756958, -14.22342261675696, -14.692682616756958, -14.22342261675696, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.981310716756958, -14.981310716756958, -14.692682616756958, -14.692682616756958, -14.692682616756958, -14.981310716756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.22342261675696, -14.22342261675696, -14.22342261675696, -14.981310716756958, -14.692682616756958, -14.22342261675696, -14.22342261675696, -14.981310716756958, -14.22342261675696, -14.981310716756958, -14.981310716756958, -14.22342261675696, -14.981310716756958, -14.22342261675696, -14.22342261675696, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.981310716756958, -14.22342261675696, -14.981310716756958, -14.692682616756958, -14.22342261675696]
								}]
						}]
				}, {
					"line":	318,
					"switches":	[{
							"switch":	34,
							"types":	[[], [], [], [], [410], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], [], [], [], [389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409], [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], [], [], [], [], [], []],
							"begin_line":	319,
							"begin_column":	0,
							"end_line":	319,
							"end_column":	0,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*member).value.dval, 0, sizeof (*(&(*member).value.dval)))", "memset(&(*member).value.ht, 0, sizeof (*(&(*member).value.ht)))", "memset(&(*member).value.lval, 0, sizeof (*(&(*member).value.lval)))", "memset(&(*member).value.obj, 0, sizeof (*(&(*member).value.obj)))", "memset(&(*member).value.str, 0, sizeof (*(&(*member).value.str)))", "memset(&(*member).value.str.len, 0, sizeof (*(&(*member).value.str.len)))", "memset(&(*member).value.str.val, 0, sizeof (*(&(*member).value.str.val)))", "memset(&(executor_globals.active_op_array)->T, 0, sizeof (*(&(executor_globals.active_op_array)->T)))", "memset(&(executor_globals.active_op_array)->arg_info, 0, sizeof (*(&(executor_globals.active_op_array)->arg_info)))", "memset(&(executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*(&(executor_globals.active_op_array)->brk_cont_array)))", "memset(&(executor_globals.active_op_array)->doc_comment, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment)))", "memset(&(executor_globals.active_op_array)->doc_comment_len, 0, sizeof (*(&(executor_globals.active_op_array)->doc_comment_len)))", "memset(&(executor_globals.active_op_array)->early_binding, 0, sizeof (*(&(executor_globals.active_op_array)->early_binding)))", "memset(&(executor_globals.active_op_array)->filename, 0, sizeof (*(&(executor_globals.active_op_array)->filename)))", "memset(&(executor_globals.active_op_array)->fn_flags, 0, sizeof (*(&(executor_globals.active_op_array)->fn_flags)))", "memset(&(executor_globals.active_op_array)->function_name, 0, sizeof (*(&(executor_globals.active_op_array)->function_name)))", "memset(&(executor_globals.active_op_array)->last, 0, sizeof (*(&(executor_globals.active_op_array)->last)))", "memset(&(executor_globals.active_op_array)->last_brk_cont, 0, sizeof (*(&(executor_globals.active_op_array)->last_brk_cont)))", "memset(&(executor_globals.active_op_array)->last_cache_slot, 0, sizeof (*(&(executor_globals.active_op_array)->last_cache_slot)))", "memset(&(executor_globals.active_op_array)->last_literal, 0, sizeof (*(&(executor_globals.active_op_array)->last_literal)))", "memset(&(executor_globals.active_op_array)->last_try_catch, 0, sizeof (*(&(executor_globals.active_op_array)->last_try_catch)))", "memset(&(executor_globals.active_op_array)->last_var, 0, sizeof (*(&(executor_globals.active_op_array)->last_var)))", "memset(&(executor_globals.active_op_array)->line_end, 0, sizeof (*(&(executor_globals.active_op_array)->line_end)))", "memset(&(executor_globals.active_op_array)->line_start, 0, sizeof (*(&(executor_globals.active_op_array)->line_start)))", "memset(&(executor_globals.active_op_array)->literals, 0, sizeof (*(&(executor_globals.active_op_array)->literals)))", "memset(&(executor_globals.active_op_array)->num_args, 0, sizeof (*(&(executor_globals.active_op_array)->num_args)))", "memset(&(executor_globals.active_op_array)->opcodes, 0, sizeof (*(&(executor_globals.active_op_array)->opcodes)))", "memset(&(executor_globals.active_op_array)->prototype, 0, sizeof (*(&(executor_globals.active_op_array)->prototype)))", "memset(&(executor_globals.active_op_array)->refcount, 0, sizeof (*(&(executor_globals.active_op_array)->refcount)))", "memset(&(executor_globals.active_op_array)->required_num_args, 0, sizeof (*(&(executor_globals.active_op_array)->required_num_args)))", "memset(&(executor_globals.active_op_array)->reserved, 0, sizeof (*(&(executor_globals.active_op_array)->reserved)))", "memset(&(executor_globals.active_op_array)->run_time_cache, 0, sizeof (*(&(executor_globals.active_op_array)->run_time_cache)))", "memset(&(executor_globals.active_op_array)->scope, 0, sizeof (*(&(executor_globals.active_op_array)->scope)))", "memset(&(executor_globals.active_op_array)->static_variables, 0, sizeof (*(&(executor_globals.active_op_array)->static_variables)))", "memset(&(executor_globals.active_op_array)->this_var, 0, sizeof (*(&(executor_globals.active_op_array)->this_var)))", "memset(&(executor_globals.active_op_array)->try_catch_array, 0, sizeof (*(&(executor_globals.active_op_array)->try_catch_array)))", "memset(&(executor_globals.active_op_array)->type, 0, sizeof (*(&(executor_globals.active_op_array)->type)))", "memset(&(executor_globals.active_op_array)->vars, 0, sizeof (*(&(executor_globals.active_op_array)->vars)))", "memset(&(executor_globals.scope)->__call, 0, sizeof (*(&(executor_globals.scope)->__call)))", "memset(&(executor_globals.scope)->__callstatic, 0, sizeof (*(&(executor_globals.scope)->__callstatic)))", "memset(&(executor_globals.scope)->__get, 0, sizeof (*(&(executor_globals.scope)->__get)))", "memset(&(executor_globals.scope)->__isset, 0, sizeof (*(&(executor_globals.scope)->__isset)))", "memset(&(executor_globals.scope)->__set, 0, sizeof (*(&(executor_globals.scope)->__set)))", "memset(&(executor_globals.scope)->__tostring, 0, sizeof (*(&(executor_globals.scope)->__tostring)))", "memset(&(executor_globals.scope)->__unset, 0, sizeof (*(&(executor_globals.scope)->__unset)))", "memset(&(executor_globals.scope)->ce_flags, 0, sizeof (*(&(executor_globals.scope)->ce_flags)))", "memset(&(executor_globals.scope)->clone, 0, sizeof (*(&(executor_globals.scope)->clone)))", "memset(&(executor_globals.scope)->constants_table, 0, sizeof (*(&(executor_globals.scope)->constants_table)))", "memset(&(executor_globals.scope)->constructor, 0, sizeof (*(&(executor_globals.scope)->constructor)))", "memset(&(executor_globals.scope)->create_object, 0, sizeof (*(&(executor_globals.scope)->create_object)))", "memset(&(executor_globals.scope)->default_properties_count, 0, sizeof (*(&(executor_globals.scope)->default_properties_count)))", "memset(&(executor_globals.scope)->default_properties_table, 0, sizeof (*(&(executor_globals.scope)->default_properties_table)))", "memset(&(executor_globals.scope)->default_static_members_count, 0, sizeof (*(&(executor_globals.scope)->default_static_members_count)))", "memset(&(executor_globals.scope)->default_static_members_table, 0, sizeof (*(&(executor_globals.scope)->default_static_members_table)))", "memset(&(executor_globals.scope)->destructor, 0, sizeof (*(&(executor_globals.scope)->destructor)))", "memset(&(executor_globals.scope)->function_table, 0, sizeof (*(&(executor_globals.scope)->function_table)))", "memset(&(executor_globals.scope)->get_iterator, 0, sizeof (*(&(executor_globals.scope)->get_iterator)))", "memset(&(executor_globals.scope)->get_static_method, 0, sizeof (*(&(executor_globals.scope)->get_static_method)))", "memset(&(executor_globals.scope)->info, 0, sizeof (*(&(executor_globals.scope)->info)))", "memset(&(executor_globals.scope)->interface_gets_implemented, 0, sizeof (*(&(executor_globals.scope)->interface_gets_implemented)))", "memset(&(executor_globals.scope)->interfaces, 0, sizeof (*(&(executor_globals.scope)->interfaces)))", "memset(&(executor_globals.scope)->iterator_funcs, 0, sizeof (*(&(executor_globals.scope)->iterator_funcs)))", "memset(&(executor_globals.scope)->name, 0, sizeof (*(&(executor_globals.scope)->name)))", "memset(&(executor_globals.scope)->name_length, 0, sizeof (*(&(executor_globals.scope)->name_length)))", "memset(&(executor_globals.scope)->num_interfaces, 0, sizeof (*(&(executor_globals.scope)->num_interfaces)))", "memset(&(executor_globals.scope)->num_traits, 0, sizeof (*(&(executor_globals.scope)->num_traits)))", "memset(&(executor_globals.scope)->parent, 0, sizeof (*(&(executor_globals.scope)->parent)))", "memset(&(executor_globals.scope)->properties_info, 0, sizeof (*(&(executor_globals.scope)->properties_info)))", "memset(&(executor_globals.scope)->refcount, 0, sizeof (*(&(executor_globals.scope)->refcount)))", "memset(&(executor_globals.scope)->serialize, 0, sizeof (*(&(executor_globals.scope)->serialize)))", "memset(&(executor_globals.scope)->serialize_func, 0, sizeof (*(&(executor_globals.scope)->serialize_func)))", "memset(&(executor_globals.scope)->static_members_table, 0, sizeof (*(&(executor_globals.scope)->static_members_table)))", "memset(&(executor_globals.scope)->trait_aliases, 0, sizeof (*(&(executor_globals.scope)->trait_aliases)))", "memset(&(executor_globals.scope)->trait_precedences, 0, sizeof (*(&(executor_globals.scope)->trait_precedences)))", "memset(&(executor_globals.scope)->traits, 0, sizeof (*(&(executor_globals.scope)->traits)))", "memset(&(executor_globals.scope)->type, 0, sizeof (*(&(executor_globals.scope)->type)))", "memset(&(executor_globals.scope)->unserialize, 0, sizeof (*(&(executor_globals.scope)->unserialize)))", "memset(&(executor_globals.scope)->unserialize_func, 0, sizeof (*(&(executor_globals.scope)->unserialize_func)))", "memset(&ce->__call, 0, sizeof (*(&ce->__call)))", "memset(&ce->__callstatic, 0, sizeof (*(&ce->__callstatic)))", "memset(&ce->__get, 0, sizeof (*(&ce->__get)))", "memset(&ce->__isset, 0, sizeof (*(&ce->__isset)))", "memset(&ce->__set, 0, sizeof (*(&ce->__set)))", "memset(&ce->__tostring, 0, sizeof (*(&ce->__tostring)))", "memset(&ce->__unset, 0, sizeof (*(&ce->__unset)))", "memset(&ce->ce_flags, 0, sizeof (*(&ce->ce_flags)))", "memset(&ce->clone, 0, sizeof (*(&ce->clone)))", "memset(&ce->constants_table, 0, sizeof (*(&ce->constants_table)))", "memset(&ce->constructor, 0, sizeof (*(&ce->constructor)))", "memset(&ce->create_object, 0, sizeof (*(&ce->create_object)))", "memset(&ce->default_properties_count, 0, sizeof (*(&ce->default_properties_count)))", "memset(&ce->default_properties_table, 0, sizeof (*(&ce->default_properties_table)))", "memset(&ce->default_static_members_count, 0, sizeof (*(&ce->default_static_members_count)))", "memset(&ce->default_static_members_table, 0, sizeof (*(&ce->default_static_members_table)))", "memset(&ce->destructor, 0, sizeof (*(&ce->destructor)))", "memset(&ce->function_table, 0, sizeof (*(&ce->function_table)))", "memset(&ce->get_iterator, 0, sizeof (*(&ce->get_iterator)))", "memset(&ce->get_static_method, 0, sizeof (*(&ce->get_static_method)))", "memset(&ce->info, 0, sizeof (*(&ce->info)))", "memset(&ce->interface_gets_implemented, 0, sizeof (*(&ce->interface_gets_implemented)))", "memset(&ce->interfaces, 0, sizeof (*(&ce->interfaces)))", "memset(&ce->iterator_funcs, 0, sizeof (*(&ce->iterator_funcs)))", "memset(&ce->name, 0, sizeof (*(&ce->name)))", "memset(&ce->name_length, 0, sizeof (*(&ce->name_length)))", "memset(&ce->num_interfaces, 0, sizeof (*(&ce->num_interfaces)))", "memset(&ce->num_traits, 0, sizeof (*(&ce->num_traits)))", "memset(&ce->parent, 0, sizeof (*(&ce->parent)))", "memset(&ce->properties_info, 0, sizeof (*(&ce->properties_info)))", "memset(&ce->refcount, 0, sizeof (*(&ce->refcount)))", "memset(&ce->serialize, 0, sizeof (*(&ce->serialize)))", "memset(&ce->serialize_func, 0, sizeof (*(&ce->serialize_func)))", "memset(&ce->static_members_table, 0, sizeof (*(&ce->static_members_table)))", "memset(&ce->trait_aliases, 0, sizeof (*(&ce->trait_aliases)))", "memset(&ce->trait_precedences, 0, sizeof (*(&ce->trait_precedences)))", "memset(&ce->traits, 0, sizeof (*(&ce->traits)))", "memset(&ce->type, 0, sizeof (*(&ce->type)))", "memset(&ce->unserialize, 0, sizeof (*(&ce->unserialize)))", "memset(&ce->unserialize_func, 0, sizeof (*(&ce->unserialize_func)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&key->cache_slot, 0, sizeof (*(&key->cache_slot)))", "memset(&key->constant, 0, sizeof (*(&key->constant)))", "memset(&key->hash_value, 0, sizeof (*(&key->hash_value)))", "memset(&scope_property_info->ce, 0, sizeof (*(&scope_property_info->ce)))", "memset(&scope_property_info->doc_comment, 0, sizeof (*(&scope_property_info->doc_comment)))", "memset(&scope_property_info->doc_comment_len, 0, sizeof (*(&scope_property_info->doc_comment_len)))", "memset(&scope_property_info->flags, 0, sizeof (*(&scope_property_info->flags)))", "memset(&scope_property_info->h, 0, sizeof (*(&scope_property_info->h)))", "memset(&scope_property_info->name, 0, sizeof (*(&scope_property_info->name)))", "memset(&scope_property_info->name_length, 0, sizeof (*(&scope_property_info->name_length)))", "memset(&scope_property_info->offset, 0, sizeof (*(&scope_property_info->offset)))", "memset((*member).value.ht, 0, sizeof (*((*member).value.ht)))", "memset((*member).value.str.val, 0, sizeof (*((*member).value.str.val)))", "memset((executor_globals.active_op_array)->arg_info, 0, sizeof (*((executor_globals.active_op_array)->arg_info)))", "memset((executor_globals.active_op_array)->brk_cont_array, 0, sizeof (*((executor_globals.active_op_array)->brk_cont_array)))", "memset((executor_globals.active_op_array)->doc_comment, 0, sizeof (*((executor_globals.active_op_array)->doc_comment)))", "memset((executor_globals.active_op_array)->filename, 0, sizeof (*((executor_globals.active_op_array)->filename)))", "memset((executor_globals.active_op_array)->function_name, 0, sizeof (*((executor_globals.active_op_array)->function_name)))", "memset((executor_globals.active_op_array)->literals, 0, sizeof (*((executor_globals.active_op_array)->literals)))", "memset((executor_globals.active_op_array)->opcodes, 0, sizeof (*((executor_globals.active_op_array)->opcodes)))", "memset((executor_globals.active_op_array)->prototype, 0, sizeof (*((executor_globals.active_op_array)->prototype)))", "memset((executor_globals.active_op_array)->refcount, 0, sizeof (*((executor_globals.active_op_array)->refcount)))", "memset((executor_globals.active_op_array)->run_time_cache, 0, sizeof (*((executor_globals.active_op_array)->run_time_cache)))", "memset((executor_globals.active_op_array)->scope, 0, sizeof (*((executor_globals.active_op_array)->scope)))", "memset((executor_globals.active_op_array)->static_variables, 0, sizeof (*((executor_globals.active_op_array)->static_variables)))", "memset((executor_globals.active_op_array)->try_catch_array, 0, sizeof (*((executor_globals.active_op_array)->try_catch_array)))", "memset((executor_globals.active_op_array)->vars, 0, sizeof (*((executor_globals.active_op_array)->vars)))", "memset((executor_globals.scope)->__call, 0, sizeof (*((executor_globals.scope)->__call)))", "memset((executor_globals.scope)->__callstatic, 0, sizeof (*((executor_globals.scope)->__callstatic)))", "memset((executor_globals.scope)->__get, 0, sizeof (*((executor_globals.scope)->__get)))", "memset((executor_globals.scope)->__isset, 0, sizeof (*((executor_globals.scope)->__isset)))", "memset((executor_globals.scope)->__set, 0, sizeof (*((executor_globals.scope)->__set)))", "memset((executor_globals.scope)->__tostring, 0, sizeof (*((executor_globals.scope)->__tostring)))", "memset((executor_globals.scope)->__unset, 0, sizeof (*((executor_globals.scope)->__unset)))", "memset((executor_globals.scope)->clone, 0, sizeof (*((executor_globals.scope)->clone)))", "memset((executor_globals.scope)->constructor, 0, sizeof (*((executor_globals.scope)->constructor)))", "memset((executor_globals.scope)->create_object, 0, sizeof (*((executor_globals.scope)->create_object)))", "memset((executor_globals.scope)->default_properties_table, 0, sizeof (*((executor_globals.scope)->default_properties_table)))", "memset((executor_globals.scope)->default_static_members_table, 0, sizeof (*((executor_globals.scope)->default_static_members_table)))", "memset((executor_globals.scope)->destructor, 0, sizeof (*((executor_globals.scope)->destructor)))", "memset((executor_globals.scope)->get_iterator, 0, sizeof (*((executor_globals.scope)->get_iterator)))", "memset((executor_globals.scope)->get_static_method, 0, sizeof (*((executor_globals.scope)->get_static_method)))", "memset((executor_globals.scope)->interface_gets_implemented, 0, sizeof (*((executor_globals.scope)->interface_gets_implemented)))", "memset((executor_globals.scope)->interfaces, 0, sizeof (*((executor_globals.scope)->interfaces)))", "memset((executor_globals.scope)->name, 0, sizeof (*((executor_globals.scope)->name)))", "memset((executor_globals.scope)->parent, 0, sizeof (*((executor_globals.scope)->parent)))", "memset((executor_globals.scope)->serialize, 0, sizeof (*((executor_globals.scope)->serialize)))", "memset((executor_globals.scope)->serialize_func, 0, sizeof (*((executor_globals.scope)->serialize_func)))", "memset((executor_globals.scope)->static_members_table, 0, sizeof (*((executor_globals.scope)->static_members_table)))", "memset((executor_globals.scope)->trait_aliases, 0, sizeof (*((executor_globals.scope)->trait_aliases)))", "memset((executor_globals.scope)->trait_precedences, 0, sizeof (*((executor_globals.scope)->trait_precedences)))", "memset((executor_globals.scope)->traits, 0, sizeof (*((executor_globals.scope)->traits)))", "memset((executor_globals.scope)->unserialize, 0, sizeof (*((executor_globals.scope)->unserialize)))", "memset((executor_globals.scope)->unserialize_func, 0, sizeof (*((executor_globals.scope)->unserialize_func)))", "memset(ce->__call, 0, sizeof (*(ce->__call)))", "memset(ce->__callstatic, 0, sizeof (*(ce->__callstatic)))", "memset(ce->__get, 0, sizeof (*(ce->__get)))", "memset(ce->__isset, 0, sizeof (*(ce->__isset)))", "memset(ce->__set, 0, sizeof (*(ce->__set)))", "memset(ce->__tostring, 0, sizeof (*(ce->__tostring)))", "memset(ce->__unset, 0, sizeof (*(ce->__unset)))", "memset(ce->clone, 0, sizeof (*(ce->clone)))", "memset(ce->constructor, 0, sizeof (*(ce->constructor)))", "memset(ce->create_object, 0, sizeof (*(ce->create_object)))", "memset(ce->default_properties_table, 0, sizeof (*(ce->default_properties_table)))", "memset(ce->default_static_members_table, 0, sizeof (*(ce->default_static_members_table)))", "memset(ce->destructor, 0, sizeof (*(ce->destructor)))", "memset(ce->get_iterator, 0, sizeof (*(ce->get_iterator)))", "memset(ce->get_static_method, 0, sizeof (*(ce->get_static_method)))", "memset(ce->interface_gets_implemented, 0, sizeof (*(ce->interface_gets_implemented)))", "memset(ce->interfaces, 0, sizeof (*(ce->interfaces)))", "memset(ce->name, 0, sizeof (*(ce->name)))", "memset(ce->parent, 0, sizeof (*(ce->parent)))", "memset(ce->serialize, 0, sizeof (*(ce->serialize)))", "memset(ce->serialize_func, 0, sizeof (*(ce->serialize_func)))", "memset(ce->static_members_table, 0, sizeof (*(ce->static_members_table)))", "memset(ce->trait_aliases, 0, sizeof (*(ce->trait_aliases)))", "memset(ce->trait_precedences, 0, sizeof (*(ce->trait_precedences)))", "memset(ce->traits, 0, sizeof (*(ce->traits)))", "memset(ce->unserialize, 0, sizeof (*(ce->unserialize)))", "memset(ce->unserialize_func, 0, sizeof (*(ce->unserialize_func)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(scope_property_info->ce, 0, sizeof (*(scope_property_info->ce)))", "memset(scope_property_info->doc_comment, 0, sizeof (*(scope_property_info->doc_comment)))", "memset(scope_property_info->name, 0, sizeof (*(scope_property_info->name)))", "(executor_globals.std_property_info).ce = (ce)", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (1024)", "(executor_globals.std_property_info).flags = (11)", "(executor_globals.std_property_info).flags = (131072)", "(executor_globals.std_property_info).flags = (2048)", "(executor_globals.std_property_info).flags = (256)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (1024)", "(executor_globals.std_property_info).h = (11)", "(executor_globals.std_property_info).h = (131072)", "(executor_globals.std_property_info).h = (2048)", "(executor_globals.std_property_info).h = (256)", "(executor_globals.std_property_info).h = (h)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (1024)", "(executor_globals.std_property_info).name_length = (11)", "(executor_globals.std_property_info).name_length = (131072)", "(executor_globals.std_property_info).name_length = (2048)", "(executor_globals.std_property_info).name_length = (256)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (1024)", "(executor_globals.std_property_info).offset = (11)", "(executor_globals.std_property_info).offset = (131072)", "(executor_globals.std_property_info).offset = (2048)", "(executor_globals.std_property_info).offset = (256)", "(executor_globals.std_property_info).offset = (silent)", "_convert_to_string(((member)))", "_efree(((member)))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "denied_access = (-1)", "denied_access = (0)", "denied_access = (1)", "denied_access = (1024)", "denied_access = (11)", "denied_access = (131072)", "denied_access = (2048)", "denied_access = (256)", "denied_access = (denied_access)", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "h = (-1)", "h = (0)", "h = (1)", "h = (1024)", "h = (11)", "h = (131072)", "h = (2048)", "h = (256)", "h = (h)", "h = (key) ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? (key)->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "i_zval_ptr_dtor((member))", "property_info = (property_info)", "property_info = (scope_property_info)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", (ce)->name, (*member).value.str.val)", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*(member)).value.str.val)", "zend_error((1 << 12L), \"Method %s::__toString() must return a string value\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to double\", (ce)->name)", "zend_error((1 << 3L), \"Object of class %s could not be converted to int\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string((scope_property_info)->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), (ce)->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*(member)).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot use object of type %s as array\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Method %s::__toString() must not throw an exception\", (ce)->name)", "zend_error_noreturn((1 << 0L), \"Undefined offset for object of type %s used as array\", (ce)->name)", "zend_update_class_constants((ce))", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).ce = ce", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).h = h", "(executor_globals.std_property_info).name = (*member).value.str.val", "(executor_globals.std_property_info).name_length = (*member).value.str.len", "(executor_globals.std_property_info).offset = -1", "denied_access = 1", "exit(1)", "h = key ? key->hash_value : zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "property_info = &(executor_globals.std_property_info)", "property_info = ((void *)0)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 11L), \"Accessing static property %s::$%s as non static\", ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access %s property %s::$%s\", zend_visibility_string(property_info->flags), ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L319\", 8, &(property_info), sizeof (property_info), &(ce), sizeof (ce), &(h), sizeof (h), &(member), sizeof (member), &(key), sizeof (key), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	2,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	3,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	4,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	5,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	6,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	7,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	8,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	9,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	10,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	11,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	12,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	13,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	14,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	15,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	16,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	17,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	18,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	19,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	20,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	21,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	22,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	23,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	24,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	25,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	26,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	27,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	28,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	29,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	30,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	31,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	32,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	33,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	34,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	35,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	36,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	37,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	38,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	39,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	40,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	41,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	42,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	43,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	44,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	45,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	46,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	47,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	48,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	49,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	50,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	51,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	52,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	53,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	54,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	55,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	56,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	57,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	58,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	59,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	60,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	61,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	62,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	63,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	64,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	65,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	66,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	67,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	68,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	69,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	70,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	71,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	72,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	73,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	74,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	75,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	76,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	77,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	78,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	79,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	80,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	81,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	82,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	83,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	84,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	85,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	86,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	87,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	88,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	89,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	90,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	91,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	92,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	93,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	94,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	95,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	96,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	97,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	98,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	99,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	100,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	101,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	102,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	103,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	104,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	105,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	106,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	107,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	108,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	109,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	110,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	111,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	112,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	113,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	114,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	115,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	116,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	117,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	118,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	119,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	120,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	121,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	122,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	123,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	124,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	125,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	126,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	127,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	128,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	129,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	130,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	131,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	132,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	133,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	134,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	135,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	136,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	137,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	138,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	139,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	140,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	141,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	142,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	143,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	144,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	145,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	146,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	147,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	148,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	149,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	150,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	151,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	152,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	153,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	154,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	155,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	156,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	157,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	158,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	159,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	160,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	161,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	162,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	163,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	164,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	165,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	166,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	167,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	168,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	169,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	170,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	171,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	172,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	173,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	174,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	175,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	176,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	177,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	178,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	179,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	180,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	181,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	182,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	183,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	184,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	185,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	186,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	187,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	188,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	189,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	190,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	191,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	192,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	193,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	194,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	195,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	196,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	197,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	198,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	199,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	200,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	201,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	202,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	203,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	204,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	205,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	206,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	207,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	208,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	209,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	210,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	211,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	212,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	213,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	214,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	215,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	216,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	217,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	218,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	219,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	220,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	221,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	222,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	223,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	224,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	225,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	226,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	227,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	228,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	229,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	230,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	231,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	232,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	233,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	234,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	235,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	236,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	237,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	238,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	239,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	240,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	241,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	242,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	243,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	244,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	245,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	246,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	247,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	248,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	249,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	250,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	251,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	252,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	253,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	254,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	255,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	256,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	257,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	258,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	259,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	260,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	261,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	262,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	263,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	264,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	265,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	266,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	267,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	268,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	269,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	270,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	271,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	272,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	273,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	274,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	275,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	276,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	277,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	278,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	279,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	280,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	281,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	282,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	283,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	284,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	285,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	286,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	287,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	288,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	289,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	290,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	291,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	292,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	293,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	294,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	295,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	296,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	297,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	298,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	299,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	300,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	301,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	302,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	303,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	304,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	305,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	306,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	307,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	308,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	309,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	310,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	311,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	312,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	313,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	314,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	315,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	316,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	317,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	318,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	319,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	320,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	321,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	322,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	323,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	324,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	325,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	326,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	327,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	328,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	329,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	330,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	331,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	332,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	333,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	334,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	335,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	336,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	337,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	338,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	339,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	340,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	341,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	342,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	343,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	344,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	345,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	346,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	347,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	348,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	349,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	350,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	351,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	352,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	353,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	354,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	355,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	356,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	357,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	358,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	359,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	360,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	361,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	362,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	363,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	364,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	365,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	366,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	367,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	368,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	369,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	370,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	371,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	372,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	373,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	374,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	375,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	376,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	377,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	378,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	379,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	380,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	381,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	382,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	383,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	384,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	385,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	386,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	387,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	388,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	389,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	390,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	391,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	392,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	393,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	394,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	395,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	396,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	397,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	398,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	399,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	400,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	401,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	402,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	403,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	404,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	405,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	406,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	407,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	408,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	409,
									"scores":	[-8.8818890055379338]
								}, {
									"case":	410,
									"scores":	[-10.285428907337934, -11.840305489337933, -9.6653651015379332, -12.101451349337934, -12.054410235337933, -10.986247901537933, -9.7232865765379337, -11.675696054337934]
								}]
						}, {
							"switch":	35,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	319,
							"begin_column":	2,
							"end_line":	319,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L319\", 8, &(property_info), sizeof (property_info), &(ce), sizeof (ce), &(h), sizeof (h), &(member), sizeof (member), &(key), sizeof (key), &(silent), sizeof (silent), &(denied_access), sizeof (denied_access), &(scope_property_info), sizeof (scope_property_info)))\n    return property_info;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.205706649037934, -11.218211672037935, -9.4870295615379341, -11.434974686037933, -11.202186966037935, -10.251063345537935, -10.010993675537934, -10.710317267037935]
								}]
						}]
				}, {
					"line":	355,
					"switches":	[]
				}, {
					"line":	356,
					"switches":	[]
				}, {
					"line":	358,
					"switches":	[{
							"switch":	36,
							"types":	[[], [], [], [], [103, 104, 105], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	359,
							"begin_column":	0,
							"end_line":	359,
							"end_column":	0,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info, 0, sizeof (*(property_info)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L359\", 12, &(property_info), sizeof (property_info), &(member), sizeof (member), &(zobj), sizeof (zobj), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 0;\n", "if (__is_neg(\"\", \"L359\", 12, &(property_info), sizeof (property_info), &(member), sizeof (member), &(zobj), sizeof (zobj), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 1;\n", "if (__is_neg(\"\", \"L359\", 12, &(property_info), sizeof (property_info), &(member), sizeof (member), &(zobj), sizeof (zobj), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	2,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	3,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	4,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	5,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	6,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	7,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	8,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	9,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	10,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	11,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	12,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	13,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	14,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	15,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	16,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	17,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	18,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	19,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	20,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	21,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	22,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	23,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	24,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	25,
									"scores":	[-7.6697265664867667]
								}, {
									"case":	26,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	27,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	28,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	29,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	30,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	31,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	32,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	33,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	34,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	35,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	36,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	37,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	38,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	39,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	40,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	41,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	42,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	43,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	44,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	45,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	46,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	47,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	48,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	49,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	50,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	51,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	52,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	53,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	54,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	55,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	56,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	57,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	58,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	59,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	60,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	61,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	62,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	63,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	64,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	65,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	66,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	67,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	68,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	69,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	70,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	71,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	72,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	73,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	74,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	75,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	76,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	77,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	78,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	79,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	80,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	81,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	82,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	83,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	84,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	85,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	86,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	87,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	88,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	89,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	90,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	91,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	92,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	93,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	94,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	95,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	96,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	97,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	98,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	99,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	100,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	101,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	102,
									"scores":	[-3.7120230054281458]
								}, {
									"case":	103,
									"scores":	[-12.347126348186766, -10.763480028286768, -12.436530933186766, -12.077914879486766, -12.722911306486765, -11.893050885886765, -12.512022189486766, -12.366339536486766, -12.366339536486766, -12.577228653486767, -11.865404536486768, -12.612378450286766]
								}, {
									"case":	104,
									"scores":	[-15.171595348186766, -13.587949028286769, -15.260999933186767, -14.902383879486766, -15.547380306486765, -14.717519885886766, -15.336491189486765, -15.190808536486767, -15.190808536486767, -15.401697653486767, -14.689873536486768, -15.436847450286766]
								}, {
									"case":	105,
									"scores":	[-15.171595348186766, -13.587949028286769, -15.260999933186767, -14.902383879486766, -15.547380306486765, -14.717519885886766, -15.336491189486765, -15.190808536486767, -15.190808536486767, -15.401697653486767, -14.689873536486768, -15.436847450286766]
								}]
						}, {
							"switch":	37,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	359,
							"begin_column":	2,
							"end_line":	364,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L359\", 12, &(property_info), sizeof (property_info), &(member), sizeof (member), &(zobj), sizeof (zobj), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce))) {\n    property_info = &info;\n    info.name = (*member).value.str.val;\n    info.name_length = (*member).value.str.len;\n    info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1);\n}\n", "if ((!property_info) || __is_neg(\"\", \"L359\", 12, &(property_info), sizeof (property_info), &(member), sizeof (member), &(zobj), sizeof (zobj), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce))) {\n    property_info = &info;\n    info.name = (*member).value.str.val;\n    info.name_length = (*member).value.str.len;\n    info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1);\n}\n", "if ((!property_info) && !__is_neg(\"\", \"L359\", 12, &(property_info), sizeof (property_info), &(member), sizeof (member), &(zobj), sizeof (zobj), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce))) {\n    property_info = &info;\n    info.name = (*member).value.str.val;\n    info.name_length = (*member).value.str.len;\n    info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-4.0190545154281461, -1.649901956528145, -3.2246308544281463, -2.9054984565281456, -2.9071083655281482, -1.6447217859281449, -2.437848365528148, -3.1181081565281454, -3.1181081565281454, -3.5873681565281452, -2.7960971265281449, -3.8759962565281452]
								}, {
									"case":	2,
									"scores":	[-5.8105625443281461, -3.4414099854281455, -5.0161388833281464, -4.6970064854281457, -4.6986163944281465, -3.4362298148281454, -4.2293563944281463, -4.9096161854281455, -4.9096161854281455, -5.3788761854281457, -4.5876051554281458, -5.6675042854281461]
								}, {
									"case":	3,
									"scores":	[-5.8105625443281461, -3.4414099854281455, -5.0161388833281464, -4.6970064854281457, -4.6986163944281465, -3.4362298148281454, -4.2293563944281463, -4.9096161854281455, -4.9096161854281455, -5.3788761854281457, -4.5876051554281458, -5.6675042854281461]
								}]
						}, {
							"switch":	38,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	359,
							"begin_column":	2,
							"end_line":	364,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L359\", 12, &(property_info), sizeof (property_info), &(member), sizeof (member), &(zobj), sizeof (zobj), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    if (!property_info) {\n        property_info = &info;\n        info.name = (*member).value.str.val;\n        info.name_length = (*member).value.str.len;\n        info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1);\n    }\n", "if (!__is_neg(\"\", \"L359\", 12, &(property_info), sizeof (property_info), &(member), sizeof (member), &(zobj), sizeof (zobj), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)) && (!property_info)) {\n    property_info = &info;\n    info.name = (*member).value.str.val;\n    info.name_length = (*member).value.str.len;\n    info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.721071395386767, -8.35191883648677, -9.9266477343867656, -9.6075153364867667, -9.6091252454867657, -8.3467386658867664, -9.1398652454867673, -9.8201250364867665, -9.8201250364867665, -10.289385036486767, -9.498114006486766, -10.578013136486767]
								}, {
									"case":	2,
									"scores":	[-10.524152395386766, -8.1549998364867662, -9.7297287343867662, -9.4105963364867673, -9.4122062454867663, -8.149819665886767, -8.9429462454867661, -9.6232060364867671, -9.6232060364867671, -10.092466036486766, -9.3011950064867666, -10.381094136486766]
								}]
						}]
				}, {
					"line":	365,
					"switches":	[{
							"switch":	41,
							"types":	[[], [], [], [], [103, 104, 105], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	366,
							"begin_column":	1,
							"end_line":	366,
							"end_column":	1,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj, 0, sizeof (*(zobj)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L366\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(member), sizeof (member), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)))\n    return 0;\n", "if (__is_neg(\"\", \"L366\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(member), sizeof (member), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)))\n    return 1;\n", "if (__is_neg(\"\", \"L366\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(member), sizeof (member), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	2,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	3,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	4,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	5,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	6,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	7,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	8,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	9,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	10,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	11,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	12,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	13,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	14,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	15,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	16,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	17,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	18,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	19,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	20,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	21,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	22,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	23,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	24,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	25,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	26,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	27,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	28,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	29,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	30,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	31,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	32,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	33,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	34,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	35,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	36,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	37,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	38,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	39,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	40,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	41,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	42,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	43,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	44,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	45,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	46,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	47,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	48,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	49,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	50,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	51,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	52,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	53,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	54,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	55,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	56,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	57,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	58,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	59,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	60,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	61,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	62,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	63,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	64,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	65,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	66,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	67,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	68,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	69,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	70,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	71,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	72,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	73,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	74,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	75,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	76,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	77,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	78,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	79,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	80,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	81,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	82,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	83,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	84,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	85,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	86,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	87,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	88,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	89,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	90,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	91,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	92,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	93,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	94,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	95,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	96,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	97,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	98,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	99,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	100,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	101,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	102,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	103,
									"scores":	[-9.6108925139517272, -9.8111653910517269, -10.036048897051728, -9.7433139262517265, -10.036048897051728, -10.555509497051727, -10.555509497051727, -10.520359700251728]
								}, {
									"case":	104,
									"scores":	[-12.435361513951728, -12.635634391051727, -12.860517897051729, -12.567782926251727, -12.860517897051729, -13.379978497051727, -13.379978497051727, -13.344828700251728]
								}, {
									"case":	105,
									"scores":	[-12.435361513951728, -12.635634391051727, -12.860517897051729, -12.567782926251727, -12.860517897051729, -13.379978497051727, -13.379978497051727, -13.344828700251728]
								}]
						}, {
							"switch":	42,
							"types":	[[], [], [1], [], [], [], [], [], [15], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [], [], [14]],
							"begin_line":	366,
							"begin_column":	3,
							"end_line":	366,
							"end_column":	31,
							"patch_codes":	["if (!__is_neg(\"\", \"L366\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(member), sizeof (member), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)))\n    (zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)));\n", "__zend_calloc((sizeof(HashTable)), 0)", "__zend_calloc((sizeof(HashTable)), 1)", "__zend_calloc((sizeof(HashTable)), 2)", "_ecalloc((sizeof(HashTable)), 0)", "_ecalloc((sizeof(HashTable)), 1)", "_ecalloc((sizeof(HashTable)), 2)", "aligned_alloc((sizeof(HashTable)), 0)", "aligned_alloc((sizeof(HashTable)), 1)", "aligned_alloc((sizeof(HashTable)), 2)", "calloc((sizeof(HashTable)), 0)", "calloc((sizeof(HashTable)), 1)", "calloc((sizeof(HashTable)), 2)", "{\n}\n", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.27942477975173, -7.9986984618517276, -8.89531942185173, -8.2928936218517268, -8.89531942185173, -8.81201573185173, -8.81201573185173, -8.52338763185173]
								}, {
									"case":	2,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	3,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	4,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	5,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	6,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	7,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	8,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	9,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	10,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	11,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	12,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	13,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	14,
									"scores":	[-7.6293211518517277]
								}, {
									"case":	15,
									"scores":	[-7.6293211518517277]
								}]
						}]
				}, {
					"line":	366,
					"switches":	[{
							"switch":	43,
							"types":	[[], [], [], [], [103, 104, 105], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	367,
							"begin_column":	1,
							"end_line":	367,
							"end_column":	1,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj, 0, sizeof (*(zobj)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L367\", 16, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(member), sizeof (member), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 0;\n", "if (__is_neg(\"\", \"L367\", 16, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(member), sizeof (member), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 1;\n", "if (__is_neg(\"\", \"L367\", 16, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(member), sizeof (member), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	2,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	3,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	4,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	5,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	6,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	7,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	8,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	9,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	10,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	11,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	12,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	13,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	14,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	15,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	16,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	17,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	18,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	19,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	20,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	21,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	22,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	23,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	24,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	25,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	26,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	27,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	28,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	29,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	30,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	31,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	32,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	33,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	34,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	35,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	36,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	37,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	38,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	39,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	40,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	41,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	42,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	43,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	44,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	45,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	46,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	47,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	48,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	49,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	50,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	51,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	52,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	53,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	54,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	55,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	56,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	57,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	58,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	59,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	60,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	61,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	62,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	63,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	64,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	65,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	66,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	67,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	68,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	69,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	70,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	71,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	72,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	73,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	74,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	75,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	76,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	77,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	78,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	79,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	80,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	81,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	82,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	83,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	84,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	85,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	86,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	87,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	88,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	89,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	90,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	91,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	92,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	93,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	94,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	95,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	96,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	97,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	98,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	99,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	100,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	101,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	102,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	103,
									"scores":	[-11.387170004634207, -8.04689674073421, -10.187575589734209, -9.8948406189342073, -10.671886392934208, -9.96006227593421, -10.460997275934208, -10.187575589734209, -10.707036189734207, -10.707036189734207, -10.671886392934208, -10.460997275934208, -10.460997275934208, -10.671886392934208, -9.96006227593421, -10.707036189734207]
								}, {
									"case":	104,
									"scores":	[-14.211639004634208, -10.871365740734209, -13.012044589734209, -12.719309618934208, -13.496355392934209, -12.784531275934208, -13.285466275934208, -13.012044589734209, -13.531505189734208, -13.531505189734208, -13.496355392934209, -13.285466275934208, -13.285466275934208, -13.496355392934209, -12.784531275934208, -13.531505189734208]
								}, {
									"case":	105,
									"scores":	[-14.211639004634208, -10.871365740734209, -13.012044589734209, -12.719309618934208, -13.496355392934209, -12.784531275934208, -13.285466275934208, -13.012044589734209, -13.531505189734208, -13.531505189734208, -13.496355392934209, -13.285466275934208, -13.285466275934208, -13.496355392934209, -12.784531275934208, -13.531505189734208]
								}]
						}, {
							"switch":	44,
							"types":	[[], [], [1], [], [], [], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], [], [9, 10], [], [], [], [], [2, 3, 4, 5, 6, 7], [], [], [8]],
							"begin_line":	367,
							"begin_column":	3,
							"end_line":	367,
							"end_column":	48,
							"patch_codes":	["if (!__is_neg(\"\", \"L367\", 16, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(member), sizeof (member), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    _zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0));\n", "_zend_hash_init_ex((zobj->guards), (0), (((void *)0)), (((void *)0)), (0), 0)", "_zend_hash_init_ex((zobj->guards), (0), (((void *)0)), (((void *)0)), (0), 1)", "_zend_hash_init_ex((zobj->guards), (0), (((void *)0)), (((void *)0)), (0), 2)", "_zend_ts_hash_init_ex((zobj->guards), (0), (((void *)0)), (((void *)0)), (0), 0)", "_zend_ts_hash_init_ex((zobj->guards), (0), (((void *)0)), (((void *)0)), (0), 1)", "_zend_ts_hash_init_ex((zobj->guards), (0), (((void *)0)), (((void *)0)), (0), 2)", "{\n}\n", "_zend_ts_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "printf((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((&info)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((&member)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((&pguard)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((&property_info)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((&stub)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((&zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((info != 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((info == 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((member != 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((member == 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((pguard != 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((pguard == 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((property_info != 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((property_info == 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((stub != 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((stub == 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((zobj != 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), ((zobj == 0)), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((info != 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((info == 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((member != 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((member == 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((pguard != 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((pguard == 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((property_info != 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((property_info == 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((stub != 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((stub == 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((zobj != 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), ((zobj == 0)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.01736110503421, -8.29125546453421, -9.96867131453421, -9.36624551453421, -9.59673952453421, -8.80546849453421, -9.12747952453421, -9.96867131453421, -9.88536762453421, -9.88536762453421, -9.59673952453421, -9.12747952453421, -9.12747952453421, -9.59673952453421, -8.80546849453421, -9.88536762453421]
								}, {
									"case":	2,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	3,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	4,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	5,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	6,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	7,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	8,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	9,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	10,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	11,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	12,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	13,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	14,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	15,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	16,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	17,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	18,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	19,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	20,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	21,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	22,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	23,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	24,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	25,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	26,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	27,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	28,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	29,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	30,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	31,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	32,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	33,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	34,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	35,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	36,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	37,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	38,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	39,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	40,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	41,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	42,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	43,
									"scores":	[-7.6091184445342082]
								}, {
									"case":	44,
									"scores":	[-7.6091184445342082]
								}]
						}]
				}, {
					"line":	364,
					"switches":	[{
							"switch":	39,
							"types":	[[], [], [], [], [104, 105, 106], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], [], [], [], [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], [], [], [], [], [], []],
							"begin_line":	365,
							"begin_column":	0,
							"end_line":	365,
							"end_column":	0,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info, 0, sizeof (*(property_info)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj, 0, sizeof (*(zobj)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L365\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(member), sizeof (member), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)))\n    return 0;\n", "if (__is_neg(\"\", \"L365\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(member), sizeof (member), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)))\n    return 1;\n", "if (__is_neg(\"\", \"L365\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(member), sizeof (member), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	2,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	3,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	4,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	5,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	6,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	7,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	8,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	9,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	10,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	11,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	12,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	13,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	14,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	15,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	16,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	17,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	18,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	19,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	20,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	21,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	22,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	23,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	24,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	25,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	26,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	27,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	28,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	29,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	30,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	31,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	32,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	33,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	34,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	35,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	36,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	37,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	38,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	39,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	40,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	41,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	42,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	43,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	44,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	45,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	46,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	47,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	48,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	49,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	50,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	51,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	52,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	53,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	54,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	55,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	56,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	57,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	58,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	59,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	60,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	61,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	62,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	63,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	64,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	65,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	66,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	67,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	68,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	69,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	70,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	71,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	72,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	73,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	74,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	75,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	76,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	77,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	78,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	79,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	80,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	81,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	82,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	83,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	84,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	85,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	86,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	87,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	88,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	89,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	90,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	91,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	92,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	93,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	94,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	95,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	96,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	97,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	98,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	99,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	100,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	101,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	102,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	103,
									"scores":	[-7.6495238591692472]
								}, {
									"case":	104,
									"scores":	[-11.652434537869247, -11.264622414969248, -12.601140902969249, -11.821656231869248, -12.062587950169247, -13.009957142969247, -13.009957142969247, -12.974807346169246]
								}, {
									"case":	105,
									"scores":	[-14.476903537869248, -14.089091414969246, -15.425609902969249, -14.646125231869249, -14.887056950169246, -15.834426142969246, -15.834426142969246, -15.799276346169247]
								}, {
									"case":	106,
									"scores":	[-14.476903537869248, -14.089091414969246, -15.425609902969249, -14.646125231869249, -14.887056950169246, -15.834426142969246, -15.834426142969246, -15.799276346169247]
								}]
						}, {
							"switch":	40,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	365,
							"begin_column":	2,
							"end_line":	370,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L365\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(member), sizeof (member), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table))) {\n    (zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)));\n    _zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0));\n} else if (zend_hash_quick_find(zobj->guards, property_info->name, property_info->name_length + 1, property_info->h, (void **)pguard) == 0) {\n    return 0;\n}\n", "if ((!zobj->guards) || __is_neg(\"\", \"L365\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(member), sizeof (member), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table))) {\n    (zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)));\n    _zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0));\n} else if (zend_hash_quick_find(zobj->guards, property_info->name, property_info->name_length + 1, property_info->h, (void **)pguard) == 0) {\n    return 0;\n}\n", "if ((!zobj->guards) && !__is_neg(\"\", \"L365\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(member), sizeof (member), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table))) {\n    (zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)));\n    _zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0));\n} else if (zend_hash_quick_find(zobj->guards, property_info->name, property_info->name_length + 1, property_info->h, (void **)pguard) == 0) {\n    return 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.8419125164281471, -4.2295597374281471, -4.9495707169281467, -3.7699423464281465, -3.9408274064281477, -5.0760525164281463, -5.0760525164281463, -4.7874244164281468]
								}, {
									"case":	2,
									"scores":	[-4.3059596904281463, -4.6936069114281462, -5.4136178909281458, -4.2339895204281452, -4.4048745804281459, -5.5400996904281454, -5.5400996904281454, -5.2514715904281459]
								}, {
									"case":	3,
									"scores":	[-4.3059596904281463, -4.6936069114281462, -5.4136178909281458, -4.2339895204281452, -4.4048745804281459, -5.5400996904281454, -5.5400996904281454, -5.2514715904281459]
								}]
						}, {
							"switch":	45,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	365,
							"begin_column":	2,
							"end_line":	370,
							"end_column":	2,
							"patch_codes":	["if (!__is_neg(\"\", \"L365\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(member), sizeof (member), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)))\n    if (!zobj->guards) {\n        (zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)));\n        _zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0));\n    } else if (zend_hash_quick_find(zobj->guards, property_info->name, property_info->name_length + 1, property_info->h, (void **)pguard) == 0) {\n        return 0;\n    }\n", "if (!__is_neg(\"\", \"L365\", 8, &(zobj), sizeof (zobj), &(zobj->guards), sizeof (zobj->guards), &(member), sizeof (member), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table)) && (!zobj->guards)) {\n    (zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)));\n    _zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0));\n} else if (zend_hash_quick_find(zobj->guards, property_info->name, property_info->name_length + 1, property_info->h, (void **)pguard) == 0) {\n    return 0;\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.29320443916925, -9.680851660169246, -10.400862639669246, -9.22123426916925, -9.39211932916925, -10.527344439169248, -10.527344439169248, -10.238716339169248]
								}, {
									"case":	2,
									"scores":	[-9.127994344169247, -9.515641565169247, -10.235652544669247, -9.0560241741692469, -9.2269092341692467, -10.362134344169247, -10.362134344169247, -10.073506244169247]
								}]
						}]
				}, {
					"line":	370,
					"switches":	[{
							"switch":	46,
							"types":	[[], [], [], [], [103, 104, 105], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	371,
							"begin_column":	0,
							"end_line":	371,
							"end_column":	0,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub, 0, sizeof (*(&stub)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L371\", 9, &(stub.in_get), sizeof (stub.in_get), &(stub.in_set), sizeof (stub.in_set), &(stub.in_unset), sizeof (stub.in_unset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_isset), sizeof (stub.in_isset), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 0;\n", "if (__is_neg(\"\", \"L371\", 9, &(stub.in_get), sizeof (stub.in_get), &(stub.in_set), sizeof (stub.in_set), &(stub.in_unset), sizeof (stub.in_unset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_isset), sizeof (stub.in_isset), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 1;\n", "if (__is_neg(\"\", \"L371\", 9, &(stub.in_get), sizeof (stub.in_get), &(stub.in_set), sizeof (stub.in_set), &(stub.in_unset), sizeof (stub.in_unset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_isset), sizeof (stub.in_isset), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	2,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	3,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	4,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	5,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	6,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	7,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	8,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	9,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	10,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	11,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	12,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	13,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	14,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	15,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	16,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	17,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	18,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	19,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	20,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	21,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	22,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	23,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	24,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	25,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	26,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	27,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	28,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	29,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	30,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	31,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	32,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	33,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	34,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	35,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	36,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	37,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	38,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	39,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	40,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	41,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	42,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	43,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	44,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	45,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	46,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	47,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	48,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	49,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	50,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	51,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	52,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	53,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	54,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	55,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	56,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	57,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	58,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	59,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	60,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	61,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	62,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	63,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	64,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	65,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	66,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	67,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	68,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	69,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	70,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	71,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	72,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	73,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	74,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	75,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	76,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	77,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	78,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	79,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	80,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	81,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	82,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	83,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	84,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	85,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	86,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	87,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	88,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	89,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	90,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	91,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	92,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	93,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	94,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	95,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	96,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	97,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	98,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	99,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	100,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	101,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	102,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	103,
									"scores":	[-10.540813462216688, -10.870475607216688, -10.870475607216688, -10.575744907016688, -9.2425738810166873, -10.219406690216688, -10.870475607216688, -10.607119781016689, -10.769897107216689]
								}, {
									"case":	104,
									"scores":	[-13.365282462216689, -13.694944607216689, -13.694944607216689, -13.400213907016688, -12.067042881016688, -13.043875690216687, -13.694944607216689, -13.431588781016689, -13.59436610721669]
								}, {
									"case":	105,
									"scores":	[-13.365282462216689, -13.694944607216689, -13.694944607216689, -13.400213907016688, -12.067042881016688, -13.043875690216687, -13.694944607216689, -13.431588781016689, -13.59436610721669]
								}]
						}, {
							"switch":	47,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	371,
							"begin_column":	2,
							"end_line":	371,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L371\", 9, &(stub.in_get), sizeof (stub.in_get), &(stub.in_set), sizeof (stub.in_set), &(stub.in_unset), sizeof (stub.in_unset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_isset), sizeof (stub.in_isset), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    stub.in_get = 0;\n", "{\n}\n", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_get = (info != 0)", "stub.in_get = (info == 0)", "stub.in_get = (member != 0)", "stub.in_get = (member == 0)", "stub.in_get = (pguard != 0)", "stub.in_get = (pguard == 0)", "stub.in_get = (property_info != 0)", "stub.in_get = (property_info == 0)", "stub.in_get = (stub != 0)", "stub.in_get = (stub == 0)", "stub.in_get = (zobj != 0)", "stub.in_get = (zobj == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.27265090821669, -9.27230357221669, -8.45694088121669, -8.94018059771669, -8.74386443771669, -8.78032800721669, -8.45694088121669, -9.08869451771669, -8.45728821721669]
								}, {
									"case":	2,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	3,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	4,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	5,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	6,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	7,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	8,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	9,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	10,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	11,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	12,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	13,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	14,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	15,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	16,
									"scores":	[-7.5889157372166887]
								}, {
									"case":	17,
									"scores":	[-7.5889157372166887]
								}]
						}]
				}, {
					"line":	371,
					"switches":	[{
							"switch":	48,
							"types":	[[], [], [], [], [103, 104, 105], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	372,
							"begin_column":	0,
							"end_line":	372,
							"end_column":	0,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub, 0, sizeof (*(&stub)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L372\", 9, &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 0;\n", "if (__is_neg(\"\", \"L372\", 9, &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 1;\n", "if (__is_neg(\"\", \"L372\", 9, &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.56871302989917]
								}, {
									"case":	2,
									"scores":	[-7.56871302989917]
								}, {
									"case":	3,
									"scores":	[-7.56871302989917]
								}, {
									"case":	4,
									"scores":	[-7.56871302989917]
								}, {
									"case":	5,
									"scores":	[-7.56871302989917]
								}, {
									"case":	6,
									"scores":	[-7.56871302989917]
								}, {
									"case":	7,
									"scores":	[-7.56871302989917]
								}, {
									"case":	8,
									"scores":	[-7.56871302989917]
								}, {
									"case":	9,
									"scores":	[-7.56871302989917]
								}, {
									"case":	10,
									"scores":	[-7.56871302989917]
								}, {
									"case":	11,
									"scores":	[-7.56871302989917]
								}, {
									"case":	12,
									"scores":	[-7.56871302989917]
								}, {
									"case":	13,
									"scores":	[-7.56871302989917]
								}, {
									"case":	14,
									"scores":	[-7.56871302989917]
								}, {
									"case":	15,
									"scores":	[-7.56871302989917]
								}, {
									"case":	16,
									"scores":	[-7.56871302989917]
								}, {
									"case":	17,
									"scores":	[-7.56871302989917]
								}, {
									"case":	18,
									"scores":	[-7.56871302989917]
								}, {
									"case":	19,
									"scores":	[-7.56871302989917]
								}, {
									"case":	20,
									"scores":	[-7.56871302989917]
								}, {
									"case":	21,
									"scores":	[-7.56871302989917]
								}, {
									"case":	22,
									"scores":	[-7.56871302989917]
								}, {
									"case":	23,
									"scores":	[-7.56871302989917]
								}, {
									"case":	24,
									"scores":	[-7.56871302989917]
								}, {
									"case":	25,
									"scores":	[-7.56871302989917]
								}, {
									"case":	26,
									"scores":	[-7.56871302989917]
								}, {
									"case":	27,
									"scores":	[-7.56871302989917]
								}, {
									"case":	28,
									"scores":	[-7.56871302989917]
								}, {
									"case":	29,
									"scores":	[-7.56871302989917]
								}, {
									"case":	30,
									"scores":	[-7.56871302989917]
								}, {
									"case":	31,
									"scores":	[-7.56871302989917]
								}, {
									"case":	32,
									"scores":	[-7.56871302989917]
								}, {
									"case":	33,
									"scores":	[-7.56871302989917]
								}, {
									"case":	34,
									"scores":	[-7.56871302989917]
								}, {
									"case":	35,
									"scores":	[-7.56871302989917]
								}, {
									"case":	36,
									"scores":	[-7.56871302989917]
								}, {
									"case":	37,
									"scores":	[-7.56871302989917]
								}, {
									"case":	38,
									"scores":	[-7.56871302989917]
								}, {
									"case":	39,
									"scores":	[-7.56871302989917]
								}, {
									"case":	40,
									"scores":	[-7.56871302989917]
								}, {
									"case":	41,
									"scores":	[-7.56871302989917]
								}, {
									"case":	42,
									"scores":	[-7.56871302989917]
								}, {
									"case":	43,
									"scores":	[-7.56871302989917]
								}, {
									"case":	44,
									"scores":	[-7.56871302989917]
								}, {
									"case":	45,
									"scores":	[-7.56871302989917]
								}, {
									"case":	46,
									"scores":	[-7.56871302989917]
								}, {
									"case":	47,
									"scores":	[-7.56871302989917]
								}, {
									"case":	48,
									"scores":	[-7.56871302989917]
								}, {
									"case":	49,
									"scores":	[-7.56871302989917]
								}, {
									"case":	50,
									"scores":	[-7.56871302989917]
								}, {
									"case":	51,
									"scores":	[-7.56871302989917]
								}, {
									"case":	52,
									"scores":	[-7.56871302989917]
								}, {
									"case":	53,
									"scores":	[-7.56871302989917]
								}, {
									"case":	54,
									"scores":	[-7.56871302989917]
								}, {
									"case":	55,
									"scores":	[-7.56871302989917]
								}, {
									"case":	56,
									"scores":	[-7.56871302989917]
								}, {
									"case":	57,
									"scores":	[-7.56871302989917]
								}, {
									"case":	58,
									"scores":	[-7.56871302989917]
								}, {
									"case":	59,
									"scores":	[-7.56871302989917]
								}, {
									"case":	60,
									"scores":	[-7.56871302989917]
								}, {
									"case":	61,
									"scores":	[-7.56871302989917]
								}, {
									"case":	62,
									"scores":	[-7.56871302989917]
								}, {
									"case":	63,
									"scores":	[-7.56871302989917]
								}, {
									"case":	64,
									"scores":	[-7.56871302989917]
								}, {
									"case":	65,
									"scores":	[-7.56871302989917]
								}, {
									"case":	66,
									"scores":	[-7.56871302989917]
								}, {
									"case":	67,
									"scores":	[-7.56871302989917]
								}, {
									"case":	68,
									"scores":	[-7.56871302989917]
								}, {
									"case":	69,
									"scores":	[-7.56871302989917]
								}, {
									"case":	70,
									"scores":	[-7.56871302989917]
								}, {
									"case":	71,
									"scores":	[-7.56871302989917]
								}, {
									"case":	72,
									"scores":	[-7.56871302989917]
								}, {
									"case":	73,
									"scores":	[-7.56871302989917]
								}, {
									"case":	74,
									"scores":	[-7.56871302989917]
								}, {
									"case":	75,
									"scores":	[-7.56871302989917]
								}, {
									"case":	76,
									"scores":	[-7.56871302989917]
								}, {
									"case":	77,
									"scores":	[-7.56871302989917]
								}, {
									"case":	78,
									"scores":	[-7.56871302989917]
								}, {
									"case":	79,
									"scores":	[-7.56871302989917]
								}, {
									"case":	80,
									"scores":	[-7.56871302989917]
								}, {
									"case":	81,
									"scores":	[-7.56871302989917]
								}, {
									"case":	82,
									"scores":	[-7.56871302989917]
								}, {
									"case":	83,
									"scores":	[-7.56871302989917]
								}, {
									"case":	84,
									"scores":	[-7.56871302989917]
								}, {
									"case":	85,
									"scores":	[-7.56871302989917]
								}, {
									"case":	86,
									"scores":	[-7.56871302989917]
								}, {
									"case":	87,
									"scores":	[-7.56871302989917]
								}, {
									"case":	88,
									"scores":	[-7.56871302989917]
								}, {
									"case":	89,
									"scores":	[-7.56871302989917]
								}, {
									"case":	90,
									"scores":	[-7.56871302989917]
								}, {
									"case":	91,
									"scores":	[-7.56871302989917]
								}, {
									"case":	92,
									"scores":	[-7.56871302989917]
								}, {
									"case":	93,
									"scores":	[-7.56871302989917]
								}, {
									"case":	94,
									"scores":	[-7.56871302989917]
								}, {
									"case":	95,
									"scores":	[-7.56871302989917]
								}, {
									"case":	96,
									"scores":	[-7.56871302989917]
								}, {
									"case":	97,
									"scores":	[-7.56871302989917]
								}, {
									"case":	98,
									"scores":	[-7.56871302989917]
								}, {
									"case":	99,
									"scores":	[-7.56871302989917]
								}, {
									"case":	100,
									"scores":	[-7.56871302989917]
								}, {
									"case":	101,
									"scores":	[-7.56871302989917]
								}, {
									"case":	102,
									"scores":	[-7.56871302989917]
								}, {
									"case":	103,
									"scores":	[-11.407708754899168, -10.50058025489917, -11.737370899899169, -11.737370899899169, -12.78149596259917, -11.448324936599169, -11.558654488899169, -11.474015073699171, -11.63679239989917]
								}, {
									"case":	104,
									"scores":	[-14.232177754899169, -13.32504925489917, -14.561839899899169, -14.561839899899169, -15.60596496259917, -14.272793936599168, -14.383123488899169, -14.298484073699171, -14.461261399899168]
								}, {
									"case":	105,
									"scores":	[-14.232177754899169, -13.32504925489917, -14.561839899899169, -14.561839899899169, -15.60596496259917, -14.272793936599168, -14.383123488899169, -14.298484073699171, -14.461261399899168]
								}]
						}, {
							"switch":	49,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	372,
							"begin_column":	2,
							"end_line":	372,
							"end_column":	16,
							"patch_codes":	["if (!__is_neg(\"\", \"L372\", 9, &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    stub.in_set = 0;\n", "{\n}\n", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_set = (info != 0)", "stub.in_set = (info == 0)", "stub.in_set = (member != 0)", "stub.in_set = (member == 0)", "stub.in_set = (pguard != 0)", "stub.in_set = (pguard == 0)", "stub.in_set = (property_info != 0)", "stub.in_set = (property_info == 0)", "stub.in_set = (stub != 0)", "stub.in_set = (stub == 0)", "stub.in_set = (zobj != 0)", "stub.in_set = (zobj == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.34875120089917, -8.79905864989917, -9.34840386489917, -8.53304117389917, -9.59312544429917, -9.39680928429917, -8.89645111589917, -9.16479481039917, -8.53338850989917]
								}, {
									"case":	2,
									"scores":	[-7.56871302989917]
								}, {
									"case":	3,
									"scores":	[-7.56871302989917]
								}, {
									"case":	4,
									"scores":	[-7.56871302989917]
								}, {
									"case":	5,
									"scores":	[-7.56871302989917]
								}, {
									"case":	6,
									"scores":	[-7.56871302989917]
								}, {
									"case":	7,
									"scores":	[-7.56871302989917]
								}, {
									"case":	8,
									"scores":	[-7.56871302989917]
								}, {
									"case":	9,
									"scores":	[-7.56871302989917]
								}, {
									"case":	10,
									"scores":	[-7.56871302989917]
								}, {
									"case":	11,
									"scores":	[-7.56871302989917]
								}, {
									"case":	12,
									"scores":	[-7.56871302989917]
								}, {
									"case":	13,
									"scores":	[-7.56871302989917]
								}, {
									"case":	14,
									"scores":	[-7.56871302989917]
								}, {
									"case":	15,
									"scores":	[-7.56871302989917]
								}, {
									"case":	16,
									"scores":	[-7.56871302989917]
								}, {
									"case":	17,
									"scores":	[-7.56871302989917]
								}]
						}]
				}, {
					"line":	372,
					"switches":	[{
							"switch":	50,
							"types":	[[], [], [], [], [103, 104, 105], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	373,
							"begin_column":	0,
							"end_line":	373,
							"end_column":	0,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub, 0, sizeof (*(&stub)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L373\", 9, &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_set), sizeof (stub.in_set), &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 0;\n", "if (__is_neg(\"\", \"L373\", 9, &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_set), sizeof (stub.in_set), &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 1;\n", "if (__is_neg(\"\", \"L373\", 9, &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_set), sizeof (stub.in_set), &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.54851032258165]
								}, {
									"case":	2,
									"scores":	[-7.54851032258165]
								}, {
									"case":	3,
									"scores":	[-7.54851032258165]
								}, {
									"case":	4,
									"scores":	[-7.54851032258165]
								}, {
									"case":	5,
									"scores":	[-7.54851032258165]
								}, {
									"case":	6,
									"scores":	[-7.54851032258165]
								}, {
									"case":	7,
									"scores":	[-7.54851032258165]
								}, {
									"case":	8,
									"scores":	[-7.54851032258165]
								}, {
									"case":	9,
									"scores":	[-7.54851032258165]
								}, {
									"case":	10,
									"scores":	[-7.54851032258165]
								}, {
									"case":	11,
									"scores":	[-7.54851032258165]
								}, {
									"case":	12,
									"scores":	[-7.54851032258165]
								}, {
									"case":	13,
									"scores":	[-7.54851032258165]
								}, {
									"case":	14,
									"scores":	[-7.54851032258165]
								}, {
									"case":	15,
									"scores":	[-7.54851032258165]
								}, {
									"case":	16,
									"scores":	[-7.54851032258165]
								}, {
									"case":	17,
									"scores":	[-7.54851032258165]
								}, {
									"case":	18,
									"scores":	[-7.54851032258165]
								}, {
									"case":	19,
									"scores":	[-7.54851032258165]
								}, {
									"case":	20,
									"scores":	[-7.54851032258165]
								}, {
									"case":	21,
									"scores":	[-7.54851032258165]
								}, {
									"case":	22,
									"scores":	[-7.54851032258165]
								}, {
									"case":	23,
									"scores":	[-7.54851032258165]
								}, {
									"case":	24,
									"scores":	[-7.54851032258165]
								}, {
									"case":	25,
									"scores":	[-7.54851032258165]
								}, {
									"case":	26,
									"scores":	[-7.54851032258165]
								}, {
									"case":	27,
									"scores":	[-7.54851032258165]
								}, {
									"case":	28,
									"scores":	[-7.54851032258165]
								}, {
									"case":	29,
									"scores":	[-7.54851032258165]
								}, {
									"case":	30,
									"scores":	[-7.54851032258165]
								}, {
									"case":	31,
									"scores":	[-7.54851032258165]
								}, {
									"case":	32,
									"scores":	[-7.54851032258165]
								}, {
									"case":	33,
									"scores":	[-7.54851032258165]
								}, {
									"case":	34,
									"scores":	[-7.54851032258165]
								}, {
									"case":	35,
									"scores":	[-7.54851032258165]
								}, {
									"case":	36,
									"scores":	[-7.54851032258165]
								}, {
									"case":	37,
									"scores":	[-7.54851032258165]
								}, {
									"case":	38,
									"scores":	[-7.54851032258165]
								}, {
									"case":	39,
									"scores":	[-7.54851032258165]
								}, {
									"case":	40,
									"scores":	[-7.54851032258165]
								}, {
									"case":	41,
									"scores":	[-7.54851032258165]
								}, {
									"case":	42,
									"scores":	[-7.54851032258165]
								}, {
									"case":	43,
									"scores":	[-7.54851032258165]
								}, {
									"case":	44,
									"scores":	[-7.54851032258165]
								}, {
									"case":	45,
									"scores":	[-7.54851032258165]
								}, {
									"case":	46,
									"scores":	[-7.54851032258165]
								}, {
									"case":	47,
									"scores":	[-7.54851032258165]
								}, {
									"case":	48,
									"scores":	[-7.54851032258165]
								}, {
									"case":	49,
									"scores":	[-7.54851032258165]
								}, {
									"case":	50,
									"scores":	[-7.54851032258165]
								}, {
									"case":	51,
									"scores":	[-7.54851032258165]
								}, {
									"case":	52,
									"scores":	[-7.54851032258165]
								}, {
									"case":	53,
									"scores":	[-7.54851032258165]
								}, {
									"case":	54,
									"scores":	[-7.54851032258165]
								}, {
									"case":	55,
									"scores":	[-7.54851032258165]
								}, {
									"case":	56,
									"scores":	[-7.54851032258165]
								}, {
									"case":	57,
									"scores":	[-7.54851032258165]
								}, {
									"case":	58,
									"scores":	[-7.54851032258165]
								}, {
									"case":	59,
									"scores":	[-7.54851032258165]
								}, {
									"case":	60,
									"scores":	[-7.54851032258165]
								}, {
									"case":	61,
									"scores":	[-7.54851032258165]
								}, {
									"case":	62,
									"scores":	[-7.54851032258165]
								}, {
									"case":	63,
									"scores":	[-7.54851032258165]
								}, {
									"case":	64,
									"scores":	[-7.54851032258165]
								}, {
									"case":	65,
									"scores":	[-7.54851032258165]
								}, {
									"case":	66,
									"scores":	[-7.54851032258165]
								}, {
									"case":	67,
									"scores":	[-7.54851032258165]
								}, {
									"case":	68,
									"scores":	[-7.54851032258165]
								}, {
									"case":	69,
									"scores":	[-7.54851032258165]
								}, {
									"case":	70,
									"scores":	[-7.54851032258165]
								}, {
									"case":	71,
									"scores":	[-7.54851032258165]
								}, {
									"case":	72,
									"scores":	[-7.54851032258165]
								}, {
									"case":	73,
									"scores":	[-7.54851032258165]
								}, {
									"case":	74,
									"scores":	[-7.54851032258165]
								}, {
									"case":	75,
									"scores":	[-7.54851032258165]
								}, {
									"case":	76,
									"scores":	[-7.54851032258165]
								}, {
									"case":	77,
									"scores":	[-7.54851032258165]
								}, {
									"case":	78,
									"scores":	[-7.54851032258165]
								}, {
									"case":	79,
									"scores":	[-7.54851032258165]
								}, {
									"case":	80,
									"scores":	[-7.54851032258165]
								}, {
									"case":	81,
									"scores":	[-7.54851032258165]
								}, {
									"case":	82,
									"scores":	[-7.54851032258165]
								}, {
									"case":	83,
									"scores":	[-7.54851032258165]
								}, {
									"case":	84,
									"scores":	[-7.54851032258165]
								}, {
									"case":	85,
									"scores":	[-7.54851032258165]
								}, {
									"case":	86,
									"scores":	[-7.54851032258165]
								}, {
									"case":	87,
									"scores":	[-7.54851032258165]
								}, {
									"case":	88,
									"scores":	[-7.54851032258165]
								}, {
									"case":	89,
									"scores":	[-7.54851032258165]
								}, {
									"case":	90,
									"scores":	[-7.54851032258165]
								}, {
									"case":	91,
									"scores":	[-7.54851032258165]
								}, {
									"case":	92,
									"scores":	[-7.54851032258165]
								}, {
									"case":	93,
									"scores":	[-7.54851032258165]
								}, {
									"case":	94,
									"scores":	[-7.54851032258165]
								}, {
									"case":	95,
									"scores":	[-7.54851032258165]
								}, {
									"case":	96,
									"scores":	[-7.54851032258165]
								}, {
									"case":	97,
									"scores":	[-7.54851032258165]
								}, {
									"case":	98,
									"scores":	[-7.54851032258165]
								}, {
									"case":	99,
									"scores":	[-7.54851032258165]
								}, {
									"case":	100,
									"scores":	[-7.54851032258165]
								}, {
									"case":	101,
									"scores":	[-7.54851032258165]
								}, {
									"case":	102,
									"scores":	[-7.54851032258165]
								}, {
									"case":	103,
									"scores":	[-11.387506047581649, -10.48037754758165, -11.717168192581649, -12.76129325528165, -13.232953709281652, -11.538451781581649, -10.48037754758165, -11.343168006381649, -11.61658969258165]
								}, {
									"case":	104,
									"scores":	[-14.21197504758165, -13.304846547581651, -14.54163719258165, -15.585762255281651, -16.057422709281653, -14.36292078158165, -13.304846547581651, -14.16763700638165, -14.441058692581649]
								}, {
									"case":	105,
									"scores":	[-14.21197504758165, -13.304846547581651, -14.54163719258165, -15.585762255281651, -16.057422709281653, -14.36292078158165, -13.304846547581651, -14.16763700638165, -14.441058692581649]
								}]
						}, {
							"switch":	51,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	373,
							"begin_column":	2,
							"end_line":	373,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L373\", 9, &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_set), sizeof (stub.in_set), &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy)))\n    stub.in_unset = 0;\n", "{\n}\n", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "stub.in_unset = (info != 0)", "stub.in_unset = (info == 0)", "stub.in_unset = (member != 0)", "stub.in_unset = (member == 0)", "stub.in_unset = (pguard != 0)", "stub.in_unset = (pguard == 0)", "stub.in_unset = (property_info != 0)", "stub.in_unset = (property_info == 0)", "stub.in_unset = (stub != 0)", "stub.in_unset = (stub == 0)", "stub.in_unset = (zobj != 0)", "stub.in_unset = (zobj == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.32854849358165, -8.77885594258165, -9.32820115758165, -9.57292273698165, -10.25728343698165, -8.87624840858165, -8.77885594258165, -9.35437759258165, -8.51318580258165]
								}, {
									"case":	2,
									"scores":	[-7.54851032258165]
								}, {
									"case":	3,
									"scores":	[-7.54851032258165]
								}, {
									"case":	4,
									"scores":	[-7.54851032258165]
								}, {
									"case":	5,
									"scores":	[-7.54851032258165]
								}, {
									"case":	6,
									"scores":	[-7.54851032258165]
								}, {
									"case":	7,
									"scores":	[-7.54851032258165]
								}, {
									"case":	8,
									"scores":	[-7.54851032258165]
								}, {
									"case":	9,
									"scores":	[-7.54851032258165]
								}, {
									"case":	10,
									"scores":	[-7.54851032258165]
								}, {
									"case":	11,
									"scores":	[-7.54851032258165]
								}, {
									"case":	12,
									"scores":	[-7.54851032258165]
								}, {
									"case":	13,
									"scores":	[-7.54851032258165]
								}, {
									"case":	14,
									"scores":	[-7.54851032258165]
								}, {
									"case":	15,
									"scores":	[-7.54851032258165]
								}, {
									"case":	16,
									"scores":	[-7.54851032258165]
								}, {
									"case":	17,
									"scores":	[-7.54851032258165]
								}]
						}]
				}, {
					"line":	373,
					"switches":	[{
							"switch":	52,
							"types":	[[], [], [], [], [103, 104, 105], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [], [], [], [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], [], [], [], [], [], []],
							"begin_line":	374,
							"begin_column":	0,
							"end_line":	374,
							"end_column":	0,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub, 0, sizeof (*(&stub)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L374\", 21, &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_unset), sizeof (stub.in_unset), &(zobj->guards), sizeof (zobj->guards), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 0;\n", "if (__is_neg(\"\", \"L374\", 21, &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_unset), sizeof (stub.in_unset), &(zobj->guards), sizeof (zobj->guards), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 1;\n", "if (__is_neg(\"\", \"L374\", 21, &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_unset), sizeof (stub.in_unset), &(zobj->guards), sizeof (zobj->guards), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.52830761526413]
								}, {
									"case":	2,
									"scores":	[-7.52830761526413]
								}, {
									"case":	3,
									"scores":	[-7.52830761526413]
								}, {
									"case":	4,
									"scores":	[-7.52830761526413]
								}, {
									"case":	5,
									"scores":	[-7.52830761526413]
								}, {
									"case":	6,
									"scores":	[-7.52830761526413]
								}, {
									"case":	7,
									"scores":	[-7.52830761526413]
								}, {
									"case":	8,
									"scores":	[-7.52830761526413]
								}, {
									"case":	9,
									"scores":	[-7.52830761526413]
								}, {
									"case":	10,
									"scores":	[-7.52830761526413]
								}, {
									"case":	11,
									"scores":	[-7.52830761526413]
								}, {
									"case":	12,
									"scores":	[-7.52830761526413]
								}, {
									"case":	13,
									"scores":	[-7.52830761526413]
								}, {
									"case":	14,
									"scores":	[-7.52830761526413]
								}, {
									"case":	15,
									"scores":	[-7.52830761526413]
								}, {
									"case":	16,
									"scores":	[-7.52830761526413]
								}, {
									"case":	17,
									"scores":	[-7.52830761526413]
								}, {
									"case":	18,
									"scores":	[-7.52830761526413]
								}, {
									"case":	19,
									"scores":	[-7.52830761526413]
								}, {
									"case":	20,
									"scores":	[-7.52830761526413]
								}, {
									"case":	21,
									"scores":	[-7.52830761526413]
								}, {
									"case":	22,
									"scores":	[-7.52830761526413]
								}, {
									"case":	23,
									"scores":	[-7.52830761526413]
								}, {
									"case":	24,
									"scores":	[-7.52830761526413]
								}, {
									"case":	25,
									"scores":	[-7.52830761526413]
								}, {
									"case":	26,
									"scores":	[-7.52830761526413]
								}, {
									"case":	27,
									"scores":	[-7.52830761526413]
								}, {
									"case":	28,
									"scores":	[-7.52830761526413]
								}, {
									"case":	29,
									"scores":	[-7.52830761526413]
								}, {
									"case":	30,
									"scores":	[-7.52830761526413]
								}, {
									"case":	31,
									"scores":	[-7.52830761526413]
								}, {
									"case":	32,
									"scores":	[-7.52830761526413]
								}, {
									"case":	33,
									"scores":	[-7.52830761526413]
								}, {
									"case":	34,
									"scores":	[-7.52830761526413]
								}, {
									"case":	35,
									"scores":	[-7.52830761526413]
								}, {
									"case":	36,
									"scores":	[-7.52830761526413]
								}, {
									"case":	37,
									"scores":	[-7.52830761526413]
								}, {
									"case":	38,
									"scores":	[-7.52830761526413]
								}, {
									"case":	39,
									"scores":	[-7.52830761526413]
								}, {
									"case":	40,
									"scores":	[-7.52830761526413]
								}, {
									"case":	41,
									"scores":	[-7.52830761526413]
								}, {
									"case":	42,
									"scores":	[-7.52830761526413]
								}, {
									"case":	43,
									"scores":	[-7.52830761526413]
								}, {
									"case":	44,
									"scores":	[-7.52830761526413]
								}, {
									"case":	45,
									"scores":	[-7.52830761526413]
								}, {
									"case":	46,
									"scores":	[-7.52830761526413]
								}, {
									"case":	47,
									"scores":	[-7.52830761526413]
								}, {
									"case":	48,
									"scores":	[-7.52830761526413]
								}, {
									"case":	49,
									"scores":	[-7.52830761526413]
								}, {
									"case":	50,
									"scores":	[-7.52830761526413]
								}, {
									"case":	51,
									"scores":	[-7.52830761526413]
								}, {
									"case":	52,
									"scores":	[-7.52830761526413]
								}, {
									"case":	53,
									"scores":	[-7.52830761526413]
								}, {
									"case":	54,
									"scores":	[-7.52830761526413]
								}, {
									"case":	55,
									"scores":	[-7.52830761526413]
								}, {
									"case":	56,
									"scores":	[-7.52830761526413]
								}, {
									"case":	57,
									"scores":	[-7.52830761526413]
								}, {
									"case":	58,
									"scores":	[-7.52830761526413]
								}, {
									"case":	59,
									"scores":	[-7.52830761526413]
								}, {
									"case":	60,
									"scores":	[-7.52830761526413]
								}, {
									"case":	61,
									"scores":	[-7.52830761526413]
								}, {
									"case":	62,
									"scores":	[-7.52830761526413]
								}, {
									"case":	63,
									"scores":	[-7.52830761526413]
								}, {
									"case":	64,
									"scores":	[-7.52830761526413]
								}, {
									"case":	65,
									"scores":	[-7.52830761526413]
								}, {
									"case":	66,
									"scores":	[-7.52830761526413]
								}, {
									"case":	67,
									"scores":	[-7.52830761526413]
								}, {
									"case":	68,
									"scores":	[-7.52830761526413]
								}, {
									"case":	69,
									"scores":	[-7.52830761526413]
								}, {
									"case":	70,
									"scores":	[-7.52830761526413]
								}, {
									"case":	71,
									"scores":	[-7.52830761526413]
								}, {
									"case":	72,
									"scores":	[-7.52830761526413]
								}, {
									"case":	73,
									"scores":	[-7.52830761526413]
								}, {
									"case":	74,
									"scores":	[-7.52830761526413]
								}, {
									"case":	75,
									"scores":	[-7.52830761526413]
								}, {
									"case":	76,
									"scores":	[-7.52830761526413]
								}, {
									"case":	77,
									"scores":	[-7.52830761526413]
								}, {
									"case":	78,
									"scores":	[-7.52830761526413]
								}, {
									"case":	79,
									"scores":	[-7.52830761526413]
								}, {
									"case":	80,
									"scores":	[-7.52830761526413]
								}, {
									"case":	81,
									"scores":	[-7.52830761526413]
								}, {
									"case":	82,
									"scores":	[-7.52830761526413]
								}, {
									"case":	83,
									"scores":	[-7.52830761526413]
								}, {
									"case":	84,
									"scores":	[-7.52830761526413]
								}, {
									"case":	85,
									"scores":	[-7.52830761526413]
								}, {
									"case":	86,
									"scores":	[-7.52830761526413]
								}, {
									"case":	87,
									"scores":	[-7.52830761526413]
								}, {
									"case":	88,
									"scores":	[-7.52830761526413]
								}, {
									"case":	89,
									"scores":	[-7.52830761526413]
								}, {
									"case":	90,
									"scores":	[-7.52830761526413]
								}, {
									"case":	91,
									"scores":	[-7.52830761526413]
								}, {
									"case":	92,
									"scores":	[-7.52830761526413]
								}, {
									"case":	93,
									"scores":	[-7.52830761526413]
								}, {
									"case":	94,
									"scores":	[-7.52830761526413]
								}, {
									"case":	95,
									"scores":	[-7.52830761526413]
								}, {
									"case":	96,
									"scores":	[-7.52830761526413]
								}, {
									"case":	97,
									"scores":	[-7.52830761526413]
								}, {
									"case":	98,
									"scores":	[-7.52830761526413]
								}, {
									"case":	99,
									"scores":	[-7.52830761526413]
								}, {
									"case":	100,
									"scores":	[-7.52830761526413]
								}, {
									"case":	101,
									"scores":	[-7.52830761526413]
								}, {
									"case":	102,
									"scores":	[-7.52830761526413]
								}, {
									"case":	103,
									"scores":	[-10.94952194026413, -11.98645448796413, -12.244039661964131, -11.084801434264129, -10.04239344026413, -11.764947658064131, -11.729797861264128, -10.899937440664129, -11.518908744264131, -10.04239344026413, -10.04239344026413, -10.905183899064131, -11.17860558526413, -11.424644499064129, -11.424644499064129, -11.38949470226413, -11.17860558526413, -11.17860558526413, -11.38949470226413, -10.67767058526413, -11.424644499064129]
								}, {
									"case":	104,
									"scores":	[-13.773990940264131, -14.810923487964128, -15.068508661964131, -13.90927043426413, -12.866862440264129, -14.589416658064131, -14.554266861264129, -13.724406440664129, -14.343377744264131, -12.866862440264129, -12.866862440264129, -13.729652899064131, -14.00307458526413, -14.24911349906413, -14.24911349906413, -14.213963702264131, -14.00307458526413, -14.00307458526413, -14.213963702264131, -13.50213958526413, -14.24911349906413]
								}, {
									"case":	105,
									"scores":	[-13.773990940264131, -14.810923487964128, -15.068508661964131, -13.90927043426413, -12.866862440264129, -14.589416658064131, -14.554266861264129, -13.724406440664129, -14.343377744264131, -12.866862440264129, -12.866862440264129, -13.729652899064131, -14.00307458526413, -14.24911349906413, -14.24911349906413, -14.213963702264131, -14.00307458526413, -14.00307458526413, -14.213963702264131, -13.50213958526413, -14.24911349906413]
								}]
						}, {
							"switch":	53,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	374,
							"begin_column":	2,
							"end_line":	374,
							"end_column":	18,
							"patch_codes":	["if (!__is_neg(\"\", \"L374\", 21, &(stub.in_isset), sizeof (stub.in_isset), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(stub.in_unset), sizeof (stub.in_unset), &(zobj->guards), sizeof (zobj->guards), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    stub.in_isset = 0;\n", "{\n}\n", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_isset = (info != 0)", "stub.in_isset = (info == 0)", "stub.in_isset = (member != 0)", "stub.in_isset = (member == 0)", "stub.in_isset = (pguard != 0)", "stub.in_isset = (pguard == 0)", "stub.in_isset = (property_info != 0)", "stub.in_isset = (property_info == 0)", "stub.in_isset = (stub != 0)", "stub.in_isset = (stub == 0)", "stub.in_isset = (zobj != 0)", "stub.in_isset = (zobj == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.44633898626413, -9.22727213516413, -9.54106983516413, -8.29445629726413, -8.89664643526413, -8.58469430626413, -8.29606620626413, -7.03367962666413, -7.82680620626413, -8.89664643526413, -8.89664643526413, -9.47216808526413, -8.63097629526413, -9.38886439526413, -9.38886439526413, -9.10023629526413, -8.63097629526413, -8.63097629526413, -9.10023629526413, -8.30896526526413, -9.38886439526413]
								}, {
									"case":	2,
									"scores":	[-7.52830761526413]
								}, {
									"case":	3,
									"scores":	[-7.52830761526413]
								}, {
									"case":	4,
									"scores":	[-7.52830761526413]
								}, {
									"case":	5,
									"scores":	[-7.52830761526413]
								}, {
									"case":	6,
									"scores":	[-7.52830761526413]
								}, {
									"case":	7,
									"scores":	[-7.52830761526413]
								}, {
									"case":	8,
									"scores":	[-7.52830761526413]
								}, {
									"case":	9,
									"scores":	[-7.52830761526413]
								}, {
									"case":	10,
									"scores":	[-7.52830761526413]
								}, {
									"case":	11,
									"scores":	[-7.52830761526413]
								}, {
									"case":	12,
									"scores":	[-7.52830761526413]
								}, {
									"case":	13,
									"scores":	[-7.52830761526413]
								}, {
									"case":	14,
									"scores":	[-7.52830761526413]
								}, {
									"case":	15,
									"scores":	[-7.52830761526413]
								}, {
									"case":	16,
									"scores":	[-7.52830761526413]
								}, {
									"case":	17,
									"scores":	[-7.52830761526413]
								}]
						}]
				}, {
					"line":	374,
					"switches":	[{
							"switch":	54,
							"types":	[[], [], [], [], [105, 106, 107], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], [], [], [], [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], [], [], [], [], [], []],
							"begin_line":	375,
							"begin_column":	0,
							"end_line":	375,
							"end_column":	0,
							"patch_codes":	["memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&stub, 0, sizeof (*(&stub)))", "memset(&stub.dummy, 0, sizeof (*(&stub.dummy)))", "memset(&stub.in_get, 0, sizeof (*(&stub.in_get)))", "memset(&stub.in_isset, 0, sizeof (*(&stub.in_isset)))", "memset(&stub.in_set, 0, sizeof (*(&stub.in_set)))", "memset(&stub.in_unset, 0, sizeof (*(&stub.in_unset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset(property_info, 0, sizeof (*(property_info)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj, 0, sizeof (*(zobj)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "_convert_to_string(((member)))", "_efree(((member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor_func((member))", "_zval_dtor(((member)))", "_zval_dtor_func((member))", "_zval_ptr_dtor((&(member)))", "convert_to_boolean((member))", "gc_remove_zval_from_buffer((member))", "gc_zval_check_possible_root(((member)))", "gc_zval_possible_root((member))", "i_zval_ptr_dtor((member))", "info.h = (0)", "info.h = (1)", "info.h = (2)", "info.h = zend_get_hash_value((*(member)).value.str.val, (*member).value.str.len + 1)", "info.h = zend_get_hash_value((*member).value.str.val, (*(member)).value.str.len + 1)", "info.name = (*(member)).value.str.val", "info.name_length = (*(member)).value.str.len", "info.name_length = (0)", "info.name_length = (1)", "info.name_length = (2)", "property_info = (property_info)", "rebuild_object_properties((zobj))", "stub.in_get = (0)", "stub.in_get = (1)", "stub.in_get = (2)", "stub.in_isset = (0)", "stub.in_isset = (1)", "stub.in_isset = (2)", "stub.in_set = (0)", "stub.in_set = (1)", "stub.in_set = (2)", "stub.in_unset = (0)", "stub.in_unset = (1)", "stub.in_unset = (2)", "zval_addref_p((member))", "zval_delref_p((member))", "zval_set_refcount_p((member), 0)", "zval_unset_isref_p((member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(zobj->guards) = (HashTable *)_emalloc((sizeof(HashTable)))", "_zend_hash_init((zobj->guards), (0), (((void *)0)), (((void *)0)), (0))", "exit(1)", "info.h = zend_get_hash_value((*member).value.str.val, (*member).value.str.len + 1)", "info.name = (*member).value.str.val", "info.name_length = (*member).value.str.len", "property_info = &info", "stub.in_get = 0", "stub.in_isset = 0", "stub.in_set = 0", "stub.in_unset = 0", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "if (__is_neg(\"\", \"L375\", 21, &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->guards), sizeof (zobj->guards), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(stub.in_isset), sizeof (stub.in_isset), &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 0;\n", "if (__is_neg(\"\", \"L375\", 21, &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->guards), sizeof (zobj->guards), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(stub.in_isset), sizeof (stub.in_isset), &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 1;\n", "if (__is_neg(\"\", \"L375\", 21, &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->guards), sizeof (zobj->guards), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(stub.in_isset), sizeof (stub.in_isset), &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return 2;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.50810490794661]
								}, {
									"case":	2,
									"scores":	[-7.50810490794661]
								}, {
									"case":	3,
									"scores":	[-7.50810490794661]
								}, {
									"case":	4,
									"scores":	[-7.50810490794661]
								}, {
									"case":	5,
									"scores":	[-7.50810490794661]
								}, {
									"case":	6,
									"scores":	[-7.50810490794661]
								}, {
									"case":	7,
									"scores":	[-7.50810490794661]
								}, {
									"case":	8,
									"scores":	[-7.50810490794661]
								}, {
									"case":	9,
									"scores":	[-7.50810490794661]
								}, {
									"case":	10,
									"scores":	[-7.50810490794661]
								}, {
									"case":	11,
									"scores":	[-7.50810490794661]
								}, {
									"case":	12,
									"scores":	[-7.50810490794661]
								}, {
									"case":	13,
									"scores":	[-7.50810490794661]
								}, {
									"case":	14,
									"scores":	[-7.50810490794661]
								}, {
									"case":	15,
									"scores":	[-7.50810490794661]
								}, {
									"case":	16,
									"scores":	[-7.50810490794661]
								}, {
									"case":	17,
									"scores":	[-7.50810490794661]
								}, {
									"case":	18,
									"scores":	[-7.50810490794661]
								}, {
									"case":	19,
									"scores":	[-7.50810490794661]
								}, {
									"case":	20,
									"scores":	[-7.50810490794661]
								}, {
									"case":	21,
									"scores":	[-7.50810490794661]
								}, {
									"case":	22,
									"scores":	[-7.50810490794661]
								}, {
									"case":	23,
									"scores":	[-7.50810490794661]
								}, {
									"case":	24,
									"scores":	[-7.50810490794661]
								}, {
									"case":	25,
									"scores":	[-7.50810490794661]
								}, {
									"case":	26,
									"scores":	[-7.50810490794661]
								}, {
									"case":	27,
									"scores":	[-7.50810490794661]
								}, {
									"case":	28,
									"scores":	[-7.50810490794661]
								}, {
									"case":	29,
									"scores":	[-7.50810490794661]
								}, {
									"case":	30,
									"scores":	[-7.50810490794661]
								}, {
									"case":	31,
									"scores":	[-7.50810490794661]
								}, {
									"case":	32,
									"scores":	[-7.50810490794661]
								}, {
									"case":	33,
									"scores":	[-7.50810490794661]
								}, {
									"case":	34,
									"scores":	[-7.50810490794661]
								}, {
									"case":	35,
									"scores":	[-7.50810490794661]
								}, {
									"case":	36,
									"scores":	[-7.50810490794661]
								}, {
									"case":	37,
									"scores":	[-7.50810490794661]
								}, {
									"case":	38,
									"scores":	[-7.50810490794661]
								}, {
									"case":	39,
									"scores":	[-7.50810490794661]
								}, {
									"case":	40,
									"scores":	[-7.50810490794661]
								}, {
									"case":	41,
									"scores":	[-7.50810490794661]
								}, {
									"case":	42,
									"scores":	[-7.50810490794661]
								}, {
									"case":	43,
									"scores":	[-7.50810490794661]
								}, {
									"case":	44,
									"scores":	[-7.50810490794661]
								}, {
									"case":	45,
									"scores":	[-7.50810490794661]
								}, {
									"case":	46,
									"scores":	[-7.50810490794661]
								}, {
									"case":	47,
									"scores":	[-7.50810490794661]
								}, {
									"case":	48,
									"scores":	[-7.50810490794661]
								}, {
									"case":	49,
									"scores":	[-7.50810490794661]
								}, {
									"case":	50,
									"scores":	[-7.50810490794661]
								}, {
									"case":	51,
									"scores":	[-7.50810490794661]
								}, {
									"case":	52,
									"scores":	[-7.50810490794661]
								}, {
									"case":	53,
									"scores":	[-7.50810490794661]
								}, {
									"case":	54,
									"scores":	[-7.50810490794661]
								}, {
									"case":	55,
									"scores":	[-7.50810490794661]
								}, {
									"case":	56,
									"scores":	[-7.50810490794661]
								}, {
									"case":	57,
									"scores":	[-7.50810490794661]
								}, {
									"case":	58,
									"scores":	[-7.50810490794661]
								}, {
									"case":	59,
									"scores":	[-7.50810490794661]
								}, {
									"case":	60,
									"scores":	[-7.50810490794661]
								}, {
									"case":	61,
									"scores":	[-7.50810490794661]
								}, {
									"case":	62,
									"scores":	[-7.50810490794661]
								}, {
									"case":	63,
									"scores":	[-7.50810490794661]
								}, {
									"case":	64,
									"scores":	[-7.50810490794661]
								}, {
									"case":	65,
									"scores":	[-7.50810490794661]
								}, {
									"case":	66,
									"scores":	[-7.50810490794661]
								}, {
									"case":	67,
									"scores":	[-7.50810490794661]
								}, {
									"case":	68,
									"scores":	[-7.50810490794661]
								}, {
									"case":	69,
									"scores":	[-7.50810490794661]
								}, {
									"case":	70,
									"scores":	[-7.50810490794661]
								}, {
									"case":	71,
									"scores":	[-7.50810490794661]
								}, {
									"case":	72,
									"scores":	[-7.50810490794661]
								}, {
									"case":	73,
									"scores":	[-7.50810490794661]
								}, {
									"case":	74,
									"scores":	[-7.50810490794661]
								}, {
									"case":	75,
									"scores":	[-7.50810490794661]
								}, {
									"case":	76,
									"scores":	[-7.50810490794661]
								}, {
									"case":	77,
									"scores":	[-7.50810490794661]
								}, {
									"case":	78,
									"scores":	[-7.50810490794661]
								}, {
									"case":	79,
									"scores":	[-7.50810490794661]
								}, {
									"case":	80,
									"scores":	[-7.50810490794661]
								}, {
									"case":	81,
									"scores":	[-7.50810490794661]
								}, {
									"case":	82,
									"scores":	[-7.50810490794661]
								}, {
									"case":	83,
									"scores":	[-7.50810490794661]
								}, {
									"case":	84,
									"scores":	[-7.50810490794661]
								}, {
									"case":	85,
									"scores":	[-7.50810490794661]
								}, {
									"case":	86,
									"scores":	[-7.50810490794661]
								}, {
									"case":	87,
									"scores":	[-7.50810490794661]
								}, {
									"case":	88,
									"scores":	[-7.50810490794661]
								}, {
									"case":	89,
									"scores":	[-7.50810490794661]
								}, {
									"case":	90,
									"scores":	[-7.50810490794661]
								}, {
									"case":	91,
									"scores":	[-7.50810490794661]
								}, {
									"case":	92,
									"scores":	[-7.50810490794661]
								}, {
									"case":	93,
									"scores":	[-7.50810490794661]
								}, {
									"case":	94,
									"scores":	[-7.50810490794661]
								}, {
									"case":	95,
									"scores":	[-7.50810490794661]
								}, {
									"case":	96,
									"scores":	[-7.50810490794661]
								}, {
									"case":	97,
									"scores":	[-7.50810490794661]
								}, {
									"case":	98,
									"scores":	[-7.50810490794661]
								}, {
									"case":	99,
									"scores":	[-7.50810490794661]
								}, {
									"case":	100,
									"scores":	[-7.50810490794661]
								}, {
									"case":	101,
									"scores":	[-7.50810490794661]
								}, {
									"case":	102,
									"scores":	[-7.50810490794661]
								}, {
									"case":	103,
									"scores":	[-7.50810490794661]
								}, {
									"case":	104,
									"scores":	[-7.50810490794661]
								}, {
									"case":	105,
									"scores":	[-11.20915539964661, -11.466740573646611, -9.90284081194661, -9.99490203574661, -9.95975223894661, -9.69627181834661, -9.74886312194661, -9.27191773294661, -9.27191773294661, -9.27191773294661, -10.40812987794661, -10.134708191746611, -10.40812987794661, -10.65416879174661, -10.65416879174661, -10.619018994946611, -10.40812987794661, -10.40812987794661, -10.619018994946611, -9.90719487794661, -10.65416879174661]
								}, {
									"case":	106,
									"scores":	[-14.033624399646611, -14.291209573646611, -12.727309811946611, -12.81937103574661, -12.784221238946611, -12.52074081834661, -12.57333212194661, -12.096386732946609, -12.096386732946609, -12.096386732946609, -13.232598877946611, -12.959177191746612, -13.232598877946611, -13.47863779174661, -13.47863779174661, -13.443487994946612, -13.232598877946611, -13.232598877946611, -13.443487994946612, -12.731663877946612, -13.47863779174661]
								}, {
									"case":	107,
									"scores":	[-14.033624399646611, -14.291209573646611, -12.727309811946611, -12.81937103574661, -12.784221238946611, -12.52074081834661, -12.57333212194661, -12.096386732946609, -12.096386732946609, -12.096386732946609, -13.232598877946611, -12.959177191746612, -13.232598877946611, -13.47863779174661, -13.47863779174661, -13.443487994946612, -13.232598877946611, -13.232598877946611, -13.443487994946612, -12.731663877946612, -13.47863779174661]
								}]
						}, {
							"switch":	55,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	375,
							"begin_column":	2,
							"end_line":	375,
							"end_column":	9,
							"patch_codes":	["if (!__is_neg(\"\", \"L375\", 21, &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(pguard), sizeof (pguard), &(zobj->guards), sizeof (zobj->guards), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(stub.in_isset), sizeof (stub.in_isset), &(stub.in_unset), sizeof (stub.in_unset), &(stub.in_set), sizeof (stub.in_set), &(stub.in_get), sizeof (stub.in_get), &(member), sizeof (member), &(stub.dummy), sizeof (stub.dummy), &(zobj->ce), sizeof (zobj->ce), &(zobj->properties), sizeof (zobj->properties), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(property_info->offset), sizeof (property_info->offset), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce)))\n    return _zend_hash_quick_add_or_update(zobj->guards, property_info->name, property_info->name_length + 1, property_info->h, (void **)&stub, sizeof (stub), (void **)pguard, (1 << 1));\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.21205587394661, -9.52585357394661, -8.81606177394661, -9.23785158394661, -8.94922348394661, -7.28157675394661, -8.47996348394661, -9.45827472794661, -9.45827472794661, -9.45827472794661, -9.19260458794661, -10.033796377946611, -9.19260458794661, -9.95049268794661, -9.95049268794661, -9.66186458794661, -9.19260458794661, -9.19260458794661, -9.66186458794661, -8.87059355794661, -9.95049268794661]
								}]
						}]
				}, {
					"line":	415,
					"switches":	[]
				}, {
					"line":	421,
					"switches":	[{
							"switch":	60,
							"types":	[[], [], [], [], [447], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], [], [], [], [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [], [], [], [], [], []],
							"begin_line":	422,
							"begin_column":	2,
							"end_line":	422,
							"end_column":	2,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L422\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(rv), sizeof (rv), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.12425346891374]
								}, {
									"case":	2,
									"scores":	[-7.12425346891374]
								}, {
									"case":	3,
									"scores":	[-7.12425346891374]
								}, {
									"case":	4,
									"scores":	[-7.12425346891374]
								}, {
									"case":	5,
									"scores":	[-7.12425346891374]
								}, {
									"case":	6,
									"scores":	[-7.12425346891374]
								}, {
									"case":	7,
									"scores":	[-7.12425346891374]
								}, {
									"case":	8,
									"scores":	[-7.12425346891374]
								}, {
									"case":	9,
									"scores":	[-7.12425346891374]
								}, {
									"case":	10,
									"scores":	[-7.12425346891374]
								}, {
									"case":	11,
									"scores":	[-7.12425346891374]
								}, {
									"case":	12,
									"scores":	[-7.12425346891374]
								}, {
									"case":	13,
									"scores":	[-7.12425346891374]
								}, {
									"case":	14,
									"scores":	[-7.12425346891374]
								}, {
									"case":	15,
									"scores":	[-7.12425346891374]
								}, {
									"case":	16,
									"scores":	[-7.12425346891374]
								}, {
									"case":	17,
									"scores":	[-7.12425346891374]
								}, {
									"case":	18,
									"scores":	[-7.12425346891374]
								}, {
									"case":	19,
									"scores":	[-7.12425346891374]
								}, {
									"case":	20,
									"scores":	[-7.12425346891374]
								}, {
									"case":	21,
									"scores":	[-7.12425346891374]
								}, {
									"case":	22,
									"scores":	[-7.12425346891374]
								}, {
									"case":	23,
									"scores":	[-7.12425346891374]
								}, {
									"case":	24,
									"scores":	[-7.12425346891374]
								}, {
									"case":	25,
									"scores":	[-7.12425346891374]
								}, {
									"case":	26,
									"scores":	[-7.12425346891374]
								}, {
									"case":	27,
									"scores":	[-7.12425346891374]
								}, {
									"case":	28,
									"scores":	[-7.12425346891374]
								}, {
									"case":	29,
									"scores":	[-7.12425346891374]
								}, {
									"case":	30,
									"scores":	[-7.12425346891374]
								}, {
									"case":	31,
									"scores":	[-7.12425346891374]
								}, {
									"case":	32,
									"scores":	[-7.12425346891374]
								}, {
									"case":	33,
									"scores":	[-7.12425346891374]
								}, {
									"case":	34,
									"scores":	[-7.12425346891374]
								}, {
									"case":	35,
									"scores":	[-7.12425346891374]
								}, {
									"case":	36,
									"scores":	[-7.12425346891374]
								}, {
									"case":	37,
									"scores":	[-7.12425346891374]
								}, {
									"case":	38,
									"scores":	[-7.12425346891374]
								}, {
									"case":	39,
									"scores":	[-7.12425346891374]
								}, {
									"case":	40,
									"scores":	[-7.12425346891374]
								}, {
									"case":	41,
									"scores":	[-7.12425346891374]
								}, {
									"case":	42,
									"scores":	[-7.12425346891374]
								}, {
									"case":	43,
									"scores":	[-7.12425346891374]
								}, {
									"case":	44,
									"scores":	[-7.12425346891374]
								}, {
									"case":	45,
									"scores":	[-7.12425346891374]
								}, {
									"case":	46,
									"scores":	[-7.12425346891374]
								}, {
									"case":	47,
									"scores":	[-7.12425346891374]
								}, {
									"case":	48,
									"scores":	[-7.12425346891374]
								}, {
									"case":	49,
									"scores":	[-7.12425346891374]
								}, {
									"case":	50,
									"scores":	[-7.12425346891374]
								}, {
									"case":	51,
									"scores":	[-7.12425346891374]
								}, {
									"case":	52,
									"scores":	[-7.12425346891374]
								}, {
									"case":	53,
									"scores":	[-7.12425346891374]
								}, {
									"case":	54,
									"scores":	[-7.12425346891374]
								}, {
									"case":	55,
									"scores":	[-7.12425346891374]
								}, {
									"case":	56,
									"scores":	[-7.12425346891374]
								}, {
									"case":	57,
									"scores":	[-7.12425346891374]
								}, {
									"case":	58,
									"scores":	[-7.12425346891374]
								}, {
									"case":	59,
									"scores":	[-7.12425346891374]
								}, {
									"case":	60,
									"scores":	[-7.12425346891374]
								}, {
									"case":	61,
									"scores":	[-7.12425346891374]
								}, {
									"case":	62,
									"scores":	[-7.12425346891374]
								}, {
									"case":	63,
									"scores":	[-7.12425346891374]
								}, {
									"case":	64,
									"scores":	[-7.12425346891374]
								}, {
									"case":	65,
									"scores":	[-7.12425346891374]
								}, {
									"case":	66,
									"scores":	[-7.12425346891374]
								}, {
									"case":	67,
									"scores":	[-7.12425346891374]
								}, {
									"case":	68,
									"scores":	[-7.12425346891374]
								}, {
									"case":	69,
									"scores":	[-7.12425346891374]
								}, {
									"case":	70,
									"scores":	[-7.12425346891374]
								}, {
									"case":	71,
									"scores":	[-7.12425346891374]
								}, {
									"case":	72,
									"scores":	[-7.12425346891374]
								}, {
									"case":	73,
									"scores":	[-7.12425346891374]
								}, {
									"case":	74,
									"scores":	[-7.12425346891374]
								}, {
									"case":	75,
									"scores":	[-7.12425346891374]
								}, {
									"case":	76,
									"scores":	[-7.12425346891374]
								}, {
									"case":	77,
									"scores":	[-7.12425346891374]
								}, {
									"case":	78,
									"scores":	[-7.12425346891374]
								}, {
									"case":	79,
									"scores":	[-7.12425346891374]
								}, {
									"case":	80,
									"scores":	[-7.12425346891374]
								}, {
									"case":	81,
									"scores":	[-7.12425346891374]
								}, {
									"case":	82,
									"scores":	[-7.12425346891374]
								}, {
									"case":	83,
									"scores":	[-7.12425346891374]
								}, {
									"case":	84,
									"scores":	[-7.12425346891374]
								}, {
									"case":	85,
									"scores":	[-7.12425346891374]
								}, {
									"case":	86,
									"scores":	[-7.12425346891374]
								}, {
									"case":	87,
									"scores":	[-7.12425346891374]
								}, {
									"case":	88,
									"scores":	[-7.12425346891374]
								}, {
									"case":	89,
									"scores":	[-7.12425346891374]
								}, {
									"case":	90,
									"scores":	[-7.12425346891374]
								}, {
									"case":	91,
									"scores":	[-7.12425346891374]
								}, {
									"case":	92,
									"scores":	[-7.12425346891374]
								}, {
									"case":	93,
									"scores":	[-7.12425346891374]
								}, {
									"case":	94,
									"scores":	[-7.12425346891374]
								}, {
									"case":	95,
									"scores":	[-7.12425346891374]
								}, {
									"case":	96,
									"scores":	[-7.12425346891374]
								}, {
									"case":	97,
									"scores":	[-7.12425346891374]
								}, {
									"case":	98,
									"scores":	[-7.12425346891374]
								}, {
									"case":	99,
									"scores":	[-7.12425346891374]
								}, {
									"case":	100,
									"scores":	[-7.12425346891374]
								}, {
									"case":	101,
									"scores":	[-7.12425346891374]
								}, {
									"case":	102,
									"scores":	[-7.12425346891374]
								}, {
									"case":	103,
									"scores":	[-7.12425346891374]
								}, {
									"case":	104,
									"scores":	[-7.12425346891374]
								}, {
									"case":	105,
									"scores":	[-7.12425346891374]
								}, {
									"case":	106,
									"scores":	[-7.12425346891374]
								}, {
									"case":	107,
									"scores":	[-7.12425346891374]
								}, {
									"case":	108,
									"scores":	[-7.12425346891374]
								}, {
									"case":	109,
									"scores":	[-7.12425346891374]
								}, {
									"case":	110,
									"scores":	[-7.12425346891374]
								}, {
									"case":	111,
									"scores":	[-7.12425346891374]
								}, {
									"case":	112,
									"scores":	[-7.12425346891374]
								}, {
									"case":	113,
									"scores":	[-7.12425346891374]
								}, {
									"case":	114,
									"scores":	[-7.12425346891374]
								}, {
									"case":	115,
									"scores":	[-7.12425346891374]
								}, {
									"case":	116,
									"scores":	[-7.12425346891374]
								}, {
									"case":	117,
									"scores":	[-7.12425346891374]
								}, {
									"case":	118,
									"scores":	[-7.12425346891374]
								}, {
									"case":	119,
									"scores":	[-7.12425346891374]
								}, {
									"case":	120,
									"scores":	[-7.12425346891374]
								}, {
									"case":	121,
									"scores":	[-7.12425346891374]
								}, {
									"case":	122,
									"scores":	[-7.12425346891374]
								}, {
									"case":	123,
									"scores":	[-7.12425346891374]
								}, {
									"case":	124,
									"scores":	[-7.12425346891374]
								}, {
									"case":	125,
									"scores":	[-7.12425346891374]
								}, {
									"case":	126,
									"scores":	[-7.12425346891374]
								}, {
									"case":	127,
									"scores":	[-7.12425346891374]
								}, {
									"case":	128,
									"scores":	[-7.12425346891374]
								}, {
									"case":	129,
									"scores":	[-7.12425346891374]
								}, {
									"case":	130,
									"scores":	[-7.12425346891374]
								}, {
									"case":	131,
									"scores":	[-7.12425346891374]
								}, {
									"case":	132,
									"scores":	[-7.12425346891374]
								}, {
									"case":	133,
									"scores":	[-7.12425346891374]
								}, {
									"case":	134,
									"scores":	[-7.12425346891374]
								}, {
									"case":	135,
									"scores":	[-7.12425346891374]
								}, {
									"case":	136,
									"scores":	[-7.12425346891374]
								}, {
									"case":	137,
									"scores":	[-7.12425346891374]
								}, {
									"case":	138,
									"scores":	[-7.12425346891374]
								}, {
									"case":	139,
									"scores":	[-7.12425346891374]
								}, {
									"case":	140,
									"scores":	[-7.12425346891374]
								}, {
									"case":	141,
									"scores":	[-7.12425346891374]
								}, {
									"case":	142,
									"scores":	[-7.12425346891374]
								}, {
									"case":	143,
									"scores":	[-7.12425346891374]
								}, {
									"case":	144,
									"scores":	[-7.12425346891374]
								}, {
									"case":	145,
									"scores":	[-7.12425346891374]
								}, {
									"case":	146,
									"scores":	[-7.12425346891374]
								}, {
									"case":	147,
									"scores":	[-7.12425346891374]
								}, {
									"case":	148,
									"scores":	[-7.12425346891374]
								}, {
									"case":	149,
									"scores":	[-7.12425346891374]
								}, {
									"case":	150,
									"scores":	[-7.12425346891374]
								}, {
									"case":	151,
									"scores":	[-7.12425346891374]
								}, {
									"case":	152,
									"scores":	[-7.12425346891374]
								}, {
									"case":	153,
									"scores":	[-7.12425346891374]
								}, {
									"case":	154,
									"scores":	[-7.12425346891374]
								}, {
									"case":	155,
									"scores":	[-7.12425346891374]
								}, {
									"case":	156,
									"scores":	[-7.12425346891374]
								}, {
									"case":	157,
									"scores":	[-7.12425346891374]
								}, {
									"case":	158,
									"scores":	[-7.12425346891374]
								}, {
									"case":	159,
									"scores":	[-7.12425346891374]
								}, {
									"case":	160,
									"scores":	[-7.12425346891374]
								}, {
									"case":	161,
									"scores":	[-7.12425346891374]
								}, {
									"case":	162,
									"scores":	[-7.12425346891374]
								}, {
									"case":	163,
									"scores":	[-7.12425346891374]
								}, {
									"case":	164,
									"scores":	[-7.12425346891374]
								}, {
									"case":	165,
									"scores":	[-7.12425346891374]
								}, {
									"case":	166,
									"scores":	[-7.12425346891374]
								}, {
									"case":	167,
									"scores":	[-7.12425346891374]
								}, {
									"case":	168,
									"scores":	[-7.12425346891374]
								}, {
									"case":	169,
									"scores":	[-7.12425346891374]
								}, {
									"case":	170,
									"scores":	[-7.12425346891374]
								}, {
									"case":	171,
									"scores":	[-7.12425346891374]
								}, {
									"case":	172,
									"scores":	[-7.12425346891374]
								}, {
									"case":	173,
									"scores":	[-7.12425346891374]
								}, {
									"case":	174,
									"scores":	[-7.12425346891374]
								}, {
									"case":	175,
									"scores":	[-7.12425346891374]
								}, {
									"case":	176,
									"scores":	[-7.12425346891374]
								}, {
									"case":	177,
									"scores":	[-7.12425346891374]
								}, {
									"case":	178,
									"scores":	[-7.12425346891374]
								}, {
									"case":	179,
									"scores":	[-7.12425346891374]
								}, {
									"case":	180,
									"scores":	[-7.12425346891374]
								}, {
									"case":	181,
									"scores":	[-7.12425346891374]
								}, {
									"case":	182,
									"scores":	[-7.12425346891374]
								}, {
									"case":	183,
									"scores":	[-7.12425346891374]
								}, {
									"case":	184,
									"scores":	[-7.12425346891374]
								}, {
									"case":	185,
									"scores":	[-7.12425346891374]
								}, {
									"case":	186,
									"scores":	[-7.12425346891374]
								}, {
									"case":	187,
									"scores":	[-7.12425346891374]
								}, {
									"case":	188,
									"scores":	[-7.12425346891374]
								}, {
									"case":	189,
									"scores":	[-7.12425346891374]
								}, {
									"case":	190,
									"scores":	[-7.12425346891374]
								}, {
									"case":	191,
									"scores":	[-7.12425346891374]
								}, {
									"case":	192,
									"scores":	[-7.12425346891374]
								}, {
									"case":	193,
									"scores":	[-7.12425346891374]
								}, {
									"case":	194,
									"scores":	[-7.12425346891374]
								}, {
									"case":	195,
									"scores":	[-7.12425346891374]
								}, {
									"case":	196,
									"scores":	[-7.12425346891374]
								}, {
									"case":	197,
									"scores":	[-7.12425346891374]
								}, {
									"case":	198,
									"scores":	[-7.12425346891374]
								}, {
									"case":	199,
									"scores":	[-7.12425346891374]
								}, {
									"case":	200,
									"scores":	[-7.12425346891374]
								}, {
									"case":	201,
									"scores":	[-7.12425346891374]
								}, {
									"case":	202,
									"scores":	[-7.12425346891374]
								}, {
									"case":	203,
									"scores":	[-7.12425346891374]
								}, {
									"case":	204,
									"scores":	[-7.12425346891374]
								}, {
									"case":	205,
									"scores":	[-7.12425346891374]
								}, {
									"case":	206,
									"scores":	[-7.12425346891374]
								}, {
									"case":	207,
									"scores":	[-7.12425346891374]
								}, {
									"case":	208,
									"scores":	[-7.12425346891374]
								}, {
									"case":	209,
									"scores":	[-7.12425346891374]
								}, {
									"case":	210,
									"scores":	[-7.12425346891374]
								}, {
									"case":	211,
									"scores":	[-7.12425346891374]
								}, {
									"case":	212,
									"scores":	[-7.12425346891374]
								}, {
									"case":	213,
									"scores":	[-7.12425346891374]
								}, {
									"case":	214,
									"scores":	[-7.12425346891374]
								}, {
									"case":	215,
									"scores":	[-7.12425346891374]
								}, {
									"case":	216,
									"scores":	[-7.12425346891374]
								}, {
									"case":	217,
									"scores":	[-7.12425346891374]
								}, {
									"case":	218,
									"scores":	[-7.12425346891374]
								}, {
									"case":	219,
									"scores":	[-7.12425346891374]
								}, {
									"case":	220,
									"scores":	[-7.12425346891374]
								}, {
									"case":	221,
									"scores":	[-7.12425346891374]
								}, {
									"case":	222,
									"scores":	[-7.12425346891374]
								}, {
									"case":	223,
									"scores":	[-7.12425346891374]
								}, {
									"case":	224,
									"scores":	[-7.12425346891374]
								}, {
									"case":	225,
									"scores":	[-7.12425346891374]
								}, {
									"case":	226,
									"scores":	[-7.12425346891374]
								}, {
									"case":	227,
									"scores":	[-7.12425346891374]
								}, {
									"case":	228,
									"scores":	[-7.12425346891374]
								}, {
									"case":	229,
									"scores":	[-7.12425346891374]
								}, {
									"case":	230,
									"scores":	[-7.12425346891374]
								}, {
									"case":	231,
									"scores":	[-7.12425346891374]
								}, {
									"case":	232,
									"scores":	[-7.12425346891374]
								}, {
									"case":	233,
									"scores":	[-7.12425346891374]
								}, {
									"case":	234,
									"scores":	[-7.12425346891374]
								}, {
									"case":	235,
									"scores":	[-7.12425346891374]
								}, {
									"case":	236,
									"scores":	[-7.12425346891374]
								}, {
									"case":	237,
									"scores":	[-7.12425346891374]
								}, {
									"case":	238,
									"scores":	[-7.12425346891374]
								}, {
									"case":	239,
									"scores":	[-7.12425346891374]
								}, {
									"case":	240,
									"scores":	[-7.12425346891374]
								}, {
									"case":	241,
									"scores":	[-7.12425346891374]
								}, {
									"case":	242,
									"scores":	[-7.12425346891374]
								}, {
									"case":	243,
									"scores":	[-7.12425346891374]
								}, {
									"case":	244,
									"scores":	[-7.12425346891374]
								}, {
									"case":	245,
									"scores":	[-7.12425346891374]
								}, {
									"case":	246,
									"scores":	[-7.12425346891374]
								}, {
									"case":	247,
									"scores":	[-7.12425346891374]
								}, {
									"case":	248,
									"scores":	[-7.12425346891374]
								}, {
									"case":	249,
									"scores":	[-7.12425346891374]
								}, {
									"case":	250,
									"scores":	[-7.12425346891374]
								}, {
									"case":	251,
									"scores":	[-7.12425346891374]
								}, {
									"case":	252,
									"scores":	[-7.12425346891374]
								}, {
									"case":	253,
									"scores":	[-7.12425346891374]
								}, {
									"case":	254,
									"scores":	[-7.12425346891374]
								}, {
									"case":	255,
									"scores":	[-7.12425346891374]
								}, {
									"case":	256,
									"scores":	[-7.12425346891374]
								}, {
									"case":	257,
									"scores":	[-7.12425346891374]
								}, {
									"case":	258,
									"scores":	[-7.12425346891374]
								}, {
									"case":	259,
									"scores":	[-7.12425346891374]
								}, {
									"case":	260,
									"scores":	[-7.12425346891374]
								}, {
									"case":	261,
									"scores":	[-7.12425346891374]
								}, {
									"case":	262,
									"scores":	[-7.12425346891374]
								}, {
									"case":	263,
									"scores":	[-7.12425346891374]
								}, {
									"case":	264,
									"scores":	[-7.12425346891374]
								}, {
									"case":	265,
									"scores":	[-7.12425346891374]
								}, {
									"case":	266,
									"scores":	[-7.12425346891374]
								}, {
									"case":	267,
									"scores":	[-7.12425346891374]
								}, {
									"case":	268,
									"scores":	[-7.12425346891374]
								}, {
									"case":	269,
									"scores":	[-7.12425346891374]
								}, {
									"case":	270,
									"scores":	[-7.12425346891374]
								}, {
									"case":	271,
									"scores":	[-7.12425346891374]
								}, {
									"case":	272,
									"scores":	[-7.12425346891374]
								}, {
									"case":	273,
									"scores":	[-7.12425346891374]
								}, {
									"case":	274,
									"scores":	[-7.12425346891374]
								}, {
									"case":	275,
									"scores":	[-7.12425346891374]
								}, {
									"case":	276,
									"scores":	[-7.12425346891374]
								}, {
									"case":	277,
									"scores":	[-7.12425346891374]
								}, {
									"case":	278,
									"scores":	[-7.12425346891374]
								}, {
									"case":	279,
									"scores":	[-7.12425346891374]
								}, {
									"case":	280,
									"scores":	[-7.12425346891374]
								}, {
									"case":	281,
									"scores":	[-7.12425346891374]
								}, {
									"case":	282,
									"scores":	[-7.12425346891374]
								}, {
									"case":	283,
									"scores":	[-7.12425346891374]
								}, {
									"case":	284,
									"scores":	[-7.12425346891374]
								}, {
									"case":	285,
									"scores":	[-7.12425346891374]
								}, {
									"case":	286,
									"scores":	[-7.12425346891374]
								}, {
									"case":	287,
									"scores":	[-7.12425346891374]
								}, {
									"case":	288,
									"scores":	[-7.12425346891374]
								}, {
									"case":	289,
									"scores":	[-7.12425346891374]
								}, {
									"case":	290,
									"scores":	[-7.12425346891374]
								}, {
									"case":	291,
									"scores":	[-7.12425346891374]
								}, {
									"case":	292,
									"scores":	[-7.12425346891374]
								}, {
									"case":	293,
									"scores":	[-7.12425346891374]
								}, {
									"case":	294,
									"scores":	[-7.12425346891374]
								}, {
									"case":	295,
									"scores":	[-7.12425346891374]
								}, {
									"case":	296,
									"scores":	[-7.12425346891374]
								}, {
									"case":	297,
									"scores":	[-7.12425346891374]
								}, {
									"case":	298,
									"scores":	[-7.12425346891374]
								}, {
									"case":	299,
									"scores":	[-7.12425346891374]
								}, {
									"case":	300,
									"scores":	[-7.12425346891374]
								}, {
									"case":	301,
									"scores":	[-7.12425346891374]
								}, {
									"case":	302,
									"scores":	[-7.12425346891374]
								}, {
									"case":	303,
									"scores":	[-7.12425346891374]
								}, {
									"case":	304,
									"scores":	[-7.12425346891374]
								}, {
									"case":	305,
									"scores":	[-7.12425346891374]
								}, {
									"case":	306,
									"scores":	[-7.12425346891374]
								}, {
									"case":	307,
									"scores":	[-7.12425346891374]
								}, {
									"case":	308,
									"scores":	[-7.12425346891374]
								}, {
									"case":	309,
									"scores":	[-7.12425346891374]
								}, {
									"case":	310,
									"scores":	[-7.12425346891374]
								}, {
									"case":	311,
									"scores":	[-7.12425346891374]
								}, {
									"case":	312,
									"scores":	[-7.12425346891374]
								}, {
									"case":	313,
									"scores":	[-7.12425346891374]
								}, {
									"case":	314,
									"scores":	[-7.12425346891374]
								}, {
									"case":	315,
									"scores":	[-7.12425346891374]
								}, {
									"case":	316,
									"scores":	[-7.12425346891374]
								}, {
									"case":	317,
									"scores":	[-7.12425346891374]
								}, {
									"case":	318,
									"scores":	[-7.12425346891374]
								}, {
									"case":	319,
									"scores":	[-7.12425346891374]
								}, {
									"case":	320,
									"scores":	[-7.12425346891374]
								}, {
									"case":	321,
									"scores":	[-7.12425346891374]
								}, {
									"case":	322,
									"scores":	[-7.12425346891374]
								}, {
									"case":	323,
									"scores":	[-7.12425346891374]
								}, {
									"case":	324,
									"scores":	[-7.12425346891374]
								}, {
									"case":	325,
									"scores":	[-7.12425346891374]
								}, {
									"case":	326,
									"scores":	[-7.12425346891374]
								}, {
									"case":	327,
									"scores":	[-7.12425346891374]
								}, {
									"case":	328,
									"scores":	[-7.12425346891374]
								}, {
									"case":	329,
									"scores":	[-7.12425346891374]
								}, {
									"case":	330,
									"scores":	[-7.12425346891374]
								}, {
									"case":	331,
									"scores":	[-7.12425346891374]
								}, {
									"case":	332,
									"scores":	[-7.12425346891374]
								}, {
									"case":	333,
									"scores":	[-7.12425346891374]
								}, {
									"case":	334,
									"scores":	[-7.12425346891374]
								}, {
									"case":	335,
									"scores":	[-7.12425346891374]
								}, {
									"case":	336,
									"scores":	[-7.12425346891374]
								}, {
									"case":	337,
									"scores":	[-7.12425346891374]
								}, {
									"case":	338,
									"scores":	[-7.12425346891374]
								}, {
									"case":	339,
									"scores":	[-7.12425346891374]
								}, {
									"case":	340,
									"scores":	[-7.12425346891374]
								}, {
									"case":	341,
									"scores":	[-7.12425346891374]
								}, {
									"case":	342,
									"scores":	[-7.12425346891374]
								}, {
									"case":	343,
									"scores":	[-7.12425346891374]
								}, {
									"case":	344,
									"scores":	[-7.12425346891374]
								}, {
									"case":	345,
									"scores":	[-7.12425346891374]
								}, {
									"case":	346,
									"scores":	[-7.12425346891374]
								}, {
									"case":	347,
									"scores":	[-7.12425346891374]
								}, {
									"case":	348,
									"scores":	[-7.12425346891374]
								}, {
									"case":	349,
									"scores":	[-7.12425346891374]
								}, {
									"case":	350,
									"scores":	[-7.12425346891374]
								}, {
									"case":	351,
									"scores":	[-7.12425346891374]
								}, {
									"case":	352,
									"scores":	[-7.12425346891374]
								}, {
									"case":	353,
									"scores":	[-7.12425346891374]
								}, {
									"case":	354,
									"scores":	[-7.12425346891374]
								}, {
									"case":	355,
									"scores":	[-7.12425346891374]
								}, {
									"case":	356,
									"scores":	[-7.12425346891374]
								}, {
									"case":	357,
									"scores":	[-7.12425346891374]
								}, {
									"case":	358,
									"scores":	[-7.12425346891374]
								}, {
									"case":	359,
									"scores":	[-7.12425346891374]
								}, {
									"case":	360,
									"scores":	[-7.12425346891374]
								}, {
									"case":	361,
									"scores":	[-7.12425346891374]
								}, {
									"case":	362,
									"scores":	[-7.12425346891374]
								}, {
									"case":	363,
									"scores":	[-7.12425346891374]
								}, {
									"case":	364,
									"scores":	[-7.12425346891374]
								}, {
									"case":	365,
									"scores":	[-7.12425346891374]
								}, {
									"case":	366,
									"scores":	[-7.12425346891374]
								}, {
									"case":	367,
									"scores":	[-7.12425346891374]
								}, {
									"case":	368,
									"scores":	[-7.12425346891374]
								}, {
									"case":	369,
									"scores":	[-7.12425346891374]
								}, {
									"case":	370,
									"scores":	[-7.12425346891374]
								}, {
									"case":	371,
									"scores":	[-7.12425346891374]
								}, {
									"case":	372,
									"scores":	[-7.12425346891374]
								}, {
									"case":	373,
									"scores":	[-7.12425346891374]
								}, {
									"case":	374,
									"scores":	[-7.12425346891374]
								}, {
									"case":	375,
									"scores":	[-7.12425346891374]
								}, {
									"case":	376,
									"scores":	[-7.12425346891374]
								}, {
									"case":	377,
									"scores":	[-7.12425346891374]
								}, {
									"case":	378,
									"scores":	[-7.12425346891374]
								}, {
									"case":	379,
									"scores":	[-7.12425346891374]
								}, {
									"case":	380,
									"scores":	[-7.12425346891374]
								}, {
									"case":	381,
									"scores":	[-7.12425346891374]
								}, {
									"case":	382,
									"scores":	[-7.12425346891374]
								}, {
									"case":	383,
									"scores":	[-7.12425346891374]
								}, {
									"case":	384,
									"scores":	[-7.12425346891374]
								}, {
									"case":	385,
									"scores":	[-7.12425346891374]
								}, {
									"case":	386,
									"scores":	[-7.12425346891374]
								}, {
									"case":	387,
									"scores":	[-7.12425346891374]
								}, {
									"case":	388,
									"scores":	[-7.12425346891374]
								}, {
									"case":	389,
									"scores":	[-7.12425346891374]
								}, {
									"case":	390,
									"scores":	[-7.12425346891374]
								}, {
									"case":	391,
									"scores":	[-7.12425346891374]
								}, {
									"case":	392,
									"scores":	[-7.12425346891374]
								}, {
									"case":	393,
									"scores":	[-7.12425346891374]
								}, {
									"case":	394,
									"scores":	[-7.12425346891374]
								}, {
									"case":	395,
									"scores":	[-7.12425346891374]
								}, {
									"case":	396,
									"scores":	[-7.12425346891374]
								}, {
									"case":	397,
									"scores":	[-7.12425346891374]
								}, {
									"case":	398,
									"scores":	[-7.12425346891374]
								}, {
									"case":	399,
									"scores":	[-7.12425346891374]
								}, {
									"case":	400,
									"scores":	[-7.12425346891374]
								}, {
									"case":	401,
									"scores":	[-7.12425346891374]
								}, {
									"case":	402,
									"scores":	[-7.12425346891374]
								}, {
									"case":	403,
									"scores":	[-7.12425346891374]
								}, {
									"case":	404,
									"scores":	[-7.12425346891374]
								}, {
									"case":	405,
									"scores":	[-7.12425346891374]
								}, {
									"case":	406,
									"scores":	[-7.12425346891374]
								}, {
									"case":	407,
									"scores":	[-7.12425346891374]
								}, {
									"case":	408,
									"scores":	[-7.12425346891374]
								}, {
									"case":	409,
									"scores":	[-7.12425346891374]
								}, {
									"case":	410,
									"scores":	[-7.12425346891374]
								}, {
									"case":	411,
									"scores":	[-7.12425346891374]
								}, {
									"case":	412,
									"scores":	[-7.12425346891374]
								}, {
									"case":	413,
									"scores":	[-7.12425346891374]
								}, {
									"case":	414,
									"scores":	[-7.12425346891374]
								}, {
									"case":	415,
									"scores":	[-7.12425346891374]
								}, {
									"case":	416,
									"scores":	[-7.12425346891374]
								}, {
									"case":	417,
									"scores":	[-7.12425346891374]
								}, {
									"case":	418,
									"scores":	[-7.12425346891374]
								}, {
									"case":	419,
									"scores":	[-7.12425346891374]
								}, {
									"case":	420,
									"scores":	[-7.12425346891374]
								}, {
									"case":	421,
									"scores":	[-7.12425346891374]
								}, {
									"case":	422,
									"scores":	[-7.12425346891374]
								}, {
									"case":	423,
									"scores":	[-7.12425346891374]
								}, {
									"case":	424,
									"scores":	[-7.12425346891374]
								}, {
									"case":	425,
									"scores":	[-7.12425346891374]
								}, {
									"case":	426,
									"scores":	[-7.12425346891374]
								}, {
									"case":	427,
									"scores":	[-7.12425346891374]
								}, {
									"case":	428,
									"scores":	[-7.12425346891374]
								}, {
									"case":	429,
									"scores":	[-7.12425346891374]
								}, {
									"case":	430,
									"scores":	[-7.12425346891374]
								}, {
									"case":	431,
									"scores":	[-7.12425346891374]
								}, {
									"case":	432,
									"scores":	[-7.12425346891374]
								}, {
									"case":	433,
									"scores":	[-7.12425346891374]
								}, {
									"case":	434,
									"scores":	[-7.12425346891374]
								}, {
									"case":	435,
									"scores":	[-7.12425346891374]
								}, {
									"case":	436,
									"scores":	[-7.12425346891374]
								}, {
									"case":	437,
									"scores":	[-7.12425346891374]
								}, {
									"case":	438,
									"scores":	[-7.12425346891374]
								}, {
									"case":	439,
									"scores":	[-7.12425346891374]
								}, {
									"case":	440,
									"scores":	[-7.12425346891374]
								}, {
									"case":	441,
									"scores":	[-7.12425346891374]
								}, {
									"case":	442,
									"scores":	[-7.12425346891374]
								}, {
									"case":	443,
									"scores":	[-7.12425346891374]
								}, {
									"case":	444,
									"scores":	[-7.12425346891374]
								}, {
									"case":	445,
									"scores":	[-7.12425346891374]
								}, {
									"case":	446,
									"scores":	[-7.12425346891374]
								}, {
									"case":	447,
									"scores":	[-9.63449835511374, -10.81955199701374, -10.39341696711374, -10.753670914113741, -10.753670914113741, -10.464687260113742, -10.753670914113741, -10.287147226313742, -10.790771314113741, -10.496085740113742, -10.006697000313741]
								}]
						}, {
							"switch":	61,
							"types":	[[], [], [1], [], [], [], [212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], [], [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], [], [], [164]],
							"begin_line":	422,
							"begin_column":	4,
							"end_line":	422,
							"end_column":	21,
							"patch_codes":	["if (!__is_neg(\"\", \"L422\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(rv), sizeof (rv), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent)))\n    zval_addref_p(object);\n", "_array_init(object, -1)", "_array_init(object, 0)", "_array_init(object, 1)", "_array_init(object, 2)", "_array_init(object, 3)", "_array_init(object, 5)", "_array_init(object, 6)", "_array_init(object, 8)", "_object_init_ex(object, 0)", "_object_init_ex(object, zend_ce_aggregate)", "_object_init_ex(object, zend_ce_arrayaccess)", "_object_init_ex(object, zend_ce_closure)", "_object_init_ex(object, zend_ce_iterator)", "_object_init_ex(object, zend_ce_serializable)", "_object_init_ex(object, zend_ce_traversable)", "add_index_null(object, -1)", "add_index_null(object, 0)", "add_index_null(object, 1)", "add_index_null(object, 2)", "add_index_null(object, 3)", "add_index_null(object, 5)", "add_index_null(object, 6)", "add_index_null(object, 8)", "add_next_index_bool(object, -1)", "add_next_index_bool(object, 0)", "add_next_index_bool(object, 1)", "add_next_index_bool(object, 2)", "add_next_index_bool(object, 3)", "add_next_index_bool(object, 5)", "add_next_index_bool(object, 6)", "add_next_index_bool(object, 8)", "add_next_index_bool(object, le_index_ptr)", "add_next_index_bool(object, silent)", "add_next_index_bool(object, type)", "add_next_index_long(object, -1)", "add_next_index_long(object, 0)", "add_next_index_long(object, 1)", "add_next_index_long(object, 2)", "add_next_index_long(object, 3)", "add_next_index_long(object, 5)", "add_next_index_long(object, 6)", "add_next_index_long(object, 8)", "add_next_index_resource(object, -1)", "add_next_index_resource(object, 0)", "add_next_index_resource(object, 1)", "add_next_index_resource(object, 2)", "add_next_index_resource(object, 3)", "add_next_index_resource(object, 5)", "add_next_index_resource(object, 6)", "add_next_index_resource(object, 8)", "add_next_index_resource(object, le_index_ptr)", "add_next_index_resource(object, silent)", "add_next_index_resource(object, type)", "add_next_index_zval(object, 0)", "add_next_index_zval(object, member)", "add_next_index_zval(object, object)", "add_next_index_zval(object, rv)", "add_next_index_zval(object, tmp_member)", "bitwise_not_function(object, 0)", "bitwise_not_function(object, member)", "bitwise_not_function(object, object)", "bitwise_not_function(object, rv)", "bitwise_not_function(object, tmp_member)", "boolean_not_function(object, 0)", "boolean_not_function(object, member)", "boolean_not_function(object, object)", "boolean_not_function(object, rv)", "boolean_not_function(object, tmp_member)", "compile_string(object, 0)", "convert_to_long_base(object, -1)", "convert_to_long_base(object, 0)", "convert_to_long_base(object, 1)", "convert_to_long_base(object, 2)", "convert_to_long_base(object, 3)", "convert_to_long_base(object, 5)", "convert_to_long_base(object, 6)", "convert_to_long_base(object, 8)", "convert_to_long_base(object, le_index_ptr)", "convert_to_long_base(object, silent)", "convert_to_long_base(object, type)", "zend_binary_zval_strcasecmp(object, 0)", "zend_binary_zval_strcasecmp(object, member)", "zend_binary_zval_strcasecmp(object, object)", "zend_binary_zval_strcasecmp(object, rv)", "zend_binary_zval_strcasecmp(object, tmp_member)", "zend_binary_zval_strcmp(object, 0)", "zend_binary_zval_strcmp(object, member)", "zend_binary_zval_strcmp(object, object)", "zend_binary_zval_strcmp(object, rv)", "zend_binary_zval_strcmp(object, tmp_member)", "zend_iterator_unwrap(object, 0)", "zend_make_callable(object, 0)", "zend_object_create_proxy(object, 0)", "zend_object_create_proxy(object, member)", "zend_object_create_proxy(object, object)", "zend_object_create_proxy(object, rv)", "zend_object_create_proxy(object, tmp_member)", "zend_object_store_set_object(object, 0)", "zend_print_zval(object, -1)", "zend_print_zval(object, 0)", "zend_print_zval(object, 1)", "zend_print_zval(object, 2)", "zend_print_zval(object, 3)", "zend_print_zval(object, 5)", "zend_print_zval(object, 6)", "zend_print_zval(object, 8)", "zend_print_zval(object, le_index_ptr)", "zend_print_zval(object, silent)", "zend_print_zval(object, type)", "zend_print_zval_r(object, -1)", "zend_print_zval_r(object, 0)", "zend_print_zval_r(object, 1)", "zend_print_zval_r(object, 2)", "zend_print_zval_r(object, 3)", "zend_print_zval_r(object, 5)", "zend_print_zval_r(object, 6)", "zend_print_zval_r(object, 8)", "zend_print_zval_r(object, le_index_ptr)", "zend_print_zval_r(object, silent)", "zend_print_zval_r(object, type)", "zend_std_call_getter(object, 0)", "zend_std_call_getter(object, member)", "zend_std_call_getter(object, object)", "zend_std_call_getter(object, rv)", "zend_std_call_getter(object, tmp_member)", "zend_std_call_issetter(object, 0)", "zend_std_call_issetter(object, member)", "zend_std_call_issetter(object, object)", "zend_std_call_issetter(object, rv)", "zend_std_call_issetter(object, tmp_member)", "zend_std_call_unsetter(object, 0)", "zend_std_call_unsetter(object, member)", "zend_std_call_unsetter(object, object)", "zend_std_call_unsetter(object, rv)", "zend_std_call_unsetter(object, tmp_member)", "zend_std_compare_objects(object, 0)", "zend_std_compare_objects(object, member)", "zend_std_compare_objects(object, object)", "zend_std_compare_objects(object, rv)", "zend_std_compare_objects(object, tmp_member)", "zend_std_get_debug_info(object, 0)", "zend_std_unset_dimension(object, 0)", "zend_std_unset_dimension(object, member)", "zend_std_unset_dimension(object, object)", "zend_std_unset_dimension(object, rv)", "zend_std_unset_dimension(object, tmp_member)", "zval_set_isref_to_p(object, -1)", "zval_set_isref_to_p(object, 0)", "zval_set_isref_to_p(object, 1)", "zval_set_isref_to_p(object, 2)", "zval_set_isref_to_p(object, 3)", "zval_set_isref_to_p(object, 5)", "zval_set_isref_to_p(object, 6)", "zval_set_isref_to_p(object, 8)", "zval_set_refcount_p(object, -1)", "zval_set_refcount_p(object, 0)", "zval_set_refcount_p(object, 1)", "zval_set_refcount_p(object, 2)", "zval_set_refcount_p(object, 3)", "zval_set_refcount_p(object, 5)", "zval_set_refcount_p(object, 6)", "zval_set_refcount_p(object, 8)", "{\n}\n", "_convert_to_string(object)", "_object_init(object)", "_zval_copy_ctor(object)", "_zval_copy_ctor_func(object)", "_zval_dtor(object)", "_zval_dtor_func(object)", "_zval_dtor_wrapper(object)", "_zval_internal_dtor(object)", "add_next_index_null(object)", "convert_scalar_to_number(object)", "convert_to_array(object)", "convert_to_boolean(object)", "convert_to_double(object)", "convert_to_long(object)", "convert_to_null(object)", "convert_to_object(object)", "decrement_function(object)", "gc_remove_zval_from_buffer(object)", "gc_zobj_possible_root(object)", "gc_zval_check_possible_root(object)", "gc_zval_possible_root(object)", "i_zend_is_true(object)", "i_zval_ptr_dtor(object)", "increment_function(object)", "lex_scan(object)", "safe_free_zval_ptr_rel(object)", "zend_get_closure_invoke_method(object)", "zend_get_closure_method_def(object)", "zend_get_closure_this_ptr(object)", "zend_is_true(object)", "zend_locale_sprintf_double(object)", "zend_object_store_ctor_failed(object)", "zend_objects_clone_obj(object)", "zend_objects_store_add_ref(object)", "zend_objects_store_clone_obj(object)", "zend_objects_store_del_ref(object)", "zend_objects_store_get_refcount(object)", "zend_print_flat_zval_r(object)", "zend_print_variable(object)", "zend_std_get_constructor(object)", "zend_std_get_properties(object)", "zval_delref_p(object)", "zval_is_true(object)", "zval_isref_p(object)", "zval_refcount_p(object)", "zval_set_isref_p(object)", "zval_unset_isref_p(object)", "zval_addref_p((&guard))", "zval_addref_p((&key))", "zval_addref_p((&member))", "zval_addref_p((&object))", "zval_addref_p((&property_info))", "zval_addref_p((&retval))", "zval_addref_p((&rv))", "zval_addref_p((&silent))", "zval_addref_p((&tmp_member))", "zval_addref_p((&type))", "zval_addref_p((&zobj))", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.16446239791374, -9.79344121681374, -9.89794348791374, -9.68919162891374, -9.68919162891374, -9.24228734891374, -9.68919162891374, -8.91185662891374, -9.98354242891374, -9.37539392891374, -8.60929249891374]
								}, {
									"case":	2,
									"scores":	[-7.12425346891374]
								}, {
									"case":	3,
									"scores":	[-7.12425346891374]
								}, {
									"case":	4,
									"scores":	[-7.12425346891374]
								}, {
									"case":	5,
									"scores":	[-7.12425346891374]
								}, {
									"case":	6,
									"scores":	[-7.12425346891374]
								}, {
									"case":	7,
									"scores":	[-7.12425346891374]
								}, {
									"case":	8,
									"scores":	[-7.12425346891374]
								}, {
									"case":	9,
									"scores":	[-7.12425346891374]
								}, {
									"case":	10,
									"scores":	[-7.12425346891374]
								}, {
									"case":	11,
									"scores":	[-7.12425346891374]
								}, {
									"case":	12,
									"scores":	[-7.12425346891374]
								}, {
									"case":	13,
									"scores":	[-7.12425346891374]
								}, {
									"case":	14,
									"scores":	[-7.12425346891374]
								}, {
									"case":	15,
									"scores":	[-7.12425346891374]
								}, {
									"case":	16,
									"scores":	[-7.12425346891374]
								}, {
									"case":	17,
									"scores":	[-7.12425346891374]
								}, {
									"case":	18,
									"scores":	[-7.12425346891374]
								}, {
									"case":	19,
									"scores":	[-7.12425346891374]
								}, {
									"case":	20,
									"scores":	[-7.12425346891374]
								}, {
									"case":	21,
									"scores":	[-7.12425346891374]
								}, {
									"case":	22,
									"scores":	[-7.12425346891374]
								}, {
									"case":	23,
									"scores":	[-7.12425346891374]
								}, {
									"case":	24,
									"scores":	[-7.12425346891374]
								}, {
									"case":	25,
									"scores":	[-7.12425346891374]
								}, {
									"case":	26,
									"scores":	[-7.12425346891374]
								}, {
									"case":	27,
									"scores":	[-7.12425346891374]
								}, {
									"case":	28,
									"scores":	[-7.12425346891374]
								}, {
									"case":	29,
									"scores":	[-7.12425346891374]
								}, {
									"case":	30,
									"scores":	[-7.12425346891374]
								}, {
									"case":	31,
									"scores":	[-7.12425346891374]
								}, {
									"case":	32,
									"scores":	[-7.12425346891374]
								}, {
									"case":	33,
									"scores":	[-7.12425346891374]
								}, {
									"case":	34,
									"scores":	[-7.12425346891374]
								}, {
									"case":	35,
									"scores":	[-7.12425346891374]
								}, {
									"case":	36,
									"scores":	[-7.12425346891374]
								}, {
									"case":	37,
									"scores":	[-7.12425346891374]
								}, {
									"case":	38,
									"scores":	[-7.12425346891374]
								}, {
									"case":	39,
									"scores":	[-7.12425346891374]
								}, {
									"case":	40,
									"scores":	[-7.12425346891374]
								}, {
									"case":	41,
									"scores":	[-7.12425346891374]
								}, {
									"case":	42,
									"scores":	[-7.12425346891374]
								}, {
									"case":	43,
									"scores":	[-7.12425346891374]
								}, {
									"case":	44,
									"scores":	[-7.12425346891374]
								}, {
									"case":	45,
									"scores":	[-7.12425346891374]
								}, {
									"case":	46,
									"scores":	[-7.12425346891374]
								}, {
									"case":	47,
									"scores":	[-7.12425346891374]
								}, {
									"case":	48,
									"scores":	[-7.12425346891374]
								}, {
									"case":	49,
									"scores":	[-7.12425346891374]
								}, {
									"case":	50,
									"scores":	[-7.12425346891374]
								}, {
									"case":	51,
									"scores":	[-7.12425346891374]
								}, {
									"case":	52,
									"scores":	[-7.12425346891374]
								}, {
									"case":	53,
									"scores":	[-7.12425346891374]
								}, {
									"case":	54,
									"scores":	[-7.12425346891374]
								}, {
									"case":	55,
									"scores":	[-7.12425346891374]
								}, {
									"case":	56,
									"scores":	[-7.12425346891374]
								}, {
									"case":	57,
									"scores":	[-7.12425346891374]
								}, {
									"case":	58,
									"scores":	[-7.12425346891374]
								}, {
									"case":	59,
									"scores":	[-7.12425346891374]
								}, {
									"case":	60,
									"scores":	[-7.12425346891374]
								}, {
									"case":	61,
									"scores":	[-7.12425346891374]
								}, {
									"case":	62,
									"scores":	[-7.12425346891374]
								}, {
									"case":	63,
									"scores":	[-7.12425346891374]
								}, {
									"case":	64,
									"scores":	[-7.12425346891374]
								}, {
									"case":	65,
									"scores":	[-7.12425346891374]
								}, {
									"case":	66,
									"scores":	[-7.12425346891374]
								}, {
									"case":	67,
									"scores":	[-7.12425346891374]
								}, {
									"case":	68,
									"scores":	[-7.12425346891374]
								}, {
									"case":	69,
									"scores":	[-7.12425346891374]
								}, {
									"case":	70,
									"scores":	[-7.12425346891374]
								}, {
									"case":	71,
									"scores":	[-7.12425346891374]
								}, {
									"case":	72,
									"scores":	[-7.12425346891374]
								}, {
									"case":	73,
									"scores":	[-7.12425346891374]
								}, {
									"case":	74,
									"scores":	[-7.12425346891374]
								}, {
									"case":	75,
									"scores":	[-7.12425346891374]
								}, {
									"case":	76,
									"scores":	[-7.12425346891374]
								}, {
									"case":	77,
									"scores":	[-7.12425346891374]
								}, {
									"case":	78,
									"scores":	[-7.12425346891374]
								}, {
									"case":	79,
									"scores":	[-7.12425346891374]
								}, {
									"case":	80,
									"scores":	[-7.12425346891374]
								}, {
									"case":	81,
									"scores":	[-7.12425346891374]
								}, {
									"case":	82,
									"scores":	[-7.12425346891374]
								}, {
									"case":	83,
									"scores":	[-7.12425346891374]
								}, {
									"case":	84,
									"scores":	[-7.12425346891374]
								}, {
									"case":	85,
									"scores":	[-7.12425346891374]
								}, {
									"case":	86,
									"scores":	[-7.12425346891374]
								}, {
									"case":	87,
									"scores":	[-7.12425346891374]
								}, {
									"case":	88,
									"scores":	[-7.12425346891374]
								}, {
									"case":	89,
									"scores":	[-7.12425346891374]
								}, {
									"case":	90,
									"scores":	[-7.12425346891374]
								}, {
									"case":	91,
									"scores":	[-7.12425346891374]
								}, {
									"case":	92,
									"scores":	[-7.12425346891374]
								}, {
									"case":	93,
									"scores":	[-7.12425346891374]
								}, {
									"case":	94,
									"scores":	[-7.12425346891374]
								}, {
									"case":	95,
									"scores":	[-7.12425346891374]
								}, {
									"case":	96,
									"scores":	[-7.12425346891374]
								}, {
									"case":	97,
									"scores":	[-7.12425346891374]
								}, {
									"case":	98,
									"scores":	[-7.12425346891374]
								}, {
									"case":	99,
									"scores":	[-7.12425346891374]
								}, {
									"case":	100,
									"scores":	[-7.12425346891374]
								}, {
									"case":	101,
									"scores":	[-7.12425346891374]
								}, {
									"case":	102,
									"scores":	[-7.12425346891374]
								}, {
									"case":	103,
									"scores":	[-7.12425346891374]
								}, {
									"case":	104,
									"scores":	[-7.12425346891374]
								}, {
									"case":	105,
									"scores":	[-7.12425346891374]
								}, {
									"case":	106,
									"scores":	[-7.12425346891374]
								}, {
									"case":	107,
									"scores":	[-7.12425346891374]
								}, {
									"case":	108,
									"scores":	[-7.12425346891374]
								}, {
									"case":	109,
									"scores":	[-7.12425346891374]
								}, {
									"case":	110,
									"scores":	[-7.12425346891374]
								}, {
									"case":	111,
									"scores":	[-7.12425346891374]
								}, {
									"case":	112,
									"scores":	[-7.12425346891374]
								}, {
									"case":	113,
									"scores":	[-7.12425346891374]
								}, {
									"case":	114,
									"scores":	[-7.12425346891374]
								}, {
									"case":	115,
									"scores":	[-7.12425346891374]
								}, {
									"case":	116,
									"scores":	[-7.12425346891374]
								}, {
									"case":	117,
									"scores":	[-7.12425346891374]
								}, {
									"case":	118,
									"scores":	[-7.12425346891374]
								}, {
									"case":	119,
									"scores":	[-7.12425346891374]
								}, {
									"case":	120,
									"scores":	[-7.12425346891374]
								}, {
									"case":	121,
									"scores":	[-7.12425346891374]
								}, {
									"case":	122,
									"scores":	[-7.12425346891374]
								}, {
									"case":	123,
									"scores":	[-7.12425346891374]
								}, {
									"case":	124,
									"scores":	[-7.12425346891374]
								}, {
									"case":	125,
									"scores":	[-7.12425346891374]
								}, {
									"case":	126,
									"scores":	[-7.12425346891374]
								}, {
									"case":	127,
									"scores":	[-7.12425346891374]
								}, {
									"case":	128,
									"scores":	[-7.12425346891374]
								}, {
									"case":	129,
									"scores":	[-7.12425346891374]
								}, {
									"case":	130,
									"scores":	[-7.12425346891374]
								}, {
									"case":	131,
									"scores":	[-7.12425346891374]
								}, {
									"case":	132,
									"scores":	[-7.12425346891374]
								}, {
									"case":	133,
									"scores":	[-7.12425346891374]
								}, {
									"case":	134,
									"scores":	[-7.12425346891374]
								}, {
									"case":	135,
									"scores":	[-7.12425346891374]
								}, {
									"case":	136,
									"scores":	[-7.12425346891374]
								}, {
									"case":	137,
									"scores":	[-7.12425346891374]
								}, {
									"case":	138,
									"scores":	[-7.12425346891374]
								}, {
									"case":	139,
									"scores":	[-7.12425346891374]
								}, {
									"case":	140,
									"scores":	[-7.12425346891374]
								}, {
									"case":	141,
									"scores":	[-7.12425346891374]
								}, {
									"case":	142,
									"scores":	[-7.12425346891374]
								}, {
									"case":	143,
									"scores":	[-7.12425346891374]
								}, {
									"case":	144,
									"scores":	[-7.12425346891374]
								}, {
									"case":	145,
									"scores":	[-7.12425346891374]
								}, {
									"case":	146,
									"scores":	[-7.12425346891374]
								}, {
									"case":	147,
									"scores":	[-7.12425346891374]
								}, {
									"case":	148,
									"scores":	[-7.12425346891374]
								}, {
									"case":	149,
									"scores":	[-7.12425346891374]
								}, {
									"case":	150,
									"scores":	[-7.12425346891374]
								}, {
									"case":	151,
									"scores":	[-7.12425346891374]
								}, {
									"case":	152,
									"scores":	[-7.12425346891374]
								}, {
									"case":	153,
									"scores":	[-7.12425346891374]
								}, {
									"case":	154,
									"scores":	[-7.12425346891374]
								}, {
									"case":	155,
									"scores":	[-7.12425346891374]
								}, {
									"case":	156,
									"scores":	[-7.12425346891374]
								}, {
									"case":	157,
									"scores":	[-7.12425346891374]
								}, {
									"case":	158,
									"scores":	[-7.12425346891374]
								}, {
									"case":	159,
									"scores":	[-7.12425346891374]
								}, {
									"case":	160,
									"scores":	[-7.12425346891374]
								}, {
									"case":	161,
									"scores":	[-7.12425346891374]
								}, {
									"case":	162,
									"scores":	[-7.12425346891374]
								}, {
									"case":	163,
									"scores":	[-7.12425346891374]
								}, {
									"case":	164,
									"scores":	[-7.12425346891374]
								}, {
									"case":	165,
									"scores":	[-7.12425346891374]
								}, {
									"case":	166,
									"scores":	[-7.12425346891374]
								}, {
									"case":	167,
									"scores":	[-7.12425346891374]
								}, {
									"case":	168,
									"scores":	[-7.12425346891374]
								}, {
									"case":	169,
									"scores":	[-7.12425346891374]
								}, {
									"case":	170,
									"scores":	[-7.12425346891374]
								}, {
									"case":	171,
									"scores":	[-7.12425346891374]
								}, {
									"case":	172,
									"scores":	[-7.12425346891374]
								}, {
									"case":	173,
									"scores":	[-7.12425346891374]
								}, {
									"case":	174,
									"scores":	[-7.12425346891374]
								}, {
									"case":	175,
									"scores":	[-7.12425346891374]
								}, {
									"case":	176,
									"scores":	[-7.12425346891374]
								}, {
									"case":	177,
									"scores":	[-7.12425346891374]
								}, {
									"case":	178,
									"scores":	[-7.12425346891374]
								}, {
									"case":	179,
									"scores":	[-7.12425346891374]
								}, {
									"case":	180,
									"scores":	[-7.12425346891374]
								}, {
									"case":	181,
									"scores":	[-7.12425346891374]
								}, {
									"case":	182,
									"scores":	[-7.12425346891374]
								}, {
									"case":	183,
									"scores":	[-7.12425346891374]
								}, {
									"case":	184,
									"scores":	[-7.12425346891374]
								}, {
									"case":	185,
									"scores":	[-7.12425346891374]
								}, {
									"case":	186,
									"scores":	[-7.12425346891374]
								}, {
									"case":	187,
									"scores":	[-7.12425346891374]
								}, {
									"case":	188,
									"scores":	[-7.12425346891374]
								}, {
									"case":	189,
									"scores":	[-7.12425346891374]
								}, {
									"case":	190,
									"scores":	[-7.12425346891374]
								}, {
									"case":	191,
									"scores":	[-7.12425346891374]
								}, {
									"case":	192,
									"scores":	[-7.12425346891374]
								}, {
									"case":	193,
									"scores":	[-7.12425346891374]
								}, {
									"case":	194,
									"scores":	[-7.12425346891374]
								}, {
									"case":	195,
									"scores":	[-7.12425346891374]
								}, {
									"case":	196,
									"scores":	[-7.12425346891374]
								}, {
									"case":	197,
									"scores":	[-7.12425346891374]
								}, {
									"case":	198,
									"scores":	[-7.12425346891374]
								}, {
									"case":	199,
									"scores":	[-7.12425346891374]
								}, {
									"case":	200,
									"scores":	[-7.12425346891374]
								}, {
									"case":	201,
									"scores":	[-7.12425346891374]
								}, {
									"case":	202,
									"scores":	[-7.12425346891374]
								}, {
									"case":	203,
									"scores":	[-7.12425346891374]
								}, {
									"case":	204,
									"scores":	[-7.12425346891374]
								}, {
									"case":	205,
									"scores":	[-7.12425346891374]
								}, {
									"case":	206,
									"scores":	[-7.12425346891374]
								}, {
									"case":	207,
									"scores":	[-7.12425346891374]
								}, {
									"case":	208,
									"scores":	[-7.12425346891374]
								}, {
									"case":	209,
									"scores":	[-7.12425346891374]
								}, {
									"case":	210,
									"scores":	[-7.12425346891374]
								}, {
									"case":	211,
									"scores":	[-7.12425346891374]
								}, {
									"case":	212,
									"scores":	[-7.12425346891374]
								}, {
									"case":	213,
									"scores":	[-7.12425346891374]
								}, {
									"case":	214,
									"scores":	[-7.12425346891374]
								}, {
									"case":	215,
									"scores":	[-7.12425346891374]
								}, {
									"case":	216,
									"scores":	[-7.12425346891374]
								}, {
									"case":	217,
									"scores":	[-7.12425346891374]
								}, {
									"case":	218,
									"scores":	[-7.12425346891374]
								}, {
									"case":	219,
									"scores":	[-7.12425346891374]
								}, {
									"case":	220,
									"scores":	[-7.12425346891374]
								}, {
									"case":	221,
									"scores":	[-7.12425346891374]
								}, {
									"case":	222,
									"scores":	[-7.12425346891374]
								}, {
									"case":	223,
									"scores":	[-7.12425346891374]
								}, {
									"case":	224,
									"scores":	[-7.12425346891374]
								}, {
									"case":	225,
									"scores":	[-7.12425346891374]
								}, {
									"case":	226,
									"scores":	[-7.12425346891374]
								}]
						}]
				}, {
					"line":	423,
					"switches":	[{
							"switch":	64,
							"types":	[[], [], [], [], [447], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], [], [], [], [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [], [], [], [], [], []],
							"begin_line":	424,
							"begin_column":	3,
							"end_line":	424,
							"end_column":	3,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L424\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(rv), sizeof (rv), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	2,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	3,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	4,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	5,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	6,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	7,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	8,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	9,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	10,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	11,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	12,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	13,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	14,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	15,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	16,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	17,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	18,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	19,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	20,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	21,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	22,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	23,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	24,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	25,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	26,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	27,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	28,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	29,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	30,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	31,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	32,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	33,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	34,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	35,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	36,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	37,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	38,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	39,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	40,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	41,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	42,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	43,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	44,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	45,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	46,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	47,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	48,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	49,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	50,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	51,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	52,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	53,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	54,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	55,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	56,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	57,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	58,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	59,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	60,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	61,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	62,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	63,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	64,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	65,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	66,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	67,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	68,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	69,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	70,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	71,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	72,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	73,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	74,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	75,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	76,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	77,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	78,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	79,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	80,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	81,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	82,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	83,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	84,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	85,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	86,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	87,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	88,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	89,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	90,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	91,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	92,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	93,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	94,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	95,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	96,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	97,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	98,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	99,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	100,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	101,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	102,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	103,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	104,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	105,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	106,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	107,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	108,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	109,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	110,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	111,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	112,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	113,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	114,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	115,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	116,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	117,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	118,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	119,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	120,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	121,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	122,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	123,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	124,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	125,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	126,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	127,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	128,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	129,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	130,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	131,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	132,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	133,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	134,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	135,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	136,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	137,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	138,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	139,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	140,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	141,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	142,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	143,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	144,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	145,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	146,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	147,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	148,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	149,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	150,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	151,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	152,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	153,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	154,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	155,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	156,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	157,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	158,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	159,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	160,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	161,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	162,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	163,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	164,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	165,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	166,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	167,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	168,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	169,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	170,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	171,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	172,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	173,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	174,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	175,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	176,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	177,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	178,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	179,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	180,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	181,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	182,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	183,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	184,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	185,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	186,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	187,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	188,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	189,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	190,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	191,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	192,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	193,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	194,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	195,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	196,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	197,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	198,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	199,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	200,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	201,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	202,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	203,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	204,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	205,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	206,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	207,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	208,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	209,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	210,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	211,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	212,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	213,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	214,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	215,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	216,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	217,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	218,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	219,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	220,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	221,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	222,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	223,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	224,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	225,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	226,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	227,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	228,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	229,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	230,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	231,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	232,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	233,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	234,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	235,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	236,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	237,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	238,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	239,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	240,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	241,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	242,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	243,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	244,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	245,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	246,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	247,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	248,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	249,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	250,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	251,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	252,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	253,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	254,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	255,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	256,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	257,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	258,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	259,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	260,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	261,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	262,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	263,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	264,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	265,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	266,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	267,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	268,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	269,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	270,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	271,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	272,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	273,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	274,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	275,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	276,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	277,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	278,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	279,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	280,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	281,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	282,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	283,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	284,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	285,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	286,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	287,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	288,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	289,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	290,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	291,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	292,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	293,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	294,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	295,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	296,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	297,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	298,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	299,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	300,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	301,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	302,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	303,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	304,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	305,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	306,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	307,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	308,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	309,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	310,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	311,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	312,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	313,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	314,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	315,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	316,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	317,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	318,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	319,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	320,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	321,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	322,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	323,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	324,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	325,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	326,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	327,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	328,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	329,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	330,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	331,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	332,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	333,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	334,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	335,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	336,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	337,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	338,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	339,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	340,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	341,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	342,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	343,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	344,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	345,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	346,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	347,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	348,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	349,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	350,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	351,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	352,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	353,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	354,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	355,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	356,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	357,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	358,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	359,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	360,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	361,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	362,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	363,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	364,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	365,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	366,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	367,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	368,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	369,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	370,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	371,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	372,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	373,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	374,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	375,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	376,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	377,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	378,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	379,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	380,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	381,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	382,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	383,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	384,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	385,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	386,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	387,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	388,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	389,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	390,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	391,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	392,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	393,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	394,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	395,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	396,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	397,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	398,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	399,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	400,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	401,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	402,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	403,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	404,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	405,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	406,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	407,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	408,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	409,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	410,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	411,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	412,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	413,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	414,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	415,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	416,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	417,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	418,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	419,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	420,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	421,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	422,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	423,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	424,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	425,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	426,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	427,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	428,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	429,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	430,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	431,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	432,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	433,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	434,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	435,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	436,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	437,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	438,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	439,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	440,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	441,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	442,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	443,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	444,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	445,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	446,
									"scores":	[-3.9726311273807045]
								}, {
									"case":	447,
									"scores":	[-6.221118441180705, -7.3988575371807048, -7.6935431111807056, -7.3988575371807048, -7.6564427111807047, -7.6564427111807047, -7.6564427111807047, -7.1899190233807051, -7.6935431111807056, -7.3988575371807048, -6.9094687973807041]
								}]
						}, {
							"switch":	65,
							"types":	[[], [], [1], [], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	424,
							"begin_column":	5,
							"end_line":	424,
							"end_column":	26,
							"patch_codes":	["if (!__is_neg(\"\", \"L424\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(rv), sizeof (rv), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent)))\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.2475958073807041, -6.5897071973807044, -7.1978556973807049, -6.5897071973807044, -6.9035048973807047, -6.9035048973807047, -6.9035048973807047, -6.1261698973807048, -7.1978556973807049, -6.5897071973807044, -5.8236057673807045]
								}]
						}]
				}, {
					"line":	422,
					"switches":	[{
							"switch":	62,
							"types":	[[], [], [], [], [447], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], [], [], [], [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [], [], [], [], [], []],
							"begin_line":	423,
							"begin_column":	2,
							"end_line":	423,
							"end_column":	2,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L423\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(zobj), sizeof (zobj), &(rv), sizeof (rv), &(property_info), sizeof (property_info), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	2,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	3,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	4,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	5,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	6,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	7,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	8,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	9,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	10,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	11,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	12,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	13,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	14,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	15,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	16,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	17,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	18,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	19,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	20,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	21,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	22,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	23,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	24,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	25,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	26,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	27,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	28,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	29,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	30,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	31,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	32,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	33,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	34,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	35,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	36,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	37,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	38,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	39,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	40,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	41,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	42,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	43,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	44,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	45,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	46,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	47,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	48,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	49,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	50,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	51,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	52,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	53,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	54,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	55,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	56,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	57,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	58,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	59,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	60,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	61,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	62,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	63,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	64,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	65,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	66,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	67,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	68,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	69,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	70,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	71,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	72,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	73,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	74,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	75,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	76,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	77,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	78,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	79,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	80,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	81,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	82,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	83,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	84,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	85,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	86,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	87,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	88,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	89,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	90,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	91,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	92,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	93,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	94,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	95,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	96,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	97,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	98,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	99,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	100,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	101,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	102,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	103,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	104,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	105,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	106,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	107,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	108,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	109,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	110,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	111,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	112,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	113,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	114,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	115,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	116,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	117,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	118,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	119,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	120,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	121,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	122,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	123,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	124,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	125,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	126,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	127,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	128,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	129,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	130,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	131,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	132,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	133,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	134,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	135,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	136,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	137,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	138,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	139,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	140,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	141,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	142,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	143,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	144,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	145,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	146,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	147,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	148,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	149,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	150,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	151,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	152,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	153,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	154,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	155,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	156,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	157,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	158,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	159,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	160,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	161,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	162,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	163,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	164,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	165,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	166,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	167,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	168,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	169,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	170,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	171,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	172,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	173,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	174,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	175,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	176,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	177,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	178,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	179,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	180,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	181,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	182,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	183,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	184,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	185,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	186,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	187,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	188,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	189,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	190,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	191,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	192,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	193,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	194,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	195,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	196,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	197,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	198,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	199,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	200,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	201,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	202,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	203,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	204,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	205,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	206,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	207,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	208,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	209,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	210,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	211,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	212,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	213,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	214,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	215,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	216,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	217,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	218,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	219,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	220,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	221,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	222,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	223,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	224,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	225,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	226,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	227,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	228,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	229,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	230,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	231,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	232,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	233,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	234,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	235,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	236,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	237,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	238,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	239,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	240,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	241,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	242,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	243,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	244,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	245,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	246,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	247,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	248,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	249,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	250,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	251,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	252,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	253,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	254,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	255,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	256,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	257,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	258,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	259,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	260,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	261,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	262,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	263,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	264,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	265,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	266,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	267,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	268,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	269,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	270,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	271,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	272,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	273,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	274,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	275,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	276,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	277,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	278,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	279,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	280,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	281,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	282,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	283,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	284,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	285,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	286,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	287,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	288,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	289,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	290,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	291,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	292,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	293,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	294,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	295,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	296,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	297,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	298,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	299,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	300,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	301,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	302,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	303,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	304,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	305,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	306,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	307,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	308,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	309,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	310,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	311,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	312,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	313,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	314,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	315,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	316,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	317,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	318,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	319,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	320,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	321,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	322,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	323,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	324,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	325,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	326,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	327,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	328,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	329,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	330,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	331,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	332,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	333,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	334,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	335,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	336,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	337,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	338,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	339,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	340,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	341,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	342,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	343,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	344,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	345,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	346,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	347,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	348,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	349,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	350,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	351,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	352,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	353,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	354,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	355,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	356,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	357,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	358,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	359,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	360,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	361,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	362,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	363,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	364,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	365,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	366,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	367,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	368,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	369,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	370,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	371,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	372,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	373,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	374,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	375,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	376,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	377,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	378,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	379,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	380,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	381,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	382,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	383,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	384,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	385,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	386,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	387,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	388,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	389,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	390,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	391,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	392,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	393,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	394,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	395,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	396,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	397,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	398,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	399,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	400,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	401,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	402,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	403,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	404,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	405,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	406,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	407,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	408,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	409,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	410,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	411,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	412,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	413,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	414,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	415,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	416,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	417,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	418,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	419,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	420,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	421,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	422,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	423,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	424,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	425,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	426,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	427,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	428,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	429,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	430,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	431,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	432,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	433,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	434,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	435,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	436,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	437,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	438,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	439,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	440,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	441,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	442,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	443,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	444,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	445,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	446,
									"scores":	[-7.1040507615962216]
								}, {
									"case":	447,
									"scores":	[-9.51041480839622, -11.711640428296221, -11.285505398396221, -11.645759345396222, -11.356775691396223, -11.645759345396222, -11.645759345396222, -11.179235657596221, -11.682859745396222, -11.388174171396223, -10.89878543159622]
								}]
						}, {
							"switch":	63,
							"types":	[[50], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], []],
							"begin_line":	423,
							"begin_column":	4,
							"end_line":	425,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L423\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(zobj), sizeof (zobj), &(rv), sizeof (rv), &(property_info), sizeof (property_info), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent))) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if ((zval_isref_p(object)) || __is_neg(\"\", \"L423\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(zobj), sizeof (zobj), &(rv), sizeof (rv), &(property_info), sizeof (property_info), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent))) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (_convert_to_string(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (_object_init(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (_zval_copy_ctor(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (_zval_copy_ctor_func(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (_zval_dtor(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (_zval_dtor_func(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (_zval_dtor_wrapper(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (_zval_internal_dtor(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (add_next_index_null(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (convert_scalar_to_number(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (convert_to_array(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (convert_to_boolean(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (convert_to_double(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (convert_to_long(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (convert_to_null(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (convert_to_object(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (decrement_function(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (gc_remove_zval_from_buffer(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (gc_zobj_possible_root(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (gc_zval_check_possible_root(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (gc_zval_possible_root(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (i_zend_is_true(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (i_zval_ptr_dtor(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (increment_function(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (lex_scan(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (safe_free_zval_ptr_rel(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_get_closure_invoke_method(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_get_closure_method_def(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_get_closure_this_ptr(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_is_true(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_locale_sprintf_double(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_object_store_ctor_failed(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_objects_clone_obj(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_objects_store_add_ref(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_objects_store_clone_obj(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_objects_store_del_ref(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_objects_store_get_refcount(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_print_flat_zval_r(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_print_variable(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_std_get_constructor(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zend_std_get_properties(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zval_addref_p(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zval_delref_p(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zval_is_true(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zval_refcount_p(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zval_set_isref_p(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if (zval_unset_isref_p(object)) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n", "if ((zval_isref_p(object)) && !__is_neg(\"\", \"L423\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(zobj), sizeof (zobj), &(rv), sizeof (rv), &(property_info), sizeof (property_info), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent))) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-2.3361932384281419, -2.8027573213281447, -3.2948025824281442, -3.0860507234281442, -2.6391464434281446, -3.0860507234281442, -3.0860507234281442, -2.3087157234281439, -3.3804015234281439, -2.7722530234281444, -2.006151593428144]
								}, {
									"case":	2,
									"scores":	[-3.2979982414281461, -3.7645623243281463, -4.2566075854281458, -4.0478557264281463, -3.6009514464281462, -4.0478557264281463, -4.0478557264281463, -3.270520726428146, -4.3422065264281455, -3.734058026428146, -2.967956596428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-3.912023005428146]
								}, {
									"case":	9,
									"scores":	[-3.912023005428146]
								}, {
									"case":	10,
									"scores":	[-3.912023005428146]
								}, {
									"case":	11,
									"scores":	[-3.912023005428146]
								}, {
									"case":	12,
									"scores":	[-3.912023005428146]
								}, {
									"case":	13,
									"scores":	[-3.912023005428146]
								}, {
									"case":	14,
									"scores":	[-3.912023005428146]
								}, {
									"case":	15,
									"scores":	[-3.912023005428146]
								}, {
									"case":	16,
									"scores":	[-3.912023005428146]
								}, {
									"case":	17,
									"scores":	[-3.912023005428146]
								}, {
									"case":	18,
									"scores":	[-3.912023005428146]
								}, {
									"case":	19,
									"scores":	[-3.912023005428146]
								}, {
									"case":	20,
									"scores":	[-3.912023005428146]
								}, {
									"case":	21,
									"scores":	[-3.912023005428146]
								}, {
									"case":	22,
									"scores":	[-3.912023005428146]
								}, {
									"case":	23,
									"scores":	[-3.912023005428146]
								}, {
									"case":	24,
									"scores":	[-3.912023005428146]
								}, {
									"case":	25,
									"scores":	[-3.912023005428146]
								}, {
									"case":	26,
									"scores":	[-3.912023005428146]
								}, {
									"case":	27,
									"scores":	[-3.912023005428146]
								}, {
									"case":	28,
									"scores":	[-3.912023005428146]
								}, {
									"case":	29,
									"scores":	[-3.912023005428146]
								}, {
									"case":	30,
									"scores":	[-3.912023005428146]
								}, {
									"case":	31,
									"scores":	[-3.912023005428146]
								}, {
									"case":	32,
									"scores":	[-3.912023005428146]
								}, {
									"case":	33,
									"scores":	[-3.912023005428146]
								}, {
									"case":	34,
									"scores":	[-3.912023005428146]
								}, {
									"case":	35,
									"scores":	[-3.912023005428146]
								}, {
									"case":	36,
									"scores":	[-3.912023005428146]
								}, {
									"case":	37,
									"scores":	[-3.912023005428146]
								}, {
									"case":	38,
									"scores":	[-3.912023005428146]
								}, {
									"case":	39,
									"scores":	[-3.912023005428146]
								}, {
									"case":	40,
									"scores":	[-3.912023005428146]
								}, {
									"case":	41,
									"scores":	[-3.912023005428146]
								}, {
									"case":	42,
									"scores":	[-3.912023005428146]
								}, {
									"case":	43,
									"scores":	[-3.912023005428146]
								}, {
									"case":	44,
									"scores":	[-3.912023005428146]
								}, {
									"case":	45,
									"scores":	[-3.912023005428146]
								}, {
									"case":	46,
									"scores":	[-3.912023005428146]
								}, {
									"case":	47,
									"scores":	[-3.912023005428146]
								}, {
									"case":	48,
									"scores":	[-3.912023005428146]
								}, {
									"case":	49,
									"scores":	[-3.912023005428146]
								}, {
									"case":	50,
									"scores":	[-3.2979982414281461, -3.7645623243281463, -4.2566075854281458, -4.0478557264281463, -3.6009514464281462, -4.0478557264281463, -4.0478557264281463, -3.270520726428146, -4.3422065264281455, -3.734058026428146, -2.967956596428146]
								}]
						}, {
							"switch":	66,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	423,
							"begin_column":	4,
							"end_line":	425,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L423\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(zobj), sizeof (zobj), &(rv), sizeof (rv), &(property_info), sizeof (property_info), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent)))\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n", "if (!__is_neg(\"\", \"L423\", 11, &(object), sizeof (object), &(guard), sizeof (guard), &(member), sizeof (member), &(zobj), sizeof (zobj), &(rv), sizeof (rv), &(property_info), sizeof (property_info), &(retval), sizeof (retval), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent)) && (zval_isref_p(object))) {\n    do {\n        if (zval_refcount_p(*((&object))) > 1) {\n            zval *new_zv;\n            zval_delref_p(*(&object));\n            do {\n                (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n            } while (0);\n            do {\n                do {\n                    (new_zv)->value = (*(&object))->value;\n                    (*new_zv).type = (**(&object)).type;\n                } while (0);\n                zval_set_refcount_p(new_zv, 1);\n                zval_unset_isref_p(new_zv);\n            } while (0);\n            *(&object) = new_zv;\n            _zval_copy_ctor((new_zv));\n        }\n    } while (0);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.02813704659622, -9.49470112949622, -9.98674639059622, -9.77799453159622, -9.33109025159622, -9.77799453159622, -9.77799453159622, -9.00065953159622, -10.072345331596221, -9.46419683159622, -8.69809540159622]
								}, {
									"case":	2,
									"scores":	[-7.8494021745962215, -8.31596625749622, -8.80801151859622, -8.59925965959622, -8.15235537959622, -8.59925965959622, -8.59925965959622, -7.82192465959622, -8.89361045959622, -8.28546195959622, -7.5193605295962218]
								}]
						}]
				}, {
					"line":	425,
					"switches":	[{
							"switch":	67,
							"types":	[[], [], [], [], [448], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], [], [], [], [413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447], [224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [], [], [], [], [], []],
							"begin_line":	426,
							"begin_column":	2,
							"end_line":	426,
							"end_column":	2,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(guard, 0, sizeof (*(guard)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L426\", 16, &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(object), sizeof (object), &(member), sizeof (member), &(rv), sizeof (rv), &(retval), sizeof (retval), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	2,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	3,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	4,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	5,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	6,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	7,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	8,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	9,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	10,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	11,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	12,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	13,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	14,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	15,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	16,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	17,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	18,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	19,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	20,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	21,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	22,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	23,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	24,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	25,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	26,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	27,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	28,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	29,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	30,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	31,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	32,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	33,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	34,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	35,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	36,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	37,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	38,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	39,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	40,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	41,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	42,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	43,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	44,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	45,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	46,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	47,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	48,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	49,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	50,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	51,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	52,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	53,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	54,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	55,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	56,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	57,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	58,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	59,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	60,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	61,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	62,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	63,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	64,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	65,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	66,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	67,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	68,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	69,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	70,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	71,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	72,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	73,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	74,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	75,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	76,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	77,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	78,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	79,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	80,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	81,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	82,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	83,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	84,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	85,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	86,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	87,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	88,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	89,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	90,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	91,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	92,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	93,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	94,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	95,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	96,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	97,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	98,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	99,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	100,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	101,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	102,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	103,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	104,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	105,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	106,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	107,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	108,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	109,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	110,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	111,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	112,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	113,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	114,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	115,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	116,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	117,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	118,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	119,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	120,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	121,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	122,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	123,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	124,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	125,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	126,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	127,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	128,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	129,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	130,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	131,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	132,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	133,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	134,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	135,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	136,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	137,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	138,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	139,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	140,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	141,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	142,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	143,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	144,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	145,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	146,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	147,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	148,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	149,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	150,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	151,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	152,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	153,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	154,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	155,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	156,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	157,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	158,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	159,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	160,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	161,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	162,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	163,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	164,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	165,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	166,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	167,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	168,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	169,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	170,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	171,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	172,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	173,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	174,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	175,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	176,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	177,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	178,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	179,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	180,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	181,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	182,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	183,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	184,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	185,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	186,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	187,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	188,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	189,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	190,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	191,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	192,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	193,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	194,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	195,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	196,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	197,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	198,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	199,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	200,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	201,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	202,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	203,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	204,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	205,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	206,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	207,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	208,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	209,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	210,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	211,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	212,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	213,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	214,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	215,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	216,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	217,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	218,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	219,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	220,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	221,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	222,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	223,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	224,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	225,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	226,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	227,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	228,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	229,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	230,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	231,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	232,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	233,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	234,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	235,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	236,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	237,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	238,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	239,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	240,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	241,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	242,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	243,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	244,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	245,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	246,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	247,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	248,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	249,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	250,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	251,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	252,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	253,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	254,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	255,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	256,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	257,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	258,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	259,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	260,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	261,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	262,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	263,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	264,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	265,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	266,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	267,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	268,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	269,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	270,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	271,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	272,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	273,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	274,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	275,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	276,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	277,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	278,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	279,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	280,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	281,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	282,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	283,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	284,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	285,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	286,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	287,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	288,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	289,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	290,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	291,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	292,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	293,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	294,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	295,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	296,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	297,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	298,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	299,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	300,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	301,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	302,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	303,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	304,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	305,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	306,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	307,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	308,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	309,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	310,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	311,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	312,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	313,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	314,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	315,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	316,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	317,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	318,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	319,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	320,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	321,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	322,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	323,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	324,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	325,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	326,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	327,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	328,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	329,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	330,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	331,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	332,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	333,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	334,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	335,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	336,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	337,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	338,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	339,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	340,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	341,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	342,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	343,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	344,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	345,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	346,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	347,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	348,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	349,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	350,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	351,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	352,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	353,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	354,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	355,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	356,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	357,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	358,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	359,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	360,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	361,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	362,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	363,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	364,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	365,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	366,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	367,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	368,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	369,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	370,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	371,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	372,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	373,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	374,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	375,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	376,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	377,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	378,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	379,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	380,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	381,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	382,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	383,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	384,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	385,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	386,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	387,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	388,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	389,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	390,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	391,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	392,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	393,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	394,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	395,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	396,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	397,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	398,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	399,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	400,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	401,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	402,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	403,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	404,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	405,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	406,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	407,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	408,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	409,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	410,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	411,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	412,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	413,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	414,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	415,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	416,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	417,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	418,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	419,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	420,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	421,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	422,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	423,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	424,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	425,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	426,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	427,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	428,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	429,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	430,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	431,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	432,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	433,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	434,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	435,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	436,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	437,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	438,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	439,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	440,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	441,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	442,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	443,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	444,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	445,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	446,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	447,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	448,
									"scores":	[-10.5385545549787, -11.2908143482787, -10.329877191078703, -11.7472949910787, -12.206319947078704, -11.2100444580787, -11.6590572502787, -12.3856781949787, -11.2414429380787, -11.2785433380787, -10.9838577640787, -10.4944690242787, -11.5519650242787, -11.5519650242787, -11.5519650242787, -11.5519650242787]
								}]
						}, {
							"switch":	68,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	426,
							"begin_column":	4,
							"end_line":	426,
							"end_column":	20,
							"patch_codes":	["if (!__is_neg(\"\", \"L426\", 16, &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(object), sizeof (object), &(member), sizeof (member), &(rv), sizeof (rv), &(retval), sizeof (retval), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)))\n    guard->in_get = 1;\n", "{\n}\n", "guard->in_get = (-1)", "guard->in_get = (0 * silent)", "guard->in_get = (0 * type)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "guard->in_get = (guard != 0)", "guard->in_get = (guard == 0)", "guard->in_get = (key != 0)", "guard->in_get = (key == 0)", "guard->in_get = (member != 0)", "guard->in_get = (member != rv)", "guard->in_get = (member != tmp_member)", "guard->in_get = (member == 0)", "guard->in_get = (member == rv)", "guard->in_get = (member == tmp_member)", "guard->in_get = (object != 0)", "guard->in_get = (object != member)", "guard->in_get = (object != rv)", "guard->in_get = (object != tmp_member)", "guard->in_get = (object == 0)", "guard->in_get = (object == member)", "guard->in_get = (object == rv)", "guard->in_get = (object == tmp_member)", "guard->in_get = (property_info != 0)", "guard->in_get = (property_info == 0)", "guard->in_get = (retval != 0)", "guard->in_get = (retval == 0)", "guard->in_get = (rv != 0)", "guard->in_get = (rv == 0)", "guard->in_get = (silent != 0)", "guard->in_get = (silent * type)", "guard->in_get = (silent + 0)", "guard->in_get = (silent - 0)", "guard->in_get = (silent == 0)", "guard->in_get = (tmp_member != 0)", "guard->in_get = (tmp_member != rv)", "guard->in_get = (tmp_member == 0)", "guard->in_get = (tmp_member == rv)", "guard->in_get = (type != 0)", "guard->in_get = (type != silent)", "guard->in_get = (type * silent)", "guard->in_get = (type + 0)", "guard->in_get = (type + silent)", "guard->in_get = (type - 0)", "guard->in_get = (type - silent)", "guard->in_get = (type == 0)", "guard->in_get = (type == silent)", "guard->in_get = (zobj != 0)", "guard->in_get = (zobj == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.5032861121787029, -9.0161197092787, -7.2251603532787021, -8.4721498832787034, -9.2390671642787, -8.6534729342787031, -8.9754575142787, -9.4881285621787, -8.7865795142787029, -9.080930314278703, -8.4727818142787, -7.7066803842787017, -8.2397385242787, -8.2397385242787, -8.2397385242787, -8.2397385242787]
								}, {
									"case":	2,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	3,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	4,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	5,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	6,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	7,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	8,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	9,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	10,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	11,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	12,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	13,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	14,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	15,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	16,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	17,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	18,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	19,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	20,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	21,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	22,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	23,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	24,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	25,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	26,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	27,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	28,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	29,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	30,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	31,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	32,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	33,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	34,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	35,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	36,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	37,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	38,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	39,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	40,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	41,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	42,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	43,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	44,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	45,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	46,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	47,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	48,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	49,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	50,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	51,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	52,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	53,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	54,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	55,
									"scores":	[-7.0838480542787021]
								}, {
									"case":	56,
									"scores":	[-7.0838480542787021]
								}]
						}]
				}, {
					"line":	426,
					"switches":	[{
							"switch":	69,
							"types":	[[], [], [], [], [447], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], [], [], [], [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [], [], [], [], [], []],
							"begin_line":	427,
							"begin_column":	2,
							"end_line":	427,
							"end_column":	2,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L427\", 16, &(object), sizeof (object), &(member), sizeof (member), &(rv), sizeof (rv), &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(retval), sizeof (retval), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	2,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	3,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	4,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	5,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	6,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	7,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	8,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	9,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	10,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	11,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	12,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	13,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	14,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	15,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	16,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	17,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	18,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	19,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	20,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	21,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	22,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	23,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	24,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	25,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	26,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	27,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	28,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	29,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	30,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	31,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	32,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	33,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	34,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	35,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	36,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	37,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	38,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	39,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	40,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	41,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	42,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	43,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	44,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	45,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	46,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	47,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	48,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	49,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	50,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	51,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	52,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	53,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	54,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	55,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	56,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	57,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	58,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	59,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	60,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	61,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	62,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	63,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	64,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	65,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	66,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	67,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	68,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	69,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	70,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	71,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	72,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	73,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	74,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	75,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	76,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	77,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	78,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	79,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	80,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	81,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	82,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	83,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	84,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	85,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	86,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	87,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	88,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	89,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	90,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	91,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	92,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	93,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	94,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	95,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	96,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	97,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	98,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	99,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	100,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	101,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	102,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	103,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	104,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	105,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	106,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	107,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	108,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	109,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	110,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	111,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	112,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	113,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	114,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	115,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	116,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	117,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	118,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	119,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	120,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	121,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	122,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	123,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	124,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	125,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	126,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	127,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	128,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	129,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	130,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	131,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	132,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	133,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	134,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	135,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	136,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	137,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	138,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	139,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	140,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	141,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	142,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	143,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	144,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	145,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	146,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	147,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	148,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	149,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	150,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	151,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	152,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	153,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	154,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	155,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	156,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	157,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	158,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	159,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	160,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	161,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	162,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	163,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	164,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	165,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	166,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	167,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	168,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	169,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	170,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	171,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	172,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	173,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	174,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	175,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	176,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	177,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	178,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	179,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	180,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	181,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	182,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	183,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	184,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	185,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	186,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	187,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	188,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	189,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	190,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	191,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	192,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	193,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	194,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	195,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	196,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	197,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	198,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	199,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	200,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	201,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	202,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	203,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	204,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	205,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	206,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	207,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	208,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	209,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	210,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	211,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	212,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	213,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	214,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	215,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	216,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	217,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	218,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	219,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	220,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	221,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	222,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	223,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	224,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	225,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	226,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	227,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	228,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	229,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	230,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	231,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	232,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	233,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	234,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	235,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	236,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	237,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	238,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	239,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	240,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	241,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	242,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	243,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	244,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	245,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	246,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	247,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	248,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	249,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	250,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	251,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	252,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	253,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	254,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	255,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	256,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	257,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	258,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	259,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	260,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	261,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	262,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	263,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	264,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	265,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	266,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	267,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	268,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	269,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	270,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	271,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	272,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	273,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	274,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	275,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	276,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	277,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	278,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	279,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	280,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	281,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	282,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	283,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	284,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	285,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	286,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	287,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	288,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	289,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	290,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	291,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	292,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	293,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	294,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	295,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	296,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	297,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	298,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	299,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	300,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	301,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	302,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	303,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	304,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	305,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	306,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	307,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	308,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	309,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	310,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	311,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	312,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	313,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	314,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	315,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	316,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	317,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	318,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	319,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	320,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	321,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	322,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	323,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	324,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	325,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	326,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	327,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	328,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	329,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	330,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	331,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	332,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	333,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	334,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	335,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	336,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	337,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	338,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	339,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	340,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	341,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	342,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	343,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	344,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	345,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	346,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	347,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	348,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	349,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	350,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	351,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	352,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	353,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	354,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	355,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	356,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	357,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	358,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	359,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	360,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	361,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	362,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	363,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	364,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	365,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	366,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	367,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	368,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	369,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	370,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	371,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	372,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	373,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	374,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	375,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	376,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	377,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	378,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	379,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	380,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	381,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	382,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	383,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	384,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	385,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	386,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	387,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	388,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	389,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	390,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	391,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	392,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	393,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	394,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	395,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	396,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	397,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	398,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	399,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	400,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	401,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	402,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	403,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	404,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	405,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	406,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	407,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	408,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	409,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	410,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	411,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	412,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	413,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	414,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	415,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	416,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	417,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	418,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	419,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	420,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	421,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	422,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	423,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	424,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	425,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	426,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	427,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	428,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	429,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	430,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	431,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	432,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	433,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	434,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	435,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	436,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	437,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	438,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	439,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	440,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	441,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	442,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	443,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	444,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	445,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	446,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	447,
									"scores":	[-8.98454893316118, -10.159894723161184, -11.934713022161182, -12.215533795061182, -10.988906713361182, -11.797065812161183, -12.246078604361184, -12.972699549061183, -11.828464292161183, -11.865564692161183, -11.570879118161184, -11.081490378361183, -12.138986378361182, -12.138986378361182, -12.138986378361182, -12.138986378361182]
								}]
						}, {
							"switch":	70,
							"types":	[[], [], [1], [], [], [], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], [], [14, 15, 16], [], [], [], [], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [], [], [13]],
							"begin_line":	427,
							"begin_column":	4,
							"end_line":	427,
							"end_column":	54,
							"patch_codes":	["if (!__is_neg(\"\", \"L427\", 16, &(object), sizeof (object), &(member), sizeof (member), &(rv), sizeof (rv), &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(retval), sizeof (retval), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)))\n    rv = zend_std_call_getter(object, member);\n", "zend_std_read_dimension(object, member, -1)", "zend_std_read_dimension(object, member, 0)", "zend_std_read_dimension(object, member, 1)", "zend_std_read_dimension(object, member, 2)", "zend_std_read_dimension(object, member, 3)", "zend_std_read_dimension(object, member, 5)", "zend_std_read_dimension(object, member, 6)", "zend_std_read_dimension(object, member, 8)", "zend_std_read_dimension(object, member, le_index_ptr)", "zend_std_read_dimension(object, member, silent)", "zend_std_read_dimension(object, member, type)", "{\n}\n", "rv = zend_object_create_proxy(object, member)", "rv = zend_std_call_issetter(object, member)", "rv = zend_user_it_new_iterator(object, member)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((&guard), member)", "rv = zend_std_call_getter((&key), member)", "rv = zend_std_call_getter((&member), member)", "rv = zend_std_call_getter((&object), member)", "rv = zend_std_call_getter((&property_info), member)", "rv = zend_std_call_getter((&retval), member)", "rv = zend_std_call_getter((&rv), member)", "rv = zend_std_call_getter((&silent), member)", "rv = zend_std_call_getter((&tmp_member), member)", "rv = zend_std_call_getter((&type), member)", "rv = zend_std_call_getter((&zobj), member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (&guard))", "rv = zend_std_call_getter(object, (&key))", "rv = zend_std_call_getter(object, (&member))", "rv = zend_std_call_getter(object, (&object))", "rv = zend_std_call_getter(object, (&property_info))", "rv = zend_std_call_getter(object, (&retval))", "rv = zend_std_call_getter(object, (&rv))", "rv = zend_std_call_getter(object, (&silent))", "rv = zend_std_call_getter(object, (&tmp_member))", "rv = zend_std_call_getter(object, (&type))", "rv = zend_std_call_getter(object, (&zobj))", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.918209996961183, -8.8510884269611836, -9.36767945696118, -8.50312289536118, -9.2181183119611827, -8.78208522696118, -9.1040698069611832, -9.6167408548611828, -8.91519180696118, -9.20954260696118, -8.60139410696118, -7.835292676961183, -8.36835081696118, -8.36835081696118, -8.36835081696118, -8.36835081696118]
								}, {
									"case":	2,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	3,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	4,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	5,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	6,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	7,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	8,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	9,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	10,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	11,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	12,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	13,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	14,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	15,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	16,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	17,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	18,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	19,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	20,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	21,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	22,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	23,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	24,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	25,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	26,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	27,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	28,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	29,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	30,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	31,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	32,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	33,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	34,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	35,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	36,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	37,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	38,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	39,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	40,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	41,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	42,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	43,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	44,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	45,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	46,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	47,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	48,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	49,
									"scores":	[-7.0636453469611826]
								}, {
									"case":	50,
									"scores":	[-7.0636453469611826]
								}]
						}]
				}, {
					"line":	427,
					"switches":	[{
							"switch":	71,
							"types":	[[], [], [], [], [448], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], [], [], [], [413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447], [224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], [], [], [], [], [], []],
							"begin_line":	428,
							"begin_column":	2,
							"end_line":	428,
							"end_column":	2,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(guard, 0, sizeof (*(guard)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L428\", 16, &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(object), sizeof (object), &(member), sizeof (member), &(rv), sizeof (rv), &(retval), sizeof (retval), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	2,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	3,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	4,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	5,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	6,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	7,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	8,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	9,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	10,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	11,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	12,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	13,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	14,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	15,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	16,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	17,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	18,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	19,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	20,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	21,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	22,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	23,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	24,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	25,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	26,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	27,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	28,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	29,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	30,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	31,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	32,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	33,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	34,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	35,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	36,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	37,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	38,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	39,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	40,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	41,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	42,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	43,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	44,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	45,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	46,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	47,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	48,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	49,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	50,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	51,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	52,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	53,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	54,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	55,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	56,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	57,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	58,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	59,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	60,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	61,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	62,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	63,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	64,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	65,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	66,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	67,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	68,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	69,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	70,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	71,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	72,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	73,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	74,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	75,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	76,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	77,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	78,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	79,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	80,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	81,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	82,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	83,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	84,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	85,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	86,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	87,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	88,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	89,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	90,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	91,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	92,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	93,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	94,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	95,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	96,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	97,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	98,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	99,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	100,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	101,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	102,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	103,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	104,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	105,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	106,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	107,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	108,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	109,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	110,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	111,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	112,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	113,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	114,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	115,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	116,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	117,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	118,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	119,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	120,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	121,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	122,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	123,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	124,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	125,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	126,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	127,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	128,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	129,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	130,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	131,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	132,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	133,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	134,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	135,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	136,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	137,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	138,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	139,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	140,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	141,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	142,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	143,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	144,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	145,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	146,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	147,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	148,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	149,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	150,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	151,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	152,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	153,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	154,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	155,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	156,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	157,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	158,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	159,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	160,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	161,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	162,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	163,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	164,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	165,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	166,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	167,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	168,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	169,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	170,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	171,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	172,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	173,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	174,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	175,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	176,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	177,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	178,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	179,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	180,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	181,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	182,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	183,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	184,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	185,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	186,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	187,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	188,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	189,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	190,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	191,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	192,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	193,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	194,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	195,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	196,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	197,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	198,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	199,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	200,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	201,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	202,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	203,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	204,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	205,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	206,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	207,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	208,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	209,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	210,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	211,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	212,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	213,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	214,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	215,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	216,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	217,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	218,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	219,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	220,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	221,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	222,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	223,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	224,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	225,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	226,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	227,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	228,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	229,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	230,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	231,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	232,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	233,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	234,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	235,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	236,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	237,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	238,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	239,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	240,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	241,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	242,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	243,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	244,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	245,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	246,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	247,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	248,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	249,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	250,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	251,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	252,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	253,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	254,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	255,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	256,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	257,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	258,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	259,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	260,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	261,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	262,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	263,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	264,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	265,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	266,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	267,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	268,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	269,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	270,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	271,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	272,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	273,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	274,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	275,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	276,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	277,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	278,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	279,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	280,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	281,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	282,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	283,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	284,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	285,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	286,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	287,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	288,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	289,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	290,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	291,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	292,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	293,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	294,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	295,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	296,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	297,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	298,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	299,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	300,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	301,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	302,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	303,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	304,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	305,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	306,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	307,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	308,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	309,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	310,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	311,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	312,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	313,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	314,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	315,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	316,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	317,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	318,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	319,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	320,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	321,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	322,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	323,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	324,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	325,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	326,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	327,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	328,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	329,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	330,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	331,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	332,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	333,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	334,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	335,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	336,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	337,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	338,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	339,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	340,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	341,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	342,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	343,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	344,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	345,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	346,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	347,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	348,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	349,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	350,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	351,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	352,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	353,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	354,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	355,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	356,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	357,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	358,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	359,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	360,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	361,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	362,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	363,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	364,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	365,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	366,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	367,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	368,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	369,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	370,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	371,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	372,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	373,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	374,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	375,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	376,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	377,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	378,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	379,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	380,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	381,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	382,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	383,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	384,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	385,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	386,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	387,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	388,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	389,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	390,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	391,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	392,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	393,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	394,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	395,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	396,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	397,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	398,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	399,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	400,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	401,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	402,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	403,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	404,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	405,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	406,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	407,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	408,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	409,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	410,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	411,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	412,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	413,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	414,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	415,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	416,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	417,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	418,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	419,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	420,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	421,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	422,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	423,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	424,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	425,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	426,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	427,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	428,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	429,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	430,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	431,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	432,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	433,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	434,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	435,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	436,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	437,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	438,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	439,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	440,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	441,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	442,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	443,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	444,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	445,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	446,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	447,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	448,
									"scores":	[-10.848402475393275, -10.060882714693275, -11.235695048493273, -12.217079638493274, -10.390147967493274, -11.198703958493274, -11.647716750693274, -12.374337695393274, -11.230102438493274, -11.267202838493274, -10.972517264493273, -10.483128524693274, -11.540624524693273, -11.540624524693273, -11.540624524693273, -11.540624524693273]
								}]
						}, {
							"switch":	72,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	428,
							"begin_column":	4,
							"end_line":	428,
							"end_column":	20,
							"patch_codes":	["if (!__is_neg(\"\", \"L428\", 16, &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(object), sizeof (object), &(member), sizeof (member), &(rv), sizeof (rv), &(retval), sizeof (retval), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)))\n    guard->in_get = 0;\n", "{\n}\n", "guard->in_get = (-1)", "guard->in_get = (0 * silent)", "guard->in_get = (0 * type)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "guard->in_get = (guard != 0)", "guard->in_get = (guard == 0)", "guard->in_get = (key != 0)", "guard->in_get = (key == 0)", "guard->in_get = (member != 0)", "guard->in_get = (member != rv)", "guard->in_get = (member != tmp_member)", "guard->in_get = (member == 0)", "guard->in_get = (member == rv)", "guard->in_get = (member == tmp_member)", "guard->in_get = (object != 0)", "guard->in_get = (object != member)", "guard->in_get = (object != rv)", "guard->in_get = (object != tmp_member)", "guard->in_get = (object == 0)", "guard->in_get = (object == member)", "guard->in_get = (object == rv)", "guard->in_get = (object == tmp_member)", "guard->in_get = (property_info != 0)", "guard->in_get = (property_info == 0)", "guard->in_get = (retval != 0)", "guard->in_get = (retval == 0)", "guard->in_get = (rv != 0)", "guard->in_get = (rv == 0)", "guard->in_get = (silent != 0)", "guard->in_get = (silent * type)", "guard->in_get = (silent + 0)", "guard->in_get = (silent - 0)", "guard->in_get = (silent == 0)", "guard->in_get = (tmp_member != 0)", "guard->in_get = (tmp_member != rv)", "guard->in_get = (tmp_member == 0)", "guard->in_get = (tmp_member == rv)", "guard->in_get = (type != 0)", "guard->in_get = (type != silent)", "guard->in_get = (type * silent)", "guard->in_get = (type + 0)", "guard->in_get = (type + silent)", "guard->in_get = (type - 0)", "guard->in_get = (type - silent)", "guard->in_get = (type == 0)", "guard->in_get = (type == silent)", "guard->in_get = (zobj != 0)", "guard->in_get = (zobj == 0)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.9723897537932729, -10.105779794293273, -10.013868433293274, -8.850677709293274, -7.6232475432932736, -9.5363418942932743, -7.8673939532932735, -9.9953180011932741, -9.8025059532932737, -10.096856753293274, -9.4887082532932734, -8.7226068232932743, -9.2556649632932739, -9.2556649632932739, -9.2556649632932739, -9.2556649632932739]
								}, {
									"case":	2,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	3,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	4,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	5,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	6,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	7,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	8,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	9,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	10,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	11,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	12,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	13,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	14,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	15,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	16,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	17,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	18,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	19,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	20,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	21,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	22,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	23,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	24,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	25,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	26,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	27,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	28,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	29,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	30,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	31,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	32,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	33,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	34,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	35,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	36,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	37,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	38,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	39,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	40,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	41,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	42,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	43,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	44,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	45,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	46,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	47,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	48,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	49,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	50,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	51,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	52,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	53,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	54,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	55,
									"scores":	[-6.6393884932932741]
								}, {
									"case":	56,
									"scores":	[-6.6393884932932741]
								}]
						}]
				}, {
					"line":	430,
					"switches":	[{
							"switch":	75,
							"types":	[[], [], [], [], [447], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], [], [], [], [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [], [], [], [], [], []],
							"begin_line":	431,
							"begin_column":	3,
							"end_line":	431,
							"end_column":	3,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L431\", 11, &(retval), sizeof (retval), &(rv), sizeof (rv), &(type), sizeof (type), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	2,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	3,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	4,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	5,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	6,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	7,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	8,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	9,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	10,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	11,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	12,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	13,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	14,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	15,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	16,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	17,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	18,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	19,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	20,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	21,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	22,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	23,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	24,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	25,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	26,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	27,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	28,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	29,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	30,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	31,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	32,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	33,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	34,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	35,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	36,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	37,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	38,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	39,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	40,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	41,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	42,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	43,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	44,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	45,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	46,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	47,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	48,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	49,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	50,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	51,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	52,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	53,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	54,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	55,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	56,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	57,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	58,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	59,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	60,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	61,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	62,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	63,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	64,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	65,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	66,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	67,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	68,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	69,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	70,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	71,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	72,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	73,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	74,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	75,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	76,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	77,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	78,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	79,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	80,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	81,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	82,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	83,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	84,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	85,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	86,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	87,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	88,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	89,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	90,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	91,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	92,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	93,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	94,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	95,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	96,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	97,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	98,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	99,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	100,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	101,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	102,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	103,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	104,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	105,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	106,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	107,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	108,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	109,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	110,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	111,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	112,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	113,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	114,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	115,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	116,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	117,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	118,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	119,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	120,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	121,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	122,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	123,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	124,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	125,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	126,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	127,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	128,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	129,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	130,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	131,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	132,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	133,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	134,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	135,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	136,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	137,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	138,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	139,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	140,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	141,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	142,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	143,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	144,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	145,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	146,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	147,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	148,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	149,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	150,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	151,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	152,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	153,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	154,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	155,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	156,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	157,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	158,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	159,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	160,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	161,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	162,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	163,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	164,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	165,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	166,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	167,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	168,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	169,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	170,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	171,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	172,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	173,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	174,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	175,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	176,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	177,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	178,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	179,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	180,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	181,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	182,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	183,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	184,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	185,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	186,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	187,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	188,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	189,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	190,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	191,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	192,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	193,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	194,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	195,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	196,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	197,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	198,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	199,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	200,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	201,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	202,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	203,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	204,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	205,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	206,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	207,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	208,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	209,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	210,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	211,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	212,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	213,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	214,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	215,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	216,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	217,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	218,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	219,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	220,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	221,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	222,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	223,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	224,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	225,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	226,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	227,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	228,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	229,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	230,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	231,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	232,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	233,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	234,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	235,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	236,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	237,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	238,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	239,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	240,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	241,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	242,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	243,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	244,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	245,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	246,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	247,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	248,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	249,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	250,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	251,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	252,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	253,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	254,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	255,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	256,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	257,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	258,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	259,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	260,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	261,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	262,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	263,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	264,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	265,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	266,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	267,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	268,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	269,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	270,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	271,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	272,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	273,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	274,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	275,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	276,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	277,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	278,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	279,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	280,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	281,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	282,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	283,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	284,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	285,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	286,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	287,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	288,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	289,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	290,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	291,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	292,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	293,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	294,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	295,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	296,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	297,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	298,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	299,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	300,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	301,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	302,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	303,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	304,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	305,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	306,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	307,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	308,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	309,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	310,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	311,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	312,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	313,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	314,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	315,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	316,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	317,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	318,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	319,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	320,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	321,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	322,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	323,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	324,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	325,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	326,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	327,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	328,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	329,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	330,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	331,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	332,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	333,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	334,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	335,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	336,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	337,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	338,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	339,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	340,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	341,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	342,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	343,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	344,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	345,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	346,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	347,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	348,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	349,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	350,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	351,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	352,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	353,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	354,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	355,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	356,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	357,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	358,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	359,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	360,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	361,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	362,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	363,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	364,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	365,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	366,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	367,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	368,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	369,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	370,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	371,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	372,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	373,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	374,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	375,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	376,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	377,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	378,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	379,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	380,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	381,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	382,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	383,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	384,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	385,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	386,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	387,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	388,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	389,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	390,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	391,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	392,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	393,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	394,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	395,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	396,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	397,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	398,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	399,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	400,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	401,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	402,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	403,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	404,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	405,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	406,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	407,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	408,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	409,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	410,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	411,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	412,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	413,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	414,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	415,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	416,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	417,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	418,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	419,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	420,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	421,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	422,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	423,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	424,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	425,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	426,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	427,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	428,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	429,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	430,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	431,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	432,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	433,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	434,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	435,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	436,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	437,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	438,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	439,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	440,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	441,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	442,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	443,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	444,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	445,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	446,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	447,
									"scores":	[-9.173156903458235, -9.9917746134582348, -10.480797974658234, -9.8055984884582337, -10.100284062458236, -11.244122062458235, -11.207418919358236, -10.063183662458234, -10.100284062458236, -9.3162097486582347, -9.8055984884582337]
								}]
						}, {
							"switch":	76,
							"types":	[[], [], [1], [], [], [], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [], [], [], [], [], [], [], [], [], [2]],
							"begin_line":	431,
							"begin_column":	5,
							"end_line":	431,
							"end_column":	15,
							"patch_codes":	["if (!__is_neg(\"\", \"L431\", 11, &(retval), sizeof (retval), &(rv), sizeof (rv), &(type), sizeof (type), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member)))\n    retval = &rv;\n", "{\n}\n", "retval = &(&guard)", "retval = &(&key)", "retval = &(&member)", "retval = &(&object)", "retval = &(&property_info)", "retval = &(&retval)", "retval = &(&rv)", "retval = &(&silent)", "retval = &(&tmp_member)", "retval = &(&type)", "retval = &(&zobj)", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.2060737596582349, -7.726438588658235, -7.4040192386582344, -9.0253335386582343, -9.6334820386582347, -8.6688831486582352, -9.531943286558235, -9.3391312386582346, -9.6334820386582347, -8.2592321086582352, -9.0253335386582343]
								}, {
									"case":	2,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	3,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	4,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	5,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	6,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	7,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	8,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	9,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	10,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	11,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	12,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	13,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	14,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	15,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	16,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	17,
									"scores":	[-6.5989830786582351]
								}, {
									"case":	18,
									"scores":	[-6.5989830786582351]
								}]
						}]
				}, {
					"line":	431,
					"switches":	[{
							"switch":	77,
							"types":	[[], [], [], [], [449], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], [], [], [], [414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448], [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], [], [], [], [], [], []],
							"begin_line":	432,
							"begin_column":	3,
							"end_line":	432,
							"end_column":	3,
							"patch_codes":	["memset(&(*member), 0, sizeof (*(&(*member))))", "memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj, 0, sizeof (*(zobj)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L432\", 11, &(rv), sizeof (rv), &(type), sizeof (type), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	2,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	3,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	4,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	5,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	6,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	7,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	8,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	9,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	10,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	11,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	12,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	13,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	14,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	15,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	16,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	17,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	18,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	19,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	20,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	21,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	22,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	23,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	24,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	25,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	26,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	27,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	28,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	29,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	30,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	31,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	32,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	33,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	34,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	35,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	36,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	37,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	38,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	39,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	40,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	41,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	42,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	43,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	44,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	45,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	46,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	47,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	48,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	49,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	50,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	51,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	52,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	53,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	54,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	55,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	56,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	57,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	58,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	59,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	60,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	61,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	62,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	63,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	64,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	65,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	66,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	67,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	68,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	69,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	70,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	71,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	72,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	73,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	74,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	75,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	76,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	77,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	78,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	79,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	80,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	81,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	82,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	83,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	84,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	85,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	86,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	87,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	88,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	89,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	90,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	91,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	92,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	93,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	94,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	95,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	96,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	97,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	98,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	99,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	100,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	101,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	102,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	103,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	104,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	105,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	106,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	107,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	108,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	109,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	110,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	111,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	112,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	113,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	114,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	115,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	116,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	117,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	118,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	119,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	120,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	121,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	122,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	123,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	124,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	125,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	126,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	127,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	128,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	129,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	130,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	131,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	132,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	133,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	134,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	135,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	136,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	137,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	138,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	139,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	140,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	141,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	142,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	143,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	144,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	145,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	146,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	147,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	148,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	149,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	150,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	151,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	152,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	153,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	154,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	155,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	156,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	157,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	158,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	159,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	160,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	161,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	162,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	163,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	164,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	165,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	166,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	167,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	168,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	169,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	170,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	171,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	172,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	173,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	174,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	175,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	176,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	177,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	178,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	179,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	180,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	181,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	182,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	183,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	184,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	185,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	186,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	187,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	188,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	189,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	190,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	191,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	192,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	193,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	194,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	195,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	196,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	197,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	198,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	199,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	200,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	201,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	202,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	203,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	204,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	205,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	206,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	207,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	208,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	209,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	210,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	211,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	212,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	213,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	214,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	215,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	216,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	217,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	218,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	219,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	220,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	221,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	222,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	223,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	224,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	225,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	226,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	227,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	228,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	229,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	230,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	231,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	232,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	233,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	234,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	235,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	236,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	237,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	238,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	239,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	240,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	241,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	242,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	243,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	244,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	245,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	246,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	247,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	248,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	249,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	250,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	251,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	252,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	253,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	254,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	255,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	256,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	257,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	258,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	259,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	260,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	261,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	262,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	263,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	264,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	265,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	266,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	267,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	268,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	269,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	270,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	271,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	272,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	273,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	274,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	275,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	276,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	277,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	278,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	279,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	280,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	281,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	282,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	283,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	284,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	285,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	286,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	287,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	288,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	289,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	290,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	291,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	292,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	293,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	294,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	295,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	296,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	297,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	298,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	299,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	300,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	301,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	302,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	303,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	304,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	305,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	306,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	307,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	308,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	309,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	310,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	311,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	312,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	313,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	314,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	315,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	316,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	317,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	318,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	319,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	320,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	321,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	322,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	323,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	324,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	325,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	326,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	327,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	328,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	329,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	330,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	331,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	332,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	333,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	334,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	335,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	336,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	337,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	338,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	339,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	340,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	341,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	342,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	343,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	344,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	345,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	346,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	347,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	348,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	349,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	350,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	351,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	352,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	353,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	354,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	355,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	356,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	357,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	358,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	359,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	360,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	361,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	362,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	363,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	364,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	365,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	366,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	367,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	368,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	369,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	370,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	371,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	372,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	373,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	374,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	375,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	376,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	377,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	378,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	379,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	380,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	381,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	382,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	383,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	384,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	385,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	386,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	387,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	388,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	389,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	390,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	391,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	392,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	393,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	394,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	395,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	396,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	397,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	398,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	399,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	400,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	401,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	402,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	403,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	404,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	405,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	406,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	407,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	408,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	409,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	410,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	411,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	412,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	413,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	414,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	415,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	416,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	417,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	418,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	419,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	420,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	421,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	422,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	423,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	424,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	425,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	426,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	427,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	428,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	429,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	430,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	431,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	432,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	433,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	434,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	435,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	436,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	437,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	438,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	439,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	440,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	441,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	442,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	443,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	444,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	445,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	446,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	447,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	448,
									"scores":	[-6.5787803713407156]
								}, {
									"case":	449,
									"scores":	[-8.8177039731407163, -10.370161887340714, -9.0650144751407158, -10.612260781140716, -10.906946355140715, -11.293976533140714, -12.005837124040717, -10.869845955140715, -10.906946355140715, -10.122872041340715, -10.612260781140716]
								}]
						}, {
							"switch":	78,
							"types":	[[8], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [6, 7], [], [4, 5]],
							"begin_line":	432,
							"begin_column":	5,
							"end_line":	446,
							"end_column":	5,
							"patch_codes":	["if (__is_neg(\"\", \"L432\", 11, &(type), sizeof (type), &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member))) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n", "if ((!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) || __is_neg(\"\", \"L432\", 11, &(type), sizeof (type), &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member))) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n", "if (((!zval_isref_p(rv)) || __is_neg(\"\", \"L432\", 11, &(type), sizeof (type), &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member))) && (type == 1 || type == 2 || type == 6)) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n", "if (!zval_isref_p(rv)) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n", "if ((!zval_isref_p(rv) && type == 1 || type == 2) || type == 6) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n", "if (!zval_set_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n", "if (!zval_unset_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n", "if ((!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) && !__is_neg(\"\", \"L432\", 11, &(type), sizeof (type), &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member))) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[0.3415749574718574, 0.44973601247185835, -1.6790731825281435, -2.2459523425281427, -2.8541008425281427, -1.0396118425281449, -2.0510130425281439, -2.559750042528143, -2.8541008425281427, -1.4798509125281427, -2.2459523425281427]
								}, {
									"case":	2,
									"scores":	[-2.6282379674281442, -2.5200769124281441, -4.6488861074281456, -5.2157652674281456, -5.8239137674281451, -4.0094247674281451, -5.020825967428145, -5.5295629674281459, -5.8239137674281451, -4.4496638374281456, -5.2157652674281456]
								}, {
									"case":	3,
									"scores":	[-2.6282379674281442, -2.5200769124281441, -4.6488861074281456, -5.2157652674281456, -5.8239137674281451, -4.0094247674281451, -5.020825967428145, -5.5295629674281459, -5.8239137674281451, -4.4496638374281456, -5.2157652674281456]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-2.6282379674281442, -2.5200769124281441, -4.6488861074281456, -5.2157652674281456, -5.8239137674281451, -4.0094247674281451, -5.020825967428145, -5.5295629674281459, -5.8239137674281451, -4.4496638374281456, -5.2157652674281456]
								}]
						}, {
							"switch":	79,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	432,
							"begin_column":	5,
							"end_line":	446,
							"end_column":	5,
							"patch_codes":	["if (!__is_neg(\"\", \"L432\", 11, &(rv), sizeof (rv), &(type), sizeof (type), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member)))\n    if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n        if (zval_refcount_p(rv) > 0) {\n            zval *tmp = rv;\n            do {\n                (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n            } while (0);\n            *rv = *tmp;\n            _zval_copy_ctor((rv));\n            zval_unset_isref_p(rv);\n            zval_set_refcount_p(rv, 0);\n        }\n        if (__builtin_expect((*rv).type != 5, 0)) {\n            zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n        }\n    }\n", "if (!__is_neg(\"\", \"L432\", 11, &(rv), sizeof (rv), &(type), sizeof (type), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member)) && (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6))) {\n    if (zval_refcount_p(rv) > 0) {\n        zval *tmp = rv;\n        do {\n            (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n            ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n        } while (0);\n        *rv = *tmp;\n        _zval_copy_ctor((rv));\n        zval_unset_isref_p(rv);\n        zval_set_refcount_p(rv, 0);\n    }\n    if (__builtin_expect((*rv).type != 5, 0)) {\n        zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.9813830863407151, -7.0895441413407152, -9.1101922813407157, -9.6770714413407148, -10.285219941340715, -8.4707309413407152, -9.4821321413407151, -9.9908691413407151, -10.285219941340715, -8.9109700113407158, -9.6770714413407148]
								}, {
									"case":	2,
									"scores":	[-6.5548325783407151, -6.6629936333407151, -8.6836417733407156, -9.2505209333407148, -9.8586694333407152, -8.0441804333407152, -9.0555816333407151, -9.5643186333407151, -9.8586694333407152, -8.4844195033407157, -9.2505209333407148]
								}]
						}]
				}, {
					"line":	429,
					"switches":	[{
							"switch":	73,
							"types":	[[], [], [], [], [450], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225], [], [], [], [415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449], [226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414], [], [], [], [], [], []],
							"begin_line":	430,
							"begin_column":	2,
							"end_line":	430,
							"end_column":	2,
							"patch_codes":	["memset(&(*member), 0, sizeof (*(&(*member))))", "memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj, 0, sizeof (*(zobj)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L430\", 11, &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	2,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	3,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	4,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	5,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	6,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	7,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	8,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	9,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	10,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	11,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	12,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	13,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	14,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	15,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	16,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	17,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	18,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	19,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	20,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	21,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	22,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	23,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	24,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	25,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	26,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	27,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	28,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	29,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	30,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	31,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	32,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	33,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	34,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	35,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	36,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	37,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	38,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	39,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	40,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	41,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	42,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	43,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	44,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	45,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	46,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	47,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	48,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	49,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	50,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	51,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	52,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	53,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	54,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	55,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	56,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	57,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	58,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	59,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	60,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	61,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	62,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	63,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	64,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	65,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	66,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	67,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	68,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	69,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	70,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	71,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	72,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	73,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	74,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	75,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	76,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	77,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	78,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	79,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	80,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	81,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	82,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	83,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	84,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	85,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	86,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	87,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	88,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	89,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	90,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	91,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	92,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	93,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	94,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	95,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	96,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	97,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	98,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	99,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	100,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	101,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	102,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	103,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	104,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	105,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	106,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	107,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	108,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	109,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	110,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	111,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	112,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	113,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	114,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	115,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	116,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	117,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	118,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	119,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	120,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	121,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	122,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	123,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	124,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	125,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	126,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	127,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	128,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	129,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	130,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	131,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	132,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	133,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	134,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	135,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	136,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	137,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	138,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	139,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	140,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	141,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	142,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	143,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	144,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	145,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	146,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	147,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	148,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	149,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	150,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	151,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	152,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	153,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	154,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	155,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	156,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	157,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	158,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	159,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	160,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	161,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	162,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	163,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	164,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	165,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	166,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	167,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	168,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	169,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	170,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	171,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	172,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	173,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	174,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	175,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	176,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	177,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	178,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	179,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	180,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	181,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	182,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	183,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	184,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	185,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	186,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	187,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	188,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	189,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	190,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	191,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	192,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	193,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	194,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	195,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	196,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	197,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	198,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	199,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	200,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	201,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	202,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	203,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	204,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	205,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	206,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	207,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	208,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	209,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	210,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	211,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	212,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	213,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	214,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	215,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	216,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	217,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	218,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	219,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	220,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	221,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	222,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	223,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	224,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	225,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	226,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	227,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	228,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	229,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	230,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	231,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	232,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	233,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	234,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	235,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	236,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	237,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	238,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	239,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	240,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	241,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	242,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	243,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	244,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	245,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	246,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	247,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	248,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	249,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	250,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	251,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	252,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	253,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	254,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	255,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	256,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	257,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	258,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	259,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	260,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	261,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	262,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	263,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	264,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	265,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	266,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	267,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	268,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	269,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	270,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	271,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	272,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	273,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	274,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	275,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	276,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	277,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	278,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	279,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	280,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	281,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	282,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	283,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	284,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	285,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	286,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	287,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	288,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	289,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	290,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	291,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	292,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	293,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	294,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	295,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	296,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	297,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	298,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	299,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	300,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	301,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	302,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	303,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	304,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	305,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	306,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	307,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	308,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	309,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	310,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	311,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	312,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	313,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	314,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	315,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	316,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	317,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	318,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	319,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	320,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	321,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	322,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	323,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	324,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	325,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	326,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	327,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	328,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	329,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	330,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	331,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	332,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	333,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	334,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	335,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	336,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	337,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	338,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	339,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	340,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	341,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	342,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	343,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	344,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	345,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	346,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	347,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	348,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	349,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	350,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	351,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	352,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	353,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	354,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	355,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	356,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	357,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	358,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	359,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	360,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	361,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	362,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	363,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	364,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	365,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	366,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	367,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	368,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	369,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	370,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	371,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	372,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	373,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	374,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	375,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	376,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	377,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	378,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	379,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	380,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	381,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	382,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	383,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	384,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	385,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	386,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	387,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	388,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	389,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	390,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	391,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	392,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	393,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	394,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	395,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	396,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	397,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	398,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	399,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	400,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	401,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	402,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	403,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	404,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	405,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	406,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	407,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	408,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	409,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	410,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	411,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	412,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	413,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	414,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	415,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	416,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	417,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	418,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	419,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	420,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	421,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	422,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	423,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	424,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	425,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	426,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	427,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	428,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	429,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	430,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	431,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	432,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	433,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	434,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	435,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	436,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	437,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	438,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	439,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	440,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	441,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	442,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	443,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	444,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	445,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	446,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	447,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	448,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	449,
									"scores":	[-6.6191857859757546]
								}, {
									"case":	450,
									"scores":	[-8.0038908011757552, -10.020194672175755, -10.973824677175756, -11.273164641175756, -11.140390809175756, -10.410537363375754, -12.046212600075755, -10.910221431175755, -10.947321831175755, -10.163247517375755, -10.652636257175754]
								}]
						}, {
							"switch":	74,
							"types":	[[3], [2], [], [], [], [], [], [], [], [], [], [], [1], [], [], [], []],
							"begin_line":	430,
							"begin_column":	4,
							"end_line":	449,
							"end_column":	4,
							"patch_codes":	["if (__is_neg(\"\", \"L430\", 11, &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member))) {\n    retval = &rv;\n    if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n        if (zval_refcount_p(rv) > 0) {\n            zval *tmp = rv;\n            do {\n                (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n            } while (0);\n            *rv = *tmp;\n            _zval_copy_ctor((rv));\n            zval_unset_isref_p(rv);\n            zval_set_refcount_p(rv, 0);\n        }\n        if (__builtin_expect((*rv).type != 5, 0)) {\n            zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n        }\n    }\n} else {\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if ((rv) || __is_neg(\"\", \"L430\", 11, &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member))) {\n    retval = &rv;\n    if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n        if (zval_refcount_p(rv) > 0) {\n            zval *tmp = rv;\n            do {\n                (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n            } while (0);\n            *rv = *tmp;\n            _zval_copy_ctor((rv));\n            zval_unset_isref_p(rv);\n            zval_set_refcount_p(rv, 0);\n        }\n        if (__builtin_expect((*rv).type != 5, 0)) {\n            zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n        }\n    }\n} else {\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if ((rv) && !__is_neg(\"\", \"L430\", 11, &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member))) {\n    retval = &rv;\n    if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n        if (zval_refcount_p(rv) > 0) {\n            zval *tmp = rv;\n            do {\n                (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n            } while (0);\n            *rv = *tmp;\n            _zval_copy_ctor((rv));\n            zval_unset_isref_p(rv);\n            zval_set_refcount_p(rv, 0);\n        }\n        if (__builtin_expect((*rv).type != 5, 0)) {\n            zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n        }\n    }\n} else {\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-1.7715590417281395, -4.7171028017281422, -4.4075870712281429, -5.3417693367281416, -3.04844192672814, -1.9488352807281395, -4.3414232807281419, -4.8501602807281428, -5.144511080728142, -3.7702611507281421, -4.5363625807281416]
								}, {
									"case":	2,
									"scores":	[-2.888585973428146, -5.8341297334281457, -5.5246140029281463, -6.4587962684281459, -4.1654688584281452, -3.0658622124281458, -5.4584502124281453, -5.9671872124281453, -6.2615380124281454, -4.8872880824281459, -5.6533895124281459]
								}, {
									"case":	3,
									"scores":	[-2.888585973428146, -5.8341297334281457, -5.5246140029281463, -6.4587962684281459, -4.1654688584281452, -3.0658622124281458, -5.4584502124281453, -5.9671872124281453, -6.2615380124281454, -4.8872880824281459, -5.6533895124281459]
								}]
						}, {
							"switch":	80,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	430,
							"begin_column":	4,
							"end_line":	449,
							"end_column":	4,
							"patch_codes":	["if (!__is_neg(\"\", \"L430\", 11, &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member)))\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n", "if (!__is_neg(\"\", \"L430\", 11, &(rv), sizeof (rv), &(retval), sizeof (retval), &(guard), sizeof (guard), &(object), sizeof (object), &(member), sizeof (member), &(type), sizeof (type), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(key), sizeof (key), &(silent), sizeof (silent), &(tmp_member), sizeof (tmp_member)) && (rv)) {\n    retval = &rv;\n    if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n        if (zval_refcount_p(rv) > 0) {\n            zval *tmp = rv;\n            do {\n                (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n            } while (0);\n            *rv = *tmp;\n            _zval_copy_ctor((rv));\n            zval_unset_isref_p(rv);\n            zval_set_refcount_p(rv, 0);\n        }\n        if (__builtin_expect((*rv).type != 5, 0)) {\n            zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n        }\n    }\n} else {\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5064593169757545, -9.452003076975755, -9.1424873464757539, -9.6213187119757535, -7.7833422019757545, -6.6837355559757547, -9.0763235559757547, -9.5850605559757547, -9.8794113559757548, -8.5051614259757535, -9.2712628559757544]
								}, {
									"case":	2,
									"scores":	[-6.4233543169757539, -9.3688980769757535, -9.0593823464757541, -9.9935646119757546, -7.7002372019757548, -6.6006305559757541, -8.9932185559757549, -9.5019555559757549, -9.7963063559757551, -8.4220564259757538, -9.1881578559757546]
								}]
						}]
				}, {
					"line":	449,
					"switches":	[{
							"switch":	81,
							"types":	[[], [], [], [], [447], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], [], [], [], [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], [], [], [], [], [], []],
							"begin_line":	450,
							"begin_column":	2,
							"end_line":	450,
							"end_column":	2,
							"patch_codes":	["memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L450\", 11, &(object), sizeof (object), &(zobj), sizeof (zobj), &(retval), sizeof (retval), &(guard), sizeof (guard), &(member), sizeof (member), &(rv), sizeof (rv), &(silent), sizeof (silent), &(type), sizeof (type), &(tmp_member), sizeof (tmp_member), &(property_info), sizeof (property_info), &(key), sizeof (key)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	2,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	3,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	4,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	5,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	6,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	7,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	8,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	9,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	10,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	11,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	12,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	13,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	14,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	15,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	16,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	17,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	18,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	19,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	20,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	21,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	22,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	23,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	24,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	25,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	26,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	27,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	28,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	29,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	30,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	31,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	32,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	33,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	34,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	35,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	36,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	37,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	38,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	39,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	40,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	41,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	42,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	43,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	44,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	45,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	46,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	47,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	48,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	49,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	50,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	51,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	52,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	53,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	54,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	55,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	56,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	57,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	58,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	59,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	60,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	61,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	62,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	63,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	64,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	65,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	66,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	67,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	68,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	69,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	70,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	71,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	72,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	73,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	74,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	75,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	76,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	77,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	78,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	79,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	80,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	81,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	82,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	83,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	84,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	85,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	86,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	87,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	88,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	89,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	90,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	91,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	92,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	93,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	94,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	95,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	96,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	97,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	98,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	99,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	100,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	101,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	102,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	103,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	104,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	105,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	106,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	107,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	108,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	109,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	110,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	111,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	112,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	113,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	114,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	115,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	116,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	117,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	118,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	119,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	120,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	121,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	122,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	123,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	124,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	125,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	126,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	127,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	128,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	129,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	130,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	131,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	132,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	133,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	134,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	135,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	136,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	137,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	138,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	139,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	140,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	141,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	142,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	143,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	144,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	145,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	146,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	147,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	148,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	149,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	150,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	151,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	152,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	153,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	154,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	155,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	156,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	157,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	158,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	159,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	160,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	161,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	162,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	163,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	164,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	165,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	166,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	167,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	168,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	169,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	170,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	171,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	172,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	173,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	174,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	175,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	176,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	177,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	178,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	179,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	180,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	181,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	182,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	183,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	184,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	185,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	186,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	187,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	188,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	189,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	190,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	191,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	192,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	193,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	194,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	195,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	196,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	197,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	198,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	199,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	200,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	201,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	202,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	203,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	204,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	205,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	206,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	207,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	208,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	209,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	210,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	211,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	212,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	213,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	214,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	215,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	216,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	217,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	218,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	219,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	220,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	221,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	222,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	223,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	224,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	225,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	226,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	227,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	228,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	229,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	230,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	231,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	232,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	233,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	234,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	235,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	236,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	237,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	238,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	239,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	240,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	241,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	242,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	243,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	244,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	245,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	246,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	247,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	248,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	249,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	250,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	251,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	252,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	253,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	254,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	255,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	256,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	257,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	258,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	259,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	260,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	261,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	262,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	263,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	264,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	265,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	266,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	267,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	268,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	269,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	270,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	271,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	272,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	273,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	274,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	275,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	276,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	277,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	278,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	279,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	280,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	281,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	282,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	283,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	284,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	285,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	286,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	287,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	288,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	289,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	290,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	291,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	292,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	293,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	294,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	295,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	296,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	297,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	298,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	299,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	300,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	301,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	302,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	303,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	304,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	305,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	306,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	307,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	308,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	309,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	310,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	311,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	312,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	313,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	314,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	315,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	316,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	317,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	318,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	319,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	320,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	321,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	322,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	323,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	324,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	325,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	326,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	327,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	328,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	329,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	330,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	331,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	332,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	333,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	334,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	335,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	336,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	337,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	338,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	339,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	340,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	341,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	342,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	343,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	344,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	345,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	346,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	347,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	348,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	349,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	350,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	351,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	352,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	353,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	354,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	355,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	356,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	357,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	358,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	359,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	360,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	361,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	362,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	363,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	364,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	365,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	366,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	367,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	368,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	369,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	370,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	371,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	372,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	373,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	374,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	375,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	376,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	377,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	378,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	379,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	380,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	381,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	382,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	383,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	384,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	385,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	386,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	387,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	388,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	389,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	390,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	391,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	392,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	393,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	394,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	395,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	396,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	397,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	398,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	399,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	400,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	401,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	402,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	403,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	404,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	405,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	406,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	407,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	408,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	409,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	410,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	411,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	412,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	413,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	414,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	415,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	416,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	417,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	418,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	419,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	420,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	421,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	422,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	423,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	424,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	425,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	426,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	427,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	428,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	429,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	430,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	431,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	432,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	433,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	434,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	435,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	436,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	437,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	438,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	439,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	440,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	441,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	442,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	443,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	444,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	445,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	446,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	447,
									"scores":	[-9.6694316392231947, -10.133179049223196, -7.777417629223196, -9.6458523552231945, -9.7344417092231961, -7.4916493352231956, -8.8352751954231952, -8.6239214214231961, -9.3246639352231959, -9.5822491092231949, -9.6193495092231949]
								}]
						}, {
							"switch":	82,
							"types":	[[], [], [1], [], [], [], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [], [6, 7], [], [], [], [], [2, 3, 4], [], [], [5]],
							"begin_line":	450,
							"begin_column":	4,
							"end_line":	450,
							"end_column":	25,
							"patch_codes":	["if (!__is_neg(\"\", \"L450\", 11, &(object), sizeof (object), &(zobj), sizeof (zobj), &(retval), sizeof (retval), &(guard), sizeof (guard), &(member), sizeof (member), &(rv), sizeof (rv), &(silent), sizeof (silent), &(type), sizeof (type), &(tmp_member), sizeof (tmp_member), &(property_info), sizeof (property_info), &(key), sizeof (key)))\n    _zval_ptr_dtor((&object));\n", "zval_update_constant((&object), 0)", "zval_update_constant_inline_change((&object), 0)", "zval_update_constant_no_inline_change((&object), 0)", "{\n}\n", "_zval_internal_ptr_dtor((&object))", "zval_add_ref((&object))", "_zval_ptr_dtor((&(&guard)))", "_zval_ptr_dtor((&(&key)))", "_zval_ptr_dtor((&(&member)))", "_zval_ptr_dtor((&(&object)))", "_zval_ptr_dtor((&(&property_info)))", "_zval_ptr_dtor((&(&retval)))", "_zval_ptr_dtor((&(&rv)))", "_zval_ptr_dtor((&(&silent)))", "_zval_ptr_dtor((&(&tmp_member)))", "_zval_ptr_dtor((&(&type)))", "_zval_ptr_dtor((&(&zobj)))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-8.4183791800231962, -9.1870207245231956, -7.980282574023196, -8.4183862245231964, -8.9502337905231961, -7.5517248545231963, -7.781060304023196, -7.6968685940231962, -8.5471617340231969, -8.8609594340231972, -9.1553102340231955]
								}, {
									"case":	2,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	3,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	4,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	5,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	6,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	7,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	8,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	9,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	10,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	11,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	12,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	13,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	14,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	15,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	16,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	17,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	18,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	19,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	20,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	21,
									"scores":	[-6.5585776640231961]
								}, {
									"case":	22,
									"scores":	[-6.5585776640231961]
								}]
						}]
				}, {
					"line":	417,
					"switches":	[{
							"switch":	58,
							"types":	[[], [], [], [], [452], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227], [], [], [], [417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451], [228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], [], [], [], [], [], []],
							"begin_line":	418,
							"begin_column":	1,
							"end_line":	418,
							"end_column":	1,
							"patch_codes":	["memset(&(*member), 0, sizeof (*(&(*member))))", "memset(&(*member).is_ref__gc, 0, sizeof (*(&(*member).is_ref__gc)))", "memset(&(*member).refcount__gc, 0, sizeof (*(&(*member).refcount__gc)))", "memset(&(*member).type, 0, sizeof (*(&(*member).type)))", "memset(&(*member).value, 0, sizeof (*(&(*member).value)))", "memset(&(*object).is_ref__gc, 0, sizeof (*(&(*object).is_ref__gc)))", "memset(&(*object).refcount__gc, 0, sizeof (*(&(*object).refcount__gc)))", "memset(&(*object).type, 0, sizeof (*(&(*object).type)))", "memset(&(*object).value, 0, sizeof (*(&(*object).value)))", "memset(&(*object).value.dval, 0, sizeof (*(&(*object).value.dval)))", "memset(&(*object).value.ht, 0, sizeof (*(&(*object).value.ht)))", "memset(&(*object).value.lval, 0, sizeof (*(&(*object).value.lval)))", "memset(&(*object).value.obj, 0, sizeof (*(&(*object).value.obj)))", "memset(&(*object).value.obj.handle, 0, sizeof (*(&(*object).value.obj.handle)))", "memset(&(*object).value.obj.handlers, 0, sizeof (*(&(*object).value.obj.handlers)))", "memset(&(*object).value.str, 0, sizeof (*(&(*object).value.str)))", "memset(&(executor_globals.objects_store).free_list_head, 0, sizeof (*(&(executor_globals.objects_store).free_list_head)))", "memset(&(executor_globals.objects_store).object_buckets, 0, sizeof (*(&(executor_globals.objects_store).object_buckets)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.free_list)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.refcount)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].destructor_called)))", "memset(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid, 0, sizeof (*(&(executor_globals.objects_store).object_buckets[(*object).value.obj.handle].valid)))", "memset(&(executor_globals.objects_store).size, 0, sizeof (*(&(executor_globals.objects_store).size)))", "memset(&(executor_globals.objects_store).top, 0, sizeof (*(&(executor_globals.objects_store).top)))", "memset(&executor_globals, 0, sizeof (*(&executor_globals)))", "memset(&executor_globals.This, 0, sizeof (*(&executor_globals.This)))", "memset(&executor_globals.active, 0, sizeof (*(&executor_globals.active)))", "memset(&executor_globals.active_op_array, 0, sizeof (*(&executor_globals.active_op_array)))", "memset(&executor_globals.active_symbol_table, 0, sizeof (*(&executor_globals.active_symbol_table)))", "memset(&executor_globals.arg_types_stack, 0, sizeof (*(&executor_globals.arg_types_stack)))", "memset(&executor_globals.argument_stack, 0, sizeof (*(&executor_globals.argument_stack)))", "memset(&executor_globals.autoload_func, 0, sizeof (*(&executor_globals.autoload_func)))", "memset(&executor_globals.bailout, 0, sizeof (*(&executor_globals.bailout)))", "memset(&executor_globals.called_scope, 0, sizeof (*(&executor_globals.called_scope)))", "memset(&executor_globals.class_table, 0, sizeof (*(&executor_globals.class_table)))", "memset(&executor_globals.current_execute_data, 0, sizeof (*(&executor_globals.current_execute_data)))", "memset(&executor_globals.current_module, 0, sizeof (*(&executor_globals.current_module)))", "memset(&executor_globals.error_handling, 0, sizeof (*(&executor_globals.error_handling)))", "memset(&executor_globals.error_reporting, 0, sizeof (*(&executor_globals.error_reporting)))", "memset(&executor_globals.error_reporting_ini_entry, 0, sizeof (*(&executor_globals.error_reporting_ini_entry)))", "memset(&executor_globals.error_zval, 0, sizeof (*(&executor_globals.error_zval)))", "memset(&executor_globals.error_zval_ptr, 0, sizeof (*(&executor_globals.error_zval_ptr)))", "memset(&executor_globals.exception, 0, sizeof (*(&executor_globals.exception)))", "memset(&executor_globals.exception_class, 0, sizeof (*(&executor_globals.exception_class)))", "memset(&executor_globals.exception_op, 0, sizeof (*(&executor_globals.exception_op)))", "memset(&executor_globals.exit_status, 0, sizeof (*(&executor_globals.exit_status)))", "memset(&executor_globals.full_tables_cleanup, 0, sizeof (*(&executor_globals.full_tables_cleanup)))", "memset(&executor_globals.function_table, 0, sizeof (*(&executor_globals.function_table)))", "memset(&executor_globals.in_autoload, 0, sizeof (*(&executor_globals.in_autoload)))", "memset(&executor_globals.in_execution, 0, sizeof (*(&executor_globals.in_execution)))", "memset(&executor_globals.included_files, 0, sizeof (*(&executor_globals.included_files)))", "memset(&executor_globals.ini_directives, 0, sizeof (*(&executor_globals.ini_directives)))", "memset(&executor_globals.lambda_count, 0, sizeof (*(&executor_globals.lambda_count)))", "memset(&executor_globals.modified_ini_directives, 0, sizeof (*(&executor_globals.modified_ini_directives)))", "memset(&executor_globals.no_extensions, 0, sizeof (*(&executor_globals.no_extensions)))", "memset(&executor_globals.objects_store, 0, sizeof (*(&executor_globals.objects_store)))", "memset(&executor_globals.opline_before_exception, 0, sizeof (*(&executor_globals.opline_before_exception)))", "memset(&executor_globals.opline_ptr, 0, sizeof (*(&executor_globals.opline_ptr)))", "memset(&executor_globals.orig_error_reporting, 0, sizeof (*(&executor_globals.orig_error_reporting)))", "memset(&executor_globals.persistent_list, 0, sizeof (*(&executor_globals.persistent_list)))", "memset(&executor_globals.precision, 0, sizeof (*(&executor_globals.precision)))", "memset(&executor_globals.prev_exception, 0, sizeof (*(&executor_globals.prev_exception)))", "memset(&executor_globals.regular_list, 0, sizeof (*(&executor_globals.regular_list)))", "memset(&executor_globals.reserved, 0, sizeof (*(&executor_globals.reserved)))", "memset(&executor_globals.return_value_ptr_ptr, 0, sizeof (*(&executor_globals.return_value_ptr_ptr)))", "memset(&executor_globals.saved_fpu_cw, 0, sizeof (*(&executor_globals.saved_fpu_cw)))", "memset(&executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(&executor_globals.saved_fpu_cw_ptr)))", "memset(&executor_globals.scope, 0, sizeof (*(&executor_globals.scope)))", "memset(&executor_globals.start_op, 0, sizeof (*(&executor_globals.start_op)))", "memset(&executor_globals.std_property_info, 0, sizeof (*(&executor_globals.std_property_info)))", "memset(&executor_globals.symbol_table, 0, sizeof (*(&executor_globals.symbol_table)))", "memset(&executor_globals.symtable_cache, 0, sizeof (*(&executor_globals.symtable_cache)))", "memset(&executor_globals.symtable_cache_limit, 0, sizeof (*(&executor_globals.symtable_cache_limit)))", "memset(&executor_globals.symtable_cache_ptr, 0, sizeof (*(&executor_globals.symtable_cache_ptr)))", "memset(&executor_globals.ticks_count, 0, sizeof (*(&executor_globals.ticks_count)))", "memset(&executor_globals.timeout_seconds, 0, sizeof (*(&executor_globals.timeout_seconds)))", "memset(&executor_globals.uninitialized_zval, 0, sizeof (*(&executor_globals.uninitialized_zval)))", "memset(&executor_globals.uninitialized_zval_ptr, 0, sizeof (*(&executor_globals.uninitialized_zval_ptr)))", "memset(&executor_globals.user_error_handler, 0, sizeof (*(&executor_globals.user_error_handler)))", "memset(&executor_globals.user_error_handler_error_reporting, 0, sizeof (*(&executor_globals.user_error_handler_error_reporting)))", "memset(&executor_globals.user_error_handlers, 0, sizeof (*(&executor_globals.user_error_handlers)))", "memset(&executor_globals.user_error_handlers_error_reporting, 0, sizeof (*(&executor_globals.user_error_handlers_error_reporting)))", "memset(&executor_globals.user_exception_handler, 0, sizeof (*(&executor_globals.user_exception_handler)))", "memset(&executor_globals.user_exception_handlers, 0, sizeof (*(&executor_globals.user_exception_handlers)))", "memset(&executor_globals.zend_constants, 0, sizeof (*(&executor_globals.zend_constants)))", "memset(&guard->dummy, 0, sizeof (*(&guard->dummy)))", "memset(&guard->in_get, 0, sizeof (*(&guard->in_get)))", "memset(&guard->in_isset, 0, sizeof (*(&guard->in_isset)))", "memset(&guard->in_set, 0, sizeof (*(&guard->in_set)))", "memset(&guard->in_unset, 0, sizeof (*(&guard->in_unset)))", "memset(&property_info->ce, 0, sizeof (*(&property_info->ce)))", "memset(&property_info->doc_comment, 0, sizeof (*(&property_info->doc_comment)))", "memset(&property_info->doc_comment_len, 0, sizeof (*(&property_info->doc_comment_len)))", "memset(&property_info->flags, 0, sizeof (*(&property_info->flags)))", "memset(&property_info->h, 0, sizeof (*(&property_info->h)))", "memset(&property_info->name, 0, sizeof (*(&property_info->name)))", "memset(&property_info->name_length, 0, sizeof (*(&property_info->name_length)))", "memset(&property_info->offset, 0, sizeof (*(&property_info->offset)))", "memset(&zobj->ce, 0, sizeof (*(&zobj->ce)))", "memset(&zobj->ce->__call, 0, sizeof (*(&zobj->ce->__call)))", "memset(&zobj->ce->__callstatic, 0, sizeof (*(&zobj->ce->__callstatic)))", "memset(&zobj->ce->__get, 0, sizeof (*(&zobj->ce->__get)))", "memset(&zobj->ce->__isset, 0, sizeof (*(&zobj->ce->__isset)))", "memset(&zobj->ce->__set, 0, sizeof (*(&zobj->ce->__set)))", "memset(&zobj->ce->__tostring, 0, sizeof (*(&zobj->ce->__tostring)))", "memset(&zobj->ce->__unset, 0, sizeof (*(&zobj->ce->__unset)))", "memset(&zobj->ce->ce_flags, 0, sizeof (*(&zobj->ce->ce_flags)))", "memset(&zobj->ce->clone, 0, sizeof (*(&zobj->ce->clone)))", "memset(&zobj->ce->constants_table, 0, sizeof (*(&zobj->ce->constants_table)))", "memset(&zobj->ce->constructor, 0, sizeof (*(&zobj->ce->constructor)))", "memset(&zobj->ce->create_object, 0, sizeof (*(&zobj->ce->create_object)))", "memset(&zobj->ce->default_properties_count, 0, sizeof (*(&zobj->ce->default_properties_count)))", "memset(&zobj->ce->default_properties_table, 0, sizeof (*(&zobj->ce->default_properties_table)))", "memset(&zobj->ce->default_static_members_count, 0, sizeof (*(&zobj->ce->default_static_members_count)))", "memset(&zobj->ce->default_static_members_table, 0, sizeof (*(&zobj->ce->default_static_members_table)))", "memset(&zobj->ce->destructor, 0, sizeof (*(&zobj->ce->destructor)))", "memset(&zobj->ce->function_table, 0, sizeof (*(&zobj->ce->function_table)))", "memset(&zobj->ce->get_iterator, 0, sizeof (*(&zobj->ce->get_iterator)))", "memset(&zobj->ce->get_static_method, 0, sizeof (*(&zobj->ce->get_static_method)))", "memset(&zobj->ce->info, 0, sizeof (*(&zobj->ce->info)))", "memset(&zobj->ce->interface_gets_implemented, 0, sizeof (*(&zobj->ce->interface_gets_implemented)))", "memset(&zobj->ce->interfaces, 0, sizeof (*(&zobj->ce->interfaces)))", "memset(&zobj->ce->iterator_funcs, 0, sizeof (*(&zobj->ce->iterator_funcs)))", "memset(&zobj->ce->name, 0, sizeof (*(&zobj->ce->name)))", "memset(&zobj->ce->name_length, 0, sizeof (*(&zobj->ce->name_length)))", "memset(&zobj->ce->num_interfaces, 0, sizeof (*(&zobj->ce->num_interfaces)))", "memset(&zobj->ce->num_traits, 0, sizeof (*(&zobj->ce->num_traits)))", "memset(&zobj->ce->parent, 0, sizeof (*(&zobj->ce->parent)))", "memset(&zobj->ce->properties_info, 0, sizeof (*(&zobj->ce->properties_info)))", "memset(&zobj->ce->refcount, 0, sizeof (*(&zobj->ce->refcount)))", "memset(&zobj->ce->serialize, 0, sizeof (*(&zobj->ce->serialize)))", "memset(&zobj->ce->serialize_func, 0, sizeof (*(&zobj->ce->serialize_func)))", "memset(&zobj->ce->static_members_table, 0, sizeof (*(&zobj->ce->static_members_table)))", "memset(&zobj->ce->trait_aliases, 0, sizeof (*(&zobj->ce->trait_aliases)))", "memset(&zobj->ce->trait_precedences, 0, sizeof (*(&zobj->ce->trait_precedences)))", "memset(&zobj->ce->traits, 0, sizeof (*(&zobj->ce->traits)))", "memset(&zobj->ce->type, 0, sizeof (*(&zobj->ce->type)))", "memset(&zobj->ce->unserialize, 0, sizeof (*(&zobj->ce->unserialize)))", "memset(&zobj->ce->unserialize_func, 0, sizeof (*(&zobj->ce->unserialize_func)))", "memset(&zobj->guards, 0, sizeof (*(&zobj->guards)))", "memset(&zobj->properties, 0, sizeof (*(&zobj->properties)))", "memset(&zobj->properties_table, 0, sizeof (*(&zobj->properties_table)))", "memset((*object).value.ht, 0, sizeof (*((*object).value.ht)))", "memset((*object).value.obj.handlers, 0, sizeof (*((*object).value.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets, 0, sizeof (*((executor_globals.objects_store).object_buckets)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.buffered)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.clone)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.dtor)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.free_storage)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.handlers)))", "memset((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object, 0, sizeof (*((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object)))", "memset(executor_globals.This, 0, sizeof (*(executor_globals.This)))", "memset(executor_globals.active_op_array, 0, sizeof (*(executor_globals.active_op_array)))", "memset(executor_globals.active_symbol_table, 0, sizeof (*(executor_globals.active_symbol_table)))", "memset(executor_globals.argument_stack, 0, sizeof (*(executor_globals.argument_stack)))", "memset(executor_globals.autoload_func, 0, sizeof (*(executor_globals.autoload_func)))", "memset(executor_globals.bailout, 0, sizeof (*(executor_globals.bailout)))", "memset(executor_globals.called_scope, 0, sizeof (*(executor_globals.called_scope)))", "memset(executor_globals.class_table, 0, sizeof (*(executor_globals.class_table)))", "memset(executor_globals.current_execute_data, 0, sizeof (*(executor_globals.current_execute_data)))", "memset(executor_globals.current_module, 0, sizeof (*(executor_globals.current_module)))", "memset(executor_globals.error_reporting_ini_entry, 0, sizeof (*(executor_globals.error_reporting_ini_entry)))", "memset(executor_globals.error_zval_ptr, 0, sizeof (*(executor_globals.error_zval_ptr)))", "memset(executor_globals.exception, 0, sizeof (*(executor_globals.exception)))", "memset(executor_globals.exception_class, 0, sizeof (*(executor_globals.exception_class)))", "memset(executor_globals.function_table, 0, sizeof (*(executor_globals.function_table)))", "memset(executor_globals.in_autoload, 0, sizeof (*(executor_globals.in_autoload)))", "memset(executor_globals.ini_directives, 0, sizeof (*(executor_globals.ini_directives)))", "memset(executor_globals.modified_ini_directives, 0, sizeof (*(executor_globals.modified_ini_directives)))", "memset(executor_globals.opline_before_exception, 0, sizeof (*(executor_globals.opline_before_exception)))", "memset(executor_globals.opline_ptr, 0, sizeof (*(executor_globals.opline_ptr)))", "memset(executor_globals.prev_exception, 0, sizeof (*(executor_globals.prev_exception)))", "memset(executor_globals.return_value_ptr_ptr, 0, sizeof (*(executor_globals.return_value_ptr_ptr)))", "memset(executor_globals.saved_fpu_cw_ptr, 0, sizeof (*(executor_globals.saved_fpu_cw_ptr)))", "memset(executor_globals.scope, 0, sizeof (*(executor_globals.scope)))", "memset(executor_globals.start_op, 0, sizeof (*(executor_globals.start_op)))", "memset(executor_globals.symtable_cache_limit, 0, sizeof (*(executor_globals.symtable_cache_limit)))", "memset(executor_globals.symtable_cache_ptr, 0, sizeof (*(executor_globals.symtable_cache_ptr)))", "memset(executor_globals.uninitialized_zval_ptr, 0, sizeof (*(executor_globals.uninitialized_zval_ptr)))", "memset(executor_globals.user_error_handler, 0, sizeof (*(executor_globals.user_error_handler)))", "memset(executor_globals.user_exception_handler, 0, sizeof (*(executor_globals.user_exception_handler)))", "memset(executor_globals.zend_constants, 0, sizeof (*(executor_globals.zend_constants)))", "memset(guard, 0, sizeof (*(guard)))", "memset(property_info, 0, sizeof (*(property_info)))", "memset(property_info->ce, 0, sizeof (*(property_info->ce)))", "memset(property_info->doc_comment, 0, sizeof (*(property_info->doc_comment)))", "memset(property_info->name, 0, sizeof (*(property_info->name)))", "memset(zobj, 0, sizeof (*(zobj)))", "memset(zobj->ce, 0, sizeof (*(zobj->ce)))", "memset(zobj->ce->__call, 0, sizeof (*(zobj->ce->__call)))", "memset(zobj->ce->__callstatic, 0, sizeof (*(zobj->ce->__callstatic)))", "memset(zobj->ce->__get, 0, sizeof (*(zobj->ce->__get)))", "memset(zobj->ce->__isset, 0, sizeof (*(zobj->ce->__isset)))", "memset(zobj->ce->__set, 0, sizeof (*(zobj->ce->__set)))", "memset(zobj->ce->__tostring, 0, sizeof (*(zobj->ce->__tostring)))", "memset(zobj->ce->__unset, 0, sizeof (*(zobj->ce->__unset)))", "memset(zobj->ce->clone, 0, sizeof (*(zobj->ce->clone)))", "memset(zobj->ce->constructor, 0, sizeof (*(zobj->ce->constructor)))", "memset(zobj->ce->create_object, 0, sizeof (*(zobj->ce->create_object)))", "memset(zobj->ce->default_properties_table, 0, sizeof (*(zobj->ce->default_properties_table)))", "memset(zobj->ce->default_static_members_table, 0, sizeof (*(zobj->ce->default_static_members_table)))", "memset(zobj->ce->destructor, 0, sizeof (*(zobj->ce->destructor)))", "memset(zobj->ce->get_iterator, 0, sizeof (*(zobj->ce->get_iterator)))", "memset(zobj->ce->get_static_method, 0, sizeof (*(zobj->ce->get_static_method)))", "memset(zobj->ce->interface_gets_implemented, 0, sizeof (*(zobj->ce->interface_gets_implemented)))", "memset(zobj->ce->interfaces, 0, sizeof (*(zobj->ce->interfaces)))", "memset(zobj->ce->name, 0, sizeof (*(zobj->ce->name)))", "memset(zobj->ce->parent, 0, sizeof (*(zobj->ce->parent)))", "memset(zobj->ce->serialize, 0, sizeof (*(zobj->ce->serialize)))", "memset(zobj->ce->serialize_func, 0, sizeof (*(zobj->ce->serialize_func)))", "memset(zobj->ce->static_members_table, 0, sizeof (*(zobj->ce->static_members_table)))", "memset(zobj->ce->trait_aliases, 0, sizeof (*(zobj->ce->trait_aliases)))", "memset(zobj->ce->trait_precedences, 0, sizeof (*(zobj->ce->trait_precedences)))", "memset(zobj->ce->traits, 0, sizeof (*(zobj->ce->traits)))", "memset(zobj->ce->unserialize, 0, sizeof (*(zobj->ce->unserialize)))", "memset(zobj->ce->unserialize_func, 0, sizeof (*(zobj->ce->unserialize_func)))", "memset(zobj->guards, 0, sizeof (*(zobj->guards)))", "memset(zobj->properties, 0, sizeof (*(zobj->properties)))", "memset(zobj->properties_table, 0, sizeof (*(zobj->properties_table)))", "(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "guard->in_get = (-1)", "guard->in_get = (0)", "guard->in_get = (1)", "guard->in_get = (2)", "guard->in_get = (3)", "guard->in_get = (5)", "guard->in_get = (6)", "guard->in_get = (8)", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "guard->in_get = 0", "guard->in_get = 1", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)", "if (__is_neg(\"\", \"L418\", 63, &(zobj), sizeof (zobj), &(zobj->ce), sizeof (zobj->ce), &(zobj->ce->__get), sizeof (zobj->ce->__get), &(member), sizeof (member), &(property_info), sizeof (property_info), &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(retval), sizeof (retval), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties), sizeof (zobj->properties), &(object), sizeof (object), &(property_info->offset), sizeof (property_info->offset), &(zobj->properties_table), sizeof (zobj->properties_table), &(rv), sizeof (rv), &(property_info->flags), sizeof (property_info->flags), &(key), sizeof (key), &(type), sizeof (type), &(tmp_member), sizeof (tmp_member), &(zobj->ce->name), sizeof (zobj->ce->name), &(silent), sizeof (silent), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce), &(zobj->guards), sizeof (zobj->guards), &(zobj->ce->type), sizeof (zobj->ce->type), &(zobj->ce->name_length), sizeof (zobj->ce->name_length), &(zobj->ce->parent), sizeof (zobj->ce->parent), &(zobj->ce->refcount), sizeof (zobj->ce->refcount), &(zobj->ce->ce_flags), sizeof (zobj->ce->ce_flags), &(zobj->ce->default_properties_table), sizeof (zobj->ce->default_properties_table), &(zobj->ce->default_static_members_table), sizeof (zobj->ce->default_static_members_table), &(zobj->ce->static_members_table), sizeof (zobj->ce->static_members_table), &(zobj->ce->default_properties_count), sizeof (zobj->ce->default_properties_count), &(zobj->ce->default_static_members_count), sizeof (zobj->ce->default_static_members_count), &(zobj->ce->constructor), sizeof (zobj->ce->constructor), &(zobj->ce->destructor), sizeof (zobj->ce->destructor), &(zobj->ce->clone), sizeof (zobj->ce->clone), &(zobj->ce->__set), sizeof (zobj->ce->__set), &(zobj->ce->__unset), sizeof (zobj->ce->__unset), &(zobj->ce->__isset), sizeof (zobj->ce->__isset), &(zobj->ce->__call), sizeof (zobj->ce->__call), &(zobj->ce->__callstatic), sizeof (zobj->ce->__callstatic), &(zobj->ce->__tostring), sizeof (zobj->ce->__tostring), &(zobj->ce->serialize_func), sizeof (zobj->ce->serialize_func), &(zobj->ce->unserialize_func), sizeof (zobj->ce->unserialize_func), &(zobj->ce->create_object), sizeof (zobj->ce->create_object), &(zobj->ce->get_iterator), sizeof (zobj->ce->get_iterator), &(zobj->ce->interface_gets_implemented), sizeof (zobj->ce->interface_gets_implemented), &(zobj->ce->get_static_method), sizeof (zobj->ce->get_static_method), &(zobj->ce->serialize), sizeof (zobj->ce->serialize), &(zobj->ce->unserialize), sizeof (zobj->ce->unserialize), &(zobj->ce->interfaces), sizeof (zobj->ce->interfaces), &(zobj->ce->num_interfaces), sizeof (zobj->ce->num_interfaces), &(zobj->ce->traits), sizeof (zobj->ce->traits), &(zobj->ce->num_traits), sizeof (zobj->ce->num_traits), &(zobj->ce->trait_aliases), sizeof (zobj->ce->trait_aliases), &(zobj->ce->trait_precedences), sizeof (zobj->ce->trait_precedences), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)))\n    return 0;\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.87175363966196]
								}, {
									"case":	2,
									"scores":	[-7.87175363966196]
								}, {
									"case":	3,
									"scores":	[-7.87175363966196]
								}, {
									"case":	4,
									"scores":	[-7.87175363966196]
								}, {
									"case":	5,
									"scores":	[-7.87175363966196]
								}, {
									"case":	6,
									"scores":	[-7.87175363966196]
								}, {
									"case":	7,
									"scores":	[-7.87175363966196]
								}, {
									"case":	8,
									"scores":	[-7.87175363966196]
								}, {
									"case":	9,
									"scores":	[-7.87175363966196]
								}, {
									"case":	10,
									"scores":	[-7.87175363966196]
								}, {
									"case":	11,
									"scores":	[-7.87175363966196]
								}, {
									"case":	12,
									"scores":	[-7.87175363966196]
								}, {
									"case":	13,
									"scores":	[-7.87175363966196]
								}, {
									"case":	14,
									"scores":	[-7.87175363966196]
								}, {
									"case":	15,
									"scores":	[-7.87175363966196]
								}, {
									"case":	16,
									"scores":	[-7.87175363966196]
								}, {
									"case":	17,
									"scores":	[-7.87175363966196]
								}, {
									"case":	18,
									"scores":	[-7.87175363966196]
								}, {
									"case":	19,
									"scores":	[-7.87175363966196]
								}, {
									"case":	20,
									"scores":	[-7.87175363966196]
								}, {
									"case":	21,
									"scores":	[-7.87175363966196]
								}, {
									"case":	22,
									"scores":	[-7.87175363966196]
								}, {
									"case":	23,
									"scores":	[-7.87175363966196]
								}, {
									"case":	24,
									"scores":	[-7.87175363966196]
								}, {
									"case":	25,
									"scores":	[-7.87175363966196]
								}, {
									"case":	26,
									"scores":	[-7.87175363966196]
								}, {
									"case":	27,
									"scores":	[-7.87175363966196]
								}, {
									"case":	28,
									"scores":	[-7.87175363966196]
								}, {
									"case":	29,
									"scores":	[-7.87175363966196]
								}, {
									"case":	30,
									"scores":	[-7.87175363966196]
								}, {
									"case":	31,
									"scores":	[-7.87175363966196]
								}, {
									"case":	32,
									"scores":	[-7.87175363966196]
								}, {
									"case":	33,
									"scores":	[-7.87175363966196]
								}, {
									"case":	34,
									"scores":	[-7.87175363966196]
								}, {
									"case":	35,
									"scores":	[-7.87175363966196]
								}, {
									"case":	36,
									"scores":	[-7.87175363966196]
								}, {
									"case":	37,
									"scores":	[-7.87175363966196]
								}, {
									"case":	38,
									"scores":	[-7.87175363966196]
								}, {
									"case":	39,
									"scores":	[-7.87175363966196]
								}, {
									"case":	40,
									"scores":	[-7.87175363966196]
								}, {
									"case":	41,
									"scores":	[-7.87175363966196]
								}, {
									"case":	42,
									"scores":	[-7.87175363966196]
								}, {
									"case":	43,
									"scores":	[-7.87175363966196]
								}, {
									"case":	44,
									"scores":	[-7.87175363966196]
								}, {
									"case":	45,
									"scores":	[-7.87175363966196]
								}, {
									"case":	46,
									"scores":	[-7.87175363966196]
								}, {
									"case":	47,
									"scores":	[-7.87175363966196]
								}, {
									"case":	48,
									"scores":	[-7.87175363966196]
								}, {
									"case":	49,
									"scores":	[-7.87175363966196]
								}, {
									"case":	50,
									"scores":	[-7.87175363966196]
								}, {
									"case":	51,
									"scores":	[-7.87175363966196]
								}, {
									"case":	52,
									"scores":	[-7.87175363966196]
								}, {
									"case":	53,
									"scores":	[-7.87175363966196]
								}, {
									"case":	54,
									"scores":	[-7.87175363966196]
								}, {
									"case":	55,
									"scores":	[-7.87175363966196]
								}, {
									"case":	56,
									"scores":	[-7.87175363966196]
								}, {
									"case":	57,
									"scores":	[-7.87175363966196]
								}, {
									"case":	58,
									"scores":	[-7.87175363966196]
								}, {
									"case":	59,
									"scores":	[-7.87175363966196]
								}, {
									"case":	60,
									"scores":	[-7.87175363966196]
								}, {
									"case":	61,
									"scores":	[-7.87175363966196]
								}, {
									"case":	62,
									"scores":	[-7.87175363966196]
								}, {
									"case":	63,
									"scores":	[-7.87175363966196]
								}, {
									"case":	64,
									"scores":	[-7.87175363966196]
								}, {
									"case":	65,
									"scores":	[-7.87175363966196]
								}, {
									"case":	66,
									"scores":	[-7.87175363966196]
								}, {
									"case":	67,
									"scores":	[-7.87175363966196]
								}, {
									"case":	68,
									"scores":	[-7.87175363966196]
								}, {
									"case":	69,
									"scores":	[-7.87175363966196]
								}, {
									"case":	70,
									"scores":	[-7.87175363966196]
								}, {
									"case":	71,
									"scores":	[-7.87175363966196]
								}, {
									"case":	72,
									"scores":	[-7.87175363966196]
								}, {
									"case":	73,
									"scores":	[-7.87175363966196]
								}, {
									"case":	74,
									"scores":	[-7.87175363966196]
								}, {
									"case":	75,
									"scores":	[-7.87175363966196]
								}, {
									"case":	76,
									"scores":	[-7.87175363966196]
								}, {
									"case":	77,
									"scores":	[-7.87175363966196]
								}, {
									"case":	78,
									"scores":	[-7.87175363966196]
								}, {
									"case":	79,
									"scores":	[-7.87175363966196]
								}, {
									"case":	80,
									"scores":	[-7.87175363966196]
								}, {
									"case":	81,
									"scores":	[-7.87175363966196]
								}, {
									"case":	82,
									"scores":	[-7.87175363966196]
								}, {
									"case":	83,
									"scores":	[-7.87175363966196]
								}, {
									"case":	84,
									"scores":	[-7.87175363966196]
								}, {
									"case":	85,
									"scores":	[-7.87175363966196]
								}, {
									"case":	86,
									"scores":	[-7.87175363966196]
								}, {
									"case":	87,
									"scores":	[-7.87175363966196]
								}, {
									"case":	88,
									"scores":	[-7.87175363966196]
								}, {
									"case":	89,
									"scores":	[-7.87175363966196]
								}, {
									"case":	90,
									"scores":	[-7.87175363966196]
								}, {
									"case":	91,
									"scores":	[-7.87175363966196]
								}, {
									"case":	92,
									"scores":	[-7.87175363966196]
								}, {
									"case":	93,
									"scores":	[-7.87175363966196]
								}, {
									"case":	94,
									"scores":	[-7.87175363966196]
								}, {
									"case":	95,
									"scores":	[-7.87175363966196]
								}, {
									"case":	96,
									"scores":	[-7.87175363966196]
								}, {
									"case":	97,
									"scores":	[-7.87175363966196]
								}, {
									"case":	98,
									"scores":	[-7.87175363966196]
								}, {
									"case":	99,
									"scores":	[-7.87175363966196]
								}, {
									"case":	100,
									"scores":	[-7.87175363966196]
								}, {
									"case":	101,
									"scores":	[-7.87175363966196]
								}, {
									"case":	102,
									"scores":	[-7.87175363966196]
								}, {
									"case":	103,
									"scores":	[-7.87175363966196]
								}, {
									"case":	104,
									"scores":	[-7.87175363966196]
								}, {
									"case":	105,
									"scores":	[-7.87175363966196]
								}, {
									"case":	106,
									"scores":	[-7.87175363966196]
								}, {
									"case":	107,
									"scores":	[-7.87175363966196]
								}, {
									"case":	108,
									"scores":	[-7.87175363966196]
								}, {
									"case":	109,
									"scores":	[-7.87175363966196]
								}, {
									"case":	110,
									"scores":	[-7.87175363966196]
								}, {
									"case":	111,
									"scores":	[-7.87175363966196]
								}, {
									"case":	112,
									"scores":	[-7.87175363966196]
								}, {
									"case":	113,
									"scores":	[-7.87175363966196]
								}, {
									"case":	114,
									"scores":	[-7.87175363966196]
								}, {
									"case":	115,
									"scores":	[-7.87175363966196]
								}, {
									"case":	116,
									"scores":	[-7.87175363966196]
								}, {
									"case":	117,
									"scores":	[-7.87175363966196]
								}, {
									"case":	118,
									"scores":	[-7.87175363966196]
								}, {
									"case":	119,
									"scores":	[-7.87175363966196]
								}, {
									"case":	120,
									"scores":	[-7.87175363966196]
								}, {
									"case":	121,
									"scores":	[-7.87175363966196]
								}, {
									"case":	122,
									"scores":	[-7.87175363966196]
								}, {
									"case":	123,
									"scores":	[-7.87175363966196]
								}, {
									"case":	124,
									"scores":	[-7.87175363966196]
								}, {
									"case":	125,
									"scores":	[-7.87175363966196]
								}, {
									"case":	126,
									"scores":	[-7.87175363966196]
								}, {
									"case":	127,
									"scores":	[-7.87175363966196]
								}, {
									"case":	128,
									"scores":	[-7.87175363966196]
								}, {
									"case":	129,
									"scores":	[-7.87175363966196]
								}, {
									"case":	130,
									"scores":	[-7.87175363966196]
								}, {
									"case":	131,
									"scores":	[-7.87175363966196]
								}, {
									"case":	132,
									"scores":	[-7.87175363966196]
								}, {
									"case":	133,
									"scores":	[-7.87175363966196]
								}, {
									"case":	134,
									"scores":	[-7.87175363966196]
								}, {
									"case":	135,
									"scores":	[-7.87175363966196]
								}, {
									"case":	136,
									"scores":	[-7.87175363966196]
								}, {
									"case":	137,
									"scores":	[-7.87175363966196]
								}, {
									"case":	138,
									"scores":	[-7.87175363966196]
								}, {
									"case":	139,
									"scores":	[-7.87175363966196]
								}, {
									"case":	140,
									"scores":	[-7.87175363966196]
								}, {
									"case":	141,
									"scores":	[-7.87175363966196]
								}, {
									"case":	142,
									"scores":	[-7.87175363966196]
								}, {
									"case":	143,
									"scores":	[-7.87175363966196]
								}, {
									"case":	144,
									"scores":	[-7.87175363966196]
								}, {
									"case":	145,
									"scores":	[-7.87175363966196]
								}, {
									"case":	146,
									"scores":	[-7.87175363966196]
								}, {
									"case":	147,
									"scores":	[-7.87175363966196]
								}, {
									"case":	148,
									"scores":	[-7.87175363966196]
								}, {
									"case":	149,
									"scores":	[-7.87175363966196]
								}, {
									"case":	150,
									"scores":	[-7.87175363966196]
								}, {
									"case":	151,
									"scores":	[-7.87175363966196]
								}, {
									"case":	152,
									"scores":	[-7.87175363966196]
								}, {
									"case":	153,
									"scores":	[-7.87175363966196]
								}, {
									"case":	154,
									"scores":	[-7.87175363966196]
								}, {
									"case":	155,
									"scores":	[-7.87175363966196]
								}, {
									"case":	156,
									"scores":	[-7.87175363966196]
								}, {
									"case":	157,
									"scores":	[-7.87175363966196]
								}, {
									"case":	158,
									"scores":	[-7.87175363966196]
								}, {
									"case":	159,
									"scores":	[-7.87175363966196]
								}, {
									"case":	160,
									"scores":	[-7.87175363966196]
								}, {
									"case":	161,
									"scores":	[-7.87175363966196]
								}, {
									"case":	162,
									"scores":	[-7.87175363966196]
								}, {
									"case":	163,
									"scores":	[-7.87175363966196]
								}, {
									"case":	164,
									"scores":	[-7.87175363966196]
								}, {
									"case":	165,
									"scores":	[-7.87175363966196]
								}, {
									"case":	166,
									"scores":	[-7.87175363966196]
								}, {
									"case":	167,
									"scores":	[-7.87175363966196]
								}, {
									"case":	168,
									"scores":	[-7.87175363966196]
								}, {
									"case":	169,
									"scores":	[-7.87175363966196]
								}, {
									"case":	170,
									"scores":	[-7.87175363966196]
								}, {
									"case":	171,
									"scores":	[-7.87175363966196]
								}, {
									"case":	172,
									"scores":	[-7.87175363966196]
								}, {
									"case":	173,
									"scores":	[-7.87175363966196]
								}, {
									"case":	174,
									"scores":	[-7.87175363966196]
								}, {
									"case":	175,
									"scores":	[-7.87175363966196]
								}, {
									"case":	176,
									"scores":	[-7.87175363966196]
								}, {
									"case":	177,
									"scores":	[-7.87175363966196]
								}, {
									"case":	178,
									"scores":	[-7.87175363966196]
								}, {
									"case":	179,
									"scores":	[-7.87175363966196]
								}, {
									"case":	180,
									"scores":	[-7.87175363966196]
								}, {
									"case":	181,
									"scores":	[-7.87175363966196]
								}, {
									"case":	182,
									"scores":	[-7.87175363966196]
								}, {
									"case":	183,
									"scores":	[-7.87175363966196]
								}, {
									"case":	184,
									"scores":	[-7.87175363966196]
								}, {
									"case":	185,
									"scores":	[-7.87175363966196]
								}, {
									"case":	186,
									"scores":	[-7.87175363966196]
								}, {
									"case":	187,
									"scores":	[-7.87175363966196]
								}, {
									"case":	188,
									"scores":	[-7.87175363966196]
								}, {
									"case":	189,
									"scores":	[-7.87175363966196]
								}, {
									"case":	190,
									"scores":	[-7.87175363966196]
								}, {
									"case":	191,
									"scores":	[-7.87175363966196]
								}, {
									"case":	192,
									"scores":	[-7.87175363966196]
								}, {
									"case":	193,
									"scores":	[-7.87175363966196]
								}, {
									"case":	194,
									"scores":	[-7.87175363966196]
								}, {
									"case":	195,
									"scores":	[-7.87175363966196]
								}, {
									"case":	196,
									"scores":	[-7.87175363966196]
								}, {
									"case":	197,
									"scores":	[-7.87175363966196]
								}, {
									"case":	198,
									"scores":	[-7.87175363966196]
								}, {
									"case":	199,
									"scores":	[-7.87175363966196]
								}, {
									"case":	200,
									"scores":	[-7.87175363966196]
								}, {
									"case":	201,
									"scores":	[-7.87175363966196]
								}, {
									"case":	202,
									"scores":	[-7.87175363966196]
								}, {
									"case":	203,
									"scores":	[-7.87175363966196]
								}, {
									"case":	204,
									"scores":	[-7.87175363966196]
								}, {
									"case":	205,
									"scores":	[-7.87175363966196]
								}, {
									"case":	206,
									"scores":	[-7.87175363966196]
								}, {
									"case":	207,
									"scores":	[-7.87175363966196]
								}, {
									"case":	208,
									"scores":	[-7.87175363966196]
								}, {
									"case":	209,
									"scores":	[-7.87175363966196]
								}, {
									"case":	210,
									"scores":	[-7.87175363966196]
								}, {
									"case":	211,
									"scores":	[-7.87175363966196]
								}, {
									"case":	212,
									"scores":	[-7.87175363966196]
								}, {
									"case":	213,
									"scores":	[-7.87175363966196]
								}, {
									"case":	214,
									"scores":	[-7.87175363966196]
								}, {
									"case":	215,
									"scores":	[-7.87175363966196]
								}, {
									"case":	216,
									"scores":	[-7.87175363966196]
								}, {
									"case":	217,
									"scores":	[-7.87175363966196]
								}, {
									"case":	218,
									"scores":	[-7.87175363966196]
								}, {
									"case":	219,
									"scores":	[-7.87175363966196]
								}, {
									"case":	220,
									"scores":	[-7.87175363966196]
								}, {
									"case":	221,
									"scores":	[-7.87175363966196]
								}, {
									"case":	222,
									"scores":	[-7.87175363966196]
								}, {
									"case":	223,
									"scores":	[-7.87175363966196]
								}, {
									"case":	224,
									"scores":	[-7.87175363966196]
								}, {
									"case":	225,
									"scores":	[-7.87175363966196]
								}, {
									"case":	226,
									"scores":	[-7.87175363966196]
								}, {
									"case":	227,
									"scores":	[-7.87175363966196]
								}, {
									"case":	228,
									"scores":	[-7.87175363966196]
								}, {
									"case":	229,
									"scores":	[-7.87175363966196]
								}, {
									"case":	230,
									"scores":	[-7.87175363966196]
								}, {
									"case":	231,
									"scores":	[-7.87175363966196]
								}, {
									"case":	232,
									"scores":	[-7.87175363966196]
								}, {
									"case":	233,
									"scores":	[-7.87175363966196]
								}, {
									"case":	234,
									"scores":	[-7.87175363966196]
								}, {
									"case":	235,
									"scores":	[-7.87175363966196]
								}, {
									"case":	236,
									"scores":	[-7.87175363966196]
								}, {
									"case":	237,
									"scores":	[-7.87175363966196]
								}, {
									"case":	238,
									"scores":	[-7.87175363966196]
								}, {
									"case":	239,
									"scores":	[-7.87175363966196]
								}, {
									"case":	240,
									"scores":	[-7.87175363966196]
								}, {
									"case":	241,
									"scores":	[-7.87175363966196]
								}, {
									"case":	242,
									"scores":	[-7.87175363966196]
								}, {
									"case":	243,
									"scores":	[-7.87175363966196]
								}, {
									"case":	244,
									"scores":	[-7.87175363966196]
								}, {
									"case":	245,
									"scores":	[-7.87175363966196]
								}, {
									"case":	246,
									"scores":	[-7.87175363966196]
								}, {
									"case":	247,
									"scores":	[-7.87175363966196]
								}, {
									"case":	248,
									"scores":	[-7.87175363966196]
								}, {
									"case":	249,
									"scores":	[-7.87175363966196]
								}, {
									"case":	250,
									"scores":	[-7.87175363966196]
								}, {
									"case":	251,
									"scores":	[-7.87175363966196]
								}, {
									"case":	252,
									"scores":	[-7.87175363966196]
								}, {
									"case":	253,
									"scores":	[-7.87175363966196]
								}, {
									"case":	254,
									"scores":	[-7.87175363966196]
								}, {
									"case":	255,
									"scores":	[-7.87175363966196]
								}, {
									"case":	256,
									"scores":	[-7.87175363966196]
								}, {
									"case":	257,
									"scores":	[-7.87175363966196]
								}, {
									"case":	258,
									"scores":	[-7.87175363966196]
								}, {
									"case":	259,
									"scores":	[-7.87175363966196]
								}, {
									"case":	260,
									"scores":	[-7.87175363966196]
								}, {
									"case":	261,
									"scores":	[-7.87175363966196]
								}, {
									"case":	262,
									"scores":	[-7.87175363966196]
								}, {
									"case":	263,
									"scores":	[-7.87175363966196]
								}, {
									"case":	264,
									"scores":	[-7.87175363966196]
								}, {
									"case":	265,
									"scores":	[-7.87175363966196]
								}, {
									"case":	266,
									"scores":	[-7.87175363966196]
								}, {
									"case":	267,
									"scores":	[-7.87175363966196]
								}, {
									"case":	268,
									"scores":	[-7.87175363966196]
								}, {
									"case":	269,
									"scores":	[-7.87175363966196]
								}, {
									"case":	270,
									"scores":	[-7.87175363966196]
								}, {
									"case":	271,
									"scores":	[-7.87175363966196]
								}, {
									"case":	272,
									"scores":	[-7.87175363966196]
								}, {
									"case":	273,
									"scores":	[-7.87175363966196]
								}, {
									"case":	274,
									"scores":	[-7.87175363966196]
								}, {
									"case":	275,
									"scores":	[-7.87175363966196]
								}, {
									"case":	276,
									"scores":	[-7.87175363966196]
								}, {
									"case":	277,
									"scores":	[-7.87175363966196]
								}, {
									"case":	278,
									"scores":	[-7.87175363966196]
								}, {
									"case":	279,
									"scores":	[-7.87175363966196]
								}, {
									"case":	280,
									"scores":	[-7.87175363966196]
								}, {
									"case":	281,
									"scores":	[-7.87175363966196]
								}, {
									"case":	282,
									"scores":	[-7.87175363966196]
								}, {
									"case":	283,
									"scores":	[-7.87175363966196]
								}, {
									"case":	284,
									"scores":	[-7.87175363966196]
								}, {
									"case":	285,
									"scores":	[-7.87175363966196]
								}, {
									"case":	286,
									"scores":	[-7.87175363966196]
								}, {
									"case":	287,
									"scores":	[-7.87175363966196]
								}, {
									"case":	288,
									"scores":	[-7.87175363966196]
								}, {
									"case":	289,
									"scores":	[-7.87175363966196]
								}, {
									"case":	290,
									"scores":	[-7.87175363966196]
								}, {
									"case":	291,
									"scores":	[-7.87175363966196]
								}, {
									"case":	292,
									"scores":	[-7.87175363966196]
								}, {
									"case":	293,
									"scores":	[-7.87175363966196]
								}, {
									"case":	294,
									"scores":	[-7.87175363966196]
								}, {
									"case":	295,
									"scores":	[-7.87175363966196]
								}, {
									"case":	296,
									"scores":	[-7.87175363966196]
								}, {
									"case":	297,
									"scores":	[-7.87175363966196]
								}, {
									"case":	298,
									"scores":	[-7.87175363966196]
								}, {
									"case":	299,
									"scores":	[-7.87175363966196]
								}, {
									"case":	300,
									"scores":	[-7.87175363966196]
								}, {
									"case":	301,
									"scores":	[-7.87175363966196]
								}, {
									"case":	302,
									"scores":	[-7.87175363966196]
								}, {
									"case":	303,
									"scores":	[-7.87175363966196]
								}, {
									"case":	304,
									"scores":	[-7.87175363966196]
								}, {
									"case":	305,
									"scores":	[-7.87175363966196]
								}, {
									"case":	306,
									"scores":	[-7.87175363966196]
								}, {
									"case":	307,
									"scores":	[-7.87175363966196]
								}, {
									"case":	308,
									"scores":	[-7.87175363966196]
								}, {
									"case":	309,
									"scores":	[-7.87175363966196]
								}, {
									"case":	310,
									"scores":	[-7.87175363966196]
								}, {
									"case":	311,
									"scores":	[-7.87175363966196]
								}, {
									"case":	312,
									"scores":	[-7.87175363966196]
								}, {
									"case":	313,
									"scores":	[-7.87175363966196]
								}, {
									"case":	314,
									"scores":	[-7.87175363966196]
								}, {
									"case":	315,
									"scores":	[-7.87175363966196]
								}, {
									"case":	316,
									"scores":	[-7.87175363966196]
								}, {
									"case":	317,
									"scores":	[-7.87175363966196]
								}, {
									"case":	318,
									"scores":	[-7.87175363966196]
								}, {
									"case":	319,
									"scores":	[-7.87175363966196]
								}, {
									"case":	320,
									"scores":	[-7.87175363966196]
								}, {
									"case":	321,
									"scores":	[-7.87175363966196]
								}, {
									"case":	322,
									"scores":	[-7.87175363966196]
								}, {
									"case":	323,
									"scores":	[-7.87175363966196]
								}, {
									"case":	324,
									"scores":	[-7.87175363966196]
								}, {
									"case":	325,
									"scores":	[-7.87175363966196]
								}, {
									"case":	326,
									"scores":	[-7.87175363966196]
								}, {
									"case":	327,
									"scores":	[-7.87175363966196]
								}, {
									"case":	328,
									"scores":	[-7.87175363966196]
								}, {
									"case":	329,
									"scores":	[-7.87175363966196]
								}, {
									"case":	330,
									"scores":	[-7.87175363966196]
								}, {
									"case":	331,
									"scores":	[-7.87175363966196]
								}, {
									"case":	332,
									"scores":	[-7.87175363966196]
								}, {
									"case":	333,
									"scores":	[-7.87175363966196]
								}, {
									"case":	334,
									"scores":	[-7.87175363966196]
								}, {
									"case":	335,
									"scores":	[-7.87175363966196]
								}, {
									"case":	336,
									"scores":	[-7.87175363966196]
								}, {
									"case":	337,
									"scores":	[-7.87175363966196]
								}, {
									"case":	338,
									"scores":	[-7.87175363966196]
								}, {
									"case":	339,
									"scores":	[-7.87175363966196]
								}, {
									"case":	340,
									"scores":	[-7.87175363966196]
								}, {
									"case":	341,
									"scores":	[-7.87175363966196]
								}, {
									"case":	342,
									"scores":	[-7.87175363966196]
								}, {
									"case":	343,
									"scores":	[-7.87175363966196]
								}, {
									"case":	344,
									"scores":	[-7.87175363966196]
								}, {
									"case":	345,
									"scores":	[-7.87175363966196]
								}, {
									"case":	346,
									"scores":	[-7.87175363966196]
								}, {
									"case":	347,
									"scores":	[-7.87175363966196]
								}, {
									"case":	348,
									"scores":	[-7.87175363966196]
								}, {
									"case":	349,
									"scores":	[-7.87175363966196]
								}, {
									"case":	350,
									"scores":	[-7.87175363966196]
								}, {
									"case":	351,
									"scores":	[-7.87175363966196]
								}, {
									"case":	352,
									"scores":	[-7.87175363966196]
								}, {
									"case":	353,
									"scores":	[-7.87175363966196]
								}, {
									"case":	354,
									"scores":	[-7.87175363966196]
								}, {
									"case":	355,
									"scores":	[-7.87175363966196]
								}, {
									"case":	356,
									"scores":	[-7.87175363966196]
								}, {
									"case":	357,
									"scores":	[-7.87175363966196]
								}, {
									"case":	358,
									"scores":	[-7.87175363966196]
								}, {
									"case":	359,
									"scores":	[-7.87175363966196]
								}, {
									"case":	360,
									"scores":	[-7.87175363966196]
								}, {
									"case":	361,
									"scores":	[-7.87175363966196]
								}, {
									"case":	362,
									"scores":	[-7.87175363966196]
								}, {
									"case":	363,
									"scores":	[-7.87175363966196]
								}, {
									"case":	364,
									"scores":	[-7.87175363966196]
								}, {
									"case":	365,
									"scores":	[-7.87175363966196]
								}, {
									"case":	366,
									"scores":	[-7.87175363966196]
								}, {
									"case":	367,
									"scores":	[-7.87175363966196]
								}, {
									"case":	368,
									"scores":	[-7.87175363966196]
								}, {
									"case":	369,
									"scores":	[-7.87175363966196]
								}, {
									"case":	370,
									"scores":	[-7.87175363966196]
								}, {
									"case":	371,
									"scores":	[-7.87175363966196]
								}, {
									"case":	372,
									"scores":	[-7.87175363966196]
								}, {
									"case":	373,
									"scores":	[-7.87175363966196]
								}, {
									"case":	374,
									"scores":	[-7.87175363966196]
								}, {
									"case":	375,
									"scores":	[-7.87175363966196]
								}, {
									"case":	376,
									"scores":	[-7.87175363966196]
								}, {
									"case":	377,
									"scores":	[-7.87175363966196]
								}, {
									"case":	378,
									"scores":	[-7.87175363966196]
								}, {
									"case":	379,
									"scores":	[-7.87175363966196]
								}, {
									"case":	380,
									"scores":	[-7.87175363966196]
								}, {
									"case":	381,
									"scores":	[-7.87175363966196]
								}, {
									"case":	382,
									"scores":	[-7.87175363966196]
								}, {
									"case":	383,
									"scores":	[-7.87175363966196]
								}, {
									"case":	384,
									"scores":	[-7.87175363966196]
								}, {
									"case":	385,
									"scores":	[-7.87175363966196]
								}, {
									"case":	386,
									"scores":	[-7.87175363966196]
								}, {
									"case":	387,
									"scores":	[-7.87175363966196]
								}, {
									"case":	388,
									"scores":	[-7.87175363966196]
								}, {
									"case":	389,
									"scores":	[-7.87175363966196]
								}, {
									"case":	390,
									"scores":	[-7.87175363966196]
								}, {
									"case":	391,
									"scores":	[-7.87175363966196]
								}, {
									"case":	392,
									"scores":	[-7.87175363966196]
								}, {
									"case":	393,
									"scores":	[-7.87175363966196]
								}, {
									"case":	394,
									"scores":	[-7.87175363966196]
								}, {
									"case":	395,
									"scores":	[-7.87175363966196]
								}, {
									"case":	396,
									"scores":	[-7.87175363966196]
								}, {
									"case":	397,
									"scores":	[-7.87175363966196]
								}, {
									"case":	398,
									"scores":	[-7.87175363966196]
								}, {
									"case":	399,
									"scores":	[-7.87175363966196]
								}, {
									"case":	400,
									"scores":	[-7.87175363966196]
								}, {
									"case":	401,
									"scores":	[-7.87175363966196]
								}, {
									"case":	402,
									"scores":	[-7.87175363966196]
								}, {
									"case":	403,
									"scores":	[-7.87175363966196]
								}, {
									"case":	404,
									"scores":	[-7.87175363966196]
								}, {
									"case":	405,
									"scores":	[-7.87175363966196]
								}, {
									"case":	406,
									"scores":	[-7.87175363966196]
								}, {
									"case":	407,
									"scores":	[-7.87175363966196]
								}, {
									"case":	408,
									"scores":	[-7.87175363966196]
								}, {
									"case":	409,
									"scores":	[-7.87175363966196]
								}, {
									"case":	410,
									"scores":	[-7.87175363966196]
								}, {
									"case":	411,
									"scores":	[-7.87175363966196]
								}, {
									"case":	412,
									"scores":	[-7.87175363966196]
								}, {
									"case":	413,
									"scores":	[-7.87175363966196]
								}, {
									"case":	414,
									"scores":	[-7.87175363966196]
								}, {
									"case":	415,
									"scores":	[-7.87175363966196]
								}, {
									"case":	416,
									"scores":	[-7.87175363966196]
								}, {
									"case":	417,
									"scores":	[-7.87175363966196]
								}, {
									"case":	418,
									"scores":	[-7.87175363966196]
								}, {
									"case":	419,
									"scores":	[-7.87175363966196]
								}, {
									"case":	420,
									"scores":	[-7.87175363966196]
								}, {
									"case":	421,
									"scores":	[-7.87175363966196]
								}, {
									"case":	422,
									"scores":	[-7.87175363966196]
								}, {
									"case":	423,
									"scores":	[-7.87175363966196]
								}, {
									"case":	424,
									"scores":	[-7.87175363966196]
								}, {
									"case":	425,
									"scores":	[-7.87175363966196]
								}, {
									"case":	426,
									"scores":	[-7.87175363966196]
								}, {
									"case":	427,
									"scores":	[-7.87175363966196]
								}, {
									"case":	428,
									"scores":	[-7.87175363966196]
								}, {
									"case":	429,
									"scores":	[-7.87175363966196]
								}, {
									"case":	430,
									"scores":	[-7.87175363966196]
								}, {
									"case":	431,
									"scores":	[-7.87175363966196]
								}, {
									"case":	432,
									"scores":	[-7.87175363966196]
								}, {
									"case":	433,
									"scores":	[-7.87175363966196]
								}, {
									"case":	434,
									"scores":	[-7.87175363966196]
								}, {
									"case":	435,
									"scores":	[-7.87175363966196]
								}, {
									"case":	436,
									"scores":	[-7.87175363966196]
								}, {
									"case":	437,
									"scores":	[-7.87175363966196]
								}, {
									"case":	438,
									"scores":	[-7.87175363966196]
								}, {
									"case":	439,
									"scores":	[-7.87175363966196]
								}, {
									"case":	440,
									"scores":	[-7.87175363966196]
								}, {
									"case":	441,
									"scores":	[-7.87175363966196]
								}, {
									"case":	442,
									"scores":	[-7.87175363966196]
								}, {
									"case":	443,
									"scores":	[-7.87175363966196]
								}, {
									"case":	444,
									"scores":	[-7.87175363966196]
								}, {
									"case":	445,
									"scores":	[-7.87175363966196]
								}, {
									"case":	446,
									"scores":	[-7.87175363966196]
								}, {
									"case":	447,
									"scores":	[-7.87175363966196]
								}, {
									"case":	448,
									"scores":	[-7.87175363966196]
								}, {
									"case":	449,
									"scores":	[-7.87175363966196]
								}, {
									"case":	450,
									"scores":	[-7.87175363966196]
								}, {
									"case":	451,
									"scores":	[-7.87175363966196]
								}, {
									"case":	452,
									"scores":	[-11.989909345361962, -13.266604692361961, -12.09546372666196, -9.56158075446196, -10.718744554461962, -11.115207470361963, -11.622330584661961, -10.684025764461961, -12.09546372666196, -11.383639609661961, -11.884574609661961, -12.13061352346196, -9.41859390646196, -11.884574609661961, -12.09546372666196, -10.47255337346196, -11.884574609661961, -11.611152923461962, -11.074368455661961, -11.316467349461959, -11.240155757661961, -10.82707860966196, -12.09546372666196, -11.383639609661961, -12.13061352346196, -12.13061352346196, -11.884574609661961, -11.383639609661961, -12.13061352346196, -11.884574609661961, -11.884574609661961, -12.09546372666196, -12.09546372666196, -12.09546372666196, -11.884574609661961, -11.884574609661961, -12.09546372666196, -12.09546372666196, -12.09546372666196, -12.09546372666196, -12.09546372666196, -12.09546372666196, -12.09546372666196, -12.09546372666196, -12.09546372666196, -12.09546372666196, -12.09546372666196, -11.884574609661961, -11.884574609661961, -11.884574609661961, -11.884574609661961, -11.884574609661961, -11.884574609661961, -12.09546372666196, -11.884574609661961, -12.09546372666196, -11.884574609661961, -12.09546372666196, -12.09546372666196, -11.884574609661961, -11.884574609661961, -11.884574609661961, -11.884574609661961]
								}]
						}, {
							"switch":	59,
							"types":	[[8], [2, 3], [], [], [], [], [], [], [], [], [], [], [1], [], [], [7], [], [4, 5, 6]],
							"begin_line":	418,
							"begin_column":	3,
							"end_line":	465,
							"end_column":	3,
							"patch_codes":	["if (__is_neg(\"\", \"L418\", 28, &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(object), sizeof (object), &(zobj->ce), sizeof (zobj->ce), &(retval), sizeof (retval), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties), sizeof (zobj->properties), &(rv), sizeof (rv), &(property_info->offset), sizeof (property_info->offset), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce), &(zobj->guards), sizeof (zobj->guards), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy))) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if (((zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0) || __is_neg(\"\", \"L418\", 28, &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(object), sizeof (object), &(zobj->ce), sizeof (zobj->ce), &(retval), sizeof (retval), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties), sizeof (zobj->properties), &(rv), sizeof (rv), &(property_info->offset), sizeof (property_info->offset), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce), &(zobj->guards), sizeof (zobj->guards), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy))) && !guard->in_get) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if ((zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) || __is_neg(\"\", \"L418\", 28, &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(object), sizeof (object), &(zobj->ce), sizeof (zobj->ce), &(retval), sizeof (retval), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties), sizeof (zobj->properties), &(rv), sizeof (rv), &(property_info->offset), sizeof (property_info->offset), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce), &(zobj->guards), sizeof (zobj->guards), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy))) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if (zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if (zobj->ce->__get && !guard->in_get) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if (zobj->ce->__get && printf(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n", "if ((zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) && !__is_neg(\"\", \"L418\", 28, &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(member), sizeof (member), &(zobj), sizeof (zobj), &(property_info), sizeof (property_info), &(object), sizeof (object), &(zobj->ce), sizeof (zobj->ce), &(retval), sizeof (retval), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties), sizeof (zobj->properties), &(rv), sizeof (rv), &(property_info->offset), sizeof (property_info->offset), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->flags), sizeof (property_info->flags), &(type), sizeof (type), &(key), sizeof (key), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce), &(zobj->guards), sizeof (zobj->guards), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy))) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.2902043798281433, -6.5914276708281445, -6.3345164798281441, -7.840826669828143, -7.7334606698281432, -7.6936545798281442, -8.1492060798281436, -8.3138384908281449, -8.369314979828145, -7.578043949828146, -7.9000549798281439, -8.6579430798281454, -6.2489715908281447, -7.9000549798281439, -8.369314979828145, -7.9000549798281439, -5.5455709698281446, -8.7412467698281446, -8.1330982698281442, -7.3669968398281451, -8.369314979828145, -7.578043949828146, -8.6579430798281454, -8.6579430798281454, -7.9000549798281439, -7.9000549798281439, -7.9000549798281439, -7.9000549798281439]
								}, {
									"case":	2,
									"scores":	[-5.6287012414281445, -4.9299245324281458, -4.6730133414281454, -6.1793235314281452, -6.0719575314281453, -6.0321514414281445, -6.4877029414281449, -6.6523353524281461, -6.7078118414281453, -5.9165408114281455, -6.238551841428146, -6.9964399414281448, -4.5874684524281459, -6.238551841428146, -6.7078118414281453, -6.238551841428146, -3.8840678314281458, -7.0797436314281459, -6.4715951314281455, -5.7054937014281455, -6.7078118414281453, -5.9165408114281455, -6.9964399414281448, -6.9964399414281448, -6.238551841428146, -6.238551841428146, -6.238551841428146, -6.238551841428146]
								}, {
									"case":	3,
									"scores":	[-5.6287012414281445, -4.9299245324281458, -4.6730133414281454, -6.1793235314281452, -6.0719575314281453, -6.0321514414281445, -6.4877029414281449, -6.6523353524281461, -6.7078118414281453, -5.9165408114281455, -6.238551841428146, -6.9964399414281448, -4.5874684524281459, -6.238551841428146, -6.7078118414281453, -6.238551841428146, -3.8840678314281458, -7.0797436314281459, -6.4715951314281455, -5.7054937014281455, -6.7078118414281453, -5.9165408114281455, -6.9964399414281448, -6.9964399414281448, -6.238551841428146, -6.238551841428146, -6.238551841428146, -6.238551841428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-3.912023005428146]
								}, {
									"case":	7,
									"scores":	[-3.912023005428146]
								}, {
									"case":	8,
									"scores":	[-5.6287012414281445, -4.9299245324281458, -4.6730133414281454, -6.1793235314281452, -6.0719575314281453, -6.0321514414281445, -6.4877029414281449, -6.6523353524281461, -6.7078118414281453, -5.9165408114281455, -6.238551841428146, -6.9964399414281448, -4.5874684524281459, -6.238551841428146, -6.7078118414281453, -6.238551841428146, -3.8840678314281458, -7.0797436314281459, -6.4715951314281455, -5.7054937014281455, -6.7078118414281453, -5.9165408114281455, -6.9964399414281448, -6.9964399414281448, -6.238551841428146, -6.238551841428146, -6.238551841428146, -6.238551841428146]
								}]
						}, {
							"switch":	83,
							"types":	[[], [], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], []],
							"begin_line":	418,
							"begin_column":	3,
							"end_line":	465,
							"end_column":	3,
							"patch_codes":	["if (!__is_neg(\"\", \"L418\", 63, &(zobj), sizeof (zobj), &(zobj->ce), sizeof (zobj->ce), &(zobj->ce->__get), sizeof (zobj->ce->__get), &(member), sizeof (member), &(property_info), sizeof (property_info), &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(retval), sizeof (retval), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties), sizeof (zobj->properties), &(object), sizeof (object), &(property_info->offset), sizeof (property_info->offset), &(zobj->properties_table), sizeof (zobj->properties_table), &(rv), sizeof (rv), &(property_info->flags), sizeof (property_info->flags), &(key), sizeof (key), &(type), sizeof (type), &(tmp_member), sizeof (tmp_member), &(zobj->ce->name), sizeof (zobj->ce->name), &(silent), sizeof (silent), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce), &(zobj->guards), sizeof (zobj->guards), &(zobj->ce->type), sizeof (zobj->ce->type), &(zobj->ce->name_length), sizeof (zobj->ce->name_length), &(zobj->ce->parent), sizeof (zobj->ce->parent), &(zobj->ce->refcount), sizeof (zobj->ce->refcount), &(zobj->ce->ce_flags), sizeof (zobj->ce->ce_flags), &(zobj->ce->default_properties_table), sizeof (zobj->ce->default_properties_table), &(zobj->ce->default_static_members_table), sizeof (zobj->ce->default_static_members_table), &(zobj->ce->static_members_table), sizeof (zobj->ce->static_members_table), &(zobj->ce->default_properties_count), sizeof (zobj->ce->default_properties_count), &(zobj->ce->default_static_members_count), sizeof (zobj->ce->default_static_members_count), &(zobj->ce->constructor), sizeof (zobj->ce->constructor), &(zobj->ce->destructor), sizeof (zobj->ce->destructor), &(zobj->ce->clone), sizeof (zobj->ce->clone), &(zobj->ce->__set), sizeof (zobj->ce->__set), &(zobj->ce->__unset), sizeof (zobj->ce->__unset), &(zobj->ce->__isset), sizeof (zobj->ce->__isset), &(zobj->ce->__call), sizeof (zobj->ce->__call), &(zobj->ce->__callstatic), sizeof (zobj->ce->__callstatic), &(zobj->ce->__tostring), sizeof (zobj->ce->__tostring), &(zobj->ce->serialize_func), sizeof (zobj->ce->serialize_func), &(zobj->ce->unserialize_func), sizeof (zobj->ce->unserialize_func), &(zobj->ce->create_object), sizeof (zobj->ce->create_object), &(zobj->ce->get_iterator), sizeof (zobj->ce->get_iterator), &(zobj->ce->interface_gets_implemented), sizeof (zobj->ce->interface_gets_implemented), &(zobj->ce->get_static_method), sizeof (zobj->ce->get_static_method), &(zobj->ce->serialize), sizeof (zobj->ce->serialize), &(zobj->ce->unserialize), sizeof (zobj->ce->unserialize), &(zobj->ce->interfaces), sizeof (zobj->ce->interfaces), &(zobj->ce->num_interfaces), sizeof (zobj->ce->num_interfaces), &(zobj->ce->traits), sizeof (zobj->ce->traits), &(zobj->ce->num_traits), sizeof (zobj->ce->num_traits), &(zobj->ce->trait_aliases), sizeof (zobj->ce->trait_aliases), &(zobj->ce->trait_precedences), sizeof (zobj->ce->trait_precedences), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)))\n    if (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n        zval_addref_p(object);\n        if (zval_isref_p(object)) {\n            do {\n                if (zval_refcount_p(*((&object))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&object));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&object))->value;\n                            (*new_zv).type = (**(&object)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&object) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        guard->in_get = 1;\n        rv = zend_std_call_getter(object, member);\n        guard->in_get = 0;\n        if (rv) {\n            retval = &rv;\n            if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n                if (zval_refcount_p(rv) > 0) {\n                    zval *tmp = rv;\n                    do {\n                        (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                    } while (0);\n                    *rv = *tmp;\n                    _zval_copy_ctor((rv));\n                    zval_unset_isref_p(rv);\n                    zval_set_refcount_p(rv, 0);\n                }\n                if (__builtin_expect((*rv).type != 5, 0)) {\n                    zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n                }\n            }\n        } else {\n            retval = &(executor_globals.uninitialized_zval_ptr);\n        }\n        _zval_ptr_dtor((&object));\n    } else {\n        if (zobj->ce->__get && guard && guard->in_get == 1) {\n            if ((*member).value.str.val[0] == '\\x00') {\n                if ((*member).value.str.len == 0) {\n                    zend_error((1 << 0L), \"Cannot access empty property\");\n                } else {\n                    zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n                }\n            }\n        }\n        if (!silent) {\n            zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n        }\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n", "if (!__is_neg(\"\", \"L418\", 63, &(zobj), sizeof (zobj), &(zobj->ce), sizeof (zobj->ce), &(zobj->ce->__get), sizeof (zobj->ce->__get), &(member), sizeof (member), &(property_info), sizeof (property_info), &(guard), sizeof (guard), &(guard->in_get), sizeof (guard->in_get), &(retval), sizeof (retval), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties), sizeof (zobj->properties), &(object), sizeof (object), &(property_info->offset), sizeof (property_info->offset), &(zobj->properties_table), sizeof (zobj->properties_table), &(rv), sizeof (rv), &(property_info->flags), sizeof (property_info->flags), &(key), sizeof (key), &(type), sizeof (type), &(tmp_member), sizeof (tmp_member), &(zobj->ce->name), sizeof (zobj->ce->name), &(silent), sizeof (silent), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce), &(zobj->guards), sizeof (zobj->guards), &(zobj->ce->type), sizeof (zobj->ce->type), &(zobj->ce->name_length), sizeof (zobj->ce->name_length), &(zobj->ce->parent), sizeof (zobj->ce->parent), &(zobj->ce->refcount), sizeof (zobj->ce->refcount), &(zobj->ce->ce_flags), sizeof (zobj->ce->ce_flags), &(zobj->ce->default_properties_table), sizeof (zobj->ce->default_properties_table), &(zobj->ce->default_static_members_table), sizeof (zobj->ce->default_static_members_table), &(zobj->ce->static_members_table), sizeof (zobj->ce->static_members_table), &(zobj->ce->default_properties_count), sizeof (zobj->ce->default_properties_count), &(zobj->ce->default_static_members_count), sizeof (zobj->ce->default_static_members_count), &(zobj->ce->constructor), sizeof (zobj->ce->constructor), &(zobj->ce->destructor), sizeof (zobj->ce->destructor), &(zobj->ce->clone), sizeof (zobj->ce->clone), &(zobj->ce->__set), sizeof (zobj->ce->__set), &(zobj->ce->__unset), sizeof (zobj->ce->__unset), &(zobj->ce->__isset), sizeof (zobj->ce->__isset), &(zobj->ce->__call), sizeof (zobj->ce->__call), &(zobj->ce->__callstatic), sizeof (zobj->ce->__callstatic), &(zobj->ce->__tostring), sizeof (zobj->ce->__tostring), &(zobj->ce->serialize_func), sizeof (zobj->ce->serialize_func), &(zobj->ce->unserialize_func), sizeof (zobj->ce->unserialize_func), &(zobj->ce->create_object), sizeof (zobj->ce->create_object), &(zobj->ce->get_iterator), sizeof (zobj->ce->get_iterator), &(zobj->ce->interface_gets_implemented), sizeof (zobj->ce->interface_gets_implemented), &(zobj->ce->get_static_method), sizeof (zobj->ce->get_static_method), &(zobj->ce->serialize), sizeof (zobj->ce->serialize), &(zobj->ce->unserialize), sizeof (zobj->ce->unserialize), &(zobj->ce->interfaces), sizeof (zobj->ce->interfaces), &(zobj->ce->num_interfaces), sizeof (zobj->ce->num_interfaces), &(zobj->ce->traits), sizeof (zobj->ce->traits), &(zobj->ce->num_traits), sizeof (zobj->ce->num_traits), &(zobj->ce->trait_aliases), sizeof (zobj->ce->trait_aliases), &(zobj->ce->trait_precedences), sizeof (zobj->ce->trait_precedences), &(guard->in_set), sizeof (guard->in_set), &(guard->in_unset), sizeof (guard->in_unset), &(guard->in_isset), sizeof (guard->in_isset), &(guard->dummy), sizeof (guard->dummy)) && (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get)) {\n    zval_addref_p(object);\n    if (zval_isref_p(object)) {\n        do {\n            if (zval_refcount_p(*((&object))) > 1) {\n                zval *new_zv;\n                zval_delref_p(*(&object));\n                do {\n                    (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                } while (0);\n                do {\n                    do {\n                        (new_zv)->value = (*(&object))->value;\n                        (*new_zv).type = (**(&object)).type;\n                    } while (0);\n                    zval_set_refcount_p(new_zv, 1);\n                    zval_unset_isref_p(new_zv);\n                } while (0);\n                *(&object) = new_zv;\n                _zval_copy_ctor((new_zv));\n            }\n        } while (0);\n    }\n    guard->in_get = 1;\n    rv = zend_std_call_getter(object, member);\n    guard->in_get = 0;\n    if (rv) {\n        retval = &rv;\n        if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n            if (zval_refcount_p(rv) > 0) {\n                zval *tmp = rv;\n                do {\n                    (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                    ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                } while (0);\n                *rv = *tmp;\n                _zval_copy_ctor((rv));\n                zval_unset_isref_p(rv);\n                zval_set_refcount_p(rv, 0);\n            }\n            if (__builtin_expect((*rv).type != 5, 0)) {\n                zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n            }\n        }\n    } else {\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n    _zval_ptr_dtor((&object));\n} else {\n    if (zobj->ce->__get && guard && guard->in_get == 1) {\n        if ((*member).value.str.val[0] == '\\x00') {\n            if ((*member).value.str.len == 0) {\n                zend_error((1 << 0L), \"Cannot access empty property\");\n            } else {\n                zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n            }\n        }\n    }\n    if (!silent) {\n        zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n    }\n    retval = &(executor_globals.uninitialized_zval_ptr);\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-10.215045409661961, -10.52342481966196, -10.743533719661961, -8.70873521966196, -10.10767940966196, -9.66442311966196, -8.96564641066196, -10.688057230661961, -10.743533719661961, -9.95226268966196, -10.274273719661961, -11.032161819661962, -10.06787331966196, -10.274273719661961, -10.743533719661961, -8.62319033066196, -10.274273719661961, -11.115465509661961, -7.91978970966196, -10.507317009661961, -10.030098419661961, -9.74121557966196, -10.743533719661961, -9.95226268966196, -11.032161819661962, -11.032161819661962, -10.274273719661961, -9.95226268966196, -11.032161819661962, -10.274273719661961, -10.274273719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.274273719661961, -10.274273719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.743533719661961, -10.274273719661961, -10.274273719661961, -10.274273719661961, -10.274273719661961, -10.274273719661961, -10.274273719661961, -10.743533719661961, -10.274273719661961, -10.743533719661961, -10.274273719661961, -10.743533719661961, -10.743533719661961, -10.274273719661961, -10.274273719661961, -10.274273719661961, -10.274273719661961]
								}, {
									"case":	2,
									"scores":	[-11.181021065661961, -11.489400475661959, -11.709509375661961, -9.67471087566196, -11.07365506566196, -10.630398775661961, -9.93162206666196, -11.654032886661961, -11.709509375661961, -10.91823834566196, -11.240249375661961, -11.998137475661959, -11.033848975661961, -11.240249375661961, -11.709509375661961, -9.58916598666196, -11.240249375661961, -12.08144116566196, -8.88576536566196, -11.47329266566196, -10.99607407566196, -10.707191235661961, -11.709509375661961, -10.91823834566196, -11.998137475661959, -11.998137475661959, -11.240249375661961, -10.91823834566196, -11.998137475661959, -11.240249375661961, -11.240249375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.240249375661961, -11.240249375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.709509375661961, -11.240249375661961, -11.240249375661961, -11.240249375661961, -11.240249375661961, -11.240249375661961, -11.240249375661961, -11.709509375661961, -11.240249375661961, -11.709509375661961, -11.240249375661961, -11.709509375661961, -11.709509375661961, -11.240249375661961, -11.240249375661961, -11.240249375661961, -11.240249375661961]
								}]
						}]
				}, {
					"line":	407,
					"switches":	[{
							"switch":	56,
							"types":	[[], [], [], [], [], [], [], [], [], [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], [], [], [], [], [], []],
							"begin_line":	408,
							"begin_column":	0,
							"end_line":	408,
							"end_column":	0,
							"patch_codes":	["(executor_globals.std_property_info).flags = (-1)", "(executor_globals.std_property_info).flags = (0)", "(executor_globals.std_property_info).flags = (1)", "(executor_globals.std_property_info).flags = (2)", "(executor_globals.std_property_info).flags = (3)", "(executor_globals.std_property_info).flags = (5)", "(executor_globals.std_property_info).flags = (6)", "(executor_globals.std_property_info).flags = (8)", "(executor_globals.std_property_info).h = (-1)", "(executor_globals.std_property_info).h = (0)", "(executor_globals.std_property_info).h = (1)", "(executor_globals.std_property_info).h = (2)", "(executor_globals.std_property_info).h = (3)", "(executor_globals.std_property_info).h = (5)", "(executor_globals.std_property_info).h = (6)", "(executor_globals.std_property_info).h = (8)", "(executor_globals.std_property_info).name = (*(member)).value.str.val", "(executor_globals.std_property_info).name = (*(object)).value.str.val", "(executor_globals.std_property_info).name = (*(rv)).value.str.val", "(executor_globals.std_property_info).name = (*(tmp_member)).value.str.val", "(executor_globals.std_property_info).name_length = (*(member)).value.str.len", "(executor_globals.std_property_info).name_length = (*(object)).value.str.len", "(executor_globals.std_property_info).name_length = (*(rv)).value.str.len", "(executor_globals.std_property_info).name_length = (*(tmp_member)).value.str.len", "(executor_globals.std_property_info).name_length = (-1)", "(executor_globals.std_property_info).name_length = (0)", "(executor_globals.std_property_info).name_length = (1)", "(executor_globals.std_property_info).name_length = (2)", "(executor_globals.std_property_info).name_length = (3)", "(executor_globals.std_property_info).name_length = (5)", "(executor_globals.std_property_info).name_length = (6)", "(executor_globals.std_property_info).name_length = (8)", "(executor_globals.std_property_info).name_length = (silent)", "(executor_globals.std_property_info).name_length = (type)", "(executor_globals.std_property_info).offset = (-1)", "(executor_globals.std_property_info).offset = (0)", "(executor_globals.std_property_info).offset = (1)", "(executor_globals.std_property_info).offset = (2)", "(executor_globals.std_property_info).offset = (3)", "(executor_globals.std_property_info).offset = (5)", "(executor_globals.std_property_info).offset = (6)", "(executor_globals.std_property_info).offset = (8)", "(executor_globals.std_property_info).offset = (silent)", "(executor_globals.std_property_info).offset = (type)", "(tmp_member)->is_ref__gc = (-1)", "(tmp_member)->is_ref__gc = (0)", "(tmp_member)->is_ref__gc = (1)", "(tmp_member)->is_ref__gc = (2)", "(tmp_member)->is_ref__gc = (3)", "(tmp_member)->is_ref__gc = (5)", "(tmp_member)->is_ref__gc = (6)", "(tmp_member)->is_ref__gc = (8)", "(tmp_member)->refcount__gc = (-1)", "(tmp_member)->refcount__gc = (0)", "(tmp_member)->refcount__gc = (1)", "(tmp_member)->refcount__gc = (2)", "(tmp_member)->refcount__gc = (3)", "(tmp_member)->refcount__gc = (5)", "(tmp_member)->refcount__gc = (6)", "(tmp_member)->refcount__gc = (8)", "_convert_to_string(((member)))", "_convert_to_string(((object)))", "_convert_to_string(((rv)))", "_convert_to_string(((tmp_member)))", "_efree(((member)))", "_efree(((object)))", "_efree(((rv)))", "_efree(((tmp_member)))", "_zend_hash_init(((zobj)->guards), (0), (((void *)0)), (((void *)0)), (0))", "_zend_hash_init(((zobj)->properties), (0), (((void *)0)), ((void (*)(void *))_zval_ptr_dtor), (0))", "_zval_copy_ctor(((member)))", "_zval_copy_ctor(((object)))", "_zval_copy_ctor(((rv)))", "_zval_copy_ctor(((tmp_member)))", "_zval_copy_ctor((*(retval)))", "_zval_copy_ctor_func((member))", "_zval_copy_ctor_func((object))", "_zval_copy_ctor_func((rv))", "_zval_copy_ctor_func((tmp_member))", "_zval_dtor(((member)))", "_zval_dtor(((object)))", "_zval_dtor(((rv)))", "_zval_dtor(((tmp_member)))", "_zval_dtor_func((member))", "_zval_dtor_func((object))", "_zval_dtor_func((rv))", "_zval_dtor_func((tmp_member))", "_zval_ptr_dtor((&(member)))", "_zval_ptr_dtor((&(object)))", "_zval_ptr_dtor((&(rv)))", "_zval_ptr_dtor((&(tmp_member)))", "convert_to_boolean((member))", "convert_to_boolean((object))", "convert_to_boolean((rv))", "convert_to_boolean((tmp_member))", "gc_remove_zval_from_buffer((member))", "gc_remove_zval_from_buffer((object))", "gc_remove_zval_from_buffer((rv))", "gc_remove_zval_from_buffer((tmp_member))", "gc_zval_check_possible_root(((member)))", "gc_zval_check_possible_root(((object)))", "gc_zval_check_possible_root(((rv)))", "gc_zval_check_possible_root(((tmp_member)))", "gc_zval_possible_root((member))", "gc_zval_possible_root((object))", "gc_zval_possible_root((rv))", "gc_zval_possible_root((tmp_member))", "i_zval_ptr_dtor((member))", "i_zval_ptr_dtor((object))", "i_zval_ptr_dtor((rv))", "i_zval_ptr_dtor((tmp_member))", "key = (key)", "member = (member)", "member = (object)", "member = (rv)", "member = (tmp_member)", "property_info = (property_info)", "property_info = zend_get_property_info_quick((zobj)->ce, member, (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (object), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (rv), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, (tmp_member), (zobj->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, ((zobj)->ce->__get != ((void *)0)), key)", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), (key))", "rebuild_object_properties((zobj))", "retval = &(member)", "retval = &(object)", "retval = &(rv)", "retval = &(tmp_member)", "retval = (retval)", "rv = (member)", "rv = (object)", "rv = (rv)", "rv = (tmp_member)", "rv = zend_std_call_getter((member), member)", "rv = zend_std_call_getter((object), member)", "rv = zend_std_call_getter((rv), member)", "rv = zend_std_call_getter((tmp_member), member)", "rv = zend_std_call_getter(object, (member))", "rv = zend_std_call_getter(object, (object))", "rv = zend_std_call_getter(object, (rv))", "rv = zend_std_call_getter(object, (tmp_member))", "silent = (-1)", "silent = (0)", "silent = (1)", "silent = (2)", "silent = (3)", "silent = (5)", "silent = (6)", "silent = (8)", "silent = (silent)", "silent = (type)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", (zobj)->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(member)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(object)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(rv)).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*(tmp_member)).value.str.val)", "zobj = (zobj)", "zval_addref_p((member))", "zval_addref_p((object))", "zval_addref_p((rv))", "zval_addref_p((tmp_member))", "zval_addref_p(*((retval)))", "zval_delref_p((member))", "zval_delref_p((object))", "zval_delref_p((rv))", "zval_delref_p((tmp_member))", "zval_delref_p(*((retval)))", "zval_set_refcount_p((member), 0)", "zval_set_refcount_p((object), 0)", "zval_set_refcount_p((rv), 0)", "zval_set_refcount_p((tmp_member), 0)", "zval_unset_isref_p((member))", "zval_unset_isref_p((object))", "zval_unset_isref_p((rv))", "zval_unset_isref_p((tmp_member))", "(executor_globals.argument_stack) = zend_vm_stack_new_page(((16 * 1024) - 16))", "(executor_globals.std_property_info).flags = 256", "(executor_globals.std_property_info).offset = -1", "(tmp_member)->is_ref__gc = 0", "(tmp_member)->refcount__gc = 1", "_convert_to_string((tmp_member))", "_zval_copy_ctor((rv))", "_zval_copy_ctor((tmp_member))", "_zval_ptr_dtor((&object))", "_zval_ptr_dtor((&tmp_member))", "exit(1)", "key = ((void *)0)", "member = tmp_member", "property_info = zend_get_property_info_quick(zobj->ce, member, (zobj->ce->__get != ((void *)0)), key)", "retval = &(executor_globals.uninitialized_zval_ptr)", "retval = &rv", "rv = zend_std_call_getter(object, member)", "silent = (type == 3)", "zend_error((1 << 0L), \"Cannot access empty property\")", "zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error((1 << 3L), \"A non well formed numeric value encountered\")", "zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val)", "zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val)", "zend_error_noreturn((1 << 0L), \"Cannot access empty property\")", "zend_error_noreturn((1 << 0L), \"Cannot access property started with '\\\\0'\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __call\")", "zend_error_noreturn((1 << 0L), \"Cannot get arguments for __callstatic\")", "zobj = ((zend_object *)((executor_globals.objects_store).object_buckets[(*object).value.obj.handle].bucket.obj.object))", "zval_addref_p(*(retval))", "zval_addref_p(object)", "zval_delref_p(*(retval))", "zval_set_refcount_p(rv, 0)", "zval_unset_isref_p(rv)"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-7.89195634697948]
								}, {
									"case":	2,
									"scores":	[-7.89195634697948]
								}, {
									"case":	3,
									"scores":	[-7.89195634697948]
								}, {
									"case":	4,
									"scores":	[-7.89195634697948]
								}, {
									"case":	5,
									"scores":	[-7.89195634697948]
								}, {
									"case":	6,
									"scores":	[-7.89195634697948]
								}, {
									"case":	7,
									"scores":	[-7.89195634697948]
								}, {
									"case":	8,
									"scores":	[-7.89195634697948]
								}, {
									"case":	9,
									"scores":	[-7.89195634697948]
								}, {
									"case":	10,
									"scores":	[-7.89195634697948]
								}, {
									"case":	11,
									"scores":	[-7.89195634697948]
								}, {
									"case":	12,
									"scores":	[-7.89195634697948]
								}, {
									"case":	13,
									"scores":	[-7.89195634697948]
								}, {
									"case":	14,
									"scores":	[-7.89195634697948]
								}, {
									"case":	15,
									"scores":	[-7.89195634697948]
								}, {
									"case":	16,
									"scores":	[-7.89195634697948]
								}, {
									"case":	17,
									"scores":	[-7.89195634697948]
								}, {
									"case":	18,
									"scores":	[-7.89195634697948]
								}, {
									"case":	19,
									"scores":	[-7.89195634697948]
								}, {
									"case":	20,
									"scores":	[-7.89195634697948]
								}, {
									"case":	21,
									"scores":	[-7.89195634697948]
								}, {
									"case":	22,
									"scores":	[-7.89195634697948]
								}, {
									"case":	23,
									"scores":	[-7.89195634697948]
								}, {
									"case":	24,
									"scores":	[-7.89195634697948]
								}, {
									"case":	25,
									"scores":	[-7.89195634697948]
								}, {
									"case":	26,
									"scores":	[-7.89195634697948]
								}, {
									"case":	27,
									"scores":	[-7.89195634697948]
								}, {
									"case":	28,
									"scores":	[-7.89195634697948]
								}, {
									"case":	29,
									"scores":	[-7.89195634697948]
								}, {
									"case":	30,
									"scores":	[-7.89195634697948]
								}, {
									"case":	31,
									"scores":	[-7.89195634697948]
								}, {
									"case":	32,
									"scores":	[-7.89195634697948]
								}, {
									"case":	33,
									"scores":	[-7.89195634697948]
								}, {
									"case":	34,
									"scores":	[-7.89195634697948]
								}, {
									"case":	35,
									"scores":	[-7.89195634697948]
								}, {
									"case":	36,
									"scores":	[-7.89195634697948]
								}, {
									"case":	37,
									"scores":	[-7.89195634697948]
								}, {
									"case":	38,
									"scores":	[-7.89195634697948]
								}, {
									"case":	39,
									"scores":	[-7.89195634697948]
								}, {
									"case":	40,
									"scores":	[-7.89195634697948]
								}, {
									"case":	41,
									"scores":	[-7.89195634697948]
								}, {
									"case":	42,
									"scores":	[-7.89195634697948]
								}, {
									"case":	43,
									"scores":	[-7.89195634697948]
								}, {
									"case":	44,
									"scores":	[-7.89195634697948]
								}, {
									"case":	45,
									"scores":	[-7.89195634697948]
								}, {
									"case":	46,
									"scores":	[-7.89195634697948]
								}, {
									"case":	47,
									"scores":	[-7.89195634697948]
								}, {
									"case":	48,
									"scores":	[-7.89195634697948]
								}, {
									"case":	49,
									"scores":	[-7.89195634697948]
								}, {
									"case":	50,
									"scores":	[-7.89195634697948]
								}, {
									"case":	51,
									"scores":	[-7.89195634697948]
								}, {
									"case":	52,
									"scores":	[-7.89195634697948]
								}, {
									"case":	53,
									"scores":	[-7.89195634697948]
								}, {
									"case":	54,
									"scores":	[-7.89195634697948]
								}, {
									"case":	55,
									"scores":	[-7.89195634697948]
								}, {
									"case":	56,
									"scores":	[-7.89195634697948]
								}, {
									"case":	57,
									"scores":	[-7.89195634697948]
								}, {
									"case":	58,
									"scores":	[-7.89195634697948]
								}, {
									"case":	59,
									"scores":	[-7.89195634697948]
								}, {
									"case":	60,
									"scores":	[-7.89195634697948]
								}, {
									"case":	61,
									"scores":	[-7.89195634697948]
								}, {
									"case":	62,
									"scores":	[-7.89195634697948]
								}, {
									"case":	63,
									"scores":	[-7.89195634697948]
								}, {
									"case":	64,
									"scores":	[-7.89195634697948]
								}, {
									"case":	65,
									"scores":	[-7.89195634697948]
								}, {
									"case":	66,
									"scores":	[-7.89195634697948]
								}, {
									"case":	67,
									"scores":	[-7.89195634697948]
								}, {
									"case":	68,
									"scores":	[-7.89195634697948]
								}, {
									"case":	69,
									"scores":	[-7.89195634697948]
								}, {
									"case":	70,
									"scores":	[-7.89195634697948]
								}, {
									"case":	71,
									"scores":	[-7.89195634697948]
								}, {
									"case":	72,
									"scores":	[-7.89195634697948]
								}, {
									"case":	73,
									"scores":	[-7.89195634697948]
								}, {
									"case":	74,
									"scores":	[-7.89195634697948]
								}, {
									"case":	75,
									"scores":	[-7.89195634697948]
								}, {
									"case":	76,
									"scores":	[-7.89195634697948]
								}, {
									"case":	77,
									"scores":	[-7.89195634697948]
								}, {
									"case":	78,
									"scores":	[-7.89195634697948]
								}, {
									"case":	79,
									"scores":	[-7.89195634697948]
								}, {
									"case":	80,
									"scores":	[-7.89195634697948]
								}, {
									"case":	81,
									"scores":	[-7.89195634697948]
								}, {
									"case":	82,
									"scores":	[-7.89195634697948]
								}, {
									"case":	83,
									"scores":	[-7.89195634697948]
								}, {
									"case":	84,
									"scores":	[-7.89195634697948]
								}, {
									"case":	85,
									"scores":	[-7.89195634697948]
								}, {
									"case":	86,
									"scores":	[-7.89195634697948]
								}, {
									"case":	87,
									"scores":	[-7.89195634697948]
								}, {
									"case":	88,
									"scores":	[-7.89195634697948]
								}, {
									"case":	89,
									"scores":	[-7.89195634697948]
								}, {
									"case":	90,
									"scores":	[-7.89195634697948]
								}, {
									"case":	91,
									"scores":	[-7.89195634697948]
								}, {
									"case":	92,
									"scores":	[-7.89195634697948]
								}, {
									"case":	93,
									"scores":	[-7.89195634697948]
								}, {
									"case":	94,
									"scores":	[-7.89195634697948]
								}, {
									"case":	95,
									"scores":	[-7.89195634697948]
								}, {
									"case":	96,
									"scores":	[-7.89195634697948]
								}, {
									"case":	97,
									"scores":	[-7.89195634697948]
								}, {
									"case":	98,
									"scores":	[-7.89195634697948]
								}, {
									"case":	99,
									"scores":	[-7.89195634697948]
								}, {
									"case":	100,
									"scores":	[-7.89195634697948]
								}, {
									"case":	101,
									"scores":	[-7.89195634697948]
								}, {
									"case":	102,
									"scores":	[-7.89195634697948]
								}, {
									"case":	103,
									"scores":	[-7.89195634697948]
								}, {
									"case":	104,
									"scores":	[-7.89195634697948]
								}, {
									"case":	105,
									"scores":	[-7.89195634697948]
								}, {
									"case":	106,
									"scores":	[-7.89195634697948]
								}, {
									"case":	107,
									"scores":	[-7.89195634697948]
								}, {
									"case":	108,
									"scores":	[-7.89195634697948]
								}, {
									"case":	109,
									"scores":	[-7.89195634697948]
								}, {
									"case":	110,
									"scores":	[-7.89195634697948]
								}, {
									"case":	111,
									"scores":	[-7.89195634697948]
								}, {
									"case":	112,
									"scores":	[-7.89195634697948]
								}, {
									"case":	113,
									"scores":	[-7.89195634697948]
								}, {
									"case":	114,
									"scores":	[-7.89195634697948]
								}, {
									"case":	115,
									"scores":	[-7.89195634697948]
								}, {
									"case":	116,
									"scores":	[-7.89195634697948]
								}, {
									"case":	117,
									"scores":	[-7.89195634697948]
								}, {
									"case":	118,
									"scores":	[-7.89195634697948]
								}, {
									"case":	119,
									"scores":	[-7.89195634697948]
								}, {
									"case":	120,
									"scores":	[-7.89195634697948]
								}, {
									"case":	121,
									"scores":	[-7.89195634697948]
								}, {
									"case":	122,
									"scores":	[-7.89195634697948]
								}, {
									"case":	123,
									"scores":	[-7.89195634697948]
								}, {
									"case":	124,
									"scores":	[-7.89195634697948]
								}, {
									"case":	125,
									"scores":	[-7.89195634697948]
								}, {
									"case":	126,
									"scores":	[-7.89195634697948]
								}, {
									"case":	127,
									"scores":	[-7.89195634697948]
								}, {
									"case":	128,
									"scores":	[-7.89195634697948]
								}, {
									"case":	129,
									"scores":	[-7.89195634697948]
								}, {
									"case":	130,
									"scores":	[-7.89195634697948]
								}, {
									"case":	131,
									"scores":	[-7.89195634697948]
								}, {
									"case":	132,
									"scores":	[-7.89195634697948]
								}, {
									"case":	133,
									"scores":	[-7.89195634697948]
								}, {
									"case":	134,
									"scores":	[-7.89195634697948]
								}, {
									"case":	135,
									"scores":	[-7.89195634697948]
								}, {
									"case":	136,
									"scores":	[-7.89195634697948]
								}, {
									"case":	137,
									"scores":	[-7.89195634697948]
								}, {
									"case":	138,
									"scores":	[-7.89195634697948]
								}, {
									"case":	139,
									"scores":	[-7.89195634697948]
								}, {
									"case":	140,
									"scores":	[-7.89195634697948]
								}, {
									"case":	141,
									"scores":	[-7.89195634697948]
								}, {
									"case":	142,
									"scores":	[-7.89195634697948]
								}, {
									"case":	143,
									"scores":	[-7.89195634697948]
								}, {
									"case":	144,
									"scores":	[-7.89195634697948]
								}, {
									"case":	145,
									"scores":	[-7.89195634697948]
								}, {
									"case":	146,
									"scores":	[-7.89195634697948]
								}, {
									"case":	147,
									"scores":	[-7.89195634697948]
								}, {
									"case":	148,
									"scores":	[-7.89195634697948]
								}, {
									"case":	149,
									"scores":	[-7.89195634697948]
								}, {
									"case":	150,
									"scores":	[-7.89195634697948]
								}, {
									"case":	151,
									"scores":	[-7.89195634697948]
								}, {
									"case":	152,
									"scores":	[-7.89195634697948]
								}, {
									"case":	153,
									"scores":	[-7.89195634697948]
								}, {
									"case":	154,
									"scores":	[-7.89195634697948]
								}, {
									"case":	155,
									"scores":	[-7.89195634697948]
								}, {
									"case":	156,
									"scores":	[-7.89195634697948]
								}, {
									"case":	157,
									"scores":	[-7.89195634697948]
								}, {
									"case":	158,
									"scores":	[-7.89195634697948]
								}, {
									"case":	159,
									"scores":	[-7.89195634697948]
								}, {
									"case":	160,
									"scores":	[-7.89195634697948]
								}, {
									"case":	161,
									"scores":	[-7.89195634697948]
								}, {
									"case":	162,
									"scores":	[-7.89195634697948]
								}, {
									"case":	163,
									"scores":	[-7.89195634697948]
								}, {
									"case":	164,
									"scores":	[-7.89195634697948]
								}, {
									"case":	165,
									"scores":	[-7.89195634697948]
								}, {
									"case":	166,
									"scores":	[-7.89195634697948]
								}, {
									"case":	167,
									"scores":	[-7.89195634697948]
								}, {
									"case":	168,
									"scores":	[-7.89195634697948]
								}, {
									"case":	169,
									"scores":	[-7.89195634697948]
								}, {
									"case":	170,
									"scores":	[-7.89195634697948]
								}, {
									"case":	171,
									"scores":	[-7.89195634697948]
								}, {
									"case":	172,
									"scores":	[-7.89195634697948]
								}, {
									"case":	173,
									"scores":	[-7.89195634697948]
								}, {
									"case":	174,
									"scores":	[-7.89195634697948]
								}, {
									"case":	175,
									"scores":	[-7.89195634697948]
								}, {
									"case":	176,
									"scores":	[-7.89195634697948]
								}, {
									"case":	177,
									"scores":	[-7.89195634697948]
								}, {
									"case":	178,
									"scores":	[-7.89195634697948]
								}, {
									"case":	179,
									"scores":	[-7.89195634697948]
								}, {
									"case":	180,
									"scores":	[-7.89195634697948]
								}, {
									"case":	181,
									"scores":	[-7.89195634697948]
								}, {
									"case":	182,
									"scores":	[-7.89195634697948]
								}, {
									"case":	183,
									"scores":	[-7.89195634697948]
								}, {
									"case":	184,
									"scores":	[-7.89195634697948]
								}, {
									"case":	185,
									"scores":	[-7.89195634697948]
								}, {
									"case":	186,
									"scores":	[-7.89195634697948]
								}, {
									"case":	187,
									"scores":	[-7.89195634697948]
								}, {
									"case":	188,
									"scores":	[-7.89195634697948]
								}, {
									"case":	189,
									"scores":	[-7.89195634697948]
								}, {
									"case":	190,
									"scores":	[-7.89195634697948]
								}, {
									"case":	191,
									"scores":	[-7.89195634697948]
								}, {
									"case":	192,
									"scores":	[-7.89195634697948]
								}, {
									"case":	193,
									"scores":	[-7.89195634697948]
								}, {
									"case":	194,
									"scores":	[-7.89195634697948]
								}, {
									"case":	195,
									"scores":	[-7.89195634697948]
								}, {
									"case":	196,
									"scores":	[-7.89195634697948]
								}, {
									"case":	197,
									"scores":	[-7.89195634697948]
								}, {
									"case":	198,
									"scores":	[-7.89195634697948]
								}, {
									"case":	199,
									"scores":	[-7.89195634697948]
								}, {
									"case":	200,
									"scores":	[-7.89195634697948]
								}, {
									"case":	201,
									"scores":	[-7.89195634697948]
								}, {
									"case":	202,
									"scores":	[-7.89195634697948]
								}, {
									"case":	203,
									"scores":	[-7.89195634697948]
								}, {
									"case":	204,
									"scores":	[-7.89195634697948]
								}, {
									"case":	205,
									"scores":	[-7.89195634697948]
								}, {
									"case":	206,
									"scores":	[-7.89195634697948]
								}, {
									"case":	207,
									"scores":	[-7.89195634697948]
								}, {
									"case":	208,
									"scores":	[-7.89195634697948]
								}, {
									"case":	209,
									"scores":	[-7.89195634697948]
								}, {
									"case":	210,
									"scores":	[-7.89195634697948]
								}, {
									"case":	211,
									"scores":	[-7.89195634697948]
								}, {
									"case":	212,
									"scores":	[-7.89195634697948]
								}, {
									"case":	213,
									"scores":	[-7.89195634697948]
								}, {
									"case":	214,
									"scores":	[-7.89195634697948]
								}]
						}, {
							"switch":	57,
							"types":	[[6], [], [], [], [], [], [], [], [], [], [], [], [1], [], [], [3, 4, 5], [], [2]],
							"begin_line":	408,
							"begin_column":	2,
							"end_line":	466,
							"end_column":	2,
							"patch_codes":	["if (__is_neg(\"\", \"L408\", 22, &(zobj), sizeof (zobj), &(retval), sizeof (retval), &(property_info), sizeof (property_info), &(zobj->properties), sizeof (zobj->properties), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->offset), sizeof (property_info->offset), &(zobj->ce), sizeof (zobj->ce), &(member), sizeof (member), &(property_info->flags), sizeof (property_info->flags), &(object), sizeof (object), &(key), sizeof (key), &(rv), sizeof (rv), &(type), sizeof (type), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(zobj->guards), sizeof (zobj->guards), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce))) {\n    zend_guard *guard = ((void *)0);\n    if (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n        zval_addref_p(object);\n        if (zval_isref_p(object)) {\n            do {\n                if (zval_refcount_p(*((&object))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&object));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&object))->value;\n                            (*new_zv).type = (**(&object)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&object) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        guard->in_get = 1;\n        rv = zend_std_call_getter(object, member);\n        guard->in_get = 0;\n        if (rv) {\n            retval = &rv;\n            if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n                if (zval_refcount_p(rv) > 0) {\n                    zval *tmp = rv;\n                    do {\n                        (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                    } while (0);\n                    *rv = *tmp;\n                    _zval_copy_ctor((rv));\n                    zval_unset_isref_p(rv);\n                    zval_set_refcount_p(rv, 0);\n                }\n                if (__builtin_expect((*rv).type != 5, 0)) {\n                    zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n                }\n            }\n        } else {\n            retval = &(executor_globals.uninitialized_zval_ptr);\n        }\n        _zval_ptr_dtor((&object));\n    } else {\n        if (zobj->ce->__get && guard && guard->in_get == 1) {\n            if ((*member).value.str.val[0] == '\\x00') {\n                if ((*member).value.str.len == 0) {\n                    zend_error((1 << 0L), \"Cannot access empty property\");\n                } else {\n                    zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n                }\n            }\n        }\n        if (!silent) {\n            zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n        }\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n}\n", "if (__builtin_expect(!property_info, 0)) {\n    zend_guard *guard = ((void *)0);\n    if (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n        zval_addref_p(object);\n        if (zval_isref_p(object)) {\n            do {\n                if (zval_refcount_p(*((&object))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&object));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&object))->value;\n                            (*new_zv).type = (**(&object)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&object) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        guard->in_get = 1;\n        rv = zend_std_call_getter(object, member);\n        guard->in_get = 0;\n        if (rv) {\n            retval = &rv;\n            if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n                if (zval_refcount_p(rv) > 0) {\n                    zval *tmp = rv;\n                    do {\n                        (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                    } while (0);\n                    *rv = *tmp;\n                    _zval_copy_ctor((rv));\n                    zval_unset_isref_p(rv);\n                    zval_set_refcount_p(rv, 0);\n                }\n                if (__builtin_expect((*rv).type != 5, 0)) {\n                    zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n                }\n            }\n        } else {\n            retval = &(executor_globals.uninitialized_zval_ptr);\n        }\n        _zval_ptr_dtor((&object));\n    } else {\n        if (zobj->ce->__get && guard && guard->in_get == 1) {\n            if ((*member).value.str.val[0] == '\\x00') {\n                if ((*member).value.str.len == 0) {\n                    zend_error((1 << 0L), \"Cannot access empty property\");\n                } else {\n                    zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n                }\n            }\n        }\n        if (!silent) {\n            zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n        }\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n}\n", "if (__builtin_expect(!property_info, 0) || ((__builtin_expect((property_info->flags & 1) == 0, 1) && property_info->offset >= 0) ? (zobj->properties ? ((retval = (zval **)zobj->properties_table[property_info->offset]) == ((void *)0)) : (*(retval = &zobj->properties_table[property_info->offset]) == ((void *)0))) : (__builtin_expect(!zobj->properties, 0) || __builtin_expect(fprintf(zobj->properties, property_info->name, property_info->name_length + 1, property_info->h, (void **)&retval) == -1, 0)))) {\n    zend_guard *guard = ((void *)0);\n    if (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n        zval_addref_p(object);\n        if (zval_isref_p(object)) {\n            do {\n                if (zval_refcount_p(*((&object))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&object));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&object))->value;\n                            (*new_zv).type = (**(&object)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&object) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        guard->in_get = 1;\n        rv = zend_std_call_getter(object, member);\n        guard->in_get = 0;\n        if (rv) {\n            retval = &rv;\n            if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n                if (zval_refcount_p(rv) > 0) {\n                    zval *tmp = rv;\n                    do {\n                        (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                    } while (0);\n                    *rv = *tmp;\n                    _zval_copy_ctor((rv));\n                    zval_unset_isref_p(rv);\n                    zval_set_refcount_p(rv, 0);\n                }\n                if (__builtin_expect((*rv).type != 5, 0)) {\n                    zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n                }\n            }\n        } else {\n            retval = &(executor_globals.uninitialized_zval_ptr);\n        }\n        _zval_ptr_dtor((&object));\n    } else {\n        if (zobj->ce->__get && guard && guard->in_get == 1) {\n            if ((*member).value.str.val[0] == '\\x00') {\n                if ((*member).value.str.len == 0) {\n                    zend_error((1 << 0L), \"Cannot access empty property\");\n                } else {\n                    zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n                }\n            }\n        }\n        if (!silent) {\n            zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n        }\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n}\n", "if (__builtin_expect(!property_info, 0) || ((__builtin_expect((property_info->flags & 1) == 0, 1) && property_info->offset >= 0) ? (zobj->properties ? ((retval = (zval **)zobj->properties_table[property_info->offset]) == ((void *)0)) : (*(retval = &zobj->properties_table[property_info->offset]) == ((void *)0))) : (__builtin_expect(!zobj->properties, 0) || __builtin_expect(printf(zobj->properties, property_info->name, property_info->name_length + 1, property_info->h, (void **)&retval) == -1, 0)))) {\n    zend_guard *guard = ((void *)0);\n    if (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n        zval_addref_p(object);\n        if (zval_isref_p(object)) {\n            do {\n                if (zval_refcount_p(*((&object))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&object));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&object))->value;\n                            (*new_zv).type = (**(&object)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&object) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        guard->in_get = 1;\n        rv = zend_std_call_getter(object, member);\n        guard->in_get = 0;\n        if (rv) {\n            retval = &rv;\n            if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n                if (zval_refcount_p(rv) > 0) {\n                    zval *tmp = rv;\n                    do {\n                        (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                    } while (0);\n                    *rv = *tmp;\n                    _zval_copy_ctor((rv));\n                    zval_unset_isref_p(rv);\n                    zval_set_refcount_p(rv, 0);\n                }\n                if (__builtin_expect((*rv).type != 5, 0)) {\n                    zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n                }\n            }\n        } else {\n            retval = &(executor_globals.uninitialized_zval_ptr);\n        }\n        _zval_ptr_dtor((&object));\n    } else {\n        if (zobj->ce->__get && guard && guard->in_get == 1) {\n            if ((*member).value.str.val[0] == '\\x00') {\n                if ((*member).value.str.len == 0) {\n                    zend_error((1 << 0L), \"Cannot access empty property\");\n                } else {\n                    zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n                }\n            }\n        }\n        if (!silent) {\n            zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n        }\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n}\n", "if (__builtin_expect(!property_info, 0) || ((__builtin_expect((property_info->flags & 1) == 0, 1) && property_info->offset >= 0) ? (zobj->properties ? ((retval = (zval **)zobj->properties_table[property_info->offset]) == ((void *)0)) : (*(retval = &zobj->properties_table[property_info->offset]) == ((void *)0))) : (__builtin_expect(!zobj->properties, 0) || __builtin_expect(sprintf(zobj->properties, property_info->name, property_info->name_length + 1, property_info->h, (void **)&retval) == -1, 0)))) {\n    zend_guard *guard = ((void *)0);\n    if (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n        zval_addref_p(object);\n        if (zval_isref_p(object)) {\n            do {\n                if (zval_refcount_p(*((&object))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&object));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&object))->value;\n                            (*new_zv).type = (**(&object)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&object) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        guard->in_get = 1;\n        rv = zend_std_call_getter(object, member);\n        guard->in_get = 0;\n        if (rv) {\n            retval = &rv;\n            if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n                if (zval_refcount_p(rv) > 0) {\n                    zval *tmp = rv;\n                    do {\n                        (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                    } while (0);\n                    *rv = *tmp;\n                    _zval_copy_ctor((rv));\n                    zval_unset_isref_p(rv);\n                    zval_set_refcount_p(rv, 0);\n                }\n                if (__builtin_expect((*rv).type != 5, 0)) {\n                    zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n                }\n            }\n        } else {\n            retval = &(executor_globals.uninitialized_zval_ptr);\n        }\n        _zval_ptr_dtor((&object));\n    } else {\n        if (zobj->ce->__get && guard && guard->in_get == 1) {\n            if ((*member).value.str.val[0] == '\\x00') {\n                if ((*member).value.str.len == 0) {\n                    zend_error((1 << 0L), \"Cannot access empty property\");\n                } else {\n                    zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n                }\n            }\n        }\n        if (!silent) {\n            zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n        }\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n}\n", "if ((__builtin_expect(!property_info, 0) || ((__builtin_expect((property_info->flags & 1) == 0, 1) && property_info->offset >= 0) ? (zobj->properties ? ((retval = (zval **)zobj->properties_table[property_info->offset]) == ((void *)0)) : (*(retval = &zobj->properties_table[property_info->offset]) == ((void *)0))) : (__builtin_expect(!zobj->properties, 0) || __builtin_expect(zend_hash_quick_find(zobj->properties, property_info->name, property_info->name_length + 1, property_info->h, (void **)&retval) == -1, 0)))) && !__is_neg(\"\", \"L408\", 22, &(zobj), sizeof (zobj), &(retval), sizeof (retval), &(property_info), sizeof (property_info), &(zobj->properties), sizeof (zobj->properties), &(property_info->name), sizeof (property_info->name), &(property_info->name_length), sizeof (property_info->name_length), &(property_info->h), sizeof (property_info->h), &(zobj->properties_table), sizeof (zobj->properties_table), &(property_info->offset), sizeof (property_info->offset), &(zobj->ce), sizeof (zobj->ce), &(member), sizeof (member), &(property_info->flags), sizeof (property_info->flags), &(object), sizeof (object), &(key), sizeof (key), &(rv), sizeof (rv), &(type), sizeof (type), &(tmp_member), sizeof (tmp_member), &(silent), sizeof (silent), &(zobj->guards), sizeof (zobj->guards), &(property_info->doc_comment), sizeof (property_info->doc_comment), &(property_info->doc_comment_len), sizeof (property_info->doc_comment_len), &(property_info->ce), sizeof (property_info->ce))) {\n    zend_guard *guard = ((void *)0);\n    if (zobj->ce->__get && zend_get_property_guard(zobj, property_info, member, &guard) == 0 && !guard->in_get) {\n        zval_addref_p(object);\n        if (zval_isref_p(object)) {\n            do {\n                if (zval_refcount_p(*((&object))) > 1) {\n                    zval *new_zv;\n                    zval_delref_p(*(&object));\n                    do {\n                        (new_zv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(new_zv))->u.buffered = ((void *)0);\n                    } while (0);\n                    do {\n                        do {\n                            (new_zv)->value = (*(&object))->value;\n                            (*new_zv).type = (**(&object)).type;\n                        } while (0);\n                        zval_set_refcount_p(new_zv, 1);\n                        zval_unset_isref_p(new_zv);\n                    } while (0);\n                    *(&object) = new_zv;\n                    _zval_copy_ctor((new_zv));\n                }\n            } while (0);\n        }\n        guard->in_get = 1;\n        rv = zend_std_call_getter(object, member);\n        guard->in_get = 0;\n        if (rv) {\n            retval = &rv;\n            if (!zval_isref_p(rv) && (type == 1 || type == 2 || type == 6)) {\n                if (zval_refcount_p(rv) > 0) {\n                    zval *tmp = rv;\n                    do {\n                        (rv) = (zval *)_emalloc((sizeof(zval_gc_info)));\n                        ((zval_gc_info *)(rv))->u.buffered = ((void *)0);\n                    } while (0);\n                    *rv = *tmp;\n                    _zval_copy_ctor((rv));\n                    zval_unset_isref_p(rv);\n                    zval_set_refcount_p(rv, 0);\n                }\n                if (__builtin_expect((*rv).type != 5, 0)) {\n                    zend_error((1 << 3L), \"Indirect modification of overloaded property %s::$%s has no effect\", zobj->ce->name, (*member).value.str.val);\n                }\n            }\n        } else {\n            retval = &(executor_globals.uninitialized_zval_ptr);\n        }\n        _zval_ptr_dtor((&object));\n    } else {\n        if (zobj->ce->__get && guard && guard->in_get == 1) {\n            if ((*member).value.str.val[0] == '\\x00') {\n                if ((*member).value.str.len == 0) {\n                    zend_error((1 << 0L), \"Cannot access empty property\");\n                } else {\n                    zend_error((1 << 0L), \"Cannot access property started with '\\\\0'\");\n                }\n            }\n        }\n        if (!silent) {\n            zend_error((1 << 3L), \"Undefined property: %s::$%s\", zobj->ce->name, (*member).value.str.val);\n        }\n        retval = &(executor_globals.uninitialized_zval_ptr);\n    }\n}\n"],
							"prophet_scores":	[{
									"case":	1,
									"scores":	[-9.65613772732814, -10.250122823828141, -9.3300764368281435, -10.809343396828144, -10.520715296828143, -8.85306856682814, -10.051455296828143, -9.5408556068281438, -8.53761440682814, -10.974249033328146, -8.48416179332814, -10.148787596828143, -10.264430907328142, -10.814388372828144, -9.1138072078281436, -8.41040658682814, -9.31373787332814, -10.231832456828144, -11.522778696828144, -11.234150596828147, -10.442879566828145, -11.522778696828144]
								}, {
									"case":	2,
									"scores":	[-3.912023005428146]
								}, {
									"case":	3,
									"scores":	[-3.912023005428146]
								}, {
									"case":	4,
									"scores":	[-3.912023005428146]
								}, {
									"case":	5,
									"scores":	[-3.912023005428146]
								}, {
									"case":	6,
									"scores":	[-5.1741763890281458, -5.7681614855281467, -4.8481150985281456, -6.3273820585281442, -6.0387539585281447, -4.3711072285281451, -5.5694939585281453, -5.0588942685281451, -4.0556530685281462, -6.4922876950281454, -4.0022004550281434, -5.666826258528145, -5.7824695690281471, -6.3324270345281457, -4.6318458695281466, -3.9284452485281465, -4.8317765350281441, -5.7498711185281461, -7.0408173585281455, -6.752189258528146, -5.9609182285281461, -7.0408173585281455]
								}]
						}]
				}]
		}],
	"sizes":	[{
			"switch":	0,
			"case":	165,
			"size":	4
		}, {
			"switch":	1,
			"case":	1,
			"size":	4
		}, {
			"switch":	1,
			"case":	2,
			"size":	4
		}, {
			"switch":	1,
			"case":	50,
			"size":	4
		}, {
			"switch":	2,
			"case":	1,
			"size":	4
		}, {
			"switch":	2,
			"case":	2,
			"size":	4
		}, {
			"switch":	3,
			"case":	166,
			"size":	39
		}, {
			"switch":	4,
			"case":	1,
			"size":	39
		}, {
			"switch":	5,
			"case":	165,
			"size":	4
		}, {
			"switch":	6,
			"case":	1,
			"size":	4
		}, {
			"switch":	7,
			"case":	165,
			"size":	4
		}, {
			"switch":	8,
			"case":	1,
			"size":	4
		}, {
			"switch":	8,
			"case":	2,
			"size":	4
		}, {
			"switch":	8,
			"case":	3,
			"size":	4
		}, {
			"switch":	9,
			"case":	165,
			"size":	4
		}, {
			"switch":	10,
			"case":	1,
			"size":	4
		}, {
			"switch":	11,
			"case":	1,
			"size":	4
		}, {
			"switch":	11,
			"case":	2,
			"size":	4
		}, {
			"switch":	12,
			"case":	165,
			"size":	4
		}, {
			"switch":	13,
			"case":	1,
			"size":	4
		}, {
			"switch":	14,
			"case":	417,
			"size":	168
		}, {
			"switch":	15,
			"case":	1,
			"size":	160
		}, {
			"switch":	15,
			"case":	2,
			"size":	160
		}, {
			"switch":	15,
			"case":	3,
			"size":	160
		}, {
			"switch":	15,
			"case":	12,
			"size":	160
		}, {
			"switch":	16,
			"case":	415,
			"size":	16
		}, {
			"switch":	17,
			"case":	1,
			"size":	16
		}, {
			"switch":	17,
			"case":	2,
			"size":	16
		}, {
			"switch":	17,
			"case":	3,
			"size":	16
		}, {
			"switch":	18,
			"case":	423,
			"size":	119
		}, {
			"switch":	19,
			"case":	1,
			"size":	119
		}, {
			"switch":	20,
			"case":	424,
			"size":	119
		}, {
			"switch":	21,
			"case":	1,
			"size":	119
		}, {
			"switch":	22,
			"case":	424,
			"size":	119
		}, {
			"switch":	23,
			"case":	1,
			"size":	119
		}, {
			"switch":	24,
			"case":	423,
			"size":	154
		}, {
			"switch":	25,
			"case":	1,
			"size":	154
		}, {
			"switch":	26,
			"case":	424,
			"size":	149
		}, {
			"switch":	27,
			"case":	1,
			"size":	149
		}, {
			"switch":	28,
			"case":	423,
			"size":	149
		}, {
			"switch":	29,
			"case":	1,
			"size":	149
		}, {
			"switch":	30,
			"case":	423,
			"size":	114
		}, {
			"switch":	31,
			"case":	1,
			"size":	114
		}, {
			"switch":	32,
			"case":	1,
			"size":	16
		}, {
			"switch":	32,
			"case":	2,
			"size":	16
		}, {
			"switch":	33,
			"case":	1,
			"size":	168
		}, {
			"switch":	33,
			"case":	2,
			"size":	168
		}, {
			"switch":	34,
			"case":	410,
			"size":	8
		}, {
			"switch":	35,
			"case":	1,
			"size":	8
		}, {
			"switch":	36,
			"case":	103,
			"size":	12
		}, {
			"switch":	36,
			"case":	104,
			"size":	12
		}, {
			"switch":	36,
			"case":	105,
			"size":	12
		}, {
			"switch":	37,
			"case":	1,
			"size":	12
		}, {
			"switch":	37,
			"case":	2,
			"size":	12
		}, {
			"switch":	37,
			"case":	3,
			"size":	12
		}, {
			"switch":	38,
			"case":	1,
			"size":	12
		}, {
			"switch":	38,
			"case":	2,
			"size":	12
		}, {
			"switch":	39,
			"case":	104,
			"size":	8
		}, {
			"switch":	39,
			"case":	105,
			"size":	8
		}, {
			"switch":	39,
			"case":	106,
			"size":	8
		}, {
			"switch":	40,
			"case":	1,
			"size":	8
		}, {
			"switch":	40,
			"case":	2,
			"size":	8
		}, {
			"switch":	40,
			"case":	3,
			"size":	8
		}, {
			"switch":	41,
			"case":	103,
			"size":	8
		}, {
			"switch":	41,
			"case":	104,
			"size":	8
		}, {
			"switch":	41,
			"case":	105,
			"size":	8
		}, {
			"switch":	42,
			"case":	1,
			"size":	8
		}, {
			"switch":	43,
			"case":	103,
			"size":	16
		}, {
			"switch":	43,
			"case":	104,
			"size":	16
		}, {
			"switch":	43,
			"case":	105,
			"size":	16
		}, {
			"switch":	44,
			"case":	1,
			"size":	16
		}, {
			"switch":	45,
			"case":	1,
			"size":	8
		}, {
			"switch":	45,
			"case":	2,
			"size":	8
		}, {
			"switch":	46,
			"case":	103,
			"size":	9
		}, {
			"switch":	46,
			"case":	104,
			"size":	9
		}, {
			"switch":	46,
			"case":	105,
			"size":	9
		}, {
			"switch":	47,
			"case":	1,
			"size":	9
		}, {
			"switch":	48,
			"case":	103,
			"size":	9
		}, {
			"switch":	48,
			"case":	104,
			"size":	9
		}, {
			"switch":	48,
			"case":	105,
			"size":	9
		}, {
			"switch":	49,
			"case":	1,
			"size":	9
		}, {
			"switch":	50,
			"case":	103,
			"size":	9
		}, {
			"switch":	50,
			"case":	104,
			"size":	9
		}, {
			"switch":	50,
			"case":	105,
			"size":	9
		}, {
			"switch":	51,
			"case":	1,
			"size":	9
		}, {
			"switch":	52,
			"case":	103,
			"size":	21
		}, {
			"switch":	52,
			"case":	104,
			"size":	21
		}, {
			"switch":	52,
			"case":	105,
			"size":	21
		}, {
			"switch":	53,
			"case":	1,
			"size":	21
		}, {
			"switch":	54,
			"case":	105,
			"size":	21
		}, {
			"switch":	54,
			"case":	106,
			"size":	21
		}, {
			"switch":	54,
			"case":	107,
			"size":	21
		}, {
			"switch":	55,
			"case":	1,
			"size":	21
		}, {
			"switch":	57,
			"case":	1,
			"size":	22
		}, {
			"switch":	57,
			"case":	6,
			"size":	22
		}, {
			"switch":	58,
			"case":	452,
			"size":	63
		}, {
			"switch":	59,
			"case":	1,
			"size":	28
		}, {
			"switch":	59,
			"case":	2,
			"size":	28
		}, {
			"switch":	59,
			"case":	3,
			"size":	28
		}, {
			"switch":	59,
			"case":	8,
			"size":	28
		}, {
			"switch":	60,
			"case":	447,
			"size":	11
		}, {
			"switch":	61,
			"case":	1,
			"size":	11
		}, {
			"switch":	62,
			"case":	447,
			"size":	11
		}, {
			"switch":	63,
			"case":	1,
			"size":	11
		}, {
			"switch":	63,
			"case":	2,
			"size":	11
		}, {
			"switch":	63,
			"case":	50,
			"size":	11
		}, {
			"switch":	64,
			"case":	447,
			"size":	11
		}, {
			"switch":	65,
			"case":	1,
			"size":	11
		}, {
			"switch":	66,
			"case":	1,
			"size":	11
		}, {
			"switch":	66,
			"case":	2,
			"size":	11
		}, {
			"switch":	67,
			"case":	448,
			"size":	16
		}, {
			"switch":	68,
			"case":	1,
			"size":	16
		}, {
			"switch":	69,
			"case":	447,
			"size":	16
		}, {
			"switch":	70,
			"case":	1,
			"size":	16
		}, {
			"switch":	71,
			"case":	448,
			"size":	16
		}, {
			"switch":	72,
			"case":	1,
			"size":	16
		}, {
			"switch":	73,
			"case":	450,
			"size":	11
		}, {
			"switch":	74,
			"case":	1,
			"size":	11
		}, {
			"switch":	74,
			"case":	2,
			"size":	11
		}, {
			"switch":	74,
			"case":	3,
			"size":	11
		}, {
			"switch":	75,
			"case":	447,
			"size":	11
		}, {
			"switch":	76,
			"case":	1,
			"size":	11
		}, {
			"switch":	77,
			"case":	449,
			"size":	11
		}, {
			"switch":	78,
			"case":	1,
			"size":	11
		}, {
			"switch":	78,
			"case":	2,
			"size":	11
		}, {
			"switch":	78,
			"case":	3,
			"size":	11
		}, {
			"switch":	78,
			"case":	8,
			"size":	11
		}, {
			"switch":	79,
			"case":	1,
			"size":	11
		}, {
			"switch":	79,
			"case":	2,
			"size":	11
		}, {
			"switch":	80,
			"case":	1,
			"size":	11
		}, {
			"switch":	80,
			"case":	2,
			"size":	11
		}, {
			"switch":	81,
			"case":	447,
			"size":	11
		}, {
			"switch":	82,
			"case":	1,
			"size":	11
		}, {
			"switch":	83,
			"case":	1,
			"size":	63
		}, {
			"switch":	83,
			"case":	2,
			"size":	63
		}],
	"func_locations":	[{
			"file":	"Zend/zend_object_handlers.c",
			"functions":	[{
					"function":	"__uint16_identity",
					"begin":	32,
					"end":	36
				}, {
					"function":	"__uint32_identity",
					"begin":	38,
					"end":	42
				}, {
					"function":	"__uint64_identity",
					"begin":	44,
					"end":	48
				}, {
					"function":	"__zend_calloc",
					"begin":	103,
					"end":	108
				}, {
					"function":	"__zend_malloc",
					"begin":	93,
					"end":	101
				}, {
					"function":	"__zend_realloc",
					"begin":	110,
					"end":	118
				}, {
					"function":	"_zval_copy_ctor",
					"begin":	40,
					"end":	46
				}, {
					"function":	"_zval_dtor",
					"begin":	30,
					"end":	36
				}, {
					"function":	"atof",
					"begin":	24,
					"end":	28
				}, {
					"function":	"atoi",
					"begin":	360,
					"end":	364
				}, {
					"function":	"atol",
					"begin":	365,
					"end":	369
				}, {
					"function":	"atoll",
					"begin":	372,
					"end":	376
				}, {
					"function":	"bsearch",
					"begin":	19,
					"end":	43
				}, {
					"function":	"feof_unlocked",
					"begin":	124,
					"end":	128
				}, {
					"function":	"ferror_unlocked",
					"begin":	131,
					"end":	135
				}, {
					"function":	"fgetc_unlocked",
					"begin":	52,
					"end":	56
				}, {
					"function":	"fputc_unlocked",
					"begin":	87,
					"end":	91
				}, {
					"function":	"gc_remove_from_buffer",
					"begin":	187,
					"end":	194
				}, {
					"function":	"gc_zval_check_possible_root",
					"begin":	180,
					"end":	185
				}, {
					"function":	"getc_unlocked",
					"begin":	62,
					"end":	66
				}, {
					"function":	"getchar",
					"begin":	43,
					"end":	47
				}, {
					"function":	"getchar_unlocked",
					"begin":	69,
					"end":	73
				}, {
					"function":	"gnu_dev_major",
					"begin":	79,
					"end":	79
				}, {
					"function":	"gnu_dev_makedev",
					"begin":	81,
					"end":	81
				}, {
					"function":	"gnu_dev_minor",
					"begin":	80,
					"end":	80
				}, {
					"function":	"i_zend_is_true",
					"begin":	101,
					"end":	156
				}, {
					"function":	"i_zval_ptr_dtor",
					"begin":	80,
					"end":	99
				}, {
					"function":	"is_derived_class",
					"begin":	224,
					"end":	235
				}, {
					"function":	"is_numeric_string",
					"begin":	102,
					"end":	224
				}, {
					"function":	"putc_unlocked",
					"begin":	97,
					"end":	101
				}, {
					"function":	"putchar",
					"begin":	78,
					"end":	82
				}, {
					"function":	"putchar_unlocked",
					"begin":	104,
					"end":	108
				}, {
					"function":	"rebuild_object_properties",
					"begin":	56,
					"end":	92
				}, {
					"function":	"safe_free_zval_ptr_rel",
					"begin":	62,
					"end":	69
				}, {
					"function":	"vprintf",
					"begin":	35,
					"end":	39
				}, {
					"function":	"zend_arg_types_stack_2_pop",
					"begin":	355,
					"end":	363
				}, {
					"function":	"zend_arg_types_stack_3_pop",
					"begin":	365,
					"end":	374
				}, {
					"function":	"zend_check_private",
					"begin":	903,
					"end":	906
				}, {
					"function":	"zend_check_private_int",
					"begin":	868,
					"end":	900
				}, {
					"function":	"zend_check_property_access",
					"begin":	329,
					"end":	351
				}, {
					"function":	"zend_check_protected",
					"begin":	911,
					"end":	935
				}, {
					"function":	"zend_dval_to_lval",
					"begin":	77,
					"end":	83
				}, {
					"function":	"zend_get_function_root_class",
					"begin":	938,
					"end":	941
				}, {
					"function":	"zend_get_property_guard",
					"begin":	354,
					"end":	376
				}, {
					"function":	"zend_get_property_info",
					"begin":	323,
					"end":	326
				}, {
					"function":	"zend_get_property_info_quick",
					"begin":	238,
					"end":	320
				}, {
					"function":	"zend_get_user_call_function",
					"begin":	944,
					"end":	957
				}, {
					"function":	"zend_get_user_callstatic_function",
					"begin":	1087,
					"end":	1100
				}, {
					"function":	"zend_inline_hash_func",
					"begin":	261,
					"end":	288
				}, {
					"function":	"zend_memnstr",
					"begin":	226,
					"end":	257
				}, {
					"function":	"zend_memrchr",
					"begin":	259,
					"end":	274
				}, {
					"function":	"zend_objects_store_del_ref_by_handle",
					"begin":	71,
					"end":	73
				}, {
					"function":	"zend_ptr_stack_2_pop",
					"begin":	93,
					"end":	98
				}, {
					"function":	"zend_ptr_stack_2_push",
					"begin":	72,
					"end":	83
				}, {
					"function":	"zend_ptr_stack_3_pop",
					"begin":	85,
					"end":	91
				}, {
					"function":	"zend_ptr_stack_3_push",
					"begin":	58,
					"end":	70
				}, {
					"function":	"zend_ptr_stack_pop",
					"begin":	108,
					"end":	112
				}, {
					"function":	"zend_ptr_stack_push",
					"begin":	100,
					"end":	106
				}, {
					"function":	"zend_std_call_getter",
					"begin":	113,
					"end":	135
				}, {
					"function":	"zend_std_call_issetter",
					"begin":	184,
					"end":	202
				}, {
					"function":	"zend_std_call_setter",
					"begin":	138,
					"end":	165
				}, {
					"function":	"zend_std_call_unsetter",
					"begin":	168,
					"end":	181
				}, {
					"function":	"zend_std_call_user_call",
					"begin":	819,
					"end":	861
				}, {
					"function":	"zend_std_callstatic_user_call",
					"begin":	1043,
					"end":	1084
				}, {
					"function":	"zend_std_cast_object_tostring",
					"begin":	1460,
					"end":	1527
				}, {
					"function":	"zend_std_compare_objects",
					"begin":	1289,
					"end":	1333
				}, {
					"function":	"zend_std_get_closure",
					"begin":	1530,
					"end":	1554
				}, {
					"function":	"zend_std_get_constructor",
					"begin":	1250,
					"end":	1284
				}, {
					"function":	"zend_std_get_debug_info",
					"begin":	106,
					"end":	110
				}, {
					"function":	"zend_std_get_method",
					"begin":	960,
					"end":	1040
				}, {
					"function":	"zend_std_get_properties",
					"begin":	95,
					"end":	103
				}, {
					"function":	"zend_std_get_property_ptr_ptr",
					"begin":	668,
					"end":	737
				}, {
					"function":	"zend_std_get_static_method",
					"begin":	1105,
					"end":	1191
				}, {
					"function":	"zend_std_get_static_property",
					"begin":	1194,
					"end":	1240
				}, {
					"function":	"zend_std_has_dimension",
					"begin":	637,
					"end":	665
				}, {
					"function":	"zend_std_has_property",
					"begin":	1336,
					"end":	1427
				}, {
					"function":	"zend_std_object_get_class",
					"begin":	1430,
					"end":	1436
				}, {
					"function":	"zend_std_object_get_class_name",
					"begin":	1439,
					"end":	1457
				}, {
					"function":	"zend_std_read_dimension",
					"begin":	585,
					"end":	616
				}, {
					"function":	"zend_std_read_property",
					"begin":	379,
					"end":	473
				}, {
					"function":	"zend_std_unset_dimension",
					"begin":	805,
					"end":	816
				}, {
					"function":	"zend_std_unset_property",
					"begin":	740,
					"end":	802
				}, {
					"function":	"zend_std_unset_static_property",
					"begin":	1243,
					"end":	1247
				}, {
					"function":	"zend_std_write_dimension",
					"begin":	619,
					"end":	634
				}, {
					"function":	"zend_std_write_property",
					"begin":	476,
					"end":	582
				}, {
					"function":	"zend_symtable_del",
					"begin":	355,
					"end":	359
				}, {
					"function":	"zend_symtable_exists",
					"begin":	369,
					"end":	373
				}, {
					"function":	"zend_symtable_find",
					"begin":	362,
					"end":	366
				}, {
					"function":	"zend_symtable_update",
					"begin":	348,
					"end":	352
				}, {
					"function":	"zend_symtable_update_current_key_ex",
					"begin":	375,
					"end":	379
				}, {
					"function":	"zend_verify_property_access",
					"begin":	205,
					"end":	221
				}, {
					"function":	"zend_vm_stack_alloc",
					"begin":	243,
					"end":	270
				}, {
					"function":	"zend_vm_stack_clear_multiple",
					"begin":	331,
					"end":	342
				}, {
					"function":	"zend_vm_stack_destroy",
					"begin":	197,
					"end":	206
				}, {
					"function":	"zend_vm_stack_extend",
					"begin":	208,
					"end":	213
				}, {
					"function":	"zend_vm_stack_free",
					"begin":	284,
					"end":	300
				}, {
					"function":	"zend_vm_stack_free_int",
					"begin":	272,
					"end":	282
				}, {
					"function":	"zend_vm_stack_get_arg",
					"begin":	344,
					"end":	353
				}, {
					"function":	"zend_vm_stack_init",
					"begin":	192,
					"end":	195
				}, {
					"function":	"zend_vm_stack_new_page",
					"begin":	183,
					"end":	190
				}, {
					"function":	"zend_vm_stack_pop",
					"begin":	231,
					"end":	241
				}, {
					"function":	"zend_vm_stack_push",
					"begin":	220,
					"end":	224
				}, {
					"function":	"zend_vm_stack_push_args",
					"begin":	302,
					"end":	329
				}, {
					"function":	"zend_vm_stack_push_nocheck",
					"begin":	226,
					"end":	229
				}, {
					"function":	"zend_vm_stack_top",
					"begin":	215,
					"end":	218
				}, {
					"function":	"zval_addref_p",
					"begin":	386,
					"end":	388
				}, {
					"function":	"zval_delref_p",
					"begin":	390,
					"end":	392
				}, {
					"function":	"zval_isref_p",
					"begin":	394,
					"end":	396
				}, {
					"function":	"zval_refcount_p",
					"begin":	378,
					"end":	380
				}, {
					"function":	"zval_set_isref_p",
					"begin":	398,
					"end":	400
				}, {
					"function":	"zval_set_isref_to_p",
					"begin":	406,
					"end":	408
				}, {
					"function":	"zval_set_refcount_p",
					"begin":	382,
					"end":	384
				}, {
					"function":	"zval_unset_isref_p",
					"begin":	402,
					"end":	404
				}]
		}]
}
